{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is Random Wire! Here you'll find some of most of my hobbies. Everything ranging from Arduino/Robotics, to Sherlock Holmes and The Orville, and maybe even some Ham Radio Stuff. Support Me If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. Patreon Ko-fi PayPal Other Projects KD8BXP's Youtube Channel KD8BXP's Blog Old Code Bender Sketches Arduino Libraries Word100 A library for the 100+ Word Shield, Little Buddy Talker, Big Buddy Talker, and updated for EZ-Comms Shield, made by Patrick Thomas Mitchell from Engineering Shock. Word100 Library Credits Copyright (c) 2017/2018/2019/2020 LeRoy Miller License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"Home"},{"location":"#this-is-random-wire","text":"Here you'll find some of most of my hobbies. Everything ranging from Arduino/Robotics, to Sherlock Holmes and The Orville, and maybe even some Ham Radio Stuff.","title":"This is Random Wire!"},{"location":"#support-me","text":"If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. Patreon Ko-fi PayPal","title":"Support Me"},{"location":"#other-projects","text":"KD8BXP's Youtube Channel KD8BXP's Blog Old Code Bender Sketches","title":"Other Projects"},{"location":"#arduino-libraries","text":"Word100 A library for the 100+ Word Shield, Little Buddy Talker, Big Buddy Talker, and updated for EZ-Comms Shield, made by Patrick Thomas Mitchell from Engineering Shock. Word100 Library","title":"Arduino Libraries"},{"location":"#credits","text":"Copyright (c) 2017/2018/2019/2020 LeRoy Miller","title":"Credits"},{"location":"#license","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"License"},{"location":"about/","text":"I am LeRoy Miller, KD8BXP Get my GPG public key from: gpg --keyserver pgp.mit.edu --recv-keys 5E5C9A9D My GPG finger print is: 9545 12FF F306 04E0 F6FB E4BB B6B7 DA61 5E5C 9A9D Session Chat ID: 05695db68c0d4aae3971b1409a75a7640843650f675825525ab1acf8bc5b487004 Keybase.io Twitter Github","title":"About Me"},{"location":"comingsoon/","text":"Coming SOOOOOOOOOON!!!!! SOOOOOOOON! REALLY SOME DAY SOOOOOOOOOON!!!","title":"My Cars"},{"location":"comingsoon/#coming-soooooooooon","text":"","title":"Coming SOOOOOOOOOON!!!!!"},{"location":"comingsoon/#soooooooon","text":"","title":"SOOOOOOOON!"},{"location":"comingsoon/#really-some-day-soooooooooon","text":"","title":"REALLY SOME DAY SOOOOOOOOOON!!!"},{"location":"hamradio/LoRaHam/","text":"LoRaHam Radio LoRaMaDor works, modified slightly for use in the 433Mhz band, currently operating on 432.300Mhz. Information: Created by Elvis Pf\u00fctzenreuter https://github.com/elvis-epx/LoRaMaDoR https://youtu.be/nXooq_4EkzU LoRaMaDoR - ham radio based on LoRa This project is inspired by LoRaHam. The major enhancement is a packet format which is more powerful and more extensible, allowing for true network formation. The implementation is a work in progress, and more documentation will be added as time permits. Console and command-line interface (CLI) Use the terminal software of your choice (screen, minicom, etc.) to connect to Arduino serial port. Set the speed to 115200bps and disable RTS/CTS handshaking if necessary. Alternatively, you can operate the console wirelessly using any Telnet client e.g. PuTTY. Just fill in your Wi-Fi configuration (details further down this document). Users can use the protocol almost directly, with a \"hands on\" sensation, the implementation fills in the red tape to generate a valid packet. For example, a user types: QC Chat tonight 22:00 at repeater 147.000 \"QC\" is the pseudo-destination for broadcast messages. The actual transmitted packet (minus the FEC suffix) is something like: QC PU5EPX-11:33 Chat tonight 22:00 at repeater 147.000 There are some commands, all start with ! (exclamation point): !callsign ABCDEF-1 !debug !help To show the currently configured callsign, call !callsign without a parameter. By default is FIXMEE-1. Type !help to get a list of all available commands. More examples Example of beacon packet, sent automatically every 10 minutes by every station: QB PU5EPX-11:2 bat=7.93V temp=25.4C wind=25.4kmh How to ping another station: PP5CRE-11:PING test123 Actual traffic: PP5CRE-11 PU5EPX-11:21,PING test123 PU5EPX-11 PP5CRE-11:54,PONG test123 Route request: PP5CRE-11:RREQ test123 Actual traffic: PP5CRE-11 PU5EPX-11:RREQ Possible response: PU5EPX-11 PP5CRE-11:RRSP PP5ABC PU5XYZ|PP5CRE-11 PU5ABC Packet format A LoRaMaDoR packet is composed by three parts: header, payload and FEC code. The header contains source callsign, destination callsign, and some parameters: Destination Source:Parameters Payload FEC There shall not be spaces within the header. If there is a payload, it is separated from the header by a single space. The FEC code is mandatory, and it is specified in its own section later on. Stations shall have 4 to 7 octets, shall not start with \"Q\", and may be suffixed by an SSID. Special or pseudo-callsigns are: QB (beacon) for automatic broadcast sent every 10 minutes, QC (think \"CQ\") for human broadcasting, and QL (\"loopback\") for debugging/testing. Parameters are a set of comma-separated list of items, for example: 123,A,B=C,D,E=FGH The parameters can be in three formats: naked number, naked key, and key=value. There shall be one and only one naked number in the parameter list: it is the packet ID. Together with the source callsign, it uniquely identifies the packet within the network in a 20-minute time window. This is used to e.g. avoid forwarding the same packet twice. Keys (naked or not) must be composed of capital letters and numbers only, and must start with a letter. Values may be composed of any characters except those used as delimiters in the header (space, comma, equal, etc.) A value can be empty and this should be handled different from a naked key e.g. in A=,B , B is naked while A has a value, which is an empty string. Implementations should allow for this distinction. Reserved parameters, added or handled by the core stack: PING asks for an automated PONG response. RREQ (route request) asks for an automated RRSP response. Intermediate routers are annotated in the message payload. C (confirmation) asks for a confirmation message (with CO flag) to be sent back by the destination. R signals the packet was forwarded. This parameter is automatically added and processed, and the user should not use it explicitly. Predefined parameters available for any application: T=number is an optional timestamp, as the UNIX timestamp (seconds since 1/1/1970 0:00 UTC) subtracted by 1552265462. If sub-second precision is required, the number may have decimal places. S=chars is an optional digital signature of the payload. Routing and forwarding Currently, diffusion routing is the only implemented strategy. FEC code Every packet is augmented by a 20-octet FEC (Forward Error Code) suffix. The FEC is a Reed-Solomon code. Since Reed-Solomon codes demand a fixed-size message, it is calculated as if the network packet was padded with nulls (binary zeros). In order to contemplate low-memory microcontrollers, which cannot handle RS codes above a certain size, two base sizes (and therefore two different RS codes) are used: 100/80 and 200/180. The reference FEC RS implementation is https://github.com/simonyipeter/Arduino-FEC . LoRa mode Packets shall be transmitted using LoRa explicit mode, so the packet size is known when it reaches the network layer to be parsed. CRC shall be disabled. In our experiments, LoRa packets often arrive with errors even under the best circunstances. Using maximum CR is not enough to prevent this, and LoRa CRC protection would discard lots of packets. Software-level FEC code seems to be the best solution. Console via Telnet The console can be operated via Telnet. This is more convenient e.g. when the Arduino is far away, perhaps positioned in a good antenna spot. This is possible because ESP32 TTGO has built-in support for Wi-Fi and TCP/IP. You just need to enter your network details in LoRaMaDoR via serial console, using the commands !ssid and !password. Then !reset and check the console for connection messages to confirm the network configuration is ok. Use the !wifi command to get the detailed status. The console and the !wifi command shows the IP address. But LoRaMaDoR also supports Bonjour (mDNS). For example, if callsign is configured to ABCDEF-1, the network name will be ABCDEF-1.local or abcdef-1.local (it is case-insensitive). While a Telnet client is connected, the serial console is silenced (save for Wi-Fi disconnection messages) and does not accept input. Once the Telnet connection is closed, the serial console is reenabled.","title":"LoRaHam/LoraMador/LoraAPS"},{"location":"hamradio/LoRaHam/#loraham-radio","text":"LoRaMaDor works, modified slightly for use in the 433Mhz band, currently operating on 432.300Mhz. Information: Created by Elvis Pf\u00fctzenreuter https://github.com/elvis-epx/LoRaMaDoR https://youtu.be/nXooq_4EkzU","title":"LoRaHam Radio"},{"location":"hamradio/LoRaHam/#loramador-ham-radio-based-on-lora","text":"This project is inspired by LoRaHam. The major enhancement is a packet format which is more powerful and more extensible, allowing for true network formation. The implementation is a work in progress, and more documentation will be added as time permits.","title":"LoRaMaDoR - ham radio based on LoRa"},{"location":"hamradio/LoRaHam/#console-and-command-line-interface-cli","text":"Use the terminal software of your choice (screen, minicom, etc.) to connect to Arduino serial port. Set the speed to 115200bps and disable RTS/CTS handshaking if necessary. Alternatively, you can operate the console wirelessly using any Telnet client e.g. PuTTY. Just fill in your Wi-Fi configuration (details further down this document). Users can use the protocol almost directly, with a \"hands on\" sensation, the implementation fills in the red tape to generate a valid packet. For example, a user types: QC Chat tonight 22:00 at repeater 147.000 \"QC\" is the pseudo-destination for broadcast messages. The actual transmitted packet (minus the FEC suffix) is something like: QC PU5EPX-11:33 Chat tonight 22:00 at repeater 147.000 There are some commands, all start with ! (exclamation point): !callsign ABCDEF-1 !debug !help To show the currently configured callsign, call !callsign without a parameter. By default is FIXMEE-1. Type !help to get a list of all available commands.","title":"Console and command-line interface (CLI)"},{"location":"hamradio/LoRaHam/#more-examples","text":"Example of beacon packet, sent automatically every 10 minutes by every station: QB PU5EPX-11:2 bat=7.93V temp=25.4C wind=25.4kmh How to ping another station: PP5CRE-11:PING test123 Actual traffic: PP5CRE-11 PU5EPX-11:21,PING test123 PU5EPX-11 PP5CRE-11:54,PONG test123 Route request: PP5CRE-11:RREQ test123 Actual traffic: PP5CRE-11 PU5EPX-11:RREQ Possible response: PU5EPX-11 PP5CRE-11:RRSP PP5ABC PU5XYZ|PP5CRE-11 PU5ABC","title":"More examples"},{"location":"hamradio/LoRaHam/#packet-format","text":"A LoRaMaDoR packet is composed by three parts: header, payload and FEC code. The header contains source callsign, destination callsign, and some parameters: Destination Source:Parameters Payload FEC There shall not be spaces within the header. If there is a payload, it is separated from the header by a single space. The FEC code is mandatory, and it is specified in its own section later on. Stations shall have 4 to 7 octets, shall not start with \"Q\", and may be suffixed by an SSID. Special or pseudo-callsigns are: QB (beacon) for automatic broadcast sent every 10 minutes, QC (think \"CQ\") for human broadcasting, and QL (\"loopback\") for debugging/testing. Parameters are a set of comma-separated list of items, for example: 123,A,B=C,D,E=FGH The parameters can be in three formats: naked number, naked key, and key=value. There shall be one and only one naked number in the parameter list: it is the packet ID. Together with the source callsign, it uniquely identifies the packet within the network in a 20-minute time window. This is used to e.g. avoid forwarding the same packet twice. Keys (naked or not) must be composed of capital letters and numbers only, and must start with a letter. Values may be composed of any characters except those used as delimiters in the header (space, comma, equal, etc.) A value can be empty and this should be handled different from a naked key e.g. in A=,B , B is naked while A has a value, which is an empty string. Implementations should allow for this distinction. Reserved parameters, added or handled by the core stack: PING asks for an automated PONG response. RREQ (route request) asks for an automated RRSP response. Intermediate routers are annotated in the message payload. C (confirmation) asks for a confirmation message (with CO flag) to be sent back by the destination. R signals the packet was forwarded. This parameter is automatically added and processed, and the user should not use it explicitly. Predefined parameters available for any application: T=number is an optional timestamp, as the UNIX timestamp (seconds since 1/1/1970 0:00 UTC) subtracted by 1552265462. If sub-second precision is required, the number may have decimal places. S=chars is an optional digital signature of the payload.","title":"Packet format"},{"location":"hamradio/LoRaHam/#routing-and-forwarding","text":"Currently, diffusion routing is the only implemented strategy.","title":"Routing and forwarding"},{"location":"hamradio/LoRaHam/#fec-code","text":"Every packet is augmented by a 20-octet FEC (Forward Error Code) suffix. The FEC is a Reed-Solomon code. Since Reed-Solomon codes demand a fixed-size message, it is calculated as if the network packet was padded with nulls (binary zeros). In order to contemplate low-memory microcontrollers, which cannot handle RS codes above a certain size, two base sizes (and therefore two different RS codes) are used: 100/80 and 200/180. The reference FEC RS implementation is https://github.com/simonyipeter/Arduino-FEC .","title":"FEC code"},{"location":"hamradio/LoRaHam/#lora-mode","text":"Packets shall be transmitted using LoRa explicit mode, so the packet size is known when it reaches the network layer to be parsed. CRC shall be disabled. In our experiments, LoRa packets often arrive with errors even under the best circunstances. Using maximum CR is not enough to prevent this, and LoRa CRC protection would discard lots of packets. Software-level FEC code seems to be the best solution.","title":"LoRa mode"},{"location":"hamradio/LoRaHam/#console-via-telnet","text":"The console can be operated via Telnet. This is more convenient e.g. when the Arduino is far away, perhaps positioned in a good antenna spot. This is possible because ESP32 TTGO has built-in support for Wi-Fi and TCP/IP. You just need to enter your network details in LoRaMaDoR via serial console, using the commands !ssid and !password. Then !reset and check the console for connection messages to confirm the network configuration is ok. Use the !wifi command to get the detailed status. The console and the !wifi command shows the IP address. But LoRaMaDoR also supports Bonjour (mDNS). For example, if callsign is configured to ABCDEF-1, the network name will be ABCDEF-1.local or abcdef-1.local (it is case-insensitive). While a Telnet client is connected, the serial console is silenced (save for Wi-Fi disconnection messages) and does not accept input. Once the Telnet connection is closed, the serial console is reenabled.","title":"Console via Telnet"},{"location":"hamradio/NCPacket/","text":"North Carolina Packet NCPACKET.net is presently a non-incorporated group in North Carolina. NCPACKET is building a social-network using hobbyist owned and operated data links. We are using packet-radio over ham-radio. http://ncpacket.net/north_carolina_packet_radio_network.html http://ncpacket.net/aprs_map.html http://tarpn.net/t/nino-tnc/n9600a/n9600a3/n9600a3-assembly.html","title":"North Carolina Packet"},{"location":"hamradio/QSL/","text":"Virtual QSL cards: https://www.eqsl.cc/qslcard/Home4G.cfm https://www.qrz.com/db/KD8BXP","title":"Virtual QSL cards"},{"location":"hamradio/aprs/","text":"Super Simple APRS Position Reporter http://midnightcheese.com/2015/12/super-simple-aprs-position-beacon/ https://github.com/wb2osz/direwolf Where to find packet on vhf/uhf In the US, most packet activity is found on the 2 meter band: 2 meters: Baud rate is typically 1200. he most common frequencies are 144.93, 145.01, 145.03, 145.05, 145.07, 145.09 and 145.53 MHz, but you may find it anywhere between 144.90-145.10 and between 145.50-145.80. The baud rate used is 1200. 1.25 meters (220 band): most packet heard in this band will be \"backbone\" traffic between network nodes and BBSs. It will not be an access band for users. 70 cm (440 band): The packet allocation for the band (mixed mode segment) is 432.10-432.30 and 432.40-433.00. Packet should not be used below 432.00. By local option, packet could also be used from 442.000 to 445.950 and 446.100 to 448.000. Baud rate may be 9600 or 1200. Note: some packet heard in this band may be \"backbone\" traffic between network nodes and BBSs. If so, there will be no user access to nodes or BBBs on the frequency. https://www.soundcardpacket.org/8frequencies.aspx#:~:text=In%20the%20US%2C%20most%20packet,145.10%20and%20between%20145.50%2D145.80. Send APRS objects or telemetry via Bash shell: https://s55ma.radioamater.si/2017/07/27/send-aprs-objects-or-telemetry-via-bash/ Other: https://unsigned.io/forum/viewtopic.php?id=148 Sendo only ports and formats via APRS-IS http://www.aprs-is.net/SendOnlyPorts.aspx FindU Resources http://www.findu.com/cgi-bin/entermsg.cgi http://www.findu.com/cgi-bin/winlink.cgi?KD8BXP-9 http://www.findu.com/cgi-bin/warn-near.cgi?call=kd8bxp-9 http://www.findu.com/cgi-bin/find.cgi?kd8bxp-9 http://www.findu.com/cgi-bin/msg.cgi?call=KD8BXP-9 Sending Messages: From: https://smsgte.org/ug-sending-messages/ Sending from APRS to SMS Sample message generated using Kenwood TM-D710 To send a message from an APRS station, simply address your message to SMSGTE with the following format: @ The @ symbol signifies that the following characters represent the destination for the message while represents the sms number or associated alias the message should be sent to. All words following the destination will form the body of the message. Example: To: SMSGTE @6135551234 No cell coverage here, ping me on radio When the message is delivered to the destination SMS number (usually a cell phone), the message will appear as follows: @VR4XXX-10 No cell coverage here, ping me on radio Of course, the callsign at the start of the message will be your callsign. The originating number will be the gateway\u2019s number for your region. Sending from SMS to APRS To send a message from SMS to an APRS station, address your message to the gateway number with the following format: @ The @ symbol signifies that the following characters represent the destination for the message while represents the callsign and SSID the message should be sent to. All words following the destination will form the body of the message. Example: To: 2015551234 @VE3OTB-10 Did you forget your cellphone? The message delivered to the APRS station will appear as follows: 6135551234 Did you forget your cellphone? Please note that the gateway telephone numbers have not been published here to prevent spam messages being sent into the APRS network. You will learn the gateway\u2019s number when you send your first message from APRS to SMS. Conversations initiated by an SMS user will only be permitted to callsigns that have previously used SMSGTE. This has been implemented both to mitigate the potential for SPAM and to simplify the parsing of SMS messages received by SMSGTE. Messages are stored for 24 hours. Request Delivery Confirmation A user may request delivery confirmation by adding a question mark (?) to the end of the callsign or SMS number. If the message is destined for APRS, a confirmation message will be sent to the SMS user only once an Ack was received on APRS. If the message is destined for SMS, a confirmation message will be sent when SMSGTE confirmatin from the SMS service. Confirmation is intended to verify that the message was delivered via the APRS network. Confirmation requests work with raw phone numbers and aliases. Use the following format: From APRS: @ ? Example message body: @6135551212? My car broke down, can you come help me? @mywife? My car broke down and my cell is dead. From SMS: @ ? Example message body: @VE3OTB-9? Is your radio on?","title":"APRS Info"},{"location":"hamradio/arduino/","text":"hamshield https://inductivetwig.com/products/hamshield dv dualband radio shield https://www.seeedstudio.com/DV-Dualband-radio-shield-for-Arduino-p-2977.html ArduTrx https://www.element14.com/community/community/project14/open-arduino/blog/2018/05/12/ardutrx-a-2-meter-band-ham-radio-transceiver-with-arduino https://www.tindie.com/products/ok1cdj/breakout-board-dorji-dra818vdra818u-modules/","title":"Arduino Shields"},{"location":"hamradio/aredn_broadband_hamnet/","text":"Aredn group out of Dayton https://miamivalleymesh.com/ https://sites.google.com/site/n8jjweb/ https://www.arednmesh.org/ https://www.arednmesh.org/content/sw-ohio-mesh-group https://www.arednmesh.org/content/tunnel-set-0 Interop BBHN and AREDN: Sun, 11/03/2019 - 10:07(Reply to #17)#18 K6AH You could make it work... You could make it work under the following conditions: AREDN RF link would need to be configured: to 20MHz bandwidth to Part 15 channel 1-11 WRT54G devices would need the same SSID as the AREDN link Broadband-Hamnet (HSMM-Mesh) http://broadband-hamnet.org/hsmm-mesh-forums/ http://www.broadband-hamnet.org/ https://github.com/urlgrey/hsmm-pi Other networks: HamWAN https://hamwan.org/ https://www.ve7vic.ca/amateur-radio-data-network/","title":"AREDN Info"},{"location":"hamradio/atv/","text":"Amatuer TV http://www.hamtv.com/info.html https://www.atco.tv/","title":"Amatuer TV"},{"location":"hamradio/bandplan/","text":"Band Plan A band plan refers to a voluntary division of a band to avoid interference between incompatible modes. Resources Sharing arrangements Detailed packet frequencies [PDF] Phone patch, autopatch and HF/VHF/UHF operating guidelines \"Considerate Operator's Frequency Guide\" 2200 and 600 - meter bands General, Advanced and Amateur Extra class licensees are authorized to use these Amateur Bands Amateurs wishing to operate on either 2,200 or 630 meters must first register with the Utilities Technology Council online at https://utc.org/plc-database-amateur-notification-process/. You need only register once for each band. 135.7 \u2013 137.8 1 W EIRP maximum 472 - 479 KHz: 5 W EIRP maximum, except in Alaska within 496 miles of Russia where the power limit is 1 W EIRP. 160 Meters (1.8-2.0 MHz) 1.800 - 2.000 CW 1.800 - 1.810 Digital Modes 1.810 CW QRP 1.843-2.000 SSB, SSTV and other wideband modes 1.910 SSB QRP 1.995 - 2.000 Experimental 1.999 - 2.000 Beacons 80 Meters (3.5-4.0 MHz) 3.590 RTTY/Data DX 3.570-3.600 RTTY/Data 3.790-3.800 DX window 3.845 SSTV 3.885 AM calling frequency 60 Meters (5 MHz channels) *Only one signal at a time is permitted on any channel *Maximum effective radiated output is 100 W PEP 5330.5 USB phone1 and CW/RTTY/data2 5346.5 USB phone1 and CW/RTTY/data2 5357.0 USB phone1 and CW/RTTY/data2 5371.5 USB phone1 and CW/RTTY/data2 5403.5 USB phone1 and CW/RTTY/data2 USB is limited to 2.8 kHz CW and digital emissions must be centered 1.5 kHz above the channel frequencies indicated in the above chart 40 Meters (7.0-7.3 MHz) 7.040 RTTY/Data DX 7.080-7.125 RTTY/Data 7.171 SSTV 7.290 AM calling frequency 30 Meters (10.1-10.15 MHz) 10.130-10.140 RTTY 10.140-10.150 Packet 20 Meters (14.0-14.35 MHz) 14.070-14.095 RTTY 14.095-14.0995 Packet 14.100 NCDXF Beacons 14.1005-14.112 Packet 14.230 SSTV 14.286 AM calling frequency 17 Meters (18.068-18.168 MHz) 18.100-18.105 RTTY 18.105-18.110 Packet 15 Meters (21.0-21.45 MHz) 21.070-21.110 RTTY/Data 21.340 SSTV 12 Meters (24.89-24.99 MHz) 24.920-24.925 RTTY 24.925-24.930 Packet 10 Meters (28-29.7 MHz) 28.000-28.070 CW 28.070-28.150 RTTY 28.150-28.190 CW 28.200-28.300 Beacons 28.300-29.300 Phone 28.680 SSTV 29.000-29.200 AM 29.300-29.510 Satellite Downlinks 29.520-29.590 Repeater Inputs 29.600 FM Simplex 29.610-29.700 Repeater Outputs 6 Meters (50-54 MHz) 50.0-50.1 CW, beacons 50.060-50.080 beacon subband 50.1-50.3 SSB, CW 50.10-50.125 DX window 50.125 SSB calling 50.3-50.6 All modes 50.6-50.8 Nonvoice communications 50.62 Digital (packet) calling 50.8-51.0 Radio remote control (20-kHz channels) 51.0-51.1 Pacific DX window 51.12-51.48 Repeater inputs (19 channels) 51.12-51.18 Digital repeater inputs 51.5-51.6 Simplex (six channels) 51.62-51.98 Repeater outputs (19 channels) 51.62-51.68 Digital repeater outputs 52.0-52.48 Repeater inputs (except as noted; 23 channels) 52.02, 52.04 FM simplex 52.2 TEST PAIR (input) 52.5-52.98 Repeater output (except as noted; 23 channels) 52.525 Primary FM simplex 52.54 Secondary FM simplex 52.7 TEST PAIR (output) 53.0-53.48 Repeater inputs (except as noted; 19 channels) 53.0 Remote base FM simplex 53.02 Simplex 53.1, 53.2, 53.3, 53.4 Radio remote control 53.5-53.98 Repeater outputs (except as noted; 19 channels) 53.5, 53.6, 53.7, 53.8 Radio remote control 53.52, 53.9 Simplex 2 Meters (144-148 MHz) 144.00-144.05 EME (CW) 144.05-144.10 General CW and weak signals 144.10-144.20 EME and weak-signal SSB 144.200 National calling frequency 144.200-144.275 General SSB operation 144.275-144.300 Propagation beacons 144.30-144.50 New OSCAR subband 144.50-144.60 Linear translator inputs 144.60-144.90 FM repeater inputs 144.90-145.10 Weak signal and FM simplex (145.01,03,05,07,09 are widely used for packet) 145.10-145.20 Linear translator outputs 145.20-145.50 FM repeater outputs 145.50-145.80 Miscellaneous and experimental modes 145.80-146.00 OSCAR subband 146.01-146.37 Repeater inputs 146.40-146.58 Simplex 146.52 National Simplex Calling Frequency 146.61-146.97 Repeater outputs 147.00-147.39 Repeater outputs 147.42-147.57 Simplex 147.60-147.99 Repeater inputs Notes: The frequency 146.40 MHz is used in some areas as a repeater input. This band plan has been proposed by the ARRL VHF-UHF Advisory Committee. 1.25 Meters (222-225 MHz) 222.0-222.150 Weak-signal modes 222.0-222.025 EME 222.05-222.06 Propagation beacons 222.1 SSB CW calling frequency 222.10-222.15 Weak-signal CW SSB 222.15-222.25 Local coordinator's option; weak signal, ACSB, repeater inputs, control 222.25-223.38 FM repeater inputs only 223.40-223.52 FM simplex 223.52-223.64 Digital, packet 223.64-223.70 Links, control 223.71-223.85 Local coordinator's option; FM simplex, packet, repeater outputs 223.85-224.98 Repeater outputs only Note: The 222 MHz band plan was adopted by the ARRL Board of Directors in July 1991. 70 Centimeters (420-450 MHz) 420.00-426.00 ATV repeater or simplex with 421.25 MHz video carrier control links and experimental 426.00-432.00 ATV simplex with 427.250-MHz video carrier frequency 432.00-432.07 EME (Earth-Moon-Earth) 432.07-432.10 Weak-signal CW 432.10 70-cm calling frequency 432.10-432.30 Mixed-mode and weak-signal work 432.30-432.40 Propagation beacons 432.40-433.00 Mixed-mode and weak-signal work 433.00-435.00 Auxiliary/repeater links 435.00-438.00 Satellite only (internationally) 438.00-444.00 ATV repeater input with 439.250-MHz video carrier frequency and repeater links 442.00-445.00 Repeater inputs and outputs (local option) 445.00-447.00 Shared by auxiliary and control links, repeaters and simplex (local option) 446.00 National simplex frequency 447.00-450.00 Repeater inputs and outputs (local option) 33 Centimeters (902-928 MHz) Frequency Range Mode Functional Use Comments 902.000-902.075 FM / other including DV Or CW/SSB Repeater inputs 25 MHz split paired with those in 927.000-927.075 or Weak signal 12.5 kHz channel spacing Note 2) 902.075-902.100 CW/SSB Weak signal 902.100 CW/SSB Weak signal calling Regional option 902.100-902.125 CW/SSB Weak signal 902.125-903.000 FM/other including DV Repeater inputs 25 MHz split paired with those in 927.1250-928.0000 12.5 kHz channel spacing 903.000-903.100 CW/SSB Beacons and weak signal 903.100 CW/SSB Weak signal calling Regional option 903.100-903.400 CW/SSB Weak signal 903.400-909.000 Mixed modes Mixed operations including control links 909.000-915.000 Analog/digital Broadband multimedia including ATV, DATV and SS Notes 3) 4) 915.000-921.000 Analog/digital Broadband multimedia including ATV, DATV and SS Notes 3) 4) 921.000-927.000 Analog/digital Broadband multimedia including ATV, DATV and SS Notes 3) 4) 927.000-927.075 FM / other including DV Repeater outputs 25 MHz split paired with those in 902.0000-902.0750 12.5 kHz channel spacing 927.075-927.125 FM / other including DV Simplex 927.125-928.000 FM / other including DV Repeater outputs 25 MHz split paired with those in 902.125-903.000 12.5 kHz channel spacing Notes 5) 6) Notes: 1) Significant regional variations in both current band utilization and the intensity and frequency distribution of noise sources preclude one plan that is suitable for all parts of the country. These variations will require many regional frequency coordinators to maintain band plans that differ in some respects from any national plan. As with all band plans, locally coordinated plans always take precedence over any general recommendations such as a national band plan. 2) May be used for either repeater inputs or weak-signal as regional needs dictate 3) Division into channels and/or separation of uses within these segments may be done regionally based on needs and usage, such as for 2 MHz-wide digital TV. 4) These segments may also be designated regionally to accommodate alternative repeater splits. 5) Simplex FM calling frequency 927.500 or regionally selected alternative. 6) Additional FM simplex frequencies may be designated regionally. 23 Centimeters (1240-1300 MHz) Frequency Range Suggested Emission Types Functional Use 1240.00-1246.000 ATV ATV Channel #1 1246.000-1248.000 FM, digital Point-to-point links paired with 1258.000-1260.000 1248.000-1252.000 Digital 1252.000-1258.000 ATV ATV Channel #2 1258.000-1260.000 FM, digital Point-to-point links paired with 1246.000-1248.000 1240.000-1260.000 FM ATV Regional option 1260.000-1270.000 Various Satellite uplinks, Experimental, Simplex ATV 1270.000-1276.000 FM, digital Repeater inputs, 25 kHz channel spacing, paired with 1282.000-1288.000 1270.000-1274.000 FM, digital Repeater inputs, 25 kHz channel spacing, paired with 1290.000-1294.000 (Regional option) 1276.000-1282.000 ATV ATV Channel #3 1282.000-1288.000 FM, digital Repeater outputs, 25 kHz channel spacing, paired with 1270.000-1276.000 1288.000-1294.000 Various Broadband Experimental, Simplex ATV 1290.000-1294.000 FM, digital Repeater outputs, 25 kHz channel spacing, paired with 1270.000-1274.000 (Regional option) 1294.000-1295.000 FM FM simplex FM National FM simplex calling frequency 1294.500 1295.000-1297.000 Narrow Band Segment 1295.000-1295.800 Various Narrow Band Image, Experimental 1295.800-1296.080 CW, SSB, digital EME 1296.080-1296.200 CW, SSB Weak Signal CW, SSB CW, SSB calling frequency 1296.100 1296.200-1296.400 CW, digital Beacons 1296.400-1297.000 Various General Narrow Band 1297.000-1300.000 Digital Note: The need to avoid harmful interference to FAA radars may limit amateur use of certain frequencies in the vicinity of the radars. 13 Centimeters (2300-2310 and 2390-2450 MHz) Frequency Range Emission Bandwidth Functional Use 2300.000-2303.000 0.05 - 1.0 MHz Analog Digital, including full duplex; paired with 2390 - 2393 2303.000-2303.750 50 kHz Analog Digital; paired with 2393 - 2393.750 2303.75-2304.000 SSB, CW, digital weak-signal 2304.000-2304.100 3 kHz or less Weak Signal EME Band 2304.10-2304.300 3 kHz or less SSB, CW, digital weak-signal (Note 1) 2304.300-2304.400 3 kHz or less Beacons 2304.400-2304.750 6 kHz or less SSB, CW, digital weak-signal NBFM 2304.750-2305.000 50 kHz Analog Digital; paired with 2394.750 - 2395 2305.000-2310.000 0.05 - 1.0 MHz Analog Digital, paired with 2395 - 2400 (Note 2) 2310.000-2390.000 NON-AMATEUR 2390.000-2393.000 0.05 - 1.0 MHz Analog Digital, including full duplex; paired with 2300- 2303 2393.000-2393.750 50 kHz Analog Digital; paired with 2303 - 2303.750 2393.750-2394.750 Experimental 2394.750-2395.000 50 kHz Analog Digital; paired with 2304.750 - 2305 2395.000-2400.000 0.05 - 1.0 MHz Analog Digital, including full duplex; paired with 2305- 2310 2400.000-2410.000 6 kHz or less Amateur Satellite Communications 2410.000-2450.000 22 MHz max. Broadband Modes (Notes 3, 4) Notes: 1: 2304.100 is the National Weak-Signal Calling Frequency 2: 2305 - 2310 is allocated on a primary basis to Wireless Communications Services (Part 27). Amateur operations in this segment, which are secondary, may not be possible in all areas. 3: Broadband segment may be used for any combination of high-speed data (e.g. 802.11 protocols), Amateur Television and other high-bandwidth activities. Division into channels and/or separation of uses within this segment may be done regionally based on needs and usage. 4: 2424.100 is the Japanese EME transmit frequency Note: The following band plans were adopted by the ARRL Board of Directors in 2012. 3300-3500 MHz Level I - Major Band Divisions Level II - Sub-Band Divisions Level III Suggested Suggested Frequency Range (MHz) Frequency Range (MHz) Specific Freq. Emission Types Emission B.W. From To Width From To Width MHz (Note 1) (Note 1) Functional Use 3300.000 3309.000 9.0 Analog Digital, including Full Duplex 0.1 - 1.0 MHz Analog Digital; paired with 3430.0-3439.0; 130 MHz Split 3309.000 3310.000 1.0 Experimental 3310.000 3330.000 20.0 Analog Digital, including Full Duplex 1.0 MHz Analog Digital; paired with 3410.0-3430.0; 100 MHz Split 3330.000 3332.000 2.0 Experimental 3332.000 3339.000 7.0 RADIO ASTRONOMY PROTECTED BAND (Note 4) 3339.000 3345.800 6.8 Analog Digital, including Full Duplex 0.1 - 1.0 MHz Analog Digital; paired with 3439.0-3445.8; 100 MHz Split 3345.800 3352.500 6.7 RADIO ASTRONOMY PROTECTED BAND (Note 4) 3352.500 3355.000 2.5 Analog Digital, including Full Duplex 0.05 - 0.2 MHz Analog Digital; paired with 3452.5-3455.0; 100 MHz Split 3355.000 3357.000 2.0 Experimental 3357.000 3360.000 3.0 Analog Digital, including Full Duplex 50 kHz or less Analog Digital; paired with 3457.0-3460.0 3360.000 3400.000 40.0 OFDM, others 22 MHz max. Broadband Modes (Note 3) 3360.000 3380.000 20.0 ATV Amateur Television of all authorized modulation standards/formats at local option 3400.000 3410.000 10.0 CW, SSB, NBFM 6 kHz or less Amateur Satellite Communications 3400.000 3400.300 0.3 CW, SSB, Digital 3 kHz or less Weak Signal EME Band 3400.300 3401.000 0.7 CW, SSB, Digital 3 kHz or less Terrestrial Weak Signal Band - Future (Note 2) 3400.100 CW, SSB, Digital EME Calling Frequency 3410.000 3430.000 20.0 Analog Digital, including Full Duplex 1.0 MHz Analog Digital; paired with 3310.0-3330.0; 100 MHz Split 3430.000 3439.000 9.0 Analog Digital, including Full Duplex 0.1 - 1.0 MHz Analog Digital; paired with 3300.0-3309.0; 130 MHz Split 3439.000 3445.800 6.8 Analog Digital, including Full Duplex 0.1 - 1.0 MHz Analog Digital; paired with 3339.0-3345.8; 100 MHz Split 3445.800 3452.500 6.7 Experimental 3452.500 3455.000 2.5 Analog Digital, including Full Duplex 0.05 - 0.2 MHz Analog Digital; paired with 3352.5-3355.0; 100 MHz Split 3455.000 3455.500 0.5 100 kHz or less Crossband linear translator (input or output) 3455.500 3457.000 1.5 CW, SSB, NBFM, Digital 6 kHz or less Terrestrial Weak Signal Band - Legacy (Note 2) 3456.100 6 kHz or less Weak Signal Terrestrial Calling Frequency 3456.300 3457.000 0.1 CW, Digital 1 kHz or less Propagation Beacons 3457.000 3460.000 3.0 Analog Digital, including Full Duplex 50 kHz or less Analog Digital; paired with 3357.0-3360.0; 100 MHz Split 3460.000 3500.000 40.0 OFDM, others 22 MHz max. Broadband Modes (Note 3) 3460.000 3480.000 20.0 ATV Amateur Television of all authorized modulation standards/formats at local option 9 cm Band Plan Notes Note 1 \u2013 Includes all other emission modes authorized in the 9 cm amateur band whose necessary bandwidth does not exceed the suggested bandwidths listed. Note 2 \u2013 Weak Signal Terrestrial legacy users are encouraged to move to 3400.3 to 3401.0 MHz as time and resources permit. Note 3 \u2013 Broadband segments may be used for any combination of high-speed data (e.g. 802.11 protocols), Amateur Television and other high-bandwidth activities. Division into channels and/or separation of uses within these segments may be done regionally based on need and usage. Note 4 \u2013 Per ITU RR 5.149 from WRC-07, these band segments are also used for Radio Astronomy. Amateur use of these frequencies should be first coordinated with the National Science Foundation (esm@nsf.gov). 5 Centimeters (5650.0-5925.0 MHz) Frequency Range Emission Bandwidth Functional Use 5650.0-5670.0 Amateur Satellite; Up-Link Only 5650.0-5675.0 0.05 - 1.0 MHz Experimental 5675.0-5750.0 = 1.0 MHz Analog Digital; paired with 5850-5925 MHz (Note 2) 5750.0-5756.0 = 25 kHz and 1 MHz Analog Digital; paired with 5820-5826 MHz 5756.0-5759.0 = 50 kHz Analog Digital; paired with 5826-5829 MHz 5759.0-5760.0 6 kHz SSB, CW, Digital Weak-Signal 5760.0-5760.1 3kHz EME 5760.1-5760.3 6 KHz SSB, CW, Digital Weak-Signal (Note 1) 5760.3-5760.4 3 KHz Beacons 5760.4-5761.0 6 KHz SSB, CW, Digital Weak-Signal 5761.0-5775.0 =50 kHz Experimental 5775.0-5800.0 =100 kHz Experimental 5800.0-5820.0 Experimental 5820.0-5826.0 =25 kHz and 1 MHz Analog Digital; paired with 5750-5756 MHz 5826.0-5829.0 =50 kHz Analog Digital; paired with 5756-5759 MHz 5829.0-5850.0 0.05-1.0 MHz Experimental 5830.0-5850.0 Amateur Satellite; Down-Link Only 5850.0-5925.0 =1.0 MHz Analog Digital; paired with 5675-5750 MHz (Note 2) Note 1: 5760.1 is the National Weak-Signal Calling Frequency Note 2: Broadband segment may be used for any combination of high-speed data (eg: 802.11 protocols), Amateur Television and other high-bandwidth activities. Division into channels and/or separation of uses within this segment may be done regionally based on needs and usage. 3 Centimeters (10000.000-10500.000 MHz ) Frequency Range Emission Bandwidth Functional Use 10000.00 - 10050.000 Experimental 10050.000-10100.000 =100 kHz Analog Digital; paired with 10300-10350 10100.000-10115.000 =25 kHz and 1 MHz Analog Digital; paired with 10350-10365 10115.000-10117.000 =50 kHz Analog Digital; paired with 10365-10367 10117.000-10120.000 Experimental 10120.000-10125.000 =50 kHz Analog Digital; paired with 10370-10375 10125.000-10200.000 =1 MHz Analog Digital; paired with 10375-10450 (Note 2) 10200.000-10300.000 Wideband Gunnplexers 10300.000-10350.000 =100 kHz Analog Digital; paired with 10050-10100 10350.000-10365.000 =25 kHz and 1 MHz Analog Digital; paired with 10100-10115 10365.000-10367.000 =50 kHz Analog Digital; paired with 10115-10117 10367.000-10368.300 6 kHz or less SSB, CW, Digital Weak-Signal NBFM (Note 1 10368.300-10368.400 6 kHz or less Beacons 10368.400-10370.000 6 kHz or less SSB, CW, Digital Weak-Signal NBFM 10370.000-10375.000 =50 kHz Analog Digital; paired with 10120-10125 10375.000-10450.000 =1 MHz Analog Digital; paired with 10125-10200 (Note 2) 10450.000-10500.000 Space, Earth Telecommand Stations Note 1: 10368.100 is the National Weak-Signal Calling Frequency Note 2: Broadband segment may be used for any combination of high-speed data (eg: 802.11 protocols), Amateur Television and other high-bandwidth activities. Division into channels and/or separation of uses within this segment may be done regionally based on needs and usage. Above 10.50 GHz* All modes and licensees (except Novices) are authorized Amateur Bands above 10.5 GHz. US amateurs must check Sections 97.301, 97.303, 97.305 and 97.307 for sharing requirements before operating.","title":"Band Plan"},{"location":"hamradio/contacts/","text":"7-28-2020 DH6BS Pager call Germany Benjamin Schmitt 6-27-2018 KY1WTF DSTAR United States joshua Tibbs","title":"Contacts"},{"location":"hamradio/dapnet/","text":"Amateur Radio Paging network My Pager ID: 0139465 (DMR ID: 3139465) My Pager Freq: 449.000Mhz Visiplex VP-4 Pager Info: https://www.visiplex.com/docs/vp4.pdf Programming: https://www.visiplex.com/docs/vp4_Guide.pdf Other Info: https://www.visiplex.com/product/alphanumeric-pager/ Info: How to send a text message: https://n5amd.com/digital-radio-how-tos/send-text-messages-dmr-brandmeister/ DAPNET Information: DAPNet: https://hampager.de/#/ officially Alphapoc 602R and Skyper pagers are supported Alphapoc 602R: https://hampager.de/dokuwiki/doku.php?id=alphapocdescription unofficially other pagers can be used as long as they are programmable Aliexpress: https://www.aliexpress.com/item/4000736099480.html?spm=a2g0o.productlist.0.0.86083ee3oSZRcF algo_pvid=6e10dd7f-fd12-439d-951f-4f5a65c46e9e algo_expid=6e10dd7f-fd12-439d-951f-4f5a65c46e9e-0 btsid=0ab6f8ad15959002409322598ea852 ws_ab_test=searchweb0_0,searchweb201602_,searchweb201603_ New users: https://hampager.de/dokuwiki/doku.php?id=procedurenewuser Desktop software: https://hampager.de/dokuwiki/doku.php?id=unipager Good Video: https://www.youtube.com/watch?v=XnyxwmMPX_g t=0s Configures MMDVM and Pi-Star: https://hampager.de/dokuwiki/doku.php?id=mmdvm Non-English information: (Vietnamese) http://bv2qs.blogspot.com/2018/12/pi-star-pocsagdapnet.html POCSAG Quickstart Guide: https://einstein.amsterdam/?page_id=2130 Send a page from Brandmeiser DMR network: We can send POCSAG messages by using a DMR SMS message. Send an SMS message to Private DMR Contact 262994 in this format: callsign \u201cspace\u201d message text. Other Pager style things: Global APRS Message Initiative (still used?) http://w1npp.org/wx1gyx.org/topics/SKYWAR~1/APRS-M~1.HTM Pre-DAPNET German Ham Paging Info (Can see how it may have been early in DAPNET history): (SAMS - Short-Amateur-MEssage-System) http://web.archive.org/web/20041204073402/www.durm-online.de/pag100.htm","title":"Dapnet (Amatuer Pager)"},{"location":"hamradio/digitalinformation/","text":"http://hamwan.org/ http://ohiopacket.org/index.php/TCP/IP_Information http://ohiopacket.org/index.php/Main_Page https://www.febo.com/packet/linux-ax25/index.html http://www.broadband-hamnet.org/ https://www.arednmesh.org/ http://oemcomm.org/ham-mesh-network-primer/ http://oemcomm.org/","title":"Digital Information"},{"location":"hamradio/dmr/","text":"DMR for dummies https://www.dmrfordummies.com/ DMR to APRS/SMS Gateway https://smsgte.org/dmr/ BrandMeister: https://brandmeister.network/ US BrandMeister Info: https://wiki.brandmeister.network/index.php/United_States_of_America Older video of DMR setup with MMDVM (still good) https://www.youtube.com/watch?v=DDZMY_6qjjI Send a page from Brandmeiser DMR network: We can send POCSAG messages by using a DMR SMS message. Send an SMS message to Private DMR Contact 262994 in this format: callsign \u201cspace\u201d message text. Retevis RT3/TYT MD380 Ham Radio (hacked) firmware: https://blog.retevis.com/index.php/rt3-md380-tools/ https://github.com/KD4Z/md380tools-vm","title":"Information"},{"location":"hamradio/dmrnets/","text":"The following list is a summary of nets available for DMR users on BrandMeister repeaters. You should check with your local repeater operator for timeslot usage. Last Updated: 23-Feb-2019 Name Day Time Talkgroup PAPA DMR Roundtable Mon 20:00 PST California 3106 Crossroads Indiana Mon 18:00 CEN Crossroads Statewide 31189 Oklahoma Mon 20:15 CEN Oklahoma 3140 Reddit Net Mon 20:00 EST Reddit 98003 RVing Hams Mon 21:00 EST KC2RC WIRESX 31653 Idaho Statewide Tue 19:00 MST Idaho 3116 Pennsylvania Statewide Tue 20:00 EST Pennsylvania 3142 DMR Information Net Tue 19:30 CEN DMR Info Network 31648 Ventura County Digital Radio Club Net Tue 19:30 PST VCDRC 31070 SNARS DMR Net Tue 20:00 PAC SNARS 31328 Indiana Statewide Tue 20:00 EST Indiana 3118 Arkansas Statewide Tue 21:00 EST ARWX 31051 North Star Digital Net Tue 21:00 EST STEM 31630 Munich Net (Germany) Tue 19:00 CET1 Region M\u00fcnchen 26283 Canada DMR Net Tue 20:00 PDT Canada English 3026 North American Astronomy Net Wed 20:00 CST TAC 312 312 Ohio Statewide Net Wed 20:30 EST Ohio 3139 Pafos Club diginet Wed 18:00 UTC Paphos North America Tech Net Wed 18:00 PST North America 93 After HamNation Net Wed 19:10 PST TAC-311 311 Pacific NW Wed 19:00 PST PNWR 31771 Oregon Statewide Wed 20:00 PST Oregon 3141 Minnesota Statewide Wed 19:00 CEN Minnesota 3127 Northwest Alabama DMR Net Wed 20:30 CT NW Alabama 31016 Net in Portuguese Wed 21:30 UTC Portuguese 915 Kentucky Net Thu 20:00 EST Kentucky 3121 West Virginia DMR and Service net Thu 20:00 EST West Virginia 3154 Arkansas Skywarn Thu 20:00 EST Arkansas 3105 PAPA Technical Round Table (cross-mode) Thu 20:00 PST PAPA Bridge 31078 NorCal Thu 19:00 PST NorCal 31068 Ventura County Digital Radio Club (VCDRC) Thu 19:00 PST Ventura 310652 Tennessee Statewide Fri 21:00 EST Tennessee 3147 The Guild Fri 14:00 PST The Guild 31674 Colorado HD Net Fri 19:30 MST Colorado HD 31088 BM Worldwide Net Sat 14:00 UTC Worldwide 91 Outdoor Adventure Net Sat 10:00 PST OAG 31772 Outdoor 4\u00d74 Net Sat 12:30 PST OAG 31772 DigiComm Breakfast Sat 06:00 PST The Guild 31674 Hawaii Net (all islands) Sat 19:00 HST Hawaii 3115 TAC-310 Net Sun 00:00 UTC TAC-310 310 Iowa Statewide Net Sun 19:30 CEN Iowa 3119 Southeast Florida Net Sun 20:00 EST 3112529 Connecticut Statewide Sun 20:30 EST Connecticut 3109 Hawaii Newsline Net Sun 17:00 HST Hawaii 3115 Canada DMR Sun 21:00 EST Canada 302 DMRTrack Net Sun 18:00 CEN DMR Track 31489 Midnight Net Sun 21:00 PST TAC-310 310 IECRO Sun 19:30 GMT IECRO 98007 1 CET \u2013 Central European Time https://www.k6bkd.org/dmr-nets/ his is from R. Michael Rickey\u2019s page at http://mrickey.com/dmr-nets/. Just posting it here so I can find it later. The following list is a summary of nets available for DMR users on BrandMeister repeaters. You should check with your local repeater operator for timeslot usage. Monday PAPA DMR Roundtable 20:00 PAC California 3106 Crossroads Indiana 18:00 CEN Crossroads Statewide 31189 Oklahoma 20:15 CEN Oklahoma 3140 Tuesday Idaho Statewide 19:00 MST Idaho 3116 Pennsylvania Statewide 20:00 EST Pennsylvania 3142 Texas Tech Net 19:30 CEN Texas 3148 Ventura County Digital Radio Club Net 19:30 PAC VCDRC 31070 SNARS DMR Net 20:00 PAC SNARS 31328 Indiana Statewide 20:00 EST Indiana 3118 Arkansas Statewide 21:00 EST ARWX 31051 Chestnut Ridge Digital Net 21:00 EST New York 3136 Munich Net (Germany) 19:00 CET1 Region M\u00fcnchen 26283 Wednesday North American Astronomy Net 02:00 UTC NA Astronomy 31175 Ohio Statewide Net 19:30 CEN Ohio 3139 Texas Statewide Net 17:30 CEN Texas 3148 North America Tech Net 17:00 EST North America 93 After HamNation Net 19:00 PST TAC-311 311 Pacific NW 19:00 PST PNWR 31771 Oregon Statewide 20:00 PST Oregon 3141 Minnesota Statewide 19:00 CEN Minnesota 3127 Thursday Kentucky Net 20:00 EST Kentucky 3121 West Virginia DMR and Service net 20:00 EST West Virginia 3154 Arkansas Skywarn 20:00 EST Arkansas 3105 PAPA Technical Round Table (cross-mode) 20:00 PST XLX013 31078 NorCal 19:00 PST NorCal 31068 Ventura County Digital Radio Club (VCDRC) 19:00 PST Ventura 310652 Hytera USA 19:30 PST Hytera 31089 Friday Tennessee Statewide 21:00 CEN Tennessee 3147 TGIF Net 20:30 EST TGIF 31665 Saturday BM Worldwide Net 14:00 UTC Worldwide 91 Outdoor Adventure Net 10:00 PST OAG 31772 Outdoor 4\u00d74 Net 12:30 PST OAG 31772 Sunday TAC-310 Net 17:00 PST TAC-310 310 Iowa Statewide Net 19:30 CEN Iowa 3119 Southeast Florida Net 20:00 EST South-East-Florida 31124 Connecticut Statewide 20:30 EST Connecticut 3109 Hawaii Newsline Net 17:00 HST Hawaii 3115 Canada DMR 21:00 EST Canada 302 DMRTrack Net 18:00 CEN DMR Track 31489 Midnight Net 21:00 PST TAC-310 310 1 CET \u2013 Central European Time If you see anything that needs to be updated, added, or removed please let me know. Please note, I am only listing nets available on the BrandMeister network. Ohio Section Nets http://arrl-ohio.org/digital/nets.html Digital Mobile Radio - DMR Known DMR Nets Updated: 03/27/2018 11:23 PM BrandMeister Worldwide Net Saturday 16:00 UTC (11 am ET) TG: 91 DMR World-Wide Net Saturday 17:00 UTC (12 noon ET) TG: 1 Outdoor Adventure Group Saturday 1:00 pm ET TG: 31772 D-Star Users Net Saturday 8:00 pm ET TG: 4001 Christian DMR Net Sunday 6:00 pm ET TG: 31479 Southeast Ohio DMR Net Sunday 7:30 pm ET TG: 313953 TAC310 Net Sunday 0100 UTC (8 pm ET Sunday) TG: 310 Iowa DMR Net Sunday 8:30 pm EST (8:15 pre-check-ins) TG: 3119 DMR Track Net Sunday 9:00 pm ET TG: 31489 Canada DMR Net Sunday 9:00 pm ET TG: 302 New England Wide DMR Net Monday 8:00 pm ET TG: 3181 Indiana DMR/C-Bridge Net Monday 8:00 pm ET TG: 31189 TG: 8710(c-bridge) Oklahoma ARES DMR Net Monday 9:15 pm ET TG: 3140 PAPA DMR Roundtable Net Monday 11:00 pm ET TG: 3106 Indiana ARES DMR Net Tuesday 8:00 pm ET TG: 3118 Pennsylvania DMR Net Tuesday 8:00 pm ET TG: 3142 Power Sports Net Tuesday 8:00 pm ET TG: 4001 Ontario Canada DMR Net Tuesday 8:00 pm ET TG: 3026 Texas \u201cTech\u201d Net Tuesday 8:30 pm ET TG: 3148 New York \"Chestnut Ridge\" Digital Net Tuesday 9:00 pm ET TG: 3136 Idaho DMR Net Tuesday 9:00 pm ET TG: 3116 SNARS DMR Net Tuesday 10:00 pm ET TG: 31268 Truckers RV'ers Travelers Net Wednesday 8:00 pm EST; 9:00 pm EDT TG: 4003 Ohio ARES Net -- Net Preamble Wednesday 8:30 pm ET TG: 3139 DMR Astronomy Net / North America Astronomy Wednesday 9:00 pm ET (0200z Thursday) TG: 31175 North American Tech Net Wednesday 9:00 pm EST TG: 3 After HamNation Net Wednesday Following HamNation Program TG: 311 Kentucky ARES DMR Net Thursday 8:00 pm ET TG: 3121 West Virginia DMR Net Thursday 8:00 pm ET TG: 3154 Illinois Digital Net Thursday 8:00 pm ET TG: 31171 Arkansas ARES WX DMR Net Thursday 8:00 pm ET TG: 31051 Tech Net Thursday 9:00 pm ET TG: 3 Arkansas DMR Net Thursday 10:00 pm ET TG: 3105 D-Star Round Table Net Thursday 10:00 pm ET TG: 4001 Hytera North American Net Thursday 10:30 pm ET TG: 31089 Tennessee ARES DMR Net Friday 8:00 pm EST; 9:00 pm EDT TG: 3147 TGIF (Thank God It's Friday) Net Friday 8:30 pm ET TG: 31665 Louisiana Statewide DMR Net Friday 9:00 pm ET TG: 31224 Digital Mobile Radio Nets. Times Listed in UTC. https://calendar.google.com/calendar/u/0/embed?src=ppfjiq6e31pnvcdmn3fue4rul0@group.calendar.google.com ctz=Etc/GMT pli=1","title":"Nets"},{"location":"hamradio/dmrnets/#ohio-section-nets","text":"http://arrl-ohio.org/digital/nets.html Digital Mobile Radio - DMR Known DMR Nets Updated: 03/27/2018 11:23 PM BrandMeister Worldwide Net Saturday 16:00 UTC (11 am ET) TG: 91 DMR World-Wide Net Saturday 17:00 UTC (12 noon ET) TG: 1 Outdoor Adventure Group Saturday 1:00 pm ET TG: 31772 D-Star Users Net Saturday 8:00 pm ET TG: 4001 Christian DMR Net Sunday 6:00 pm ET TG: 31479 Southeast Ohio DMR Net Sunday 7:30 pm ET TG: 313953 TAC310 Net Sunday 0100 UTC (8 pm ET Sunday) TG: 310 Iowa DMR Net Sunday 8:30 pm EST (8:15 pre-check-ins) TG: 3119 DMR Track Net Sunday 9:00 pm ET TG: 31489 Canada DMR Net Sunday 9:00 pm ET TG: 302 New England Wide DMR Net Monday 8:00 pm ET TG: 3181 Indiana DMR/C-Bridge Net Monday 8:00 pm ET TG: 31189 TG: 8710(c-bridge) Oklahoma ARES DMR Net Monday 9:15 pm ET TG: 3140 PAPA DMR Roundtable Net Monday 11:00 pm ET TG: 3106 Indiana ARES DMR Net Tuesday 8:00 pm ET TG: 3118 Pennsylvania DMR Net Tuesday 8:00 pm ET TG: 3142 Power Sports Net Tuesday 8:00 pm ET TG: 4001 Ontario Canada DMR Net Tuesday 8:00 pm ET TG: 3026 Texas \u201cTech\u201d Net Tuesday 8:30 pm ET TG: 3148 New York \"Chestnut Ridge\" Digital Net Tuesday 9:00 pm ET TG: 3136 Idaho DMR Net Tuesday 9:00 pm ET TG: 3116 SNARS DMR Net Tuesday 10:00 pm ET TG: 31268 Truckers RV'ers Travelers Net Wednesday 8:00 pm EST; 9:00 pm EDT TG: 4003 Ohio ARES Net -- Net Preamble Wednesday 8:30 pm ET TG: 3139 DMR Astronomy Net / North America Astronomy Wednesday 9:00 pm ET (0200z Thursday) TG: 31175 North American Tech Net Wednesday 9:00 pm EST TG: 3 After HamNation Net Wednesday Following HamNation Program TG: 311 Kentucky ARES DMR Net Thursday 8:00 pm ET TG: 3121 West Virginia DMR Net Thursday 8:00 pm ET TG: 3154 Illinois Digital Net Thursday 8:00 pm ET TG: 31171 Arkansas ARES WX DMR Net Thursday 8:00 pm ET TG: 31051 Tech Net Thursday 9:00 pm ET TG: 3 Arkansas DMR Net Thursday 10:00 pm ET TG: 3105 D-Star Round Table Net Thursday 10:00 pm ET TG: 4001 Hytera North American Net Thursday 10:30 pm ET TG: 31089 Tennessee ARES DMR Net Friday 8:00 pm EST; 9:00 pm EDT TG: 3147 TGIF (Thank God It's Friday) Net Friday 8:30 pm ET TG: 31665 Louisiana Statewide DMR Net Friday 9:00 pm ET TG: 31224","title":"Ohio Section Nets"},{"location":"hamradio/dmrnets/#digital-mobile-radio-nets-times-listed-in-utc","text":"https://calendar.google.com/calendar/u/0/embed?src=ppfjiq6e31pnvcdmn3fue4rul0@group.calendar.google.com ctz=Etc/GMT pli=1","title":"Digital Mobile Radio Nets. Times Listed in UTC."},{"location":"hamradio/dmrsms/","text":"SMS functions via DMR The Brandmeister network has some functions to request information via SMS messages. To access these functions specific keywords are to be sent to DMR ID 262993. Then the system responds as well via SMS on these requests. Below you\u2019ll find an overview of these commands with some explanation. The commands are not case sensitive. Command Explanation help Shows an overview of the available functions echo Sends immediately a response to test the SMS function wx Weather at the repeater site wx help Overview of all available weather commands wx Town Weather in the city \u2018Town\u2019 wx zip Town Weather in the area \u2018zip\u2019 in the city \u2018Town\u2019 wx zip, cc Weather in the area \u2018zip\u2019 in country \u2018cc\u2019 wx Town, cc Weather in the city \u2018Town\u2019 in country \u2018cc\u2019 wx zip Town, cc Weather in area \u2018zip\u2019 in city \u2018Town\u2019 in country \u2018cc\u2019 wx gps Weather at the actual position of the DMR user according to the radio\u2019s GPS metar xxxx METAR message at the airport identified by ICAO code \u2018xxxx\u2019 gps help Overview of all GPS commands gps Shows actual GPS position including the name of the location (street, city) of the DMR radio. Also direction and distance in relation to the actual repeater are provided gps set Stores the actual position as \u2018Home\u2019 location gps home Shows distance and direction of the actual position in relation to the previously stored \u2018Home\u2019 position gps callsign Shows distance and direction in relation to DMR user identified by \u2018callsign\u2019 Furthermore it\u2019s possible to route DMR messages into the DAPNet pager network. More information regarding DAPNet can be found at the website of Dutch Amateur Pagernetwork and RWTH Aachen (Aachen University). Messages for DAPNet are to be sent to DMR ID 262994. A pager message for DAPNet is to be sent in the format [callsign] [message], for instance PX0XXX This is a message from DMR to DAPNet . This sends a messagetext \u2018This is a message from DMR to DAPNet\u2019 to user PX0XXX . Prerequisite is that \u2018PX0XXX\u2019 is a registered DAPNet user. From: https://www.pe2kmv.nl/wp/en/dmr-en/sms-functions-via-dmr/ SMS functions via DMR Posted on September 27, 2017 | By Ronald Bouwens | 1 Comment The Brandmeister network has some functions to request information via SMS messages. To access these functions specific keywords are to be sent to DMR ID 262993. Then the system responds as well via SMS on these requests. Below you\u2019ll find an overview of these commands with some explanation. The commands are not case sensitive. Command Explanation help Shows an overview of the available functions echo Sends immediately a response to test the SMS function wx Weather at the repeater site wx help Overview of all available weather commands wx Town Weather in the city 'Town' wx zip Town Weather in the area 'zip' in the city 'Town' wx zip, cc Weather in the area 'zip' in country 'cc' wx Town, cc Weather in the city 'Town' in country 'cc' wx zip Town, cc Weather in area 'zip' in city 'Town' in country 'cc' wx gps Weather at the actual position of the DMR user according to the radio's GPS metar xxxx METAR message at the airport identified by ICAO code 'xxxx' gps help Overview of all GPS commands gps Shows actual GPS position including the name of the location (street, city) of the DMR radio. Also direction and distance in relation to the actual repeater are provided gps set Stores the actual position as 'Home' location gps home Shows distance and direction of the actual position in relation to the previously stored 'Home' position gps callsign Shows distance and direction in relation to DMR user identified by 'callsign' Furthermore it\u2019s possible to route DMR messages into the DAPNet pager network. More information regarding DAPNet can be found at the website of Dutch Amateur Pagernetwork and RWTH Aachen (Aachen University). Messages for DAPNet are to be sent to DMR ID 262994. A pager message for DAPNet is to be sent in the format [callsign] [message], for instance PX0XXX This is a message from DMR to DAPNet . This sends a messagetext \u2018This is a message from DMR to DAPNet\u2019 to user PX0XXX . Prerequisite is that \u2018PX0XXX\u2019 is a registered DAPNet user. From: https://www.lucifernet.com/2020/04/27/sms-functions-via-dmr/ Original post and credit to : Ronald PE2KMV https://www.pe2kmv.nl/wp/en/dmr-en/sms-functions-via-dmr/ The Brandmeister network has some functions to request information via SMS messages. To access these functions specific keywords are to be sent to DMR ID 262993. Then the system responds as well via SMS on these requests. Below you\u2019ll find an overview of these commands with some explanation. The commands are not case sensitive. Command Explanation help Shows an overview of the available functions echo Sends immediately a response to test the SMS function wx Weather at the repeater site wx help Overview of all available weather commands wx Town Weather in the city \u2018Town\u2019 wx zip Town Weather in the area \u2018zip\u2019 in the city \u2018Town\u2019 wx zip, cc Weather in the area \u2018zip\u2019 in country \u2018cc\u2019 wx Town, cc Weather in the city \u2018Town\u2019 in country \u2018cc\u2019 wx zip Town, cc Weather in area \u2018zip\u2019 in city \u2018Town\u2019 in country \u2018cc\u2019 wx gps Weather at the actual position of the DMR user according to the radio\u2019s GPS metar xxxx METAR message at the airport identified by ICAO code \u2018xxxx\u2019 gps help Overview of all GPS commands gps Shows actual GPS position including the name of the location (street, city) of the DMR radio. Also direction and distance in relation to the actual repeater are provided gps set Stores the actual position as \u2018Home\u2019 location gps home Shows distance and direction of the actual position in relation to the previously stored \u2018Home\u2019 position gps callsign Shows distance and dire Furthermore it\u2019s possible to route DMR messages into the DAPNet pager network. More information regarding DAPNet can be found at the website of Dutch Amateur Pagernetwork and RWTH Aachen (Aachen University). Messages for DAPNet are to be sent to DMR ID 262994. A pager message for DAPNet is to be sent in the format [callsign] [message], for instance PX0XXX This is a message from DMR to DAPNet . This sends a messagetext \u2018This is a message from DMR to DAPNet\u2019 to user PX0XXX . Prerequisite is that \u2018PX0XXX\u2019 is a registered DAPNet user. From: https://vk3tbs.home.blog/2020/05/15/sms-via-radio-or-hotspot/ SMS via Radio or Hotspot May 15, 2020Ben One of the most underutilised by very cool feature that comes with some digital networks is the ability to send and receive SMS messages. You can send it fairly easily to another radio, but did you know you can also receive a weather report, see where your last GPS transmitted location is, and send messages to your mobile phone. The best thing is there no cost either. While not all networks and not all radio\u2019s support sending SMS\u2019s. Some hotspots do and some done also just to make it even more confusing. While I don\u2019t plan to list all networks available, as they there are more all the time, and the settings change also. However, at the time of writing this (2020), the VK-DMR network does not support GPS or SMS (you must turn it off to use the system), but the BrandMeister one does. So, I will talk from here on about the BrandMeister network. If you use a different network, then check with that network first. BrandMeister Setup First you need to setup your BrandMeister account to send and receive SMS. From the BrandMeister page, login at the right of the screen. Then under Services on the left side, select selfcare. I usually set the radio brand to either ETSI or Motorola, however this will depend on the radio you have. While you are here, you might want to turn on or off your GPS location and check everything looks good. Radio Setup Would you believe most digital radios allow you to send and receive messages right from the screen easily. However not all. Unfortunately, at the time of writing this (2020), the OpenGD-77 does not support text messaging as yet. However, it is on the job list. I do understand that since text messaging isn\u2019t the most used option in digital radio, probably leaving this setup until last is fair enough. However, I have done it on the original GD-77 firmware, and seen it done on other radio\u2019s also. If your fortunate enough, you may have a hotspot that can do it anyway. Hotspot Sending I am not going to talk about every hotspot available, mainly because I don\u2019t own every hotspot available. But I will talk about the OpenSpot as I have a couple of them myself, and I know they work. From a PC, the menu on the right side has DMR SMS chat that will bring up a box much like the picture below. DMR SMS Chat in OpenSpot 262993 GPS and Weather If you send the message help to destination ID 262993 you will get a prompt much like above. It may take a little while to reply. As I live in Melbourne, you can see above I then sent a private message to 262993 again and typed in the message wx Melbourne, AU. You can see above the message on the left I received. Remember, the reply\u2019s do take a while to come back and usually arrive just as you have given up waiting! You could also send the message gps help to the same number, 262993, to get an overview of all the GPS commands which includes setting your home position, and so on. If you have transmitted your GPS location with the same callsign you set up in the selfcare then it will reply with your last location sent. If you want to save that as your home location, send GPS SET and it will save your last location as your home location. Then you will get from now on your home location and your last transmitted location. If you send RSSI to 262993 it will reply with the repeater and connected talk group you were last using. If you send a message INFO callsign where callsign is replaced with your call sign you will get a reply when you last spoke. If you have two digital ID numbers, then it will send both of them back to you. 262994 Repeater, POCSAG and dapnet If you send RPT SMS to 262994 you will get a reply of what static talk groups you are currently connected to. You can also send a message to a call sign using this 262994 number. For example, if you want to send a message to me, send VK3TBS followed by your message to number 262994. However, I couldn\u2019t get this to work \u2013 maybe because I was messaging myself! If you get it to work, please let me know what I did wrong. 262995 SMSC \u2013 SMS-ing to a mobile phone This is taking SMS-ing to the next level. I was even able to SMS my wife who doesn\u2019t have a licence. To do this, send the following message SMSGTE @[phone number] [message] to 262995. where [phone number] is your country number (e.g. 61 for Australia) followed by the mobile number. Remember to remove the first 0 if you\u2019re in Australia. There is more information on sending messages to and from your radio to mobile phones on the smsgte.org web site. There is heaps of information under the User Guide menu. UPDATE \u2013 Before I finish, I discovered the hard way that when you send a message from a mobile phone to a radio, I got a bill. I am not sure if it was because I am in Australia, or my phone carrier saw the oppertunity, but I think with a few tests it was only $1 or so. APRS Chat APRS is almost a bit easier and can quickly send messages to and from a mobile phone. Once you have done the above setup, I selected APRS chat in my OpenSpot2 dashboard. Then I sent a message with the destination callsign of SMSGTE then the message was @[phone number] [message] there [phone number] is your country number (e.g. 61 for Australia) followed by the mobile number. Remember to remove the first 0 if you\u2019re in Australia. You can see in the picture below I sent a message Test from hotspot to my phone which appeared instantly. I then sent one back from my phone saying This is from my mobile phone which then appeared instantly. It worked really well. From: https://on7lds.net/42/BM262_service_numbers BrandMeister Service Numbers BM262 Service Numbers The BrandMeister Germany team has implemented some nice features. They coded some 'SMS servicenumbers', these are services you can address via BM SMS. Their documentation can be found in the BM262 BrandMeister Wiki I made an English translation of te SMSC service number. 262995 - SMSC English translation by ON7LDS Preface set the correct Brand for your transceiver in your BrandMeister SelfCare all commands should be sent as a private call to the 262995 the commands are case-insensitive there should be only one space between query parts information in are placeholders for parameters, ' ' and ' ' should not be sent some Chinese devices (eg Anytone or RT3) unfortunately can not receive long text messages and may show only parts of the message or ignore the message completely. AnyTone has also problems with the reception of SMS while the hang time after sending an SMS is still active. For this and for short SMSses, it is possible to activate a \"Special Configuration\" (see point 10) ECHO - Function test Format : ECHO Example: ECHO The ECHO command can be used to test whether the SMS send / receive works correctly. When a text message comes back, everything is OK. If no SMS is coming back, there is no need to test the other functions (except for the \"Special Configuration\") , since these will most likely not work :-( The answer may look like this: Hi Jens, SMS which received by the system. When you do not receive any answer and you did set the correct Brand for your transceiver in your BrandMeister SelfCare, please follow the instructions described in section 10 \"Special Configuration\". Write SMS Format: Example: DK5RAS This is a test To send an SMS to someone, start with the callsign, followed by a space and then the desired message. As some transceivers (eg AnyTone or RT3) have problems with longer text messages, you should make sure that the message is not too long. Mostly, SMSses containing more than 256 characters will be truncated to 256 characters. Furthermore, you can optionally enable the reduction to 127 characters (more information at section 10 at the end of this manual). The receiver will be notified, next to your call, of the sending time of the SMS. These characters have to be deducted from the actual message ! When the recipient retrieves the SMS on the same day it was sent to him/her, the date will be suppressed. DO1JG (23:06) This is a test If the SMS is retrieved the next day or later, the SMS also contains the date (and thus making it longer). Retrieved the same year : DO1JG (30.08 -. 17:50) This is a test Retrieved another year : DO1JG (08/30/2018 - 17:50) This is a test This means that the header in can be 24 or 28 characters (line break are 2 characters), and in the case of a 6-digit callsign: 25 or 29 characters. For example, since the AnyTone can receive only 127 characters, you should limit the actual message to 98 characters. After having sent your SMS, you get a confirmation from the system that the message has been stored in the system. Your SMS to DO1JG has been stored in the system When you do not want the confirmation, you can disable it: Format: SEND Disable: SEND OFF Enable: SEND ON Receive SMS There are several possibilities: automatic delivery notification that an SMS has been received manual retrieval 2.0 Requirements For the notification and for automatic delivery, the radio ARS (Motorola) or RRS (Hytera) must have been enabled or the GPS position has to be sent regularly. When the transceiver communicates with the BrandMeister system (via ID xxx999 (eg 262999)), it is checked if there are new SMSses available. When using the automatic delivery, however, there is also the possibility that SMSses are lost. This can be when the time slot is blocked by other traffic short after communicating with the SMSC or when the reception is interrupted or bad. When further automatic delivery or notification does not take place, the SMSses, however, are not lost and can still be accessed manually. 2.1 SMS Notification By default, the \"SMS Notification\" option is enabled. This will send, by SMS, the number of messages in the INBOX (Conditions see 2.0) You have 5 new SMS in your INBOX. Send INBOX to 262995 to get a list or send GET to receive all SMS. The number of new SMSses in this notification relates to SMSses for which you do not yet have been informed. When another SMS arrives at this point, the next notification would only give notice about 1 SMS. The advantage of this system is that one can make free space for SMSses in the radio first, before retrieving them. Also, there will be no sudden reception of many unexpected messages. 2.2 Automatic Delivery: The automatic notification is disabled by default, but can be enabled/disabled using the following command: Format: DIRECT Enable: DIRECT ON Disable: DIRECT OFF Once this feature is enabled, you get (under the conditions of 2.0) the SMS sent immediately to your device. The message is not deleted by the system after delivery and can thus later once again be retrieved. The advantage of this system is obvious: you do not have to send commands to retrieve the SMSses. The downside is that you can get an unexpected number of SMSses at once and at least the AnyTone has issues with this (not receiving all SMSses or reboots). Everyone must decide which system suits him or her the best. When you use Hytera or Motorola devices and you are not expecting a lot of SMSses, it makes sense to activate automatic delivery. Nevertheless, one should query its INBOX regularly (see below) because SMSses can be lost sometimes. 2.3 Manual retrieval No matter which option you have chosen, you can always retrieve the SMSses manually. Format: INBOX Example: INBOX With the command INBOX (or short IN) you get a list of SMSses, stored in your inbox. It is a numbered list, with the most recent SMS first. A possible answer may look like this: You have 9 SMS in your INBOX 1. DO1JG (23:06) 2. DO1JG (22:27) 3. DO1JG (22:21) 4. DO1JG (08/30/2018 - 17:50 ) 5. DO1JG (08/30/2018 - 17:46) 6. DO1JG (08/30/2018 - 13:59) 7. DO1JG (08/30/2018 - 05:12) 8. DO1JG (08/30/2018 - 03:42) 9 . DO1JG (08/30/2018 - 03:41) This answer would be 268 characters long and would not be displayed correctly on 'problematic' devices. Even Motorola and Hytera devices would not show the complete message. For this reason, SMSses which are longer than 256 characters are generally shortened to 256 characters. Optionally you can, as already mentioned above, activate the reduction to 127 characters. It is advised to regularly erase your SMSses from the INBOX (see below). 2.3.1 Retrieveof all SMSses in one go Format: ALL Example: ALL With the command ALL (or alternatively GET) you instruct the system to send all SMSses to your device. Note that, as mentioned above, not all devices may possibly handle a high number of SMSses at once. The messages are not deleted from the system by this command and can be queried again if, for example, some text messages were not received. 2.3.2 query a specific SMS Format: GET Example: GET 4 With the GET command (or alternatively READ) one can retrieve a specific SMS. is the number of the SMS as shown with the INBOX command. It should be noted that the number is not fixed to the SMS, but always the actual index in the INBOX. So if you delete a message in the middle of the list, the following SMSses will shift to the top and thus will be renumbered. This feature is interesting for devices which can not process all SMSses at once. In this case, with GET 1 one can always retrieve the most recent SMS. Delete SMS There are two possibilities: delete all SMS in the INBOX at once or delete a specific SMS. 3.1 Delete all SMSses Format: DELETE Example: DELETE With the command DELETE (or alternatively DEL) you can delete all SMSses in the INBOX at once. It makes sense once you have accessed the SMSses, to use this command to keep the INBOX clean. answer: All SMS to you has been deleted. 3.2. Delete a specific SMS Format: DELETE Example: DELETE 4 With the DELETE command (or alternatively DEL ) you can delete specific SMS. is the number of the SMS as shown with the INBOX command. It should be noted that the number is not fixed to the SMS, but always the actual index in the INBOX. So if you delete a message in the middle of the list, the following SMSses will shift to the top and thus will be renumbered. Answer: SMS has been deleted. \"Special configuration\" Note: The \"Special Configuration\" is also valid for the service number 262993. so the \"Special Configuration\" commands can also be sent to 262993. 10.1 query the current configuration Format: CONFIG Example: CONFIG If one sends the command CONFIG, the current \"Special Configuration\" will be sent to the device by SMS. When you do not get a SMS as a response, it is an indication you have to activate the \"Special Configuration\". 10.2 Enable or disable \"Special Configuration\" Format: CONFIG Enable: CONFIG ON Disable: CONFIG OFF You can enable or disable the \"Special Configuration\" as needed, depending on the device used. Note : The settings will only be considered if the configuration is enabled. 10.3 SMS length for reception Format: CONFIG To cut received SMSses to 127 characters: CONFIG SHORT To cut received SMSses to 256 characters: CONFIG LONG AnyTone or RT3 users are strongly advised to activate the SHORT option, and of course also the \"Special Configuration\". 10.4 transmitting / receiving delay Format: CONFIG DELAY 1-10 delay for 8 seconds: CONFIG DELAY 8 The transmission / reception delay (an integer number, minimum 1 second and maximum of 10 seconds) is the time that elapses before the system will answer upon receiving an SMS command. The default is 2.5 seconds. The Anytone has an bug where no SMSses will be received during the hang time after sending an SMS. Values of 7...10 have been proved to solve this. 10.5 Reset Configuration Format: CONFIG RESET Example: CONFIG RESET The CONFIG RESET command will reset the \"Special Configuration\" back to the system default. In the meantime, the \"Special Configuration\" is also disabled. More Information: http://wiki.bm262.de/doku.php (translated from German)","title":"Send SMS"},{"location":"hamradio/gmrs/","text":"","title":"GMRS Live feeds"},{"location":"hamradio/ham/","text":"Amateur Radio Signal (What do they sound like?) https://www.sigidwiki.com/wiki/Category:Amateur_Radio","title":"What do amatuer modes sound like"},{"location":"hamradio/hamclock/","text":"Ham Clock for Raspberry PI https://www.tomshardware.com/news/this-raspberry-pi-hamclock-is-perfect-for-amateur-radio-enthusiasts https://www.clearskyinstitute.com/ham/HamClock/ https://www.reddit.com/r/amateurradio/comments/h7zg00/selfcontained_raspberry_pi_ham_clock_update/","title":"Hamclock"},{"location":"hamradio/hamvoip/","text":"Allstar Link on a Raspberry PI w/Asterisk https://www.hamvoip.org/","title":"Allstar Link"},{"location":"hamradio/homeQTH/","text":"(39.536450, -84.381422) https://www.latlong.net/c/?lat=39.536450 long=-84.381422 Lat Long (39.536450, -84.381422) GPS Coordinates 39\u00b0 32' 11.22'' N 84\u00b0 22' 53.1192'' W DM.m 39 32.187 N DM.m 84 22.88532 W https://www.directionsmag.com/site/latlong-converter/","title":"Home QTH Information"},{"location":"hamradio/hotspot/","text":"Hotspot on 438.800Mhz - KD8BXP Current digital modes supported D-Star, DMR MMDVM on Raspberry PI Zero W, running PI-Star Image on 8gb SD card. D-Star Reflector Information: RPT1: KD8BXP B RPT2: KD8BXP G Programmed into the ID-92: Refelctor Information Location REF001C D-Stars Mega Repeater United States REF002C Some Nets NE United States REF004C General Rag Chew (English Only Please) United States REF015C Data Only - Worldwide Use London, England REF016C General Amateur Use British Columbia, Canada REF024C General Use United States REF025A Public Service, Skywarn Emergency Use Washington, DC REF025C General Usage Sunday Night NCR net Washington, DC REF026A General Use Vancouver, BC Canada REF038A The Ohio Reflector Cleveland, Ohio REF038B NODIG Permalink Cleveland, Ohio REF038C Dayton Hamvention and the ARRL REF039A Ohio State Wide ARES Wellington, Ohio REF039B Ohio State Wide EMA Wellington, Ohio REF039C Ohio State WIde Severe Weather Wellington, Ohio REF039D American Red Cross Operation in Ohio Wellington, Ohio REF051B Club and other non-emergency nets Chicago, IL REF051C Casual Use/ Ragchewing Chicago, IL DMR Information Coming Soon: Setup How to, good info https://dzone.com/articles/how-to-set-up-amateur-radio-digital-voice-hotspot","title":"Setup"},{"location":"hamradio/hotspothardware/","text":"MMDVM Pi-Star upgrade modem firmware https://brara.org/BLOG/2019/06/28/dmr-pi-star-firmware-upgrade-for-mmdvm-hs-hat-flash-by-al-af4fa-2/","title":"Hardware"},{"location":"hamradio/k4usd_network/","text":"The K4USD Network is operated by the US Digital Amateur Repeater Club (K4USD) using multiple c\u2011Bridges\u2122 to interconnect Motorola Mototrbo\u2122 repeaters together and peering with other DMR bridge providers including DMR-MARC, DMRX, DMR+, Brandmeister, TGIF, QuadNET and 27 other regional DMR networks. Our main c-Bridges\u2122 are located in a multihomed data center near Dayton Ohio on dedicated servers. We currently support repeaters in 17 states and DC in a managed network; we accept all amateur Mototrbo\u2122 repeaters (XPR8300, XPR8380, XPR8400, MTR3000, SLR1000, SLR5700, SLR8000) and do not charge any fees, although we do accept donations. We offer a wide variety of general public Talk Groups (TGs) listed below. We also offer some local/regional TGs not listed below on request. If a repeater owner/operator wants a TG not listed, they should contact the administrator. Repeater users should contact the repeater owner/operator for the TGs available on the repeater and time slot (TS) used for each TG. The TS listed below for the network wide TGs are the network default configuration which may vary for specific repeaters. The K4USD Network will be terminating Text Messaging across our network effective May 1st, 2019 because of some users transmitting GPS data and Talker Alias. Users will still be able to use Text Messaging locally on a repeater. . Talk Group Name TG TS Comments DMR-MARC WW 1 1 World Wide (DMR-MARC) Local 2 2 2 Local Area Network (defined by the local repeaters) DMR-MARC NA 3 1 North America (DMR-MARC) Local 8 8 2 Secondary Local Area Network (if available, also TS1 on some rpts) Local 9 9 2 Local Repeater Only Brandmeister WW 91 1 World Wide (BM) Brandmeister NA 93 1 North America (BM) DMR+ USA 133 1 DMRPlus USA (Reflector 4639) USA 1776 2 USA Talkgroup Bridge 3100 2 \u201cThe Bridge\u201d (DMRX BM) QuadNet 31012 2 www.openquad.net (Cross connect to Fusion and D-Star) TGIF 31665 2 tgif.network DMR-MARC WW-German 10 1 WW German Language (DMR-MARC) DMR-MARC WW-English 13 1 WW English Language (DMR-MARC) DMR-MARC WW-Spanish 14 1 WW Spanish Language (DMR-MARC) TAC-1 8951 2 Tactical Channel (DMRX) TAC-310 310 2 Tactical Channel for QSOs (DMRX) (Linked to BM) TAC-311 311 2 Tactical Channel for QSOs (DMRX) (Linked to BM) TAC-312 312 2 Tactical Channel for QSOs (DMRX) (Linked to BM) TAC-313 313 2 Tactical Channel for QSOs (DMRX) TAC-314 314 2 Tactical Channel for QSOs (DMRX) TAC-315 315 2 Tactical Channel for QSOs (DMRX) TAC-316 316 2 Tactical Channel for QSOs (DMRX) TAC-317 317 2 Tactical Channel for QSOs (DMRX) TAC-318 318 2 Tactical Channel for QSOs (DMRX) TAC-319 319 2 Tactical Channel for QSOs (DMRX) Midwest Region 3169 2 ND SD NE MN IA MO WI IL MI IN OH (DMR-MARC) (DMR+ 4640) Northeast Region 3172 2 NY NJ VT MA CT NH RI ME (DMR-MARC) (DMR+ 4642) Mid-Atlantic Region 3173 2 PA WV VA MD DE DC (DMR-MARC) (DMR+ 4643) Southeast Region 3174 2 AR LA KY TN MS AL GA FL NC SC (DMR-MARC) (DMR+ 4644) Southern Plains Region 3175 2 KS OK TX (DMR-MARC) (DMR+ 4645) Southwest Region 3176 2 CA NV AZ NM HI (DMR-MARC) (DMR+ 4646) Mountain Region 3177 2 AK WA OR ID MT WY UT CO (DMR-MARC) (DMR+ 4647) JOTA 907 2 Boy Scout Jamboree-on-the-Air (BM) JOTA TAC1 9071 2 Boy Scout Jamboree-on-the-Air TAC-1 (BM) JOTA TAC2 9072 2 Boy Scout Jamboree-on-the-Air TAC-2 (BM) California 3106 2 CA State TG Colorado 3108 2 CO State TG (BM) Delaware 3110 2 DE State TG (BM District of Columbia 3111 2 DC State TG (BM) Florida 3112 2 FL State TG Georgia 3113 2 GA State TG (BM) Hawaii 3115 2 HI State TG Illinois 3117 2 IL State TG Indiana 3118 2 IN State TG (BM) Iowa 3119 2 IA State TG (BM) Kentucky 3121 2 KY State TG (BM) Maryland 3124 2 MD State TG Massachusetts 3125 2 MA State TG Michigan 3126 2 MI State TG Minnesota 3127 2 MN State TG (BM) Missouri 3129 2 MO State TG (BM) Nebraska 3131 2 NE State TG (BM) New Hampshire 3133 2 NH State TG New Jersey 3134 2 NJ State TG (BM) New York 3136 2 NY State TG North Carolina 3137 2 NC State TG (BM) (available on request only) Ohio 3139 2 OH State TG Pennsylvania 3142 2 PA State TG Rhode Island 3144 2 RI State TG (BM) South Carolina 3145 2 SC State TG (BM) Tennessee 3147 2 TN State TG (BM) Texas 3148 2 TX State TG Virginia 3151 2 VA State TG Wisconsin 3155 2 WI State TG Crossroads 8710 2 Indiana Statewide TG First Coast 31121 2 NE Florida (BM) Handi-Hams 31990 2 Handi-Hams (BM) http://handiham.org Net31001 31001 2 Scheduled Nets (BM) Net31002 31002 2 Scheduled Nets (BM) TN Ten 314710 2 Tennessee Ten (BM) (this is where W2XAB hangs out) Some documents, files and links of interest to the Amateur community: Amateur Radio Guide to Digital Mobile Radio: http://guide.k4usd.org Technician Study Cards: http://technician.k4usd.org Hamvention 2019 Presentation Files: http://www.k4usd.org/Hamvention2019.zip K4USD Peer Watch: http://cbridge.k4usd.org:42420/PeerWatch K4USD Call Watch : http://cbridge.k4usd.org:42420/CallWatch Network Statistics: http://dmrx.net/dashboard/dmrx-dashboard-k4usd_network.html (This only represents repeaters/users on our primary gateway/conference bridge)","title":"K4USD Network Information"},{"location":"hamradio/lora_ideas/","text":"LoRa Ideas and app to use Add Bluetooth https://circuitdigest.com/microcontroller-projects/using-classic-bluetooth-in-esp32-and-toogle-an-led app: https://play.google.com/store/apps/details?id=Qwerty.BluetoothTerminal","title":"General"},{"location":"hamradio/lora_radio/","text":"Some projects using LoRa radio for the Ham. Most promising so far: https://epxx.co/logbook/entries/loramador_en.html https://www.youtube.com/watch?v=nXooq_4EkzU feature=emb_logo https://github.com/elvis-epx/LoRaMaDoR Others: Arduino-Kiss https://github.com/flok99/arduino-kiss (5 years ago last update) LoRaHam (German doesn't translate well) https://devlol.org/wiki/fire/LoRaHAM Hamshield LoRa Edition (1 watt in 144/440/915mhz versions) https://inductivetwig.com/products/hamshield-lora-edition-high-power?variant=31614414323808 https://www.tindie.com/products/caseyhalverson/hamshield-lora-edition-1-watt-440mhz/ https://github.com/EnhancedRadioDevices/LoRaHam (very interesting maybe properitary for Hamshield ?) LoRaHam old project, I forked years ago, hasn't been updated in a while. https://github.com/travisgoodspeed/loraham Kiss-Lora-arduin another Arduino-Kiss sketch (2 years old was the last update) (needs some work to get it working with TTGO boards) https://github.com/josefmtd/kiss-lora General Information but no code: LoRa AX25 IP Network https://github.com/dmahony/LoRa-AX25-IP-Network LibAPRS Information: https://unsigned.io/projects/libaprs/ https://unsigned.io/15-kilometre-ssh-link-with-rnode/ LoRa Chat Device (raspberry pi) Information: https://libraries.io/github/joehunt588/Lora-Chat-Device ESP32 LoRaAprs: (Not tested) LoRa APRS ESP32 KISS APRSDroid bluetooth modem, LoRa APRS-IS RX/TX iGate w/digipeater https://github.com/sh123/esp32_loraprs LoRa-Aprs: (Not tested) another APRS for LoRA https://github.com/josefmtd/lora-aprs LoRaKissTNC: (???? probably need some work to make it work with the TTGO boards) https://github.com/w-ockham/LoRaKissTNC KISSLoRaTNC: (doesn't work as is with TTGO boards, worked on some changes, didn't get it working) https://github.com/kc1awv/KISSLoRaTNC Not just Ham radio chat sketch: LoRa Messenger https://github.com/Airrr17/LoRa_messenger My Current LoRa boards (Aug 7, 2020): LoRa w/OLED 433Mhz (4 boards) LoRa32u4 II 915Mhz (2 boards) LoRa Node Micro Shield (4 maybe 3 now) LoRa Node 915Mhz on custom PCB 1 LinkSprite LoRa Shield 915Mhz (4 boards) Blkbox.me LoRa 915Mhz SX1276 (2 boards) RFM95 915Mhz LoRa module (1 and 1 on D1 Mini PCB) EByte E32 915T20D LoRa Serial Device (2 baords) M5Stack LoRa868 Module (2 modules)","title":"Projects"},{"location":"hamradio/lorameshinfo/","text":"https://www.meshtastic.org/ https://github.com/btcven/locha https://locha.io/ https://www.project-owl.com/ https://github.com/Code-and-Response/ClusterDuck-Protocol https://github.com/sparrow-platform/duck-sparrow-link (interesting, and cloned) https://sparrow-platform.com/ https://www.lantern.works/ MORE and Other LoRa Mesh https://github.com/daeynasvistas/LoRa-Mesh (interesting) https://github.com/MBezerril/LoRaMeshArduino (interesting) https://github.com/p4ul0plr/LoRaMESH-Com-arduino (interesting) https://github.com/talhakhalil0703/ArduinoAndroidMeshNetwork (interesting) https://github.com/infernoDison/cottonCandy (really interesting) https://github.com/MBezerril/LoRaMeshESP8266 (interesting)","title":"Mesh Projects"},{"location":"hamradio/moreLoRa/","text":"LoRaHam Project by Travis Goodspeed https://github.com/travisgoodspeed/loraham forks: mine - https://github.com/kd8bxp/loraham JayGe - https://github.com/JayGe/loraham http://loraham.org/ LoRa Im - probably already said somewhere https://hackaday.com/2020/04/25/a-lora-im-me-for-the-end-of-the-world/ Related to Armachat Doomsday LoRa Communicator https://www.aneddoticamagazine.com/armachat-doomsday-communicator-and-off-grid-wireless-messenger/ https://www.pcbway.com/project/shareproject/ARMACHAT___Doomsday_LORA_QWERTY_communicator.html LoRa Mesh Chat (Ripple) https://www.hackster.io/scottpowell69/ttgo-lora-mesh-chat-device-37913c https://www.hackster.io/scottpowell69/lora-mesh-chat-5267d9 https://www.electronics-lab.com/lora-mesh-chat/ More: https://hackaday.com/2017/10/24/lora-is-the-network/ LoRa QWERTY Messenger https://www.hackster.io/scottpowell69/lora-qwerty-messenger-c0eee6 (Ripple) Keyboards: https://www.banggood.com/LILYGO-TTGO-T-Watch-Keyboard-ESP32-Main-Chip-Hardware-And-MINI-Expansion-Keyboard-For-Programmable-Watch-p-1671821.html?ID=6287845 cur_warehouse=CN https://m5stack.com/collections/m5-hat/products/cardkb-hat https://nootropicdesign.com/projectlab/2018/10/20/lora-mesh-networking/ Alora RFM1262 LoRa Mesh network https://learn.circuit.rocks/alora-rfm162-lora-mesh-network/2 PJON Network https://www.pjon.org/","title":"More Projects"},{"location":"hamradio/more_APRS/","text":"APRS Apr 11, 2020, Categories: radio Another post in my burst of amateur radio blog posts. To say that the documentation for APRS is not great is an understatement. What should be the best source of information, aprs.org, is just a collection of angry rants by the inventor of APRS, angrily accusing implementations and operators of using his invention the wrong way. There?s no documentation about what the right way is, just that everyone is wrong. So here I?ll attempt to write down what it is, in one place, in an effort to both teach others, and for people who know more than me to correct me. The best source of APRS information for me has actually been Kenwood radio manuals. See resources at the bottom. Update: My new favourite reference: Section 9.5 of the Direwolf user guide. APRS in short APRS is a way to send short pieces of digital information as packets of data. The messages are: Status about you Your position (optionally not exact) Your heading Your QSY (frequency you?re tuned to if someone wants to call) Weather reports Status about ?items? and ?objects?. This is objects that are not you, and aren?t a radio. For example where the meeting point is, or a hurricane. Short messages The protocol As an operator you don?t have to care much about what AX.25 is, or how it relates to X.25. But no explanation is complete without mentioning it. As on operator there?s no need to read up much about this, so while I have links in this section, you don?t need to follow them. AX.25 is a modified version of X.25 for Amateur radio operators. It can be used for ?connections? just like dialing into a BBS, but APRS only uses connectionless packets. So I?ll say no more about ?connections?. Unless you?re programming your own implementation of APRS there?s no need to read the protocol specs. Suffice to say that APRS uses AX.25 connectionless packets for everything it does. Block diagram of operating APRS APRS diagram Components: GPS satellites send data to GPS receivers to tell them what time it is, and where they are. A GPS receiver takes those signals and provides time and position coordinates The APRS implementation periodically (or on demand, or using fancy algorithms to decide when) constructs position reports as AX.25 packets, and gives them to the TNC for transmission. Also the other types of packets, such as messages and object locations, are constructed here. The TNC is a modem that turns packets into analog sounds. The digital side of the TNC uses an interface called KISS. The radio takes the sounds and turns them into radiowaves. WIDE1 digipeaters (repeaters of packets) are more local collectors of information, and repeat them so that they can be seen by a WIDE2 repeater. WIDE2 digipeters are in a position to cover a wider area, but are otherwise just like other digipeaters. Exactly how much WIDE1 WIDE2 repeat a packet is described below. An IGate is a digipeater that may not actually repeat your packet over radio, but reports to some place over the Internet. Eventually somehow (I?m not clear on exactly how) it?ll be visible on aprs.fi. The receiving path is just the revers path (except of course you don?t broadcast back to the GPS satellites). Different radios require more or less extra hardware or software. See ?How to send/receive APRS?, below. Packet path An APRS packet sent out has a path. For a handheld it?s usually WIDE1-1,WIDE2-1. This means that it should be repeated by both WIDE1 and WIDE2 digipeaters, and that it should only be repeated once (per type). To demonstrate the repeat counter I?ll use WIDE1-2,WIDE2-2. If your WIDE1-2,WIDE2-2 packet is seen by a WIDE1 digipeater, it?ll repeat it as WIDE1-1,WIDE2-2. The WIDE1 counter (the second number) was decreased by one. Let?s say it?s then picked up by a WIDE2 digipeater. It?ll rebroadcast as WIDE1-1,WIDE2-1 (the WIDE2 counter having now been decremented). Another WIDE2 repeater hears it, and repeats it as (I?m not sure) either WIDE1-1,WIDE2-0, or just WIDE1-1. NOTE: I?m not sure about exactly the content of the PATH as it propagates, but that is the general idea of how the counter works. Actually WIDE2 digipeaters can simultaneously act as WIDE1, so if you only have WIDE1-1 in your path, and a WIDE2 digipeater hears it, it?ll still process and repeat it. SSID In order to support multiple radios per call sign, all sources and destinations are in the format of the callsign, a dash, and a number. This number is the SSID. E.g. I set M0THC-7 on my Kenwood D74, and M0THC-2 on my Yaesu FT3D. They don?t have to be different numbers, since when out in the field you?re probably not using two at the same time, so there will be no confusion. Especially you won?t use two handheld radios in two different locations. If someone else is using your radio then they should program in their call sign, not yours, so you can use the same SSID. I set different numbers because I often experiment with the two, and need to have different addresses for them, so that I can send messages between them. The SSID is supposed to have meaning (e.g 5 is ?smartphone?, 8 is ?boats or maritime mobile?, 15 is ?generic other?), but it?s just convention and you won?t break anything (to my knowledge) if you have to use the ?wrong? SSID. There are enough ?generic? SSIDs that you should be able to follow it though. How to send/receive APRS This depends on what hardware you have. If you have a radio with APRS and GPS support (e.g. Kenwood D74, Yaesu FT3D, AnyTone 878UV) then it can act as GPS receiver, APRS implementation, TNC, and radio all in one. Except the AnyTone can only send its position, not receive anything. See your manual for how to set that up. It?s a more or less pleasant experience, as I mentioned in my FT3D vs D74 review. If you have a regular analog radio, such as Baofeng UV-5R, then from the diagram above it only implements the ?Radio? bit. That?s fine, you don?t need more. You can run a software TNC such as Dire Wolf, which implements both APRS and the TNC. You can set your radio to VOX, meaning it?ll start transmitting when the TNC sends audio to it. That way you don?t need to worry about pressing PTT to transmit. Or you can use a Mobilinkd TNC, and which connects to a ?computer? (your phone, which has a GPS receiver) over bluetooth, and triggers PTT ?properly? instead of using VOX. The radio then simply takes the sound it?s provided, and broadcasts. And of course it works the other way too, it receiving the data for decoding by the TNC. APRS is done on 144.800 MHz in most of the world. The US uses 144.390MHz, and some other places use other frequencies. That?s one piece of information that aprs.org actually does provide. APRS over JS8Call JS8Call is a great low power slow transmission digital messaging protocol usually run on HF frequencies. JS8Call is FT8 but made for doing more than just exchanging signal reports. Specially formatted JS8Call messages are picked up by IGates and forwarded over the Internet. That way you can be in the middle of nowhere. Literally anywhere on the planet with a decent view of the sky, and if HF propagation is good enough that day and time of day, you should be able to send your position for aprs.fi to display. Curiously though, when I send out my location it shows up wrong on aprs.fi. Not sure why, but it?s off by a bit. So this sends APRS messages without encapsulating APRS in AX.25. An example message sending an APRS message APRS over JS8CALL is @ALLCALL APRS::M0THC-7 :hello{01} (the number of spaces matter). See this repo for how to construct these messages) Messages Simple messages can be sent between APRS-capable handhelds by simply using their APRS addresses. E.g. I can send between my two handhelds by sending from M0THC-7 to M0THC-2. The message is retried a couple of times, until an acknowledgement is received. Email Like IGates repeating your position to the Internet, and WIDE1/WIDE2 digipeaters repeating over RF, there are special recipients that will forward your message through other mediums. E.g. you can send short emails by sending a message to EMAIL-2. The message must begin with the destination email address, but you can teach EMAIL-2 about aliases by sending foo foo@bar.com, making foo an alias for foo@bar.com. A short alias makes you able to send slightly longer messages. You can also receive emails (well, the subject line) this way, but only from addresses you?ve programmed in as aliases. In the example of foo above the email would be: From: foo@bar.com To: aprsemail2@ae5pl.net Subject: M0THC-7:Hello this is the message In the email body I must somewhere have exactly this: userid:foo: The body of the email is not part of the message. It only needs to contain the line above So you can?t merely forward your emails to APRS. These are for short messages. Sending SMS Similarly you can send SMS via APRS. You just send a message to SMSGTE with @447xxxxxxxxx test via APRS as content. Items and Objects Aside from reporting your own position, you can also report the position of other things. This could be base camp (or another meetup point), or a something that moves, like a storm or a car (without a radio, since a car with a radio can broadcast its own location). APRS is a? not great designed protocol, at least by modern standards. It has ?Items? and ?Objects?, but the difference between them is only their semantic meaning. They?ll show up on most software exactly the same. The only technical difference is that Objects can have timestamps associated with them, and Items can?t. Both can have a course and speed, and other data associated with them. The specs say that Objects are for moving objects, and Items are for ?things that are occasionally posted on a map?. That? doesn?t actually mean anything. Essentially the Items/Objects distinction is a layer violation. Messaging the International Space Station VHF/UHF doesn?t have great reach. It only works line of sight (mostly true. There?s sporadic E but it?s? sporadic. VHF/UHF gets its reach through repeaters, or for APRS that?s digipeaters. But you need line of sight to the digipeater, and a path to your recipient. This is where satellites come in, and in particular the International Space Station (ISS). You can bounce messages off of the ISS. It has a digipeater. It?s not on the standard APRS frequency, but on 145.825 MHz. This way you can reach really far in one hop. Sure, terrestrial digipeaters with a correctly configured PATH can reach very far too, but bouncing on the ISS is a different level of cool. I?ve not done this yet though. Digital APRS Everything described in this post is ?analog APRS?. ?Digital APRS? is a term for putting the data in another digital protocol (such as DMR), and sending your position that way. Probably the JS8Call APRS above would be classified as ?digital APRS?. APRS to SMS gateway how to register https://smsgte.org/how-to-register/","title":"More"},{"location":"hamradio/more_APRS/#aprs-to-sms-gateway-how-to-register","text":"https://smsgte.org/how-to-register/","title":"APRS to SMS gateway how to register"},{"location":"hamradio/new_packet_radio/","text":"https://elekitsorparts.com/product/npr-70-modem-by-f4hdk-new-packet-radio-over-70cm-band-amateur-radio-packet-radio Info: https://www.arednmesh.org/content/npr-new-packet-radio-available https://opensource.com/article/17/9/packet-radio https://hackaday.io/project/170710-esp32-tnc-and-audio-relay-for-hfvhf-packet-radio","title":"New Packet Radio"},{"location":"hamradio/offgridcommunication/","text":"Ham related, but not really ham radio https://gotenna.com/ https://gotennamesh.com/products/mesh https://www.gotoky.com/ https://www.amazon.com/Power-Talkie-Grid-Communication-Device/dp/B07XTP1T7M https://fogo.io/products/the-fogo https://beartooth.com/ https://www.skilledsurvival.com/survival-radio-communication-in-a-broken-world/ https://www.meshtastic.org/ https://disaster.radio/build/","title":"Off Grid Communication Devices"},{"location":"hamradio/peanut/","text":"This app is for HAM amateurs only! With this client you can connect to the Peanut Server. The Peanut server is a reflector where you can meet people. Some rooms are connected to DSTAR/Fusion and DMR reflectors. https://play.google.com/store/apps/details?id=peanut.peanut https://www.pa7lim.nl/peanut/ http://peanut-usa.pa7lim.nl/ recommended network radio https://www.freebytes.com/catalog/product_info.php?products_id=2139 http://www.hi-radio.com/product/senhaix-n60-android-vehicle-phone-network-radio/ facebook group https://www.facebook.com/groups/2017908268317595/","title":"Peanut APP"},{"location":"hamradio/raspberryPi/","text":"Ham Raspberry Server aprs, echolink, svxlink, beacon cw https://www.bitbaru.com/site/ham-raspberry-server/","title":"Ham Server"},{"location":"hamradio/shtfradio/","text":"International distress frequencys https://en.wikipedia.org/wiki/International_distress_frequency#:~:text=FRS%3A%20FRS%20channel%201%3A%20462.5625,(476.525%2F477.275%20MHz). International distress frequencies, currently in use are: 2182 kHz for medium range maritime voice use. The US Coast Guard has said \"beginning August 1st, 2013 the Coast Guard would no longer monitor 2182 kHz\".[4] Many other MRCCs, for example most in Northern Europe, now only have MF capabilities and no HF.[5] Several HF maritime voice frequencies exist for long-distance distress calls:[6] 4125 kHz 6215 kHz 8291 kHz 12290 kHz 16420 kHz Marine VHF radio Channel 16 (156.8 MHz) for short range maritime use 406 MHz to 406.1 MHz is used by the Cospas-Sarsat international satellite-based search and rescue (SAR) distress alert detection and information distribution system Digital selective calling frequencies Several maritime frequencies are used for digital selective calling (DSC), and they are also monitored for DSC distress signals:[6][7] 2.1875 MHz 4.2075 MHz 6.312 MHz 8.4145 MHz 12.577 MHz 16.8045 MHz 156.525 MHz, Marine VHF radio Channel 70 Aeronautical frequencies 121.5 MHz is the civilian aircraft emergency frequency or International Air Distress frequency. It is used by some civilian emergency locator beacons; however, the Cospas-Sarsat system no longer monitors the frequency. 243 MHz for NATO military aircraft emergency frequencies 406 MHz to 406.1 MHz is used by the Cospas-Sarsat international satellite-based search and rescue (SAR) distress alert detection and information distribution system Search And Rescue frequencies 123.1 MHz: Aeronautical Auxiliary Frequency (International voice for coordinated SAR operations). 138.78 MHz\u2014 U.S. military voice SAR on-the-scene use. This frequency is also used for direction finding (DF). 155.160 MHz 172.5 MHz\u2014 U.S. Navy emergency sonobuoy communications and homing use. This frequency is monitored by all U.S. Navy ASW aircraft assigned to a SAR mission. 282.8 MHz\u2014 Joint/combined on-the-scene voice and DF frequency used throughout NATO 406 MHz / 406.1 MHz - Cospas-Sarsat international satellite-based search and rescue (SAR) distress alert detection and information distribution system Emergency position-indicating radiobeacon station (EPIRB) Search and rescue transponder (SART) Survival radio Amateur radio frequencies VHF, UHF calling frequencies can also be used to make emergency calls Band Global Region 1 Europe, Africa Region 2 The Americas[8] Region 3 Asia 13 cm 23 cm 1294.500 MHz (U.S.) 33 cm N/A 927.500 MHz (U.S.) N/A 70 cm 433.500 MHz (EU) 446.00 MHz (U.S.) 1.25 m N/A 223.500 MHz (U.S.) N/A 2 m 145.500 MHz (EU) 146.520 MHz (U.S. Canada) 145.000 MHz (Philippines, Indonesia Thailand) 4 m 70.450 MHz (EU) N/A 6 m 52.525 MHz 10 m 29.600 MHz 12 m RTTY/Packet only MF and HF frequencies Emergency Centre of Activity (ECOA) frequencies informally established by the International Amateur Radio Union regional organizations: Band Global[9][10] Region 1[11] Europe, Africa Region 2[12] The Americas Region 3[13] Asia 15 m 21360 kHz 17 m 18160 kHz 20 m 14300 kHz 30 m 40 m n/a 7110 kHz 7060 kHz 7240 kHz 7275 kHz 7110 kHz 60 m n/a 80 m n/a 3760 kHz 3750 kHz 3985 kHz 3600 kHz Emergency/Disaster Relief Interoperation Voice Channels of the amateur radio Global ALE High Frequency Network:[14] 3791.0 kHz USB 7185.5 kHz USB 10145.5 kHz USB 14346.0 kHz USB 18117.5 kHz USB 21432.5 kHz USB 24932.0 kHz USB 28312.5 kHz USB Other frequencies Citizens band (CB) radio (not available in all countries) Emergency channels 9 (27.065 MHz AM) and 19 (27.185 MHz AM) GMRS: 462.675 MHz is a UHF mobile distress and road information calling frequency allocated to the General Mobile Radio Service and used throughout Alaska and Canada for emergency communications; sometimes referred to as \"Orange Dot\" by some transceiver manufacturers who associated a frequency with a color-code for ease of channel coordination, until the creation of the Family Radio Service, in 1996, \"GMRS 675\" or Channel 6/20 on mobile radios today. Its bandwidth can vary between 12.5, 25 and 50 kHz, and is also allocated to Ch. 20 on 22-channel FRS/GMRS \"blister pack\" radios. It can have a repeater input frequency of 467.675 MHz, and a tone squelch of 141.3 Hz. After FCC deregulation of simplex FRS/GMRS radios, FRS users may transmit up to 2 watts on the GMRS emergency channel 20 (462.675 MHz) with 141.3 Hz CTCSS, or channel 20-22. MURS: 151.940 MHz (only available in the United States) FRS: FRS channel 1: 462.5625 MHz (carrier squelch, no tone or sub-channel), channel 3: 462.6125 MHz[15] and channel 20: 462.6750 MHz (141.3 Hz CTCSS - channel 20, code 22 or channel 20-22). UHF CB (Australia): Emergency channels 5/35 (476.525/477.275 MHz).[16] Channel 5 is the designated simplex and repeater output emergency channel, while channel 35 is used as the repeater input frequency for duplex operation. UHF CB is only available in Australia and New Zealand. PMR446 (Europe): Channel 1 analog (446.00625 MHz, CTCSS 100.0 Hz, channel 1/12), Channel 8 analog (446.09375 MHz, CTCSS 123.0 Hz, channel 8/18). SHTF Survivalist Radio Freqs https://radiofreeq.wordpress.com/2013/06/29/shtf-survivalist-radio-frequency-list/ ==== SHTF SURVIVALIST RADIO FREQUENCY LIST BASIC CHART ==== === BAND === | CHAN. | FREQUENCY MHZ| DESCRIPTION ============ | ===== | ============ | ================== FRS UHF ==== | FRS 3 | 462.6125 FM =| PREPPER GMRS UHF === |GMRS17 | 462.6000 FM =| SURVIVALIST PMR UHF ==== | PMR 3 | 446.03125FM =| SURVIVALIST PREPR MURS VHF === |MURS 3 | 151.9400 FM =| SURVIVALIST PREPR CB AM ====== |CB 3AM | 026.9850 AM =| PREPPER CB AM ====== |CB 9AM | 027.0650 AM =| HIGHWAY SAFETY CB SSB ===== |CB 37U | 027.3750 USB | SURVIVALIST PREPR CB FREEBAND= |FB425U | 027.4250 USB | SURVIVALIST PREPR LOWBAND VHF= |LOW334 | 033.4000 FM =| SURVIVALIST HAM UHF ==== |HAM U3 | 446.0300 FM =| PREPPER HAM VHF ==== |HAM 42 | 146.4200 FM =| PREPPER HAM VHF ==== |HAM 52 | 146.5200 FM =| HAM CALLING HAM VHF ==== |HAM 55 | 146.5500 FM =| SURVIVALIST HAM HF ===== |HAM10M | 028.3050 USB | SURVIVALIST PREPR HAM HF ===== |HAM20M | 014.2420 USB | PREPPER HAM HF ===== |HAM40M | 007.2420 LSB | PREPPER HAM HF ===== |HAM60M | 005.3570 USB | SURVIVALIST NVIS HAM HF ===== |HAM80M | 003.8180 LSB | PREPPER LAND SAR VHF |SAREMT | 155.1600 FM =| SEARCH AND RESCUE MARINE VHF = |MAR 16 | 156.8000 FM =| SAFETY CALLING MARINE VHF - |MAR 72 | 156.6250 FM =| BOAT PREPPER The source of this chart is RadioMaster Reports. Updated 2015. Entered into public domain. Free to copy. CB Freeband https://radiofreeq.wordpress.com/2013/07/01/survivalist-ssb-cb-freeband-channel-frequency-list/ ========= ============== ======= ====== ====================== CHAN TYPE| CHANNEL NAME | FREQ. | MODE | COMMON CHANNEL USAGE ========= ============== ======= ====== ====================== NORMAL CB| CHANNEL ===3 | 26.985 AM == PREPPER CH 3 AM NORMAL CB| CHANNEL ==37 | 27.375 USB = PREPPER SURVIVALIST FREEBAND | CHANNEL ==42 | 27.425 USB = PREPPER SURVIVALIST HAM BAND | HAM ==28.305 | 28.305 USB = HAM PREPPER SURVIVALIST","title":"SHTF Radio Info"},{"location":"hamradio/trisquare/","text":"Trisquare 900mhz radios (TSX300) https://en.wikipedia.org/wiki/EXtreme_Radio_Service https://www.buytwowayradios.com/blog/2012/08/trisquare_is_going_out_of_business.html https://www.qsl.net/kb9mwr/projects/900mhz/plan.html","title":"Trisquare Radios"},{"location":"hamradio/weirdmessengers/","text":"Weird vintage \"messengers\" that look like pagers, have a screen, and a keyboard/keypad Motorola Instant Messenger Wireless Personal IM Free IMFree https://www.ebay.com/itm/Motorola-Instant-Messenger-Wireless-Personal-Starter-Kit-IM-Free-New/401598752059?_trkparms=aid%3D555021%26algo%3DPL.SIMRVI%26ao%3D1%26asc%3D20190711100440%26meid%3D50c3a3fe9f734ce9af5e3be61a603b2e%26pid%3D100752%26rk%3D2%26rkt%3D10%26mehot%3Dpf%26sd%3D323884258508%26itm%3D401598752059%26pmt%3D1%26noa%3D0%26pg%3D2047675%26algv%3DSimplRVIAMLv5WebWithPLRVIOnTopCombiner _trksid=p2047675.c100752.m1982 Peek Email Messenger Device https://www.ebay.com/itm/Peek-MP2-Mobile-Personal-Messenger/293610140383?_trkparms=aid%3D555021%26algo%3DPL.SIMRVI%26ao%3D1%26asc%3D20190711100440%26meid%3D50c3a3fe9f734ce9af5e3be61a603b2e%26pid%3D100752%26rk%3D3%26rkt%3D10%26mehot%3Dpf%26sd%3D323884258508%26itm%3D293610140383%26pmt%3D1%26noa%3D0%26pg%3D2047675%26algv%3DSimplRVIAMLv5WebWithPLRVIOnTopCombiner _trksid=p2047675.c100752.m1982 ZipIt Wireless Messenger works over WIFI (v2 and v3) https://www.ebay.com/itm/Zipit-Now-Z3-Wireless-Messenger-Messeging-Device-Verizon-WIFI/153639734570?hash=item23c5a44d2a:g:tVgAAOSwpFVdeUaV Peek Zipit both look like knock offs of Blackberry RIM devices","title":"Weird Messengers"},{"location":"hamradio/wxinfo/","text":"WX Stuff https://www.cocorahs.org/ https://mping.ou.edu/ https://weathercloud.net/","title":"WX Stuff"},{"location":"other/CPU_Cryptocurrancy/","text":"CPU Bit Coins Top 8 Cryptocurrencies for CPU Mining Bytecoin Bytecoin Bytecoin Pool Blockonomi Bytecoin Miner Software Bytecoin Wallet","title":"Crptocurrancy"},{"location":"other/CPU_Cryptocurrancy/#cpu-bit-coins","text":"Top 8 Cryptocurrencies for CPU Mining","title":"CPU Bit Coins"},{"location":"other/CPU_Cryptocurrancy/#bytecoin","text":"Bytecoin Bytecoin Pool Blockonomi Bytecoin Miner Software Bytecoin Wallet","title":"Bytecoin"},{"location":"other/InteractiveFiction/","text":"Create your own Interactive Fiction Twine - open source tool for telling interactive nonlinear stories Twine Quest - Build text adventure games and interactive fiction Squiffy - A simple way to write interactive fiction TADs - Text Adventure Development System Ren'Py is a visual novel engine Ink The powerful scripting language behind Heaven's Vault, 80 days, and Sorcery Adrift The Secret of Landusia: A Text Adventure in the R Language Creating a Super Old-School Text-Based Jane Austen Game Using Python hackernoon Building a text adventure on the RaspberryPi Bonus Make mobile apps with phonegap","title":"Interactive Fiction"},{"location":"other/InteractiveFiction/#create-your-own-interactive-fiction","text":"Twine - open source tool for telling interactive nonlinear stories Twine Quest - Build text adventure games and interactive fiction Squiffy - A simple way to write interactive fiction TADs - Text Adventure Development System Ren'Py is a visual novel engine Ink The powerful scripting language behind Heaven's Vault, 80 days, and Sorcery Adrift The Secret of Landusia: A Text Adventure in the R Language Creating a Super Old-School Text-Based Jane Austen Game Using Python hackernoon Building a text adventure on the RaspberryPi Bonus Make mobile apps with phonegap","title":"Create your own Interactive Fiction"},{"location":"other/books/","text":"Free eBooks: epubBooks (need to login) public domain books https://www.epubbooks.com/ manybooks.net (need to login) public domain books https://manybooks.net/ pdfbooksworld (need ot login) public domain PDFs https://www.pdfbooksworld.com/ feedbooks - both paid and free content, no login for free public domain books https://www.feedbooks.com/ Audio Books: https://librivox.org public domain, public read books","title":"Free eBooks"},{"location":"other/greek/","text":"Place holder for list of Gods and Goddess, and Methology. https://greekgodsandgoddesses.net/greek-vs-roman-gods/ Greek Gods And Goddesses","title":"Greek Mythology"},{"location":"other/pp/","text":"Pen Paper RPGs 1) Dungons and Dragons 2) BATMAN 3) Middle Earth RPG Heroclix 1) The Hobbit Unexpected Journey 2) Star Trek Tactics 3) Star Trek Tactics:Away Team Last update: Mar 30, 2020","title":"Pen and Paper RPG & Heroclix Games"},{"location":"other/pp/#pen-paper-rpgs","text":"1) Dungons and Dragons 2) BATMAN 3) Middle Earth RPG","title":"Pen &amp; Paper RPGs"},{"location":"other/pp/#heroclix","text":"1) The Hobbit Unexpected Journey 2) Star Trek Tactics 3) Star Trek Tactics:Away Team","title":"Heroclix"},{"location":"other/pp/#last-update-mar-30-2020","text":"","title":"Last update: Mar 30, 2020"},{"location":"other/pythagoras/","text":"","title":"Pythagoras"},{"location":"other/stuff/","text":"More Stuff Salty Portable NaCl-powered encryption Salty makes it easy to send strongly-encrypted messages with a shared key. It uses NaCl for encryption and basE91 for portability. With Salty, you can encrypt a message as long as 185 characters and the resulting cipher will still fit in a tweet (~277 characters), making it ideal for encrypting tweets or other length-restricted communication. You can use it anywhere, though, with text of any length. Volatile.wtf Volatile is a free key-value pair API that everyone can use. ngrok.com Get the URL of the site. -- BEGIN SALTY ENCRYPTED MESSAGE -- q7 X? c= JG Qk Lx U. [3 |` $} .} x\" EN SX 3+ va Np Ux e| Lt q ;N fB Is 9m ^v .g w9 :V R{ 5S Lr }v fD Tp _P It E[ %5 {f :w mP O? (J d6 ;2 h/ N9 IQ W* :T I\" /v a -- END SALTY ENCRYPTED MESSAGE -- Key: 221BBakerStreet","title":"Stuff"},{"location":"other/stuff/#more-stuff","text":"Salty Portable NaCl-powered encryption Salty makes it easy to send strongly-encrypted messages with a shared key. It uses NaCl for encryption and basE91 for portability. With Salty, you can encrypt a message as long as 185 characters and the resulting cipher will still fit in a tweet (~277 characters), making it ideal for encrypting tweets or other length-restricted communication. You can use it anywhere, though, with text of any length. Volatile.wtf Volatile is a free key-value pair API that everyone can use. ngrok.com Get the URL of the site. -- BEGIN SALTY ENCRYPTED MESSAGE -- q7 X? c= JG Qk Lx U. [3 |` $} .} x\" EN SX 3+ va Np Ux e| Lt q ;N fB Is 9m ^v .g w9 :V R{ 5S Lr }v fD Tp _P It E[ %5 {f :w mP O? (J d6 ;2 h/ N9 IQ W* :T I\" /v a -- END SALTY ENCRYPTED MESSAGE -- Key: 221BBakerStreet","title":"More Stuff"},{"location":"other/surplusstore/","text":"Electronics surplus shops Mendelsons Discount store offering appliances, electronics, restaurant items, sporting goods more since 1960. Address: 340 E 1st St, Dayton, OH 45402 Phone: (800) 422-3525 https://meci.com/ Midwest Surplus Electronics Computer store in Fairborn, Ohio Address: 501 W Main St, Fairborn, OH 45324 Phone: (937) 879-2250 http://www.midwestsurplus.net/ Surplus Electronics Sales Electronic parts supplier in Darke County, Ohio Address: 6885 Hollansburg-Sampson Rd, Arcanum, OH 45304 Phone: (937) 621-3711 https://www.surplus-electronics-sales.com/ Debco Electronics Inc Electronics store in Norwood, Ohio Address: 4025 Edwards Rd, Cincinnati, OH 45209 Phone: (513) 531-4499 https://www.debcoelectronics.com/","title":"Electronics Surplus"},{"location":"other/surplusstore/#electronics-surplus-shops","text":"Mendelsons Discount store offering appliances, electronics, restaurant items, sporting goods more since 1960. Address: 340 E 1st St, Dayton, OH 45402 Phone: (800) 422-3525 https://meci.com/ Midwest Surplus Electronics Computer store in Fairborn, Ohio Address: 501 W Main St, Fairborn, OH 45324 Phone: (937) 879-2250 http://www.midwestsurplus.net/ Surplus Electronics Sales Electronic parts supplier in Darke County, Ohio Address: 6885 Hollansburg-Sampson Rd, Arcanum, OH 45304 Phone: (937) 621-3711 https://www.surplus-electronics-sales.com/ Debco Electronics Inc Electronics store in Norwood, Ohio Address: 4025 Edwards Rd, Cincinnati, OH 45209 Phone: (513) 531-4499 https://www.debcoelectronics.com/","title":"Electronics surplus shops"},{"location":"other/greenhornet/familytree/","text":"Lone Ranger Mark Ellis writes: Writing a coherent chronology for the Lone Ranger was a difficult task for a variety of reasons. The Masked Man has appeared in so many different mediums with attendant revisions and embellishments regarding his origin it was almost impossible to reconcile and meld them all into a single whole. To simplify matters, I restricted the chronology to visual media--films, the three TV series and books. Even that decision isn't satisfactory, since I didn't have access to the 8 issues of the Lone Ranger pulp magazine, the Big Little Books, or the many years worth of newspaper strips and comic book stories. Fortunately, I did have a complete set of the Lone Ranger novels published between 1936-57 With only a couple of exceptions, the long-running radio series isn't included because I've heard very few of its 2,596 episodes. It went off the air the year I was born and they weren't regularly re-run like the TV show. Also, since so many of the TV episodes were adapted from the radio segments, to try and include them seemed like a duplication of effort. I used 1981's feature film, The Legend of the Lone Ranger, as the basic foundation for information about his early years. Despite its many flaws, this film was remarkably faithful to most of the elements in the mythos, including references to the Ranger's nephew, Dan, Jr. This is not a perfect chronology and I prefer to view it as a work in progress. I welcome anyone to add to it. Win Eckert writes: With respect to the Green Hornet information, I have heard very few of the original radio episodes. This chronology certainly encompasses those adventures, but they are not listed individually. The same goes for the Green Hornet comics from the '40s, of which I have only a few. This timeline is based on NOW Comics' attempt to resolve the different versions of the Hornet into a generational continuity, which I felt was a thoroughly enjoyable and admirable effort. It also includes the 1940s serials, the 1960s television series, novels, Big Little Books which I have, and Whitman Books. As Mark said, suggestions for additions are welcome. Legend: R = The Lone Ranger radio episodes TLR-TV= The Lone Ranger television series N = Novel TLR-A = The first Lone Ranger animated series TNALR-A = The second Lone Ranger animated series, The New Adventures of the Lone Ranger TLR-S = The first Lone Ranger serial, The Lone Ranger TLRRA-S = The second Lone Ranger serial, The Lone Ranger Rides Again C = It Crawls! = Topps Comics' Lone Ranger Tonto mini-series LOTLR = The Legend of the Lone Ranger movie FF = The two Lone Ranger feature films, The Lone Ranger and The Lone Ranger and the Lost City of Gold 1842 Dan Reid is born on a homestead near Del Rio, Texas. Sept. 14, 1850 John Reid is born. 1854 Tonto is born. 1860 John saves Tonto's life from a band of outlaw raiders. The same raiders go on to kill his parents and burn their ranch. John is adopted into the Potawatomai tribe as Tonto's blood brother. Tonto gives John an amulet to symbolize their friendship and bestows upon him the name, \"Kemo Sabe,\" which means trusted friend (in some versions, it means trusty scout). Later that year, Dan comes searching for his younger brother and sends him to Detroit to live with their Aunt Martha (LOTLR). Note: The 1854 date provided in the film is in error. 1861 The American Civil War begins. John is too young to participate, but Dan probably does. It is not known what side he fought on, but it is during or shortly after the war that he meets a fine woman from Richmond, Virginia named Linda. 1863 The battle of Chattanooga takes place on Nov. 23-25. The Confederates' failure to take the city puts an end to their hopes of occupying Tennessee and Kentucky. During the battle, Union cavalry Major Bartholomew Cavendish earns the title of \"Butcher\" (later shortened to Butch) due to the brutality he displays toward the rebel forces (LOTLR). 1864 Early in the year, Cavendish is brought up on charges and court-martialed. He is dismissed from the army. General Ulysses S. Grant signs the papers (LOTLR). 1865 The Civil War ends. 1868 (Approximate date) Dan and Linda return to Texas where John joins them for a time. In the company of ex-Ranger Jim Blane, John and Dan spend some time prospecting and find a rich silver mine, possibly the legendary San Saba mine sought by James Bowie. They agree to keep its location secret while they take care of other matters. John goes back east to study law, and Dan becomes a Texas Ranger. Ulysses S. Grant is elected President. 1869 Earliest reports of \"Butch\" Cavendish gang operating in Texas. 1870-71 Cavendish organizes an army of renegades, bribing and blackmailing government officials including Sheriff Wyatt of Del Rio, and Collins, a member of Dan's Ranger troop (LOTLR) 1872 John Reid finishes school and becomes a lawyer. Dan Reid Jr. is born. Conjecture: It is possible that while in college, John dabbled briefly in theater, learning the art of disguise and accents which serve him so well later in life. 1873 Linda, fearing for her baby's safety, returns with him to Richmond. Dan Sr. is now a captain in the Rangers, and stays to end the growing threat of the Cavendish gang. John returns to Del Rio, meets Amy Striker and her uncle Lucas (LOTLR). John briefly joins his brother's Ranger troop but quits in disgust when he learns of the massacre of a band of Potawatomai. The massacre was orchestrated by the corrupt Sheriff Barrett. Tonto's wife, child and sister are killed in the massacre, unbeknownst to John (It Crawls!, LOTLR). On New Year's Eve, minions of Cavendish kill Amy Striker's uncle. New Year's Day, 1874 Captain Reid and his Ranger troop, accompanied by John, pursue the killers. Unfortunately, Collins leads the six men into an ambush at the bottom of Bryant's Gap where they are all gunned down (LOTLR). January Tonto finds the rangers and nurses John, the only survivor, back to health, and tells him \"...others dead, you lone ranger now.\" Tonto digs six graves so that the gang will not suspect that there was a survivor. John spends most of the winter and early spring months recovering from his wounds. Informed of her husband's death, Linda and Dan Jr. return to Texas. The wagon train carrying them is attacked by Apaches. Dan is found and cared for by \"Grandma Frisbie\" for the next several years. John and Tonto have heard of a fabulous wild stallion in a nearby valley. After saving the magnificent animal from a frenzied bison, they nurse the horse back to health. John wins the animal's trust and, at Tonto's suggestion, names him \"Silver.\" At Tonto's suggestion, John fashions bullets out silver taken from the mine he and Dan discovered. He makes a mask out of his brother's vest and becomes the Lone Ranger. He begins his career by tracking down and bringing to justice the members of the Cavendish gang who participated in the ambush \u2013\u2013 including the corrupt Collins. 1874-1876 The Lone Ranger and Tonto scour Texas for Cavendish gang members who scatter from the main band. He captures them and turns them in to await trail and ultimately to hang. Sheriff Wyatt of Del Rio is so rattled by the Masked Man's activities he takes refuge at Cavendish's hidden headquarters. 1876 Touring the western states, President Grant is kidnapped by Cavendish. He is rescued by the Lone Ranger, Tonto, Wild Bill Hickok, Buffalo Bill Cody, George Armstrong Custer, and a contingent of the Seventh Calvary. Cavendish is arrested (LOTLR). June Custer is killed at the Battle of Little Big Horn. (Conjecture: Barrett, although an ex-Confederate soldier, joins the army during its campaign against the Sioux and Cheyenne. He is part of Major Reno's command during the Little Big Horn battle. Years later, when the Lone Ranger tells Tonto about Barrett's experience, it was information he learned after their initial encounter in 1873). August Wild Bill Hickok is murdered in Deadwood, South Dakota. Sept. The Lone Ranger takes the name of Allen King and joins a Ranger troop. They are opposing the depredations of a criminal mastermind who has assumed the identity of Marcus Jefferies, a government land agent (TLR-S). Oct. The Lone Ranger foils an assassination plot against President Grant. Episode 4 of (TNATLR-A The President Plot). 1877 The Lone Ranger takes the name of Bill Andrews in order to defeat the plans of Bart Dolan, the nephew of a powerful cattleman who is trying to rid the San Ramon valley of settlers. With the aid of Tonto and Juan Vasquez, he is able to foil the schemes of Dolan's marauders (TLRRA-S). Events depicted in The Lone Ranger (N). March Ulysses S. Grant leaves the office of president and is replaced by Rutherford B. Hayes. 1878 Events depicted in Season One (TLR-TV) and The Lone Ranger and the Mystery Ranch and The Lone Ranger and the Gold Robbery (N). Conjecture: The Lone Ranger and Tonto meet Wu Chan (It Crawls!). 1879 Events depicted in Season Two (TLR-TV) and The Lone Ranger and the Outlaw Stronghold (N). Conjecture:Tonto finds and trains Taka the eagle (TLR-A). Conjecture:The former Sheriff Barrett turns to outlawry and prairie piracy. 1880 Events depicted in Season Three (TLR-TV), episodes 1 through 4 of The Lone Ranger animated series (TLR-A) and The Lone Ranger and Tonto (N). 1881 Events depicted episodes 4 through 12 of (TLRA), and The Lone Ranger And the Haunted Gulch (N). 1882 The Lone Ranger and Tonto encounter Barrett. When the Ranger reveals to Tonto the massacre of Potawatomis he unwittingly helped Barrett perpetrate nearly 10 years before, he and his friend have a falling out. Fortunately, they are able to repair the breach in their friendship and end the murderous reign of an extraterrestrial Barrett revived. (Events depicted in It Crawls! (C)). Events depicted in The Lone Ranger Traps Smugglers (N) and episodes 13 through 17 of (TLR-A). 1883 The Lone Ranger and Tonto oppose the greedy (and seemingly psychotic) Reese Kilgore's attempts to orchestrate a war with a local Indian tribe in order to steal their silver mine. Events depicted in The Lone Ranger (FF). Events depicted in The Lone Ranger Rides Again (N), The Lone Ranger Rides North (N) and episodes 18 through 20 of (TLR-A) 1884 The Lone Ranger and Tonto contend with a female criminal mastermind and corrupt town officials when they attempt to wrest control of land sacred to local Indians. Events depicted in The Lone Ranger and the Lost City of Gold (FF). Events depicted in The Lone Ranger and the Silver Bullet (N),and episodes 21 through 30 of (TLR-A). 1885 Events depicted in episodes 30 through 43 of (TLR-A), and The Lone Ranger on Powderhorn Trail (N). 1886 The Lone Ranger and Tonto finally find young Dan Reid, Jr. who had been raised by a kindly Grandma Frisbie. She dies during the encounter, but not before helping unravel the secret of his true identity. Dan is sent back to Richmond to live with his mother's family and receive an education. He returns quite often to share adventures with his Uncle John. Events depicted in Season Four of (TLR-TV) and The Lone Ranger West of the Maverick Pass (N) 1887 Events depicted in Season Five of (TLR-TV), and episodes 1 through 3 of The New Adventures of The Lone Ranger Animated (TNATLR-A). 1888 Events depicted in episodes 5 through 12 of (TNATLR-A) and The Lone Ranger On Gunsight Mesa (N). 1889 Events depicted in episodes 13 through 19 of (TNATLR-A), The Lone Ranger and The Bitter Spring Feud (N). 1890 Events depicted in episodes 20 and 21 of (TNATLR-A), The Lone Ranger and the Code of the West (N). 1891 Events depicted in The Lone Ranger And Trouble on the Sante Fe (N) and the beginning of his war against the Black Arrow syndicate, a group whose ultimate goal is the takeover of the U.S. Government (R). 1892 The Black Arrow war continues with the Lone Ranger and Tonto capturing members of the conspiracy one by one (R). 1893 The Black Arrow war ends when the Lone Ranger and Tonto expose the secret leader of the syndicate, the acting governor of a western state (R) 1894 Butch Cavendish escapes from prison and follows the Lone Ranger to Bryant's Gap, where he has taken his nephew Dan to visit his father's grave on the 20th anniversary of his death. Cavendish ambushes the two, but the Ranger fights back, mortally wounding him. As Cavendish is dying, the Masked Man reveals his true identity and the outlaw's last words are, \"I wish I could have died not knowing.\" Events depicted in The Lone Ranger and Red Butte Trail (N). 1895 One of the last captures officially credited to the Lone Ranger is the break-up of the Ace Perigon Gang. During this encounter, he is recognized by a former Texas Ranger named Martin who has gone bad and is a member of the gang. At the cost of his own life, he helps the Ranger escape and bring the gang to justice. As he lays dying, he makes the Lone Ranger promise to continue his war on injustice by training someone else to take his place (R). 1896 Conjecture: At the age of 45, with the worst of the lawless elements in the west pacified, John Reid most probably hangs up his mask and guns. He marries Amy Striker and years later, her nephew Fran immortalizes his Uncle John's exploits on radio and a series of novels. 1899 Conjecture: Dan Reid, Jr. inherits the silver mine and moves to an unnamed Eastern city, possibly Detroit. He founds the Daily Sentinel newspaper. The Wild, Wild Ranger? It is possible that several of the villains encountered in the first Lone Ranger animated series were in actuality enemies of James West and Artemus Gordon operating under aliases. Tiny Tom could very well have been Dr. Miguelito Loveless and The Puppetmaster might have been Zachariah Skull. Professor Whitaker in the episode Quicksilver evidently discovered a similar process to acquire super-speed as Morgan Midas in the WWW episode, The Night of the Burning Diamond. Inasmuch as West and Gordon answered only to President Grant, it's reasonable to assume when he was not re-elected in 1877, they were discharged from the Secret Service. It is known that by 1885, West had retired to a Mexican village where he evidently fathered a number of illegitimate children (many of whom appeared to be 8 to 10 years old) and Gordon was touring with a shabby theatrical company. (See our The Wild, Wild West Chronology). Since the two agents could no longer operate officially by the end of 1876, it is not out of the realm of likelihood that several of their old foes felt they had carte blanche in their criminal activities. However, they hadn't factored in the Lone Ranger and Tonto and it appears the Masked Man pretty much cleaned out these super-criminals by the mid-1880s. If Tiny Tom was indeed Loveless, he died shortly after his last encounter with the Ranger. He apparently held no permanent grudge against the Masked Man since he passed on only his enmity of West and Gordon to his son, Miguelito, Jr. Green Hornet M = Serial Movie GHT = Green Hornet television episode BT = Batman television episode FC = Dell Comics' Four Color Comics GK = Gold Key Comics' The Green Hornet GH1 = Volume 1 of Now Comics' The Green Hornet GH2 = Volume 2 of Now Comics' The Green Hornet GHAnn = Now Comics' The Green Hornet Annual T1 = Volume 1 of Now Comics' Tales of the Green Hornet T2 = Volume 2 of Now Comics' Tales of the Green Hornet T3 = Volume 3 of Now Comics' Tales of the Green Hornet K1 = Volume 1 of Now Comics' Kato of the Green Hornet K2 = Volume 2 of Now Comics' Kato of the Green Hornet m = Now Comics' mini-series 1900 Conjecture: Dan Reid, Jr. marries. 1906 Britt Reid, son of Dan Reid, Jr., and great nephew of the Lone Ranger, is born. 1915 Conjecture: Birth of Ikano Kato. 1934 Britt Reid becomes a crime reporter at The Daily Sentinel. 1935 Britt saves Ikano Kato's life in Japan and Ikano comes to America with the Reids. 1936-1953 The complete adventures of the Green Hornet and Kato as revealed in radio programs and 1940s comics. 1936 T2 1-2 Destiny: The Origin of the Green Hornet (Britt becomes publisher of The Sentinel. Britt and Ikano go to work as the Green Hornet and Kato.) T3 1 Death House T3 2 Wolf Pack (Just after Death House.) 1939 M The Green Hornet 1940 N The Green Hornet Strikes! (A Big Little Book.) M The Green Hornet Strikes Again May 1942 m 1-4 Sting of the Green Hornet (Britt and Kato encounter The Shadow, who poses as a government agent. Kato meets Private Steve Rogers, a product of the War Department's \"Project Gladiator\" (aka \"Operation Rebirth\") and the future Captain America. Britt also barely misses running into reporters Clark Kent and Lois Lane.) 1945 GH1 1 My Last Case (The first Green Hornet goes into semi-retirement, but still continues to work on highly important cases.) 1953 FC 496 The Freightyard Robberies FC 496 Proof of Treason (The Green Hornet brings down a mayoral candidate who is secretly a Communist, placing this adventure squarely in the McCarthy era.) The second Green Hornet Kato 1966 Britt Reid's nephew, Britt Reid II, becomes the second Green Hornet and Ikano Kato's son Hayashi becomes the new Kato (see GH1 2-3; the 1968 date given is incorrect). GHT 1 Programmed for Death GHT 2 The Silent Gun GHT 3 Give 'Em Enough Rope GHT 4 Crime Wave GHT 5 The Frog is a Deadly Weapon GHT 6 Eat, Drink, and Be Dead GHT 7-8 Beautiful Dreamer GHT 9 The Ray is for Killing GHT 10 The Preying Mantis GHT 11 The Hunters and the Hunted GHT 12 Deadline for Death GHT 13 The Secret of the Sally Bell GHT 14 Freeway to Death GHT 15 May the Best Man Lose GHT 16 Seek, Stalk and Destroy GHT 17-18 Corpse of the Year GHT 19 Bad Bet on a 459 - Silent GHT 20 Ace in the Hole GHT 21 Trouble for Price Charming GHT 22 Alias the Scarf GHT 23 Hornet, Save Thyself BT A Piece Of The Action / Batman's Satisfaction GHT 24 The Hornet and the Firefly GHT 25-26 Invasion from Outer Space 1967 GK 1 Ring of Terror GK 2 The Threat of the Red Dragons GK 3 The Counterplot Affair GK 3 Masquerade 1968 N The Case of the Disappearing Doctor (a Whitman Book) N The Infernal Light May T2 4 Targets (It is May, 1968.) Oct. T3 3 New Dreams, Old Nightmares (It's Oct. 1968; the 1967 date given must be incorrect because this episode takes place after Targets. Also after Alias the Scarf.) 1969 T2 3 Gun Metal Green (It is 1969.) 1971 The Green Hornet and Kato help put away mobster Arlan Mitchell (GH1 11). 1977 T1 1-2 The Burma Horse (It is June, 1977. Hayashi Kato makes his first Hollywood connections.) 1979 Britt Reid II retires as the second Green Hornet after suffering a heart attack (see GH1 2-3). 1981 Hayashi Kato is a movie star in California (GH1 4). 1986 Alan Reid, nephew of Britt Reid II, becomes the third Green Hornet and Hayashi Kato returns to work as his partner. Alan is killed on his first mission and Kato blames himself (GH1 4-5). 1989 Britt Reid, the first Green Hornet, is killed (GH1 5). Paul Reid, brother of Alan, becomes the fourth Green Hornet. Mishi Kato, half-sister of Hayashi and daughter of Ikano, becomes the new Kato (GH1 6-7). 1990 GH1 8-9 On the Pad K1 1-4 Kato (Hayashi Kato travels to China on a solo mission.) GH1 10 The Road Pirates (Mishi retires as Kato.) GH1 11-12 A Memory of Death (Hayashi becomes Paul's partner as Kato.) GH1 13-14 Forever Green Nov. 1990-Jan. 1991 m 1-3 Solitary Sentinel Mid 1991 GH2 1-3 Money Kills (Mishi Kato returns as the vigilante Crimson Wasp to battle the villain Johnny Dollar.) GH2 4 Smoke and Mirrors GH2 5 To Pardon Blood GH2 6 The Wall GHAnn 1 The Blue and the Green 1992 GH2 7-8 Street Lethal (The third Black Beauty is destroyed and Paul commissions the building of the fourth Black Beauty.) GH2 16 A Tip of the Hat (Takes place just after Street Lethal.) GH2 9 Deadline K2 1-2 Kato II (Hayashi Kato is on another solo mission.) GH2 10-11 The Huntsmen (The Crimson Wasp returns.) Nov. GH2 12-14 The Odyssey of the Crimson Wasp (The Crimson Wasp kills Johnny Dollar.) GH2 15 Second Sight 1993 GH2 17 Showdown at Midnight GH2 18-19 Sister-Hood GH2 20 Crimes of the Heart (It is April 1993. Mishi Kato is in Japan.) GH2 21 The Return of Mr. Death GH2 22 The Beast Inside (Mishi Kato.) GH2 23-24 The Karate Wars GH2 25 Deadly Admirer GH2 26-28 Heart of the Dragon (Mishi Kato returns as the Crimson Wasp.) Jan. 1994 GH2 29-30 The Acquisition (Thirteen months after The Odyssey of the Crimson Wasp. Johnny Dollar is back.) March GH2 31 Transitions (Two months after The Acquisition.) GH2 32 The Master Plan GH2 33-34 Obsessive (Sister Hood) GH2 35 Good Cop, Bad Cop GH2 36-37 Old Wounds (Johnny Dollar, Mishi.) Late Aug-Late Sept. GHAnn 2 Operation: Sting GH2 38-39 Best Served Cold (The Crimson Wasp. Hayashi retires and his nephew Kono (grandson of Ikano) becomes the new Kato.) GH2 40 Changing of the Guard 2080 m 1-3 Dark Tomorrow PJFarmer.com","title":"Family Tree"},{"location":"other/greenhornet/familytree/#lone-ranger","text":"Mark Ellis writes: Writing a coherent chronology for the Lone Ranger was a difficult task for a variety of reasons. The Masked Man has appeared in so many different mediums with attendant revisions and embellishments regarding his origin it was almost impossible to reconcile and meld them all into a single whole. To simplify matters, I restricted the chronology to visual media--films, the three TV series and books. Even that decision isn't satisfactory, since I didn't have access to the 8 issues of the Lone Ranger pulp magazine, the Big Little Books, or the many years worth of newspaper strips and comic book stories. Fortunately, I did have a complete set of the Lone Ranger novels published between 1936-57 With only a couple of exceptions, the long-running radio series isn't included because I've heard very few of its 2,596 episodes. It went off the air the year I was born and they weren't regularly re-run like the TV show. Also, since so many of the TV episodes were adapted from the radio segments, to try and include them seemed like a duplication of effort. I used 1981's feature film, The Legend of the Lone Ranger, as the basic foundation for information about his early years. Despite its many flaws, this film was remarkably faithful to most of the elements in the mythos, including references to the Ranger's nephew, Dan, Jr. This is not a perfect chronology and I prefer to view it as a work in progress. I welcome anyone to add to it. Win Eckert writes: With respect to the Green Hornet information, I have heard very few of the original radio episodes. This chronology certainly encompasses those adventures, but they are not listed individually. The same goes for the Green Hornet comics from the '40s, of which I have only a few. This timeline is based on NOW Comics' attempt to resolve the different versions of the Hornet into a generational continuity, which I felt was a thoroughly enjoyable and admirable effort. It also includes the 1940s serials, the 1960s television series, novels, Big Little Books which I have, and Whitman Books. As Mark said, suggestions for additions are welcome. Legend: R = The Lone Ranger radio episodes TLR-TV= The Lone Ranger television series N = Novel TLR-A = The first Lone Ranger animated series TNALR-A = The second Lone Ranger animated series, The New Adventures of the Lone Ranger TLR-S = The first Lone Ranger serial, The Lone Ranger TLRRA-S = The second Lone Ranger serial, The Lone Ranger Rides Again C = It Crawls! = Topps Comics' Lone Ranger Tonto mini-series LOTLR = The Legend of the Lone Ranger movie FF = The two Lone Ranger feature films, The Lone Ranger and The Lone Ranger and the Lost City of Gold 1842 Dan Reid is born on a homestead near Del Rio, Texas. Sept. 14, 1850 John Reid is born. 1854 Tonto is born. 1860 John saves Tonto's life from a band of outlaw raiders. The same raiders go on to kill his parents and burn their ranch. John is adopted into the Potawatomai tribe as Tonto's blood brother. Tonto gives John an amulet to symbolize their friendship and bestows upon him the name, \"Kemo Sabe,\" which means trusted friend (in some versions, it means trusty scout). Later that year, Dan comes searching for his younger brother and sends him to Detroit to live with their Aunt Martha (LOTLR). Note: The 1854 date provided in the film is in error. 1861 The American Civil War begins. John is too young to participate, but Dan probably does. It is not known what side he fought on, but it is during or shortly after the war that he meets a fine woman from Richmond, Virginia named Linda. 1863 The battle of Chattanooga takes place on Nov. 23-25. The Confederates' failure to take the city puts an end to their hopes of occupying Tennessee and Kentucky. During the battle, Union cavalry Major Bartholomew Cavendish earns the title of \"Butcher\" (later shortened to Butch) due to the brutality he displays toward the rebel forces (LOTLR). 1864 Early in the year, Cavendish is brought up on charges and court-martialed. He is dismissed from the army. General Ulysses S. Grant signs the papers (LOTLR). 1865 The Civil War ends. 1868 (Approximate date) Dan and Linda return to Texas where John joins them for a time. In the company of ex-Ranger Jim Blane, John and Dan spend some time prospecting and find a rich silver mine, possibly the legendary San Saba mine sought by James Bowie. They agree to keep its location secret while they take care of other matters. John goes back east to study law, and Dan becomes a Texas Ranger. Ulysses S. Grant is elected President. 1869 Earliest reports of \"Butch\" Cavendish gang operating in Texas. 1870-71 Cavendish organizes an army of renegades, bribing and blackmailing government officials including Sheriff Wyatt of Del Rio, and Collins, a member of Dan's Ranger troop (LOTLR) 1872 John Reid finishes school and becomes a lawyer. Dan Reid Jr. is born. Conjecture: It is possible that while in college, John dabbled briefly in theater, learning the art of disguise and accents which serve him so well later in life. 1873 Linda, fearing for her baby's safety, returns with him to Richmond. Dan Sr. is now a captain in the Rangers, and stays to end the growing threat of the Cavendish gang. John returns to Del Rio, meets Amy Striker and her uncle Lucas (LOTLR). John briefly joins his brother's Ranger troop but quits in disgust when he learns of the massacre of a band of Potawatomai. The massacre was orchestrated by the corrupt Sheriff Barrett. Tonto's wife, child and sister are killed in the massacre, unbeknownst to John (It Crawls!, LOTLR). On New Year's Eve, minions of Cavendish kill Amy Striker's uncle. New Year's Day, 1874 Captain Reid and his Ranger troop, accompanied by John, pursue the killers. Unfortunately, Collins leads the six men into an ambush at the bottom of Bryant's Gap where they are all gunned down (LOTLR). January Tonto finds the rangers and nurses John, the only survivor, back to health, and tells him \"...others dead, you lone ranger now.\" Tonto digs six graves so that the gang will not suspect that there was a survivor. John spends most of the winter and early spring months recovering from his wounds. Informed of her husband's death, Linda and Dan Jr. return to Texas. The wagon train carrying them is attacked by Apaches. Dan is found and cared for by \"Grandma Frisbie\" for the next several years. John and Tonto have heard of a fabulous wild stallion in a nearby valley. After saving the magnificent animal from a frenzied bison, they nurse the horse back to health. John wins the animal's trust and, at Tonto's suggestion, names him \"Silver.\" At Tonto's suggestion, John fashions bullets out silver taken from the mine he and Dan discovered. He makes a mask out of his brother's vest and becomes the Lone Ranger. He begins his career by tracking down and bringing to justice the members of the Cavendish gang who participated in the ambush \u2013\u2013 including the corrupt Collins. 1874-1876 The Lone Ranger and Tonto scour Texas for Cavendish gang members who scatter from the main band. He captures them and turns them in to await trail and ultimately to hang. Sheriff Wyatt of Del Rio is so rattled by the Masked Man's activities he takes refuge at Cavendish's hidden headquarters. 1876 Touring the western states, President Grant is kidnapped by Cavendish. He is rescued by the Lone Ranger, Tonto, Wild Bill Hickok, Buffalo Bill Cody, George Armstrong Custer, and a contingent of the Seventh Calvary. Cavendish is arrested (LOTLR). June Custer is killed at the Battle of Little Big Horn. (Conjecture: Barrett, although an ex-Confederate soldier, joins the army during its campaign against the Sioux and Cheyenne. He is part of Major Reno's command during the Little Big Horn battle. Years later, when the Lone Ranger tells Tonto about Barrett's experience, it was information he learned after their initial encounter in 1873). August Wild Bill Hickok is murdered in Deadwood, South Dakota. Sept. The Lone Ranger takes the name of Allen King and joins a Ranger troop. They are opposing the depredations of a criminal mastermind who has assumed the identity of Marcus Jefferies, a government land agent (TLR-S). Oct. The Lone Ranger foils an assassination plot against President Grant. Episode 4 of (TNATLR-A The President Plot). 1877 The Lone Ranger takes the name of Bill Andrews in order to defeat the plans of Bart Dolan, the nephew of a powerful cattleman who is trying to rid the San Ramon valley of settlers. With the aid of Tonto and Juan Vasquez, he is able to foil the schemes of Dolan's marauders (TLRRA-S). Events depicted in The Lone Ranger (N). March Ulysses S. Grant leaves the office of president and is replaced by Rutherford B. Hayes. 1878 Events depicted in Season One (TLR-TV) and The Lone Ranger and the Mystery Ranch and The Lone Ranger and the Gold Robbery (N). Conjecture: The Lone Ranger and Tonto meet Wu Chan (It Crawls!). 1879 Events depicted in Season Two (TLR-TV) and The Lone Ranger and the Outlaw Stronghold (N). Conjecture:Tonto finds and trains Taka the eagle (TLR-A). Conjecture:The former Sheriff Barrett turns to outlawry and prairie piracy. 1880 Events depicted in Season Three (TLR-TV), episodes 1 through 4 of The Lone Ranger animated series (TLR-A) and The Lone Ranger and Tonto (N). 1881 Events depicted episodes 4 through 12 of (TLRA), and The Lone Ranger And the Haunted Gulch (N). 1882 The Lone Ranger and Tonto encounter Barrett. When the Ranger reveals to Tonto the massacre of Potawatomis he unwittingly helped Barrett perpetrate nearly 10 years before, he and his friend have a falling out. Fortunately, they are able to repair the breach in their friendship and end the murderous reign of an extraterrestrial Barrett revived. (Events depicted in It Crawls! (C)). Events depicted in The Lone Ranger Traps Smugglers (N) and episodes 13 through 17 of (TLR-A). 1883 The Lone Ranger and Tonto oppose the greedy (and seemingly psychotic) Reese Kilgore's attempts to orchestrate a war with a local Indian tribe in order to steal their silver mine. Events depicted in The Lone Ranger (FF). Events depicted in The Lone Ranger Rides Again (N), The Lone Ranger Rides North (N) and episodes 18 through 20 of (TLR-A) 1884 The Lone Ranger and Tonto contend with a female criminal mastermind and corrupt town officials when they attempt to wrest control of land sacred to local Indians. Events depicted in The Lone Ranger and the Lost City of Gold (FF). Events depicted in The Lone Ranger and the Silver Bullet (N),and episodes 21 through 30 of (TLR-A). 1885 Events depicted in episodes 30 through 43 of (TLR-A), and The Lone Ranger on Powderhorn Trail (N). 1886 The Lone Ranger and Tonto finally find young Dan Reid, Jr. who had been raised by a kindly Grandma Frisbie. She dies during the encounter, but not before helping unravel the secret of his true identity. Dan is sent back to Richmond to live with his mother's family and receive an education. He returns quite often to share adventures with his Uncle John. Events depicted in Season Four of (TLR-TV) and The Lone Ranger West of the Maverick Pass (N) 1887 Events depicted in Season Five of (TLR-TV), and episodes 1 through 3 of The New Adventures of The Lone Ranger Animated (TNATLR-A). 1888 Events depicted in episodes 5 through 12 of (TNATLR-A) and The Lone Ranger On Gunsight Mesa (N). 1889 Events depicted in episodes 13 through 19 of (TNATLR-A), The Lone Ranger and The Bitter Spring Feud (N). 1890 Events depicted in episodes 20 and 21 of (TNATLR-A), The Lone Ranger and the Code of the West (N). 1891 Events depicted in The Lone Ranger And Trouble on the Sante Fe (N) and the beginning of his war against the Black Arrow syndicate, a group whose ultimate goal is the takeover of the U.S. Government (R). 1892 The Black Arrow war continues with the Lone Ranger and Tonto capturing members of the conspiracy one by one (R). 1893 The Black Arrow war ends when the Lone Ranger and Tonto expose the secret leader of the syndicate, the acting governor of a western state (R) 1894 Butch Cavendish escapes from prison and follows the Lone Ranger to Bryant's Gap, where he has taken his nephew Dan to visit his father's grave on the 20th anniversary of his death. Cavendish ambushes the two, but the Ranger fights back, mortally wounding him. As Cavendish is dying, the Masked Man reveals his true identity and the outlaw's last words are, \"I wish I could have died not knowing.\" Events depicted in The Lone Ranger and Red Butte Trail (N). 1895 One of the last captures officially credited to the Lone Ranger is the break-up of the Ace Perigon Gang. During this encounter, he is recognized by a former Texas Ranger named Martin who has gone bad and is a member of the gang. At the cost of his own life, he helps the Ranger escape and bring the gang to justice. As he lays dying, he makes the Lone Ranger promise to continue his war on injustice by training someone else to take his place (R). 1896 Conjecture: At the age of 45, with the worst of the lawless elements in the west pacified, John Reid most probably hangs up his mask and guns. He marries Amy Striker and years later, her nephew Fran immortalizes his Uncle John's exploits on radio and a series of novels. 1899 Conjecture: Dan Reid, Jr. inherits the silver mine and moves to an unnamed Eastern city, possibly Detroit. He founds the Daily Sentinel newspaper. The Wild, Wild Ranger? It is possible that several of the villains encountered in the first Lone Ranger animated series were in actuality enemies of James West and Artemus Gordon operating under aliases. Tiny Tom could very well have been Dr. Miguelito Loveless and The Puppetmaster might have been Zachariah Skull. Professor Whitaker in the episode Quicksilver evidently discovered a similar process to acquire super-speed as Morgan Midas in the WWW episode, The Night of the Burning Diamond. Inasmuch as West and Gordon answered only to President Grant, it's reasonable to assume when he was not re-elected in 1877, they were discharged from the Secret Service. It is known that by 1885, West had retired to a Mexican village where he evidently fathered a number of illegitimate children (many of whom appeared to be 8 to 10 years old) and Gordon was touring with a shabby theatrical company. (See our The Wild, Wild West Chronology). Since the two agents could no longer operate officially by the end of 1876, it is not out of the realm of likelihood that several of their old foes felt they had carte blanche in their criminal activities. However, they hadn't factored in the Lone Ranger and Tonto and it appears the Masked Man pretty much cleaned out these super-criminals by the mid-1880s. If Tiny Tom was indeed Loveless, he died shortly after his last encounter with the Ranger. He apparently held no permanent grudge against the Masked Man since he passed on only his enmity of West and Gordon to his son, Miguelito, Jr.","title":"Lone Ranger"},{"location":"other/greenhornet/familytree/#green-hornet","text":"M = Serial Movie GHT = Green Hornet television episode BT = Batman television episode FC = Dell Comics' Four Color Comics GK = Gold Key Comics' The Green Hornet GH1 = Volume 1 of Now Comics' The Green Hornet GH2 = Volume 2 of Now Comics' The Green Hornet GHAnn = Now Comics' The Green Hornet Annual T1 = Volume 1 of Now Comics' Tales of the Green Hornet T2 = Volume 2 of Now Comics' Tales of the Green Hornet T3 = Volume 3 of Now Comics' Tales of the Green Hornet K1 = Volume 1 of Now Comics' Kato of the Green Hornet K2 = Volume 2 of Now Comics' Kato of the Green Hornet m = Now Comics' mini-series 1900 Conjecture: Dan Reid, Jr. marries. 1906 Britt Reid, son of Dan Reid, Jr., and great nephew of the Lone Ranger, is born. 1915 Conjecture: Birth of Ikano Kato. 1934 Britt Reid becomes a crime reporter at The Daily Sentinel. 1935 Britt saves Ikano Kato's life in Japan and Ikano comes to America with the Reids. 1936-1953 The complete adventures of the Green Hornet and Kato as revealed in radio programs and 1940s comics. 1936 T2 1-2 Destiny: The Origin of the Green Hornet (Britt becomes publisher of The Sentinel. Britt and Ikano go to work as the Green Hornet and Kato.) T3 1 Death House T3 2 Wolf Pack (Just after Death House.) 1939 M The Green Hornet 1940 N The Green Hornet Strikes! (A Big Little Book.) M The Green Hornet Strikes Again May 1942 m 1-4 Sting of the Green Hornet (Britt and Kato encounter The Shadow, who poses as a government agent. Kato meets Private Steve Rogers, a product of the War Department's \"Project Gladiator\" (aka \"Operation Rebirth\") and the future Captain America. Britt also barely misses running into reporters Clark Kent and Lois Lane.) 1945 GH1 1 My Last Case (The first Green Hornet goes into semi-retirement, but still continues to work on highly important cases.) 1953 FC 496 The Freightyard Robberies FC 496 Proof of Treason (The Green Hornet brings down a mayoral candidate who is secretly a Communist, placing this adventure squarely in the McCarthy era.) The second Green Hornet Kato 1966 Britt Reid's nephew, Britt Reid II, becomes the second Green Hornet and Ikano Kato's son Hayashi becomes the new Kato (see GH1 2-3; the 1968 date given is incorrect). GHT 1 Programmed for Death GHT 2 The Silent Gun GHT 3 Give 'Em Enough Rope GHT 4 Crime Wave GHT 5 The Frog is a Deadly Weapon GHT 6 Eat, Drink, and Be Dead GHT 7-8 Beautiful Dreamer GHT 9 The Ray is for Killing GHT 10 The Preying Mantis GHT 11 The Hunters and the Hunted GHT 12 Deadline for Death GHT 13 The Secret of the Sally Bell GHT 14 Freeway to Death GHT 15 May the Best Man Lose GHT 16 Seek, Stalk and Destroy GHT 17-18 Corpse of the Year GHT 19 Bad Bet on a 459 - Silent GHT 20 Ace in the Hole GHT 21 Trouble for Price Charming GHT 22 Alias the Scarf GHT 23 Hornet, Save Thyself BT A Piece Of The Action / Batman's Satisfaction GHT 24 The Hornet and the Firefly GHT 25-26 Invasion from Outer Space 1967 GK 1 Ring of Terror GK 2 The Threat of the Red Dragons GK 3 The Counterplot Affair GK 3 Masquerade 1968 N The Case of the Disappearing Doctor (a Whitman Book) N The Infernal Light May T2 4 Targets (It is May, 1968.) Oct. T3 3 New Dreams, Old Nightmares (It's Oct. 1968; the 1967 date given must be incorrect because this episode takes place after Targets. Also after Alias the Scarf.) 1969 T2 3 Gun Metal Green (It is 1969.) 1971 The Green Hornet and Kato help put away mobster Arlan Mitchell (GH1 11). 1977 T1 1-2 The Burma Horse (It is June, 1977. Hayashi Kato makes his first Hollywood connections.) 1979 Britt Reid II retires as the second Green Hornet after suffering a heart attack (see GH1 2-3). 1981 Hayashi Kato is a movie star in California (GH1 4). 1986 Alan Reid, nephew of Britt Reid II, becomes the third Green Hornet and Hayashi Kato returns to work as his partner. Alan is killed on his first mission and Kato blames himself (GH1 4-5). 1989 Britt Reid, the first Green Hornet, is killed (GH1 5). Paul Reid, brother of Alan, becomes the fourth Green Hornet. Mishi Kato, half-sister of Hayashi and daughter of Ikano, becomes the new Kato (GH1 6-7). 1990 GH1 8-9 On the Pad K1 1-4 Kato (Hayashi Kato travels to China on a solo mission.) GH1 10 The Road Pirates (Mishi retires as Kato.) GH1 11-12 A Memory of Death (Hayashi becomes Paul's partner as Kato.) GH1 13-14 Forever Green Nov. 1990-Jan. 1991 m 1-3 Solitary Sentinel Mid 1991 GH2 1-3 Money Kills (Mishi Kato returns as the vigilante Crimson Wasp to battle the villain Johnny Dollar.) GH2 4 Smoke and Mirrors GH2 5 To Pardon Blood GH2 6 The Wall GHAnn 1 The Blue and the Green 1992 GH2 7-8 Street Lethal (The third Black Beauty is destroyed and Paul commissions the building of the fourth Black Beauty.) GH2 16 A Tip of the Hat (Takes place just after Street Lethal.) GH2 9 Deadline K2 1-2 Kato II (Hayashi Kato is on another solo mission.) GH2 10-11 The Huntsmen (The Crimson Wasp returns.) Nov. GH2 12-14 The Odyssey of the Crimson Wasp (The Crimson Wasp kills Johnny Dollar.) GH2 15 Second Sight 1993 GH2 17 Showdown at Midnight GH2 18-19 Sister-Hood GH2 20 Crimes of the Heart (It is April 1993. Mishi Kato is in Japan.) GH2 21 The Return of Mr. Death GH2 22 The Beast Inside (Mishi Kato.) GH2 23-24 The Karate Wars GH2 25 Deadly Admirer GH2 26-28 Heart of the Dragon (Mishi Kato returns as the Crimson Wasp.) Jan. 1994 GH2 29-30 The Acquisition (Thirteen months after The Odyssey of the Crimson Wasp. Johnny Dollar is back.) March GH2 31 Transitions (Two months after The Acquisition.) GH2 32 The Master Plan GH2 33-34 Obsessive (Sister Hood) GH2 35 Good Cop, Bad Cop GH2 36-37 Old Wounds (Johnny Dollar, Mishi.) Late Aug-Late Sept. GHAnn 2 Operation: Sting GH2 38-39 Best Served Cold (The Crimson Wasp. Hayashi retires and his nephew Kono (grandson of Ikano) becomes the new Kato.) GH2 40 Changing of the Guard 2080 m 1-3 Dark Tomorrow PJFarmer.com","title":"Green Hornet"},{"location":"other/greenhornet/greenhornet/","text":"The Green Hornet The Green Hornet is a masked crime fighter. Originally created by George W. Trendle and Fran Striker for an American radio program in the 1930s, the character has appeared in other media as well, including film serials in the 1940s, a network television program in the 1960s, and multiple comic book series from the 1940s to the 1990s. Though various incarnations sometimes change details, in most incarnations the Green Hornet is Britt Reid, a newspaper publisher by day who by night goes out in his masked \"Green Hornet\" identity to fight crime as a vigilante, accompanied by his similarly masked Asian manservant Kato and driving a car, equipped with advanced technology, called \"Black Beauty\". The Green Hornet is often portrayed as possessing fair to above average hand-to-hand combat skills and is often armed with a gun that sprays knock-out gas (a sonic blast weapon called the \"Hornet's Sting\" was added to his arsenal for the TV series). One relatively minor aspect of the character which tends to be given limited exposure in the actual productions is his blood relationship to The Lone Ranger, another character created by Striker. The Lone Ranger's nephew was Dan Reid. In the Green Hornet radio shows, the Hornet's father was likewise named Dan Reid, making the hero the Ranger's grand-nephew. Green Hornet Wiki Entry Dynamite Comics International Hero Family Tree Family Tree Comicvine Family History I suggested in 2016 that Spencer Reid (from Criminal Minds) could also be related to either the Lone Ranger (and by extension The Green Hornet), or Sherlock Holmes, or maybe both. If such were true it would link together the 4 crime fighters. My Blog Post Crossovers 1966 Green Hornet/Batman Crossover, TV and comic books. The Black Beauty 1965 Chrysler Imperial Crown. Search Results Google Search for Family Tree Google Search The Black Beauty","title":"Info"},{"location":"other/greenhornet/greenhornet/#the-green-hornet","text":"The Green Hornet is a masked crime fighter. Originally created by George W. Trendle and Fran Striker for an American radio program in the 1930s, the character has appeared in other media as well, including film serials in the 1940s, a network television program in the 1960s, and multiple comic book series from the 1940s to the 1990s. Though various incarnations sometimes change details, in most incarnations the Green Hornet is Britt Reid, a newspaper publisher by day who by night goes out in his masked \"Green Hornet\" identity to fight crime as a vigilante, accompanied by his similarly masked Asian manservant Kato and driving a car, equipped with advanced technology, called \"Black Beauty\". The Green Hornet is often portrayed as possessing fair to above average hand-to-hand combat skills and is often armed with a gun that sprays knock-out gas (a sonic blast weapon called the \"Hornet's Sting\" was added to his arsenal for the TV series). One relatively minor aspect of the character which tends to be given limited exposure in the actual productions is his blood relationship to The Lone Ranger, another character created by Striker. The Lone Ranger's nephew was Dan Reid. In the Green Hornet radio shows, the Hornet's father was likewise named Dan Reid, making the hero the Ranger's grand-nephew. Green Hornet Wiki Entry Dynamite Comics International Hero","title":"The Green Hornet"},{"location":"other/greenhornet/greenhornet/#family-tree","text":"Family Tree Comicvine Family History I suggested in 2016 that Spencer Reid (from Criminal Minds) could also be related to either the Lone Ranger (and by extension The Green Hornet), or Sherlock Holmes, or maybe both. If such were true it would link together the 4 crime fighters. My Blog Post","title":"Family Tree"},{"location":"other/greenhornet/greenhornet/#crossovers","text":"1966 Green Hornet/Batman Crossover, TV and comic books.","title":"Crossovers"},{"location":"other/greenhornet/greenhornet/#the-black-beauty","text":"1965 Chrysler Imperial Crown.","title":"The Black Beauty"},{"location":"other/greenhornet/greenhornet/#search-results","text":"Google Search for Family Tree Google Search The Black Beauty","title":"Search Results"},{"location":"other/theorville/comics/","text":"Dark Horse Comics The Orville According the Fan Wiki these comics are considered to be canon, unless directly contradicted by the TV shows. Current Issuues 1) #1 New Beginnings Part 1 of 2 July 17, 2019 2) #2 New Beginnings Part 2 of 2 August 14, 2019 3) #3 The Word of Avis Part 1 of 2 September 11, 2019 4) #4 The Word of Avis Part 2 of 2 October 16, 2019 5) The Orville Season 1.5: New Beginnings TPB February 5, 2020 6) Launch Day Part 1 of 2 September 2, 2020 Comics listed at the Orville Fan Wiki Dark Horse Comics","title":"Comics"},{"location":"other/theorville/comics/#dark-horse-comics","text":"The Orville According the Fan Wiki these comics are considered to be canon, unless directly contradicted by the TV shows.","title":"Dark Horse Comics"},{"location":"other/theorville/comics/#current-issuues","text":"1) #1 New Beginnings Part 1 of 2 July 17, 2019 2) #2 New Beginnings Part 2 of 2 August 14, 2019 3) #3 The Word of Avis Part 1 of 2 September 11, 2019 4) #4 The Word of Avis Part 2 of 2 October 16, 2019 5) The Orville Season 1.5: New Beginnings TPB February 5, 2020 6) Launch Day Part 1 of 2 September 2, 2020","title":"Current Issuues"},{"location":"other/theorville/comics/#comics-listed-at-the-orville-fan-wiki","text":"Dark Horse Comics","title":"Comics listed at the Orville Fan Wiki"},{"location":"other/theorville/wiki/","text":"The Fandom Wiki The Orville","title":"Fan Wiki"},{"location":"other/theorville/wiki/#the-fandom-wiki","text":"The Orville","title":"The Fandom Wiki"},{"location":"projects/InternetControlledRobots/","text":"Internet Connected Robots Internet Connected Robot Let's Robot No Longer Active or supported. https://github.com/runmyrobot/runmyrobot https://letsrobot.readme.io/docs/how-to-use-l298n https://letsrobot.tv/ Robotstreamer.com Robot Streamer How to add your Robot software RobotStreamer Telerobotic platform for sharing remote control of robots in realtime. Remo.TV remo.tv Remo is an open telerobotics platform for sharing remote control of robots in realtime. This is an early development build that is optimized for chrome. Remo is 100% open source, and free to use. Replacement for Let's Robot, run by the same people. (I believe).","title":"Internet Controlled Robots"},{"location":"projects/InternetControlledRobots/#internet-connected-robots","text":"Internet Connected Robot","title":"Internet Connected Robots"},{"location":"projects/InternetControlledRobots/#lets-robot","text":"No Longer Active or supported. https://github.com/runmyrobot/runmyrobot https://letsrobot.readme.io/docs/how-to-use-l298n https://letsrobot.tv/","title":"Let's Robot"},{"location":"projects/InternetControlledRobots/#robotstreamercom","text":"Robot Streamer How to add your Robot software RobotStreamer Telerobotic platform for sharing remote control of robots in realtime.","title":"Robotstreamer.com"},{"location":"projects/InternetControlledRobots/#remotv","text":"remo.tv Remo is an open telerobotics platform for sharing remote control of robots in realtime. This is an early development build that is optimized for chrome. Remo is 100% open source, and free to use. Replacement for Let's Robot, run by the same people. (I believe).","title":"Remo.TV"},{"location":"projects/TI_CF7_and_Other_Stuff/","text":"https://www.nanopeb.com/ http://www.ti99-geek.nl/","title":"TI CF7 and Other Stuff"},{"location":"projects/TinyArcadeInfo/","text":"Tiny Circuits - Tiny Arcade Info https://tinycircuits.com/collections/all/products/tinyarcade http://forum.tinycircuits.com/ https://learn.tinycircuits.com/Help/Developing-a-Game-For-Tiny-Arcade_Tutorial/ https://learn.tinycircuits.com/Processors/TinyScreen+_Setup_Tutorial/ Games on Micro-Controllers: (Tiny Arcade), (Pokitto), (Gamebuino), (Arduboy), (PocketStar) Pokitto Magazine https://www.pokitto.com/pokittomag1/","title":"Tiny Circuits - Tiny Arcade Info"},{"location":"projects/TinyArcadeInfo/#tiny-circuits-tiny-arcade-info","text":"https://tinycircuits.com/collections/all/products/tinyarcade http://forum.tinycircuits.com/ https://learn.tinycircuits.com/Help/Developing-a-Game-For-Tiny-Arcade_Tutorial/ https://learn.tinycircuits.com/Processors/TinyScreen+_Setup_Tutorial/","title":"Tiny Circuits - Tiny Arcade Info"},{"location":"projects/TinyArcadeInfo/#games-on-micro-controllers","text":"(Tiny Arcade), (Pokitto), (Gamebuino), (Arduboy), (PocketStar)","title":"Games on Micro-Controllers:"},{"location":"projects/TinyArcadeInfo/#pokitto-magazine","text":"https://www.pokitto.com/pokittomag1/","title":"Pokitto Magazine"},{"location":"projects/arduinoStarTrek/","text":"Porting classic Star Trek to the Arduino platform https://blog.adafruit.com/2020/09/08/running-the-original-star-trek-game-running-on-an-arduino-startrekday-vintagecomputing/ http://www.catb.org/~esr/super-star-trek/sst-doc.html#idm95 https://forum.arduino.cc/index.php?topic=701820.0 https://www.adafruit.com/product/1947","title":"arduinoStarTrek"},{"location":"projects/daviswx/","text":"Hookup and Information for Davis Weather Stations to Arduino http://cactus.io/hookups/weather/anemometer/davis/hookup-arduino-to-davis-anemometer","title":"Daviswx"},{"location":"projects/dstrike_dduino_32xs/","text":"It is a ESP32+TFT development board GPIOs and hardware info: Display: ST7789 1.3\" Screen Display SDA(MOSI): GPIO 26 Display SCL/SCK: GPIO 27 Display DC: GPIO 23 Display RST: GPIO32 Display Background LED : GPIO22 (Low will close BackGround) Resolution: 240*240 WS2812b LED: GPIO 25 Buzzer\uff1aGPIO33 Button Up: GPIO 19 Button Down: GPIO 5 Button Select: GPIO 18 SD card GPIO12--DAT2 GPIO13--DAT3 GPIO15--CMD GPIO14--CLK GPIO2--DAT0 GPIO4--DAT1 GPIO21--card What makes it special? ~100mA power usage LM39100 Low Voltage Low-Dropout Regulator All GPIO breakouts and 3.3 and 5V output 2 LEDs to indicate battery charging status (Red:Charging,Green:Full) Protection: short, over charging, over discharging, temperature, reverse ESP32-Wrover inside(4MB Flash+4MB PSRAM) Auto download function integrated SD-card function integrated Passive buzzer and RGB LED","title":"Dstrike dduino 32xs"},{"location":"projects/freesmsnumber/","text":"Free online temporary phone number to get SMS messages https://quackr.io/","title":"Freesmsnumber"},{"location":"projects/gps_info/","text":"tinyGPSplus https://github.com/mikalhart/TinyGPSPlus How a Kalman filter works, in pictures https://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/ PhantomSabre/GPS-Kalman-Filter https://github.com/PhantomSabre/GPS-Kalman-Filter NMEA data https://www.gpsinformation.org/dale/nmea.htm#nmea Real Time Kinematic is a technique used to increase the accuracy of GPS signals by using a fixed base station which wirelessly sends out corrections to a moving receiver. https://www.vboxautomotive.co.uk/index.php/en/how-does-it-work-rtk GPS Services https://gssc.esa.int/navipedia/index.php/GPS_Services#Precise_Positioning_Service Differential GPS https://en.wikipedia.org/wiki/Differential_GPS NEO-6 u-blox 6 GPS Modules Data Sheet https://www.u-blox.com/sites/default/files/products/documents/NEO-6_DataSheet_%28GPS.G6-HW-09005%29.pdf u-blox 6 Receiver Description Including Protocol Specification https://www.u-blox.com/sites/default/files/products/documents/u-blox6_ReceiverDescrProtSpec_%28GPS.G6-SW-10018%29_Public.pdf?utm_source=en%2Fimages%2Fdownloads%2FProduct_Docs%2Fu-blox6_ReceiverDescriptionProtocolSpec_%28GPS.G6-SW-10018%29.pdf Interface ublox NEO-6M GPS Module with Arduino https://lastminuteengineers.com/neo6m-gps-arduino-tutorial/ A practical approach to Kalman filter and how to implement it http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it/ https://github.com/TKJElectronics/KalmanFilter (Currently using)Trivial Kalman Filter https://github.com/dwrobel/TrivialKalmanFilter Simple Kalman Filter https://github.com/denyssene/SimpleKalmanFilter","title":"Gps info"},{"location":"projects/makersites/","text":"projects from maker.pro to try or are very interesting. https://maker.pro/arduino/projects/quirky-crowd-controlled-robotic-arm-arduino https://maker.pro/arduino/projects/build-arduino-self-balancing-robot https://hackster.io have lots of projects bookmarked https://www.electromaker.io/ projects from electro maker https://www.electromaker.io/project/view/autonomous-rover-google-vision-aiy-kit-on-wheels https://www.instructables.com/","title":"Makersites"},{"location":"projects/public_apis/","text":"","title":"Public apis"},{"location":"projects/rephone/","text":"Information about the Seeed RePhone Kit This was a phone you made yourself, the board can be programmed with the Arduino IDE. It appears to only work with the Windows IDE, and was a pain to setup even then. Mine seems to have a problem with the audio board, but it still has some GPIO and a large(ish) touch screen. * I've not gotten the touch screen to work. The bluetooth may still work - but the GSM phone probably doesn't I've not tested the bluetooth. Here is what I know about it. https://www.seeedstudio.com/Xadow-GSM-BLE-p-2560.html http://wiki.seeedstudio.com/Xadow_GSMPlusBLE/ http://wiki.seeedstudio.com/Arduino_IDE_for_RePhone_Kit/ https://github.com/Seeed-Studio/Arduino_IDE_for_RePhone https://docs.labs.mediatek.com/resource/linkit-assist-2502/en https://github.com/WayenWeng/RePhone_API_for_Arduino https://github.com/mandl/LinkIt_Assist_2502 (I think the important information is missing with a 404). This is for MacOS - but may have some info for using Linux https://einmanaleiki.de/rephone-arduino-mac-os-x-19 This may also work (untested at this point) https://github.com/loboris/ArduinoGNULinux4RePhone which was forked from https://github.com/5shekel/ArduinoGNULinux4RePhone https://github.com/moisesStevend/ArduinoGNULinux4RePhone","title":"Rephone"},{"location":"projects/respeaker/","text":"","title":"Respeaker"},{"location":"projects/OdroidGo/GeneralInformaiton/","text":"More/Other Code and Information A collection of awesome ODROID-GO emulators, games and resources https://github.com/chrisdiana/awesome-odroid-go Odroid Go Library https://github.com/leeseungcheol/ODROID-GO Frodo GO https://github.com/OtherCrashOverride/frodo-go C64-Go https://github.com/Schuemi/c64-go Odroid Go MicroPython (and examples) https://github.com/joshua-yang/ODROID-GO-MicroPython Game Doc Project for Odroid Go https://github.com/vbrusca/GameDocProjectOdroidGo Goduino https://github.com/khuenqdev/goduino","title":"GeneralInformaiton"},{"location":"projects/OdroidGo/GeneralInformaiton/#moreother-code-and-information","text":"A collection of awesome ODROID-GO emulators, games and resources https://github.com/chrisdiana/awesome-odroid-go Odroid Go Library https://github.com/leeseungcheol/ODROID-GO Frodo GO https://github.com/OtherCrashOverride/frodo-go C64-Go https://github.com/Schuemi/c64-go Odroid Go MicroPython (and examples) https://github.com/joshua-yang/ODROID-GO-MicroPython Game Doc Project for Odroid Go https://github.com/vbrusca/GameDocProjectOdroidGo Goduino https://github.com/khuenqdev/goduino","title":"More/Other Code and Information"},{"location":"projects/RaspberryPI/","text":"Raspberry PI Using Arduino IDE, Particle Cloud and Pure C Installation Follow the guide here: https://docs.google.com/document/d/1RfZoIqRebDUK48iS5WgfDbFuNDVCsAeVdkK4EFAZIQ0/edit?usp=sharing Directories Arduino - this contains sketches that have been tested with https://github.com/me-no-dev/RasPiArduino C-WiringPi - this contains sketches that have been tested with http://wiringpi.com/ and http://www.admfactory.com/blinking-led-on-raspberry-pi-using-c/ Particle Cloud - this contains sketches that have been tested with https://particle.io using the Raspberry Pi https://docs.particle.io/guide/getting-started/intro/raspberry-pi/ Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Support Me If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller Other Projects https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/ Credits Copyright (c) 2017 LeRoy Miller License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"PIDuino Setup"},{"location":"projects/RaspberryPI/#raspberry-pi-using-arduino-ide-particle-cloud-and-pure-c","text":"","title":"Raspberry PI Using Arduino IDE, Particle Cloud and Pure C"},{"location":"projects/RaspberryPI/#installation","text":"Follow the guide here: https://docs.google.com/document/d/1RfZoIqRebDUK48iS5WgfDbFuNDVCsAeVdkK4EFAZIQ0/edit?usp=sharing","title":"Installation"},{"location":"projects/RaspberryPI/#directories","text":"Arduino - this contains sketches that have been tested with https://github.com/me-no-dev/RasPiArduino C-WiringPi - this contains sketches that have been tested with http://wiringpi.com/ and http://www.admfactory.com/blinking-led-on-raspberry-pi-using-c/ Particle Cloud - this contains sketches that have been tested with https://particle.io using the Raspberry Pi https://docs.particle.io/guide/getting-started/intro/raspberry-pi/","title":"Directories"},{"location":"projects/RaspberryPI/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/RaspberryPI/#support-me","text":"If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller","title":"Support Me"},{"location":"projects/RaspberryPI/#other-projects","text":"https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/","title":"Other Projects"},{"location":"projects/RaspberryPI/#credits","text":"Copyright (c) 2017 LeRoy Miller","title":"Credits"},{"location":"projects/RaspberryPI/#license","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"License"},{"location":"projects/RaspberryPI/hero2020/","text":"Hero JR Project 2020 Raspberry PI 3B, Arduino MEGA (mini) Replaced the steering motor with a large stepper MQTT Broker, and various scripts for calling APIs from the web espeak, witai, and a serial2mqtt gateway for communication with the Arduino MEGA MQTT Broker Tell a Joke (dad jokes, random joke, and your momma) joke.py Topic: topic/joke message: 'dad' tell a bad dad joke 'joke' a random joke 'momma' a your momma is so... What should I do if I'm bored? https://www.boredapi.com/ bored.py Topic: topic/bored message: '1' The Arduino Mega will subscribe to various topics: working idea list: topic/LED topic/key topic/ping topic/ldr Other APIs to consider https://mixedanalytics.com/blog/list-actually-free-open-no-auth-needed-apis/ https://github.com/davemachado/public-api https://apilist.fun/ https://any-api.com/ https://github.com/public-apis/public-apis https://api.agify.io/?name=leroy Weather APIs https://www.weatherbit.io/api https://api.met.no/weatherapi/locationforecast/1.9/documentation https://www.metaweather.com/ MQTT Python Tutorial/Examples https://www.ev3dev.org/docs/tutorials/sending-and-receiving-messages-with-mqtt/","title":"Hero JR Project 2020"},{"location":"projects/RaspberryPI/hero2020/#hero-jr-project-2020","text":"Raspberry PI 3B, Arduino MEGA (mini) Replaced the steering motor with a large stepper MQTT Broker, and various scripts for calling APIs from the web espeak, witai, and a serial2mqtt gateway for communication with the Arduino MEGA","title":"Hero JR Project 2020"},{"location":"projects/RaspberryPI/hero2020/#mqtt-broker","text":"Tell a Joke (dad jokes, random joke, and your momma) joke.py Topic: topic/joke message: 'dad' tell a bad dad joke 'joke' a random joke 'momma' a your momma is so... What should I do if I'm bored? https://www.boredapi.com/ bored.py Topic: topic/bored message: '1' The Arduino Mega will subscribe to various topics: working idea list: topic/LED topic/key topic/ping topic/ldr","title":"MQTT Broker"},{"location":"projects/RaspberryPI/hero2020/#other-apis-to-consider","text":"https://mixedanalytics.com/blog/list-actually-free-open-no-auth-needed-apis/ https://github.com/davemachado/public-api https://apilist.fun/ https://any-api.com/ https://github.com/public-apis/public-apis https://api.agify.io/?name=leroy Weather APIs https://www.weatherbit.io/api https://api.met.no/weatherapi/locationforecast/1.9/documentation https://www.metaweather.com/","title":"Other APIs to consider"},{"location":"projects/RaspberryPI/hero2020/#mqtt-python-tutorialexamples","text":"https://www.ev3dev.org/docs/tutorials/sending-and-receiving-messages-with-mqtt/","title":"MQTT Python Tutorial/Examples"},{"location":"projects/RaspberryPI/moreprojects/","text":"more projects Running DOS on raspberry PI https://opensource.com/article/18/3/can-you-run-dos-raspberry-pi Learn about cryptocurrency mining with Storj https://opensource.com/article/17/12/raspberry-pi-cryptocurrency-mining https://storj.io/ Setup a self-hosted Git Service https://gogs.io/ Setup a Off-line/No Internet Educational Intranet http://rachelfriends.org/ https://worldpossible.org/oer2go https://worldpossible.org/rachel https://worldpossible.org/ Pi Wars The International Raspberry PI robotics competition https://piwars.org/ How to Make a Raspberry Pi Work-From-Home Status Indicator https://www.tomshardware.com/how-to/raspberry-pi-work-status-indicator How to Make a Raspberry Pi RSS News Ticker https://www.tomshardware.com/how-to/raspberry-pi-rss-news-ticker Build a private social network with a Raspberry Pi https://opensource.com/article/20/3/raspberry-pi-open-source-social Wekan Open-Source Kanban https://wekan.github.io/ Fetching real-time weather data and controlling the speed of a motor fan with Raspberry Pi https://community.dfrobot.com/makelog-308300.html How to build a Raspberry Pi Kubernetes cluster using MicroK8s https://ubuntu.com/tutorials/how-to-kubernetes-cluster-on-raspberry-pi#1-overview Build a private chat server with a Raspberry Pi and Rocket.Chat https://opensource.com/article/20/3/raspberry-pi-rocketchat","title":"more projects"},{"location":"projects/RaspberryPI/moreprojects/#more-projects","text":"Running DOS on raspberry PI https://opensource.com/article/18/3/can-you-run-dos-raspberry-pi Learn about cryptocurrency mining with Storj https://opensource.com/article/17/12/raspberry-pi-cryptocurrency-mining https://storj.io/ Setup a self-hosted Git Service https://gogs.io/ Setup a Off-line/No Internet Educational Intranet http://rachelfriends.org/ https://worldpossible.org/oer2go https://worldpossible.org/rachel https://worldpossible.org/ Pi Wars The International Raspberry PI robotics competition https://piwars.org/ How to Make a Raspberry Pi Work-From-Home Status Indicator https://www.tomshardware.com/how-to/raspberry-pi-work-status-indicator How to Make a Raspberry Pi RSS News Ticker https://www.tomshardware.com/how-to/raspberry-pi-rss-news-ticker Build a private social network with a Raspberry Pi https://opensource.com/article/20/3/raspberry-pi-open-source-social Wekan Open-Source Kanban https://wekan.github.io/ Fetching real-time weather data and controlling the speed of a motor fan with Raspberry Pi https://community.dfrobot.com/makelog-308300.html How to build a Raspberry Pi Kubernetes cluster using MicroK8s https://ubuntu.com/tutorials/how-to-kubernetes-cluster-on-raspberry-pi#1-overview Build a private chat server with a Raspberry Pi and Rocket.Chat https://opensource.com/article/20/3/raspberry-pi-rocketchat","title":"more projects"},{"location":"projects/RaspberryPI/nextcloud_info/","text":"NextCloud information. https://nextcloud.com/install/# https://nextcloud.com/ https://www.spryservers.net/clients/ free nextcloud provider (webDev) syncloud https://github.com/syncloud/platform/releases https://syncloud.org/","title":"Nextcloud info"},{"location":"projects/RaspberryPI/services/","text":"Raspberry PI Names and Services Name Version SSH VNC Services Type PIDuino Jessie Y N c++, wirePi, partical, arduino ZeroW? NextcloudPI Y N Next Cloud Web Service 3B+? OpenCV Buster Y Y remote.it, opencv, camera ? RPI5 Stretch Y Y pyFirmata, c++, wirePi 3B DEX Jessie Y ? GrovePI Hat 3B/16gb PIDuino, OpenCV, RPI5, DEX are all setup for development, not all have the same enviorments.","title":"General Information"},{"location":"projects/RaspberryPI/services/#raspberry-pi-names-and-services","text":"Name Version SSH VNC Services Type PIDuino Jessie Y N c++, wirePi, partical, arduino ZeroW? NextcloudPI Y N Next Cloud Web Service 3B+? OpenCV Buster Y Y remote.it, opencv, camera ? RPI5 Stretch Y Y pyFirmata, c++, wirePi 3B DEX Jessie Y ? GrovePI Hat 3B/16gb PIDuino, OpenCV, RPI5, DEX are all setup for development, not all have the same enviorments.","title":"Raspberry PI Names and Services"},{"location":"projects/RaspberryPI/tts/","text":"Install Text To Speech https://elinux.org/RPi_Text_to_Speech_(Speech_Synthesis)","title":"Install Text To Speech"},{"location":"projects/RaspberryPI/tts/#install-text-to-speech","text":"https://elinux.org/RPi_Text_to_Speech_(Speech_Synthesis)","title":"Install Text To Speech"},{"location":"projects/RaspberryPI/tunnelservices/","text":"Tunnel Servics Balena Cloud Running Balena Cloud OS let you install and update containers, can create a link for remote access to shell. Up to 10 devices. Dataplicity One device, remote terminal, website forwarding, portforward SSH and VNC, https termination, 512mb per day 10mbps burst. Serveo Easy to use, free, support for custom domain. Update Nov 3, 2020 Serveo now appears to be defunc. Ngrok HTTP/TCP tunnels on random URLs/ports, 1 online ngrok process, up to 4 tunnels/ngrok process, 40 connections/minute. Admin site lets you see if device is online, and URL it's using. localtunnel project appears DOA, still works with a work around Use lt -h \"http://serverless.social\" -p * Staqlab supports custom domain for free, forward webhooks, sharing work, collaborate with teammates, iot integration, up to 3 tunnels simultaneously. * PI Tunnel Free one device, remote terminal, device monitoring, remote screen capture, remote reboot, ssl security, 1 custom tunnel, 500mb per day. * Inlets seems a little more intivise to setup, see the guide here (maybe dated) https://blog.alexellis.io/raspberry-pi-zero-tunnel-gateway/ * Set it up yourself with OpenSSH-Server needs lots of setup to do it right. tutorial maybe out of date. * sysb.AI Seems to be a new service, with a demo account setup, not sure what it can do. * UpSwift free ter for 3 devices. * beame Expose local network applications through HTTPS tunnels with free SSL certificates. * localhost.run ssh -R 80:localhost:8080 ssh.localhost.run * localXpose limited free * gw.run maybe worth looking into, appears completely free","title":"Raspberry PI Tunnel Services"},{"location":"projects/RaspberryPI/tunnelservices/#tunnel-servics","text":"Balena Cloud Running Balena Cloud OS let you install and update containers, can create a link for remote access to shell. Up to 10 devices. Dataplicity One device, remote terminal, website forwarding, portforward SSH and VNC, https termination, 512mb per day 10mbps burst. Serveo Easy to use, free, support for custom domain. Update Nov 3, 2020 Serveo now appears to be defunc. Ngrok HTTP/TCP tunnels on random URLs/ports, 1 online ngrok process, up to 4 tunnels/ngrok process, 40 connections/minute. Admin site lets you see if device is online, and URL it's using. localtunnel project appears DOA, still works with a work around Use lt -h \"http://serverless.social\" -p * Staqlab supports custom domain for free, forward webhooks, sharing work, collaborate with teammates, iot integration, up to 3 tunnels simultaneously. * PI Tunnel Free one device, remote terminal, device monitoring, remote screen capture, remote reboot, ssl security, 1 custom tunnel, 500mb per day. * Inlets seems a little more intivise to setup, see the guide here (maybe dated) https://blog.alexellis.io/raspberry-pi-zero-tunnel-gateway/ * Set it up yourself with OpenSSH-Server needs lots of setup to do it right. tutorial maybe out of date. * sysb.AI Seems to be a new service, with a demo account setup, not sure what it can do. * UpSwift free ter for 3 devices. * beame Expose local network applications through HTTPS tunnels with free SSL certificates. * localhost.run ssh -R 80:localhost:8080 ssh.localhost.run * localXpose limited free * gw.run maybe worth looking into, appears completely free","title":"Tunnel Servics"},{"location":"projects/SnapOnAir_LoRaCommunicator/snaponair/","text":"Snap on Air - LoRa Communicator open sourced http://www.snaponair.com/ https://github.com/ccadic/snaponairmini","title":"Snap on Air - LoRa Communicator"},{"location":"projects/SnapOnAir_LoRaCommunicator/snaponair/#snap-on-air-lora-communicator","text":"open sourced http://www.snaponair.com/ https://github.com/ccadic/snaponairmini","title":"Snap on Air - LoRa Communicator"},{"location":"projects/TILaunchPad/","text":"TI Launchpad Code and Demos This repository is for holding demo code and projects for the Launchpad series of boards. Usage Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Credits Energia - http://energia.nu TI LaunchPad http://www.ti.com/lsds/ti/tools-software/launchpads/overview/overview.page https://dev.ti.com/ LeRoy Miller (2016) License As far as I am aware this License applies, please correct me if I am incorrect. This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses Other Licenses that apply: The text of the Energia getting started and reference guides are licensed under a Creative Commons Attribution-ShareAlike 3.0 License. Energia reference is based on Arduino reference. Code samples in the guide are released into the public domain. Energia sketches are C/C++ based and compiled with the open-source compiler MSPGCC. The Energia language comes from Wiring. The Energia environment is based on Processing and includes modifications made by Wiring.","title":"TI Launchpad Code and Demos"},{"location":"projects/TILaunchPad/#ti-launchpad-code-and-demos","text":"This repository is for holding demo code and projects for the Launchpad series of boards.","title":"TI Launchpad Code and Demos"},{"location":"projects/TILaunchPad/#usage","text":"","title":"Usage"},{"location":"projects/TILaunchPad/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/TILaunchPad/#credits","text":"Energia - http://energia.nu TI LaunchPad http://www.ti.com/lsds/ti/tools-software/launchpads/overview/overview.page https://dev.ti.com/ LeRoy Miller (2016)","title":"Credits"},{"location":"projects/TILaunchPad/#license","text":"As far as I am aware this License applies, please correct me if I am incorrect. This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses Other Licenses that apply: The text of the Energia getting started and reference guides are licensed under a Creative Commons Attribution-ShareAlike 3.0 License. Energia reference is based on Arduino reference. Code samples in the guide are released into the public domain. Energia sketches are C/C++ based and compiled with the open-source compiler MSPGCC. The Energia language comes from Wiring. The Energia environment is based on Processing and includes modifications made by Wiring.","title":"License"},{"location":"projects/TILaunchPad/ti-multi-task/","text":"Oct 6, 2016 TI LaunchPad MS432 Multi-Tasking Demo Pictures and short video (early stage) showing the Demo for Oct 6th 2016 using the MSP432 multi-tasking board Video was before adding the Nokia 5110 screen, temperature sensor, and last 2 LEDs. Current version of demo. 7 Blinking LEDs at different rates 1 LED (in two threads) blink Green then Blue - showing the timing doesn\u2019t change 6 LEDs Fading at different rates and times 3 Ultra Sonic Ping Sensors Nokia 5110 SPI screen DHT11 Temperature sensor A counting thread And a serial print to console thread All the leds are in there own thread, I count a total of 22 threads, plus the main thread which I used to setup some of the variables, serial port, lcd screen, etc Libraries need (Which were a little hard to find) Nokia 5110 (for the Launchpad) [DHT11 library] (https://forum.43oh.com/topic/2873-energia-library-ladyadas-dht-library-ported/). I started a repository for demos and projects using the TI Launchpad boards. GitHub","title":"TI Launchpad MS432 Multi-Task Demo"},{"location":"projects/TILaunchPad/ti-multi-task/#oct-6-2016-ti-launchpad-ms432-multi-tasking-demo","text":"Pictures and short video (early stage) showing the Demo for Oct 6th 2016 using the MSP432 multi-tasking board Video was before adding the Nokia 5110 screen, temperature sensor, and last 2 LEDs.","title":"Oct 6, 2016 TI LaunchPad MS432 Multi-Tasking Demo"},{"location":"projects/TILaunchPad/ti-multi-task/#current-version-of-demo","text":"7 Blinking LEDs at different rates 1 LED (in two threads) blink Green then Blue - showing the timing doesn\u2019t change 6 LEDs Fading at different rates and times 3 Ultra Sonic Ping Sensors Nokia 5110 SPI screen DHT11 Temperature sensor A counting thread And a serial print to console thread All the leds are in there own thread, I count a total of 22 threads, plus the main thread which I used to setup some of the variables, serial port, lcd screen, etc","title":"Current version of demo."},{"location":"projects/TILaunchPad/ti-multi-task/#libraries-need-which-were-a-little-hard-to-find","text":"Nokia 5110 (for the Launchpad) [DHT11 library] (https://forum.43oh.com/topic/2873-energia-library-ladyadas-dht-library-ported/). I started a repository for demos and projects using the TI Launchpad boards. GitHub","title":"Libraries need (Which were a little hard to find)"},{"location":"projects/arduino/ArduinoVigenereCipher/","text":"Arduino Vigenere Cipher by ShaifulFlame THE CODE IN THIS BRANCH SHOULD NOT BE USED FOR PRODUCTION. This is a fun project code, but should not be considered to be secure. Installation Things To Do Usage Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Credits ShaifulFlame Original Github https://github.com/ShaifulFlame/ArduinoVigenereCipher License See LICENSE text file","title":"Arduino Vigenere Cipher by ShaifulFlame"},{"location":"projects/arduino/ArduinoVigenereCipher/#arduino-vigenere-cipher-by-shaifulflame","text":"THE CODE IN THIS BRANCH SHOULD NOT BE USED FOR PRODUCTION. This is a fun project code, but should not be considered to be secure.","title":"Arduino Vigenere Cipher by ShaifulFlame"},{"location":"projects/arduino/ArduinoVigenereCipher/#installation","text":"","title":"Installation"},{"location":"projects/arduino/ArduinoVigenereCipher/#things-to-do","text":"","title":"Things To Do"},{"location":"projects/arduino/ArduinoVigenereCipher/#usage","text":"","title":"Usage"},{"location":"projects/arduino/ArduinoVigenereCipher/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/arduino/ArduinoVigenereCipher/#credits","text":"ShaifulFlame Original Github https://github.com/ShaifulFlame/ArduinoVigenereCipher","title":"Credits"},{"location":"projects/arduino/ArduinoVigenereCipher/#license","text":"See LICENSE text file","title":"License"},{"location":"projects/arduino/chatterbot/","text":"Chatter Bot Installation Simple fun chatter bot. 1) Head from a Wowwee Tri-bot 2) Catalex Uart MP3 player 3) Arduino UNO or the like 4) amplified speaker for the MP3 player From the Tri-Bot Head, purple wire is connected to 3.3v using a ground wire I tested the other wires to figure out which does what. I am only using the center mouth led, and the 2 eye leds in this project. There are also 2 ear leds, a white led (headlamp), and 2 more mouth leds. There is a motor that will pop the headlamp and ears out. This motor will also bring them all back into the head. You need to find some jokes or some random stuff for your chat bot to just mindless say. For mine I found some Star Wars jokes. Used a Text to Speech program, I made a WAV file, and converted that file to a MP3. The MP3 player will play the 1st \"song\" it finds and stops. The mouth leds are not any way synchronized to the sound, it just flashes the mouth. Things To Do add other mouth LEDs. make it play more than one MP3 file or repeat the MP3 over and over again. Usage TODO: Write usage instructions Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Credits LeRoy Miller (2015) and Catalex (unknown date) most of the software is for the mp3 and based off the Catalex sketches. License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"Chatter Bot"},{"location":"projects/arduino/chatterbot/#chatter-bot","text":"","title":"Chatter Bot"},{"location":"projects/arduino/chatterbot/#installation","text":"Simple fun chatter bot. 1) Head from a Wowwee Tri-bot 2) Catalex Uart MP3 player 3) Arduino UNO or the like 4) amplified speaker for the MP3 player From the Tri-Bot Head, purple wire is connected to 3.3v using a ground wire I tested the other wires to figure out which does what. I am only using the center mouth led, and the 2 eye leds in this project. There are also 2 ear leds, a white led (headlamp), and 2 more mouth leds. There is a motor that will pop the headlamp and ears out. This motor will also bring them all back into the head. You need to find some jokes or some random stuff for your chat bot to just mindless say. For mine I found some Star Wars jokes. Used a Text to Speech program, I made a WAV file, and converted that file to a MP3. The MP3 player will play the 1st \"song\" it finds and stops. The mouth leds are not any way synchronized to the sound, it just flashes the mouth.","title":"Installation"},{"location":"projects/arduino/chatterbot/#things-to-do","text":"add other mouth LEDs. make it play more than one MP3 file or repeat the MP3 over and over again.","title":"Things To Do"},{"location":"projects/arduino/chatterbot/#usage","text":"TODO: Write usage instructions","title":"Usage"},{"location":"projects/arduino/chatterbot/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/arduino/chatterbot/#credits","text":"LeRoy Miller (2015) and Catalex (unknown date) most of the software is for the mp3 and based off the Catalex sketches.","title":"Credits"},{"location":"projects/arduino/chatterbot/#license","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"License"},{"location":"projects/arduino/offgrid/","text":"Off Grid Communications Arduino/LoRa Mesh Projects disaster.radio This seems like one to try https://disaster.radio/ https://github.com/sudomesh/disaster-radio Meshtastic closed source(?) https://www.meshtastic.org/ https://www.open-mesh.org/projects/open-mesh/wiki/BATMANConcept https://github.com/meshtastic/Meshtastic-device https://hackaday.com/2020/02/26/lora-mesh-network-with-off-the-shelf-hardware/ case for t-beam lora board: https://www.thingiverse.com/thing:3830711 Othernet Satellite Radio and datacasting https://othernet.is/ Jebel https://hackaday.io/project/166311-jebel-off-grid-communications LoRaMessenger Another one to try https://hackaday.io/project/166225-loramessenger ArmChat https://www.hackster.io/news/off-grid-wireless-communication-with-the-armachat-762b1cc966e5 https://hackaday.io/project/170878-armachat-doomsday-wireless-qwerty-communicator LoRa Mesh Radio https://www.instructables.com/id/LoRa-Mesh-Radio/ Ripple closed source(?) https://github.com/spleenware/ripple https://instructables.com/id/LoRa-Mesh-Radio/ https://hackaday.com/2020/07/30/join-your-own-private-lora-mesh-network/ LoRa Mesh Networking with Simple Arduino-Based Modules https://nootropicdesign.com/projectlab/2018/10/20/lora-mesh-networking/ SMS over LoRa: Long distance SMS without 4G // Project https://www.mickmake.com/post/sms-lora-long-distance-sms-without-4g-project/","title":"Off Grid Communications"},{"location":"projects/arduino/offgrid/#off-grid-communications","text":"","title":"Off Grid Communications"},{"location":"projects/arduino/offgrid/#arduinolora-mesh-projects","text":"","title":"Arduino/LoRa Mesh Projects"},{"location":"projects/arduino/offgrid/#disasterradio","text":"This seems like one to try https://disaster.radio/ https://github.com/sudomesh/disaster-radio","title":"disaster.radio"},{"location":"projects/arduino/offgrid/#meshtastic","text":"closed source(?) https://www.meshtastic.org/ https://www.open-mesh.org/projects/open-mesh/wiki/BATMANConcept https://github.com/meshtastic/Meshtastic-device https://hackaday.com/2020/02/26/lora-mesh-network-with-off-the-shelf-hardware/ case for t-beam lora board: https://www.thingiverse.com/thing:3830711","title":"Meshtastic"},{"location":"projects/arduino/offgrid/#othernet","text":"Satellite Radio and datacasting https://othernet.is/","title":"Othernet"},{"location":"projects/arduino/offgrid/#jebel","text":"https://hackaday.io/project/166311-jebel-off-grid-communications","title":"Jebel"},{"location":"projects/arduino/offgrid/#loramessenger","text":"Another one to try https://hackaday.io/project/166225-loramessenger","title":"LoRaMessenger"},{"location":"projects/arduino/offgrid/#armchat","text":"https://www.hackster.io/news/off-grid-wireless-communication-with-the-armachat-762b1cc966e5 https://hackaday.io/project/170878-armachat-doomsday-wireless-qwerty-communicator","title":"ArmChat"},{"location":"projects/arduino/offgrid/#lora-mesh-radio","text":"https://www.instructables.com/id/LoRa-Mesh-Radio/","title":"LoRa Mesh Radio"},{"location":"projects/arduino/offgrid/#ripple","text":"closed source(?) https://github.com/spleenware/ripple https://instructables.com/id/LoRa-Mesh-Radio/ https://hackaday.com/2020/07/30/join-your-own-private-lora-mesh-network/","title":"Ripple"},{"location":"projects/arduino/offgrid/#lora-mesh-networking-with-simple-arduino-based-modules","text":"https://nootropicdesign.com/projectlab/2018/10/20/lora-mesh-networking/","title":"LoRa Mesh Networking with Simple Arduino-Based Modules"},{"location":"projects/arduino/offgrid/#sms-over-lora-long-distance-sms-without-4g-project","text":"https://www.mickmake.com/post/sms-lora-long-distance-sms-without-4g-project/","title":"SMS over LoRa: Long distance SMS without 4G // Project"},{"location":"projects/arduino/QVGA-DISPLAY/QVGA-Display2/","text":"Original document found at: https://playground2014.wordpress.com/arduino/qvga-display-2-2-tft-spi-240x320/ QVGA DISPLAY 2.2 TFT SPI 240\u00d7320 Update 23.05.2016 \u2013 Using the SD card modul In the first tutorial (see below), I described the display. Please, read this tutorial first, so you understand this part better. This display has backside a SD card slot. Normally, this modul is not connected. To use it, you must solder 4 pins. And now, be carefull! This pins works with 3.3V too! If you connect this to 5V (arduino pins directly) you destroy your SD card! You must use the level converter! We can connect multiple devices at the same time to the SPI interface. So, we connect the display and the SD card modul to this interface. Be sure, you connect the SD modul ports with the low level side! {width=\"5.5in\" height=\"3.111111111111111in\"} {width=\"5.5in\" height=\"3.111111111111111in\"} And now, let us use the SD card module. In the first tutorial, you used already two ADAFRUIT libraries. Now, we need a third library, named \u201cSD.h\u201d. You will find two great examples in your arduino IDE \u2013 \u201cgraphicstest\u201d and \u201cspitfbitmap\u201d. Both runs without changes! Try it! The necessary bitmap for the second sketch is in the example folder. Look there and copy it to your SD card (directly into the root directory). /***************************************************\\ This is an example sketch for the Adafruit 2.2\" SPI display.\\ This library works with the Adafruit 2.2\" TFT Breakout w/SD card\\ ---- http://www.adafruit.com/products/1480\\ \\ Check out the links above for our tutorials and wiring diagrams\\ These displays use SPI to communicate, 4 or 5 pins are required to\\ interface (RST is optional)\\ Adafruit invests time and resources providing this open source code,\\ please support Adafruit and open-source hardware by purchasing\\ products from Adafruit!\\ \\ Written by Limor Fried/Ladyada for Adafruit Industries.\\ MIT license, all text above must be included in any redistribution\\ ****************************************************/\\ \\ #include Adafruit_GFX.h // Core graphics library\\ #include \"Adafruit_ILI9340.h\" // Hardware-specific library\\ #include SPI.h \\ #include SD.h \\ \\ // TFT display and SD card will share the hardware SPI interface.\\ // Hardware SPI pins are specific to the Arduino board type and\\ // cannot be remapped to alternate pins. For Arduino Uno,\\ // Duemilanove, etc., pin 11 = MOSI, pin 12 = MISO, pin 13 = SCK.\\ #define TFT_RST 8\\ #define TFT_DC 9\\ #define TFT_CS 10\\ #define SD_CS 4\\ \\ Adafruit_ILI9340 tft = Adafruit_ILI9340(TFT_CS, TFT_DC, TFT_RST);\\ \\ ... QVGA Display 2.2 TFT SPI 240\u00d7320 In this tutorial I show you, how you can use the TFT SPI display. First, what is SPI? SPI is the abbreviation for \u201cSerial Peripheral Interface\u201d. For this type of communication, we need the following data ports: MISO = Master In, Slave Out MOSI = Master Out, Slave In SCK = Serial Clock SS = Slave Select Our Arduino has already this port definition: Port 11 = MOSI Port 12 = MISO Port 13 = SCK Port 10 = SS This is the set to communicate via SPI. We need two additional ports for our display: Port 9 = Data / Command selection Port 8 = Reset (Low Level active) So far, so good, but there is one problem: The TFT display works with 3.3 V. Ok, this no problem, our arduino has this voltage. But we need 3.3V at the data ports too! And here works the arduino with 5V. With 5V on ports 10, 11, 12 and 13 the display will be dark, no chance! We solve the problem with a level converter. There are a lot of IC, example the CD4050. I use in this tutorial two breakout boards from sparkfun. Annotations: The LED pin is connected with 3.3V, Vcc too. Some Details: {width=\"4.166666666666667in\" height=\"2.3472222222222223in\"} {width=\"2.8055555555555554in\" height=\"2.361111111111111in\"} {width=\"4.166666666666667in\" height=\"2.3472222222222223in\"} {width=\"4.166666666666667in\" height=\"2.3472222222222223in\"} The code: /***************************************************\\ This is an example sketch for the Adafruit 2.2\" SPI display.\\ This library works with the Adafruit 2.2\" TFT Breakout w/SD card\\ ---- http://www.adafruit.com/products/1480\\ \\ Check out the links above for our tutorials and wiring diagrams\\ These displays use SPI to communicate, 4 or 5 pins are required to\\ interface (RST is optional)\\ Adafruit invests time and resources providing this open source code,\\ please support Adafruit and open-source hardware by purchasing\\ products from Adafruit!\\ \\ Written by Limor Fried/Ladyada for Adafruit Industries.\\ MIT license, all text above must be included in any redistribution\\ ****************************************************/\\ \\ #include \"SPI.h\"\\ #include \"Adafruit_GFX.h\"\\ #include \"Adafruit_ILI9340.h\"\\ \\ #if defined(__SAM3X8E__)\\ #undef __FlashStringHelper::F(string_literal)\\ #define F(string_literal) string_literal\\ #endif\\ \\ // These are the pins used for the UNO\\ // for Due/Mega/Leonardo use the hardware SPI pins (which are different)\\ #define _sclk 13\\ #define _miso 12\\ #define _mosi 11\\ #define _cs 10\\ #define _dc 9\\ #define _rst 8\\ \\ Adafruit_ILI9340 tft = Adafruit_ILI9340(_cs, _dc, _rst);\\ \\ void setup() {\\ tft.begin();\\ \\ tft.setRotation(1);\\ testText();\\ }\\ \\ void loop(void) {\\ \\ }\\ \\ \\ unsigned long testText() {\\ tft.fillScreen(ILI9340_BLACK);\\ tft.setCursor(20, 20);\\ tft.setTextColor(ILI9340_RED); tft.setTextSize(4);\\ tft.println(\"Thank you!\");\\ tft.setCursor(20, 70);\\ tft.setTextColor(ILI9340_YELLOW); tft.setTextSize(2);\\ tft.print(\"Adafruit tft.setTextColor(ILI9340_WHITE);\\ tft.print(\" \");\\ tft.setTextColor(ILI9340_GREEN);\\ tft.println(\"Sparkfun\");\\ tft.setTextColor(ILI9340_WHITE);\\ tft.setTextSize(2);\\ tft.println();\\ tft.println(\"It's crazy! The display \");\\ tft.println(\"works! \");\\ tft.println();\\ tft.print(\"Thank\");\\ tft.setTextColor(ILI9340_YELLOW);\\ tft.println(\"Adafruit\");\\ tft.setTextColor(ILI9340_WHITE);\\ tft.println(\"for the perfect libraries\");\\ tft.print(\" thank you \");\\ tft.setTextColor(ILI9340_GREEN);\\ tft.print(\"Sparkfun tft.setTextColor(ILI9340_WHITE);\\ tft.println(\"for\");\\ tft.println(\"the really simple to use\");\\ tft.println(\"Level Converter! \");\\ }","title":"QVGA Display"},{"location":"projects/arduino/QVGA-DISPLAY/QVGA-Display2/#original-document-found-at","text":"https://playground2014.wordpress.com/arduino/qvga-display-2-2-tft-spi-240x320/","title":"Original document found at:"},{"location":"projects/arduino/QVGA-DISPLAY/QVGA-Display2/#qvga-display-22-tft-spi-240320","text":"","title":"QVGA DISPLAY 2.2 TFT SPI 240\u00d7320"},{"location":"projects/arduino/QVGA-DISPLAY/QVGA-Display2/#update-23052016-using-the-sd-card-modul","text":"In the first tutorial (see below), I described the display. Please, read this tutorial first, so you understand this part better. This display has backside a SD card slot. Normally, this modul is not connected. To use it, you must solder 4 pins. And now, be carefull! This pins works with 3.3V too! If you connect this to 5V (arduino pins directly) you destroy your SD card! You must use the level converter! We can connect multiple devices at the same time to the SPI interface. So, we connect the display and the SD card modul to this interface. Be sure, you connect the SD modul ports with the low level side! {width=\"5.5in\" height=\"3.111111111111111in\"} {width=\"5.5in\" height=\"3.111111111111111in\"} And now, let us use the SD card module. In the first tutorial, you used already two ADAFRUIT libraries. Now, we need a third library, named \u201cSD.h\u201d. You will find two great examples in your arduino IDE \u2013 \u201cgraphicstest\u201d and \u201cspitfbitmap\u201d. Both runs without changes! Try it! The necessary bitmap for the second sketch is in the example folder. Look there and copy it to your SD card (directly into the root directory). /***************************************************\\ This is an example sketch for the Adafruit 2.2\" SPI display.\\ This library works with the Adafruit 2.2\" TFT Breakout w/SD card\\ ---- http://www.adafruit.com/products/1480\\ \\ Check out the links above for our tutorials and wiring diagrams\\ These displays use SPI to communicate, 4 or 5 pins are required to\\ interface (RST is optional)\\ Adafruit invests time and resources providing this open source code,\\ please support Adafruit and open-source hardware by purchasing\\ products from Adafruit!\\ \\ Written by Limor Fried/Ladyada for Adafruit Industries.\\ MIT license, all text above must be included in any redistribution\\ ****************************************************/\\ \\ #include Adafruit_GFX.h // Core graphics library\\ #include \"Adafruit_ILI9340.h\" // Hardware-specific library\\ #include SPI.h \\ #include SD.h \\ \\ // TFT display and SD card will share the hardware SPI interface.\\ // Hardware SPI pins are specific to the Arduino board type and\\ // cannot be remapped to alternate pins. For Arduino Uno,\\ // Duemilanove, etc., pin 11 = MOSI, pin 12 = MISO, pin 13 = SCK.\\ #define TFT_RST 8\\ #define TFT_DC 9\\ #define TFT_CS 10\\ #define SD_CS 4\\ \\ Adafruit_ILI9340 tft = Adafruit_ILI9340(TFT_CS, TFT_DC, TFT_RST);\\ \\ ...","title":"Update 23.05.2016 \u2013 Using the SD card modul"},{"location":"projects/arduino/QVGA-DISPLAY/QVGA-Display2/#qvga-display-22-tft-spi-240320_1","text":"In this tutorial I show you, how you can use the TFT SPI display. First, what is SPI? SPI is the abbreviation for \u201cSerial Peripheral Interface\u201d. For this type of communication, we need the following data ports: MISO = Master In, Slave Out MOSI = Master Out, Slave In SCK = Serial Clock SS = Slave Select Our Arduino has already this port definition: Port 11 = MOSI Port 12 = MISO Port 13 = SCK Port 10 = SS This is the set to communicate via SPI. We need two additional ports for our display: Port 9 = Data / Command selection Port 8 = Reset (Low Level active) So far, so good, but there is one problem: The TFT display works with 3.3 V. Ok, this no problem, our arduino has this voltage. But we need 3.3V at the data ports too! And here works the arduino with 5V. With 5V on ports 10, 11, 12 and 13 the display will be dark, no chance! We solve the problem with a level converter. There are a lot of IC, example the CD4050. I use in this tutorial two breakout boards from sparkfun. Annotations: The LED pin is connected with 3.3V, Vcc too. Some Details: {width=\"4.166666666666667in\" height=\"2.3472222222222223in\"} {width=\"2.8055555555555554in\" height=\"2.361111111111111in\"} {width=\"4.166666666666667in\" height=\"2.3472222222222223in\"} {width=\"4.166666666666667in\" height=\"2.3472222222222223in\"} The code: /***************************************************\\ This is an example sketch for the Adafruit 2.2\" SPI display.\\ This library works with the Adafruit 2.2\" TFT Breakout w/SD card\\ ---- http://www.adafruit.com/products/1480\\ \\ Check out the links above for our tutorials and wiring diagrams\\ These displays use SPI to communicate, 4 or 5 pins are required to\\ interface (RST is optional)\\ Adafruit invests time and resources providing this open source code,\\ please support Adafruit and open-source hardware by purchasing\\ products from Adafruit!\\ \\ Written by Limor Fried/Ladyada for Adafruit Industries.\\ MIT license, all text above must be included in any redistribution\\ ****************************************************/\\ \\ #include \"SPI.h\"\\ #include \"Adafruit_GFX.h\"\\ #include \"Adafruit_ILI9340.h\"\\ \\ #if defined(__SAM3X8E__)\\ #undef __FlashStringHelper::F(string_literal)\\ #define F(string_literal) string_literal\\ #endif\\ \\ // These are the pins used for the UNO\\ // for Due/Mega/Leonardo use the hardware SPI pins (which are different)\\ #define _sclk 13\\ #define _miso 12\\ #define _mosi 11\\ #define _cs 10\\ #define _dc 9\\ #define _rst 8\\ \\ Adafruit_ILI9340 tft = Adafruit_ILI9340(_cs, _dc, _rst);\\ \\ void setup() {\\ tft.begin();\\ \\ tft.setRotation(1);\\ testText();\\ }\\ \\ void loop(void) {\\ \\ }\\ \\ \\ unsigned long testText() {\\ tft.fillScreen(ILI9340_BLACK);\\ tft.setCursor(20, 20);\\ tft.setTextColor(ILI9340_RED); tft.setTextSize(4);\\ tft.println(\"Thank you!\");\\ tft.setCursor(20, 70);\\ tft.setTextColor(ILI9340_YELLOW); tft.setTextSize(2);\\ tft.print(\"Adafruit tft.setTextColor(ILI9340_WHITE);\\ tft.print(\" \");\\ tft.setTextColor(ILI9340_GREEN);\\ tft.println(\"Sparkfun\");\\ tft.setTextColor(ILI9340_WHITE);\\ tft.setTextSize(2);\\ tft.println();\\ tft.println(\"It's crazy! The display \");\\ tft.println(\"works! \");\\ tft.println();\\ tft.print(\"Thank\");\\ tft.setTextColor(ILI9340_YELLOW);\\ tft.println(\"Adafruit\");\\ tft.setTextColor(ILI9340_WHITE);\\ tft.println(\"for the perfect libraries\");\\ tft.print(\" thank you \");\\ tft.setTextColor(ILI9340_GREEN);\\ tft.print(\"Sparkfun tft.setTextColor(ILI9340_WHITE);\\ tft.println(\"for\");\\ tft.println(\"the really simple to use\");\\ tft.println(\"Level Converter! \");\\ }","title":"QVGA Display 2.2 TFT SPI 240\u00d7320"},{"location":"projects/arduino/arduino-project-4x4-keypad-matrix-rotary-encoder/","text":"20140625 4x4 Keypad Matrix Rotary Encoder with switch My final project for the week was to use a 4x4 keypad matrix, and a rotary encoder with switch. {width=\"6.5in\" height=\"3.6527777777777777in\"} The 4x4 16 Key matrix is pretty easy to use, it does take 8 I/O lines, but works well, and the code to make it work is pretty small. A lot of information about it can be found here: https://sites.google.com/site/arduinomega2560projects/home/level-2/4x4-matrix-16-key-membrane I did end up modifying the code slightly, They were using a Mega, but I think the code would have needed to be modified slightly even if they had hooked up a UNO. 1st they used Pin 13 twice (one time to turn on/off the LED, and again they used it to read the keypad, this of course didn\u2019t work). SO I ended up moving the line from pin 13 to pin 5. Next thing it\u2019s not as clear as it could be which pins on the keypad to hook to which pins on the arduino. I am going to use his picture and try to explain it a bit better: {width=\"3.526042213473316in\" height=\"2.78125in\"} 1 2 3 4 5 6 7 8 as you can see there are 8 pins on the keypad. Looking from the left to the right lets # them 1 to 8, (I made the picture bigger, so it looks distorted, and my numbers may or may not line up the way I want, but I tried). I am using an UNO, but from what I can tell this should work on any variation of Arduino. Keypad Pins Arduino Pins 1 9 2 8 3 7 4 6 5 5 (This is my modification) 6 12 7 11 8 10 This setup seems to work with the (modified) sketch and library found on the website. My other modifications were an addition of pinMode(13, OUTPUT); to set the Led, the * and # on the keypad will turn on and off the LED, this seemed to be a needed change with the way the sketch was written. The sketch setups an array with the numbers and letters in the \u201ccorrect\u201d locations, as you push a button it reads the ROWs and COLs and then using the array it outputs the number or letter. /* Keypadtest.pde * * Demonstrate the simplest use of the keypad library. * * The first step is to connect your keypad to the * Arduino using the pin numbers listed below in * rowPins[] and colPins[]. If you want to use different * pins then you can change the numbers below to * match your setup. * */ #include Keypad.h const byte ROWS = 4; // Four rows const byte COLS = 4; // four columns // Define the Keymap char keys[ROWS][COLS] = { {'1','2','3','A'}, {'4','5','6','B'}, {'7','8','9','C'}, {'*','0','#','D'} }; // Connect keypad ROW0, ROW1, ROW2 and ROW3 to these Arduino pins. byte rowPins[ROWS] = { 9, 8, 7, 6 }; // Connect keypad COL0, COL1 and COL2 to these Arduino pins. byte colPins[COLS] = { 5, 12, 11, 10 }; // Create the Keypad Keypad kpd = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS ); #define ledpin 13 void setup() { // digitalWrite(ledpin, HIGH); pinMode(13, OUTPUT); Serial.begin(9600); } void loop() { char key = kpd.getKey(); if(key) // Check for a valid key. { switch (key) { case '*': digitalWrite(13, LOW); break; case '#': digitalWrite(13, HIGH); break; default: Serial.println(key); } } } Above is my modified code. The Rotary switch is something a little different, from this website, http://bildr.org/2012/08/rotary-encoder-arduino/ it\u2019s output this a 2 digit binary code, that will go 00, 01, 10, 11, so if you are rotating the switch and starting at 01 you can either have a 00 or 11 depending on direction of the switch. so by adding the previous encoded value to the beginning of the current encoded value we get 1 of 8 possible numbers (0001, 0010, 0100, 0111, 1000, 1011, 1110, 1101) 1101, 0100, 0010, 1011 all mean clockwise movement, 1110, 0111, 0001, 1000 are all counter-clockwise. Easy enough, now we just need to read the switches, The sketch uses interrupts to handle this, and it seems to a good way to handle it. While the website, explained how these worked pretty well, it didn\u2019t have hook up instructions for the encoder Jim got, it took a little trail and error, but since are only 5 pins, it wasn\u2019t that hard to figure out. {width=\"2.4722222222222223in\" height=\"1.9861111111111112in\"} As you can see in this picture it\u2019s pins are labeled, 2 of the labels ended up making since: GND - Ground SW - is the Switch (Pin 4 on the Arduino) Rotary Switch Pin Arduino Gnd ground + 2 SW 4 DT CLK 3 The rotary encoder Jim got has a switch, so I used the code for that section. One line of code did need to be changed, In void loop() the if(digitalRead(encoderSwitchPin2).... should just be (encoderSwitchPin)... That was the only error I found in the code. //From bildr article: http://bildr.org/2012/08/rotary-encoder-arduino/ //these pins can not be changed 2/3 are special pins int encoderPin1 = 2; int encoderPin2 = 3; int encoderSwitchPin = 4; //push button switch volatile int lastEncoded = 0; volatile long encoderValue = 0; long lastencoderValue = 0; int lastMSB = 0; int lastLSB = 0; void setup() { Serial.begin (9600); pinMode(encoderPin1, INPUT); pinMode(encoderPin2, INPUT); pinMode(encoderSwitchPin, INPUT); digitalWrite(encoderPin1, HIGH); //turn pullup resistor on digitalWrite(encoderPin2, HIGH); //turn pullup resistor on digitalWrite(encoderSwitchPin, HIGH); //turn pullup resistor on //call updateEncoder() when any high/low changed seen //on interrupt 0 (pin 2), or interrupt 1 (pin 3) attachInterrupt(0, updateEncoder, CHANGE); attachInterrupt(1, updateEncoder, CHANGE); } void loop(){ //Do stuff here if(digitalRead(encoderSwitchPin)){ //button is not being pushed }else{ //button is being pushed } Serial.println(encoderValue); delay(1000); //just here to slow down the output, and show it will work even during a delay } void updateEncoder(){ int MSB = digitalRead(encoderPin1); //MSB = most significant bit int LSB = digitalRead(encoderPin2); //LSB = least significant bit int encoded = (MSB 1) |LSB; //converting the 2 pin value to single number int sum = (lastEncoded 2) | encoded; //adding it to the previous encoded value if(sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) encoderValue ++; if(sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) encoderValue --; lastEncoded = encoded; //store this value for next time } The above code has been modified. My next step was to make both the Keypad the Rotary Encoder work together, I combined the code from both, made a couple of small changes to how the rotary encoder worked, you now can change the rotary switches, but the changes are not displayed until you push the switch button. The keypad will work with out the button being pushed, and the LED on pin 13 will turn on and off with the use of * and # keys. This is what I came up with: /* Keypadtest.pde * * Demonstrate the simplest use of the keypad library. * * The first step is to connect your keypad to the * Arduino using the pin numbers listed below in * rowPins[] and colPins[]. If you want to use different * pins then you can change the numbers below to * match your setup. * */ #include Keypad.h int encoderPin1 = 2; int encoderPin2 = 3; int encoderSwitchPin = 4; //push button switch volatile int lastEncoded = 0; volatile long encoderValue = 0; long lastencoderValue = 0; int lastMSB = 0; int lastLSB = 0; const byte ROWS = 4; // Four rows const byte COLS = 4; // four columns // Define the Keymap char keys[ROWS][COLS] = { {'1','2','3','A'}, {'4','5','6','B'}, {'7','8','9','C'}, {'*','0','#','D'} }; // Connect keypad ROW0, ROW1, ROW2 and ROW3 to these Arduino pins. byte rowPins[ROWS] = { 9, 8, 7, 6 }; // Connect keypad COL0, COL1 and COL2 to these Arduino pins. byte colPins[COLS] = { 5, 12, 11, 10 }; // Create the Keypad Keypad kpd = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS ); #define ledpin 13 void setup() { // digitalWrite(ledpin, HIGH); pinMode(13, OUTPUT); Serial.begin(9600); pinMode(encoderPin1, INPUT); pinMode(encoderPin2, INPUT); pinMode(encoderSwitchPin, INPUT); digitalWrite(encoderPin1, HIGH); //turn pullup resistor on digitalWrite(encoderPin2, HIGH); //turn pullup resistor on digitalWrite(encoderSwitchPin, HIGH); //turn pullup resistor on //call updateEncoder() when any high/low changed seen //on interrupt 0 (pin 2), or interrupt 1 (pin 3) attachInterrupt(0, updateEncoder, CHANGE); attachInterrupt(1, updateEncoder, CHANGE); } void loop() { if(digitalRead(encoderSwitchPin)){ //button is not being pushed }else{ Serial.println(\"Rotary Encoder Button Pushed\"); //button is being pushed Serial.print(\"Rotary Encoder: \"); Serial.println(encoderValue); delay(100); //just here to slow down the output, and show it will work even during a delay } char key = kpd.getKey(); if(key) // Check for a valid key. { switch (key) { case '*': digitalWrite(13, LOW); break; case '#': digitalWrite(13, HIGH); break; default: Serial.println(key); } } } void updateEncoder(){ int MSB = digitalRead(encoderPin1); //MSB = most significant bit int LSB = digitalRead(encoderPin2); //LSB = least significant bit int encoded = (MSB 1) |LSB; //converting the 2 pin value to single number int sum = (lastEncoded 2) | encoded; //adding it to the previous encoded value if(sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) encoderValue ++; if(sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) encoderValue --; lastEncoded = encoded; //store this value for next time } So there you have it, a whole week of Binary and BCD!","title":"4x4 Keypad Matrix"},{"location":"projects/arduino/arduino-project-4x4-keypad-matrix-rotary-encoder/SUMMARY/","text":"Summary Arduino Project: 4x4 Keypad Matrix Rotary Encoder Demo","title":"Summary"},{"location":"projects/arduino/arduino-project-4x4-keypad-matrix-rotary-encoder/SUMMARY/#summary","text":"Arduino Project: 4x4 Keypad Matrix Rotary Encoder Demo","title":"Summary"},{"location":"projects/arduino/arduino-project-arduino-vga-out/","text":"May 6, 2014 Arduino VGA Out, one of the many things I randomly see as I roam the internet. This is kind of a neat project, and it does work, and it was pretty simple to hookup even thou there was an error in the documentation. I do have to say that couple of the sketches on the google code site didn\u2019t work. I\u2019m not sure if they are works in progress or what. That being said, the project did as expected and outputed a display on a VGA monitor. Here is the link to the project, *https://code.google.com/p/arduino-vgaout/ * It seems there hasn\u2019t been an activity on the site since June of 2013, so I don\u2019t know what the current status is. I also had to do a little digging to find what pins on the arduino this uses. And pictures of someones completed setup can be found here (It looks like he was using a 2011 version): https://plus.google.com/photos/117534855759200010314/albums/5687433885778031105?banner=pwa In the schematic, he also points out that PIN 9 shouldn\u2019t be hooked up on the VGA connector, PIN 5 and PIN 10 should be ground, there was an error in the original schematics that are still on the google code site. Quite a bit more information can be found on the Arduino forums: http://forum.arduino.cc/index.php?PHPSESSID=dfdb14903eb27c46f88347c097effb39 topic=76020.msg1123866#msg1123866 I was going to chop up an old VGA cable to make this when I found that MCM electronics have this (and it\u2019s only \\$4.50) and since I wanted to be sure I got the right resistors for this project I was already going to make an order, seemed like a no brainer: http://www.mcmelectronics.com/product/83-12821 {width=\"4.6875in\" height=\"1.4375in\"} It probably ending up saving some build time, thou how much would be debatable. So here are a couple of pictures of my setup: {width=\"6.5in\" height=\"4.875in\"} {width=\"6.5in\" height=\"4.875in\"} {width=\"6.5in\" height=\"4.875in\"} {width=\"6.5in\" height=\"4.875in\"} {width=\"6.5in\" height=\"4.875in\"} So as you can see, it\u2019s takes up a lot of pins, all of the analog pins, and 2 of the digital pins. The digital pins are used for HSYNC and VSYNC, the analog pins are used for RGB, each color channel takes two pins, and each have a 1K and 470ohm resistor wired up. And yeah, I went a little nuts with the size of the resistors, I wasn\u2019t really thinking about it at the time I ordered them, oh well, they were cheap something like \\$0.70 for 10 of them. I probably need to trim up the resistors a little, but what the heck it works, and it will be one of those projects that I can say I did it, and now it\u2019s in a box\u2026 :-)","title":"Arduino VGA"},{"location":"projects/arduino/arduino-project-arduino-vga-out/SUMMARY/","text":"Summary Arduino Project: Arduino VGA Out","title":"Summary"},{"location":"projects/arduino/arduino-project-arduino-vga-out/SUMMARY/#summary","text":"Arduino Project: Arduino VGA Out","title":"Summary"},{"location":"projects/arduino/arduino-project-bmp180-digital-barometric-pressur/","text":"Arduino Project: BMP180 Digital Barometric Pressure Sensor {#arduino-project-bmp180-digital-barometric-pressure-sensor} May 8, 2014 BMP180 Digital Barometric Pressure Sensor Once again the folks over at Sparkfun out do the folks at Ada Fruit - Starting to worry about the people at Ada Fruit they are slipping alittle. LOL There is more information about this sensor then I could possibly give you, they even go into what pascal are (Pa, Basicly it\u2019s a measure of force per unit area, defined as one newton per square metre - You get all that...yeah, see Sparkfun explains it beter) https://learn.sparkfun.com/tutorials/bmp180-barometric-pressure-sensor-hookup-/under-pressure The device that Sparkfun has is different, from what the club has, but it\u2019s almost the same, it\u2019s close enough that their tutorial works really well. The sensor on it is the same sensor that on the clubs BMP180. The device is an I2C device, it is very easy to hook up. SDA, SCL (Data and Clock), 3.3v and ground, that is it. On the UNO it\u2019s SDA to A4, SCL to A5 The other VCC connector on the board is for voltages lower then 3.3v Ada Fruit does have plenty of information about this sensor as well, and their sensor looks more like what the club has. http://www.adafruit.com/products/1603 and https://learn.adafruit.com/bmp085 The problem I had with Adafruits was the sketch didn\u2019t seem to give as much or as good information as what Sparkfun did. Adafruits also requires one extra library which wasn\u2019t included in the download package provided, that caused an issue for about 2 mins until I realized it called a different library. Not sure why they did that, but after I got the 2nd library it did work, just didn\u2019t seem as good as Sparkfun. The outputs from the sensor, are Pressure, Temperature, and Altitude (Altitude can be both above sea-level and as a relative from it\u2019s starting point), this is a very cool sensor, and with the addition of the humitdy sensor and maybe a wind speed sensor, this could be a complete low cost weather station.","title":"BMP180 Sensor"},{"location":"projects/arduino/arduino-project-bmp180-digital-barometric-pressur/#arduino-project-bmp180-digital-barometric-pressure-sensor-arduino-project-bmp180-digital-barometric-pressure-sensor","text":"May 8, 2014 BMP180 Digital Barometric Pressure Sensor Once again the folks over at Sparkfun out do the folks at Ada Fruit - Starting to worry about the people at Ada Fruit they are slipping alittle. LOL There is more information about this sensor then I could possibly give you, they even go into what pascal are (Pa, Basicly it\u2019s a measure of force per unit area, defined as one newton per square metre - You get all that...yeah, see Sparkfun explains it beter) https://learn.sparkfun.com/tutorials/bmp180-barometric-pressure-sensor-hookup-/under-pressure The device that Sparkfun has is different, from what the club has, but it\u2019s almost the same, it\u2019s close enough that their tutorial works really well. The sensor on it is the same sensor that on the clubs BMP180. The device is an I2C device, it is very easy to hook up. SDA, SCL (Data and Clock), 3.3v and ground, that is it. On the UNO it\u2019s SDA to A4, SCL to A5 The other VCC connector on the board is for voltages lower then 3.3v Ada Fruit does have plenty of information about this sensor as well, and their sensor looks more like what the club has. http://www.adafruit.com/products/1603 and https://learn.adafruit.com/bmp085 The problem I had with Adafruits was the sketch didn\u2019t seem to give as much or as good information as what Sparkfun did. Adafruits also requires one extra library which wasn\u2019t included in the download package provided, that caused an issue for about 2 mins until I realized it called a different library. Not sure why they did that, but after I got the 2nd library it did work, just didn\u2019t seem as good as Sparkfun. The outputs from the sensor, are Pressure, Temperature, and Altitude (Altitude can be both above sea-level and as a relative from it\u2019s starting point), this is a very cool sensor, and with the addition of the humitdy sensor and maybe a wind speed sensor, this could be a complete low cost weather station.","title":"Arduino Project: BMP180 Digital Barometric Pressure Sensor {#arduino-project-bmp180-digital-barometric-pressure-sensor}"},{"location":"projects/arduino/arduino-project-bmp180-digital-barometric-pressur/SUMMARY/","text":"Summary Arduino Project: BMP180 Digital Barometric Pressure Sensor","title":"Summary"},{"location":"projects/arduino/arduino-project-bmp180-digital-barometric-pressur/SUMMARY/#summary","text":"Arduino Project: BMP180 Digital Barometric Pressure Sensor","title":"Summary"},{"location":"projects/arduino/arduino-project-fs1000a-433mhz-transmitters/","text":"Arduino Project: FS1000a 433Mhz Transmitters {#arduino-project-fs1000a-433mhz-transmitters} 02/27/2014 FS1000a 315mhz RX/TX pair 1. Project Reference Number / Title: 20140227 FS1000a 315mhz RX/TX pair I have a corner! :-) Feb 27, 2014 Initial tests of FS1000a 315mhz RX/TX pair: This document seems to be relevant to these transmit and receivers. http://ardumarket.com/en/transmisors/transmisor-rf-fs1000a-330-443mhz-arduino-pic-id19.html You also need the library from here: http://www.open.com.au/mikem/arduino/VirtualWire/VirtualWire-1.14.zip The library contains the sketches found on the page, with the exception that they don\u2019t set the RX or TX pin vw_set_tx_pin(3); vw_set_rx_pin(3); Also the receiver sketch seems to be a bit different - the example in the library prints out HEX codes. for the most part these are very simple to use - one Arduino is setup to send information, the other is setup to receive that information - and do something with it. Modulation type is ASK - or Amplitude Shift Keying - This type of modulation is like AM radio for data So it has some of the same weaknesses and strengths of AM. For more information see: http://en.wikipedia.org/wiki/Amplitude-shift_keying Finding a distance for them was a little harder, but as near as I can figure 40 meters or 131 feet indoors, 100 meters or 328 feet in the open. I tested at about 60 feet inside and it worked without a problem. Range seems to be dependant on how much voltage you put on the transmitter - from what I found the TX board can handle between 3 to 12v - with 5v being normal - I don\u2019t know if I trust 12v in this figure, as I only found a couple of sites that said it, and the TX boards were not the same board we have. Better to be safe then sorry and go with 5v. Like finding a range for these, finding a speed wasn\u2019t as easy as it should be - most sites say between 4800 and 9600 baud work well. A couple of sites say they can go faster, but faster may cause unreliable data (or no data at all). One site even said that speed was dependant on distance (I don\u2019t think that is right given the type of modulation this uses, but maybe). The sites that have 480 to 9600 baud listed say that it\u2019s a reliable low speed for general use such as reading sensor data. Impressions of this it would make a good low power data sender for a remote sensor, only takes up one pin, and is really simple to use. Other information (But not sure if the RX/TX board are the same as what we have): https://www.sparkfun.com/datasheets/RF/KLP_Walkthrough.pdf http://www.seeedstudio.com/wiki/index.php?title=315Mhz_RF_link_kit (Pretty sure this is our board) http://www.seeedstudio.com/depot/315mhz-rf-link-kit-p-76.html Update: Feb 28 - Maybe this is not as easy as I first thought, the library seems to have some quirky issues - 1st it seems to want to send a \u201cconst char *variable\u201d, I\u2019m not really sure what that is. (Found this out by trying to send a tempature variable floating point to it) and the 2nd thing I found is that it doesn\u2019t work on some of the lesser know Arduino like boards. (have been trying for the past 2 hours to get the library to work with my Squarewear, wearable temperature sensor, only to find it really doesn\u2019t like that hardware at all) Admittedly the squarewear is not an Arduino, it is closely related to one. Plans this weekend, try some alternative methods of getting these RF devices to work.","title":"FS1000a 433mhz Transmitters"},{"location":"projects/arduino/arduino-project-fs1000a-433mhz-transmitters/#arduino-project-fs1000a-433mhz-transmitters-arduino-project-fs1000a-433mhz-transmitters","text":"02/27/2014 FS1000a 315mhz RX/TX pair 1. Project Reference Number / Title: 20140227 FS1000a 315mhz RX/TX pair I have a corner! :-) Feb 27, 2014 Initial tests of FS1000a 315mhz RX/TX pair: This document seems to be relevant to these transmit and receivers. http://ardumarket.com/en/transmisors/transmisor-rf-fs1000a-330-443mhz-arduino-pic-id19.html You also need the library from here: http://www.open.com.au/mikem/arduino/VirtualWire/VirtualWire-1.14.zip The library contains the sketches found on the page, with the exception that they don\u2019t set the RX or TX pin vw_set_tx_pin(3); vw_set_rx_pin(3); Also the receiver sketch seems to be a bit different - the example in the library prints out HEX codes. for the most part these are very simple to use - one Arduino is setup to send information, the other is setup to receive that information - and do something with it. Modulation type is ASK - or Amplitude Shift Keying - This type of modulation is like AM radio for data So it has some of the same weaknesses and strengths of AM. For more information see: http://en.wikipedia.org/wiki/Amplitude-shift_keying Finding a distance for them was a little harder, but as near as I can figure 40 meters or 131 feet indoors, 100 meters or 328 feet in the open. I tested at about 60 feet inside and it worked without a problem. Range seems to be dependant on how much voltage you put on the transmitter - from what I found the TX board can handle between 3 to 12v - with 5v being normal - I don\u2019t know if I trust 12v in this figure, as I only found a couple of sites that said it, and the TX boards were not the same board we have. Better to be safe then sorry and go with 5v. Like finding a range for these, finding a speed wasn\u2019t as easy as it should be - most sites say between 4800 and 9600 baud work well. A couple of sites say they can go faster, but faster may cause unreliable data (or no data at all). One site even said that speed was dependant on distance (I don\u2019t think that is right given the type of modulation this uses, but maybe). The sites that have 480 to 9600 baud listed say that it\u2019s a reliable low speed for general use such as reading sensor data. Impressions of this it would make a good low power data sender for a remote sensor, only takes up one pin, and is really simple to use. Other information (But not sure if the RX/TX board are the same as what we have): https://www.sparkfun.com/datasheets/RF/KLP_Walkthrough.pdf http://www.seeedstudio.com/wiki/index.php?title=315Mhz_RF_link_kit (Pretty sure this is our board) http://www.seeedstudio.com/depot/315mhz-rf-link-kit-p-76.html Update: Feb 28 - Maybe this is not as easy as I first thought, the library seems to have some quirky issues - 1st it seems to want to send a \u201cconst char *variable\u201d, I\u2019m not really sure what that is. (Found this out by trying to send a tempature variable floating point to it) and the 2nd thing I found is that it doesn\u2019t work on some of the lesser know Arduino like boards. (have been trying for the past 2 hours to get the library to work with my Squarewear, wearable temperature sensor, only to find it really doesn\u2019t like that hardware at all) Admittedly the squarewear is not an Arduino, it is closely related to one. Plans this weekend, try some alternative methods of getting these RF devices to work.","title":"Arduino Project: FS1000a 433Mhz Transmitters {#arduino-project-fs1000a-433mhz-transmitters}"},{"location":"projects/arduino/arduino-project-fs1000a-433mhz-transmitters/SUMMARY/","text":"Summary Arduino Project: FS1000a 433Mhz Transmitters Revisited 3-22-2014","title":"Summary"},{"location":"projects/arduino/arduino-project-fs1000a-433mhz-transmitters/SUMMARY/#summary","text":"Arduino Project: FS1000a 433Mhz Transmitters Revisited 3-22-2014","title":"Summary"},{"location":"projects/arduino/arduino-project-fs1000a-433mhz-transmitters/revisited-3-22-2014/","text":"3/22/2014 Cheap FS100a 433 Mhz Transmitters Revisited 1. Project Reference Number / Title: 20140322 Cheap FS100a 433 Mhz Transmitters Revisited Mar 22, 2014 CHEAP FS1000a 433mhz transmitters revisited, Hooked up two transmitters and one receiver. One Arduino was set to transmit \u201chello #1\u201d, One Arduino was set to transmit \u201chello #2\u201d, and one Arduino set to receive, Seems to work fine! here\u2019s a video: http://youtu.be/SmGXH3Rw0wo So I was giving it the worse case, and the best chance to fail, and it seemed to work. By that I mean, both transmitters were right next to each other, the receiver was only a less the a foot away, and I put antennas on everything. I don\u2019t know for sure, but I had suspected this would work. I think it\u2019s because of the modulation type, but I\u2019m not sure about that either (not 100% sure). A lot of digital modulation types have built in error checking. These are cheap, and a cheap way to send low speed data around.","title":"Revisited 3 22 2014"},{"location":"projects/arduino/arduino-project-hc-05-bluetooth-device/","text":"4/1/2014 HC-05 Bluetooth device 1. Project Reference Number / Title: 20140401 HC-05 Bluetooth device Apr 1, 2014 HC-05 Bluetooth device At the 1st meeting I attended Jim gave me a blank holder for the HC-05 Bluetooth device, I was able to solder a HC-05 to it today, and it worked well. The HC-05 bluetooth is a surface mount style device, and that can be a little scary for people. They are cheap enough, and the blank is cheap enough I figured if I messed it up I wasn\u2019t out much. You aren\u2019t saving yourself much by soldering your own to the blank (I think .30 or .35 cents, spend the extra money and get one already mounted). I used the \u201cdrag\u201d method of soldier, which is only one method for doing surface mounts, but I\u2019ve got to say, it was easy to do, and it works, and it works well. You\u2019ll see in a couple of the pictures below that I didn\u2019t get every pin, on this it doesn\u2019t matter, I got the pins that are connected and as I said the bluetooth does work well. {width=\"6.5in\" height=\"8.666666666666666in\"} {width=\"6.5in\" height=\"8.666666666666666in\"} {width=\"6.5in\" height=\"8.666666666666666in\"}","title":"HC-05 Bluetooth"},{"location":"projects/arduino/arduino-project-hc-05-bluetooth-device/SUMMARY/","text":"Summary Arduino Project: HC-05 Bluetooth Device","title":"Summary"},{"location":"projects/arduino/arduino-project-hc-05-bluetooth-device/SUMMARY/#summary","text":"Arduino Project: HC-05 Bluetooth Device","title":"Summary"},{"location":"projects/arduino/arduino-project-magnetic-reed-switch-water-sensor/","text":"{width=\"2.219141513560805in\" height=\"1.6510422134733158in\"} Specification 1, The use of imported normally open dry Reed tube 2, Comparator output signal clean wave well, driving ability, than 15mA. 3, Rated voltage and 3.3V-5V 4, Outputs: digital switching output (0 and 1) 5, Abolt-hole, is easy to install 6, Small Board PCB dimensions: 3.2cm x 1.4cm 7, Using wide LM393 voltage comparator Description: 1. The Reed switch and magnet fit is required, at the time of induction to a certain degree of magnetic, on-State, the module output low level, when there is no magnetic force, a disconnected state, output high, Reed switch and magnets sensing distance of the 1.5cm beyond insensitive or will not trigger the phenomenon; 2. DO the module output can be directly connected to the microcontroller I/O ports, Reed can be detected by single-chip microcomputer trigger status; 3. Modules DO the output connected to the relay IN-formed power Reed switch, direct control of high voltage. May 8, 2014 Magnetic Reed Switch Water Sensor - These two devices work the same way, they are (for the most part) switches, what I found interesting and was not expecting is that both are active low devices, What that means, is they both pass the 3.3v or 5v until the either a magnetic is put to the reed switch, or the contacts on the water sensor are connected, then they go low. There are probably a dozen of ways to use these, I ended up hooking them to an analog in and reading the voltages from there output lines, and then I turned on the LED connected to pin 13. http://arduino.cc/en/Tutorial/ReadAnalogVoltage My slightly modified sketch: /* ReadAnalogVoltage Reads an analog input on pin 0, converts it to voltage, and prints the result to the serial monitor. Attach the center pin of a potentiometer to pin A0, and the outside pins to +5V and ground. This example code is in the public domain. */ // the setup routine runs once when you press reset: void setup() { // initialize serial communication at 9600 bits per second: Serial.begin(9600); pinMode(13, OUTPUT); } // the loop routine runs over and over again forever: void loop() { // read the input on analog pin 0: int sensorValue = analogRead(A0); // Convert the analog reading (which goes from 0 - 1023) to a voltage (0 - 5V): float voltage = sensorValue * (5.0 / 1023.0); // print out the value you read: Serial.println(voltage); if (voltage 1) {digitalWrite(13, LOW);} if (voltage 1) {digitalWrite(13, HIGH);} } I never saw these ever make it clear to zero volts, but I don\u2019t know what kind of resolution the A2D converter has, and it doesn\u2019t really matter. I made a choice that anything under 1 volt was going to turn something on, and any thing above 1 volt was going to turn that off. Like I said there are probably a dozen of different ways to use these, that just seemed to be the quickest way. {width=\"6.5in\" height=\"8.666666666666666in\"}","title":"Magnetic Reed Switch Water Sensor"},{"location":"projects/arduino/arduino-project-magnetic-reed-switch-water-sensor/SUMMARY/","text":"Summary Arduino Project: Magnetic Reed Switch Water Sensor","title":"Summary"},{"location":"projects/arduino/arduino-project-magnetic-reed-switch-water-sensor/SUMMARY/#summary","text":"Arduino Project: Magnetic Reed Switch Water Sensor","title":"Summary"},{"location":"projects/arduino/arduino-project-mifare-rfid-reader-rc522/","text":"3/8/2014 Arduino Uno bootloader and the Mifare RFID reader/writer RC522 1. Project Reference Number / Title: 20140308 Arduino Uno bootloader and the Mifare RFID reader/writer RC522 Mar 8, 2014 RFID - what is it? How does it work? what can you do with it? and how to use RFID with an Arduino. RFID is a wireless non-contact use of electromagnetic fields to transfer data. With the uses of Identifying and tracking inventory, or other objects. There are several standards in use with RFID, too many to go into here. There is also active RFID and Passive RFID, passive is probably the most common. Active RFID has a greater range. RFID tags can contain information and be both read from and written too (Depending on the tag, and which version of tag you have.) This is not a new technology, having origins dating back to 1945. A \u201cmodern\u201d passive radio transponder with memory was 1st patented in 1973, this would be the great grand father of modern RFID. RFID works in several different frequencies, with probably the most common (at least consumer level) being 13.56 MHZ (HF) using the MIFARE ISO/IEC 14443 standard, but other frequencies include 120 -150 kHZ (LF) which is currently unregulated, 433 Mhz (UHF) Short Range Devices also used for defence and active tags, 865 - 868 Mhz in Europe 902-928 Mhz in North America and using various standard 2.4 to 5.8 Ghz - this is also various standards, and active RFID 3.1 to 10 Ghz requires semi-active or active tags and appears to not be fully implemented at this time. A \u201cnew\u201d type of RFID is currently the defacto standard, and is being wildly used in cell phones and tablets - Near Field Communication (NFC) - NFC is ISO/IEC 14443. NFC tags generally speaking can hold more information then there early RFID counterparts. You can also find NFC/RFID in a lot of credit cards, any place you see a card reader that you just have to tag is using RFID. The Middletown Library and I would think the West Chester branch use RFID tags in their books, they have for years but I\u2019m not sure why they do it. How does RFID work? It\u2019s really pretty simple (as easy as 123) - Remember in school you probably learned about Magnetic lines of force (magnetic poles North and South), probably you also remember that when a current is passed through a coil you can create a electro-magnet. And when you put that near another coil of wire you INDUCE a voltage on the 2nd coil? Well that is how this works, the RFID reader has a coil, that is powered on making a little electromagnet probably not strong enough to pickup any thing, but still it\u2019s there. The tags are also coils, and by passing the tag in front of the reader you INDUCE a voltage. The tags also have a chip in them that contains a tiny transceiver, and an ID code (each tag has a unique code, thou you can clone tags if needed, not going into how to do that beyond the scope). Depending on the tag it may contain other information as well. The reader also has a transceiver in it and receives information when the tag transmits. In passive system the tag needs to be pretty close to the reader, In an active system the tag can be a few feet to a few hundred feet away from the reader. Which brings us to what can you do with RFID? Alot really, one of the big things is tracking, and managing inventory, Everything in the store has an RFID tag, you pickup an item and walk out the store, the active scanners at the door - buzz - the system knows you didn\u2019t pay for that item because it didn\u2019t get scanned at the checkout. (OK, that\u2019s just one example) I think this is probably why the libraries have RFID tags in the books, but I don\u2019t know why they don\u2019t use them for check ins/check outs (They also have bar codes on the books for check in/check out) Any way, off on a little tangent there. Already said above, visa/master card/amex all have started to put RFID chips in credit cards for Fast Pay (NFC) BTW you can use your NFC enabled cell phones for fast pay if you have your account attached to your phone. The auto industry has been using RFID tags for years, in both the manufacture and parts replacement in cars. - A new car is sitting on the line waiting to have a door, using an active tag the robots can find out what is missing, what color and just about anything else about the car it\u2019s making - updating the tag, and moving down to the next robot in the line. Parts bins are marked with RFID tags so the robots can find them when they are needed. Other uses, Tagging animals with owner information, toll collection (active readers mostly). and countless other uses. Using RFID with an Arduino: There are many different RFID readers available for the Arduino, they all seem to work the more or less the same. (Some are capable of writing to a tag others are not) Mine is a cheap sub-\\$5 reader that came with two tags, a Mifare 522 which is one of the most common out there. it uses a SPI interface. Unfortunately, there is not a whole lot of information out about the model I have, in fact I only found 2 website, both were virtually the same. https://sites.google.com/site/arduinomega2560projects/home/level-1/arduino-rfid-rc522 and http://www.grantgibson.co.uk/2012/04/how-to-get-started-with-the-mifare-mf522-an-and-arduino/ There wasn\u2019t a library to use, and I am still trying to make heads and tails out of the code they provided, but I think you send command to the reader in hex and wait for a reply. From what I can tell thou, you pass a tag in front of the reader, and the arduino will send (serial console) the 5 ID strings contained in the tag. If the right tag is used - It will say \u201cHello Dave\u201d or \u201cHello Grant\u201d. One of the sites is also putting a \u201c2\u201d in front of the 1st set of IDs (not sure why but I removed that front the code as it just seemed strange to be there) Both websites also made a mistake about the pin map They have a pin called SS mapped to Arduino pin 10, my board doesn\u2019t have a pin marked SS but the pin marked SAD seems to work. Jeremy is using a RFID reader that is based off a zigbee or works in a zigbee socket, also his has a \u201creal\u201d coil of wire, and his code is very different as well. So each reader must be different. Here is the link to his setup: http://www.jeremyblum.com/2011/07/08/tutorial-12-for-arduino-rfid-card-reading/ I think by Thursday I will have a demo working that will turn on and off LEDs using various tags I have. Final thoughts: Most RFID systems need to keep up with the tag ID numbers which would be contained within a database, however it is possible to have simple system with just a few tags (or one that doesn\u2019t need updated often) that doesn\u2019t require a database. And this is the type an Arduino is great for, simple RFID control of lighting or opening a door. Some pictures of my setup: {width=\"6.5in\" height=\"4.875in\"} {width=\"6.5in\" height=\"8.666666666666666in\"} {width=\"6.5in\" height=\"4.875in\"} {width=\"6.5in\" height=\"4.875in\"} {width=\"6.5in\" height=\"8.666666666666666in\"} {width=\"6.5in\" height=\"8.666666666666666in\"}","title":"Mifare RFID reader RC522"},{"location":"projects/arduino/arduino-project-mifare-rfid-reader-rc522/SUMMARY/","text":"Summary Arduino Project: Mifare RFID reader RC522","title":"Summary"},{"location":"projects/arduino/arduino-project-mifare-rfid-reader-rc522/SUMMARY/#summary","text":"Arduino Project: Mifare RFID reader RC522","title":"Summary"},{"location":"projects/arduino/arduino-project-nokia-5110-lcd/","text":"Apr 20, 2014 Nokia 5110 LCD with Arduino. Not going to go too much into how this works, mainly because I\u2019m not 100% sure myself. Also not going to post a lot of code, because this device is very well documented. I will give links to Sparkfun and Adafruit, both with contain a lot of information about the LCD. Sparkfun, only uses the SPI Library, which is interesting, you will see in the code alot of HEX, which is how the display gets its commands. From what I can tell, the screen is not true SPI - but it close enough that the SPI library doesn\u2019t have a problem with it. I think Sparkfun contains more information, or at least better information about this device. That being said, Adafruit developed a ready to use library - and from what I can tell they are making the display work a little different then how Sparkfun did it. The library does make it a little nicer as well, since you can just call what you need, there is still some HEX to do graphics, but it looks like that is if you are doing a custom graphic, standard things like lines and circles, squares are all handled by the library. There demo program is better as well, shows off more of what the display can do. So to sum up - Sparkfun has better information, but Adafruit has a better library and program. Here\u2019s some links: https://www.sparkfun.com/products/10168 https://learn.sparkfun.com/tutorials/graphic-lcd-hookup-guide/introduction https://github.com/adafruit/Adafruit-PCD8544-Nokia-5110-LCD-library Stolen (don\u2019t say that too loud, but I think we are aloud to use them) from the Sparkfun site: just for Frank http://www.partition-resize.com/resize-raid-partition/","title":"Nokia 5110 LCD"},{"location":"projects/arduino/arduino-project-nokia-5110-lcd/SUMMARY/","text":"Summary Arduino Project: Nokia 5110 LCD","title":"Summary"},{"location":"projects/arduino/arduino-project-nokia-5110-lcd/SUMMARY/#summary","text":"Arduino Project: Nokia 5110 LCD","title":"Summary"},{"location":"projects/arduino/arduino-project-pin-control-over-ethernet-oled-de/","text":"This weeks demo is for Pin Control over ethernet and as a bonus a small OLED Demo These sketchs use a \u201creal\u201d Arduino ethernet shield. And by that I mean one using a: W5100 Ethernet Controller http://arduino.cc/en/Main/ArduinoEthernetShield http://www.ebay.com/itm/UNO-ATMega328-1280-MEGA2560-Ethernet-Shield-W5100-Arduino-Main-Board-M3Y2-/171438857683?pt=LH_DefaultDomain_0 hash=item27ea8d5dd3 Like everything else the price of these is dropping, but if you do buy a cheap one off eBay make sure it has the W5100 there are others out that dont and they dont work the same way. I think I paid $10 or $11 for mine a year ago, now you can find them for $8 bucks or less. Pin control over ethernet is based on this project: http://bildr.org/2011/06/arduino-ethernet-pin-control/ alternative website: https://web.archive.org/web/20140702134232/http://bildr.org/2011/06/arduino-ethernet-pin-control/ The above project sets up a webserver running on the Arduino. The address of the server is displayed on a serial terminal. (192.168.1.xxx) It is setup get a DHCP from your router. Using the IP address you can set pins 2 to 9 to flash a LED. http://192.168.1.45/?2 will flash the LED on PIN 2. http://192.168.1.45/?23 will flash the LEDs on PIN2 and PIN 3 in order. So some interesting patterns can be made from this: http://192.168.1.45/?2345678998765432 will create something like K.I.T.T.s scanner. //ARDUINO 1.0+ ONLY //ARDUINO 1.0+ ONLY #include Ethernet.h #include SPI.h boolean reading = false; //////////////////////////////////////////////////////////////////////// //CONFIGURE //////////////////////////////////////////////////////////////////////// //byte ip[] = { 192, 168, 0, 199 }; //Manual setup only //byte gateway[] = { 192, 168, 0, 1 }; //Manual setup only //byte subnet[] = { 255, 255, 255, 0 }; //Manual setup only // if need to change the MAC address (Very Rare) byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED }; EthernetServer server = EthernetServer(80); //port 80 //////////////////////////////////////////////////////////////////////// void setup(){ Serial.begin(9600); //Pins 10,11,12 13 are used by the ethernet shield pinMode(2, OUTPUT); pinMode(3, OUTPUT); pinMode(4, OUTPUT); pinMode(5, OUTPUT); pinMode(6, OUTPUT); pinMode(7, OUTPUT); pinMode(8, OUTPUT); pinMode(9, OUTPUT); Ethernet.begin(mac); //Ethernet.begin(mac, ip, gateway, subnet); //for manual setup server.begin(); Serial.println(Ethernet.localIP()); } void loop(){ // listen for incoming clients, and process qequest. checkForClient(); } void checkForClient(){ EthernetClient client = server.available(); if (client) { // an http request ends with a blank line boolean currentLineIsBlank = true; boolean sentHeader = false; while (client.connected()) { if (client.available()) { if(!sentHeader){ // send a standard http response header client.println(\"HTTP/1.1 200 OK\"); client.println(\"Content-Type: text/html\"); client.println(); sentHeader = true; } char c = client.read(); if(reading c == ' ') reading = false; if(c == '?') reading = true; //found the ?, begin reading the info if(reading){ Serial.print(c); switch (c) { case '2': //add code here to trigger on 2 triggerPin(2, client); break; case '3': //add code here to trigger on 3 triggerPin(3, client); break; case '4': //add code here to trigger on 4 triggerPin(4, client); break; case '5': //add code here to trigger on 5 triggerPin(5, client); break; case '6': //add code here to trigger on 6 triggerPin(6, client); break; case '7': //add code here to trigger on 7 triggerPin(7, client); break; case '8': //add code here to trigger on 8 triggerPin(8, client); break; case '9': //add code here to trigger on 9 triggerPin(9, client); break; } } if (c == '\\n' currentLineIsBlank) break; if (c == '\\n') { currentLineIsBlank = true; }else if (c != '\\r') { currentLineIsBlank = false; } } } delay(1); // give the web browser time to receive the data client.stop(); // close the connection: } } void triggerPin(int pin, EthernetClient client){ //blink a pin - Client needed just for HTML output purposes. client.print(\"Turning on pin \"); client.println(pin); client.print(\" br \"); digitalWrite(pin, HIGH); delay(25); digitalWrite(pin, LOW); delay(25); } This is interesting, but really not useful. So I modified the sketch to toggle the pins on or off (from one state to another) - my code can be found here: https://codebender.cc/sketch:60959 This was done using a array of zeros or ones - the array represents the LED states, the position inside the array is the PIN number, in otherwords: boolean ledPins[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; \\^ This is PIN 0 the next zero is PIN 1, the next PIN 2, next PIN 3 etc. So the question is why do we have 10 pins listed when there are only 8 LEDs - the simple answer is I needed a place holder of two digits - (with this example, pins 0 and 1 are left open so as to easily reprogram the Arduino) So the LEDs are hooked to PINs 2 to 9. Pin 10, 11, 12, 13 are used by the ethernet shield. The main part of the sketch I modified is below: void triggerPin(int pin, EthernetClient client){ //blink a pin - Client needed just for HTML output purposes. client.print(\"Toggling pin: \"); client.println(pin); client.print(\" br \"); digitalWrite(pin, !ledPins[pin]); ledPins[pin]=!ledPins[pin]; } The sketch gives output to both the serial monitor, and the website. I liked how this worked, and thought this is a lot more useful if you need to remotely turn something on or off. But I asked myself what if you want to read and display a vaule on the website: So I modified the sketch one more time: https://codebender.cc/sketch:60961 This time I wanted to read a Analog joystick: and I added this code: case '0': while(analogRead(0) 522) { client.print(\"Joystick 0: \"); client.print(analogRead(0)); client.print(\" br \"); } break; case '1': while(analogRead(1) 522) { client.print(\"Joystick 1: \"); client.print(analogRead(1)); client.print(\" br \"); } break; To activate this part of the code you need to send the webserver a zero (0) or a one (1) This part of the code will stay active as long as the joystick vaule is above 522 (522 is the center position) Which also mean that I am only reading two directions from Joystick - either down or left (but not up or right) It\u2019s not the best way to make this work, and this was more of a test to make it work, then it was to make it work correctly! :-) So I looked at the example library that is included with the Arduino IDE: That sketch can be found here: https://codebender.cc/sketch:61050 Which induces a couple of new things to the webserver - It also sets up a static IP which for a IOT device (or a control over IP device) might make more since to do. Next thing it does is show how to have the page served auto refresh this can be a very useful thing to know. It also will read all 6 analog ports and display the vaule on the web page. For the demo I am only using analog Pin 0 and Pin 1 (So I modified the sketch to only read what I am using) Again this was interesting, and displayed a good example but I wanted to use a website to turn pins on or off - or display vaules and it lead me to this website: http://randomnerdtutorials.com/arduino-webserver-with-an-arduino-ethernet-shield/ This is a really good example of control and was close to what I wanted so Of course I modified the sketch for what I really wanted to https://codebender.cc/sketch:61051 /* Created by Rui Santos Visit: http://randomnerdtutorials.com for more arduino projects Arduino with Ethernet Shield */ #include SPI.h #include Ethernet.h byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED }; //physical mac address byte ip[] = { 192, 168, 1, 178 }; // ip in lan (that's what you need to use in your browser. (\"192.168.1.178\") byte gateway[] = { 192, 168, 1, 1 }; // internet access via router byte subnet[] = { 255, 255, 255, 0 }; //subnet mask EthernetServer server(80); //server port String readString; void setup() { // Open serial communications and wait for port to open: Serial.begin(9600); while (!Serial) { ; // wait for serial port to connect. Needed for Leonardo only } pinMode(2, OUTPUT); pinMode(3, OUTPUT); pinMode(4, OUTPUT); pinMode(5, OUTPUT); pinMode(6, OUTPUT); pinMode(7, OUTPUT); pinMode(8, OUTPUT); pinMode(9, OUTPUT); // start the Ethernet connection and the server: Ethernet.begin(mac, ip, gateway, subnet); server.begin(); Serial.print(\"server is at \"); Serial.println(Ethernet.localIP()); } void loop() { // Create a client connection EthernetClient client = server.available(); if (client) { while (client.connected()) { if (client.available()) { char c = client.read(); //read char by char HTTP request if (readString.length() 100) { //store characters to string readString += c; //Serial.print(c); } //if HTTP request has ended if (c == '\\n') { Serial.println(readString); //print to serial monitor for debuging client.println(\"HTTP/1.1 200 OK\"); //send new page client.println(\"Content-Type: text/html\"); client.println(); client.println(\" HTML \"); client.println(\" HEAD \"); // client.println(\" meta name='apple-mobile-web-app-capable' content='yes' / \"); //client.println(\" meta name='apple-mobile-web-app-status-bar-style' content='black-translucent' / \"); client.println(\" link rel='stylesheet' type='text/css' href=' http://randomnerdtutorials.com/ethernetcss.css ' / \"); client.println(\" TITLE Project Turn on Stuff From Website /TITLE \"); client.println(\" /HEAD \"); client.println(\" BODY \"); client.println(\" H1 Turn on Stuff from a Website /H1 \"); client.println(\" hr / \"); client.println(\" br / \"); client.println(\" H2 Arduino with Ethernet Shield /H2 \"); client.println(\" br / \"); client.println(\" a href=\\\"/?button1on\\\"\\\" Turn On LED 1 /a \"); client.println(\" a href=\\\"/?button1off\\\"\\\" Turn Off LED 1 /a br / \"); client.println(\" br / \"); client.println(\" br / \"); client.println(\" a href=\\\"/?button2on\\\"\\\" Turn On LED 2 /a \"); client.println(\" a href=\\\"/?button2off\\\"\\\" Turn Off LED 2 /a br / \"); client.println(\" br / \"); client.println(\" br / \"); client.println(\" a href=\\\"/?button3on\\\"\\\" Turn On LED 3 /a \"); client.println(\" a href=\\\"/?button3off\\\"\\\" Turn Off LED 3 /a br / \"); client.println(\" br / \"); client.println(\" br / \"); client.println(\" a href=\\\"/?button4on\\\"\\\" Turn On LED 4 /a \"); client.println(\" a href=\\\"/?button4off\\\"\\\" Turn Off LED 4 /a br / \"); client.println(\" br / \"); client.println(\" br / \"); client.println(\" a href=\\\"/?button5on\\\"\\\" Turn On LED 5 /a \"); client.println(\" a href=\\\"/?button5off\\\"\\\" Turn Off LED 5 /a br / \"); client.println(\" br / \"); client.println(\" br / \"); client.println(\" a href=\\\"/?button6on\\\"\\\" Turn On LED 6 /a \"); client.println(\" a href=\\\"/?button6off\\\"\\\" Turn Off LED 6 /a br / \"); client.println(\" br / \"); client.println(\" br / \"); /* client.println(\" a href=\\\"/?7on\\\"\\\" Turn On LED 7 /a \"); client.println(\" a href=\\\"/?7off\\\"\\\" Turn Off LED 7 /a br / \"); client.println(\" br / \"); client.println(\" br / \"); client.println(\" a href=\\\"/?8on\\\"\\\" Turn On LED 8 /a \"); client.println(\" a href=\\\"/?8off\\\"\\\" Turn Off LED 8 /a br / \"); client.println(\" br / \"); client.println(\" br / \"); */ client.println(\" p Based on a sketch \"); client.println(\" p Created by Rui Santos. Visit http://randomnerdtutorials.com for more projects! /p \"); client.println(\" br / \"); client.println(\" /BODY \"); client.println(\" /HTML \"); delay(1); //stopping client client.stop(); //controls the Arduino if you press the buttons if (readString.indexOf(\"?button1on\") 0){ digitalWrite(2, HIGH); } if (readString.indexOf(\"?button1off\") 0){ digitalWrite(2, LOW); } if (readString.indexOf(\"?button2on\") 0){ digitalWrite(3, HIGH); } if (readString.indexOf(\"?button2off\") 0){ digitalWrite(3, LOW); } if (readString.indexOf(\"?button3on\") 0){ digitalWrite(4, HIGH); } if (readString.indexOf(\"?button3off\") 0){ digitalWrite(4, LOW); } if (readString.indexOf(\"?button4on\") 0){ digitalWrite(5, HIGH); } if (readString.indexOf(\"?button4off\") 0){ digitalWrite(5, LOW); } if (readString.indexOf(\"?button5on\") 0){ digitalWrite(6, HIGH); } if (readString.indexOf(\"?button5off\") 0){ digitalWrite(6, LOW); } if (readString.indexOf(\"?button6on\") 0){ digitalWrite(7, HIGH); } if (readString.indexOf(\"?button6off\") 0){ digitalWrite(7, LOW); } /* if (readString.indexOf(\"?7on\") 0){ digitalWrite(8, HIGH); } if (readString.indexOf(\"?7off\") 0){ digitalWrite(8, LOW); } if (readString.indexOf(\"?8on\") 0){ digitalWrite(9, HIGH); } if (readString.indexOf(\"?8off\") 0){ digitalWrite(9, LOW); } */ //clearing string for next read readString=\"\"; } } } } } This time, it makes a \u201creal\u201d web page with buttons that will turn on or off LEDs (a personal note: I was only able to get PINs 2 to 7 to work and I\u2019m not sure why as the code is the same for all the other LEDs) You might take notice that when a button is pushed the URL will look very much like the 1st example we looked at. http://192.168.1.178/?button1on Also I didn\u2019t add anything to read the analog pins - but it would be easy to add something that could read a tempature sensor or some other sensor. Using these examples we can do just about anything with control over ethernet. Thou there seems to be a limit to just what the web server can do. *** BONUS *** BONUS *** BONUS *** I2C 0.96\" OLED display module OLED noun noun: OLED ; plural noun: OLEDs a light-emitting diode containing thin flexible sheets of an organic electroluminescent material, used for visual displays. \"because OLEDs emit light, they consume significantly less power\" http://www.ebay.com/itm/0-96-I2C-IIC-SPI-Serial-128X64-OLED-LCD-LED-Display-Module-for-Arduino-white-it-/251536387002?pt=LH_DefaultDomain_0 hash=item3a90bcabba A few example sketches can be found here http://www.wide.hk/products.php?product=I2C-0.96%22-OLED-display-module-%28-compatible-Arduino-%29 http://www.adafruit.com/product/326 And the adafruit tutorial: https://learn.adafruit.com/monochrome-oled-breakouts To make these examples work you need to have the Adafruit_SSD1306 and the Adafruit_GFX libraries that can be found on github. There is also this library that works: https://github.com/stanleyhuangyc/MultiLCD/tree/master/MicroLCD I have examples using both libraries. Like \u201cFAKE CLOCK\u201d using the MicroLCD library /************************************************************************* * Demo sketch for MicroLCD library * Distributed under GPL v2.0 * Copyright (c) 2013-2014 Stanley Huang stanleyhuangyc@gmail.com * All rights reserved. * For more information, please visit http://arduinodev.com *************************************************************************/ #include Arduino.h #include Wire.h #include MicroLCD.h int s = 0; int m = 0; int h = 12; //LCD_SH1106 lcd; /* for SH1106 OLED module */ LCD_SSD1306 lcd; /* for SSD1306 OLED module */ const PROGMEM uint8_t smile[48 * 48 / 8] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xF8,0xFC,0xFC,0xFE,0xFE,0x7E,0x7F,0x7F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x7F,0x7F,0x7E,0xFE,0xFE,0xFC,0xFC,0xF8,0xF8,0xF0,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xC0,0xF0,0xFC,0xFE,0xFF,0xFF,0xFF,0x3F,0x1F,0x0F,0x07,0x03,0x01,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0xFF,0xFF,0xFF,0xFE,0xFC,0xF0,0xC0,0x00, 0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x1F,0x1F,0x1F,0x3F,0x1F,0x1F,0x02,0x00,0x00,0x00,0x00,0x06,0x1F,0x1F,0x1F,0x3F,0x1F,0x1F,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE, 0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x30,0xF8,0xF8,0xF8,0xF8,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF8,0xF8,0xFC,0xF8,0x30,0x00,0x00,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F, 0x00,0x03,0x0F,0x3F,0x7F,0xFF,0xFF,0xFF,0xFC,0xF8,0xF0,0xE1,0xC7,0x87,0x0F,0x1F,0x3F,0x3F,0x3E,0x7E,0x7C,0x7C,0x7C,0x78,0x78,0x7C,0x7C,0x7C,0x7E,0x3E,0x3F,0x3F,0x1F,0x0F,0x87,0xC7,0xE1,0xF0,0xF8,0xFC,0xFF,0xFF,0xFF,0x7F,0x3F,0x0F,0x03,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x0F,0x1F,0x1F,0x3F,0x3F,0x7F,0x7F,0x7E,0xFE,0xFE,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFE,0xFE,0x7E,0x7F,0x7F,0x3F,0x3F,0x1F,0x1F,0x0F,0x07,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00, }; void setup() { lcd.begin(); } void loop() { lcd.clear(); lcd.setCursor(40, 1); lcd.draw(smile, 48, 48); delay(1000); lcd.clear(); lcd.setCursor(25,1); lcd.setFontSize(FONT_SIZE_MEDIUM); lcd.print(\"FAKE Clock\"); delay(1500); for (h = 1; h 12; h++) { for (m = 0; m 59; m++) { for (s = 0; s 59; s++) { lcd.clear(); lcd.setCursor(35, 3); lcd.setFontSize(FONT_SIZE_MEDIUM); lcd.print(h); lcd.print(\":\"); if (m 10) {lcd.print(0); lcd.print(m); } else {lcd.print(m);} lcd.print(\":\"); if (s 10) {lcd.print(0); lcd.print(s); } else {lcd.print(s);} lcd.print(\"P\"); lcd.setCursor(20, 6); lcd.print(\"Nov 9, 2014\"); delay(1000); } }}} Both libraries are pretty easy to use, and following the examples given pretty easy to modify Some tricky things to get right is the number of pixels and placement of the \u201ccursor\u201d on the screen. But one you have done a few you get the hang of where it will be.","title":"Pin Control over Ethernet w/OLED"},{"location":"projects/arduino/arduino-project-pin-control-over-ethernet-oled-de/#i2c-096-oled-display-module","text":"OLED noun noun: OLED ; plural noun: OLEDs a light-emitting diode containing thin flexible sheets of an organic electroluminescent material, used for visual displays. \"because OLEDs emit light, they consume significantly less power\" http://www.ebay.com/itm/0-96-I2C-IIC-SPI-Serial-128X64-OLED-LCD-LED-Display-Module-for-Arduino-white-it-/251536387002?pt=LH_DefaultDomain_0 hash=item3a90bcabba A few example sketches can be found here http://www.wide.hk/products.php?product=I2C-0.96%22-OLED-display-module-%28-compatible-Arduino-%29 http://www.adafruit.com/product/326 And the adafruit tutorial: https://learn.adafruit.com/monochrome-oled-breakouts To make these examples work you need to have the Adafruit_SSD1306 and the Adafruit_GFX libraries that can be found on github. There is also this library that works: https://github.com/stanleyhuangyc/MultiLCD/tree/master/MicroLCD I have examples using both libraries. Like \u201cFAKE CLOCK\u201d using the MicroLCD library /************************************************************************* * Demo sketch for MicroLCD library * Distributed under GPL v2.0 * Copyright (c) 2013-2014 Stanley Huang stanleyhuangyc@gmail.com * All rights reserved. * For more information, please visit http://arduinodev.com *************************************************************************/ #include Arduino.h #include Wire.h #include MicroLCD.h int s = 0; int m = 0; int h = 12; //LCD_SH1106 lcd; /* for SH1106 OLED module */ LCD_SSD1306 lcd; /* for SSD1306 OLED module */ const PROGMEM uint8_t smile[48 * 48 / 8] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xF8,0xFC,0xFC,0xFE,0xFE,0x7E,0x7F,0x7F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x7F,0x7F,0x7E,0xFE,0xFE,0xFC,0xFC,0xF8,0xF8,0xF0,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xC0,0xF0,0xFC,0xFE,0xFF,0xFF,0xFF,0x3F,0x1F,0x0F,0x07,0x03,0x01,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0xFF,0xFF,0xFF,0xFE,0xFC,0xF0,0xC0,0x00, 0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x1F,0x1F,0x1F,0x3F,0x1F,0x1F,0x02,0x00,0x00,0x00,0x00,0x06,0x1F,0x1F,0x1F,0x3F,0x1F,0x1F,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE, 0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x30,0xF8,0xF8,0xF8,0xF8,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF8,0xF8,0xFC,0xF8,0x30,0x00,0x00,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F, 0x00,0x03,0x0F,0x3F,0x7F,0xFF,0xFF,0xFF,0xFC,0xF8,0xF0,0xE1,0xC7,0x87,0x0F,0x1F,0x3F,0x3F,0x3E,0x7E,0x7C,0x7C,0x7C,0x78,0x78,0x7C,0x7C,0x7C,0x7E,0x3E,0x3F,0x3F,0x1F,0x0F,0x87,0xC7,0xE1,0xF0,0xF8,0xFC,0xFF,0xFF,0xFF,0x7F,0x3F,0x0F,0x03,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x0F,0x1F,0x1F,0x3F,0x3F,0x7F,0x7F,0x7E,0xFE,0xFE,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFE,0xFE,0x7E,0x7F,0x7F,0x3F,0x3F,0x1F,0x1F,0x0F,0x07,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00, }; void setup() { lcd.begin(); } void loop() { lcd.clear(); lcd.setCursor(40, 1); lcd.draw(smile, 48, 48); delay(1000); lcd.clear(); lcd.setCursor(25,1); lcd.setFontSize(FONT_SIZE_MEDIUM); lcd.print(\"FAKE Clock\"); delay(1500); for (h = 1; h 12; h++) { for (m = 0; m 59; m++) { for (s = 0; s 59; s++) { lcd.clear(); lcd.setCursor(35, 3); lcd.setFontSize(FONT_SIZE_MEDIUM); lcd.print(h); lcd.print(\":\"); if (m 10) {lcd.print(0); lcd.print(m); } else {lcd.print(m);} lcd.print(\":\"); if (s 10) {lcd.print(0); lcd.print(s); } else {lcd.print(s);} lcd.print(\"P\"); lcd.setCursor(20, 6); lcd.print(\"Nov 9, 2014\"); delay(1000); } }}} Both libraries are pretty easy to use, and following the examples given pretty easy to modify Some tricky things to get right is the number of pixels and placement of the \u201ccursor\u201d on the screen. But one you have done a few you get the hang of where it will be.","title":"I2C 0.96\" OLED display module"},{"location":"projects/arduino/arduino-project-pin-control-over-ethernet-oled-de/SUMMARY/","text":"Summary Arduino Project: Pin Control over Ethernet OLED Demo I2C 0.96\" OLED display module","title":"Summary"},{"location":"projects/arduino/arduino-project-pin-control-over-ethernet-oled-de/SUMMARY/#summary","text":"Arduino Project: Pin Control over Ethernet OLED Demo I2C 0.96\" OLED display module","title":"Summary"},{"location":"projects/arduino/arduino-project-pin-control-over-ethernet-oled-de/i2c_096_oled_display_module/","text":"I2C 0.96 OLED display module {#i2c-0-96-oled-display-module} OLED noun noun: OLED ; plural noun: OLEDs a light-emitting diode containing thin flexible sheets of an organic electroluminescent material, used for visual displays. because OLEDs emit light, they consume significantly less power http://www.ebay.com/itm/0-96-I2C-IIC-SPI-Serial-128X64-OLED-LCD-LED-Display-Module-for-Arduino-white-it-/251536387002?pt=LH_DefaultDomain_0 hash=item3a90bcabba A few example sketches can be found here http://www.wide.hk/products.php?product=I2C-0.96%22-OLED-display-module-%28-compatible-Arduino-%29 http://www.adafruit.com/product/326 And the adafruit tutorial: https://learn.adafruit.com/monochrome-oled-breakouts To make these examples work you need to have the Adafruit_SSD1306 and the Adafruit_GFX libraries that can be found on github. There is also this library that works: https://github.com/stanleyhuangyc/MultiLCD/tree/master/MicroLCD I have examples using both libraries. Like \u201cFAKE CLOCK\u201d using the MicroLCD library / * * * * * * * * * * *** Demo sketch for MicroLCD library Distributed under GPL v2.0 Copyright (c) 2013-2014 Stanley Huang stanleyhuangyc@gmail.com All rights reserved. For more information, please visit http://arduinodev.com * * * * * * * * * * ***/ include Arduino.h include Wire.h include MicroLCD.h int s = 0; int m = 0; int h = 12; //LCD_SH1106 lcd; / for SH1106 OLED module / LCD_SSD1306 lcd; / for SSD1306 OLED module / const PROGMEM uint8_t smile[48 * 48 / 8] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xF8,0xFC,0xFC,0xFE,0xFE,0x7E,0x7F,0x7F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x7F,0x7F,0x7E,0xFE,0xFE,0xFC,0xFC,0xF8,0xF8,0xF0,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xC0,0xF0,0xFC,0xFE,0xFF,0xFF,0xFF,0x3F,0x1F,0x0F,0x07,0x03,0x01,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0xFF,0xFF,0xFF,0xFE,0xFC,0xF0,0xC0,0x00, 0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x1F,0x1F,0x1F,0x3F,0x1F,0x1F,0x02,0x00,0x00,0x00,0x00,0x06,0x1F,0x1F,0x1F,0x3F,0x1F,0x1F,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE, 0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x30,0xF8,0xF8,0xF8,0xF8,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF8,0xF8,0xFC,0xF8,0x30,0x00,0x00,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F, 0x00,0x03,0x0F,0x3F,0x7F,0xFF,0xFF,0xFF,0xFC,0xF8,0xF0,0xE1,0xC7,0x87,0x0F,0x1F,0x3F,0x3F,0x3E,0x7E,0x7C,0x7C,0x7C,0x78,0x78,0x7C,0x7C,0x7C,0x7E,0x3E,0x3F,0x3F,0x1F,0x0F,0x87,0xC7,0xE1,0xF0,0xF8,0xFC,0xFF,0xFF,0xFF,0x7F,0x3F,0x0F,0x03,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x0F,0x1F,0x1F,0x3F,0x3F,0x7F,0x7F,0x7E,0xFE,0xFE,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFE,0xFE,0x7E,0x7F,0x7F,0x3F,0x3F,0x1F,0x1F,0x0F,0x07,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00, }; void setup() { lcd.begin(); } void loop() { lcd.clear(); lcd.setCursor(40, 1); lcd.draw(smile, 48, 48); delay(1000); lcd.clear(); lcd.setCursor(25,1); lcd.setFontSize(FONT_SIZE_MEDIUM); lcd.print( FAKE Clock ); delay(1500); for (h = 1; h 12; h++) { for (m = 0; m 59; m++) { for (s = 0; s 59; s++) { lcd.clear(); lcd.setCursor(35, 3); lcd.setFontSize(FONT_SIZE_MEDIUM); lcd.print(h); lcd.print( : ); if (m 10) {lcd.print(0); lcd.print(m); } else {lcd.print(m);} lcd.print( : ); if (s 10) {lcd.print(0); lcd.print(s); } else {lcd.print(s);} lcd.print( P ); lcd.setCursor(20, 6); lcd.print( Nov 9, 2014 ); delay(1000); } }}} Both libraries are pretty easy to use, and following the examples given pretty easy to modify Some tricky things to get right is the number of pixels and placement of the \u201ccursor\u201d on the screen. But one you have done a few you get the hang of where it will be.","title":"I2c 096 oled display module"},{"location":"projects/arduino/arduino-project-pin-control-over-ethernet-oled-de/i2c_096_oled_display_module/#i2c-096-oled-display-module-i2c-0-96-oled-display-module","text":"OLED noun noun: OLED ; plural noun: OLEDs a light-emitting diode containing thin flexible sheets of an organic electroluminescent material, used for visual displays. because OLEDs emit light, they consume significantly less power http://www.ebay.com/itm/0-96-I2C-IIC-SPI-Serial-128X64-OLED-LCD-LED-Display-Module-for-Arduino-white-it-/251536387002?pt=LH_DefaultDomain_0 hash=item3a90bcabba A few example sketches can be found here http://www.wide.hk/products.php?product=I2C-0.96%22-OLED-display-module-%28-compatible-Arduino-%29 http://www.adafruit.com/product/326 And the adafruit tutorial: https://learn.adafruit.com/monochrome-oled-breakouts To make these examples work you need to have the Adafruit_SSD1306 and the Adafruit_GFX libraries that can be found on github. There is also this library that works: https://github.com/stanleyhuangyc/MultiLCD/tree/master/MicroLCD I have examples using both libraries. Like \u201cFAKE CLOCK\u201d using the MicroLCD library / * * * * * * * * * * *** Demo sketch for MicroLCD library Distributed under GPL v2.0 Copyright (c) 2013-2014 Stanley Huang stanleyhuangyc@gmail.com All rights reserved. For more information, please visit http://arduinodev.com * * * * * * * * * * ***/","title":"I2C 0.96&quot; OLED display module {#i2c-0-96-oled-display-module}"},{"location":"projects/arduino/arduino-project-pin-control-over-ethernet-oled-de/i2c_096_oled_display_module/#include-arduinoh","text":"","title":"include &lt;Arduino.h&gt;"},{"location":"projects/arduino/arduino-project-pin-control-over-ethernet-oled-de/i2c_096_oled_display_module/#include-wireh","text":"","title":"include &lt;Wire.h&gt;"},{"location":"projects/arduino/arduino-project-pin-control-over-ethernet-oled-de/i2c_096_oled_display_module/#include-microlcdh","text":"int s = 0; int m = 0; int h = 12; //LCD_SH1106 lcd; / for SH1106 OLED module / LCD_SSD1306 lcd; / for SSD1306 OLED module / const PROGMEM uint8_t smile[48 * 48 / 8] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xF8,0xFC,0xFC,0xFE,0xFE,0x7E,0x7F,0x7F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x7F,0x7F,0x7E,0xFE,0xFE,0xFC,0xFC,0xF8,0xF8,0xF0,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0xC0,0xF0,0xFC,0xFE,0xFF,0xFF,0xFF,0x3F,0x1F,0x0F,0x07,0x03,0x01,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0xFF,0xFF,0xFF,0xFE,0xFC,0xF0,0xC0,0x00, 0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x1F,0x1F,0x1F,0x3F,0x1F,0x1F,0x02,0x00,0x00,0x00,0x00,0x06,0x1F,0x1F,0x1F,0x3F,0x1F,0x1F,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE, 0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x30,0xF8,0xF8,0xF8,0xF8,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF8,0xF8,0xFC,0xF8,0x30,0x00,0x00,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F, 0x00,0x03,0x0F,0x3F,0x7F,0xFF,0xFF,0xFF,0xFC,0xF8,0xF0,0xE1,0xC7,0x87,0x0F,0x1F,0x3F,0x3F,0x3E,0x7E,0x7C,0x7C,0x7C,0x78,0x78,0x7C,0x7C,0x7C,0x7E,0x3E,0x3F,0x3F,0x1F,0x0F,0x87,0xC7,0xE1,0xF0,0xF8,0xFC,0xFF,0xFF,0xFF,0x7F,0x3F,0x0F,0x03,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x0F,0x1F,0x1F,0x3F,0x3F,0x7F,0x7F,0x7E,0xFE,0xFE,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFE,0xFE,0x7E,0x7F,0x7F,0x3F,0x3F,0x1F,0x1F,0x0F,0x07,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00, }; void setup() { lcd.begin(); } void loop() { lcd.clear(); lcd.setCursor(40, 1); lcd.draw(smile, 48, 48); delay(1000); lcd.clear(); lcd.setCursor(25,1); lcd.setFontSize(FONT_SIZE_MEDIUM); lcd.print( FAKE Clock ); delay(1500); for (h = 1; h 12; h++) { for (m = 0; m 59; m++) { for (s = 0; s 59; s++) { lcd.clear(); lcd.setCursor(35, 3); lcd.setFontSize(FONT_SIZE_MEDIUM); lcd.print(h); lcd.print( : ); if (m 10) {lcd.print(0); lcd.print(m); } else {lcd.print(m);} lcd.print( : ); if (s 10) {lcd.print(0); lcd.print(s); } else {lcd.print(s);} lcd.print( P ); lcd.setCursor(20, 6); lcd.print( Nov 9, 2014 ); delay(1000); } }}} Both libraries are pretty easy to use, and following the examples given pretty easy to modify Some tricky things to get right is the number of pixels and placement of the \u201ccursor\u201d on the screen. But one you have done a few you get the hang of where it will be.","title":"include &lt;MicroLCD.h&gt;"},{"location":"projects/arduino/arduino-project-skynet-im/","text":"20140611 SKYNET.IM Yup, the terminators are coming, Chris Matthieu along with a few others have been working on machine to machine messaging. I\u2019ve been giving Chris a hard time about the robots coming back, he is making it happen!!! Seriously thou, Skynet is a fairly easy to use set of protocols for talking to any machine. Chris has (and I think mistakenly) said you don\u2019t need a CPU - What I think he means is you don\u2019t need a desktop/laptop full sized computer (or for that matter a rPI, BeagleBone, or small computer) You do need a processor of some type - A microcontroller works well. So what is Skynet? In a nutshell it\u2019s a simple way for machines to talk to each other. It takes the Firmata protocols and builds on them to be used over wireless or ethernet. SO what is Firmata? It\u2019s a generic protocol for communicating with microcontrollers from software on a host computer. http://firmata.org I haven\u2019t gotten into the firmata implitations of skynet yet, and that maybe something for a later meeting. With Skynet, every machine generates it\u2019s own UUID and API codes, they can be overwritten if you need to. The programs/api use these UUID and codes to talk to each other. You can name them, but the machines will still use the UUID. Going to verify this at the library, but it seems once connected, the machines UUID stay with them, making it easy on us humans, and at least easy enough that we don\u2019t have to change our code everytime we plug in the device. There is a web impliation of skynet using google chrome and something called NodeBlu which is based from something called NodeRed. NodeBlu, is a connector, it really is easy to pull blocks down and connect them to other blocks to have a remote device do something. But the real power of skynet comes from the API, using simple restFUL commands, someone can control the remote device from the command line. OR Two skynet connected devices can connect to each other and decide what to do. Chris has a number of videos on Skynet, https://www.youtube.com/channel/UCBMdqdAbjJjE9LvMjVpiwUw I was watching a few of his videos to get ideas on what to demo, and came across one where he could call (on his phone) his connected devices - this is very cool when it comes to automation. Think about it, if I could call Skynet, say \u201cI\u2019ll be home in 10 minutes unlock the door\u201d and I had a door that could be remotely unlocked, in 10 minutes the door would open. Using that same idea you could text your home and ask for a status update. All very easy to do. So My demo is going to be on the \u201cEcho\u201d sketch that is included with the Skynet-Arduino-Firmware Library Created by Jacob Rosenthal https://github.com/skynetim/skynet_firmware_arduino Jacob also has several other skynet librarys in his \u201cskynet\u201d github https://github.com/skynetim Another developer/contributor to Skynet is Luis Montes (monteslu)- He has worked on the Skynet Firmata and he has some librarys on github as well. https://github.com/monteslu I can tell you that I\u2019ve \u201cspoke\u201d well chatted with all three of these people over the past couple of weeks and all are very knowledgable and helpful on skynet and how it works. In fact a few of the issues I had at first with NodeBlu Luis said he could fix or try to fix so it was a little more clear as to what is needed. But wait I was talking about my demo - It\u2019s the \u201cEcho\u201d sketch, and at first it wasn\u2019t clear to me what this sketch did. BUT Simply if you send a message to it, it will \u201cEcho\u201d that message back to you. Using NodeBlu, I was able to setup something that I could either speak to it, google would use it\u2019s speech to text engine and send the message on to the machine (arduino), a couple of seconds later the arduino would send back the text and google would use the text to speech engine and speak what I said. Yes, I know, all of that could have been done quickly and easier with sending the text to the machine, but it\u2019s a demo of what can be done. This is using the stock \u201cEcho\u201d sketch and a NodeBlu program that I built. I can also just type a message into the NodeBlu program and that will get sent to the arduino, and come back and speak. {width=\"6.5in\" height=\"4.875in\"} My 2nd demo of Skynet, I have hooked up a DS1620 temperature sensor (Which seems off to me today it\u2019s saying it\u2019s 82 degrees in here, seems high, maybe because the library was written for a UNO and I\u2019m using it on a mega) doesn\u2019t matter, it\u2019s a concept. I\u2019m using the same NodeBlu program, but this time, anything I say, or ask for it will speak the temperature to me. So you might be looking at the NodeBlu program above and wondering what is going on? There are two parts to this, (maybe three), the first step is to setup your remote devices, Called NODES - You can name these devices anything you want, the name isn\u2019t important as it\u2019s for us humans anyways. But you will need the device UUID and the Token (on the Arduino you can get both these from the serial monitor) Next you drag some blocks over to the workspace - most of the blocks are self explanatory as to what they do, some are inputs and some are outputs, and some are both. (So if the connector is on the right side it\u2019s an input, if it\u2019s on the left side it\u2019s an output, and on both sides well it\u2019s both) There are two blocks that aren\u2019t so self explanatory, they are the Function block, and the switch block. So the function block will allow you to write some Java script functions that can change the course of the program on the NodeBlu side of things. Remember it\u2019s looking for JAVA - which is a little different, and threw me for a bit as too way things weren\u2019t working. Right now there is nothing that tells you there is an error, and this one of the things that Luis thought he could fix. The switch block is an kind of like a IF statement block, you can add multiply paths for the output to go to. In my example you can see 5 different directions the output can go. So that is just briefly what Skynet is, and what it can do, The unfortunate part is the guys that created this are programmers by profession, and they didn\u2019t do such a good job in my opinion documenting things, And for someone who is just starting programming, or someone who has never used a API this might be a real struggle. I have used APIs and been programming for a while now and I found at least parts of it to be confusing, I\u2019d consider myself to be an intermediate level programmer, nothing these guys can do. It\u2019s an old problem with us programer types - we understand and know how it works, and don\u2019t think about what the end user knows or the skill level they might be at. Happens all the time. The best thing I can say is the guys on Chris\u2019s team are very knowledgable, and do understand what is going on, and are very helpful. (Twitter is probably the best way to get them, I know that Chris watches both Twitter and G+ most of the day) Release the Robots! Modified Skynet.im Echo sketch to include DS1620 Temp Sensor: * * SSSSS kk tt * SS kk kk yy yy nn nnn eee tt * SSSSS kkkkk yy yy nnn nn ee e tttt * SS kk kk yyyyyy nn nn eeeee tt * SSSSS kk kk yy nn nn eeeee tttt * yyyyy * * SkynetClient for http://skynet.im, OPEN COMMUNICATIONS NETWORK API FOR * THE INTERNET OF THINGS. * * This sketch parses any messages it receives and echos them back to the * sender. * * Works with ethernet shields compatible with EthernetClient library from * Arduino. If you don't know, grab the original * http://arduino.cc/en/Main/ArduinoEthernetShield * * Also requires the ArduinoJsonParser * https://github.com/bblanchon/ArduinoJsonParser * * You will notice we're using F() in Serial.print which might be new to you * Its covered briefly on the arduino print page but it means we can store * our strings in flash, instead of in ram. * * You can turn on debugging within SkynetClient.h by uncommenting * #define SKYNETCLIENT_DEBUG */ #include EEPROM.h #include \"Ethernet.h\" #include \"SPI.h\" #include \"SkynetClient.h\" #include JsonParser.h #include DS1620.h #include stdlib.h EthernetClient client; SkynetClient skynetclient(client); //you can't have 2 of the same mac on your network! byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED }; char hostname[] = \"skynet.im\"; int port = 80; static const uint8_t RST_PIN = 7; static const uint8_t CLK_PIN = 8; static const uint8_t DQ_PIN = 9; DS1620 ds1620(RST_PIN, CLK_PIN, DQ_PIN); void setup() { pinMode(8, OUTPUT); Serial.begin(9600); delay(100); ds1620.config(); // start the Ethernet connection: if (Ethernet.begin(mac) == 0) { Serial.println(F(\"Failed to configure Ethernet using DHCP\")); // no point in carrying on, so do nothing forevermore: for(;;) ; } skynetclient.setMessageDelegate(onMessage); } void onMessage(const char * const data) { JsonParser 16 parser; //Serial.print(\"Parse \"); //Serial.println(data); JsonHashTable hashTable = parser.parseHashTable((char*)data); if (!hashTable.success()) { Serial.println(\"JsonParser.parseHashTable() failed\"); return; } char* payload = hashTable.getString(\"payload\"); //Serial.print(\"payload=\"); Serial.println(payload); char* fromUuid = hashTable.getString(\"fromUuid\"); //Serial.print(\"fromUuid=\"); //Serial.println(fromUuid); const float temp_c = ds1620.temp_c(); const float temp_f = temp_c * 9/5.0 + 32; Serial.print(temp_f, 1); // 1 decimal place Serial.print(\"F \"); Serial.print(temp_c, 1); Serial.println(\"C\"); String s = dtostrf(temp_f, 1, 2, payload); skynetclient.sendMessage(fromUuid, payload); } void loop() { while(!skynetclient.monitor()){ bool skynetStatus = false; do { skynetStatus = skynetclient.connect(hostname, port); } while (!skynetStatus); Serial.println(F(\"Connected!\")); char uuid[UUIDSIZE]; skynetclient.getUuid(uuid); Serial.print(F(\"uuid: \")); Serial.println(uuid); skynetclient.getToken(uuid); Serial.print(F(\"token: \")); Serial.println(uuid); } } So you\u2019ll see it doesn\u2019t matter what you send to it, it will send the temperature back everytime - you can be really impressive thou and say \u201cWhat is the Temerature\u201d to fool people. Simple prove of concept sketch, and a good demo","title":"Skynet IM"},{"location":"projects/arduino/arduino-project-skynet-im/SUMMARY/","text":"Summary Arduino Project: SKYNET.IM","title":"Summary"},{"location":"projects/arduino/arduino-project-skynet-im/SUMMARY/#summary","text":"Arduino Project: SKYNET.IM","title":"Summary"},{"location":"projects/arduino/arduino-project-the-spo-512-speech-synthesizer/","text":"3/16/2014 The SPO-512 Speech Synthesizer 1. Project Reference Number / Title: 20140316 The SPO-512 Speech Synthesizer Mar 16 - 17, 2014 A side project this week, The SPO-512 Speech Synthesizer also known as the RoboVoice from SpeechChips.com http://www.speechchips.com/shop/item.aspx?itemid=22 This is a PIC microcontroller that takes a serial 9600 baud input (ASCII data) and outputs (speaks) VOICE, There are a couple of demos of this on the website. I bought the chip probably 2 years ago, and it sat on my desk. There is a design circuit in the PDF on the site, turns out most of the circuit is an amplifier for the speaker, the circuit to make this work is really pretty simple. 4 grounds, and 4 3.3v power - a TX line, a RX line, a Cap for filtering (I think, left it off and it didn\u2019t sound as good, I also didn\u2019t have the 4.7u cap that is called for, I used a 10u, seems to be fine so I think it is just filtering) and an output to the speaker. I have a lot of parts that I pulled out of old computers, turns out a few of the dell systems have little tiny amplified speakers build in them, these things work great, and I wish I would have pulled more out. I am running my little speaker off 5v, but I wonder if it wasn\u2019t hooked up to 12v in the computer - seems like they were much louder. Doesn\u2019t matter it works, and I think it will work at 3.3v as well. I think I\u2019ve talked to the man who invented this chip, I think he is very active in the \u201cBasic Stamp\u201d forums, and very knowledgable about all things microchip. Speech chips offered a robovoice on an arduino shield, I don\u2019t think they do any more. So after I went from breadboard, I moved the whole thing over to a proto board, (well the speaker isn\u2019t mounted, I really wanted to mount it, but\u2026) So here are a few pictures of my side project, and I\u2019ll bring it with me to the meeting on Thurs. {width=\"6.5in\" height=\"8.666666666666666in\"} {width=\"6.5in\" height=\"8.666666666666666in\"} {width=\"6.5in\" height=\"8.666666666666666in\"} It took a couple of hours to move it from breadboard to proto board, and I ran into a couple of issues, the 1st, the chip is 28 pin, the board only had enough multi-tap pins for a 20 pin microchip, (Issue was fairly easy to overcome). 2nd my proto board didn\u2019t give any tap to the 3.3v line of the arduino, in fact it was shorted to the 5v line (Huh?) Yeah that was a mistake from the manufacturer I am sure, but I can see how someone not paying attention could short out the Arduino board. This proto board provide 3 different 5v rails, and 3 different ground rails, (one set of those rails ended up being UNDER the IC chip and not at all in a useful spot), No 3.3v rail, I had to make my own. but that ended up taking up more room on the board then really needed. I could have done without one of the 5v rails for a replacement of a 3.3v rail, probably would have had to move the IC but I could have dealt with that. My last issue was - this proto board had stackable header on it. I wanted to make this semi-permanent so I didn\u2019t want to plug a wire into the header, I wanted to use the port directly. I had to remove the most of the headers which caused another problem, it was a little hard to remove the headers, and the holes closed behind being removed, for some reason my solider sucker just wasn\u2019t working well tonight. Over all thou, this was a fun project, now I just need to order a couple more protoboards for the next time I want to move off breadboarding.","title":"SPO-512 Speech Synthesizer"},{"location":"projects/arduino/arduino-project-the-spo-512-speech-synthesizer/SUMMARY/","text":"Summary Arduino Project: The SPO-512 Speech Synthesizer","title":"Summary"},{"location":"projects/arduino/arduino-project-the-spo-512-speech-synthesizer/SUMMARY/#summary","text":"Arduino Project: The SPO-512 Speech Synthesizer","title":"Summary"},{"location":"projects/esp32/","text":"","title":"Temp"},{"location":"projects/esp8266/","text":"","title":"Temp"},{"location":"projects/esp8266/Crouton/","text":"Demo of Crouton This is a demo for use with Crouton.mybluemix.net IOT dashboard. Minimum hardware - D1 Mini (ESP8266) and D1 Mini Relay shield. The D1 Mini creates a push button dash board on Crouton, which is used to turn the relay on and off. A D1 Mini Pushbutton shield can also be used for local control of the relay. Libraries required Add the ESP8266 devices to the Arduino IDE: https://github.com/esp8266/Arduino WifiManager.h - https://github.com/tzapu/WiFiManager PubSubClient.h - https://github.com/knolleary/pubsubclient (Requres PubSubClient.h file to be changed: MQTT_MAX_PACKET_SIZE to 512) Installation Things To Do Usage Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Support Me If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller Other Projects https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/ Credits Copyright (c) 2018 LeRoy Miller License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"Demo of Crouton"},{"location":"projects/esp8266/Crouton/#demo-of-crouton","text":"This is a demo for use with Crouton.mybluemix.net IOT dashboard. Minimum hardware - D1 Mini (ESP8266) and D1 Mini Relay shield. The D1 Mini creates a push button dash board on Crouton, which is used to turn the relay on and off. A D1 Mini Pushbutton shield can also be used for local control of the relay.","title":"Demo of Crouton"},{"location":"projects/esp8266/Crouton/#libraries-required","text":"Add the ESP8266 devices to the Arduino IDE: https://github.com/esp8266/Arduino WifiManager.h - https://github.com/tzapu/WiFiManager PubSubClient.h - https://github.com/knolleary/pubsubclient (Requres PubSubClient.h file to be changed: MQTT_MAX_PACKET_SIZE to 512)","title":"Libraries required"},{"location":"projects/esp8266/Crouton/#installation","text":"","title":"Installation"},{"location":"projects/esp8266/Crouton/#things-to-do","text":"","title":"Things To Do"},{"location":"projects/esp8266/Crouton/#usage","text":"","title":"Usage"},{"location":"projects/esp8266/Crouton/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/esp8266/Crouton/#support-me","text":"If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller","title":"Support Me"},{"location":"projects/esp8266/Crouton/#other-projects","text":"https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/","title":"Other Projects"},{"location":"projects/esp8266/Crouton/#credits","text":"Copyright (c) 2018 LeRoy Miller","title":"Credits"},{"location":"projects/esp8266/Crouton/#license","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"License"},{"location":"projects/esp8266/I2C_Communication_demo/","text":"I2C Communication Between two microcontrollers This is an idea based on a comment made by Frank at our meeting on either Feb 15 or Feb 22. My first thoughts were to use the AT firmware for the ESP8266, after thinking about it I thought why not just use I2C. Problem is I didn't find a lot of examples for I2C communcation, a few old examples, and a few that didn't work well or explain what was going on. This is what I came up with based on a couple of the examples I did find. This is a demo of communication using the I2C bus between an Arduino Mega with MP3 shield, and a D1 Mini with 5 buttons. By pushing the buttons the D1 Mini will tell the Mega which MP3 file to play. Whats not working - I can get the master (D1 Mini) to send a message to the slave device (MEGA/MP3 player). I haven't figured out how to get the slave to send a status report back yet. This will have to be a demo for another time. Documentation https://docs.google.com/document/d/17qPdnuz_0vcQxwqyIxbd-e1VFhrlClPlq28MblpcvN0/edit?usp=sharing Information Based on code from: https://www.arduino.cc/en/Tutorial/MasterWriter and http://dsscircuits.com/articles/arduino-i2c-slave-guide Usage Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Support Me If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller Other Projects https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/ Credits Copyright (c) 2018 LeRoy Miller License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"I2C Communication Between two microcontrollers"},{"location":"projects/esp8266/I2C_Communication_demo/#i2c-communication-between-two-microcontrollers","text":"This is an idea based on a comment made by Frank at our meeting on either Feb 15 or Feb 22. My first thoughts were to use the AT firmware for the ESP8266, after thinking about it I thought why not just use I2C. Problem is I didn't find a lot of examples for I2C communcation, a few old examples, and a few that didn't work well or explain what was going on. This is what I came up with based on a couple of the examples I did find. This is a demo of communication using the I2C bus between an Arduino Mega with MP3 shield, and a D1 Mini with 5 buttons. By pushing the buttons the D1 Mini will tell the Mega which MP3 file to play. Whats not working - I can get the master (D1 Mini) to send a message to the slave device (MEGA/MP3 player). I haven't figured out how to get the slave to send a status report back yet. This will have to be a demo for another time.","title":"I2C Communication Between two microcontrollers"},{"location":"projects/esp8266/I2C_Communication_demo/#documentation","text":"https://docs.google.com/document/d/17qPdnuz_0vcQxwqyIxbd-e1VFhrlClPlq28MblpcvN0/edit?usp=sharing","title":"Documentation"},{"location":"projects/esp8266/I2C_Communication_demo/#information","text":"Based on code from: https://www.arduino.cc/en/Tutorial/MasterWriter and http://dsscircuits.com/articles/arduino-i2c-slave-guide","title":"Information"},{"location":"projects/esp8266/I2C_Communication_demo/#usage","text":"","title":"Usage"},{"location":"projects/esp8266/I2C_Communication_demo/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/esp8266/I2C_Communication_demo/#support-me","text":"If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller","title":"Support Me"},{"location":"projects/esp8266/I2C_Communication_demo/#other-projects","text":"https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/","title":"Other Projects"},{"location":"projects/esp8266/I2C_Communication_demo/#credits","text":"Copyright (c) 2018 LeRoy Miller","title":"Credits"},{"location":"projects/esp8266/I2C_Communication_demo/#license","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"License"},{"location":"projects/esp8266/LinkNode_Relay/","text":"Linknode ESP8266 4 port WIFI relay replacement firmware (sketches) for the linknode 4 port wifi relay. http://linksprite.com/wiki/index.php5?title=LinkNode_R4:_Arduino-compatible_WiFi_relay_controller#Introduction I didn't have much luck with the firmware that came with the device, so I made my own. See my documents here for usage: https://docs.google.com/document/d/1db2sMzpWTfMZWnpawSQGkYW-ZBfhyzuatbF9MuN83Jc/edit?usp=sharing Installation Things To Do Usage Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Support Me If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller Other Projects https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/ Credits Copyright (c) 2017 LeRoy Miller License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"Linknode ESP8266 4 port WIFI relay"},{"location":"projects/esp8266/LinkNode_Relay/#linknode-esp8266-4-port-wifi-relay","text":"replacement firmware (sketches) for the linknode 4 port wifi relay. http://linksprite.com/wiki/index.php5?title=LinkNode_R4:_Arduino-compatible_WiFi_relay_controller#Introduction I didn't have much luck with the firmware that came with the device, so I made my own. See my documents here for usage: https://docs.google.com/document/d/1db2sMzpWTfMZWnpawSQGkYW-ZBfhyzuatbF9MuN83Jc/edit?usp=sharing","title":"Linknode ESP8266 4 port WIFI relay"},{"location":"projects/esp8266/LinkNode_Relay/#installation","text":"","title":"Installation"},{"location":"projects/esp8266/LinkNode_Relay/#things-to-do","text":"","title":"Things To Do"},{"location":"projects/esp8266/LinkNode_Relay/#usage","text":"","title":"Usage"},{"location":"projects/esp8266/LinkNode_Relay/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/esp8266/LinkNode_Relay/#support-me","text":"If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller","title":"Support Me"},{"location":"projects/esp8266/LinkNode_Relay/#other-projects","text":"https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/","title":"Other Projects"},{"location":"projects/esp8266/LinkNode_Relay/#credits","text":"Copyright (c) 2017 LeRoy Miller","title":"Credits"},{"location":"projects/esp8266/LinkNode_Relay/#license","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"License"},{"location":"projects/esp8266/Serial_WiFi_Board/esp_serial_wifi_board flash_update_firmware_info/","text":"ESP8266 AT Firmware Version 1.5 This is slow, but seemed to work. THIS DOESN'T APPEAR TO WORK..... esptool --port /dev/ttyACM0 --baud 9600 write_flash 0x00000000 blank.bin esptool --port /dev/ttyACM0 --baud 9600 --chip esp8266 write_flash -fm dio -ff 26m --flash_size 2MB-c1 0x00000 boot_v1.6.bin 0x01000 user1.1024.new.2.bin 0x1fc000 esp_init_data_default_v05.bin 0xfe000 blank.bin 0x1fe000 blank.bin 0x1fb000 blank.bin https://www.electronicshub.org/update-flash-esp8266-firmware/ esptool --port /dev/ttyACM0 --baud 9600 --chip esp8266 write_flash --flash_size 2MB-c1 0x00000 boot_v1.7.bin 0x01000 user1.1024.new.2.bin 0xfc000 esp_init_data_default.bin 0xfe000 blank.bin esptool --port /dev/ttyACM0 --baud 9600 --chip esp8266 write_flash 0x00000 boot_v1.2.bin 0x01000 user1.1024.new.2.bin 0xfc000 esp_init_data_default.bin 0xfe000 esptool --port /dev/ttyACM0 --baud 9600 --chip esp8266 write_flash 0x00000 boot_v1.2.bin 0x01000 user1.1024.new.2.bin 0xfc000 esp_init_data_default.bin 0xfe000 blank.bin The Above Doesn't WORK!!! This Finally worked, even did the OTA upgrade to 1.6 firmware - but doesn't seem to what to check for any more new firmwares. https://www.electrodragon.com/w/ESP8266_AT-Command_firmware Using the AT v1.1 on ESP8266 NONOS SDK v1.5.4 firmware this appears to finally have worked using this command: esptool --port /dev/ttyACM0 --baud 9600 --chip esp8266 write_flash 0x00000 boot_v1.5.bin 0x01000 user1.1024.new.2.bin 0xfc000 esp_init_data_default.bin 0xfe000 blank.bin 0x7e000 blank.bin Read the README.md file Directory AT_bin","title":"Esp serial wifi board flash update firmware info"},{"location":"projects/esp8266/Serial_WiFi_Board/AT_bin/","text":"BOOT MODE download Flash size 8Mbit: 512KB+512KB boot_v1.2+.bin 0x00000 user1.1024.new.2.bin 0x01000 esp_init_data_default.bin 0xfc000 (optional) blank.bin 0x7e000 0xfe000 Flash size 16Mbit: 512KB+512KB boot_v1.2+.bin 0x00000 user1.1024.new.2.bin 0x01000 esp_init_data_default.bin 0x1fc000 (optional) blank.bin 0x7e000 0x1fe000 Flash size 16Mbit-C1: 1024KB+1024KB boot_v1.2+.bin 0x00000 user1.2048.new.5.bin 0x01000 esp_init_data_default.bin 0x1fc000 (optional) blank.bin 0xfe000 0x1fe000 Flash size 32Mbit: 512KB+512KB boot_v1.2+.bin 0x00000 user1.1024.new.2.bin 0x01000 esp_init_data_default.bin 0x3fc000 (optional) blank.bin 0x7e000 0x3fe000 Flash size 32Mbit-C1: 1024KB+1024KB boot_v1.2+.bin 0x00000 user1.2048.new.5.bin 0x01000 esp_init_data_default.bin 0x3fc000 (optional) blank.bin 0xfe000 0x3fe000 NON-BOOT MODE download eagle.flash.bin 0x00000 eagle.irom0text.bin 0x10000 blank.bin Flash size 8Mbit: 0x7e000 0xfe000 Flash size 16Mbit: 0x7e000 0x1fe000 Flash size 16Mbit-C1: 0xfe000 0x1fe000 Flash size 32Mbit: 0x7e000 0x3fe000 Flash size 32Mbit-C1: 0xfe000 0x3fe000 esp_init_data_default.bin (optional) Flash size 8Mbit: 0xfc000 Flash size 16Mbit: 0x1fc000 Flash size 16Mbit-C1: 0x1fc000 Flash size 32Mbit: 0x3fc000 Flash size 32Mbit-C1: 0x3fc000 compile modify eagle.app.v6.ld, as irom0_0_seg : org = 0x40210000, len = 0x6C000 NOTICE: UPDATE is not supported in non-boot mode; 4Mbit Flash is not supported in non-boot mode; Update steps 1.Make sure TE(terminal equipment) is in sta or sta+ap mode AT+CWMODE=3 OK 2.Make sure TE got ip address AT+CWJAP=\"ssid\",\"12345678\" OK AT+CIFSR 192.168.1.134 3.Let's update AT+CIUPDATE +CIPUPDATE:1 found server +CIPUPDATE:2 connect server +CIPUPDATE:3 got edition +CIPUPDATE:4 start start OK NOTICE: If there are mistakes in the updating, then break update and print ERROR.","title":"BOOT MODE"},{"location":"projects/esp8266/Serial_WiFi_Board/AT_bin/#boot-mode","text":"","title":"BOOT MODE"},{"location":"projects/esp8266/Serial_WiFi_Board/AT_bin/#download","text":"","title":"download"},{"location":"projects/esp8266/Serial_WiFi_Board/AT_bin/#flash-size-8mbit-512kb512kb","text":"boot_v1.2+.bin 0x00000 user1.1024.new.2.bin 0x01000 esp_init_data_default.bin 0xfc000 (optional) blank.bin 0x7e000 0xfe000","title":"Flash size 8Mbit: 512KB+512KB"},{"location":"projects/esp8266/Serial_WiFi_Board/AT_bin/#flash-size-16mbit-512kb512kb","text":"boot_v1.2+.bin 0x00000 user1.1024.new.2.bin 0x01000 esp_init_data_default.bin 0x1fc000 (optional) blank.bin 0x7e000 0x1fe000","title":"Flash size 16Mbit: 512KB+512KB"},{"location":"projects/esp8266/Serial_WiFi_Board/AT_bin/#flash-size-16mbit-c1-1024kb1024kb","text":"boot_v1.2+.bin 0x00000 user1.2048.new.5.bin 0x01000 esp_init_data_default.bin 0x1fc000 (optional) blank.bin 0xfe000 0x1fe000","title":"Flash size 16Mbit-C1: 1024KB+1024KB"},{"location":"projects/esp8266/Serial_WiFi_Board/AT_bin/#flash-size-32mbit-512kb512kb","text":"boot_v1.2+.bin 0x00000 user1.1024.new.2.bin 0x01000 esp_init_data_default.bin 0x3fc000 (optional) blank.bin 0x7e000 0x3fe000","title":"Flash size 32Mbit: 512KB+512KB"},{"location":"projects/esp8266/Serial_WiFi_Board/AT_bin/#flash-size-32mbit-c1-1024kb1024kb","text":"boot_v1.2+.bin 0x00000 user1.2048.new.5.bin 0x01000 esp_init_data_default.bin 0x3fc000 (optional) blank.bin 0xfe000 0x3fe000","title":"Flash size 32Mbit-C1: 1024KB+1024KB"},{"location":"projects/esp8266/Serial_WiFi_Board/AT_bin/#non-boot-mode","text":"","title":"NON-BOOT MODE"},{"location":"projects/esp8266/Serial_WiFi_Board/AT_bin/#download_1","text":"eagle.flash.bin 0x00000 eagle.irom0text.bin 0x10000 blank.bin Flash size 8Mbit: 0x7e000 0xfe000 Flash size 16Mbit: 0x7e000 0x1fe000 Flash size 16Mbit-C1: 0xfe000 0x1fe000 Flash size 32Mbit: 0x7e000 0x3fe000 Flash size 32Mbit-C1: 0xfe000 0x3fe000 esp_init_data_default.bin (optional) Flash size 8Mbit: 0xfc000 Flash size 16Mbit: 0x1fc000 Flash size 16Mbit-C1: 0x1fc000 Flash size 32Mbit: 0x3fc000 Flash size 32Mbit-C1: 0x3fc000","title":"download"},{"location":"projects/esp8266/Serial_WiFi_Board/AT_bin/#compile","text":"modify eagle.app.v6.ld, as irom0_0_seg : org = 0x40210000, len = 0x6C000 NOTICE: UPDATE is not supported in non-boot mode; 4Mbit Flash is not supported in non-boot mode;","title":"compile"},{"location":"projects/esp8266/Serial_WiFi_Board/AT_bin/#update-steps","text":"1.Make sure TE(terminal equipment) is in sta or sta+ap mode AT+CWMODE=3 OK 2.Make sure TE got ip address AT+CWJAP=\"ssid\",\"12345678\" OK AT+CIFSR 192.168.1.134 3.Let's update AT+CIUPDATE +CIPUPDATE:1 found server +CIPUPDATE:2 connect server +CIPUPDATE:3 got edition +CIPUPDATE:4 start start OK NOTICE: If there are mistakes in the updating, then break update and print ERROR.","title":"Update steps"},{"location":"projects/esp8266/StrangerthingsDisplay/","text":"Stranger Things NeoPixel LED display For Midpointe Library West Chester, OHIO July 21 Escape Room Event A work in progress. This code is a work in progress. May 5, 2017 * Revised May 11, 2017 - for ESP8266, Changed Colors to array, * function to spell any word you'd like (see code) * modified twinkle routine to just \"twinkle\" red, moved to it's * own function. * * This code no long works on the UNO, it may work on the MEGA * Installation 27 ws2812 or ws2811 pixels (Neopixels), connected to PIN 6 of Arduino Uno Make Pixel 0 is A, 1 is B, 2 is C, etc... 25 is Z. Make a dispay, have fun. Things To Do Port Code to ESP826, change code to use array Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Credits Copywrite (c) 2017 LeRoy Miller Largely based on: twinkle - based on NeoPixel Color Twinkle by suhajdab https://gist.github.com/suhajdab/9716028 Strangerthing code based on \"Stranger Things Interactive Wall Art by Akin Yildiz https://www.instructables.com/id/Stranger-Things-Interactive-Wall-Art/ License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"Stranger Things NeoPixel LED display"},{"location":"projects/esp8266/StrangerthingsDisplay/#stranger-things-neopixel-led-display","text":"For Midpointe Library West Chester, OHIO July 21 Escape Room Event A work in progress. This code is a work in progress. May 5, 2017 * Revised May 11, 2017 - for ESP8266, Changed Colors to array, * function to spell any word you'd like (see code) * modified twinkle routine to just \"twinkle\" red, moved to it's * own function. * * This code no long works on the UNO, it may work on the MEGA *","title":"Stranger Things NeoPixel LED display"},{"location":"projects/esp8266/StrangerthingsDisplay/#installation","text":"27 ws2812 or ws2811 pixels (Neopixels), connected to PIN 6 of Arduino Uno Make Pixel 0 is A, 1 is B, 2 is C, etc... 25 is Z. Make a dispay, have fun.","title":"Installation"},{"location":"projects/esp8266/StrangerthingsDisplay/#things-to-do","text":"Port Code to ESP826, change code to use array","title":"Things To Do"},{"location":"projects/esp8266/StrangerthingsDisplay/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/esp8266/StrangerthingsDisplay/#credits","text":"Copywrite (c) 2017 LeRoy Miller Largely based on: twinkle - based on NeoPixel Color Twinkle by suhajdab https://gist.github.com/suhajdab/9716028 Strangerthing code based on \"Stranger Things Interactive Wall Art by Akin Yildiz https://www.instructables.com/id/Stranger-Things-Interactive-Wall-Art/","title":"Credits"},{"location":"projects/esp8266/StrangerthingsDisplay/#license","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"License"},{"location":"projects/other/3DPrinterInfo/Wanhao3Dprinter/","text":"","title":"Wanhao3Dprinter"},{"location":"projects/other/LoRa_Demos/LoRaTesting/","text":"Sketches for testing LoRa Information on the Linksprite LoRa boards can be found here: https://github.com/YaoQ/pcduino-lora-AP http://linksprite.com/wiki/index.php5?title=DIY_low-cost_LoRa_gateway_based_on_pcDuino#2._Program_Arduino_Uno I was unable to get Linksprites sketch to compile (??). Installation libraries required: arduino-LoRa https://github.com/sandeepmistry/arduino-LoRa TinyGPSPlus https://github.com/mikalhart/TinyGPSPlus SD card library DS1307 library General Information It is possiable (unlikely) that I did get a package from about 8 miles away. I've tried to duplicated the results and couldn't - so it is most likely a error in the data. Arduino directory - contains some test sketches for the Arduino. Data - contains some of the test collected data (not much) Processing directory - contains the processing code. videos - contains some videos of my testing and maybe what LoRa sounds like (?) pictures - contains some pictures of my setup. Testing Videos Pictures - https://photos.app.goo.gl/4dYW1h3T82mpc8192 Usage At least 2 LoRa shields are needed. One is setup as a receiver, the other as a sender. I used LoRaReceiver_with_sd_logger_hmmmm and LoRaSender_with_gps for most of my early testing. However I never got any data to log to the SD card (hence the name *_hmmmm) The processing sketch \"serial_logging\" was used to monitor the serial port and create a file. (This worked mostly) Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Support Me If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller Other Projects https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/ Automation Technology Club WHAT ARE WE ABOUT? - Provide sharing opportunities for everyone. Microprocessor Technology Op Amp Technology Basic Electricity Electronics - Share technical information. - Improve the productivity and value of our technical resources (you). - All Volunteer. All participants volunteer their time. - Cost: Free MEETINGS: - We currently meet Thursdays from 5:00 to 7:00 PM at the West Chester Library, West Chester Ohio Meetup - https://www.meetup.com/Automation-Technology-Club/ Google Community - https://plus.google.com/communities/101659244920289753698 YouTube Meeting Channel - https://www.youtube.com/channel/UCNtBoACTGP85GEUWz-XgCnw Credits Copyright (c) 2017 LeRoy Miller License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"Sketches for testing LoRa"},{"location":"projects/other/LoRa_Demos/LoRaTesting/#sketches-for-testing-lora","text":"Information on the Linksprite LoRa boards can be found here: https://github.com/YaoQ/pcduino-lora-AP http://linksprite.com/wiki/index.php5?title=DIY_low-cost_LoRa_gateway_based_on_pcDuino#2._Program_Arduino_Uno I was unable to get Linksprites sketch to compile (??).","title":"Sketches for testing LoRa"},{"location":"projects/other/LoRa_Demos/LoRaTesting/#installation","text":"libraries required: arduino-LoRa https://github.com/sandeepmistry/arduino-LoRa TinyGPSPlus https://github.com/mikalhart/TinyGPSPlus SD card library DS1307 library","title":"Installation"},{"location":"projects/other/LoRa_Demos/LoRaTesting/#general-information","text":"It is possiable (unlikely) that I did get a package from about 8 miles away. I've tried to duplicated the results and couldn't - so it is most likely a error in the data. Arduino directory - contains some test sketches for the Arduino. Data - contains some of the test collected data (not much) Processing directory - contains the processing code. videos - contains some videos of my testing and maybe what LoRa sounds like (?) pictures - contains some pictures of my setup. Testing Videos Pictures - https://photos.app.goo.gl/4dYW1h3T82mpc8192","title":"General Information"},{"location":"projects/other/LoRa_Demos/LoRaTesting/#usage","text":"At least 2 LoRa shields are needed. One is setup as a receiver, the other as a sender. I used LoRaReceiver_with_sd_logger_hmmmm and LoRaSender_with_gps for most of my early testing. However I never got any data to log to the SD card (hence the name *_hmmmm) The processing sketch \"serial_logging\" was used to monitor the serial port and create a file. (This worked mostly)","title":"Usage"},{"location":"projects/other/LoRa_Demos/LoRaTesting/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/other/LoRa_Demos/LoRaTesting/#support-me","text":"If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller","title":"Support Me"},{"location":"projects/other/LoRa_Demos/LoRaTesting/#other-projects","text":"https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/","title":"Other Projects"},{"location":"projects/other/LoRa_Demos/LoRaTesting/#automation-technology-club","text":"WHAT ARE WE ABOUT? - Provide sharing opportunities for everyone. Microprocessor Technology Op Amp Technology Basic Electricity Electronics - Share technical information. - Improve the productivity and value of our technical resources (you). - All Volunteer. All participants volunteer their time. - Cost: Free MEETINGS: - We currently meet Thursdays from 5:00 to 7:00 PM at the West Chester Library, West Chester Ohio Meetup - https://www.meetup.com/Automation-Technology-Club/ Google Community - https://plus.google.com/communities/101659244920289753698 YouTube Meeting Channel - https://www.youtube.com/channel/UCNtBoACTGP85GEUWz-XgCnw","title":"Automation Technology Club"},{"location":"projects/other/LoRa_Demos/LoRaTesting/#credits","text":"Copyright (c) 2017 LeRoy Miller","title":"Credits"},{"location":"projects/other/LoRa_Demos/LoRaTesting/#license","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"License"},{"location":"projects/other/LoRa_Demos/LoRaTesting2/","text":"Working Information In order to log the data received on the SD card, I moved the card to a 2nd Arduino, using a the serial port to log the data. This appears to work. Current setup on Receive side: 1st Arduino used for the LoRa Shield 2nd Arduino used for SD shield On the Transmit side only one Arduino is used with a GPS unit attached to pin 7 and 8. See pictures of setup. Sketches used: LoRaReceiver LoRaSender_with_GPS SerialEvent_logged_to_SD_card Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Support Me If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller Other Projects https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/ Automation Technology Club WHAT ARE WE ABOUT? - Provide sharing opportunities for everyone. Microprocessor Technology Op Amp Technology Basic Electricity Electronics - Share technical information. - Improve the productivity and value of our technical resources (you). - All Volunteer. All participants volunteer their time. - Cost: Free MEETINGS: - We currently meet Thursdays from 5:00 to 7:00 PM at the West Chester Library, West Chester Ohio Meetup - https://www.meetup.com/Automation-Technology-Club/ Google Community - https://plus.google.com/communities/101659244920289753698 YouTube Meeting Channel - https://www.youtube.com/channel/UCNtBoACTGP85GEUWz-XgCnw Credits Copyright (c) 2017 LeRoy Miller License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"Working Information"},{"location":"projects/other/LoRa_Demos/LoRaTesting2/#working-information","text":"In order to log the data received on the SD card, I moved the card to a 2nd Arduino, using a the serial port to log the data. This appears to work. Current setup on Receive side: 1st Arduino used for the LoRa Shield 2nd Arduino used for SD shield On the Transmit side only one Arduino is used with a GPS unit attached to pin 7 and 8. See pictures of setup. Sketches used: LoRaReceiver LoRaSender_with_GPS SerialEvent_logged_to_SD_card","title":"Working Information"},{"location":"projects/other/LoRa_Demos/LoRaTesting2/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/other/LoRa_Demos/LoRaTesting2/#support-me","text":"If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller","title":"Support Me"},{"location":"projects/other/LoRa_Demos/LoRaTesting2/#other-projects","text":"https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/","title":"Other Projects"},{"location":"projects/other/LoRa_Demos/LoRaTesting2/#automation-technology-club","text":"WHAT ARE WE ABOUT? - Provide sharing opportunities for everyone. Microprocessor Technology Op Amp Technology Basic Electricity Electronics - Share technical information. - Improve the productivity and value of our technical resources (you). - All Volunteer. All participants volunteer their time. - Cost: Free MEETINGS: - We currently meet Thursdays from 5:00 to 7:00 PM at the West Chester Library, West Chester Ohio Meetup - https://www.meetup.com/Automation-Technology-Club/ Google Community - https://plus.google.com/communities/101659244920289753698 YouTube Meeting Channel - https://www.youtube.com/channel/UCNtBoACTGP85GEUWz-XgCnw","title":"Automation Technology Club"},{"location":"projects/other/LoRa_Demos/LoRaTesting2/#credits","text":"Copyright (c) 2017 LeRoy Miller","title":"Credits"},{"location":"projects/other/LoRa_Demos/LoRaTesting2/#license","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"License"},{"location":"projects/other/LoRa_Demos/LoRa_Temperature_and_Humidity_Network/","text":"Demo of LoRa Using four Microcontroller as nodes to send temperatures and humidity to a Gateway connected to Crouton and Google Sheets. Installation Please see the document here: https://docs.google.com/document/d/1FcrWj-z_tWK-HsLtbfy5d8vI9iUe61UU7hr4LCb7nRo/edit?usp=sharing Things To Do Usage Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Support Me If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller Other Projects https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/ Credits Copyright (c) 2018 LeRoy Miller License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"Demo of LoRa"},{"location":"projects/other/LoRa_Demos/LoRa_Temperature_and_Humidity_Network/#demo-of-lora","text":"Using four Microcontroller as nodes to send temperatures and humidity to a Gateway connected to Crouton and Google Sheets.","title":"Demo of LoRa"},{"location":"projects/other/LoRa_Demos/LoRa_Temperature_and_Humidity_Network/#installation","text":"Please see the document here: https://docs.google.com/document/d/1FcrWj-z_tWK-HsLtbfy5d8vI9iUe61UU7hr4LCb7nRo/edit?usp=sharing","title":"Installation"},{"location":"projects/other/LoRa_Demos/LoRa_Temperature_and_Humidity_Network/#things-to-do","text":"","title":"Things To Do"},{"location":"projects/other/LoRa_Demos/LoRa_Temperature_and_Humidity_Network/#usage","text":"","title":"Usage"},{"location":"projects/other/LoRa_Demos/LoRa_Temperature_and_Humidity_Network/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/other/LoRa_Demos/LoRa_Temperature_and_Humidity_Network/#support-me","text":"If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller","title":"Support Me"},{"location":"projects/other/LoRa_Demos/LoRa_Temperature_and_Humidity_Network/#other-projects","text":"https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/","title":"Other Projects"},{"location":"projects/other/LoRa_Demos/LoRa_Temperature_and_Humidity_Network/#credits","text":"Copyright (c) 2018 LeRoy Miller","title":"Credits"},{"location":"projects/other/LoRa_Demos/LoRa_Temperature_and_Humidity_Network/#license","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"License"},{"location":"projects/other/Wireless_Demos/","text":"Another Wireless Demo Various libraries are needed depending on what/which wireless technology you will be using. These all pretty much do the same thing, as the demo was to see how far each could transmit inside a building with walls, and metal sheveling. The LoRa demo is different in it transmits the temperature to a oled receiver. The reason was I already had that code written and working so it was easier to just reuse it. The other sketches, the transmitter have a button that is pushed, and the receiver will blink a LED. 5 Different technologies are used: LoRa (915Mhz), ESP8266 Wifi MESH (2.4ghz), nRF24L01 (2.4ghz), Moteino RFM12B (915mhz), FS1000A (ASK 433mhz). More Resources RFM12B https://www.sparkfun.com/products/retired/12031 nRF24L01 http://www.lydiard.plus.com/nrf24l01_1.htm Moteino Leo (Boards I have) - https://lowpowerlab.com/2013/04/24/moteino-leo-atmega32u4-based-moteino/ ESP8266 Mesh Networking (painlessMesh) - https://github.com/gmag11/painlessMesh LoRa - There is a lot of information about LoRa - but don't confuse it with LoRaWAN they really are two very different things. Some General Information can be found here: https://www.seeedstudio.com/RFM95-Ultra-long-Range-Transceiver-Module%2FLoRa-Module%2Fsupport-868M-frequency-p-2807.html FS1000A - There is also a lot of information about these - here is the library I used - https://github.com/madsci1016/Arduino-EasyTransfer Some more information, they are now using RadioHead Library but otherwise the information is good: https://microcontrollerelectronics.com/fs1000a-wireless-rf433-transmit-and-receive-module-pair/ Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Support Me If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller Other Projects https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/ Credits Copyright (c) 2018 LeRoy Miller License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"Another Wireless Demo"},{"location":"projects/other/Wireless_Demos/#another-wireless-demo","text":"Various libraries are needed depending on what/which wireless technology you will be using. These all pretty much do the same thing, as the demo was to see how far each could transmit inside a building with walls, and metal sheveling. The LoRa demo is different in it transmits the temperature to a oled receiver. The reason was I already had that code written and working so it was easier to just reuse it. The other sketches, the transmitter have a button that is pushed, and the receiver will blink a LED. 5 Different technologies are used: LoRa (915Mhz), ESP8266 Wifi MESH (2.4ghz), nRF24L01 (2.4ghz), Moteino RFM12B (915mhz), FS1000A (ASK 433mhz).","title":"Another Wireless Demo"},{"location":"projects/other/Wireless_Demos/#more-resources","text":"RFM12B https://www.sparkfun.com/products/retired/12031 nRF24L01 http://www.lydiard.plus.com/nrf24l01_1.htm Moteino Leo (Boards I have) - https://lowpowerlab.com/2013/04/24/moteino-leo-atmega32u4-based-moteino/ ESP8266 Mesh Networking (painlessMesh) - https://github.com/gmag11/painlessMesh LoRa - There is a lot of information about LoRa - but don't confuse it with LoRaWAN they really are two very different things. Some General Information can be found here: https://www.seeedstudio.com/RFM95-Ultra-long-Range-Transceiver-Module%2FLoRa-Module%2Fsupport-868M-frequency-p-2807.html FS1000A - There is also a lot of information about these - here is the library I used - https://github.com/madsci1016/Arduino-EasyTransfer Some more information, they are now using RadioHead Library but otherwise the information is good: https://microcontrollerelectronics.com/fs1000a-wireless-rf433-transmit-and-receive-module-pair/","title":"More Resources"},{"location":"projects/other/Wireless_Demos/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/other/Wireless_Demos/#support-me","text":"If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller","title":"Support Me"},{"location":"projects/other/Wireless_Demos/#other-projects","text":"https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/","title":"Other Projects"},{"location":"projects/other/Wireless_Demos/#credits","text":"Copyright (c) 2018 LeRoy Miller","title":"Credits"},{"location":"projects/other/Wireless_Demos/#license","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"License"},{"location":"projects/other/project-hot-wheels-10-525ghz-radar-gun/","text":"20140525 - Hot Wheels 10.525ghz radar gun - Update #2 http://www.edparadis.com/radar/ The above website takes apart one of the Hot Wheels radar guns, and has some great pictures of the components. Something that you might notice is that the gun itself is very much like the little gun we have. The biggest difference is it\u2019s in a waveguide that helps to direct where the radar signal goes. But otherwise it is very much like what we have. One other thing you\u2019ll notice is that he also had to add an amplifier to get a signal he could use, I believe that there is an amp on the \u201ccontrol board\u201d but it may not have been easy to access that. You\u2019ll also note that his IF is also in the 10Hz to 150Hz range, which makes believe the hot wheels gun is using the HB100 or at least something that is very close to it. There are quite a few projects that are using the Hot Wheels gun, including a Weather Radar (well sort of), https://instruct1.cit.cornell.edu/Courses/ee476/FinalProjects/s2009/cdl32_mjc89/cdl32_mjc89/index.html Does make me wonder if we could use what we have an mirror the above project, looks like it might be a big project. And here\u2019s someone that \u201cmade\u201d a speed gun out of the Hot Wheels radar gun (What, this is already a speed gun???) http://makezine.com/projects/radar-speed-detector/ To make a real gun, we need more power which we are limited to using this unit. But we might beable to focus the waves better using something like this: It\u2019s a 10ghz (X-band) radar cone, it\u2019s tuned for the X-Band, and will direct the waves much better. This is very much like what is in a commercial radar gun (IF the cops were still using X-Band) It\u2019s still not going to be perfect, not with this unit, but it will be better. http://www.ebay.com/itm/10-GHZ-X-BAND-17-DB-GAIN-HORN-ANTENNA-MA86551-NEW-/141295562369?pt=US_Radio_Comm_Antennas hash=item20e5df2e81 I would like to try to tune the gun, but for that we need tuning forks (Any should work, I think) as long as we know at what Hz they vibrate. (IE: a fork vibrating at 200Hz should be about 6.3 or 6.4 MPHs Hz/31.36 = MPH) Short of having any tuning forks there is no sure way to know that what we are doing is working correctly or not. One Idea I have is to roll a hot wheels car, see what the hot wheels guns says, and then roll it again and see what our gun says. Hopefully they will be the same or close to the same - But that method has a problem that is the push was a little more or a little less then results would be a little different. SO if anyone has any tuning forks that we know the vibration of bring them to this Thursdays meeting and we will see if we can figure out!","title":"Hot Wheels 10.524Ghz Radar Gun"},{"location":"projects/other/project-hot-wheels-10-525ghz-radar-gun/SUMMARY/","text":"Summary First Chapter","title":"Summary"},{"location":"projects/other/project-hot-wheels-10-525ghz-radar-gun/SUMMARY/#summary","text":"First Chapter","title":"Summary"},{"location":"projects/other/project-hot-wheels-10-525ghz-radar-gun/chapter1/","text":"First Chapter GitBook allows you to organize your book into chapters, each chapter is stored in a separate file like this one.","title":"First Chapter"},{"location":"projects/other/project-hot-wheels-10-525ghz-radar-gun/chapter1/#first-chapter","text":"GitBook allows you to organize your book into chapters, each chapter is stored in a separate file like this one.","title":"First Chapter"},{"location":"projects/retroComputers/Commodore/","text":"PI1541 1541 Drive Emulator. https://cbm-pi1541.firebaseapp.com/ https://github.com/pi1541/Pi1541 stand for a raspberry pi - what I used for the PI1541 https://www.thingiverse.com/thing:3455891 Vice Commodore Emulator http://vice-emu.sourceforge.net/windows.html https://sourceforge.net/projects/vice-emu/ Combian (Commodore 64 on Raspberry PI) https://cmaiolino.wordpress.com/ PI Lizard full raspbain image - boots to Vice for raspberry pi https://pilizard.blogspot.com/2017/11/the-pi-lizards-64-images.html SD2IEC Info (PI1541 supports part of this(?) anyway) https://www.thefuturewas8bit.com/sd2iec-info","title":"Commodore"},{"location":"projects/retroComputers/TRS80model100SDdrive/","text":"Make a replacement drive for the TRS80 model 100/Tandy 102 and other varants of this machine. This isn't a direct replacement for the PDD, but still allows for saving and loading of programs from a SD card. https://www.zx81keyboardadventure.com/2017/08/model-100-micro-sd-card-reader-mytesed.html http://www.zx81keyboardadventure.com/2017/06/using-sd-cards-with-trs-80-model-100.html https://www.zx81keyboardadventure.com/2017/09/the-trs-80-model-100-mytesed-is-alive.html https://www.youtube.com/watch?v=7AtsHzl9WMc -- My idea is to combine the WIFI Modem, and this into one device, giving the Tandy 102 access to both files, and the internet or at least the network. To save on hardware, I've ordered some ESP32 devices that have OLEDs (for displaying updates on what it's doing), SD cards, and can run on batteries (if needed/wanted). They also have buttons that maybe useful for changing modes or something. For example, saving the active BASIC file: OPEN \"COM:57I1D\" FOR OUTPUT AS 1: PRINT #1,\"SAVE MYFILE.BA\": CLOSE 1: SAVE \"COM:57I1D\" Or loading a BASIC file from the Interface: OPEN \"COM:57I1D\" FOR OUTPUT AS 1: PRINT #1,\"LOAD MYFILE.BA\": CLOSE 1: LOAD \"COM:57I1D\" Possibly the easiest method to save or load BASIC program is to add some of the below lines to a program listings. Alternatively an option once the code base is a little more on the stable side would be the development of a menu-ing system, but that's for latter. Save a BASIC file to SD Card 900 OPEN \"COM:57I1D\" FOR OUTPUT AS 1 910 PRINT #1,\"save testme.ba\" 920 CLOSE 1 930 SAVE \"COM:57I1D\" Load BASIC file to SD Card 10 OPEN \"COM:57I1D\" FOR OUTPUT AS 1 20 PRINT #1,\"load testme.ba\" 30 CLOSE 1 40 LOAD \"COM:57I1D\" Copy a RAM Text File to the SD Card 10 MAXFILES=2 20 OPEN \"RAM:TXT2RD.DO\" FOR INPUT AS 1 30 OPEN \"COM:57I1D\" FOR OUTPUT AS 2 40 PRINT #2, \"SAVE TXTFIL.DO\" 50 LINE INPUT #1, Z$ 60 PRINT #2,Z$ 70 IF EOF(1) THEN GOTO 90 80 GOTO 50 90 PRINT #2, CHR$(26) 100 CLOSE 1: CLOSE 2 Copy a File from the SD Card to a RAM Text File 10 MAXFILES=2 20 OPEN \"RAM:TXT2RD.DO\" FOR OUTPUT AS 1 30 OPEN \"COM:57I1D\" FOR OUTPUT AS 2 40 PRINT #2, \"LOAD TXTFIL.DO\" 50 LINE INPUT #2, Z$ 60 PRINT #1,Z$ 70 IF EOF(1) THEN GOTO 90 80 GOTO 50 90 PRINT #1, CHR$(26) 100 CLOSE 1: CLOSE 2","title":"TRS80model100SDdrive"},{"location":"projects/retroComputers/appleIIfileserver(adtpro)/","text":"Everything you need to know: http://adtpro.com/","title":"appleIIfileserver(adtpro)"},{"location":"projects/retroComputers/wifiModem/","text":"https://subethasoftware.com/2018/02/28/wire-up-your-own-rs-232-wifi-modem-for-under-10-using-esp8266-and-zimodem-firmware/ https://github.com/bozimmerman/Zimodem The one I used on a NodeMCU ESP8266 (I believe) https://github.com/RolandJuno/esp8266_modem and the original https://github.com/jsalin/esp8266_modem This one is mostly working on the ESP32 and has OLED support https://github.com/DrZingo/c64-wifimodem Not working is the telnet server, and web information page This is the original Hayes Command Set https://en.wikipedia.org/wiki/Hayes_command_set#The_basic_Hayes_command_set ESP32 Serial Bridge https://github.com/AlphaLima/ESP32-Serial-Bridge","title":"wifiModem"},{"location":"projects/robot/Anki_Vector_SDK/","text":"","title":"Anki Vector SDK"},{"location":"projects/robot/BittyBot/","text":"Bitty Bot Code for the Bitty Bot Rover. Installation TODO: Describe the installation process Usage TODO: Write usage instructions Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Credits LeRoy Miller License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"BittyBot"},{"location":"projects/robot/BittyBot/#bitty-bot","text":"Code for the Bitty Bot Rover.","title":"Bitty Bot"},{"location":"projects/robot/BittyBot/#installation","text":"TODO: Describe the installation process","title":"Installation"},{"location":"projects/robot/BittyBot/#usage","text":"TODO: Write usage instructions","title":"Usage"},{"location":"projects/robot/BittyBot/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/robot/BittyBot/#credits","text":"LeRoy Miller","title":"Credits"},{"location":"projects/robot/BittyBot/#license","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"License"},{"location":"projects/robot/BittyBot2Library/","text":"Bitty Bot Testing Library for Bitty Bot Rover. Version 2 of a Bitty Bot Motor Library, not working correctly. For something that is working, that this library was based from see the testing-class branch of this repository. Updated for testing Sept 4, 2016 Installation TODO: Describe the installation process Usage Put BittyBot folder in your libraries directory, restart the IDE, and test it out. A number of changes have happened to update the library: include \"BittyBot2.h\" create a BittyBot object - BittyBot BittyBot2(PWMLPin, PWMRPin, L1Pin, L2Pin, L3Pin, L4Pin); BittyBot.begin(); // This setups the pins for output, it sets a speed of zero, and sets the drive pins to low, and calibrates the wheels to the magnetic sensor BittyBot.Speed(LeftSpeed, RightSpeed); BittyBot.update(); //checks to see if motors have been running for a specific time period. Time is passed with the movement commands BittyBot.leftTight(time); //turn in place to the left BittyBot.rightTight(time); //turn in place to the right BittyBot.left(time); //turn left going forward BittyBot.stop(); //stop all motors and pwm. No delay BittyBot.right(time); //turn right going forward BittyBot.forward(time); //move the robot forward BittyBot.back(time); // move the robot backward BittyBot.IsRunning(); //returns a 1 if the motors should be on and running, and a zero if they should be off and stopped. This can be used for loops, or for checks to see if it really is moving BittyBot.calibrate(); //used by the begin sub-routine, could be used to reset the wheels if you think they have gotten too far from each other. Does not reset the drive pins to low, so a stop just after might be needed. See Library Sketch for some examples. Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Credits LeRoy Miller This is my very 2nd Arduino Library, it was not as easy to convert the class sketch to a library, and this library is currently broken. Oct 3, 2015 License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"BittyBot 2"},{"location":"projects/robot/BittyBot2Library/#bitty-bot","text":"Testing Library for Bitty Bot Rover. Version 2 of a Bitty Bot Motor Library, not working correctly. For something that is working, that this library was based from see the testing-class branch of this repository. Updated for testing Sept 4, 2016","title":"Bitty Bot"},{"location":"projects/robot/BittyBot2Library/#installation","text":"TODO: Describe the installation process","title":"Installation"},{"location":"projects/robot/BittyBot2Library/#usage","text":"Put BittyBot folder in your libraries directory, restart the IDE, and test it out. A number of changes have happened to update the library: include \"BittyBot2.h\" create a BittyBot object - BittyBot BittyBot2(PWMLPin, PWMRPin, L1Pin, L2Pin, L3Pin, L4Pin); BittyBot.begin(); // This setups the pins for output, it sets a speed of zero, and sets the drive pins to low, and calibrates the wheels to the magnetic sensor BittyBot.Speed(LeftSpeed, RightSpeed); BittyBot.update(); //checks to see if motors have been running for a specific time period. Time is passed with the movement commands BittyBot.leftTight(time); //turn in place to the left BittyBot.rightTight(time); //turn in place to the right BittyBot.left(time); //turn left going forward BittyBot.stop(); //stop all motors and pwm. No delay BittyBot.right(time); //turn right going forward BittyBot.forward(time); //move the robot forward BittyBot.back(time); // move the robot backward BittyBot.IsRunning(); //returns a 1 if the motors should be on and running, and a zero if they should be off and stopped. This can be used for loops, or for checks to see if it really is moving BittyBot.calibrate(); //used by the begin sub-routine, could be used to reset the wheels if you think they have gotten too far from each other. Does not reset the drive pins to low, so a stop just after might be needed. See Library Sketch for some examples.","title":"Usage"},{"location":"projects/robot/BittyBot2Library/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/robot/BittyBot2Library/#credits","text":"LeRoy Miller This is my very 2nd Arduino Library, it was not as easy to convert the class sketch to a library, and this library is currently broken. Oct 3, 2015","title":"Credits"},{"location":"projects/robot/BittyBot2Library/#license","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"License"},{"location":"projects/robot/CompactRoverLibrary/","text":"BittyBot Compact Rover Library for the BittyBot Compact Rover. Mar 17, 2017 Copyright (C) LeRoy Miller based on the BittyBot Library Installation TODO: Describe the installation process Usage Put CompactRover folder in your libraries directory, restart the IDE, and test it out. A number of changes have happened to update the library: include \"CompactRover.h\" create a BittyBot object named bot CompactRovert bot(LeftPin, LeftPWMPin, RightPin, RightPWMPin); In void setup() put: bot.begin(); // This setups the pins for output, it sets a speed of zero, and sets the drive pins to low bot.update(); //checks to see if motors have been running for a specific time period. Time is passed with the movement commands, and should be called often while IsRunning flag is true. bot.leftTight(time, PWMspeed); //turn in place to the left bot.rightTight(time, PWMspeed); //turn in place to the right bot.left(time, PWMspeed); //turn left going forward bot.stop(); //stop all motors and pwm. No delay bot.right(time, PWMspeed); //turn right going forward bot.forward(time, PWMspeed); //move the robot forward bot.back(time, PWMspeed); // move the robot backward bot.IsRunning(); //returns a 1 if the motors should be on and running, and a zero if they should be off and stopped. This can be used for loops, or for checks to see if it really is moving A few examples are included. Changes from BittyBot2 library removed BittyBot.Speed(), removed BittyBot.calibration(), a number of changes to the motor drive setup. CompactRover uses 4 wires for speed and direction, while BittyBot Rover uses 6 wires. Some small code cleanup. Sketches for BittyBot Rover should be easy to convert for the Compact Rover, with only a few minor changes in the code. Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Credits Copyright (C) LeRoy Miller, Mar 17, 2017 License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"Compact Rover"},{"location":"projects/robot/CompactRoverLibrary/#bittybot-compact-rover","text":"Library for the BittyBot Compact Rover. Mar 17, 2017 Copyright (C) LeRoy Miller based on the BittyBot Library","title":"BittyBot Compact Rover"},{"location":"projects/robot/CompactRoverLibrary/#installation","text":"TODO: Describe the installation process","title":"Installation"},{"location":"projects/robot/CompactRoverLibrary/#usage","text":"Put CompactRover folder in your libraries directory, restart the IDE, and test it out. A number of changes have happened to update the library: include \"CompactRover.h\" create a BittyBot object named bot CompactRovert bot(LeftPin, LeftPWMPin, RightPin, RightPWMPin); In void setup() put: bot.begin(); // This setups the pins for output, it sets a speed of zero, and sets the drive pins to low bot.update(); //checks to see if motors have been running for a specific time period. Time is passed with the movement commands, and should be called often while IsRunning flag is true. bot.leftTight(time, PWMspeed); //turn in place to the left bot.rightTight(time, PWMspeed); //turn in place to the right bot.left(time, PWMspeed); //turn left going forward bot.stop(); //stop all motors and pwm. No delay bot.right(time, PWMspeed); //turn right going forward bot.forward(time, PWMspeed); //move the robot forward bot.back(time, PWMspeed); // move the robot backward bot.IsRunning(); //returns a 1 if the motors should be on and running, and a zero if they should be off and stopped. This can be used for loops, or for checks to see if it really is moving A few examples are included.","title":"Usage"},{"location":"projects/robot/CompactRoverLibrary/#changes-from-bittybot2-library","text":"removed BittyBot.Speed(), removed BittyBot.calibration(), a number of changes to the motor drive setup. CompactRover uses 4 wires for speed and direction, while BittyBot Rover uses 6 wires. Some small code cleanup. Sketches for BittyBot Rover should be easy to convert for the Compact Rover, with only a few minor changes in the code.","title":"Changes from BittyBot2 library"},{"location":"projects/robot/CompactRoverLibrary/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/robot/CompactRoverLibrary/#credits","text":"Copyright (C) LeRoy Miller, Mar 17, 2017","title":"Credits"},{"location":"projects/robot/CompactRoverLibrary/#license","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"License"},{"location":"projects/robot/Formula_PI/","text":"","title":"Formula PI"},{"location":"projects/robot/Karotz/","text":"Nabaztag and Karotz were internet connected \"rabbits\" They are quite old, and getting hard to find - but here is some information about them. https://en.wikipedia.org/wiki/Nabaztag https://nabaztag.com/# These can still be setup, using the above website, but are limited as to what they can do. These were originally a French project/company - and the English translation is sometimes a little funky. http://nabaztag.wizz.cc/ http://www.openkarotz.org/ http://opennag.net/ There are a few projects that take the shells, and put a raspberry pi in them, I couldn't find any of these projects right now.","title":"Karotz"},{"location":"projects/robot/MoonBot_MU_Vision_Sensor/","text":"Docs: http://wiki.morpx.com/index.php/Get_Started_with_the_MoonBot_Kit Moonbot software: https://github.com/mu-opensource/MoonBot https://github.com/mu-opensource/MuVisionSensor3 Website: http://www.morpx.com/index.html","title":"MoonBot MU Vision Sensor"},{"location":"projects/robot/RobotNavigationusingRFID/","text":"Robot Navigation using RFID/NFC My Instructables on my build: https://www.instructables.com/id/Robotic-Indoor-Navigation-With-RFIDNFC-Tags Parts: IC Card RC522 RFID MFRC-522 Reader Sensor \\$2.00 http://www.ebay.com/itm/311745603238?_trksid=p2060353.m1438.l2649 ssPageName=STRK%3AMEBIDX%3AIT Cards: 10 PCS NFC smart card tag 1k S50 IC 13.56Mhz Read/Write RFID \\$2.52 http://www.ebay.com/itm/262611831216?_trksid=p2060353.m1438.l2649 ssPageName=STRK%3AMEBIDX%3AIT 25mm NFC Tags Stickers NTAG213 Stickers 50pcs 9.99 http://www.ebay.com/itm/322083313127?_trksid=p2060353.m1438.l2649 var=511012085777 ssPageName=STRK%3AMEBIDX%3AIT The Idea: https://www.intorobotics.com/5-cheap-methods-for-indoor-robot-localization-ble-beacon-apriltags-wifi-subpos-nfc-and-rfid/ Youtube Video: https://www.youtube.com/watch?v=iHCBRCjRnm8 Other Location based ideas: http://www.localino.net/","title":"Robot Indoor Navigation using RFID"},{"location":"projects/robot/SunFounder_PISmartCar/","text":"SunFounder PI Smart Car Interesting robot that uses the Raspberry PI 3B (not the 3B+, or any other Raspberry PI). The robot has text to speech, and also does speech to text. This works best with the Raspberry PI image provided, thou it wasn't easy to find. It is also based on Rasbian Jessie. DO NOT UPGRADE THE IMAGE, this will end up causing problems if you do, and you'll need to start from scratch again. This was finally found in the forums, the link was wrong, but was close and the image was downloadable. The robot was made sometime in 2016 or 2017. Tutorials Build Video Part 1 Build Video Part 2 PI Smart Github Repository PI Smart Car Github Repository Local Image/Backup","title":"PISmartCar"},{"location":"projects/robot/SunFounder_PISmartCar/#sunfounder-pi-smart-car","text":"Interesting robot that uses the Raspberry PI 3B (not the 3B+, or any other Raspberry PI). The robot has text to speech, and also does speech to text. This works best with the Raspberry PI image provided, thou it wasn't easy to find. It is also based on Rasbian Jessie. DO NOT UPGRADE THE IMAGE, this will end up causing problems if you do, and you'll need to start from scratch again. This was finally found in the forums, the link was wrong, but was close and the image was downloadable. The robot was made sometime in 2016 or 2017. Tutorials Build Video Part 1 Build Video Part 2 PI Smart Github Repository PI Smart Car Github Repository Local Image/Backup","title":"SunFounder PI Smart Car"},{"location":"projects/robot/Vector_Commands/","text":"Anki-Vector-Command-List List of everything you can currently do with the Anki Vector robot Compile into one list from the Vector app Commands Starting Off Say \"Hey Vector\" to get his attention. Alternatively you can press the button on his back instead Introductions Hey Vector, hello Hey Vector, good morning Hey Vector, good afternoon Hey Vector, good evening Hey Vector, goodbye -- Hey Vector, my name is Luke Hey Vector, what's my name? -- Hey Vector, Who am I? Utility Hey Vector, whats the weather like? Hey Vector, whats the weather in London? -- Hey Vector, set a timer for 5 minutes? Hey Vector, check the timer Hey Vector, cancel the timer -- Hey Vector, what time is it? Hey Vector, take a picture Hey Vector, take a picture of me Hey Vector, take a picture of us Commands Hey Vector, come here Hey Vector, look at me -- Hey Vector, start exploring Hey Vector, stop exploring -- Hey Vector, be quiet -- Hey Vector, go to sleep Hey Vector, good night -- Hey Vector, good robot Hey Vector, bad robot -- Hey Vector, go to your charger Fun Hey Vector, give me a fist bumb -- Hey Vector, find your cube Hey Vector, do a wheelstand Hey Vector, roll your cube -- Hey Vector, listen to the music -- Hey Vector, play blackjack or Hey Vector, play a game? Hey Vector, quit blackjack -- Hey Vector, fire works or Hey Vector, Celebrate -- Hey Vector, Happy New Year -- Hey Vector, Happy Birthday or Hey Vector, How old are you? Questions Hey Vector, I have a question --wait-- who is Jarvis? Hey Vector, I have a question --wait-- what is the distance between New York and London? Hey Vector, I have a question --wait-- what is the tallest building? Hey Vector, I have a question --wait-- what is the definition of artificial intelligence? Hey Vector, I have a question --wait-- how many calories in an avocado? Hey Vector, I have a question --wait-- what time is it in Sydney? Hey Vector, I have a question --wait-- how many miles in a kilometer? Hey Vector, I have a question --wait-- what is 10 pounds in euros? Hey Vector, I have a question --wait-- what is the square root of 144? Hey Vector, question --wait-- who are you? Hey Vector, question --wait-- who was Anki? Hey Vector, question --wait-- who is R2D2?","title":"Command List"},{"location":"projects/robot/Vector_Commands/#anki-vector-command-list","text":"List of everything you can currently do with the Anki Vector robot Compile into one list from the Vector app","title":"Anki-Vector-Command-List"},{"location":"projects/robot/Vector_Commands/#commands","text":"","title":"Commands"},{"location":"projects/robot/Vector_Commands/#starting-off","text":"Say \"Hey Vector\" to get his attention. Alternatively you can press the button on his back instead","title":"Starting Off"},{"location":"projects/robot/Vector_Commands/#introductions","text":"Hey Vector, hello Hey Vector, good morning Hey Vector, good afternoon Hey Vector, good evening Hey Vector, goodbye -- Hey Vector, my name is Luke Hey Vector, what's my name? -- Hey Vector, Who am I?","title":"Introductions"},{"location":"projects/robot/Vector_Commands/#utility","text":"Hey Vector, whats the weather like? Hey Vector, whats the weather in London? -- Hey Vector, set a timer for 5 minutes? Hey Vector, check the timer Hey Vector, cancel the timer -- Hey Vector, what time is it? Hey Vector, take a picture Hey Vector, take a picture of me Hey Vector, take a picture of us","title":"Utility"},{"location":"projects/robot/Vector_Commands/#commands_1","text":"Hey Vector, come here Hey Vector, look at me -- Hey Vector, start exploring Hey Vector, stop exploring -- Hey Vector, be quiet -- Hey Vector, go to sleep Hey Vector, good night -- Hey Vector, good robot Hey Vector, bad robot -- Hey Vector, go to your charger","title":"Commands"},{"location":"projects/robot/Vector_Commands/#fun","text":"Hey Vector, give me a fist bumb -- Hey Vector, find your cube Hey Vector, do a wheelstand Hey Vector, roll your cube -- Hey Vector, listen to the music -- Hey Vector, play blackjack or Hey Vector, play a game? Hey Vector, quit blackjack -- Hey Vector, fire works or Hey Vector, Celebrate -- Hey Vector, Happy New Year -- Hey Vector, Happy Birthday or Hey Vector, How old are you?","title":"Fun"},{"location":"projects/robot/Vector_Commands/#questions","text":"Hey Vector, I have a question --wait-- who is Jarvis? Hey Vector, I have a question --wait-- what is the distance between New York and London? Hey Vector, I have a question --wait-- what is the tallest building? Hey Vector, I have a question --wait-- what is the definition of artificial intelligence? Hey Vector, I have a question --wait-- how many calories in an avocado? Hey Vector, I have a question --wait-- what time is it in Sydney? Hey Vector, I have a question --wait-- how many miles in a kilometer? Hey Vector, I have a question --wait-- what is 10 pounds in euros? Hey Vector, I have a question --wait-- what is the square root of 144? Hey Vector, question --wait-- who are you? Hey Vector, question --wait-- who was Anki? Hey Vector, question --wait-- who is R2D2?","title":"Questions"},{"location":"projects/robot/anki_vector_cozmo/","text":"Cozmo and Vector stuff Vector Play Fetch Cozmo Information","title":"Anki Vector and Cozmo"},{"location":"projects/robot/anki_vector_cozmo/#cozmo-and-vector-stuff","text":"Vector Play Fetch Cozmo Information","title":"Cozmo and Vector stuff"},{"location":"projects/robot/duckietown/","text":"Duckie Town https://www.duckietown.org/ Ohio Roster https://ohio.duckietown.org/ohio/ohio-roster Duckiebot (DB18) Instructions: https://docs.duckietown.org/DT18/ Setup/Instructions https://docs.duckietown.org/DT19/ (current) Duckietown Shell https://github.com/duckietown/duckietown-shell","title":"Duckie Town"},{"location":"projects/robot/duckietown/#duckie-town","text":"https://www.duckietown.org/ Ohio Roster https://ohio.duckietown.org/ohio/ohio-roster","title":"Duckie Town"},{"location":"projects/robot/duckietown/#duckiebot-db18","text":"Instructions: https://docs.duckietown.org/DT18/","title":"Duckiebot (DB18)"},{"location":"projects/robot/duckietown/#setupinstructions","text":"https://docs.duckietown.org/DT19/ (current)","title":"Setup/Instructions"},{"location":"projects/robot/duckietown/#duckietown-shell","text":"https://github.com/duckietown/duckietown-shell","title":"Duckietown Shell"},{"location":"projects/robot/herojr/","text":"Nothing Here Yet","title":"Hero Jr Project"},{"location":"projects/robot/herojr/#nothing-here-yet","text":"","title":"Nothing Here Yet"},{"location":"projects/robot/sparkfunredbot/","text":"Sparkfun - RedBot Use library in Arduino IDE for examples, use Arduino UNO for the board.","title":"Sparkfunredbot"},{"location":"projects/robot/HeroJr-StarWarsDay/","text":"Hero Jr Special Star Wars Day Code Installation This is of my Hero Jr project - (only with a special code) - I bought a Nonworking Hero Jr some time ago, after many years, I finally decided what to do with it. I replaced all of the boards with modern hardware. An Arduino Mega 2560 became the brains, a SR04 ultrasonic replaced the Polaroid ultrasonic, L298 Motor Drivers were used, and a eMic 2 speech synthesizer for his voice. Some other modern hardware was used as well. I keep the 12v stepper, and DC motor. The main goal of the project was to keep it looking as original as posssible. And I I've managed to do just that. This December (2015) our local library is having a Star Wars day, and I was asked to bring it. So this is a special sketch just for that day. A MP3 player will be added for additional Star Wars sound effects. This is very early stage of the \"Special Star Wars Day Code\" video can be found here: https://www.youtube.com/watch?v=amXbPWCTQHg Usage TODO: Write usage instructions Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Credits LeRoy Miller License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"General Info"},{"location":"projects/robot/HeroJr-StarWarsDay/#hero-jr-special-star-wars-day-code","text":"","title":"Hero Jr Special Star Wars Day Code"},{"location":"projects/robot/HeroJr-StarWarsDay/#installation","text":"This is of my Hero Jr project - (only with a special code) - I bought a Nonworking Hero Jr some time ago, after many years, I finally decided what to do with it. I replaced all of the boards with modern hardware. An Arduino Mega 2560 became the brains, a SR04 ultrasonic replaced the Polaroid ultrasonic, L298 Motor Drivers were used, and a eMic 2 speech synthesizer for his voice. Some other modern hardware was used as well. I keep the 12v stepper, and DC motor. The main goal of the project was to keep it looking as original as posssible. And I I've managed to do just that. This December (2015) our local library is having a Star Wars day, and I was asked to bring it. So this is a special sketch just for that day. A MP3 player will be added for additional Star Wars sound effects. This is very early stage of the \"Special Star Wars Day Code\" video can be found here: https://www.youtube.com/watch?v=amXbPWCTQHg","title":"Installation"},{"location":"projects/robot/HeroJr-StarWarsDay/#usage","text":"TODO: Write usage instructions","title":"Usage"},{"location":"projects/robot/HeroJr-StarWarsDay/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/robot/HeroJr-StarWarsDay/#credits","text":"LeRoy Miller","title":"Credits"},{"location":"projects/robot/HeroJr-StarWarsDay/#license","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"License"},{"location":"projects/robot/HeroJr-StarWarsDay/Demo/","text":"Midpointe Library \u201cStar Wars Day\u201d December 12 Demo Items selected for Martha Matthews Demo: (what we want the kids to get excited about) Latest Demo: 20151030 Latest Demo Tape Videos: https://www.youtube.com/watch?v=8CiRdOWwBLw https://www.youtube.com/watch?v=j-iI3EXgOpc https://www.youtube.com/watch?v=v5nnZaRjUiQ https://www.youtube.com/watch?v=ZWc71PyQ9sM https://www.youtube.com/watch?v=iwDfqH8-7z4 ** 1. https://www.youtube.com/watch?v=ipSUzAiHT50 ** 2. https://www.youtube.com/watch?v=E61FqZ1rzMA https://www.youtube.com/watch?v=DkSEkLGLnR0 ** 3 .https://www.youtube.com/watch?v=iIo2t8hObbs feature=youtu.be ** 4. https://www.youtube.com/watch?v=rnjKI4fJYhk 5. ** https://www.youtube.com/watch?v=i1yZ60KN3VE ** ** 6. https://www.youtube.com/watch?v=jrZAHj4Hu7M ** 7. https://www.youtube.com/watch?v=2FScPXEyifA ** 8. https://www.youtube.com/watch?v=h_E2bXM0RiQ ** 9. https://www.youtube.com/watch?v=orDKwfIWsxA **10 New Trailer/Music/Sounds MP3 music and sounds Ones with stars are more complete working videos, not just tests. 3 Laws Info: https://docs.google.com/document/d/17M6yG1iy0a_YRygvvAShr4ao8BpyFsjwAgvbXYu6fS0/edit Really Old Code: (From Jim?) https://docs.google.com/document/d/1Wb5VGys6_dgWfRY-lcKTid65CH9tgcLqm8i8NeVztH0/edit Pictures sort of: https://plus.google.com/+LeRoyMiller/posts/Vsz6LHzugxa https://plus.google.com/+LeRoyMiller/posts/YiWk1Yto5sw Code on GitHub - doesn\u2019t look like it up to date (? hmmmmm I hope I didn\u2019t delete the good code from codebender) https://github.com/kd8bxp/Arduino-Mega-Hero-Jr-Project CodeBender Code (This appears to be the current version of the code!): https://codebender.cc/sketch:106002 April 19, 2015 Older Versions also on CodeBender: https://codebender.cc/sketch:105886 April 18, 2015 https://codebender.cc/sketch:105639 April 17, 2015 https://codebender.cc/sketch:96932 Mar 23, 2015 Anything else I have is written on paper, and contains wire hookup notes, and ideas for improvements.","title":"Midpointe Library Dec 12 Demo"},{"location":"projects/robot/HeroJr-StarWarsDay/Outline_Script_for_Star_Wars_Day_Hero_Jr/","text":"Outline Script for Star Wars Day, Hero Junior. 10 minute target. One of the Hero Videos on Youtube had a \u201ccheckout\u201d video. It was just simple one step checks, but it struck me as interesting as it reminded me of stuff you would hear going on while you were in space. A bunch of boring equipment checkout sequences. Might appeal to kids or set background. I was thinking that doing this in the dead time before the demo might be entertaining. https://youtu.be/BLtsDegME2Q (That is the original startup, my startup tests are a little different, but similar) Mine: https://youtu.be/ipSUzAiHT50?t=3m2s dont get a woki mad. hyperdrive button Timing will be a major issue with this demo, so hopefully we can pull it off. What about: 1) Star Wars Opening music (44 seconds) speak over top \u201cWelcome to Star Wars Day.\u201d 2) wait for end of music, rewrite test2() subroutine for Star Wars day. Play Rebel Music while testing\u2026(? might be too long of a file or cause a delay with random sounds?) a. battery voltage b. ultrasonic c. light test d. sound test e. play daisy (not really a Star Wars thing, but it\u2019s important for all Robots to know) f. drive motor testing g. random star wars sound 1 h. random star wars sound 2 i. random star wars sound 3 j. Test leds k. cylon test 3) speak \u201cI am a Hero Junior Robot, and one of my favorite movies is\u201d speak \u201cStar Wars, I wish I could fight against the \u201c play imperial music (37 seconds) speak \u201cEmpire alongside my friends 4) wait till imperial ends: play 2 r2d2 sounds (short 2 seconds to 4 seconds) play C3PO sound (2 or 3 seconds), speak \u201cR 2 D 2 and C 3 P O\u201d 5) wait for all sounds to finish. 6) speak \u201cbut I must admit I am a little afraid of\u2026\u2026 \u201c play R2D2 jawa/scream 7) wait for end sound, play Darth Vader breathing. backup a foot(ish) speak \u201cDarth Vader. \u201c 8) speak \u201cWhere\u2019s my blaster\u201d, play blaster sound, cylon leds (2 cycles) 9) wait for sounds to end. Move forward 1 foot(ish) speak \u201cDid I get him? Oh I think I just scared him off.\u201d 10) speak \u201cWasn\u2019t expecting that from a Happy Dancing Robot? \u201c play star-wars-cantina (2.50 minutes) Dance routine 11) cyclon(5) - cycle the leds 5 times 11a) May The Force Be With you. mp3 12) speak \u201cHit a button on my keypad to hear a Star Wars\u201d speak \u201cSound. Hit E to start over\u201d 13) random star wars sound routine - E key with go back to number 1 any other key will play a random sound (without doing much more, it will be completely random for each key) 14) Time out and return to number 1 after about 30 seconds (? longer? shorter?) xxx mousebot. joystick remote, ultrasonic demo blocks obstacles joystick demo (pre program) in between. grand poo bah LIST OF MP3 CLIPS: badfeel.mp3 - Luke I have a bad feeling about this 2 seconds (renamed) 1. blaster.mp3 - blaster sound 1 second breath.mp3 - Darth Vader 4 seconds c3po.mp3 -\"I am C3PO human....\" 3 seconds carpet.mp3 - Leia \"Walking carpet\" 3 seconds checked.mp3 - Vader Send a scanning crew.... 3 seconds crops.mp3 - Han Solo - Traving thur hyperspace 3 seconds deity.mp3 - C3PO I believe they think I am a deity 43 seconds detonatr.mp3 - C3PO because he's holding a thermal detonatr - 2 seconds disturb.mp3 - Luke Obi Wan - Another Great Disturbance - 10 seconds disturb.mp3 renamed droid2.mp3 - R2D2 sounds 1 second droid3.mp3 - R2D2 sounds (streaming may not work with MP3 player)? droids.mp3 - This aren't the Droids ObiWan - 21 seconds ewokpara.mp3 - Ewok parade - 34 seconds faith.mp3 - I find your lack of faith distrubing - Vader - 3 seconds fire.mp3 - You may fire when ready - Govener Tarkin - 1 seconds force.mp3 - the force will be with you always - Obiwan - 2 seconds force1.mp3 - same as above, better version - 3 seconds force2.mp3 - May the Force Be With you -Han Solo - 2 seconds fstrong.mp3 - Vader The force is strong with this one 1 second - (renamed) helpme.mp3 - Leia - Help me Obi Wan - 3 seconds humnbehv.mp3 - C3PO - sometimes I just don't understand 2 seconds imperial.mp3 - Imperial March 37 seconds jawascr.mp3 - Jawa R2D2 scream 2 seconds jawastun.mp3 - Jawa Stun gun - 1 seconds luck.mp3 - Obi Wan - 3 seconds master.mp3 - Vader 6 seconds notout.mp3 - Han Solo 2 seconds plans.mp3 - Vader - 6 seconds - Command Tear this ship apart I want those plans princess.mp3 - Luke and Han Solo talking about Princess Leia - 21 seconds r2d2wst1.mp3 - R2D2 sounds 1 second r2d2wst2.mp3 - R2D2 sounds (who me) 1 second r2d2wst3.mp3 - R2D2 sound (nice sound) - 2 second r2d2wst4.mp3 - R2D2 sound (frustration sound?) - streaming ? r2d2wstl.mp3 - R2D2 sound 1 second R2D2.mp3 - R2D2 sound 2 seconds - (renamed) rebel.mp3 - Rebel Theme Music - 4 minutes long (long long) (renamed) rebel.mp3 (renamed) remotes.mp3 - Han Solo - Good against remotes.... 5 seconds reward.mp3 - Han Solo - No Reward is worth this... 2 seconds saberoff.mp3 - 1 seconds saberon.mp3 - streaming(?) sandppl.mp3 - Obi-Wan - Sand people are easy - 6 seconds sandppl.mp3 (renamed) scum.mp3 - Obi-Wan - Mosily Space port you'll never find.... 10 seconds starwars.mp3 - Episode 4 opening music - 44 seconds cantina.mp3 - Cantina Song - 2:47 seconds (renamed) swvader03 - Vader - Yes my master - 1 seconds vader03.mp3 (renamed) wait.mp3 - C3PO - wait a minute - 1 seconds duelfate.mp3 - Dual of Fates song - 4:14 seconds - another long one, great song thou. ======================================================== Additional clips: \u201cOne small step for man\u201d (might be too old). (Not really a Star Wars thing) May \u201cYou may fire when ready\u201d Governor Tarkin Maintenance self checkout Maintenance self check \u201ccurrent date/time\u201d initiated. (No Real Time clock in mine) Check Left turn. (robot turns left) - Sure Check Right Turn (robot turns right) - Sure Check Forward (robot moves forward) - Sure Check Reverse (robot moves backwards) - Sure Check module temperature (robot speaks current temperature). - No Temperature module - Battery Voltage sure. Robot diagnostics completed successfully. Terminate self checkout Robot repeats self checkout again after appropriate interval (or alternate checkouts). Voice introduction by the Hero Junior. Star Wars Day, December 12 2015 at the Midpointe Library, West Chester, Ohio. Play StarWars Sound Effects (Introduction) beep light saber up down, darth vader breathing,blaster firing, you may fire when ready. episode 4 theme music. interactive pushbutton. music 1 (include dance motion?) This is the epsiode 4 entro music, so very dramatic - probably don\u2019t want to much random movement. (apx 45 seconds long) music 2 (motion) Darth vader intro music, again dramatic, may not want to much movement, maybe LEDs while firing blaster. (Imperial March - apx 37 seconds long) c3pO 3 (motion) Only a few clips of C3PO, range from apx 2 seconds to 45 secs. Only going to use one clip in intro - other clips in random button pushes. blaster sound (motion) What about spinning around as he fires the blaster. (LEDs for blaster as well) less than a second. rebel music (motion) Dramatic music, not sure? (Apx 4 mins...need something big to do with this) cantina (moving around suggested) For sure, this is fun dancy kind of music that goes for like 2 minutes 50 secs. darth vader (motion) (He\u2019s scared, maybe backup a little bit) (Breath Sounds apx 4 seconds) r2d2 sounds (motion) Yes, not sure what type of motion thou. (got quite a few r2 sounds most are about 2 or 3 seconds, some are shorter and some longer) - Only a hand full in intro - reset in button pushes. R2D2 getting shot by jawas - might be something we could do in intro (?) Hokey Pokey Music with motion Want more movement :-) 5. Wait for button pushes for \u201crandom\u201d star wars sounds effects of other things. Time out after while, will restart from step 1. (maybe do cyclon led cycle while waiting for button push)","title":"Outline of Program"},{"location":"projects/robot/HeroJr-StarWarsDay/Star_Wars_Hero_Jr_Punch_List/","text":"Star Wars Hero Jr Punch List Nov 12: Complete video and demo by Nov 12 and present promotional clips and photo to library. Droid Dancing: https://youtu.be/pltAyNrlqJM * Edited Version Star Wars Day Alpha: https://youtu.be/XPImtiUIs-c Photo\u2019s * Option A * Option B https://youtu.be/XPImtiUIs-c Option C Brian Generating Add forward movement (small steps) to beginning song (needs movement to enchance action) Develope a guide to get cable around hall effect sensor. Resolve audiance volume problem (not loud enought for crowd) for speech synthesizer and mp3. Fix dancing past end of music issue. Get Poo Bah to clean remainder of robot (he was a janitor you know). Address the loudness (lack thereoff) for the StarWars day demo Non Hero Punch List: Nov 12: Complete 2 4x4 boxes Get bitty rover RC working ---------------------------------History--------------------------------------------------------------------- Implement sound player on arduino. Get all sounds implement (eliminating dead time), Finish choriographing video and implement video for advertising by Nov 12 demo. Grand Poo Bah 1. Blue tooth devices a. find xmitter and charge it b. find receiver and put with xmitter. c. connect two together and confirm operation and mode. d. devices would not connect. substituted fm xmitter with radio. 2. MP3 Player a. find relay outputs b. connect MP3 Player to arduino. c. new unit came in but LeRoy already found solution. 3. Practice video editing. a. Downloaded Video Editing tool and became proficient in use. b. Ready to use if required.","title":"Punch List"},{"location":"projects/robot/HeroJr-StarWarsDay/pictures_from_Star_Wars_Day/","text":"Some random pictures from Star Wars Day Dec. 12, 2015 {width=\"6.5in\" height=\"11.541666666666666in\"} {width=\"6.5in\" height=\"11.541666666666666in\"} {width=\"6.5in\" height=\"3.6527777777777777in\"} {width=\"6.5in\" height=\"11.541666666666666in\"} {width=\"6.5in\" height=\"11.541666666666666in\"} {width=\"6.5in\" height=\"11.541666666666666in\"} {width=\"6.5in\" height=\"11.541666666666666in\"} {width=\"6.5in\" height=\"11.541666666666666in\"} {width=\"6.5in\" height=\"11.541666666666666in\"} {width=\"6.5in\" height=\"3.6527777777777777in\"}","title":"Pictures"},{"location":"projects/robot/L298MotorDrive/","text":"L298 Motor Drive Demos Sketches show different ways to make DC motors have direction and speed control. Things To Do Usage Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Support Me If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller Other Projects https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/ Credits Copyright (c) 2017 LeRoy Miller License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"L298 Motor Driver"},{"location":"projects/robot/L298MotorDrive/#l298-motor-drive-demos","text":"Sketches show different ways to make DC motors have direction and speed control.","title":"L298 Motor Drive Demos"},{"location":"projects/robot/L298MotorDrive/#things-to-do","text":"","title":"Things To Do"},{"location":"projects/robot/L298MotorDrive/#usage","text":"","title":"Usage"},{"location":"projects/robot/L298MotorDrive/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/robot/L298MotorDrive/#support-me","text":"If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller","title":"Support Me"},{"location":"projects/robot/L298MotorDrive/#other-projects","text":"https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/","title":"Other Projects"},{"location":"projects/robot/L298MotorDrive/#credits","text":"Copyright (c) 2017 LeRoy Miller","title":"Credits"},{"location":"projects/robot/L298MotorDrive/#license","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"License"},{"location":"projects/robot/LittleHammerHeadRobot/","text":"Unofficial Code for The Little Hammerhead Robot other Rabbit Robots can be found here: https://www.rabbitrobots.com Installation Demos and test code for the Keyes L-298P Shield Things To Do Usage Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Support Me If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller Other Projects https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/ Credits Copyright (c) 2017 LeRoy Miller License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"Unofficial Code for The Little Hammerhead Robot"},{"location":"projects/robot/LittleHammerHeadRobot/#unofficial-code-for-the-little-hammerhead-robot","text":"other Rabbit Robots can be found here: https://www.rabbitrobots.com","title":"Unofficial Code for The Little Hammerhead Robot"},{"location":"projects/robot/LittleHammerHeadRobot/#installation","text":"Demos and test code for the Keyes L-298P Shield","title":"Installation"},{"location":"projects/robot/LittleHammerHeadRobot/#things-to-do","text":"","title":"Things To Do"},{"location":"projects/robot/LittleHammerHeadRobot/#usage","text":"","title":"Usage"},{"location":"projects/robot/LittleHammerHeadRobot/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/robot/LittleHammerHeadRobot/#support-me","text":"If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller","title":"Support Me"},{"location":"projects/robot/LittleHammerHeadRobot/#other-projects","text":"https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/","title":"Other Projects"},{"location":"projects/robot/LittleHammerHeadRobot/#credits","text":"Copyright (c) 2017 LeRoy Miller","title":"Credits"},{"location":"projects/robot/LittleHammerHeadRobot/#license","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"License"},{"location":"projects/robot/LittleHammerHeadRobot/Pictures/","text":"my build of The Little Hammerhead Robot Mine is still an early prototype - This is currently version .4 other Rabbit Robots can be found here: https://www.rabbitrobots.com Installation Things To Do Usage Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Support Me If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller Other Projects https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/ Credits Copyright (c) 2017 LeRoy Miller License This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"my build of The Little Hammerhead Robot"},{"location":"projects/robot/LittleHammerHeadRobot/Pictures/#my-build-of-the-little-hammerhead-robot","text":"Mine is still an early prototype - This is currently version .4 other Rabbit Robots can be found here: https://www.rabbitrobots.com","title":"my build of The Little Hammerhead Robot"},{"location":"projects/robot/LittleHammerHeadRobot/Pictures/#installation","text":"","title":"Installation"},{"location":"projects/robot/LittleHammerHeadRobot/Pictures/#things-to-do","text":"","title":"Things To Do"},{"location":"projects/robot/LittleHammerHeadRobot/Pictures/#usage","text":"","title":"Usage"},{"location":"projects/robot/LittleHammerHeadRobot/Pictures/#contributing","text":"Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request","title":"Contributing"},{"location":"projects/robot/LittleHammerHeadRobot/Pictures/#support-me","text":"If you find this or any of my projects useful or enjoyable please support me. Anything I do get goes to buy more parts and make more/better projects. https://www.patreon.com/kd8bxp https://ko-fi.com/lfmiller","title":"Support Me"},{"location":"projects/robot/LittleHammerHeadRobot/Pictures/#other-projects","text":"https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w https://kd8bxp.blogspot.com/","title":"Other Projects"},{"location":"projects/robot/LittleHammerHeadRobot/Pictures/#credits","text":"Copyright (c) 2017 LeRoy Miller","title":"Credits"},{"location":"projects/robot/LittleHammerHeadRobot/Pictures/#license","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses","title":"License"},{"location":"projects/robot/chassis-kits/Actobotics/","text":"Half-Pint Runt Rover\u2122 Robot Kit by Actobotics\u00ae #637154 $29.99 + $6.99 http://www.ebay.com/itm/272032021340?_trksid=p2060353.m1438.l2649 ssPageName=STRK%3AMEBIDX%3AIT Sprout Runt Rover\u2122 Robot Kit by Actobotics\u00ae #637160 $17.99 + $6.99 http://www.ebay.com/itm/272032021342?_trksid=p2060353.m1438.l2649 ssPageName=STRK%3AMEBIDX%3AIT Whippersnapper Runt Rover\u2122 Robot Kit by Actobotics\u00ae #637156 $28.99 + $6.99 http://www.ebay.com/itm/272032021341?_trksid=p2060353.m1438.l2649 ssPageName=STRK%3AMEBIDX%3AIT Junior Runt Rover\u2122 Robot Kit by Actobotics\u00ae #637142 $27.99 + $6.99 http://www.ebay.com/itm/272032021344?_trksid=p2060353.m1438.l2649 ssPageName=STRK%3AMEBIDX%3AIT Bogie Runt Rover Kit By Actobotics # 637162 $69.99 + $6.99 http://www.ebay.com/itm/281843544585?_trksid=p2060353.m1438.l2649 ssPageName=STRK%3AMEBIDX%3AIT Gooseneck Robot Kit By Actobotics Part # 637140 $89.99 + $6.99 http://www.ebay.com/itm/272049766382?_trksid=p2060353.m1438.l2649 ssPageName=STRK%3AMEBIDX%3AIT","title":"Actobotics"},{"location":"tutorials/ArduinoMKRVidor4000_fpga_board/","text":"Arduino MKR Vidor 4000 FPGA Information https://hackaday.com/2018/07/30/hands-on-with-new-arduino-fpga-board-mkr-vidor-4000/ https://github.com/vidor-libraries https://www.arduino.cc/en/Tutorial/VidorHDL https://forum.arduino.cc/index.php?topic=581316.0 https://forum.arduino.cc/index.php?board=125.0","title":"Arduino MKR Vidor 4000"},{"location":"tutorials/ArduinoMKRVidor4000_fpga_board/#arduino-mkr-vidor-4000-fpga-information","text":"https://hackaday.com/2018/07/30/hands-on-with-new-arduino-fpga-board-mkr-vidor-4000/ https://github.com/vidor-libraries https://www.arduino.cc/en/Tutorial/VidorHDL https://forum.arduino.cc/index.php?topic=581316.0 https://forum.arduino.cc/index.php?board=125.0","title":"Arduino MKR Vidor 4000 FPGA Information"},{"location":"tutorials/InstallChromeOSonOldDesktop/","text":"In this video I show you how to install Chrome OS on your old Laptop or PC this is not Fade OS or Cloud OS this is Chrome Os and you also get access to Google play so you can run Android apps with Chrome OS of your PC or Laptop! Kedar Nimbalkar Youtube channel: https://www.youtube.com/channel/UCjQ-... Kendra's Install Tutorial: https://youtu.be/4gZYV0RWJQ8 All Files Needed Linux Mint: https://www.linuxmint.com/download.php Rufus: https://rufus.ie/ Brunch Files: https://github.com/sebanc/brunch/rele... Install.Sh File: https://raw.githubusercontent.com/shr... Chrome OS Files: https://cros-updates-serving.appspot.... Bu an Old PC on eBay: Optiplex 3020: https://ebay.to/2W7ifqx Optiplex 9020:https://ebay.to/2y7ioSL Follow Me On Twitter: https://twitter.com/theetaprime Follow Me On Instagram: https://www.instagram.com/etaprime/ Equipment I Use: Screen Capture Device: https://amzn.to/2STpX4C Tool Kit: https://amzn.to/2M6l9WS Soldering Station: https://amzn.to/2FtdVeu Camera: https://amzn.to/2M6KFLB Tripod: https://amzn.to/2CmdYVY Raspberry Pi 3 B Plus: https://amzn.to/2DTF0Db Flirc Case: https://amzn.to/2OBQTXz DISCLAIMER: This video and description contains affiliate links, which means that if you click on one of the product links, I\u2019ll receive a small commission at no extra cost to you! This video and Channel and Video are for viewers 14 years older and up. This video is not made for viewers under the age of 14. If you are under 14 years of age, you do not have permission to view this video. THIS VIDEO IS FOR EDUCATIONAL PURPOSES ONLY!","title":"InstallChromeOSonOldDesktop"},{"location":"tutorials/azuresphere/","text":"Set up an account for Azure Sphere https://docs.microsoft.com/en-us/azure-sphere/install/azure-directory-account Configure networking https://docs.microsoft.com/en-us/azure-sphere/install/configure-wifi Quickstart: Deploy an application over the air https://docs.microsoft.com/en-us/azure-sphere/quickstarts/qs-first-deployment azure-sphere-samples https://github.com/Azure/azure-sphere-samples/tree/master/Samples https://portal.azure.com","title":"Azure Sphere General Information"},{"location":"tutorials/document/","text":"Documenting Arduino Projects Came across this site a few days ago, it builds websites from Mark Down text. The sites can then be uploaded to github and make good documentation. http://www.mkdocs.org/ Here is just a demo/test site I made in about 3 mins and pushed to github. http://kd8bxp.github.io/Arduino-Projects/ (I am in the process of updating this with all of the projects here) Making the mark down text is easy, and the mkdoc app makes it look nice! https://guides.github.com/features/mastering-markdown/ Mkdocs - Mark Down - http://www.mkdocs.org/user-guide/configuration/ Make Docs is a fast, simple static site generator, that\u2019s geared towards building project documentation. Written in Markdown, and configured with a single YAML configuration file. Easy to use, and fast to generate a professional looking site with documents. Projects hosted on github, \u201ccome with\u201d pages - and the files generated by Mkdocs can be used as these pages. https://pages.github.com/ Mkdocs even makes it easy to push (while it\u2019s creating) the documents to github. http://www.mkdocs.org/#deploying If you don\u2019t want to use Github to host your documents - that\u2019s ok too, the site generated is static, and should work on anything that can host a site (I didn\u2019t have much luck getting to work with google sites thou) This site directly supports documents from github and others: https://readthedocs.org/ Git hub has a 3 min (read) tutorial on using \u201cGithub Markdown\u201d https://guides.github.com/features/mastering-markdown/ and mkdocs has some additional things specifically for it: http://www.mkdocs.org/user-guide/configuration/ As I said once before there is also something called: Gitbook which can generate books from various types of files, Markdown is one. http://www.gitbook.com There are a couple (more than a couple) online Word (and others) coverters that will convert a file to markdown. Mkdocs can use those files to build a website. Here are a couple I tried: http://word-to-markdown.herokuapp.com/ http://dillinger.io/ WIKIs are another alternative for Documentation projects: Here are a few that have free accounts, I\u2019ve not tried any of them. https://wiki.wiki/ https://meta.miraheze.org/wiki/Miraheze http://tiddlyspot.com/ http://www.shoutwiki.com/w/index.php?title=Special%3ASearch search=arduino fulltext= Markdown style guides/Formatting guides General guides for using Markdown, not all markdown sites support all the codes, but most follow simuliar styles. Github Flavored Syntax Pivotal Tracker Formatting your Text with Markdown Markdown Table Generator Google Sites Google Sites also has a couple of templates that are good for documenting. Here are a couple of DEMO sites I made - and to make changes to them is easy in the online editor: https://sites.google.com/site/demokd8bxp/ (good basic site) https://sites.google.com/site/kd8bxpwiki/ (Much like a wiki, and easy to add, change and update)","title":"Document Projects"},{"location":"tutorials/document/#documenting-arduino-projects","text":"Came across this site a few days ago, it builds websites from Mark Down text. The sites can then be uploaded to github and make good documentation. http://www.mkdocs.org/ Here is just a demo/test site I made in about 3 mins and pushed to github. http://kd8bxp.github.io/Arduino-Projects/ (I am in the process of updating this with all of the projects here) Making the mark down text is easy, and the mkdoc app makes it look nice! https://guides.github.com/features/mastering-markdown/ Mkdocs - Mark Down - http://www.mkdocs.org/user-guide/configuration/ Make Docs is a fast, simple static site generator, that\u2019s geared towards building project documentation. Written in Markdown, and configured with a single YAML configuration file. Easy to use, and fast to generate a professional looking site with documents. Projects hosted on github, \u201ccome with\u201d pages - and the files generated by Mkdocs can be used as these pages. https://pages.github.com/ Mkdocs even makes it easy to push (while it\u2019s creating) the documents to github. http://www.mkdocs.org/#deploying If you don\u2019t want to use Github to host your documents - that\u2019s ok too, the site generated is static, and should work on anything that can host a site (I didn\u2019t have much luck getting to work with google sites thou) This site directly supports documents from github and others: https://readthedocs.org/ Git hub has a 3 min (read) tutorial on using \u201cGithub Markdown\u201d https://guides.github.com/features/mastering-markdown/ and mkdocs has some additional things specifically for it: http://www.mkdocs.org/user-guide/configuration/ As I said once before there is also something called: Gitbook which can generate books from various types of files, Markdown is one. http://www.gitbook.com There are a couple (more than a couple) online Word (and others) coverters that will convert a file to markdown. Mkdocs can use those files to build a website. Here are a couple I tried: http://word-to-markdown.herokuapp.com/ http://dillinger.io/ WIKIs are another alternative for Documentation projects: Here are a few that have free accounts, I\u2019ve not tried any of them. https://wiki.wiki/ https://meta.miraheze.org/wiki/Miraheze http://tiddlyspot.com/ http://www.shoutwiki.com/w/index.php?title=Special%3ASearch search=arduino fulltext=","title":"Documenting Arduino Projects"},{"location":"tutorials/document/#markdown-style-guidesformatting-guides","text":"General guides for using Markdown, not all markdown sites support all the codes, but most follow simuliar styles. Github Flavored Syntax Pivotal Tracker Formatting your Text with Markdown Markdown Table Generator","title":"Markdown style guides/Formatting guides"},{"location":"tutorials/document/#google-sites","text":"Google Sites also has a couple of templates that are good for documenting. Here are a couple of DEMO sites I made - and to make changes to them is easy in the online editor: https://sites.google.com/site/demokd8bxp/ (good basic site) https://sites.google.com/site/kd8bxpwiki/ (Much like a wiki, and easy to add, change and update)","title":"Google Sites"},{"location":"tutorials/mojov3fpga/","text":"Mojo V3 FPGA Informaiton https://alchitry.com/blogs/tutorials/getting-started-with-the-mojo https://forum.alchitry.com/ https://github.com/embmicro","title":"Mojo V3 FPGA"},{"location":"tutorials/mojov3fpga/#mojo-v3-fpga-informaiton","text":"https://alchitry.com/blogs/tutorials/getting-started-with-the-mojo https://forum.alchitry.com/ https://github.com/embmicro","title":"Mojo V3 FPGA Informaiton"},{"location":"tutorials/syncthing/","text":"What is Syncthing? Syncthing replaces proprietary sync and cloud services with something open, trustworthy and decentralized. Your data is your data alone and you deserve to choose where it is stored, if it is shared with some third party and how it's transmitted over the Internet. In otherwords, you can create your own directory that \"auto\" sync between each other. Syncthing uses a website for setup, that can be found at http://localhost:8384 setup in general is pretty easy and pretty straight forward. Installing Syncthing for Debian/Ubuntu based distros More Debian Install Info The basics: The stable channel is updated with stable release builds, usually every first Tuesday of the month. # Add the release PGP keys: curl -s https://syncthing.net/release-key.txt | sudo apt-key add - # Add the stable channel to your APT sources: echo deb https://apt.syncthing.net/ syncthing stable | sudo tee /etc/apt/sources.list.d/syncthing.list # Update and install syncthing: sudo apt-get update sudo apt-get install syncthing Cross-platform There is a setup for Windows boxes, macOS, and a Android app. Please see the above website for more information. Starting the program. There are a couple of different ways to start the program, you can use it \"on demand\" by typing syncthing in the terminal. But a better way is to setup syncthing to start when your user logs in. Here is the summary: Syncthing Docs How to set up a user service Create the user who should run the service, or choose an existing one. Probably this will be your own user account. Copy the Syncthing/etc/linux-systemd/user/syncthing.service file into the load path of the user instance. Enable and start the service: systemctl --user enable syncthing.service systemctl --user start syncthing.service Checking the service status To check if Syncthing runs properly you can use the status subcommand. To check the status of a system service: systemctl status syncthing@myuser.service To check the status of a user service: systemctl --user status syncthing.service The syncthing.service file can be found on Github Here is a summary of it: [Unit] Description=Syncthing - Open Source Continuous File Synchronization Documentation=man:syncthing(1) [Service] ExecStart=/usr/bin/syncthing -no-browser -no-restart -logflags=0 Restart=on-failure SuccessExitStatus=3 4 RestartForceExitStatus=3 4 # Hardening ProtectSystem=full PrivateTmp=true SystemCallArchitectures=native MemoryDenyWriteExecute=true NoNewPrivileges=true [Install] WantedBy=default.target","title":"Syncthing"},{"location":"tutorials/syncthing/#what-is-syncthing","text":"Syncthing replaces proprietary sync and cloud services with something open, trustworthy and decentralized. Your data is your data alone and you deserve to choose where it is stored, if it is shared with some third party and how it's transmitted over the Internet. In otherwords, you can create your own directory that \"auto\" sync between each other. Syncthing uses a website for setup, that can be found at http://localhost:8384 setup in general is pretty easy and pretty straight forward.","title":"What is Syncthing?"},{"location":"tutorials/syncthing/#installing-syncthing-for-debianubuntu-based-distros","text":"More Debian Install Info The basics: The stable channel is updated with stable release builds, usually every first Tuesday of the month. # Add the release PGP keys: curl -s https://syncthing.net/release-key.txt | sudo apt-key add - # Add the stable channel to your APT sources: echo deb https://apt.syncthing.net/ syncthing stable | sudo tee /etc/apt/sources.list.d/syncthing.list # Update and install syncthing: sudo apt-get update sudo apt-get install syncthing","title":"Installing Syncthing for Debian/Ubuntu based distros"},{"location":"tutorials/syncthing/#cross-platform","text":"There is a setup for Windows boxes, macOS, and a Android app. Please see the above website for more information.","title":"Cross-platform"},{"location":"tutorials/syncthing/#starting-the-program","text":"There are a couple of different ways to start the program, you can use it \"on demand\" by typing syncthing in the terminal. But a better way is to setup syncthing to start when your user logs in. Here is the summary: Syncthing Docs How to set up a user service Create the user who should run the service, or choose an existing one. Probably this will be your own user account. Copy the Syncthing/etc/linux-systemd/user/syncthing.service file into the load path of the user instance. Enable and start the service: systemctl --user enable syncthing.service systemctl --user start syncthing.service Checking the service status To check if Syncthing runs properly you can use the status subcommand. To check the status of a system service: systemctl status syncthing@myuser.service To check the status of a user service: systemctl --user status syncthing.service The syncthing.service file can be found on Github Here is a summary of it: [Unit] Description=Syncthing - Open Source Continuous File Synchronization Documentation=man:syncthing(1) [Service] ExecStart=/usr/bin/syncthing -no-browser -no-restart -logflags=0 Restart=on-failure SuccessExitStatus=3 4 RestartForceExitStatus=3 4 # Hardening ProtectSystem=full PrivateTmp=true SystemCallArchitectures=native MemoryDenyWriteExecute=true NoNewPrivileges=true [Install] WantedBy=default.target","title":"Starting the program."},{"location":"tutorials/xenonmesh/","text":"Particle Mesh Information Xenon Standalone https://support.particle.io/hc/en-us/articles/360044183314/#set-the-system_mode Xenon Without Mesh https://docs.particle.io/tutorials/learn-more/xenon-options/ Mesh Deprecation https://blog.particle.io/mesh-deprecation/","title":"Xenonmesh"},{"location":"tutorials/Arduino/Arduino_Mesh/","text":"Using APC220 Radios https://duino4projects.com/simple-arduino-wireless-mesh/","title":"Arduino Mesh"},{"location":"tutorials/Arduino/firmata/","text":"Firmata (Arduino Standard with pyfirmata) https://roboticsbackend.com/arduino-standard-firmata-tutorial/ Firmata Protocol https://github.com/firmata/protocol PyFirmata Easy for the Raspberry PI to control Arduino I/O using Standard Firmata and Pyfirmata https://pyfirmata.readthedocs.io/en/latest/pyfirmata.html Raspberry PI Tutorial: https://circuitdigest.com/microcontroller-projects/controlling-arduino-with-raspberry-pi-using-pyfirmata","title":"Firmata (Arduino Standard with pyfirmata)"},{"location":"tutorials/Arduino/firmata/#firmata-arduino-standard-with-pyfirmata","text":"https://roboticsbackend.com/arduino-standard-firmata-tutorial/","title":"Firmata (Arduino Standard with pyfirmata)"},{"location":"tutorials/Arduino/firmata/#firmata-protocol","text":"https://github.com/firmata/protocol","title":"Firmata Protocol"},{"location":"tutorials/Arduino/firmata/#pyfirmata","text":"Easy for the Raspberry PI to control Arduino I/O using Standard Firmata and Pyfirmata https://pyfirmata.readthedocs.io/en/latest/pyfirmata.html Raspberry PI Tutorial: https://circuitdigest.com/microcontroller-projects/controlling-arduino-with-raspberry-pi-using-pyfirmata","title":"PyFirmata"},{"location":"tutorials/Arduino/tutorials/","text":"Arduino Advanced Tutorials Typedef and Struct Microcontroller State machine with enum tutorial","title":"Arduino Advanced Tutorials"},{"location":"tutorials/Arduino/tutorials/#arduino-advanced-tutorials","text":"Typedef and Struct Microcontroller State machine with enum tutorial","title":"Arduino Advanced Tutorials"},{"location":"tutorials/CozmoSDKDocs/CozmoInfo/","text":"General Information for using ADB which is needed for the Cozmo SDK https://www.xda-developers.com/quickly-install-adb/ Phone needs to be in PTP mode, and USB Debugging needs to be turned on. Github repository for Cozmo SDk https://github.com/anki/cozmo-python-sdk Things to do Convert docs from rst files to md files","title":"Cozmo Information"},{"location":"tutorials/CozmoSDKDocs/CozmoInfo/#general-information-for-using-adb-which-is-needed-for-the-cozmo-sdk","text":"https://www.xda-developers.com/quickly-install-adb/ Phone needs to be in PTP mode, and USB Debugging needs to be turned on.","title":"General Information for using ADB which is needed for the Cozmo SDK"},{"location":"tutorials/CozmoSDKDocs/CozmoInfo/#github-repository-for-cozmo-sdk","text":"https://github.com/anki/cozmo-python-sdk","title":"Github repository for Cozmo SDk"},{"location":"tutorials/CozmoSDKDocs/CozmoInfo/#things-to-do","text":"Convert docs from rst files to md files","title":"Things to do"},{"location":"tutorials/CozmoSDKDocs/SDK/adb/","text":"Android Debug Bridge Important Android Debug Bridge (adb) is required ONLY for those users pairing an Android mobile device with Cozmo. Android Debug Bridge (adb) is necessary in order for the Cozmo SDK to work with Android mobile devices. Please ensure adb is installed before attempting to run the Cozmo SDK with a paired Android device. macOS Installation Type the following into a Terminal window (requires Homebrew to be installed): brew tap caskroom/cask brew cask install android-platform-tools Continue to final-install below to complete installation. Windows Installation In your internet browser, navigate to this link and download file platform-tools-latest-windows.zip to your Downloads folder. Open a File Explorer window to your Downloads folder and see that your downloaded file platform-tools-latest-windows.zip is there. Open a new File Explorer window and create a new folder in C:\\Users\\your_name named Android . Then, navigate into your new Android folder. You should now be inside folder C:\\Users\\your_name\\Android . Move the zip file you downloaded in step 1, platform-tools-latest-windows.zip , to your new Android folder at C:\\Users\\your_name\\Android . Right-click the platform-tools-latest-windows.zip file in C:\\Users\\your_name\\Android and select Extract All. With File Explorer, navigate to C:\\Users\\your_name\\Android\\platform-tools-latest-windows\\platform-tools and confirm that the adb is there. You will now add this path to your PATH environment variable in the next step. Add adb to your PATH environment variable. Right-click the Start menu and select System . Select Advanced System Settings -> Advanced -> Environment Variables . Under User Variables , select PATH and click Edit . Under Edit Environment Variables , click New and add the path to the folder containing adb (e.g. C:\\Users\\your_name\\Android\\platform-tools-latest-windows\\platform-tools ). Click OK on all dialog boxes to confirm your change. Confirm that the PATH is correctly pointing to adb. Open new a Command Prompt window. (To find the Command Prompt, you may use the search box in the lower left-hand corner of your screen.) Type adb and adb instructions should print out. Continue to final-install below to complete installation. Linux Installation In your internet browser, navigate to this link and download file platform-tools-latest-linux.zip . You may need to accept the license before downloading. Navigate to the zip file download location (e.g., \\~/Downloads) and extract the files. The","title":"ADB"},{"location":"tutorials/CozmoSDKDocs/SDK/adb/#android-debug-bridge","text":"Important Android Debug Bridge (adb) is required ONLY for those users pairing an Android mobile device with Cozmo. Android Debug Bridge (adb) is necessary in order for the Cozmo SDK to work with Android mobile devices. Please ensure adb is installed before attempting to run the Cozmo SDK with a paired Android device.","title":"Android Debug Bridge"},{"location":"tutorials/CozmoSDKDocs/SDK/adb/#macos-installation","text":"Type the following into a Terminal window (requires Homebrew to be installed): brew tap caskroom/cask brew cask install android-platform-tools Continue to final-install below to complete installation.","title":"macOS Installation"},{"location":"tutorials/CozmoSDKDocs/SDK/adb/#windows-installation","text":"In your internet browser, navigate to this link and download file platform-tools-latest-windows.zip to your Downloads folder. Open a File Explorer window to your Downloads folder and see that your downloaded file platform-tools-latest-windows.zip is there. Open a new File Explorer window and create a new folder in C:\\Users\\your_name named Android . Then, navigate into your new Android folder. You should now be inside folder C:\\Users\\your_name\\Android . Move the zip file you downloaded in step 1, platform-tools-latest-windows.zip , to your new Android folder at C:\\Users\\your_name\\Android . Right-click the platform-tools-latest-windows.zip file in C:\\Users\\your_name\\Android and select Extract All. With File Explorer, navigate to C:\\Users\\your_name\\Android\\platform-tools-latest-windows\\platform-tools and confirm that the adb is there. You will now add this path to your PATH environment variable in the next step. Add adb to your PATH environment variable. Right-click the Start menu and select System . Select Advanced System Settings -> Advanced -> Environment Variables . Under User Variables , select PATH and click Edit . Under Edit Environment Variables , click New and add the path to the folder containing adb (e.g. C:\\Users\\your_name\\Android\\platform-tools-latest-windows\\platform-tools ). Click OK on all dialog boxes to confirm your change. Confirm that the PATH is correctly pointing to adb. Open new a Command Prompt window. (To find the Command Prompt, you may use the search box in the lower left-hand corner of your screen.) Type adb and adb instructions should print out. Continue to final-install below to complete installation.","title":"Windows Installation"},{"location":"tutorials/CozmoSDKDocs/SDK/adb/#linux-installation","text":"In your internet browser, navigate to this link and download file platform-tools-latest-linux.zip . You may need to accept the license before downloading. Navigate to the zip file download location (e.g., \\~/Downloads) and extract the files. The","title":"Linux Installation"},{"location":"tutorials/CozmoSDKDocs/SDK/api.rst/","text":"The API cozmo cozmo.action cozmo.anim cozmo.annotate cozmo.audio cozmo.behavior cozmo.camera cozmo.conn cozmo.event cozmo.exceptions cozmo.faces cozmo.lights cozmo.nav_memory_map cozmo.objects cozmo.oled_face cozmo.opengl cozmo.pets cozmo.robot cozmo.robot_alignment cozmo.run cozmo.song cozmo.tkview cozmo.util cozmo.world Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"The API"},{"location":"tutorials/CozmoSDKDocs/SDK/api.rst/#the-api","text":"cozmo cozmo.action cozmo.anim cozmo.annotate cozmo.audio cozmo.behavior cozmo.camera cozmo.conn cozmo.event cozmo.exceptions cozmo.faces cozmo.lights cozmo.nav_memory_map cozmo.objects cozmo.oled_face cozmo.opengl cozmo.pets cozmo.robot cozmo.robot_alignment cozmo.run cozmo.song cozmo.tkview cozmo.util cozmo.world Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"The API"},{"location":"tutorials/CozmoSDKDocs/SDK/downloads.rst/","text":"Downloads SDK Examples Download Python example scripts that use the Cozmo SDK. macOS/Linux SDK Examples \\ cozmo_sdk_examples_0.0.0.tar.gz> Windows SDK Examples \\ cozmo_sdk_examples_0.0.0.zip> GitHub Clone, fork, or report issues on the GitHub cozmo-python-sdk repository . Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"Downloads"},{"location":"tutorials/CozmoSDKDocs/SDK/downloads.rst/#downloads","text":"","title":"Downloads"},{"location":"tutorials/CozmoSDKDocs/SDK/downloads.rst/#sdk-examples","text":"Download Python example scripts that use the Cozmo SDK. macOS/Linux SDK Examples \\ cozmo_sdk_examples_0.0.0.tar.gz> Windows SDK Examples \\ cozmo_sdk_examples_0.0.0.zip>","title":"SDK Examples"},{"location":"tutorials/CozmoSDKDocs/SDK/downloads.rst/#github","text":"Clone, fork, or report issues on the GitHub cozmo-python-sdk repository . Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"GitHub"},{"location":"tutorials/CozmoSDKDocs/SDK/getstarted.rst/","text":"Getting Started With the Cozmo SDK To make sure you get the best experience possible out of the SDK, please ensure you have followed the steps in the Initial Setup \\ /initial>. Cozmo SDK Forums Please visit our Cozmo SDK Forums where you can: Get assistance with your code Hear about upcoming SDK additions Share your work Join discussion about the SDK Be a part of the Cozmo SDK Community! Starting Up the SDK Plug the mobile device containing the Cozmo app into your computer. Open the Cozmo app on the phone. Make sure Cozmo is on and connected to the app via WiFi. Tap on the gear icon at the top right corner to open the Settings menu. Swipe left to show the Cozmo SDK option and tap the Enable SDK button. Make sure the SDK examples are downloaded from the Downloads page \\ /downloads>. On the computer, open Terminal (macOS/Linux) or Command Prompt (Windows) and type cd cozmo_sdk_examples , where cozmo_sdk_examples is the directory you extracted the examples into, and press Enter . Example Programs Walkthrough Video For your convenience, here is a video detailing the first few simple example programs. You can also find a simple text-based walkthrough of running your first program below. First Steps - \"Hello, World!\" Let's test your new setup by running a very simple program. This program instructs Cozmo to say \"Hello, World!\" - a perfect way to introduce him and you to the world of programming. The Program To run the program, using the same Terminal (macOS/Linux) / Command Prompt (Windows) window mentioned above: First, change to the 01_basics sub-directory of the tutorials directory. For macOS and Linux systems, type the following and press Enter : cd tutorials/01_basics For Windows systems, type the following and press Enter : cd tutorials\\01_basics Then, run the program. For macOS and Linux systems, type the following and press Enter : ./01_hello_world.py The same can also be achieved on macOS/Linux with: python3 01_hello_world.py For Windows systems, type the following and press Enter : py 01_hello_world.py If done correctly, Cozmo will say \"Hello, World!\" If Cozmo does not perform as expected, look at the first Terminal window and make sure no error messages appeared. If you continue to have issues, please seek help in the Forums. The code for the Hello World program can be viewed here. The usbmuxd (USB Multiplexor Daemon) must be installed on any computer system paired with an iOS device before running any programs. Installing iTunes will also install the usbmuxd on those systems. Linux users can install the usbmuxd module through the command line with sudo apt-get install usbmuxd. Make sure adb (Android Debug Bridge) is installed on your system prior to running a program with an Android device. See the Install page \\ initial> for instructions. You are now all set up to run Python programs on Cozmo. Next we will go over how to edit the above code to make Cozmo say something new. Let's write our first program. Next Steps - \"Night-Night\" Copy 01_hello_world.py to a new file named nightnight.py by doing the following: For macOS and Linux systems, type the following and press Enter : cp 01_hello_world.py nightnight.py For Windows systems, type the following and press Enter : copy 01_hello_world.py nightnight.py Now, nightnight.py is saved in the same folder as 01_hello_world.py. Open this new document in a source code editor or plain-text editor. Free source code editors, such as PyCharm Community Edition , Atom , Sublime , or TextWrangler can be found online. Anki does not provide tech support for third-party source code editors. Each line in the program relates to a specific function. import cozmo allows your program to access the Cozmo SDK code contained within the cozmo module. Text sandwiched between three ' marks is a Docstring. Docstrings are like comments, and are placed inside code to give information to the user. robot.say_text(\"Hello, World!\").wait_for_completed() is the core of the program: robot.say_text(\u2026) is the function that makes Cozmo speak a string out loud. \"Hello World\" is the string which Cozmo will speak. wait_for_completed() tells Cozmo to finish speaking before moving to the next line of code. Without this, our program would end before Cozmo said anything! Move to the line that starts with \"robot.say_text\" Select the phrase \"Hello World\". Do NOT select the parentheses or quotation marks around the phrase; those are necessary for Python to properly parse the command. Type in the new phrase you would like Cozmo to say. In this example, Cozmo will say \"Night Night\", so that line should look like this: robot.say_text(\"Night Night\").wait_for_completed() Save the nightnight.py file. Now you can run your program: For macOS and Linux systems, type the following into the same Terminal window and press Enter : ./nightnight.py For Windows systems, type the following into the same Command Prompt window and press Enter : py nightnight.py If done correctly, Cozmo will say the new phrase. Now that you have written your own Cozmo program, take a look at the rest of the Cozmo SDK and at the many other example programs to get more ideas. Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"Getting Started With the Cozmo SDK"},{"location":"tutorials/CozmoSDKDocs/SDK/getstarted.rst/#getting-started-with-the-cozmo-sdk","text":"To make sure you get the best experience possible out of the SDK, please ensure you have followed the steps in the Initial Setup \\ /initial>.","title":"Getting Started With the Cozmo SDK"},{"location":"tutorials/CozmoSDKDocs/SDK/getstarted.rst/#cozmo-sdk-forums","text":"Please visit our Cozmo SDK Forums where you can: Get assistance with your code Hear about upcoming SDK additions Share your work Join discussion about the SDK Be a part of the Cozmo SDK Community!","title":"Cozmo SDK Forums"},{"location":"tutorials/CozmoSDKDocs/SDK/getstarted.rst/#starting-up-the-sdk","text":"Plug the mobile device containing the Cozmo app into your computer. Open the Cozmo app on the phone. Make sure Cozmo is on and connected to the app via WiFi. Tap on the gear icon at the top right corner to open the Settings menu. Swipe left to show the Cozmo SDK option and tap the Enable SDK button. Make sure the SDK examples are downloaded from the Downloads page \\ /downloads>. On the computer, open Terminal (macOS/Linux) or Command Prompt (Windows) and type cd cozmo_sdk_examples , where cozmo_sdk_examples is the directory you extracted the examples into, and press Enter .","title":"Starting Up the SDK"},{"location":"tutorials/CozmoSDKDocs/SDK/getstarted.rst/#example-programs","text":"","title":"Example Programs"},{"location":"tutorials/CozmoSDKDocs/SDK/getstarted.rst/#walkthrough-video","text":"For your convenience, here is a video detailing the first few simple example programs. You can also find a simple text-based walkthrough of running your first program below.","title":"Walkthrough Video"},{"location":"tutorials/CozmoSDKDocs/SDK/getstarted.rst/#first-steps-hello-world33","text":"Let's test your new setup by running a very simple program. This program instructs Cozmo to say \"Hello, World!\" - a perfect way to introduce him and you to the world of programming.","title":"First Steps - \"Hello, World!\""},{"location":"tutorials/CozmoSDKDocs/SDK/getstarted.rst/#the-program","text":"To run the program, using the same Terminal (macOS/Linux) / Command Prompt (Windows) window mentioned above: First, change to the 01_basics sub-directory of the tutorials directory. For macOS and Linux systems, type the following and press Enter : cd tutorials/01_basics For Windows systems, type the following and press Enter : cd tutorials\\01_basics Then, run the program. For macOS and Linux systems, type the following and press Enter : ./01_hello_world.py The same can also be achieved on macOS/Linux with: python3 01_hello_world.py For Windows systems, type the following and press Enter : py 01_hello_world.py If done correctly, Cozmo will say \"Hello, World!\" If Cozmo does not perform as expected, look at the first Terminal window and make sure no error messages appeared. If you continue to have issues, please seek help in the Forums. The code for the Hello World program can be viewed here. The usbmuxd (USB Multiplexor Daemon) must be installed on any computer system paired with an iOS device before running any programs. Installing iTunes will also install the usbmuxd on those systems. Linux users can install the usbmuxd module through the command line with sudo apt-get install usbmuxd. Make sure adb (Android Debug Bridge) is installed on your system prior to running a program with an Android device. See the Install page \\ initial> for instructions. You are now all set up to run Python programs on Cozmo. Next we will go over how to edit the above code to make Cozmo say something new. Let's write our first program.","title":"The Program"},{"location":"tutorials/CozmoSDKDocs/SDK/getstarted.rst/#next-steps-night-night","text":"Copy 01_hello_world.py to a new file named nightnight.py by doing the following: For macOS and Linux systems, type the following and press Enter : cp 01_hello_world.py nightnight.py For Windows systems, type the following and press Enter : copy 01_hello_world.py nightnight.py Now, nightnight.py is saved in the same folder as 01_hello_world.py. Open this new document in a source code editor or plain-text editor. Free source code editors, such as PyCharm Community Edition , Atom , Sublime , or TextWrangler can be found online. Anki does not provide tech support for third-party source code editors. Each line in the program relates to a specific function. import cozmo allows your program to access the Cozmo SDK code contained within the cozmo module. Text sandwiched between three ' marks is a Docstring. Docstrings are like comments, and are placed inside code to give information to the user. robot.say_text(\"Hello, World!\").wait_for_completed() is the core of the program: robot.say_text(\u2026) is the function that makes Cozmo speak a string out loud. \"Hello World\" is the string which Cozmo will speak. wait_for_completed() tells Cozmo to finish speaking before moving to the next line of code. Without this, our program would end before Cozmo said anything! Move to the line that starts with \"robot.say_text\" Select the phrase \"Hello World\". Do NOT select the parentheses or quotation marks around the phrase; those are necessary for Python to properly parse the command. Type in the new phrase you would like Cozmo to say. In this example, Cozmo will say \"Night Night\", so that line should look like this: robot.say_text(\"Night Night\").wait_for_completed() Save the nightnight.py file. Now you can run your program: For macOS and Linux systems, type the following into the same Terminal window and press Enter : ./nightnight.py For Windows systems, type the following into the same Command Prompt window and press Enter : py nightnight.py If done correctly, Cozmo will say the new phrase. Now that you have written your own Cozmo program, take a look at the rest of the Cozmo SDK and at the many other example programs to get more ideas. Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"Next Steps - \"Night-Night\""},{"location":"tutorials/CozmoSDKDocs/SDK/index.rst/","text":"Welcome to the Cozmo SDK! Indices and tables genindex modindex search Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"Index.rst"},{"location":"tutorials/CozmoSDKDocs/SDK/index.rst/#welcome-to-the-cozmo-sdk33","text":"","title":"Welcome to the Cozmo SDK!"},{"location":"tutorials/CozmoSDKDocs/SDK/index.rst/#indices-and-tables","text":"genindex modindex search Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"Indices and tables"},{"location":"tutorials/CozmoSDKDocs/SDK/initial.rst/","text":"Initial Setup To use the Cozmo SDK, the Cozmo mobile app must be installed on your mobile device and that device must be tethered to a computer via USB cable. Prerequisites Python 3.5.1 or later WiFi connection An iOS or Android mobile device with the Cozmo app installed, connected to the computer via USB cable SDK Example Programs Anki provides example programs for novice and advanced users to run with the SDK. Download the SDK example programs here: macOS/Linux SDK Examples \\ cozmo_sdk_examples_0.0.0.tar.gz> Windows SDK Examples \\ cozmo_sdk_examples_0.0.0.zip> Once downloaded, extract the packaged files to a new directory. Installation To install the SDK on your system, select the instructions for your computer's operating system. install-macos install-windows install-linux Troubleshooting Failure to Install Python Package If your attempt to install Python packages such as NumPy fails, please upgrade your pip install as follows: On macOS and Linux: pip3 install -U pip On Windows: py -3 -m pip install -U pip Once the pip command is upgraded, retry your Python package installation. Cozmo SDK Forums Please visit the Cozmo SDK Forums to ask questions, find solutions and for general discussion. Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"Initial Setup"},{"location":"tutorials/CozmoSDKDocs/SDK/initial.rst/#initial-setup","text":"To use the Cozmo SDK, the Cozmo mobile app must be installed on your mobile device and that device must be tethered to a computer via USB cable.","title":"Initial Setup"},{"location":"tutorials/CozmoSDKDocs/SDK/initial.rst/#prerequisites","text":"Python 3.5.1 or later WiFi connection An iOS or Android mobile device with the Cozmo app installed, connected to the computer via USB cable","title":"Prerequisites"},{"location":"tutorials/CozmoSDKDocs/SDK/initial.rst/#sdk-example-programs","text":"Anki provides example programs for novice and advanced users to run with the SDK. Download the SDK example programs here: macOS/Linux SDK Examples \\ cozmo_sdk_examples_0.0.0.tar.gz> Windows SDK Examples \\ cozmo_sdk_examples_0.0.0.zip> Once downloaded, extract the packaged files to a new directory.","title":"SDK Example Programs"},{"location":"tutorials/CozmoSDKDocs/SDK/initial.rst/#installation","text":"To install the SDK on your system, select the instructions for your computer's operating system. install-macos install-windows install-linux","title":"Installation"},{"location":"tutorials/CozmoSDKDocs/SDK/initial.rst/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"tutorials/CozmoSDKDocs/SDK/initial.rst/#failure-to-install-python-package","text":"If your attempt to install Python packages such as NumPy fails, please upgrade your pip install as follows: On macOS and Linux: pip3 install -U pip On Windows: py -3 -m pip install -U pip Once the pip command is upgraded, retry your Python package installation.","title":"Failure to Install Python Package"},{"location":"tutorials/CozmoSDKDocs/SDK/initial.rst/#cozmo-sdk-forums","text":"Please visit the Cozmo SDK Forums to ask questions, find solutions and for general discussion. Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"Cozmo SDK Forums"},{"location":"tutorials/CozmoSDKDocs/SDK/install-linux.rst/","text":"Installation - Linux This guide provides instructions on installing the Cozmo SDK for computers running with an Ubuntu Linux operating system. The Cozmo SDK is tested and and supported on Ubuntu 14.04 and 16.04. Anki makes no guarantee the Cozmo SDK will work on other versions of Linux. If you wish to try the Cozmo SDK on versions of Linux other than Ubuntu 14.04 or 16.04, please ensure the following dependencies are installed: Python 3.5.1 or later pip for Python 3 (Python package installer) Android command-line tools ( https://developer.android.com/studio/index.html#Other ) usbmuxd for iOS / adb for Android Ubuntu 14.04 Python Installation Type the following into your Terminal window to install Python 3.5: sudo add-apt-repository ppa:deadsnakes sudo apt-get update sudo apt-get install python3.5 python3.5-tk Then, install and set up virtualenv: sudo apt-get install python-pip pip install virtualenv virtualenv -p python3.5 ~/cozmo-env Last, make sure to activate the virtualenv any time you use cozmo: source ~/cozmo-env/bin/activate You'll need to activate the virtualenv before running any python or pip commands. Learn more about virtualenv here . SDK Installation To install the SDK, type the following into the Terminal window: pip install 'cozmo[camera]' Note that the [camera] option adds support for processing images from Cozmo's camera. SDK Upgrade To upgrade the SDK from a previous install, enter this command: pip install --upgrade cozmo Ubuntu 16.04 Python Installation Type the following into your Terminal window to install Python: sudo apt-get update sudo apt-get install python3 Then install pip by typing in the following into the Terminal window: sudo apt install python3-pip Last, install Tkinter: sudo apt-get install python3-pil.imagetk SDK Installation To install the SDK, type the following into the Terminal window: pip3 install --user 'cozmo[camera]' Note that the [camera] option adds support for processing images from Cozmo's camera. SDK Upgrade To upgrade the SDK from a previous install, enter this command: pip3 install --user --upgrade cozmo Mobile Device Setup iOS devices require usbmuxd in order to run the Cozmo SDK. Usbmuxd is required for the computer to communicate with the iOS device over a USB cable. Android devices require installation of adb (adb) in order to run the Cozmo SDK. This is required for the computer to communicate with the Android mobile device over a USB cable and runs automatically when required. Troubleshooting Please see the trouble section of the Initial Setup page for tips, or visit the Cozmo SDK Forums to ask questions, find solutions, or for general discussion. Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"Installation - Linux"},{"location":"tutorials/CozmoSDKDocs/SDK/install-linux.rst/#installation-linux","text":"This guide provides instructions on installing the Cozmo SDK for computers running with an Ubuntu Linux operating system. The Cozmo SDK is tested and and supported on Ubuntu 14.04 and 16.04. Anki makes no guarantee the Cozmo SDK will work on other versions of Linux. If you wish to try the Cozmo SDK on versions of Linux other than Ubuntu 14.04 or 16.04, please ensure the following dependencies are installed: Python 3.5.1 or later pip for Python 3 (Python package installer) Android command-line tools ( https://developer.android.com/studio/index.html#Other ) usbmuxd for iOS / adb for Android","title":"Installation - Linux"},{"location":"tutorials/CozmoSDKDocs/SDK/install-linux.rst/#ubuntu-1404","text":"","title":"Ubuntu 14.04"},{"location":"tutorials/CozmoSDKDocs/SDK/install-linux.rst/#python-installation","text":"Type the following into your Terminal window to install Python 3.5: sudo add-apt-repository ppa:deadsnakes sudo apt-get update sudo apt-get install python3.5 python3.5-tk Then, install and set up virtualenv: sudo apt-get install python-pip pip install virtualenv virtualenv -p python3.5 ~/cozmo-env Last, make sure to activate the virtualenv any time you use cozmo: source ~/cozmo-env/bin/activate You'll need to activate the virtualenv before running any python or pip commands. Learn more about virtualenv here .","title":"Python Installation"},{"location":"tutorials/CozmoSDKDocs/SDK/install-linux.rst/#sdk-installation","text":"To install the SDK, type the following into the Terminal window: pip install 'cozmo[camera]' Note that the [camera] option adds support for processing images from Cozmo's camera.","title":"SDK Installation"},{"location":"tutorials/CozmoSDKDocs/SDK/install-linux.rst/#sdk-upgrade","text":"To upgrade the SDK from a previous install, enter this command: pip install --upgrade cozmo","title":"SDK Upgrade"},{"location":"tutorials/CozmoSDKDocs/SDK/install-linux.rst/#ubuntu-1604","text":"","title":"Ubuntu 16.04"},{"location":"tutorials/CozmoSDKDocs/SDK/install-linux.rst/#python-installation_1","text":"Type the following into your Terminal window to install Python: sudo apt-get update sudo apt-get install python3 Then install pip by typing in the following into the Terminal window: sudo apt install python3-pip Last, install Tkinter: sudo apt-get install python3-pil.imagetk","title":"Python Installation"},{"location":"tutorials/CozmoSDKDocs/SDK/install-linux.rst/#sdk-installation_1","text":"To install the SDK, type the following into the Terminal window: pip3 install --user 'cozmo[camera]' Note that the [camera] option adds support for processing images from Cozmo's camera.","title":"SDK Installation"},{"location":"tutorials/CozmoSDKDocs/SDK/install-linux.rst/#sdk-upgrade_1","text":"To upgrade the SDK from a previous install, enter this command: pip3 install --user --upgrade cozmo","title":"SDK Upgrade"},{"location":"tutorials/CozmoSDKDocs/SDK/install-linux.rst/#mobile-device-setup","text":"iOS devices require usbmuxd in order to run the Cozmo SDK. Usbmuxd is required for the computer to communicate with the iOS device over a USB cable. Android devices require installation of adb (adb) in order to run the Cozmo SDK. This is required for the computer to communicate with the Android mobile device over a USB cable and runs automatically when required.","title":"Mobile Device Setup"},{"location":"tutorials/CozmoSDKDocs/SDK/install-linux.rst/#troubleshooting","text":"Please see the trouble section of the Initial Setup page for tips, or visit the Cozmo SDK Forums to ask questions, find solutions, or for general discussion. Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"Troubleshooting"},{"location":"tutorials/CozmoSDKDocs/SDK/install-macos.rst/","text":"Installation - macOS / OS X This guide provides instructions on installing the Cozmo SDK for computers running with a macOS operating system. Installation Videos For your convenience, videos are provided showing the installation steps being followed on a macOS / OS X computer; one using an iOS device, and one using an Android device. There is also full text-based documentation below these. Python Installation Install Homebrew on your system according to the latest instructions. If you already had brew installed then update it by opening a Terminal window and typing in the following: brew update Once Homebrew is installed and updated, type the following into the Terminal window to install the latest version of Python 3: brew install python3 SDK Installation To install the SDK, type the following into the Terminal window: pip3 install --user 'cozmo[camera]' Note that the [camera] option adds support for processing images from Cozmo's camera. SDK Upgrade To upgrade the SDK from a previous install, enter this command: pip3 install --user --upgrade cozmo Mobile Device Setup iOS devices do not require any special setup in order to run the Cozmo SDK on a macOS system. Android devices require installation of adb (adb) in order to run the Cozmo SDK. This is required for the computer to communicate with the Android mobile device over a USB cable and runs automatically when required. Troubleshooting Please see the trouble section of the Initial Setup page for tips, or visit the Cozmo SDK Forums to ask questions, find solutions, or for general discussion. Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"Installation - macOS / OS X"},{"location":"tutorials/CozmoSDKDocs/SDK/install-macos.rst/#installation-macos-os-x","text":"This guide provides instructions on installing the Cozmo SDK for computers running with a macOS operating system.","title":"Installation - macOS / OS X"},{"location":"tutorials/CozmoSDKDocs/SDK/install-macos.rst/#installation-videos","text":"For your convenience, videos are provided showing the installation steps being followed on a macOS / OS X computer; one using an iOS device, and one using an Android device. There is also full text-based documentation below these.","title":"Installation Videos"},{"location":"tutorials/CozmoSDKDocs/SDK/install-macos.rst/#python-installation","text":"Install Homebrew on your system according to the latest instructions. If you already had brew installed then update it by opening a Terminal window and typing in the following: brew update Once Homebrew is installed and updated, type the following into the Terminal window to install the latest version of Python 3: brew install python3","title":"Python Installation"},{"location":"tutorials/CozmoSDKDocs/SDK/install-macos.rst/#sdk-installation","text":"To install the SDK, type the following into the Terminal window: pip3 install --user 'cozmo[camera]' Note that the [camera] option adds support for processing images from Cozmo's camera.","title":"SDK Installation"},{"location":"tutorials/CozmoSDKDocs/SDK/install-macos.rst/#sdk-upgrade","text":"To upgrade the SDK from a previous install, enter this command: pip3 install --user --upgrade cozmo","title":"SDK Upgrade"},{"location":"tutorials/CozmoSDKDocs/SDK/install-macos.rst/#mobile-device-setup","text":"iOS devices do not require any special setup in order to run the Cozmo SDK on a macOS system. Android devices require installation of adb (adb) in order to run the Cozmo SDK. This is required for the computer to communicate with the Android mobile device over a USB cable and runs automatically when required.","title":"Mobile Device Setup"},{"location":"tutorials/CozmoSDKDocs/SDK/install-macos.rst/#troubleshooting","text":"Please see the trouble section of the Initial Setup page for tips, or visit the Cozmo SDK Forums to ask questions, find solutions, or for general discussion. Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"Troubleshooting"},{"location":"tutorials/CozmoSDKDocs/SDK/install-windows.rst/","text":"Installation - Windows This guide provides instructions on installing the Cozmo SDK for computers running with a Windows operating system. Installation Videos For your convenience, videos are provided showing the installation steps being followed on a Windows computer; one using an iOS device, and one using an Android device. There is also full text-based documentation below these. Python Installation Download the Python 3.5.1 (or later) executable file from Python.org and run it on your computer. We recommend that you tick the \"Add Python 3.5 to PATH\" checkbox on the Setup screen. SDK Installation To install the SDK, type the following into the Command Prompt window: pip3 install --user cozmo[camera] Note that the [camera] option adds support for processing images from Cozmo's camera. SDK Upgrade To upgrade the SDK from a previous install, enter this command: pip3 install --user --upgrade cozmo Mobile Device Setup iOS devices require iTunes to ensure that the usbmuxd service is installed on your computer. Usbmuxd is required for the computer to communicate with the iOS device over a USB cable. While iTunes needs to be installed, it does not need to be running. Android devices require installation of adb (adb) in order to run the Cozmo SDK. This is required for the computer to communicate with the Android mobile device over a USB cable and runs automatically when required. Troubleshooting Please see the trouble section of the Initial Setup page for tips, or visit the Cozmo SDK Forums to ask questions, find solutions, or for general discussion. Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"Installation - Windows"},{"location":"tutorials/CozmoSDKDocs/SDK/install-windows.rst/#installation-windows","text":"This guide provides instructions on installing the Cozmo SDK for computers running with a Windows operating system.","title":"Installation - Windows"},{"location":"tutorials/CozmoSDKDocs/SDK/install-windows.rst/#installation-videos","text":"For your convenience, videos are provided showing the installation steps being followed on a Windows computer; one using an iOS device, and one using an Android device. There is also full text-based documentation below these.","title":"Installation Videos"},{"location":"tutorials/CozmoSDKDocs/SDK/install-windows.rst/#python-installation","text":"Download the Python 3.5.1 (or later) executable file from Python.org and run it on your computer. We recommend that you tick the \"Add Python 3.5 to PATH\" checkbox on the Setup screen.","title":"Python Installation"},{"location":"tutorials/CozmoSDKDocs/SDK/install-windows.rst/#sdk-installation","text":"To install the SDK, type the following into the Command Prompt window: pip3 install --user cozmo[camera] Note that the [camera] option adds support for processing images from Cozmo's camera.","title":"SDK Installation"},{"location":"tutorials/CozmoSDKDocs/SDK/install-windows.rst/#sdk-upgrade","text":"To upgrade the SDK from a previous install, enter this command: pip3 install --user --upgrade cozmo","title":"SDK Upgrade"},{"location":"tutorials/CozmoSDKDocs/SDK/install-windows.rst/#mobile-device-setup","text":"iOS devices require iTunes to ensure that the usbmuxd service is installed on your computer. Usbmuxd is required for the computer to communicate with the iOS device over a USB cable. While iTunes needs to be installed, it does not need to be running. Android devices require installation of adb (adb) in order to run the Cozmo SDK. This is required for the computer to communicate with the Android mobile device over a USB cable and runs automatically when required.","title":"Mobile Device Setup"},{"location":"tutorials/CozmoSDKDocs/SDK/install-windows.rst/#troubleshooting","text":"Please see the trouble section of the Initial Setup page for tips, or visit the Cozmo SDK Forums to ask questions, find solutions, or for general discussion. Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"Troubleshooting"},{"location":"tutorials/CozmoSDKDocs/SDK/sdk-versions.rst/","text":"SDK vs. App Versions The Cozmo SDK is updated often in order to provide you with the best possible user experience. The SDK and Cozmo app do not always update at the same frequency. Check this list to see if the version of the SDK you wish to use matches up with the version of the app you are using. App Version # SDK Version # 1.0.1 0.7.0 1.0.2 0.8.0 1.0.3 0.8.1 1.1.0 0.9.0 1.1.0 0.10.0 1.2.0 0.11.0 1.3.0 0.12.0 1.4.1 0.13.0 1.5.0 0.14.0 1.6.0 0.15.0 1.7.1 0.15.1 1.7.1 0.16.0 2.0.0 1.0.0 2.0.1 1.0.1 2.0.1 1.1.0 2.1.0 1.2.0 2.1.0 1.2.1 2.2.0 1.3.0 2.3.0 1.3.1 2.4.0 1.3.2 2.5.0 1.4.0 2.6.0 1.4.1 2.7.0 1.4.2 2.8.0 1.4.3 2.9.0 1.4.4 2.10.0 1.4.5 3.0.1 1.4.6 3.1.0 1.4.7 3.2.0 1.4.8 3.3.0 1.4.9 3.4.0 1.4.10 If you have incompatible versions of the app and the SDK, please update the app and SDK. Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"SDK vs. App Versions"},{"location":"tutorials/CozmoSDKDocs/SDK/sdk-versions.rst/#sdk-vs-app-versions","text":"The Cozmo SDK is updated often in order to provide you with the best possible user experience. The SDK and Cozmo app do not always update at the same frequency. Check this list to see if the version of the SDK you wish to use matches up with the version of the app you are using. App Version # SDK Version # 1.0.1 0.7.0 1.0.2 0.8.0 1.0.3 0.8.1 1.1.0 0.9.0 1.1.0 0.10.0 1.2.0 0.11.0 1.3.0 0.12.0 1.4.1 0.13.0 1.5.0 0.14.0 1.6.0 0.15.0 1.7.1 0.15.1 1.7.1 0.16.0 2.0.0 1.0.0 2.0.1 1.0.1 2.0.1 1.1.0 2.1.0 1.2.0 2.1.0 1.2.1 2.2.0 1.3.0 2.3.0 1.3.1 2.4.0 1.3.2 2.5.0 1.4.0 2.6.0 1.4.1 2.7.0 1.4.2 2.8.0 1.4.3 2.9.0 1.4.4 2.10.0 1.4.5 3.0.1 1.4.6 3.1.0 1.4.7 3.2.0 1.4.8 3.3.0 1.4.9 3.4.0 1.4.10 If you have incompatible versions of the app and the SDK, please update the app and SDK. Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"SDK vs. App Versions"},{"location":"tutorials/CozmoSDKDocs/SDK/vagrant.rst/","text":"orphan Alternate Install via Virtual Machine The installation steps on this page are intended only for people that are having difficulties installing the SDK using the main Installation Guide steps. If you have difficulties using the regular Installation Guide steps (e.g. you are using an unsupported Operating System / OS Version), then we also provide a self-contained VM (Virtual Machine) setup using Vagrant that you can install to run entirely inside VirtualBox. The steps are listed below. To use the Cozmo SDK, the Cozmo mobile app must be installed on your mobile device and that device must be tethered to a computer via USB cable. Installation Prerequisites WiFi connection An iOS or Android mobile device with the Cozmo app installed, connected to the computer via USB cable Install Install VirtualBox and the VirtualBox Extension Pack from the official webpage. Both of these must be installed in order for Vagrant to work properly. Install Vagrant from the official webpage. Install the Cozmo app on your mobile device. Plug the mobile device containing the Cozmo app into your computer. For Windows : Download vagrant_bundle_0.0.0.zip \\ vagrant_bundle_0.0.0.zip>. Unzip the vagrant_bundle_***.zip file into a folder of your choosing. Open a Command Prompt window. Enter the following commands: cd (location you extracted the .zip file) cd vagrant_bundle Enter the following command: vagrant up Wait for vagrant up to completely finish before continuing to the next step. Navigate to where the Virtual Machine is currently running. Note The Virtual Machine is set up with the following credentials: user - vagrant password - vagrant Within the VM, open xterm. Once xterm is open, run the following commands in order. Please wait for each command to finish before entering the next one. This step may take several minutes. : /vagrant/setup-vm.sh Be sure to accept the Android SDK license prompt before continuing. If using an Android device, the device will will prompt with \"Allow USB Debugging?\" . Tap OK to allow this option. sourceCode python cd /vagrant/cozmo_sdk_examples_*** For macOS/Linux : Download vagrant_bundle_0.0.0.tar.gz \\ vagrant_bundle_0.0.0.tar.gz>. Open a Terminal window. Enter the following commands: cd (location you downloaded the vagrant_bundle_***.tar.gz file) tar -xzf vagrant_bundle_***.tar.gz cd vagrant_bundle Enter the following command: vagrant up Wait for vagrant up to completely finish before continuing to the next step. Navigate to where the Virtual Machine is currently running. Note The Virtual Machine is set up with the following credentials: user - vagrant password - vagrant Within the VM, open xterm. Once xterm is open, run the following commands in order. Please wait for each command to finish before entering the next one. This step may take several minutes. : /vagrant/setup-vm.sh Be sure to accept the Android SDK license prompt before continuing. If using an Android device, the device will will prompt with \"Allow USB Debugging?\" . Tap OK to allow this option. sourceCode python cd /vagrant/cozmo_sdk_examples_*** Make sure Cozmo is powered on and charged. Connect to the Cozmo robot's WiFi from the mobile device and then connect to the Cozmo robot within the app. Enter SDK mode on the app. On the Cozmo app, tap the gear icon at the top right corner to open the Settings menu. Swipe left to show the Cozmo SDK option and tap the Enable SDK button. To run a program enter the following into the virtual machine's Terminal prompt: ./program_name.py For example, to run the Hello World example program, you would type ./hello_world.py . You must either relaunch with \"vagrant up\" or save your virtual machine's state when shutting down. Otherwise the /vagrant/ folder on the virtual machine will be empty on subsequent runs. Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"Vagrant.rst"},{"location":"tutorials/CozmoSDKDocs/SDK/vagrant.rst/#alternate-install-via-virtual-machine","text":"The installation steps on this page are intended only for people that are having difficulties installing the SDK using the main Installation Guide steps. If you have difficulties using the regular Installation Guide steps (e.g. you are using an unsupported Operating System / OS Version), then we also provide a self-contained VM (Virtual Machine) setup using Vagrant that you can install to run entirely inside VirtualBox. The steps are listed below. To use the Cozmo SDK, the Cozmo mobile app must be installed on your mobile device and that device must be tethered to a computer via USB cable.","title":"Alternate Install via Virtual Machine"},{"location":"tutorials/CozmoSDKDocs/SDK/vagrant.rst/#installation","text":"","title":"Installation"},{"location":"tutorials/CozmoSDKDocs/SDK/vagrant.rst/#prerequisites","text":"WiFi connection An iOS or Android mobile device with the Cozmo app installed, connected to the computer via USB cable","title":"Prerequisites"},{"location":"tutorials/CozmoSDKDocs/SDK/vagrant.rst/#install","text":"Install VirtualBox and the VirtualBox Extension Pack from the official webpage. Both of these must be installed in order for Vagrant to work properly. Install Vagrant from the official webpage. Install the Cozmo app on your mobile device. Plug the mobile device containing the Cozmo app into your computer. For Windows : Download vagrant_bundle_0.0.0.zip \\ vagrant_bundle_0.0.0.zip>. Unzip the vagrant_bundle_***.zip file into a folder of your choosing. Open a Command Prompt window. Enter the following commands: cd (location you extracted the .zip file) cd vagrant_bundle Enter the following command: vagrant up Wait for vagrant up to completely finish before continuing to the next step. Navigate to where the Virtual Machine is currently running. Note The Virtual Machine is set up with the following credentials: user - vagrant password - vagrant Within the VM, open xterm. Once xterm is open, run the following commands in order. Please wait for each command to finish before entering the next one. This step may take several minutes. : /vagrant/setup-vm.sh Be sure to accept the Android SDK license prompt before continuing. If using an Android device, the device will will prompt with \"Allow USB Debugging?\" . Tap OK to allow this option. sourceCode python cd /vagrant/cozmo_sdk_examples_*** For macOS/Linux : Download vagrant_bundle_0.0.0.tar.gz \\ vagrant_bundle_0.0.0.tar.gz>. Open a Terminal window. Enter the following commands: cd (location you downloaded the vagrant_bundle_***.tar.gz file) tar -xzf vagrant_bundle_***.tar.gz cd vagrant_bundle Enter the following command: vagrant up Wait for vagrant up to completely finish before continuing to the next step. Navigate to where the Virtual Machine is currently running. Note The Virtual Machine is set up with the following credentials: user - vagrant password - vagrant Within the VM, open xterm. Once xterm is open, run the following commands in order. Please wait for each command to finish before entering the next one. This step may take several minutes. : /vagrant/setup-vm.sh Be sure to accept the Android SDK license prompt before continuing. If using an Android device, the device will will prompt with \"Allow USB Debugging?\" . Tap OK to allow this option. sourceCode python cd /vagrant/cozmo_sdk_examples_*** Make sure Cozmo is powered on and charged. Connect to the Cozmo robot's WiFi from the mobile device and then connect to the Cozmo robot within the app. Enter SDK mode on the app. On the Cozmo app, tap the gear icon at the top right corner to open the Settings menu. Swipe left to show the Cozmo SDK option and tap the Enable SDK button. To run a program enter the following into the virtual machine's Terminal prompt: ./program_name.py For example, to run the Hello World example program, you would type ./hello_world.py . You must either relaunch with \"vagrant up\" or save your virtual machine's state when shutting down. Otherwise the /vagrant/ folder on the virtual machine will be empty on subsequent runs. Terms and Conditions and Privacy Policy Click here to return to the Anki Developer website.","title":"Install"},{"location":"tutorials/ESP-MESH/ESP-MESH/","text":"ESP-MESH Board This board isn't listed on the WIKI. Here is what I learned so far. (2/19/2019). Select Generic ESP8285 from the Arduino Boards manager. As the IDE is compiling the sketch, hold the flash button, release it when the IDE is waiting for the board. The RGB LED on board RED is pin 12 BLUE is pin 13 GREEN is pin 14 digitalWrite HIGH will turn the LED off digitalWrite LOW will turn the LED on analogWrite (PWM) works from 0 to 1024. PainlessMesh for the ESP8266/ESP32 board work with no problems. The \"HelloMesh\" example included with the ESP8266 boards also works, but you have to remember to set an IP address for each node.","title":"ESP-MESH Board"},{"location":"tutorials/ESP-MESH/ESP-MESH/#esp-mesh-board","text":"This board isn't listed on the WIKI. Here is what I learned so far. (2/19/2019). Select Generic ESP8285 from the Arduino Boards manager. As the IDE is compiling the sketch, hold the flash button, release it when the IDE is waiting for the board. The RGB LED on board RED is pin 12 BLUE is pin 13 GREEN is pin 14 digitalWrite HIGH will turn the LED off digitalWrite LOW will turn the LED on analogWrite (PWM) works from 0 to 1024. PainlessMesh for the ESP8266/ESP32 board work with no problems. The \"HelloMesh\" example included with the ESP8266 boards also works, but you have to remember to set an IP address for each node.","title":"ESP-MESH Board"},{"location":"tutorials/Github_Learn_by_Doing/Home/","text":"Welcome to the Github_Learn_by_Doing wiki!","title":"Home"},{"location":"tutorials/Github_Learn_by_Doing/Pictures/","text":"M5SickC First Test. Picture from Wiki","title":"Pictures"},{"location":"tutorials/Github_Learn_by_Doing/Projects/","text":"Projects This is a list of current projects","title":"Projects"},{"location":"tutorials/Github_Learn_by_Doing/Projects/#projects","text":"This is a list of current projects","title":"Projects"},{"location":"tutorials/M5Stack/","text":"Documentation of M5Stack series products","title":"Documentation of M5Stack series products"},{"location":"tutorials/M5Stack/#documentation-of-m5stack-series-products","text":"","title":"Documentation of M5Stack series products"},{"location":"tutorials/M5Stack/accessory/frame/description/","text":"DESCRIPTION Frame , like its namesake, is a frame for M5Core. It offers an extra structure supporting or containing M5Core. Kit includes 1x FRAME 4x hexagon screw KA2x4 1x Allen wrench","title":"Description"},{"location":"tutorials/M5Stack/accessory/frame/description/#description","text":"Frame , like its namesake, is a frame for M5Core. It offers an extra structure supporting or containing M5Core.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/accessory/frame/description/#kit-includes","text":"1x FRAME 4x hexagon screw KA2x4 1x Allen wrench","title":"Kit includes"},{"location":"tutorials/M5Stack/accessory/frame/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/accessory/frame/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/accessory/frame/learn/","text":"LEARN","title":"Learn"},{"location":"tutorials/M5Stack/accessory/frame/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/accessory/frame/more-information/","text":"MORE INFORMATION","title":"More information"},{"location":"tutorials/M5Stack/accessory/frame/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/accessory/grove_cable/description/","text":"DESCRIPTION GROVE Cable would be a necessary tool used on M5Stack development, since all PORTs on M5Core are GROVE stadard. This Grove cable, compatible with the GROVE port on M5Core,simply have 4 lines, two for data, one for power,and one for Ground. We've offered alternative length: 10cm, 20cm, 50cm, 1m, 2m. Product Features 5 specifications: 10cm, 20cm, 0.5m, 1m, 2m","title":"Description"},{"location":"tutorials/M5Stack/accessory/grove_cable/description/#description","text":"GROVE Cable would be a necessary tool used on M5Stack development, since all PORTs on M5Core are GROVE stadard. This Grove cable, compatible with the GROVE port on M5Core,simply have 4 lines, two for data, one for power,and one for Ground. We've offered alternative length: 10cm, 20cm, 50cm, 1m, 2m.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/accessory/grove_cable/description/#product-features","text":"5 specifications: 10cm, 20cm, 0.5m, 1m, 2m","title":"Product Features"},{"location":"tutorials/M5Stack/accessory/grove_cable/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/accessory/grove_cable/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/accessory/grove_cable/learn/","text":"LEARN","title":"Learn"},{"location":"tutorials/M5Stack/accessory/grove_cable/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/accessory/grove_cable/more-information/","text":"MORE INFORMATION","title":"More information"},{"location":"tutorials/M5Stack/accessory/grove_cable/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/accessory/grove_t/description/","text":"DESCRIPTION Grove-T is a T-shaped hub. Is this remind you the HUB unit ? They are basically the same thing, just in different shape.This is also used for GROVE port expanding. Notice: Grove-T is just a hardware expander, if you are looking for hardware and software(standard protocol) expander like I2C, Single-bus, please check PaHUB or PbHUB . If you connectted two I2C slave devices onto HUB that share the same adress, you will have problem getting I2C data from both.","title":"Description"},{"location":"tutorials/M5Stack/accessory/grove_t/description/#description","text":"Grove-T is a T-shaped hub. Is this remind you the HUB unit ? They are basically the same thing, just in different shape.This is also used for GROVE port expanding. Notice: Grove-T is just a hardware expander, if you are looking for hardware and software(standard protocol) expander like I2C, Single-bus, please check PaHUB or PbHUB . If you connectted two I2C slave devices onto HUB that share the same adress, you will have problem getting I2C data from both.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/accessory/grove_t/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/accessory/grove_t/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/accessory/grove_t/learn/","text":"LEARN","title":"Learn"},{"location":"tutorials/M5Stack/accessory/grove_t/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/accessory/grove_t/more-information/","text":"MORE INFORMATION","title":"More information"},{"location":"tutorials/M5Stack/accessory/grove_t/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/accessory/lego_cable/description/","text":"DESCRIPTION LEGO Cable is used for LEGO motor which is compatible with BALA and M5Module LEGO+. We have prepared different length to fit your needs on different appliactions. Product Features 3 specifications: 10cm, 20cm, 30cm","title":"Description"},{"location":"tutorials/M5Stack/accessory/lego_cable/description/#description","text":"LEGO Cable is used for LEGO motor which is compatible with BALA and M5Module LEGO+. We have prepared different length to fit your needs on different appliactions.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/accessory/lego_cable/description/#product-features","text":"3 specifications: 10cm, 20cm, 30cm","title":"Product Features"},{"location":"tutorials/M5Stack/accessory/lego_cable/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/accessory/lego_cable/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/accessory/lego_cable/learn/","text":"LEARN","title":"Learn"},{"location":"tutorials/M5Stack/accessory/lego_cable/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/accessory/lego_cable/more-information/","text":"MORE INFORMATION","title":"More information"},{"location":"tutorials/M5Stack/accessory/lego_cable/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/app/bala/description/","text":"DESCRIPTION BALA is short for 'Balance', like its namesake, BALA is a Self Balancing Robot consist of a M5 FIRE and two wheels(DC motors). This Application product comes with preloaded software, a self-balance robot application. While there are lots of open source code on Arduino as well, We especially encourage you to modify and enhance the code yourself. This Self Balancing Robot is a Two-wheeled Robot that balances vertically using a closed-loop algorithm. This Self Balancing Robot Features various modes like Position Hold, Simple Mode, Rise Mode and Joystick Control. This Robot is controllable by a Smartphone device or a Transmitter. Self Balancing robot uses data from the Accelerometer and Gyroscope to correct its orientation and position. The 2 DC driver module communicates with M5Stack FIRE through I2C bus. It's default I2C address is 0x56 . Product Features Programming Support Python UIFlow (Blockly) Arduino Compatible LEGO POGO Pin TF Card Support M5Fire PARAMETER Model M5Stack FIRE ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash 16MB Flash + 4MB PSRAM Input 5V @ 500mA Interface TypeC x 1, GROVE(I2C+I/0+UART), Pogo Pin x 1 LCD 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Microphone MEMS Analog BSE3729 Microphone LED SK6812 3535 RGB LED x 10 MEMS MPU9250 (MPU6500 + AK8963) Battery 550mAh @ 3.7V, inside Op.Temp. 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 21 mm C.A.S.E Plastic ( PC ) Kit includes 1x M5Stack BALA 1x Motor Driver 2x N20(Encoder included) Type-C USB Cable","title":"Description"},{"location":"tutorials/M5Stack/app/bala/description/#description","text":"BALA is short for 'Balance', like its namesake, BALA is a Self Balancing Robot consist of a M5 FIRE and two wheels(DC motors). This Application product comes with preloaded software, a self-balance robot application. While there are lots of open source code on Arduino as well, We especially encourage you to modify and enhance the code yourself. This Self Balancing Robot is a Two-wheeled Robot that balances vertically using a closed-loop algorithm. This Self Balancing Robot Features various modes like Position Hold, Simple Mode, Rise Mode and Joystick Control. This Robot is controllable by a Smartphone device or a Transmitter. Self Balancing robot uses data from the Accelerometer and Gyroscope to correct its orientation and position. The 2 DC driver module communicates with M5Stack FIRE through I2C bus. It's default I2C address is 0x56 .","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/app/bala/description/#product-features","text":"Programming Support Python UIFlow (Blockly) Arduino Compatible LEGO POGO Pin TF Card Support","title":"Product Features"},{"location":"tutorials/M5Stack/app/bala/description/#m5fire-parameter","text":"Model M5Stack FIRE ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash 16MB Flash + 4MB PSRAM Input 5V @ 500mA Interface TypeC x 1, GROVE(I2C+I/0+UART), Pogo Pin x 1 LCD 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Microphone MEMS Analog BSE3729 Microphone LED SK6812 3535 RGB LED x 10 MEMS MPU9250 (MPU6500 + AK8963) Battery 550mAh @ 3.7V, inside Op.Temp. 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 21 mm C.A.S.E Plastic ( PC )","title":"M5Fire PARAMETER"},{"location":"tutorials/M5Stack/app/bala/description/#kit-includes","text":"1x M5Stack BALA 1x Motor Driver 2x N20(Encoder included) Type-C USB Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/app/bala/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/app/bala/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/app/bala/learn/","text":"LEARN Prepare Install Serial Driver - How to Establish Serial Connection Development Environment UIFlow Arduino IDE UIFlow Download UIFlow firmware - How to dowmload Firmware WiFi Configuration - How to Connect wifi on M5Core Find the POGO Pin, and stack M5Core over M5Bala wheel. Click the Red button on the side of M5Core (double click for shutdown). Click the button on the side of M5Bala bottom to power on (double click for shutdown). Open UIFlow website, and switch programming language from Blockly to Python . Copy the following code to UIFlow and then click Download . from m5stack import * from m5ui import * from m5bala import M5Bala import i2c_bus clear_bg(0x111111) m5bala = M5Bala(i2c_bus.get(i2c_bus.M_BUS)) btnA = M5Button(name= ButtonA , text= ButtonA , visibility=False) btnB = M5Button(name= ButtonB , text= ButtonB , visibility=False) btnC = M5Button(name= ButtonC , text= ButtonC , visibility=False) title0 = M5Title(title= Title , fgcolor=0xFFFFFF, bgcolor=0x0000FF) title0.setTitle('calirate start') wait(2) sampleCount = 2000 gyroXSum = 0 gyroYSum = 0 gyroZSum = 0 for _ in range(sampleCount): gyroXYZ = m5bala.imu.gyro gyroXSum += gyroXYZ[0] # X gyroYSum += gyroXYZ[1] # Y gyroZSum += gyroXYZ[2] # Z gyroXMean = gyroXSum / sampleCount gyroYMean = gyroYSum / sampleCount gyroZMean = gyroZSum / sampleCount m5bala.imu.setGyroOffsets(gyroXMean, gyroYMean, gyroZMean) title0.setTitle('balance start') while True: m5bala.balance() wait(0.001) Arduino IDE Setting Arduino development environment - Establish Serail Connection - Get Started with Ardino IDE Install m5stack library in Library Manager . Install NeoPixelBus library in Library Manager . Install MPU6050_tockn library in Library Manager . Make sure that M5Core has connected to PC, then click Tools - Port for selecting the corresponding serial port on Arduino IDE. click Tools - Board: to select M5Stack-Core-ESP32 or M5Stack-Fire . Clone M5Bala by shell command. If you dont't have Git installed yet, click here and install it. git clone --recursive https://github.com/m5stack/M5Bala.git Click Sketch - Include Library - Add .ZIP Library... . select M5Bala you just cloned from github. Open a bala example: Click File - Examples - M5Bala - Basic . Compile and upload.","title":"Learn"},{"location":"tutorials/M5Stack/app/bala/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/app/bala/learn/#prepare","text":"Install Serial Driver - How to Establish Serial Connection","title":"Prepare"},{"location":"tutorials/M5Stack/app/bala/learn/#development-environment","text":"UIFlow Arduino IDE","title":"Development Environment"},{"location":"tutorials/M5Stack/app/bala/learn/#uiflow","text":"Download UIFlow firmware - How to dowmload Firmware WiFi Configuration - How to Connect wifi on M5Core Find the POGO Pin, and stack M5Core over M5Bala wheel. Click the Red button on the side of M5Core (double click for shutdown). Click the button on the side of M5Bala bottom to power on (double click for shutdown). Open UIFlow website, and switch programming language from Blockly to Python . Copy the following code to UIFlow and then click Download . from m5stack import * from m5ui import * from m5bala import M5Bala import i2c_bus clear_bg(0x111111) m5bala = M5Bala(i2c_bus.get(i2c_bus.M_BUS)) btnA = M5Button(name= ButtonA , text= ButtonA , visibility=False) btnB = M5Button(name= ButtonB , text= ButtonB , visibility=False) btnC = M5Button(name= ButtonC , text= ButtonC , visibility=False) title0 = M5Title(title= Title , fgcolor=0xFFFFFF, bgcolor=0x0000FF) title0.setTitle('calirate start') wait(2) sampleCount = 2000 gyroXSum = 0 gyroYSum = 0 gyroZSum = 0 for _ in range(sampleCount): gyroXYZ = m5bala.imu.gyro gyroXSum += gyroXYZ[0] # X gyroYSum += gyroXYZ[1] # Y gyroZSum += gyroXYZ[2] # Z gyroXMean = gyroXSum / sampleCount gyroYMean = gyroYSum / sampleCount gyroZMean = gyroZSum / sampleCount m5bala.imu.setGyroOffsets(gyroXMean, gyroYMean, gyroZMean) title0.setTitle('balance start') while True: m5bala.balance() wait(0.001)","title":"UIFlow"},{"location":"tutorials/M5Stack/app/bala/learn/#arduino-ide","text":"Setting Arduino development environment - Establish Serail Connection - Get Started with Ardino IDE Install m5stack library in Library Manager . Install NeoPixelBus library in Library Manager . Install MPU6050_tockn library in Library Manager . Make sure that M5Core has connected to PC, then click Tools - Port for selecting the corresponding serial port on Arduino IDE. click Tools - Board: to select M5Stack-Core-ESP32 or M5Stack-Fire . Clone M5Bala by shell command. If you dont't have Git installed yet, click here and install it. git clone --recursive https://github.com/m5stack/M5Bala.git Click Sketch - Include Library - Add .ZIP Library... . select M5Bala you just cloned from github. Open a bala example: Click File - Examples - M5Bala - Basic . Compile and upload.","title":"Arduino IDE"},{"location":"tutorials/M5Stack/app/bala/more-information/","text":"MORE INFORMATION","title":"More information"},{"location":"tutorials/M5Stack/app/bala/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/app/flir/description/","text":"DESCRIPTION FLIR features the latest FLIR Lepton 3.0 longwave-infrared (LWIR) camera core, get two times the resolution and 4x the pixels of the previous 2.x generation FLIR is covered by a 3D printing case, makes it a perfect functional bottom for non-contact temperature measurement, compatible with M5Core and can be controlled via I2C protocol. The effective image generate by the Lepton sensor is 160\u00d7120, but you can process the image thru program and display a different resolution. Note: If it worked for long hours, Lepton will heat up a little. But the output image is not affected. Product Features 160\u00d7120 Effective Pixels Lepton Low operating power\u2002\u2014\u2002150 mW (operating), 650 mW (during shutter event), 5 mW (standby) Field of view: 56\u00b0, with shutter Lepton Input Supply Voltage: 1.2V\uff0c2.8V\uff0c2.5V - 3.1V IO Fast imaging time ( 0.5 second) Lepton Features Lepton Parameter item Parameter value Effective Frame Rate 8.7Hz Input Clock 25-MHz Pixel Size 12\u00b5m Scene Dynamic Range Low Gain Mode: -10 to 400\u00b0C; High Gain Mode: -10 to 140\u00b0C Spectral Range 8 \u00b5m to 14 \u00b5m Thermal Sensitivity \uff1c50 mK\uff080.050\u2103\uff09 Input Supply Voltage 2.8 V, 1.2 V, 2.5 V - 3.1 V IO Optimum Temperature Range -10 \u00b0C to +80 \u00b0C Kit includes 1x FLIR Application Car engine failure check Building dehumidification insulation sealing test Industrial furnace inner wall refractory crack Outdoor observation of animals at night","title":"Description"},{"location":"tutorials/M5Stack/app/flir/description/#description","text":"FLIR features the latest FLIR Lepton 3.0 longwave-infrared (LWIR) camera core, get two times the resolution and 4x the pixels of the previous 2.x generation FLIR is covered by a 3D printing case, makes it a perfect functional bottom for non-contact temperature measurement, compatible with M5Core and can be controlled via I2C protocol. The effective image generate by the Lepton sensor is 160\u00d7120, but you can process the image thru program and display a different resolution. Note: If it worked for long hours, Lepton will heat up a little. But the output image is not affected.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/app/flir/description/#product-features","text":"160\u00d7120 Effective Pixels Lepton Low operating power\u2002\u2014\u2002150 mW (operating), 650 mW (during shutter event), 5 mW (standby) Field of view: 56\u00b0, with shutter Lepton Input Supply Voltage: 1.2V\uff0c2.8V\uff0c2.5V - 3.1V IO Fast imaging time ( 0.5 second)","title":"Product Features"},{"location":"tutorials/M5Stack/app/flir/description/#lepton-features","text":"Lepton Parameter item Parameter value Effective Frame Rate 8.7Hz Input Clock 25-MHz Pixel Size 12\u00b5m Scene Dynamic Range Low Gain Mode: -10 to 400\u00b0C; High Gain Mode: -10 to 140\u00b0C Spectral Range 8 \u00b5m to 14 \u00b5m Thermal Sensitivity \uff1c50 mK\uff080.050\u2103\uff09 Input Supply Voltage 2.8 V, 1.2 V, 2.5 V - 3.1 V IO Optimum Temperature Range -10 \u00b0C to +80 \u00b0C","title":"Lepton Features"},{"location":"tutorials/M5Stack/app/flir/description/#kit-includes","text":"1x FLIR","title":"Kit includes"},{"location":"tutorials/M5Stack/app/flir/description/#application","text":"Car engine failure check Building dehumidification insulation sealing test Industrial furnace inner wall refractory crack Outdoor observation of animals at night","title":"Application"},{"location":"tutorials/M5Stack/app/flir/documents/","text":"DOCUMENTS Lepton Info (FLIR Website) Datasheet - Lepton 2.5 - Lepton 3 3.5 Lepton Engineering Datasheet Lepton Software Interface Description","title":"Documents"},{"location":"tutorials/M5Stack/app/flir/documents/#documents","text":"Lepton Info (FLIR Website) Datasheet - Lepton 2.5 - Lepton 3 3.5 Lepton Engineering Datasheet Lepton Software Interface Description","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/app/flir/learn/","text":"LEARN Example To get complete code, please click here \u3002","title":"Learn"},{"location":"tutorials/M5Stack/app/flir/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/app/flir/learn/#example","text":"To get complete code, please click here \u3002","title":"Example"},{"location":"tutorials/M5Stack/app/flir/more-information/","text":"MORE INFORMATION","title":"More information"},{"location":"tutorials/M5Stack/app/flir/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/app/lidarbot/description/","text":"DESCRIPTION LidarBot is a powerful development kit for Automated Guided Vehicles(AGVs). Comes with a 360 Lidar sensor, 4 Mecanum wheels, M5 Core, RGB Bars and a remote conroller with Joystick panel and more. With 4 Mecanum wheels, you can make it move to any direction, forward, backward, to left and to right. The Lipo Batteries enpower the Robot to run long-hours. You can display the map data, that obtained from the lidar sensor, on the screen or upload somewhere else thru Wi-Fi and program it into any format. we have implemented Real-time communication via ESP-NOW between robot and remote, Mazing-runing , self-tracing and more. If you are interest in AGV development, We especially encourage you to modify the open source code we have offered on github and enhance it yourself. Product Features Lidar: 8m @ 6Hz Programming Support Arduino UIFlow (Blockly) Python Compatible LEGO Kit includes 1x LidarBot 1x Remote Control Handle 2x Battery(1300mAh @ 11.1V) 1x Power Charger 1x Type-C USB Cable Application Indoor Navigation Autonomous walking maze Route plan Autopilot","title":"Description"},{"location":"tutorials/M5Stack/app/lidarbot/description/#description","text":"LidarBot is a powerful development kit for Automated Guided Vehicles(AGVs). Comes with a 360 Lidar sensor, 4 Mecanum wheels, M5 Core, RGB Bars and a remote conroller with Joystick panel and more. With 4 Mecanum wheels, you can make it move to any direction, forward, backward, to left and to right. The Lipo Batteries enpower the Robot to run long-hours. You can display the map data, that obtained from the lidar sensor, on the screen or upload somewhere else thru Wi-Fi and program it into any format. we have implemented Real-time communication via ESP-NOW between robot and remote, Mazing-runing , self-tracing and more. If you are interest in AGV development, We especially encourage you to modify the open source code we have offered on github and enhance it yourself.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/app/lidarbot/description/#product-features","text":"Lidar: 8m @ 6Hz Programming Support Arduino UIFlow (Blockly) Python Compatible LEGO","title":"Product Features"},{"location":"tutorials/M5Stack/app/lidarbot/description/#kit-includes","text":"1x LidarBot 1x Remote Control Handle 2x Battery(1300mAh @ 11.1V) 1x Power Charger 1x Type-C USB Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/app/lidarbot/description/#application","text":"Indoor Navigation Autonomous walking maze Route plan Autopilot","title":"Application"},{"location":"tutorials/M5Stack/app/lidarbot/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/app/lidarbot/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/app/lidarbot/learn/","text":"LEARN Example To get complete code, please click here \u3002 Tree for Example Directory \u251c\u2500LidarBot_CarMain_V1.1 - Main program of LidarBot \u251c\u2500LidarBot_RemoteController_V1.0 - Program of RemoteController V1.0 \u2514\u2500LidarBot_RemoteController_V1.2 - Program of RemoteController V1.2(twice precision) Program analysis: 1. Main program of LidarBot: /* Main program */ void loop() { espnow.BotConnectUpdate();// ESPNOW reconnect lidarcar.MapDisplay();// display map esp_now_send(espnow.peer_addr, lidarcar.mapdata, 180);// ESPNOW sends map data } Single function resolution: Usage of reading radar data ```arduino #include \"lidarcar.h\" LidarCar lidarcar; lidarcar.Init(); GetData();//save radar data to array distance[] ``` Usage of line following ```arduino #include \"rprtrack.h\" Rprtrack rprtrack; SensorStatus();// save line following data to array sensorValue[] CalTrackDev();// handle array sensorValue[], get car offset and save it ``` Usage of ESP_NOW Please refer to https://github.com/m5stack/M5-espnow 2. Program of RemoteController /* Main program */ void loop() { espnow.RemoteConnectUpdate();// ESPNOW reconnect keyboard.GetValue();// read data of joystick // ESPNOW sends joystick data to car esp_now_send(espnow.peer_addr, keyboard.keyData, 3); MapDisplay();// display map accessport.AnalzyCommand();// send map data to PC software } Single function resolution: Usage of JOYSTICK ```arduino #include \"keyboard.h\" KeyBoard keyboard; keyboard.Init(); // get joystick data and save to adX, adY GetValue(); ``` Usage of communication with PC software ```arduino #include \"accessport.h\" AccessPort accessport; accessport.AnalzyCommand();// send map data to PC software ```","title":"Learn"},{"location":"tutorials/M5Stack/app/lidarbot/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/app/lidarbot/learn/#example","text":"To get complete code, please click here \u3002 Tree for Example Directory \u251c\u2500LidarBot_CarMain_V1.1 - Main program of LidarBot \u251c\u2500LidarBot_RemoteController_V1.0 - Program of RemoteController V1.0 \u2514\u2500LidarBot_RemoteController_V1.2 - Program of RemoteController V1.2(twice precision)","title":"Example"},{"location":"tutorials/M5Stack/app/lidarbot/learn/#program-analysis","text":"","title":"Program analysis:"},{"location":"tutorials/M5Stack/app/lidarbot/learn/#1-main-program-of-lidarbot","text":"/* Main program */ void loop() { espnow.BotConnectUpdate();// ESPNOW reconnect lidarcar.MapDisplay();// display map esp_now_send(espnow.peer_addr, lidarcar.mapdata, 180);// ESPNOW sends map data } Single function resolution: Usage of reading radar data ```arduino #include \"lidarcar.h\" LidarCar lidarcar; lidarcar.Init(); GetData();//save radar data to array distance[] ``` Usage of line following ```arduino #include \"rprtrack.h\" Rprtrack rprtrack; SensorStatus();// save line following data to array sensorValue[] CalTrackDev();// handle array sensorValue[], get car offset and save it ``` Usage of ESP_NOW Please refer to https://github.com/m5stack/M5-espnow","title":"1. Main program of LidarBot:"},{"location":"tutorials/M5Stack/app/lidarbot/learn/#2-program-of-remotecontroller","text":"/* Main program */ void loop() { espnow.RemoteConnectUpdate();// ESPNOW reconnect keyboard.GetValue();// read data of joystick // ESPNOW sends joystick data to car esp_now_send(espnow.peer_addr, keyboard.keyData, 3); MapDisplay();// display map accessport.AnalzyCommand();// send map data to PC software } Single function resolution: Usage of JOYSTICK ```arduino #include \"keyboard.h\" KeyBoard keyboard; keyboard.Init(); // get joystick data and save to adX, adY GetValue(); ``` Usage of communication with PC software ```arduino #include \"accessport.h\" AccessPort accessport; accessport.AnalzyCommand();// send map data to PC software ```","title":"2. Program of RemoteController"},{"location":"tutorials/M5Stack/app/lidarbot/more-information/","text":"MORE INFORMATION Protocol for CarBottomBoard Protocol Format: Data Header ( command type ) + Data Packet + Data Tail Control Target Protocol Format Example Function Wheels 0xAA,SpeedX(-7 ~ 7),SpeedY,SpeedZ,SpeedA,0x55 0xAA, 5, 5, 5, 5, 0x55(Go ahead, speed: 5) ControlWheel(5, 5, 5) One RGB 0xAB,LedIndex,R(0 ~ 254),G,B,0x55 0xAB, 3, 20, 50, 100, 0x55(3th RGB displays specific color) setLedColor(3, 20, 50, 100) Front RGB Bar 0xAC,R(0 ~ 254),G,B,0x55 0xAC, 20, 50, 100, 0x55(Front LED Bar displays specific color) setFrontLedBar(20, 50, 100) Back RGB Bar 0xAD,R(0 ~ 254),G,B,0x55 0xAD, 20, 50, 100, 0x55(Back LED Bar displays specific color) setBackLedBar(20, 50, 100) All RGB 0xAE,R(0 ~ 254),G,B,0x55 0xAE, 20, 50, 100, 0x55(All LED display specific color) setLedAll(20, 50, 100) ServoMotor0 0xAF,Angle(0 ~ 180),0x55 0xAF, 100, 0x55(Servo 0 turns angle 100 degree) setServo0Angle(100) ServoMotor1 0xB0,Angle(0 ~ 180),0x55 0xB0, 100, 0x55(Servo 1 turns angle 100 degree) setServo1Angle(100) PARAMETER The size of LidarBot: 142mm x 117mm x 120mm Communication Parameter M5Core - Lidar ( U1RXD (GPIO16) - Lidar sensor) Serial Configuration: \"230400bps, 8, n, 1\"(8 bits data, no parity, 1 stop bit) M5Core - Bottom Board ( U2TXD (GPIO17) - Bottom Board) Serial Configuration: \"115200bps, 8, n, 1\"(8 bits data, no parity, 1 stop bit) PinMap ServoMotor0 - A0(MEGA328) ServoMotor1 - A1(MEGA328) NeoPixelRGB - 11(MEGA328)","title":"More information"},{"location":"tutorials/M5Stack/app/lidarbot/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/app/lidarbot/more-information/#protocol-for-carbottomboard","text":"Protocol Format: Data Header ( command type ) + Data Packet + Data Tail Control Target Protocol Format Example Function Wheels 0xAA,SpeedX(-7 ~ 7),SpeedY,SpeedZ,SpeedA,0x55 0xAA, 5, 5, 5, 5, 0x55(Go ahead, speed: 5) ControlWheel(5, 5, 5) One RGB 0xAB,LedIndex,R(0 ~ 254),G,B,0x55 0xAB, 3, 20, 50, 100, 0x55(3th RGB displays specific color) setLedColor(3, 20, 50, 100) Front RGB Bar 0xAC,R(0 ~ 254),G,B,0x55 0xAC, 20, 50, 100, 0x55(Front LED Bar displays specific color) setFrontLedBar(20, 50, 100) Back RGB Bar 0xAD,R(0 ~ 254),G,B,0x55 0xAD, 20, 50, 100, 0x55(Back LED Bar displays specific color) setBackLedBar(20, 50, 100) All RGB 0xAE,R(0 ~ 254),G,B,0x55 0xAE, 20, 50, 100, 0x55(All LED display specific color) setLedAll(20, 50, 100) ServoMotor0 0xAF,Angle(0 ~ 180),0x55 0xAF, 100, 0x55(Servo 0 turns angle 100 degree) setServo0Angle(100) ServoMotor1 0xB0,Angle(0 ~ 180),0x55 0xB0, 100, 0x55(Servo 1 turns angle 100 degree) setServo1Angle(100)","title":"Protocol for CarBottomBoard"},{"location":"tutorials/M5Stack/app/lidarbot/more-information/#parameter","text":"The size of LidarBot: 142mm x 117mm x 120mm Communication Parameter M5Core - Lidar ( U1RXD (GPIO16) - Lidar sensor) Serial Configuration: \"230400bps, 8, n, 1\"(8 bits data, no parity, 1 stop bit) M5Core - Bottom Board ( U2TXD (GPIO17) - Bottom Board) Serial Configuration: \"115200bps, 8, n, 1\"(8 bits data, no parity, 1 stop bit) PinMap ServoMotor0 - A0(MEGA328) ServoMotor1 - A1(MEGA328) NeoPixelRGB - 11(MEGA328)","title":"PARAMETER"},{"location":"tutorials/M5Stack/app/piano/description/","text":"DESCRIPTION PIANO is a application base related to music or sound performing. Comes with two touch sensors(TS20) which communicate with M5 core via I2C protocol. I2C address is 0x6A and 0x7A. Kit includes 1x PIANO","title":"Description"},{"location":"tutorials/M5Stack/app/piano/description/#description","text":"PIANO is a application base related to music or sound performing. Comes with two touch sensors(TS20) which communicate with M5 core via I2C protocol. I2C address is 0x6A and 0x7A.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/app/piano/description/#kit-includes","text":"1x PIANO","title":"Kit includes"},{"location":"tutorials/M5Stack/app/piano/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/app/piano/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/app/piano/learn/","text":"LEARN Example https://github.com/m5stack/M5-ProductExampleCodes/blob/master/App/PIANO/Arduino/M5PIANO/M5PIANO.ino","title":"Learn"},{"location":"tutorials/M5Stack/app/piano/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/app/piano/learn/#example","text":"https://github.com/m5stack/M5-ProductExampleCodes/blob/master/App/PIANO/Arduino/M5PIANO/M5PIANO.ino","title":"Example"},{"location":"tutorials/M5Stack/app/piano/more-information/","text":"MORE INFORMATION PinMap Touch Sensor (TS20) LED ESP32 Chip GPIO7 GPIO6 GPIO5 GPIO26 GPIO2 TS20 RESET EN SCL SDA / RGB LED / / / / Signal Pin","title":"More information"},{"location":"tutorials/M5Stack/app/piano/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/app/piano/more-information/#pinmap","text":"Touch Sensor (TS20) LED ESP32 Chip GPIO7 GPIO6 GPIO5 GPIO26 GPIO2 TS20 RESET EN SCL SDA / RGB LED / / / / Signal Pin","title":"PinMap"},{"location":"tutorials/M5Stack/base/btc/description/","text":"DESCRIPTION BTC is a M5 base that allows you sit your M5 core instead of laying them down or hang on the wall. BTC is not just a sit for holding the M5 core but also comes with serveral features like temperature and humiluty detection(by DHT12), and power seat. Note: This Base can be used as a seat for BASIC or GRAY , USBC thru BTC can only supply power to the M5core not actually charging the Lipo battery. Because the battery can only be charged thru IP5306 which is not inside BTC, the USBC power pin had connected to output 5v(VCC_5V) of IP5306 on M5core. The DHT12 inside BTC share the same IO with GROVE PORTA. Extend ENV unit on GROVE PORTA gonna cause I@C adress conflict. Product Features DHT12 inside Kit includes Type-C USB Cable M3 x 16 Screw Key","title":"Description"},{"location":"tutorials/M5Stack/base/btc/description/#description","text":"BTC is a M5 base that allows you sit your M5 core instead of laying them down or hang on the wall. BTC is not just a sit for holding the M5 core but also comes with serveral features like temperature and humiluty detection(by DHT12), and power seat. Note: This Base can be used as a seat for BASIC or GRAY , USBC thru BTC can only supply power to the M5core not actually charging the Lipo battery. Because the battery can only be charged thru IP5306 which is not inside BTC, the USBC power pin had connected to output 5v(VCC_5V) of IP5306 on M5core. The DHT12 inside BTC share the same IO with GROVE PORTA. Extend ENV unit on GROVE PORTA gonna cause I@C adress conflict.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/base/btc/description/#product-features","text":"DHT12 inside","title":"Product Features"},{"location":"tutorials/M5Stack/base/btc/description/#kit-includes","text":"Type-C USB Cable M3 x 16 Screw Key","title":"Kit includes"},{"location":"tutorials/M5Stack/base/btc/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/base/btc/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/base/btc/learn/","text":"LEARN Example Arduino IDE To get the code BTC.ino , please click here . #include M5Stack.h #include DHT12.h #include Wire.h //The DHT12 uses I2C comunication. void setup() { M5.begin(); Wire.begin(); M5.Lcd.setBrightness(10); Serial.println(F( ENV Unit(DHT12 and BMP280) test... )); } void loop() { float tmp = dht12.readTemperature(); float hum = dht12.readHumidity(); Serial.printf( Temperatura: %2.2f*C Humedad: %0.2f%%\\r\\n , tmp, hum); M5.Lcd.setCursor(0, 0); M5.Lcd.setTextColor(WHITE, BLACK); M5.Lcd.setTextSize(3); M5.Lcd.printf( Temp: %2.1f \\r\\nHumi: %2.0f%% \\r\\n , tmp, hum); delay(100); }","title":"Learn"},{"location":"tutorials/M5Stack/base/btc/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/base/btc/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/base/btc/learn/#arduino-ide","text":"To get the code BTC.ino , please click here . #include M5Stack.h #include DHT12.h #include Wire.h //The DHT12 uses I2C comunication. void setup() { M5.begin(); Wire.begin(); M5.Lcd.setBrightness(10); Serial.println(F( ENV Unit(DHT12 and BMP280) test... )); } void loop() { float tmp = dht12.readTemperature(); float hum = dht12.readHumidity(); Serial.printf( Temperatura: %2.2f*C Humedad: %0.2f%%\\r\\n , tmp, hum); M5.Lcd.setCursor(0, 0); M5.Lcd.setTextColor(WHITE, BLACK); M5.Lcd.setTextSize(3); M5.Lcd.printf( Temp: %2.1f \\r\\nHumi: %2.0f%% \\r\\n , tmp, hum); delay(100); }","title":"Arduino IDE"},{"location":"tutorials/M5Stack/base/btc/more-information/","text":"MORE INFORMATION DHT12 ESP32 Chip GPIO22 GND GPIO21 3V3 DHT12 SCL GND SDA 3V3","title":"More information"},{"location":"tutorials/M5Stack/base/btc/more-information/#more-information","text":"DHT12 ESP32 Chip GPIO22 GND GPIO21 3V3 DHT12 SCL GND SDA 3V3","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/base/core_bottom/description/","text":"DESCRIPTION Core BOTTOM is the bottom part of M5Core, M5Basic and M5 GRAY, with M-BUS socket and extend pins on the side, also include a Lipo battery . If you want to buy these bottoms separately, you can get it from here. Product Features Lipo battery: 150 mAh @ 3.7V","title":"Description"},{"location":"tutorials/M5Stack/base/core_bottom/description/#description","text":"Core BOTTOM is the bottom part of M5Core, M5Basic and M5 GRAY, with M-BUS socket and extend pins on the side, also include a Lipo battery . If you want to buy these bottoms separately, you can get it from here.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/base/core_bottom/description/#product-features","text":"Lipo battery: 150 mAh @ 3.7V","title":"Product Features"},{"location":"tutorials/M5Stack/base/core_bottom/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/base/core_bottom/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/base/core_bottom/learn/","text":"LEARN","title":"Learn"},{"location":"tutorials/M5Stack/base/core_bottom/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/base/core_bottom/more-information/","text":"MORE INFORMATION M-Bus","title":"More information"},{"location":"tutorials/M5Stack/base/core_bottom/more-information/#more-information","text":"M-Bus","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/base/lan/description/","text":"DESCRIPTION Although M5 core is ESP32-based, having Wi-Fi and Bluetooth intergrated, it doesn't stop you enable the Ethernet function. This LAN is a M5 Base that having a W5500 chip, which is a Hardwired TCP/IP embedded Ethernet controller that provides easier Internet connection to embedded systems. This Base is speciffically design for industrial application scenarioes, comes with couple of HT3.96 connectors, 485 metal rail and magnet discs for easy installation and fixation. Product Features Input Supply Voltage: 9-24V HT3.96 port for supporting RS485 Support RS485 communication Easy to fixed on the wall Kit includes 1x LAN Base 1x TTL-to-RS485 adapter board 1x pin header 20pin 1x metal rails and magnet discs 3x HT3.96 terminal 2x 3pin 1x 4pin 10x cold crimp terminal 3x Allen wrench - 1x 1.5mm - 1x 2mm - 1x 2.5mm 2x hexagon socket head cap screws M3x28 4x hexagon socket tapping screw KA2x4 1x countersunk head screw M3x8 Application M5Core + LAN implemented a conveyor controller PC transmits video to Core via cable","title":"Description"},{"location":"tutorials/M5Stack/base/lan/description/#description","text":"Although M5 core is ESP32-based, having Wi-Fi and Bluetooth intergrated, it doesn't stop you enable the Ethernet function. This LAN is a M5 Base that having a W5500 chip, which is a Hardwired TCP/IP embedded Ethernet controller that provides easier Internet connection to embedded systems. This Base is speciffically design for industrial application scenarioes, comes with couple of HT3.96 connectors, 485 metal rail and magnet discs for easy installation and fixation.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/base/lan/description/#product-features","text":"Input Supply Voltage: 9-24V HT3.96 port for supporting RS485 Support RS485 communication Easy to fixed on the wall","title":"Product Features"},{"location":"tutorials/M5Stack/base/lan/description/#kit-includes","text":"1x LAN Base 1x TTL-to-RS485 adapter board 1x pin header 20pin 1x metal rails and magnet discs 3x HT3.96 terminal 2x 3pin 1x 4pin 10x cold crimp terminal 3x Allen wrench - 1x 1.5mm - 1x 2mm - 1x 2.5mm 2x hexagon socket head cap screws M3x28 4x hexagon socket tapping screw KA2x4 1x countersunk head screw M3x8","title":"Kit includes"},{"location":"tutorials/M5Stack/base/lan/description/#application","text":"M5Core + LAN implemented a conveyor controller PC transmits video to Core via cable","title":"Application"},{"location":"tutorials/M5Stack/base/lan/documents/","text":"DOCUMENTS Datasheet - W5500","title":"Documents"},{"location":"tutorials/M5Stack/base/lan/documents/#documents","text":"Datasheet - W5500","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/base/lan/learn/","text":"LEARN","title":"Learn"},{"location":"tutorials/M5Stack/base/lan/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/base/lan/more-information/","text":"MORE INFORMATION The 6 pin of HT3.96 connector are dangling, you can wired them up with the M-BUS and other circult as you like. The figure below shows the inner of LAN If you need to add RS485 interface, soldering the RS485 board onto the mian board pin correspondingly. TTL-to-RS485 adapter board and LAN base The figure below tells you how the TTL-to-RS485 adapter board connected onto LAN backplane The serial port pins on the RS485 board will be connected to the GPIO16 and GPIO17 of the LAN backplane. PinMap W5500 W5500 ESP32 Chip MOSI GPIO23 MISO GPIO19 CLK GPIO18 CS GPIO26 RST GPIO13 INTn GPIO34 M-Bus Schematic","title":"More information"},{"location":"tutorials/M5Stack/base/lan/more-information/#more-information","text":"The 6 pin of HT3.96 connector are dangling, you can wired them up with the M-BUS and other circult as you like. The figure below shows the inner of LAN If you need to add RS485 interface, soldering the RS485 board onto the mian board pin correspondingly. TTL-to-RS485 adapter board and LAN base The figure below tells you how the TTL-to-RS485 adapter board connected onto LAN backplane The serial port pins on the RS485 board will be connected to the GPIO16 and GPIO17 of the LAN backplane.","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/base/lan/more-information/#pinmap","text":"W5500 W5500 ESP32 Chip MOSI GPIO23 MISO GPIO19 CLK GPIO18 CS GPIO26 RST GPIO13 INTn GPIO34 M-Bus","title":"PinMap"},{"location":"tutorials/M5Stack/base/lan/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/base/m5go_bottom/description/","text":"DESCRIPTION M5GO BOTTOM is apparently the bottom part of M5GO which is a upgrade of basic bottoms, with a larger battery, LOGO-compatilble holes, MICPHONE, LED Bar , two more GROVE PORT\uff0cand more. M5GO BOTTOM is the same Bottom of M5GO Lite , M5GO IoT Kit and M5Fire .","title":"Description"},{"location":"tutorials/M5Stack/base/m5go_bottom/description/#description","text":"M5GO BOTTOM is apparently the bottom part of M5GO which is a upgrade of basic bottoms, with a larger battery, LOGO-compatilble holes, MICPHONE, LED Bar , two more GROVE PORT\uff0cand more. M5GO BOTTOM is the same Bottom of M5GO Lite , M5GO IoT Kit and M5Fire .","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/base/m5go_bottom/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/base/m5go_bottom/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/base/m5go_bottom/learn/","text":"LEARN","title":"Learn"},{"location":"tutorials/M5Stack/base/m5go_bottom/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/base/m5go_bottom/more-information/","text":"MORE INFORMATION PinMap POGO Pin POGO Pin ESP32 Chip SCL GPIO22 SDA GPIO21 LED Bar There are 10 RGB Leds built in M5GO Base LED Pin ESP32 Chip LED Pin GPIO15 MIC MIC Pin ESP32 Chip MIC Pin GPIO34 GROVE PORT B(I/O) ESP32 Chip G36 GPIO36 G26 GPIO26 5V 5V GND GND PORT C(UART2) ESP32 Chip RXD GPIO16 TXD GPIO17 5V 5V GND GND M-Bus Schematic","title":"More information"},{"location":"tutorials/M5Stack/base/m5go_bottom/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/base/m5go_bottom/more-information/#pinmap","text":"POGO Pin POGO Pin ESP32 Chip SCL GPIO22 SDA GPIO21 LED Bar There are 10 RGB Leds built in M5GO Base LED Pin ESP32 Chip LED Pin GPIO15 MIC MIC Pin ESP32 Chip MIC Pin GPIO34 GROVE PORT B(I/O) ESP32 Chip G36 GPIO36 G26 GPIO26 5V 5V GND GND PORT C(UART2) ESP32 Chip RXD GPIO16 TXD GPIO17 5V 5V GND GND M-Bus","title":"PinMap"},{"location":"tutorials/M5Stack/base/m5go_bottom/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/base/m5go_charger/description/","text":"DESCRIPTION M5GO CHARGER is a charger base for M5GO Lite kit and M5GO IOT Kit and FIRE . Kit includes 1x M5GO CHARGER Type-C USB cable","title":"Description"},{"location":"tutorials/M5Stack/base/m5go_charger/description/#description","text":"M5GO CHARGER is a charger base for M5GO Lite kit and M5GO IOT Kit and FIRE .","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/base/m5go_charger/description/#kit-includes","text":"1x M5GO CHARGER Type-C USB cable","title":"Kit includes"},{"location":"tutorials/M5Stack/base/m5go_charger/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/base/m5go_charger/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/base/m5go_charger/learn/","text":"LEARN","title":"Learn"},{"location":"tutorials/M5Stack/base/m5go_charger/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/base/m5go_charger/more-information/","text":"MORE INFORMATION The charging indicator light will blink when base is charging, but the light will keep on when charge completed.","title":"More information"},{"location":"tutorials/M5Stack/base/m5go_charger/more-information/#more-information","text":"The charging indicator light will blink when base is charging, but the light will keep on when charge completed.","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/base/node/description/","text":"DESCRIPTION Node , like its namesake, is a smart node with full-featured functions in a IoT application scenarios. It can be program as a intelligent speaker like Echo. Node provides more hardware resources: built-in high-fidelity audio codec chip\uff0cMIC, DHT12, IR emitter ... ESP32 provides an Audio Develope Platform called ESP-ADF. ESP-ADF supports development of audio applications for the Espressif Systems ESP32 chip in the most comprehensive way. With ESP-ADF, you can easily add features, develop audio applications from simple to complex: Music player or recorder supports audio formats such as MP3, AAC, FLAC, WAV, OGG, AMR, TS, EQ, Downmixer, Sonic, G.711, SPEEX ... Play music from sources: HTTP, HLS(HTTP Live Streaming), SPIFFS, SDCARD, A2DP-Source, A2DP-Sink, HFP ... Integrate Media services such as: DLNA, WeChat ... Internet Radio Voice recognition and integration with online services such as Alexa, DuerOS, and more. Product Feature 1x 12 RGBs 1x temperature humidity sensor(DHT12),which can display its own status and perception surrounding environment. 4x IR Transmitter LEDs at four corners and 2x IR Receivers 2x MIC 1x HiFi stereo codec chip ( Up to 24bit DAC ) 1x 500mAh lithium battery Kit includes 1x Node Module Wall holder 4x screws 4x Type-C USB Cable Applications Intelligent IOT node Webradio Intelligent sound box","title":"Description"},{"location":"tutorials/M5Stack/base/node/description/#description","text":"Node , like its namesake, is a smart node with full-featured functions in a IoT application scenarios. It can be program as a intelligent speaker like Echo. Node provides more hardware resources: built-in high-fidelity audio codec chip\uff0cMIC, DHT12, IR emitter ... ESP32 provides an Audio Develope Platform called ESP-ADF. ESP-ADF supports development of audio applications for the Espressif Systems ESP32 chip in the most comprehensive way. With ESP-ADF, you can easily add features, develop audio applications from simple to complex: Music player or recorder supports audio formats such as MP3, AAC, FLAC, WAV, OGG, AMR, TS, EQ, Downmixer, Sonic, G.711, SPEEX ... Play music from sources: HTTP, HLS(HTTP Live Streaming), SPIFFS, SDCARD, A2DP-Source, A2DP-Sink, HFP ... Integrate Media services such as: DLNA, WeChat ... Internet Radio Voice recognition and integration with online services such as Alexa, DuerOS, and more.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/base/node/description/#product-feature","text":"1x 12 RGBs 1x temperature humidity sensor(DHT12),which can display its own status and perception surrounding environment. 4x IR Transmitter LEDs at four corners and 2x IR Receivers 2x MIC 1x HiFi stereo codec chip ( Up to 24bit DAC ) 1x 500mAh lithium battery","title":"Product Feature"},{"location":"tutorials/M5Stack/base/node/description/#kit-includes","text":"1x Node Module Wall holder 4x screws 4x Type-C USB Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/base/node/description/#applications","text":"Intelligent IOT node Webradio Intelligent sound box","title":"Applications"},{"location":"tutorials/M5Stack/base/node/documents/","text":"DOCUMENTS Datasheet - WM8978","title":"Documents"},{"location":"tutorials/M5Stack/base/node/documents/#documents","text":"Datasheet - WM8978","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/base/node/learn/","text":"LEARN Example Voice control RGB light circle ( Chinese )","title":"Learn"},{"location":"tutorials/M5Stack/base/node/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/base/node/learn/#example","text":"Voice control RGB light circle ( Chinese )","title":"Example"},{"location":"tutorials/M5Stack/base/node/more-information/","text":"MORE INFORMATION PinMap ESP32 GPIO0 GPIO13 GPIO5 GPIO2 ( MOSI ) GPIO34 ( MISO ) GPIO21 GPIO22 GPIO25 Codec Chip ( WM8978 ) I2S_CLK ( MCLK ) I2S_WS ( LRC ) I2S_BCK ( BCK ) I2S_IN ( DACDAT ) I2S_OUT ( ADCDAT ) I2C_SDA ( SDIN ) I2C_SCL ( SCLK ) L_OUT1 ( LOUT1 ) ESP32 GPIO15 GPIO35 GPIO12 GPIO21 GPIO22 RGBLed(SK6812) Signal Pin / / / / IR / IR_Receive IR_Send / / DHT12 / / / I2C_SDA I2C_SCL Schematic","title":"More information"},{"location":"tutorials/M5Stack/base/node/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/base/node/more-information/#pinmap","text":"ESP32 GPIO0 GPIO13 GPIO5 GPIO2 ( MOSI ) GPIO34 ( MISO ) GPIO21 GPIO22 GPIO25 Codec Chip ( WM8978 ) I2S_CLK ( MCLK ) I2S_WS ( LRC ) I2S_BCK ( BCK ) I2S_IN ( DACDAT ) I2S_OUT ( ADCDAT ) I2C_SDA ( SDIN ) I2C_SCL ( SCLK ) L_OUT1 ( LOUT1 ) ESP32 GPIO15 GPIO35 GPIO12 GPIO21 GPIO22 RGBLed(SK6812) Signal Pin / / / / IR / IR_Receive IR_Send / / DHT12 / / / I2C_SDA I2C_SCL","title":"PinMap"},{"location":"tutorials/M5Stack/base/node/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/base/plc/description/","text":"DESCRIPTION PLC is a Base specifically design for industrial application. DC Power in 9-24V. Does this PLC remind you of the 'PLC' in industrial controll short for 'Programmable Logic Controller'. This PLC base is not the typical 'PLC' used in programmable controller, but its does able to implement the most common controller in industrial field. Based on the current M5 development system, you can add as many Realys as you want, you can enable the TTL-RS485 communication, you can layout your customized circult on the protoboard. you also can make it an LoRa node by stacking a LoRa module etc. This base gives you unlimited number of combinations, it is powerful, flexiable, and covered with industrial-grade case. If you're happen to working in an industrial field, We especially recommend this PLC base to you which will surely give you the best and the most fast way to resolve your requirement. The current sensor (ACS712TELC-05B) is also integrated on the RS485 adapter board for current monitoring. If you need to add RS485 interface, soldering the RS485 board onto the mian board pin correspondingly. The serial port pins on the RS485 board will be connected to the GPIO16 and GPIO17 of the LAN backplane. Product Features Support 9-24V voltage input Individual package weight: 0.1kg Package size: 5cm * 5cm * 5cm (1.97in * 1.97in * 1.97in) Kit includes 1x PLC-Proto Broad 1x RS485 module 1x PLC Plastic Enclosure 1x Slide Guide 1x Magnet 1x 6 Pin 3.96 Pitch Terminal 1x 4 Pin 3.96 Pitch Terminal 3x hexagonal wrench 7x Screw (Three models: M2x4, M3x6, M3x18) 1x Sticker","title":"Description"},{"location":"tutorials/M5Stack/base/plc/description/#description","text":"PLC is a Base specifically design for industrial application. DC Power in 9-24V. Does this PLC remind you of the 'PLC' in industrial controll short for 'Programmable Logic Controller'. This PLC base is not the typical 'PLC' used in programmable controller, but its does able to implement the most common controller in industrial field. Based on the current M5 development system, you can add as many Realys as you want, you can enable the TTL-RS485 communication, you can layout your customized circult on the protoboard. you also can make it an LoRa node by stacking a LoRa module etc. This base gives you unlimited number of combinations, it is powerful, flexiable, and covered with industrial-grade case. If you're happen to working in an industrial field, We especially recommend this PLC base to you which will surely give you the best and the most fast way to resolve your requirement. The current sensor (ACS712TELC-05B) is also integrated on the RS485 adapter board for current monitoring. If you need to add RS485 interface, soldering the RS485 board onto the mian board pin correspondingly. The serial port pins on the RS485 board will be connected to the GPIO16 and GPIO17 of the LAN backplane.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/base/plc/description/#product-features","text":"Support 9-24V voltage input Individual package weight: 0.1kg Package size: 5cm * 5cm * 5cm (1.97in * 1.97in * 1.97in)","title":"Product Features"},{"location":"tutorials/M5Stack/base/plc/description/#kit-includes","text":"1x PLC-Proto Broad 1x RS485 module 1x PLC Plastic Enclosure 1x Slide Guide 1x Magnet 1x 6 Pin 3.96 Pitch Terminal 1x 4 Pin 3.96 Pitch Terminal 3x hexagonal wrench 7x Screw (Three models: M2x4, M3x6, M3x18) 1x Sticker","title":"Kit includes"},{"location":"tutorials/M5Stack/base/plc/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/base/plc/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/base/plc/learn/","text":"LEARN","title":"Learn"},{"location":"tutorials/M5Stack/base/plc/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/base/plc/more-information/","text":"MORE INFORMATION Schematic","title":"More information"},{"location":"tutorials/M5Stack/base/plc/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/base/plc/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/core/basic/description/","text":"DESCRIPTION M5Stack BASIC Kit , like its namesake, is a starter kit among the M5Stack development kit series. Its modular, stackable, scalable, and portable device is powered with an ESP-32 core, which makes it open source, low cost, full-function, and easy for developers to handle new product development on all stages include circuit design, PCB design, software, mold design and production. This Basic kit provides a friendly price and full-featured resources which makes it a good starter kit for you to explore IoT. Ever wanted to explore the fastest way of IoT prototyping, M5Stack development board is the perfect solution. Not like others, M5Stack development board is highly productlized, covered with industrial grade case, and ESP32-based development board. ESP32 is a hybid Wi-Fi Bluetooth chip contains a dual-core and 4MB of SPI Flash . Together with 30+ M5Stack stackable modules( M5Modules-link ) , 40+ extendable units( M5Units-link ), and different levels of program language, you can create and verify your IoT product in a very short time. Supported development platforms and program languages: Arduino, Blockly language with UIFlow(link), Micropython. Regardless of what level program skill you have, M5Stack would guide you in every step of the way to realize your idea as well as to the final productilization. If you ever played with ESP8266, you would realize that ESP32 is a perfect upgrade from ESP8266. In comparison, ESP32 is full-feathered with more GPIO, plenty of analog inputs and two analog outputs, multiple extra perpherials( like a spare UART ). Official development platform ESP-IDF have planted with FreeRTOS. With dual-core and real time OS you can get more organized code and much high speed processor. M5Stack Basic is consist with two separable parts. the top part has all kinds of processor, chips and some other slot components. The bottom part has a lithium battery, M-BUS(link) socket and extendable pins on both sides. (\u914d\u56fe\u8bf4\u660e) Notice: 1)Basic kit have no IMU sensor inside 2)GPIO0, GPIO12, GPIO13, GPIO15, GPIO34, pins that related to I2S are not extended out Product Features 5V DC power supply USB Type-C ESP32-based 4 MByte flash + 520K RAM Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Program Platform: ESP32 Features 240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support Kit includes: 1x M5Stack BASIC Controller 1x Basic Base 10x Femal-male Dupont Type-C USB cable User Manual","title":"Description"},{"location":"tutorials/M5Stack/core/basic/description/#description","text":"M5Stack BASIC Kit , like its namesake, is a starter kit among the M5Stack development kit series. Its modular, stackable, scalable, and portable device is powered with an ESP-32 core, which makes it open source, low cost, full-function, and easy for developers to handle new product development on all stages include circuit design, PCB design, software, mold design and production. This Basic kit provides a friendly price and full-featured resources which makes it a good starter kit for you to explore IoT. Ever wanted to explore the fastest way of IoT prototyping, M5Stack development board is the perfect solution. Not like others, M5Stack development board is highly productlized, covered with industrial grade case, and ESP32-based development board. ESP32 is a hybid Wi-Fi Bluetooth chip contains a dual-core and 4MB of SPI Flash . Together with 30+ M5Stack stackable modules( M5Modules-link ) , 40+ extendable units( M5Units-link ), and different levels of program language, you can create and verify your IoT product in a very short time. Supported development platforms and program languages: Arduino, Blockly language with UIFlow(link), Micropython. Regardless of what level program skill you have, M5Stack would guide you in every step of the way to realize your idea as well as to the final productilization. If you ever played with ESP8266, you would realize that ESP32 is a perfect upgrade from ESP8266. In comparison, ESP32 is full-feathered with more GPIO, plenty of analog inputs and two analog outputs, multiple extra perpherials( like a spare UART ). Official development platform ESP-IDF have planted with FreeRTOS. With dual-core and real time OS you can get more organized code and much high speed processor. M5Stack Basic is consist with two separable parts. the top part has all kinds of processor, chips and some other slot components. The bottom part has a lithium battery, M-BUS(link) socket and extendable pins on both sides. (\u914d\u56fe\u8bf4\u660e) Notice: 1)Basic kit have no IMU sensor inside 2)GPIO0, GPIO12, GPIO13, GPIO15, GPIO34, pins that related to I2S are not extended out","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/core/basic/description/#product-features","text":"5V DC power supply USB Type-C ESP32-based 4 MByte flash + 520K RAM Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Program Platform:","title":"Product Features"},{"location":"tutorials/M5Stack/core/basic/description/#esp32-features","text":"240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support","title":"ESP32 Features"},{"location":"tutorials/M5Stack/core/basic/description/#kit-includes","text":"1x M5Stack BASIC Controller 1x Basic Base 10x Femal-male Dupont Type-C USB cable User Manual","title":"Kit includes:"},{"location":"tutorials/M5Stack/core/basic/documents/","text":"DOCUMENTS datasheet - ESP32 Register Manual - IP5306 Schematic","title":"Documents"},{"location":"tutorials/M5Stack/core/basic/documents/#documents","text":"datasheet - ESP32 Register Manual - IP5306 Schematic","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/core/basic/learn/","text":"LEARN Get-started Tutorial https://docs.m5stack.com/#/zh_CN/quick_start/m5core/m5stack_core_quick_start","title":"Learn"},{"location":"tutorials/M5Stack/core/basic/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/core/basic/learn/#get-started-tutorial","text":"https://docs.m5stack.com/#/zh_CN/quick_start/m5core/m5stack_core_quick_start","title":"Get-started Tutorial"},{"location":"tutorials/M5Stack/core/basic/more-information/","text":"MORE INFORMATION Peripherals Pin Map LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND Technical details Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 4MB Power Input 5V @ 500mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 150mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 12.5 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits of M5 For details click here \u3002 Download chart click here \u3002","title":"More information"},{"location":"tutorials/M5Stack/core/basic/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/core/basic/more-information/#peripherals-pin-map","text":"LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND","title":"Peripherals Pin Map"},{"location":"tutorials/M5Stack/core/basic/more-information/#technical-details","text":"Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 4MB Power Input 5V @ 500mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 150mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 12.5 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits of M5 For details click here \u3002 Download chart click here \u3002","title":"Technical details"},{"location":"tutorials/M5Stack/core/faces-kit/description/","text":"DESCRIPTION FACES Kit is a feast of functional panels, contains the most commonly used panels and keyboards with MEGA328 processor inside, communication protocol through IIC(0x08) as slave mode. With these 3 different panels, it will be very easy to support keyboard interaction with your M5Core. If you up for some classic video game, GameBoy panel plus M5Core is the perfect combination. All you need to do is upload an game simulator onto M5 controller, and attach the GameBoy panel underneath. this is how it looks: The other two panels are Calculator Keyboard and QWERTY Keyboard. QWERTY Keyboard Other than 3 functional panels, this development kit comes with more stuff like a charger table with Mangent and POGO pin connector. For more information on M5Stack series development board, please check the Gray Kit Product Features 5V DC power supply USB Type-C ESP32-based 16 MByte flash + 520K RAM MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino Part List 1x GRAY M5Stack Controller(M5Core) 1x FACES Charger table 1x FACES sling 1x panel sticker 3x FACES Keyboard(GameBoy, Calculator, QWERTY) 10x Femal-male dupont 6x M3x10 screw 1x hexagon screw key","title":"Description"},{"location":"tutorials/M5Stack/core/faces-kit/description/#description","text":"FACES Kit is a feast of functional panels, contains the most commonly used panels and keyboards with MEGA328 processor inside, communication protocol through IIC(0x08) as slave mode. With these 3 different panels, it will be very easy to support keyboard interaction with your M5Core. If you up for some classic video game, GameBoy panel plus M5Core is the perfect combination. All you need to do is upload an game simulator onto M5 controller, and attach the GameBoy panel underneath. this is how it looks: The other two panels are Calculator Keyboard and QWERTY Keyboard.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/core/faces-kit/description/#qwerty-keyboard","text":"Other than 3 functional panels, this development kit comes with more stuff like a charger table with Mangent and POGO pin connector. For more information on M5Stack series development board, please check the Gray Kit","title":"QWERTY Keyboard"},{"location":"tutorials/M5Stack/core/faces-kit/description/#product-features","text":"5V DC power supply USB Type-C ESP32-based 16 MByte flash + 520K RAM MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino","title":"Product Features"},{"location":"tutorials/M5Stack/core/faces-kit/description/#part-list","text":"1x GRAY M5Stack Controller(M5Core) 1x FACES Charger table 1x FACES sling 1x panel sticker 3x FACES Keyboard(GameBoy, Calculator, QWERTY) 10x Femal-male dupont 6x M3x10 screw 1x hexagon screw key","title":"Part List"},{"location":"tutorials/M5Stack/core/faces-kit/documents/","text":"DOCUMENTS Datasheet - ESP32 - MPU9250 Register Manual - IP5306 M5Core Schematic Example Panel Firmware","title":"Documents"},{"location":"tutorials/M5Stack/core/faces-kit/documents/#documents","text":"Datasheet - ESP32 - MPU9250 Register Manual - IP5306 M5Core Schematic Example Panel Firmware","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/core/faces-kit/gameboy_burn_a_nes_game/","text":"Download NES Game {docsify-ignore-all} This page teaches you how to setup a game simulator, and burn some classic game onto the device. CONTENT download firmware download firmware and game file Reboot FACES download firmware Download Gameboy simulator: firmware.zip in here\uff1a Github \uff0c Unzip firmware.zip ( include: bootloader.bin,partition file, simulator file, SuperMario )\u3002 Windows OS Mac OS Download game Windows OS Open up esptool Flash Download Tools choose ESP32 DownloadTool , and place the 4 files unzip from firmware.zip according to the picture. Select the right port number\uff0cerase flash and click download Mac OS Install esptool open up terminal\uff0ctype in pip install esptool download firmware At terminal,navigate to firmware.zip 's include path. unzip firmware.zip cd firmware esptool.py erase_flash sh flash.sh Reboot FACES ? To change games\uff0creplace the game file ,which has to be NES format, and repeat the steps above *","title":"Download NES Game {docsify-ignore-all}"},{"location":"tutorials/M5Stack/core/faces-kit/gameboy_burn_a_nes_game/#download-nes-game-docsify-ignore-all","text":"This page teaches you how to setup a game simulator, and burn some classic game onto the device.","title":"Download NES Game {docsify-ignore-all}"},{"location":"tutorials/M5Stack/core/faces-kit/gameboy_burn_a_nes_game/#content","text":"download firmware download firmware and game file Reboot FACES","title":"CONTENT"},{"location":"tutorials/M5Stack/core/faces-kit/gameboy_burn_a_nes_game/#download-firmware","text":"Download Gameboy simulator: firmware.zip in here\uff1a Github \uff0c Unzip firmware.zip ( include: bootloader.bin,partition file, simulator file, SuperMario )\u3002","title":"download firmware"},{"location":"tutorials/M5Stack/core/faces-kit/gameboy_burn_a_nes_game/#windows-os","text":"","title":"Windows OS"},{"location":"tutorials/M5Stack/core/faces-kit/gameboy_burn_a_nes_game/#mac-os","text":"","title":"Mac OS"},{"location":"tutorials/M5Stack/core/faces-kit/gameboy_burn_a_nes_game/#download-game","text":"","title":"Download game"},{"location":"tutorials/M5Stack/core/faces-kit/gameboy_burn_a_nes_game/#windows-os_1","text":"Open up esptool Flash Download Tools choose ESP32 DownloadTool , and place the 4 files unzip from firmware.zip according to the picture. Select the right port number\uff0cerase flash and click download","title":"Windows OS"},{"location":"tutorials/M5Stack/core/faces-kit/gameboy_burn_a_nes_game/#mac-os_1","text":"Install esptool open up terminal\uff0ctype in pip install esptool download firmware At terminal,navigate to firmware.zip 's include path. unzip firmware.zip cd firmware esptool.py erase_flash sh flash.sh","title":"Mac OS"},{"location":"tutorials/M5Stack/core/faces-kit/gameboy_burn_a_nes_game/#reboot-faces","text":"? To change games\uff0creplace the game file ,which has to be NES format, and repeat the steps above *","title":"Reboot FACES"},{"location":"tutorials/M5Stack/core/faces-kit/learn/","text":"LEARN Download the factory test code (Win) Go to M5stack and download M5Burner. Connect FACES to PC thru Type-C. Click Erase, wait until erase down. Find FACES Kit firmware, click click Burn","title":"Learn"},{"location":"tutorials/M5Stack/core/faces-kit/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/core/faces-kit/learn/#download-the-factory-test-code-win","text":"Go to M5stack and download M5Burner. Connect FACES to PC thru Type-C. Click Erase, wait until erase down. Find FACES Kit firmware, click click Burn","title":"Download the factory test code (Win)"},{"location":"tutorials/M5Stack/core/faces-kit/more-information/","text":"MORE INFORMATION Peripherals Pin Map LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND 9-Axis Posture Sensor MPU9250 I2C address 0x68 ESP32 Chip GPIO22 GPIO21 5V GND MPU9250 SCL SDA 5V GND Technical details Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 16MB (old: 4MB) Power Input 5V @ 150mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 150mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 12.5 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002","title":"More information"},{"location":"tutorials/M5Stack/core/faces-kit/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/core/faces-kit/more-information/#peripherals-pin-map","text":"LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND 9-Axis Posture Sensor MPU9250 I2C address 0x68 ESP32 Chip GPIO22 GPIO21 5V GND MPU9250 SCL SDA 5V GND","title":"Peripherals Pin Map"},{"location":"tutorials/M5Stack/core/faces-kit/more-information/#technical-details","text":"Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 16MB (old: 4MB) Power Input 5V @ 150mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 150mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 12.5 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002","title":"Technical details"},{"location":"tutorials/M5Stack/core/fire/description/","text":"DESCRIPTION M5Stack FIRE Kit is a upgrade from the Gray kits,except the 9-Axis IMU sensor. It provides more hardware resources : 16M Flash + 4M PSRAM , enhanced Base (M5GO Base and M5GO CHG Base), larger battery, etc. With a IMU posture sensor, you can include posture detection in your work : accelerated speed, angulation, and trajectory deection. You can make relative products like sports data collector, 3D remote gesture controller and more. FIRE is M5 Core device. Its modular, stackable, scalable, and portable device is powered with an ESP-32 core, which makes it open source, low cost, full-function, and easy for developers to handle new product development on all stages include circuit design, PCB design, software, mold design and production. M5Stack Fire comes with three separable parts. The top part ,just like Basic and Gray Kit, has all kinds of processors, chips ,scokets, 2.4G antenna etc, such as ESP32, power management IC , a LCD screen and some other interface components. The middle part is called M5GO base (link) provides a lithium battery, M-BUS(link) socket , LED bar and two more GROVE Port. (\u914d\u56fe\u8bf4\u660e). The bottom part is a charge table,can be connect to the M5GO base via POGO pins. Ever wanted to explore the fastest way of IoT prototyping, M5Stack development board is the perfect solution. Not like others, M5Stack development board is highly productlized, covered with industrial grade case, and ESP32-based development board. ESP32 is a hybid Wi-Fi Bluetooth chip contains a dual-core and 4MB of SPI Flash . Together with 30+ M5Stack stackable modules( M5Modules-link ) , 40+ extendable units( M5Units-link ), and different levels of program language, you can create and verify your IoT product in a very short time. Supported development platforms and program languages: Arduino, Blockly language with UIFlow(link), Micropython. Regardless of what level program skill you have, M5Stack would guide you in every step of the way to realize your idea as well as to the final productilization. If you ever played with ESP8266, you would realize that ESP32 is a perfect upgrade from ESP8266. In comparison, ESP32 is full-feathered with more GPIO, plenty of analog inputs and two analog outputs, multiple extra perpherials( like a spare UART ). Official development platform ESP-IDF have planted with FreeRTOS. With dual-core and real time OS you can get more organized code and much high speed processor. Features Product Features 5V DC power supply USB Type-C ESP32-based 16 MByte flash + 520K RAM + 4M PSRAM MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino ESP32 Features 240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support Kit includes 1x M5Stack Fire Controller 1x M5GO Base( LEGO compatible) 1x M5GO CHG Base 10x Femal-male Dupont Type-C USB cable User Manual","title":"Description"},{"location":"tutorials/M5Stack/core/fire/description/#description","text":"M5Stack FIRE Kit is a upgrade from the Gray kits,except the 9-Axis IMU sensor. It provides more hardware resources : 16M Flash + 4M PSRAM , enhanced Base (M5GO Base and M5GO CHG Base), larger battery, etc. With a IMU posture sensor, you can include posture detection in your work : accelerated speed, angulation, and trajectory deection. You can make relative products like sports data collector, 3D remote gesture controller and more. FIRE is M5 Core device. Its modular, stackable, scalable, and portable device is powered with an ESP-32 core, which makes it open source, low cost, full-function, and easy for developers to handle new product development on all stages include circuit design, PCB design, software, mold design and production. M5Stack Fire comes with three separable parts. The top part ,just like Basic and Gray Kit, has all kinds of processors, chips ,scokets, 2.4G antenna etc, such as ESP32, power management IC , a LCD screen and some other interface components. The middle part is called M5GO base (link) provides a lithium battery, M-BUS(link) socket , LED bar and two more GROVE Port. (\u914d\u56fe\u8bf4\u660e). The bottom part is a charge table,can be connect to the M5GO base via POGO pins. Ever wanted to explore the fastest way of IoT prototyping, M5Stack development board is the perfect solution. Not like others, M5Stack development board is highly productlized, covered with industrial grade case, and ESP32-based development board. ESP32 is a hybid Wi-Fi Bluetooth chip contains a dual-core and 4MB of SPI Flash . Together with 30+ M5Stack stackable modules( M5Modules-link ) , 40+ extendable units( M5Units-link ), and different levels of program language, you can create and verify your IoT product in a very short time. Supported development platforms and program languages: Arduino, Blockly language with UIFlow(link), Micropython. Regardless of what level program skill you have, M5Stack would guide you in every step of the way to realize your idea as well as to the final productilization. If you ever played with ESP8266, you would realize that ESP32 is a perfect upgrade from ESP8266. In comparison, ESP32 is full-feathered with more GPIO, plenty of analog inputs and two analog outputs, multiple extra perpherials( like a spare UART ). Official development platform ESP-IDF have planted with FreeRTOS. With dual-core and real time OS you can get more organized code and much high speed processor.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/core/fire/description/#features","text":"","title":"Features"},{"location":"tutorials/M5Stack/core/fire/description/#product-features","text":"5V DC power supply USB Type-C ESP32-based 16 MByte flash + 520K RAM + 4M PSRAM MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino","title":"Product Features"},{"location":"tutorials/M5Stack/core/fire/description/#esp32-features","text":"240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support","title":"ESP32 Features"},{"location":"tutorials/M5Stack/core/fire/description/#kit-includes","text":"1x M5Stack Fire Controller 1x M5GO Base( LEGO compatible) 1x M5GO CHG Base 10x Femal-male Dupont Type-C USB cable User Manual","title":"Kit includes"},{"location":"tutorials/M5Stack/core/fire/documents/","text":"DOCUMENTS datasheet - ESP32 - MPU9250 Register Manual - IP5306 schematic","title":"Documents"},{"location":"tutorials/M5Stack/core/fire/documents/#documents","text":"datasheet - ESP32 - MPU9250 Register Manual - IP5306 schematic","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/core/fire/learn/","text":"LEARN Get-started Tutorial https://docs.m5stack.com/#/zh_CN/quick_start/m5core/m5stack_core_quick_start","title":"Learn"},{"location":"tutorials/M5Stack/core/fire/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/core/fire/learn/#get-started-tutorial","text":"https://docs.m5stack.com/#/zh_CN/quick_start/m5core/m5stack_core_quick_start","title":"Get-started Tutorial"},{"location":"tutorials/M5Stack/core/fire/more-information/","text":"MORE INFORMATION Peripherals Pin Map LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND 9-Axis Posture Sensor MPU9250 I2C address 0x68 ESP32 Chip GPIO22 GPIO21 5V GND MPU9250 SCL SDA 5V GND M5GO Base Port GROVE Port B ESP32 Chip GPIO36 GPIO26 5V GND GROVE B GPIO36 GPIO26 5V GND GROVE Port C ESP32 Chip GPIO16 GPIO17 5V GND GROVE C RXD TXD 5V GND LED Bar Micphone Speaker ESP32 Chip GPIO15 GPIO34 GPIO25 LED Bar SIG Pin MIC MIC Pin Speaker Speaker Pin Technical details Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 16MB Power Input 5V @ 500mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 600mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 12.5 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002","title":"More information"},{"location":"tutorials/M5Stack/core/fire/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/core/fire/more-information/#peripherals-pin-map","text":"LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND 9-Axis Posture Sensor MPU9250 I2C address 0x68 ESP32 Chip GPIO22 GPIO21 5V GND MPU9250 SCL SDA 5V GND","title":"Peripherals Pin Map"},{"location":"tutorials/M5Stack/core/fire/more-information/#m5go-base-port","text":"GROVE Port B ESP32 Chip GPIO36 GPIO26 5V GND GROVE B GPIO36 GPIO26 5V GND GROVE Port C ESP32 Chip GPIO16 GPIO17 5V GND GROVE C RXD TXD 5V GND LED Bar Micphone Speaker ESP32 Chip GPIO15 GPIO34 GPIO25 LED Bar SIG Pin MIC MIC Pin Speaker Speaker Pin","title":"M5GO Base Port"},{"location":"tutorials/M5Stack/core/fire/more-information/#technical-details","text":"Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 16MB Power Input 5V @ 500mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 600mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 12.5 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002","title":"Technical details"},{"location":"tutorials/M5Stack/core/gray/description/","text":"DESCRIPTION M5Stack GRAY Kit is from one of the M5Stack development kit series, it\u2019s a upgrade from the Basic kits. In comparison, Gray kit provide a extra IMU sensor, MPU9250. With a IMU posture sensor, you can include posture detection in your work : accelerated speed, angulation, and trajectory detection. You can make relative products like sports data collector, 3D remote gesture controller and more. GRAY is M5 Core device. Its modular, stackable, scalable, and portable device is powered with an ESP-32 core, which makes it open source, low cost, full-function, and easy for developers to handle new product development on all stages include circuit design, PCB design, software, mold design and production. Ever wanted to explore the fastest way of IoT prototyping, M5Stack development board is the perfect solution. Not like others, M5Stack development board is highly productlized, covered with industrial grade case, and ESP32-based development board. ESP32 is a hybid Wi-Fi Bluetooth chip contains a dual-core and 4MB of SPI Flash . Together with 30+ M5Stack stackable modules( M5Modules-link ) , 40+ extendable units( M5Units-link ), and different levels of program language, you can create and verify your IoT product in a very short time. Supported development platforms and program languages: Arduino, Blockly language with UIFlow(link), Micropython. Regardless of what level program skill you have, M5Stack would guide you in every step of the way to realize your idea as well as to the final productilization. If you ever played with ESP8266, you would realize that ESP32 is a perfect upgrade from ESP8266. In comparison, ESP32 is full-feathered with more GPIO, plenty of analog inputs and two analog outputs, multiple extra perpherials( like a spare UART ). Official development platform ESP-IDF have planted with FreeRTOS. With dual-core and real time OS you can get more organized code and much high speed processor. Features Product Features 5V DC power supply USB Type-C ESP32-based 16 MByte flash + 520K RAM MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino ESP32 Features 240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support Kit includes: 1x M5Stack Gray Controller 1x Basic Base 10x Femal-male Dupont Type-C USB cable User Manual","title":"Description"},{"location":"tutorials/M5Stack/core/gray/description/#description","text":"M5Stack GRAY Kit is from one of the M5Stack development kit series, it\u2019s a upgrade from the Basic kits. In comparison, Gray kit provide a extra IMU sensor, MPU9250. With a IMU posture sensor, you can include posture detection in your work : accelerated speed, angulation, and trajectory detection. You can make relative products like sports data collector, 3D remote gesture controller and more. GRAY is M5 Core device. Its modular, stackable, scalable, and portable device is powered with an ESP-32 core, which makes it open source, low cost, full-function, and easy for developers to handle new product development on all stages include circuit design, PCB design, software, mold design and production. Ever wanted to explore the fastest way of IoT prototyping, M5Stack development board is the perfect solution. Not like others, M5Stack development board is highly productlized, covered with industrial grade case, and ESP32-based development board. ESP32 is a hybid Wi-Fi Bluetooth chip contains a dual-core and 4MB of SPI Flash . Together with 30+ M5Stack stackable modules( M5Modules-link ) , 40+ extendable units( M5Units-link ), and different levels of program language, you can create and verify your IoT product in a very short time. Supported development platforms and program languages: Arduino, Blockly language with UIFlow(link), Micropython. Regardless of what level program skill you have, M5Stack would guide you in every step of the way to realize your idea as well as to the final productilization. If you ever played with ESP8266, you would realize that ESP32 is a perfect upgrade from ESP8266. In comparison, ESP32 is full-feathered with more GPIO, plenty of analog inputs and two analog outputs, multiple extra perpherials( like a spare UART ). Official development platform ESP-IDF have planted with FreeRTOS. With dual-core and real time OS you can get more organized code and much high speed processor.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/core/gray/description/#features","text":"","title":"Features"},{"location":"tutorials/M5Stack/core/gray/description/#product-features","text":"5V DC power supply USB Type-C ESP32-based 16 MByte flash + 520K RAM MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino","title":"Product Features"},{"location":"tutorials/M5Stack/core/gray/description/#esp32-features","text":"240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support","title":"ESP32 Features"},{"location":"tutorials/M5Stack/core/gray/description/#kit-includes","text":"1x M5Stack Gray Controller 1x Basic Base 10x Femal-male Dupont Type-C USB cable User Manual","title":"Kit includes:"},{"location":"tutorials/M5Stack/core/gray/documents/","text":"DOCUMENTS datasheet - ESP32 - MPU9250 datasheet - IP5306 schematic","title":"Documents"},{"location":"tutorials/M5Stack/core/gray/documents/#documents","text":"datasheet - ESP32 - MPU9250 datasheet - IP5306 schematic","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/core/gray/learn/","text":"LEARN Get-started Tutorial https://docs.m5stack.com/#/zh_CN/quick_start/m5core/m5stack_core_quick_start","title":"Learn"},{"location":"tutorials/M5Stack/core/gray/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/core/gray/learn/#get-started-tutorial","text":"https://docs.m5stack.com/#/zh_CN/quick_start/m5core/m5stack_core_quick_start","title":"Get-started Tutorial"},{"location":"tutorials/M5Stack/core/gray/more-information/","text":"MORE INFORMATION Peripherals Pin Map LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND 9-Axis Posture Sensor MPU9250 I2C address 0x68 ESP32 Chip GPIO22 GPIO21 5V GND MPU9250 SCL SDA 5V GND Technical details Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 16MB (old: 4MB) Power Input 5V @ 150mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 150mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 12.5 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002","title":"More information"},{"location":"tutorials/M5Stack/core/gray/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/core/gray/more-information/#peripherals-pin-map","text":"LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND 9-Axis Posture Sensor MPU9250 I2C address 0x68 ESP32 Chip GPIO22 GPIO21 5V GND MPU9250 SCL SDA 5V GND","title":"Peripherals Pin Map"},{"location":"tutorials/M5Stack/core/gray/more-information/#technical-details","text":"Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 16MB (old: 4MB) Power Input 5V @ 150mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 150mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 12.5 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002","title":"Technical details"},{"location":"tutorials/M5Stack/core/m5go-kit/description/","text":"DESCRIPTION This M5GO IOT Kit is a multi-Unit feast with 6 M5units inside (ENV, IR, RGB, PIR, ANGLE, HUB). Just like other M5Stack development kit, M5GO is powered by ESP32. Every M5stack development kit can be programmed through Arduino IDE, WebIDE UIFlow, Micropython, and Blockly, simplifying the development process for those requiring a joint hardware and software solution. Not only does M5stack have far-reaching IoT applications in industry, agriculture, and home, but it also empowers students to learn to code in STEM classrooms. This M5GO kit is specifically designed for STEM education. The pack includes 1 M5GO conroller + 6 M5units + plenty of accessories. Having all those goods, together with the Blockly program platform, allows the school students to explore the engineering world , making their own IoT product and implement brilliant ideas into real life. Product Features 5V DC power supply USB Type-C ESP32-based 16 MByte flash + 520K RAM MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino ESP32 Features 240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support Kit includes 1x white M5Core controller 1x M5GO Base( LEGO compatible) 6x Units(ENV, IR, RGB, PIR, ANGLE, HUB) 4x LEGO connectors and bricks 3x GROVE cable Type-C USB cable User Manual","title":"Description"},{"location":"tutorials/M5Stack/core/m5go-kit/description/#description","text":"This M5GO IOT Kit is a multi-Unit feast with 6 M5units inside (ENV, IR, RGB, PIR, ANGLE, HUB). Just like other M5Stack development kit, M5GO is powered by ESP32. Every M5stack development kit can be programmed through Arduino IDE, WebIDE UIFlow, Micropython, and Blockly, simplifying the development process for those requiring a joint hardware and software solution. Not only does M5stack have far-reaching IoT applications in industry, agriculture, and home, but it also empowers students to learn to code in STEM classrooms. This M5GO kit is specifically designed for STEM education. The pack includes 1 M5GO conroller + 6 M5units + plenty of accessories. Having all those goods, together with the Blockly program platform, allows the school students to explore the engineering world , making their own IoT product and implement brilliant ideas into real life.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/core/m5go-kit/description/#product-features","text":"5V DC power supply USB Type-C ESP32-based 16 MByte flash + 520K RAM MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino","title":"Product Features"},{"location":"tutorials/M5Stack/core/m5go-kit/description/#esp32-features","text":"240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support","title":"ESP32 Features"},{"location":"tutorials/M5Stack/core/m5go-kit/description/#kit-includes","text":"1x white M5Core controller 1x M5GO Base( LEGO compatible) 6x Units(ENV, IR, RGB, PIR, ANGLE, HUB) 4x LEGO connectors and bricks 3x GROVE cable Type-C USB cable User Manual","title":"Kit includes"},{"location":"tutorials/M5Stack/core/m5go-kit/documents/","text":"DOCUMENTS datasheet - ESP32 - MPU9250 Register Manual - IP5306 schematic","title":"Documents"},{"location":"tutorials/M5Stack/core/m5go-kit/documents/#documents","text":"datasheet - ESP32 - MPU9250 Register Manual - IP5306 schematic","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/core/m5go-kit/learn/","text":"LEARN Get-started Tutorial https://docs.m5stack.com/#/zh_CN/quick_start/m5core/m5stack_core_quick_start","title":"Learn"},{"location":"tutorials/M5Stack/core/m5go-kit/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/core/m5go-kit/learn/#get-started-tutorial","text":"https://docs.m5stack.com/#/zh_CN/quick_start/m5core/m5stack_core_quick_start","title":"Get-started Tutorial"},{"location":"tutorials/M5Stack/core/m5go-kit/more-information/","text":"MORE INFORMATION Peripherals Pin Map LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND 9-Axis Posture Sensor MPU9250 I2C address 0x68 ESP32 Chip GPIO22 GPIO21 5V GND MPU9250 SCL SDA 5V GND M5GO Base Port GROVE Port B ESP32 Chip GPIO36 GPIO26 5V GND GROVE B GPIO36 GPIO26 5V GND GROVE Port C ESP32 Chip GPIO16 GPIO17 5V GND GROVE C RXD TXD 5V GND LED Bar Micphone Speaker ESP32 Chip GPIO15 GPIO34 GPIO25 LED Bar SIG Pin MIC MIC Pin Speaker Speaker Pin Technical details Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 16MB (old: 4MB) Power Input 5V @ 500mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 600mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 12.5 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002","title":"More information"},{"location":"tutorials/M5Stack/core/m5go-kit/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/core/m5go-kit/more-information/#peripherals-pin-map","text":"LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND 9-Axis Posture Sensor MPU9250 I2C address 0x68 ESP32 Chip GPIO22 GPIO21 5V GND MPU9250 SCL SDA 5V GND","title":"Peripherals Pin Map"},{"location":"tutorials/M5Stack/core/m5go-kit/more-information/#m5go-base-port","text":"GROVE Port B ESP32 Chip GPIO36 GPIO26 5V GND GROVE B GPIO36 GPIO26 5V GND GROVE Port C ESP32 Chip GPIO16 GPIO17 5V GND GROVE C RXD TXD 5V GND LED Bar Micphone Speaker ESP32 Chip GPIO15 GPIO34 GPIO25 LED Bar SIG Pin MIC MIC Pin Speaker Speaker Pin","title":"M5GO Base Port"},{"location":"tutorials/M5Stack/core/m5go-kit/more-information/#technical-details","text":"Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 16MB (old: 4MB) Power Input 5V @ 500mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 600mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 12.5 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002","title":"Technical details"},{"location":"tutorials/M5Stack/core/m5go-lite/description/","text":"DESCRIPTION M5GO Lite is a light pack of M5GO kit, instead of having 6 M5units, M5Go-Lite provides 1 ENV + accessories and the same M5 controller as M5GO. M5Go-Lite is also designed for STEM education. M5GO controller itself is already a full-feathered, highly integrated, upgraded development board provides plenty of hardware resources, such as LCD screen, speaker, Led bar, 16M flash, microphone and more. Light but not least. All M5stack development board can be programmed through Arduino IDE, WebIDE UIFlow, Micropython, and Blockly, simplifying the development process for those requiring a joint hardware and software solution. Not only does M5stack have far-reaching IoT applications in industry, agriculture, and home, but it also empowers students to learn to code in STEM classrooms. Product Features 5V DC power supply USB Type-C ESP32-based 16 MByte flash + 520K RAM MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino ESP32 Features 240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support Part List 1x white M5GO Controller 1x M5GO Base 1x ENV Unit 1x GROVE Cable Type-C USB Cable User Manual","title":"Description"},{"location":"tutorials/M5Stack/core/m5go-lite/description/#description","text":"M5GO Lite is a light pack of M5GO kit, instead of having 6 M5units, M5Go-Lite provides 1 ENV + accessories and the same M5 controller as M5GO. M5Go-Lite is also designed for STEM education. M5GO controller itself is already a full-feathered, highly integrated, upgraded development board provides plenty of hardware resources, such as LCD screen, speaker, Led bar, 16M flash, microphone and more. Light but not least. All M5stack development board can be programmed through Arduino IDE, WebIDE UIFlow, Micropython, and Blockly, simplifying the development process for those requiring a joint hardware and software solution. Not only does M5stack have far-reaching IoT applications in industry, agriculture, and home, but it also empowers students to learn to code in STEM classrooms.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/core/m5go-lite/description/#product-features","text":"5V DC power supply USB Type-C ESP32-based 16 MByte flash + 520K RAM MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino","title":"Product Features"},{"location":"tutorials/M5Stack/core/m5go-lite/description/#esp32-features","text":"240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support","title":"ESP32 Features"},{"location":"tutorials/M5Stack/core/m5go-lite/description/#part-list","text":"1x white M5GO Controller 1x M5GO Base 1x ENV Unit 1x GROVE Cable Type-C USB Cable User Manual","title":"Part List"},{"location":"tutorials/M5Stack/core/m5go-lite/documents/","text":"DOCUMENTS Datasheet - ESP32 - MPU9250 Register Manual - IP5306 Schematics","title":"Documents"},{"location":"tutorials/M5Stack/core/m5go-lite/documents/#documents","text":"Datasheet - ESP32 - MPU9250 Register Manual - IP5306 Schematics","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/core/m5go-lite/learn/","text":"LEARN Quick Start https://docs.m5stack.com/#/zh_CN/quick_start/m5core/m5stack_core_quick_start Example 1. Arduino IDE M5GO + ENV to get weather data: For more infomation, Click here /* Install Adafruit BMP280 Library first. */ #include M5Stack.h #include DHT12.h #include Wire.h //The DHT12 uses I2C comunication. #include Adafruit_Sensor.h #include Adafruit_BMP280.h // new two objects DHT12 dht12; Adafruit_BMP280 bme; // initialization M5.begin(); Wire.begin(); bme.begin(); // read data float tmp = dht12.readTemperature(); float hum = dht12.readHumidity(); float pressure = bme.readPressure(); More examples are here 2. UIFlow For more details, click here","title":"Learn"},{"location":"tutorials/M5Stack/core/m5go-lite/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/core/m5go-lite/learn/#quick-start","text":"https://docs.m5stack.com/#/zh_CN/quick_start/m5core/m5stack_core_quick_start","title":"Quick Start"},{"location":"tutorials/M5Stack/core/m5go-lite/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/core/m5go-lite/learn/#1-arduino-ide","text":"M5GO + ENV to get weather data: For more infomation, Click here /* Install Adafruit BMP280 Library first. */ #include M5Stack.h #include DHT12.h #include Wire.h //The DHT12 uses I2C comunication. #include Adafruit_Sensor.h #include Adafruit_BMP280.h // new two objects DHT12 dht12; Adafruit_BMP280 bme; // initialization M5.begin(); Wire.begin(); bme.begin(); // read data float tmp = dht12.readTemperature(); float hum = dht12.readHumidity(); float pressure = bme.readPressure(); More examples are here","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/core/m5go-lite/learn/#2-uiflow","text":"For more details, click here","title":"2. UIFlow"},{"location":"tutorials/M5Stack/core/m5go-lite/more-information/","text":"MORE INFORMATION Peripherals Pin Map LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND 9-Axis Posture Sensor MPU9250 I2C address 0x68 ESP32 Chip GPIO22 GPIO21 5V GND MPU9250 SCL SDA 5V GND M5GO Base Port GROVE Port B ESP32 Chip GPIO36 GPIO26 5V GND GROVE B GPIO36 GPIO26 5V GND GROVE Port C ESP32 Chip GPIO16 GPIO17 5V GND GROVE C RXD TXD 5V GND LED Bar Micphone Speaker ESP32 Chip GPIO15 GPIO34 GPIO25 LED Bar SIG Pin MIC MIC Pin Speaker Speaker Pin Technical details Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 16MB (old: 4MB) Power Input 5V @ 150mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 600mAh @ 3.7V > Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 12.5 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002","title":"More information"},{"location":"tutorials/M5Stack/core/m5go-lite/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/core/m5go-lite/more-information/#peripherals-pin-map","text":"LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND 9-Axis Posture Sensor MPU9250 I2C address 0x68 ESP32 Chip GPIO22 GPIO21 5V GND MPU9250 SCL SDA 5V GND","title":"Peripherals Pin Map"},{"location":"tutorials/M5Stack/core/m5go-lite/more-information/#m5go-base-port","text":"GROVE Port B ESP32 Chip GPIO36 GPIO26 5V GND GROVE B GPIO36 GPIO26 5V GND GROVE Port C ESP32 Chip GPIO16 GPIO17 5V GND GROVE C RXD TXD 5V GND LED Bar Micphone Speaker ESP32 Chip GPIO15 GPIO34 GPIO25 LED Bar SIG Pin MIC MIC Pin Speaker Speaker Pin","title":"M5GO Base Port"},{"location":"tutorials/M5Stack/core/m5go-lite/more-information/#technical-details","text":"Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 16MB (old: 4MB) Power Input 5V @ 150mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 600mAh @ 3.7V > Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 12.5 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002","title":"Technical details"},{"location":"tutorials/M5Stack/core/m5stick/description/","text":"DESCRIPTION M5Stick is a mini M5Stack, powered by ESP32. It is a portable, easy-to-use, open source, IoT development board. What it can do? This tiny block is able to realize your idea, enlighten your creativity, and help with your IoT prototying in a very short time. It will takes away a lot of the pains form the development process. M5stickC is one of the core devices in M5Stack product series which is built in a continues growing hardware software ecosystem. It has a lot of compatible modules units, as well as the open source code engineering community that will help you maximum your benefit in every step of the developing process. Product Features 5V DC power supply USB Type-C ESP32-based 4 MByte Flash + 520K RAM 9-Axis IMU MPU9250(only gray type) Red LED Buzzer IR transmitter Microphone 1 Buttons, OLED(1.3 inch), 1 Reset 2.4G Antenna: Proant 440 80 mAh Lipo Battery Extendable Socket Grove Port Wearable Wall mounted Development Platform UIFlow , MicroPython , Arduino ESP32 Features 240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support Part List 1x M5Stick 1x USB Type-C cable Gray type: - Accessories: WATCH BELT , WALL/1515 and BRICK","title":"Description"},{"location":"tutorials/M5Stack/core/m5stick/description/#description","text":"M5Stick is a mini M5Stack, powered by ESP32. It is a portable, easy-to-use, open source, IoT development board. What it can do? This tiny block is able to realize your idea, enlighten your creativity, and help with your IoT prototying in a very short time. It will takes away a lot of the pains form the development process. M5stickC is one of the core devices in M5Stack product series which is built in a continues growing hardware software ecosystem. It has a lot of compatible modules units, as well as the open source code engineering community that will help you maximum your benefit in every step of the developing process.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/core/m5stick/description/#product-features","text":"5V DC power supply USB Type-C ESP32-based 4 MByte Flash + 520K RAM 9-Axis IMU MPU9250(only gray type) Red LED Buzzer IR transmitter Microphone 1 Buttons, OLED(1.3 inch), 1 Reset 2.4G Antenna: Proant 440 80 mAh Lipo Battery Extendable Socket Grove Port Wearable Wall mounted Development Platform UIFlow , MicroPython , Arduino","title":"Product Features"},{"location":"tutorials/M5Stack/core/m5stick/description/#esp32-features","text":"240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support","title":"ESP32 Features"},{"location":"tutorials/M5Stack/core/m5stick/description/#part-list","text":"1x M5Stick 1x USB Type-C cable Gray type: - Accessories: WATCH BELT , WALL/1515 and BRICK","title":"Part List"},{"location":"tutorials/M5Stack/core/m5stick/documents/","text":"DOCUMENTS Datasheet - ESP32 - MPU9250 Register Manual - IP5306 Schematics","title":"Documents"},{"location":"tutorials/M5Stack/core/m5stick/documents/#documents","text":"Datasheet - ESP32 - MPU9250 Register Manual - IP5306 Schematics","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/core/m5stick/learn/","text":"LEARN Quick Start https://docs.m5stack.com/#/zh_CN/quick_start/m5stick/m5stick_quick_start Below is the loaction of Button A and mounting holes Power Operation\uff1a Power on\uff1ashort press power button Power off\uff1adouble click power button Example Arduino M5Stick factory test software M5Stick watch UIFlow White Cube Game","title":"Learn"},{"location":"tutorials/M5Stack/core/m5stick/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/core/m5stick/learn/#quick-start","text":"https://docs.m5stack.com/#/zh_CN/quick_start/m5stick/m5stick_quick_start Below is the loaction of Button A and mounting holes Power Operation\uff1a Power on\uff1ashort press power button Power off\uff1adouble click power button","title":"Quick Start"},{"location":"tutorials/M5Stack/core/m5stick/learn/#example","text":"Arduino M5Stick factory test software M5Stick watch UIFlow White Cube Game","title":"Example"},{"location":"tutorials/M5Stack/core/m5stick/more-information/","text":"MORE INFORMATION Peripheral Pin Mapping Pin Map blue LED BUTTON BUZZER IR Transmitter ESP32 GPIO17 GPIO19 GPIO26 GPIO35 IR Transmitter Pin Blue LED Pin BUZZER Pin BUTTON Pin OLED Screen ESP32 GPIO14 GPIO27 GPIO33 OLED CS DC RST GROVE Port ESP32 GPIO13 GPIO25 5V GND GROVE Port SCL SDA 5V GND Gray type: ESP32 GPIO22 GPIO21 9-Axis posture sentsor: MPU9250 SCL SDA Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002","title":"More information"},{"location":"tutorials/M5Stack/core/m5stick/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/core/m5stick/more-information/#peripheral-pin-mapping","text":"","title":"Peripheral Pin Mapping"},{"location":"tutorials/M5Stack/core/m5stick/more-information/#pin-map","text":"blue LED BUTTON BUZZER IR Transmitter ESP32 GPIO17 GPIO19 GPIO26 GPIO35 IR Transmitter Pin Blue LED Pin BUZZER Pin BUTTON Pin OLED Screen ESP32 GPIO14 GPIO27 GPIO33 OLED CS DC RST GROVE Port ESP32 GPIO13 GPIO25 5V GND GROVE Port SCL SDA 5V GND Gray type: ESP32 GPIO22 GPIO21 9-Axis posture sentsor: MPU9250 SCL SDA Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002","title":"Pin Map"},{"location":"tutorials/M5Stack/core/m5stickc/description/","text":"DESCRIPTION M5Stick-C is a mini M5Stack, powered by ESP32. It is a portable, easy-to-use, open source, IoT development board. What it can do? This tiny block is able to realize your idea, enlighten your creativity, and help with your IoT prototying in a very short time. It will takes away a lot of the pains form the development process. M5stickC is one of the core devices in M5Stack product series which is built in a continues growing hardware software ecosystem. It has a lot of compatible modules units, as well as the open source code engineering community that will help you maximum your benefit in every step of the developing process. Notice: * Only Orange type is available for now Product Features 5V DC power supply USB Type-C ESP32-based 4 MByte Flash + 520K RAM 6-Axis IMU SH200Q Red LED IR transmitter Microphone 2 Buttons, LCD(0.96 inch), 1 Reset 2.4G Antenna: Proant 440 80 mAh Lipo Battery Extendable Socket Grove Port Wearable Wall mounted Development Platform UIFlow , MicroPython , Arduino ESP32 Features 240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support Part List 1x M5StickC 1x USB Type-C cable","title":"Description"},{"location":"tutorials/M5Stack/core/m5stickc/description/#description","text":"M5Stick-C is a mini M5Stack, powered by ESP32. It is a portable, easy-to-use, open source, IoT development board. What it can do? This tiny block is able to realize your idea, enlighten your creativity, and help with your IoT prototying in a very short time. It will takes away a lot of the pains form the development process. M5stickC is one of the core devices in M5Stack product series which is built in a continues growing hardware software ecosystem. It has a lot of compatible modules units, as well as the open source code engineering community that will help you maximum your benefit in every step of the developing process. Notice: * Only Orange type is available for now","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/core/m5stickc/description/#product-features","text":"5V DC power supply USB Type-C ESP32-based 4 MByte Flash + 520K RAM 6-Axis IMU SH200Q Red LED IR transmitter Microphone 2 Buttons, LCD(0.96 inch), 1 Reset 2.4G Antenna: Proant 440 80 mAh Lipo Battery Extendable Socket Grove Port Wearable Wall mounted Development Platform UIFlow , MicroPython , Arduino","title":"Product Features"},{"location":"tutorials/M5Stack/core/m5stickc/description/#esp32-features","text":"240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support","title":"ESP32 Features"},{"location":"tutorials/M5Stack/core/m5stickc/description/#part-list","text":"1x M5StickC 1x USB Type-C cable","title":"Part List"},{"location":"tutorials/M5Stack/core/m5stickc/documents/","text":"DOCUMENTS datasheet ESP32-PICO ST7735S BM8563 SH200Q AXP192 SPM1423","title":"Documents"},{"location":"tutorials/M5Stack/core/m5stickc/documents/#documents","text":"datasheet ESP32-PICO ST7735S BM8563 SH200Q AXP192 SPM1423","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/core/m5stickc/learn/","text":"LEARN Get-started tutorial https://docs.m5stack.com/#/zh_CN/quick_start/m5stickc/m5stickc_quick_start Power switch operation\uff1a Power on \uff1aLong press power button for 2 seconds Power on \uff1aShort press power button for 6 seconds Example Arduino M5StickC facory test code M5StickC Vending Machine","title":"Learn"},{"location":"tutorials/M5Stack/core/m5stickc/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/core/m5stickc/learn/#get-started-tutorial","text":"https://docs.m5stack.com/#/zh_CN/quick_start/m5stickc/m5stickc_quick_start Power switch operation\uff1a Power on \uff1aLong press power button for 2 seconds Power on \uff1aShort press power button for 6 seconds","title":"Get-started tutorial"},{"location":"tutorials/M5Stack/core/m5stickc/learn/#example","text":"Arduino M5StickC facory test code M5StickC Vending Machine","title":"Example"},{"location":"tutorials/M5Stack/core/m5stickc/more-information/","text":"MORE INFORMATION RED LED IR Transmitter BUTTON A BUTTON B ESP32 GPIO10 GPIO9 GPIO37 GPIO39 RED LED LED Pin IR Transmitter Transmitter Pin BUTTON A Button Pin BUTTON B Button Pin TFT LCD Driver IC\uff1aST7735S Resolution\uff1a80 * 160 ESP32 GPIO15 GPIO13 GPIO23 GPIO18 GPIO5 TFT LCD TFT_MOSI TFT_CLK TFT_DC TFT_RST TFT_CS GROVE PORT ESP32 GPIO33 GPIO32 5V GND GROVE port SCL SDA 5V GND MIC (SPM1423) ESP32 GPIO0 GPIO34 MICPHONE SCL SDA 6-Axis posture sensor (SH200Q) power management IC (AXP192) ESP32 GPIO22 GPIO21 6-Axis posture sensor SCL SDA power management IC SCL SDA M5StickC extendable IO at top","title":"More information"},{"location":"tutorials/M5Stack/core/m5stickc/more-information/#more-information","text":"RED LED IR Transmitter BUTTON A BUTTON B ESP32 GPIO10 GPIO9 GPIO37 GPIO39 RED LED LED Pin IR Transmitter Transmitter Pin BUTTON A Button Pin BUTTON B Button Pin TFT LCD Driver IC\uff1aST7735S Resolution\uff1a80 * 160 ESP32 GPIO15 GPIO13 GPIO23 GPIO18 GPIO5 TFT LCD TFT_MOSI TFT_CLK TFT_DC TFT_RST TFT_CS GROVE PORT ESP32 GPIO33 GPIO32 5V GND GROVE port SCL SDA 5V GND MIC (SPM1423) ESP32 GPIO0 GPIO34 MICPHONE SCL SDA 6-Axis posture sensor (SH200Q) power management IC (AXP192) ESP32 GPIO22 GPIO21 6-Axis posture sensor SCL SDA power management IC SCL SDA M5StickC extendable IO at top","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/docs/","text":"Product Documents Core Core ( Cores comparison IIC Address Table ) BASIC GRAY FIRE M5Core ( Quick Start ) BASIC GRAY FIRE M5Stick M5StickC ( Quick Start ) ( Quick Start ) M5Stick M5StickC M5GO Lite M5GO Kit FACES Kit Kit ( Quick Start ) M5GO Lite M5GO Kit FACES Kit Module Module ( IIC Address Table ) GPS LORA LoRaWAN SIM800L COMMU Communication Modules GPS LORA LoRaWAN SIM800L COMMU BATTERY PROTO PLUS USB BUS Expansion Modules BATTERY PROTO PLUS USB BUS STEPMOTOR SERVO LEGO+ Drive Modules STEPMOTOR SERVO LEGO+ ENCODER JOYSTICK FACES Series ENCODER JOYSTICK BASE Base ( IIC Address Table ) LAN NODE BTC PLC Core BOTTOM M5GO BOTTOM LAN NODE BTC PLC Core BOTTOM M5GO BOTTOM M5GO RFID M5GO CHARGER M5GO RFID M5GO CHARGER Unit Unit ( IIC Address Table ) ESP32CAM M5Camera M5CameraF Camera class ( Quick Start Cameras comparison ) ESP32CAM M5Camera M5CameraF ENV EARTH LIGHT ANGLE IR PIR ENV EARTH LIGHT ANGLE IR PIR NCIR THERMAL BUTTON Dual-BUTTON JOYSTICK CardKB NCIR THERMAL BUTTON Dual-BUTTON JOYSTICK CardKB COLOR TOF HEART RFID ADC DAC COLOR TOF HEART RFID ADC DAC MAKEY RGB RELAY HUB 3.96Port PROTO MAKEY RGB RELAY HUB 3.96Port PROTO EXT.IO RS485 GPS FINGER WEIGHT TRACE EXT.IO RS485 GPS FINGER WEIGHT TRACE NeoPixel CatEar HEX NeoFlash BUTTERFLY Visual class NeoPixel CatEar HEX NeoFlash BUTTERFLY Application Application ( IIC Address Table ) BALA LidarBOT PIANO FLIR BALA LidarBOT PIANO FLIR Accessory Accessory Grove-T Grove Cable USB Downloader Grove-T Grove Cable USB Downloader","title":"Product Documents"},{"location":"tutorials/M5Stack/docs/#product-documents","text":"","title":"Product Documents"},{"location":"tutorials/M5Stack/docs/#core","text":"Core ( Cores comparison IIC Address Table )","title":"Core"},{"location":"tutorials/M5Stack/docs/#basic","text":"","title":"BASIC"},{"location":"tutorials/M5Stack/docs/#gray","text":"","title":"GRAY"},{"location":"tutorials/M5Stack/docs/#fire","text":"M5Core ( Quick Start ) BASIC GRAY FIRE","title":"FIRE"},{"location":"tutorials/M5Stack/docs/#m5stick","text":"","title":"M5Stick"},{"location":"tutorials/M5Stack/docs/#m5stickc","text":"( Quick Start ) ( Quick Start ) M5Stick M5StickC","title":"M5StickC"},{"location":"tutorials/M5Stack/docs/#m5go-lite","text":"","title":"M5GO Lite"},{"location":"tutorials/M5Stack/docs/#m5go-kit","text":"","title":"M5GO Kit"},{"location":"tutorials/M5Stack/docs/#faces-kit","text":"Kit ( Quick Start ) M5GO Lite M5GO Kit FACES Kit","title":"FACES Kit"},{"location":"tutorials/M5Stack/docs/#module","text":"Module ( IIC Address Table )","title":"Module"},{"location":"tutorials/M5Stack/docs/#gps","text":"","title":"GPS"},{"location":"tutorials/M5Stack/docs/#lora","text":"","title":"LORA"},{"location":"tutorials/M5Stack/docs/#lorawan","text":"","title":"LoRaWAN"},{"location":"tutorials/M5Stack/docs/#sim800l","text":"","title":"SIM800L"},{"location":"tutorials/M5Stack/docs/#commu","text":"Communication Modules GPS LORA LoRaWAN SIM800L COMMU","title":"COMMU"},{"location":"tutorials/M5Stack/docs/#battery","text":"","title":"BATTERY"},{"location":"tutorials/M5Stack/docs/#proto","text":"","title":"PROTO"},{"location":"tutorials/M5Stack/docs/#plus","text":"","title":"PLUS"},{"location":"tutorials/M5Stack/docs/#usb","text":"","title":"USB"},{"location":"tutorials/M5Stack/docs/#bus","text":"Expansion Modules BATTERY PROTO PLUS USB BUS","title":"BUS"},{"location":"tutorials/M5Stack/docs/#stepmotor","text":"","title":"STEPMOTOR"},{"location":"tutorials/M5Stack/docs/#servo","text":"","title":"SERVO"},{"location":"tutorials/M5Stack/docs/#lego","text":"Drive Modules STEPMOTOR SERVO LEGO+","title":"LEGO+"},{"location":"tutorials/M5Stack/docs/#encoder","text":"","title":"ENCODER"},{"location":"tutorials/M5Stack/docs/#joystick","text":"FACES Series ENCODER JOYSTICK","title":"JOYSTICK"},{"location":"tutorials/M5Stack/docs/#base","text":"Base ( IIC Address Table )","title":"BASE"},{"location":"tutorials/M5Stack/docs/#lan","text":"","title":"LAN"},{"location":"tutorials/M5Stack/docs/#node","text":"","title":"NODE"},{"location":"tutorials/M5Stack/docs/#btc","text":"","title":"BTC"},{"location":"tutorials/M5Stack/docs/#plc","text":"","title":"PLC"},{"location":"tutorials/M5Stack/docs/#core-bottom","text":"","title":"Core BOTTOM"},{"location":"tutorials/M5Stack/docs/#m5go-bottom","text":"LAN NODE BTC PLC Core BOTTOM M5GO BOTTOM","title":"M5GO BOTTOM"},{"location":"tutorials/M5Stack/docs/#m5go-rfid","text":"","title":"M5GO RFID"},{"location":"tutorials/M5Stack/docs/#m5go-charger","text":"M5GO RFID M5GO CHARGER","title":"M5GO CHARGER"},{"location":"tutorials/M5Stack/docs/#unit","text":"Unit ( IIC Address Table )","title":"Unit"},{"location":"tutorials/M5Stack/docs/#esp32cam","text":"","title":"ESP32CAM"},{"location":"tutorials/M5Stack/docs/#m5camera","text":"","title":"M5Camera"},{"location":"tutorials/M5Stack/docs/#m5cameraf","text":"Camera class ( Quick Start Cameras comparison ) ESP32CAM M5Camera M5CameraF","title":"M5CameraF"},{"location":"tutorials/M5Stack/docs/#env","text":"","title":"ENV"},{"location":"tutorials/M5Stack/docs/#earth","text":"","title":"EARTH"},{"location":"tutorials/M5Stack/docs/#light","text":"","title":"LIGHT"},{"location":"tutorials/M5Stack/docs/#angle","text":"","title":"ANGLE"},{"location":"tutorials/M5Stack/docs/#ir","text":"","title":"IR"},{"location":"tutorials/M5Stack/docs/#pir","text":"ENV EARTH LIGHT ANGLE IR PIR","title":"PIR"},{"location":"tutorials/M5Stack/docs/#ncir","text":"","title":"NCIR"},{"location":"tutorials/M5Stack/docs/#thermal","text":"","title":"THERMAL"},{"location":"tutorials/M5Stack/docs/#button","text":"","title":"BUTTON"},{"location":"tutorials/M5Stack/docs/#dual-button","text":"","title":"Dual-BUTTON"},{"location":"tutorials/M5Stack/docs/#joystick_1","text":"","title":"JOYSTICK"},{"location":"tutorials/M5Stack/docs/#cardkb","text":"NCIR THERMAL BUTTON Dual-BUTTON JOYSTICK CardKB","title":"CardKB"},{"location":"tutorials/M5Stack/docs/#color","text":"","title":"COLOR"},{"location":"tutorials/M5Stack/docs/#tof","text":"","title":"TOF"},{"location":"tutorials/M5Stack/docs/#heart","text":"","title":"HEART"},{"location":"tutorials/M5Stack/docs/#rfid","text":"","title":"RFID"},{"location":"tutorials/M5Stack/docs/#adc","text":"","title":"ADC"},{"location":"tutorials/M5Stack/docs/#dac","text":"COLOR TOF HEART RFID ADC DAC","title":"DAC"},{"location":"tutorials/M5Stack/docs/#makey","text":"","title":"MAKEY"},{"location":"tutorials/M5Stack/docs/#rgb","text":"","title":"RGB"},{"location":"tutorials/M5Stack/docs/#relay","text":"","title":"RELAY"},{"location":"tutorials/M5Stack/docs/#hub","text":"","title":"HUB"},{"location":"tutorials/M5Stack/docs/#396port","text":"","title":"3.96Port"},{"location":"tutorials/M5Stack/docs/#proto_1","text":"MAKEY RGB RELAY HUB 3.96Port PROTO","title":"PROTO"},{"location":"tutorials/M5Stack/docs/#extio","text":"","title":"EXT.IO"},{"location":"tutorials/M5Stack/docs/#rs485","text":"","title":"RS485"},{"location":"tutorials/M5Stack/docs/#gps_1","text":"","title":"GPS"},{"location":"tutorials/M5Stack/docs/#finger","text":"","title":"FINGER"},{"location":"tutorials/M5Stack/docs/#weight","text":"","title":"WEIGHT"},{"location":"tutorials/M5Stack/docs/#trace","text":"EXT.IO RS485 GPS FINGER WEIGHT TRACE","title":"TRACE"},{"location":"tutorials/M5Stack/docs/#neopixel","text":"","title":"NeoPixel"},{"location":"tutorials/M5Stack/docs/#catear","text":"","title":"CatEar"},{"location":"tutorials/M5Stack/docs/#hex","text":"","title":"HEX"},{"location":"tutorials/M5Stack/docs/#neoflash","text":"","title":"NeoFlash"},{"location":"tutorials/M5Stack/docs/#butterfly","text":"Visual class NeoPixel CatEar HEX NeoFlash BUTTERFLY","title":"BUTTERFLY"},{"location":"tutorials/M5Stack/docs/#application","text":"Application ( IIC Address Table )","title":"Application"},{"location":"tutorials/M5Stack/docs/#bala","text":"","title":"BALA"},{"location":"tutorials/M5Stack/docs/#lidarbot","text":"","title":"LidarBOT"},{"location":"tutorials/M5Stack/docs/#piano","text":"","title":"PIANO"},{"location":"tutorials/M5Stack/docs/#flir","text":"BALA LidarBOT PIANO FLIR","title":"FLIR"},{"location":"tutorials/M5Stack/docs/#accessory","text":"Accessory","title":"Accessory"},{"location":"tutorials/M5Stack/docs/#grove-t","text":"","title":"Grove-T"},{"location":"tutorials/M5Stack/docs/#grove-cable","text":"","title":"Grove Cable"},{"location":"tutorials/M5Stack/docs/#usb-downloader","text":"Grove-T Grove Cable USB Downloader","title":"USB Downloader"},{"location":"tutorials/M5Stack/docs/navbar/","text":"Language :uk: English :cn: \u4e2d\u6587 :jp: \u65e5\u672c\u8a9e","title":"Navbar"},{"location":"tutorials/M5Stack/docs/sidebar/","text":"Product Documents Arduino API M5Stack Cases Related Documents FAQ Links Github @M5Stack @M5Stack","title":"Sidebar"},{"location":"tutorials/M5Stack/docs/en/api/","text":"Arduino API {docsify-ignore-all} M5Core System Speaker LCD Button IMU Sensor(MPU9250) TF Card Power I/O I2C Communication M5StickC System Power Management(AXP192) TFT Screen IMU(SH200Q)","title":"Arduino API {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/api/#arduino-api-docsify-ignore-all","text":"","title":"Arduino API {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/api/#m5core","text":"System Speaker LCD Button IMU Sensor(MPU9250) TF Card Power I/O I2C Communication","title":"M5Core"},{"location":"tutorials/M5Stack/docs/en/api/#m5stickc","text":"System Power Management(AXP192) TFT Screen IMU(SH200Q)","title":"M5StickC"},{"location":"tutorials/M5Stack/docs/en/case/","text":"M5Stack Cases {docsify-ignore-all} STEM Education Cases M5Stack Awesome M5Stack-SD-Updater - Customizable menu system for M5Stack - loads apps from the Micro SD card TFT_eSPI - TFT library for the ESP8266 and ESP32 that supports different driver chips M5Widgets - Widgets for the M5Stack M5StackSAM - Simple Applications Menu Arduino Library for M5Stack cfGUI - A simple GUI library for M5Stack (ESP32) GUIslice - A lightweight GUI framework suitable for embedded displays M5ez - The easy way to program on the M5Stack M5Stack MultiApp Advanced - A M5Stack firmware made on PlatformIO M5Stack ESP32 Oscilloscope - A fully functional oscilloscope based on ESP32 M5Stack M5Stack-Avatar - An M5Stack library for rendering avatar faces M5Stack_CrackScreen - Crack your M5Stack!! M5_Shuttle_Run - M5_Shuttle_Run nixietubeM5 - (Fake) Nixie Tube Display on a M5Stack M5Stack_BTCTicker - A small Bitcoin price ticker using an M5Stack (ESP32) and the Coindesk API M5Stack_ETHPrice - Dependence on example Wifi Setting to get ETH Price from Maicoin M5Stack-PacketMonitor - M5Stack ESP32 Packet Monitor M5-FFT - Graphic Equalizer on the M5Stack platform M5Stack_ESP32_radio - Playing mp3 stream out of internet using M5Stack prototype mp3-player-m5stack - MP3 player for M5Stack ArduinoWiFiPhotoBackup - M5STACK Arduino WiFi Photo Backup device M5StackHIDCtrlAltDel - You can send ctrl+alt+del to your PC from M5Stack M5Stack Markdown Web Server - Markdown icons loaded from an Micro SD card/TF card to run a web page M5Stack-Tetris - Tetris for M5Stack Ported to M5Stack by macsbug - https://macsbug.wordpress.com/ M5Stack_FlappyBird_game - M5Stack FlappyBird Playable M5Stack-SpaceShooter - Space Invaders knock-off for M5Stack M5Stack-Pacman-JoyPSP - Pacman on M5Stack/PSP Joypad, with sounds M5Stack-Thermal-Camera - M5Stack Thermal Camera with AMG8833 thermal sensor M5Stack-3DPrintFiles - Links to files for 3D printing custom case parts for the M5Stack truetype2gfx - Converting fonts from TrueType to Adafruit GFX m5stack-onscreen-keyboard - Full size qwerty keyboard for M5Stack gui for m5stack by micropython - gui for m5stack by micropython M5Stack-Tetris-using-RCWController - Play Tetris on an M5Stack using the RCWController iPhone app to control the action AcornsM5 - Squirrel based OS for the M5Stack, can run apps from SD card M5Stack_TreeView - Tree view menu library M5Stack_LovyanLauncher - M5Stack Launcher by lovyan03 M5Stack_OnScreenKeyboard - full keyboard on M5Stack M5Stack_WebRadio_Avator - WebRadio with Avatar M5Bala_Avatar - Avatar with M5Bala SD_Updater_TestData - testing data for SD Updater M5Stack_Sokoban - Sokoban (Backyard management) with M5Stack Moddable SDK - Javascript SDK TrainDia - Tell me what time leave next train from the neigbor station. M5Stack-MIDI-Module - 8bit NES Synthesizer M5Stack_MMD - 3D rendering by M5Stack M5Stack PC-8801 Emulator! - PC-8801 emulator StickWatch - M5Stick watch m5verifier - to verify for OPENDIME SpaceDefense-m5stack - Shooting game esp32_mmd - Real time rendering animation for MMD m5stack-rfm95 - LoRaWAN node base develop platform m5stack-ble - BLE sample for M5Stack M5StackBLE - BLE sample for M5Stack M5Tube - video player M5Stack-Cam-Viewer - Arduino M5Cam viewer for M5Stack M5Stack_lifegame - Life game m5squeak - m5squeak is a squeak implementation of m5stack microcontroller ESP32-AmigaBoingBall - The famous Amiga Boing Ball Demo on ESP32 ETERNAL_STRIKER - Shooting game for M5Stack Hardware USB Host Shield for M5Stack - USB Host Shield based on MAX3421E Servo Driver Shield for M5Stack - Servo Driver Shield based on PCA9685 Motor Driver Shield for M5Stack - Motor Driver Shield for M5Stack based on L293D MIDI Module for M5Stack - MIDI Module for M5Stack Universal board module for M5Stack - Universal board Module for M5Stack 3GIM adapter board for M5Stack - tabrain 3G communication board adapter for M5Stack M5StackSideBB - Universal board module for M5Stack EEG Sensor\uff08M5STACK-Analog\uff09-PULSE06-M5STACK-A - EEG sensor for M5Stack (Analog output model) EEG Sensor\uff08M5STACK-Serial\uff09-PULSE07-M5STACK-S - EEG sensor for M5Stack (Serial communication model) Use ILI9488 with M5Stack - External Display for M5Stack Production of PROTO MODULE of M5Stack - Proto module for M5Stack USB HOST Module for M5STACK - USB Host module for M5Stack Web site Espressif Espressif ESP32 Datasheet ESP32 tools arduino-esp32 esp-idf esp-idf guide esp-mdf esp-mdf guide esp-adf esp-adf guide esp-iot-solution esp-iot-solution guide knowledge Switch Science Magazine! M5Stack User Group Japan @facebook M5Stack User Group Japan @connpass mgo-tec electronic work Watako-Lab. macsbug Ambient Attic or Garret niconico m-hage niconico M5Stack tag 9 DoF sensor fusion robo8080 applications","title":"M5Stack Cases {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/case/#m5stack-cases-docsify-ignore-all","text":"","title":"M5Stack Cases {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/case/#stem-education-cases","text":"","title":"STEM Education Cases"},{"location":"tutorials/M5Stack/docs/en/case/#m5stack-awesome","text":"M5Stack-SD-Updater - Customizable menu system for M5Stack - loads apps from the Micro SD card TFT_eSPI - TFT library for the ESP8266 and ESP32 that supports different driver chips M5Widgets - Widgets for the M5Stack M5StackSAM - Simple Applications Menu Arduino Library for M5Stack cfGUI - A simple GUI library for M5Stack (ESP32) GUIslice - A lightweight GUI framework suitable for embedded displays M5ez - The easy way to program on the M5Stack M5Stack MultiApp Advanced - A M5Stack firmware made on PlatformIO M5Stack ESP32 Oscilloscope - A fully functional oscilloscope based on ESP32 M5Stack M5Stack-Avatar - An M5Stack library for rendering avatar faces M5Stack_CrackScreen - Crack your M5Stack!! M5_Shuttle_Run - M5_Shuttle_Run nixietubeM5 - (Fake) Nixie Tube Display on a M5Stack M5Stack_BTCTicker - A small Bitcoin price ticker using an M5Stack (ESP32) and the Coindesk API M5Stack_ETHPrice - Dependence on example Wifi Setting to get ETH Price from Maicoin M5Stack-PacketMonitor - M5Stack ESP32 Packet Monitor M5-FFT - Graphic Equalizer on the M5Stack platform M5Stack_ESP32_radio - Playing mp3 stream out of internet using M5Stack prototype mp3-player-m5stack - MP3 player for M5Stack ArduinoWiFiPhotoBackup - M5STACK Arduino WiFi Photo Backup device M5StackHIDCtrlAltDel - You can send ctrl+alt+del to your PC from M5Stack M5Stack Markdown Web Server - Markdown icons loaded from an Micro SD card/TF card to run a web page M5Stack-Tetris - Tetris for M5Stack Ported to M5Stack by macsbug - https://macsbug.wordpress.com/ M5Stack_FlappyBird_game - M5Stack FlappyBird Playable M5Stack-SpaceShooter - Space Invaders knock-off for M5Stack M5Stack-Pacman-JoyPSP - Pacman on M5Stack/PSP Joypad, with sounds M5Stack-Thermal-Camera - M5Stack Thermal Camera with AMG8833 thermal sensor M5Stack-3DPrintFiles - Links to files for 3D printing custom case parts for the M5Stack truetype2gfx - Converting fonts from TrueType to Adafruit GFX m5stack-onscreen-keyboard - Full size qwerty keyboard for M5Stack gui for m5stack by micropython - gui for m5stack by micropython M5Stack-Tetris-using-RCWController - Play Tetris on an M5Stack using the RCWController iPhone app to control the action AcornsM5 - Squirrel based OS for the M5Stack, can run apps from SD card M5Stack_TreeView - Tree view menu library M5Stack_LovyanLauncher - M5Stack Launcher by lovyan03 M5Stack_OnScreenKeyboard - full keyboard on M5Stack M5Stack_WebRadio_Avator - WebRadio with Avatar M5Bala_Avatar - Avatar with M5Bala SD_Updater_TestData - testing data for SD Updater M5Stack_Sokoban - Sokoban (Backyard management) with M5Stack Moddable SDK - Javascript SDK TrainDia - Tell me what time leave next train from the neigbor station. M5Stack-MIDI-Module - 8bit NES Synthesizer M5Stack_MMD - 3D rendering by M5Stack M5Stack PC-8801 Emulator! - PC-8801 emulator StickWatch - M5Stick watch m5verifier - to verify for OPENDIME SpaceDefense-m5stack - Shooting game esp32_mmd - Real time rendering animation for MMD m5stack-rfm95 - LoRaWAN node base develop platform m5stack-ble - BLE sample for M5Stack M5StackBLE - BLE sample for M5Stack M5Tube - video player M5Stack-Cam-Viewer - Arduino M5Cam viewer for M5Stack M5Stack_lifegame - Life game m5squeak - m5squeak is a squeak implementation of m5stack microcontroller ESP32-AmigaBoingBall - The famous Amiga Boing Ball Demo on ESP32 ETERNAL_STRIKER - Shooting game for M5Stack","title":"M5Stack Awesome"},{"location":"tutorials/M5Stack/docs/en/case/#hardware","text":"USB Host Shield for M5Stack - USB Host Shield based on MAX3421E Servo Driver Shield for M5Stack - Servo Driver Shield based on PCA9685 Motor Driver Shield for M5Stack - Motor Driver Shield for M5Stack based on L293D MIDI Module for M5Stack - MIDI Module for M5Stack Universal board module for M5Stack - Universal board Module for M5Stack 3GIM adapter board for M5Stack - tabrain 3G communication board adapter for M5Stack M5StackSideBB - Universal board module for M5Stack EEG Sensor\uff08M5STACK-Analog\uff09-PULSE06-M5STACK-A - EEG sensor for M5Stack (Analog output model) EEG Sensor\uff08M5STACK-Serial\uff09-PULSE07-M5STACK-S - EEG sensor for M5Stack (Serial communication model) Use ILI9488 with M5Stack - External Display for M5Stack Production of PROTO MODULE of M5Stack - Proto module for M5Stack USB HOST Module for M5STACK - USB Host module for M5Stack","title":"Hardware"},{"location":"tutorials/M5Stack/docs/en/case/#web-site","text":"","title":"Web site"},{"location":"tutorials/M5Stack/docs/en/case/#espressif","text":"Espressif ESP32 Datasheet ESP32 tools arduino-esp32 esp-idf esp-idf guide esp-mdf esp-mdf guide esp-adf esp-adf guide esp-iot-solution esp-iot-solution guide","title":"Espressif"},{"location":"tutorials/M5Stack/docs/en/case/#knowledge","text":"Switch Science Magazine! M5Stack User Group Japan @facebook M5Stack User Group Japan @connpass mgo-tec electronic work Watako-Lab. macsbug Ambient Attic or Garret niconico m-hage niconico M5Stack tag 9 DoF sensor fusion robo8080 applications","title":"knowledge"},{"location":"tutorials/M5Stack/docs/en/faq/","text":"FAQ {docsify-ignore-all} CORE UNIT CORE Question Q1: What's the difference between those Cores? The main difference between these Cores is the internal hardware configuration and kit matching. From the basic version to the upgraded version, the attitude sensor MPU9250 is added and the RAM and FLASH are increased. For details, please visit here \u3002 Q2: How to turn off the speaker function of M5Core\uff1f Add the following statement to functioin Setup( ){ } arduino dacWrite(M5STACKFIRE_SPEAKER_PIN, 0); Q3: Some modules cannot be downloaded after stacking with M5Core, such as USB module and M5Core stacking. Probably after the stack, the pins GPIO0 and M5Core on the M5-Bus bus are not very well connected . In this case, when downloading the program, GPIO0 should always remain low, but because the contact is not good, GPIO0 can not remain low all the time, so the download fails. Solution: Manually let GPIO0 connect to GND during the download process to ensure that it is pulled low enough\u3002 Q4: After the M5GO bottom is stacked with the M5Core, the M5Core cannot be turned on, but the base battery in this M5GO bottom is fully charged. It may be that after the stacking, the BATTERY of the lower left corner of the M5-Bus bus on the base is not well connected to the M5Core. This is caused by the deviation of the welding position during production. After the bus pin welding position is slightly biased , it is easy to see that the BATTERY pin is not in good contact with the M5Core. Solution: Re-soldering the M5-Bus bus header, the pin header must be strictly aligned with the pad position. Q5: Some computers are connected to the main control, but still can't use Arduino IDE, ESPFlashDownloadTool or M5Burner to burn the program. For example, the following figure using Arduino IDE. Solution: you need to connect the capacitor between RST pin and GND pin in your Core (Capacitance value is more than 0.1 uF) or connect GPIO 0 with GND when downloading your firmware so that GPIO 0 keeps low level for an enough time as the third following picture shows. Q6: What special GPIO pins do you need to pay attention to in ESP32? The ESP32 has 34 GPIO pins, of which GPIO 34-39 is only used as an input and cannot be used as an output. Others can be used as both an input and an output pin. Q7: Why does the Stick with MPU9250 burn the factory firmware and press button A, the result shows \"No\", which means \"No 9250\"? Restart this Stick and then it can display correctly. Because the code to read the MPU9250 is placed in the setup() function which only was executed once when booting. So reboot and let the Stick detect MPU9250 again. Q8: After getting the FACES Kit or downloading the factory program of the FACES Kit, the following error is displayed on the screen. What happened? This is normal, because there is no main.py file in the program, so this warning is available. UNIT Question Q1: What is the difference between the various cameras of M5Stack? The main difference between these cameras is that some pins (OV2640-SIOD, OV2640-VSYNC, GROVE interface), lens type, and whether or not there is PSRAM. For specific differences, please visit here . Q2: The camera transmits images to the mobile phone via WIFI, how far can it be transmitted? After testing, using M5Camera indoors can transmit about 20 meters.","title":"FAQ {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/faq/#faq-docsify-ignore-all","text":"CORE UNIT","title":"FAQ {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/faq/#core-question","text":"Q1: What's the difference between those Cores? The main difference between these Cores is the internal hardware configuration and kit matching. From the basic version to the upgraded version, the attitude sensor MPU9250 is added and the RAM and FLASH are increased. For details, please visit here \u3002 Q2: How to turn off the speaker function of M5Core\uff1f Add the following statement to functioin Setup( ){ } arduino dacWrite(M5STACKFIRE_SPEAKER_PIN, 0); Q3: Some modules cannot be downloaded after stacking with M5Core, such as USB module and M5Core stacking. Probably after the stack, the pins GPIO0 and M5Core on the M5-Bus bus are not very well connected . In this case, when downloading the program, GPIO0 should always remain low, but because the contact is not good, GPIO0 can not remain low all the time, so the download fails. Solution: Manually let GPIO0 connect to GND during the download process to ensure that it is pulled low enough\u3002 Q4: After the M5GO bottom is stacked with the M5Core, the M5Core cannot be turned on, but the base battery in this M5GO bottom is fully charged. It may be that after the stacking, the BATTERY of the lower left corner of the M5-Bus bus on the base is not well connected to the M5Core. This is caused by the deviation of the welding position during production. After the bus pin welding position is slightly biased , it is easy to see that the BATTERY pin is not in good contact with the M5Core. Solution: Re-soldering the M5-Bus bus header, the pin header must be strictly aligned with the pad position. Q5: Some computers are connected to the main control, but still can't use Arduino IDE, ESPFlashDownloadTool or M5Burner to burn the program. For example, the following figure using Arduino IDE. Solution: you need to connect the capacitor between RST pin and GND pin in your Core (Capacitance value is more than 0.1 uF) or connect GPIO 0 with GND when downloading your firmware so that GPIO 0 keeps low level for an enough time as the third following picture shows. Q6: What special GPIO pins do you need to pay attention to in ESP32? The ESP32 has 34 GPIO pins, of which GPIO 34-39 is only used as an input and cannot be used as an output. Others can be used as both an input and an output pin. Q7: Why does the Stick with MPU9250 burn the factory firmware and press button A, the result shows \"No\", which means \"No 9250\"? Restart this Stick and then it can display correctly. Because the code to read the MPU9250 is placed in the setup() function which only was executed once when booting. So reboot and let the Stick detect MPU9250 again. Q8: After getting the FACES Kit or downloading the factory program of the FACES Kit, the following error is displayed on the screen. What happened? This is normal, because there is no main.py file in the program, so this warning is available.","title":"CORE Question"},{"location":"tutorials/M5Stack/docs/en/faq/#unit-question","text":"Q1: What is the difference between the various cameras of M5Stack? The main difference between these cameras is that some pins (OV2640-SIOD, OV2640-VSYNC, GROVE interface), lens type, and whether or not there is PSRAM. For specific differences, please visit here . Q2: The camera transmits images to the mobile phone via WIFI, how far can it be transmitted? After testing, using M5Camera indoors can transmit about 20 meters.","title":"UNIT Question"},{"location":"tutorials/M5Stack/docs/en/qs/","text":"Quick Start {docsify-ignore-all} This document is intended to help you set up the software environment ( Arudino , UIFlow ) for development of M5Stack. Through a simple example, we would like to illustrate how to develop M5Stack boards. CORE BASIC / GRAY / FIRE / M5GO M5Stick M5StickC Quick Start Arduino-Mac / Arduino-Win / UIFlow Arduino-Mac / Arduino-Win / UIFlow Arduino-Win / UIFlow","title":"Quick Start {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/qs/#quick-start-docsify-ignore-all","text":"This document is intended to help you set up the software environment ( Arudino , UIFlow ) for development of M5Stack. Through a simple example, we would like to illustrate how to develop M5Stack boards. CORE BASIC / GRAY / FIRE / M5GO M5Stick M5StickC Quick Start Arduino-Mac / Arduino-Win / UIFlow Arduino-Mac / Arduino-Win / UIFlow Arduino-Win / UIFlow","title":"Quick Start {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/related_documents/","text":"Related Documents {docsify-ignore-all} Establish Serial Connection How to Install Git and Arduino Upgrade M5Stack Lib How to Burn Firmware How to Connect WiFi Using Core","title":"Related Documents {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/related_documents/#related-documents-docsify-ignore-all","text":"Establish Serial Connection How to Install Git and Arduino Upgrade M5Stack Lib How to Burn Firmware How to Connect WiFi Using Core","title":"Related Documents {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/accessory/frame/","text":"Accessory Frame {docsify-ignore-all} :memo: Description \ud83d\uded2 Purchase Description Frame , like its namesake, is a frame for M5Core. It gives you an extra structure supporting or containing M5Core. Include 1x FRAME 4x hexagon screw KA2x4 1x Allen wrench Related Link Purchase","title":"Accessory Frame {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/accessory/frame/#accessory-frame-docsify-ignore-all","text":":memo: Description \ud83d\uded2 Purchase","title":"Accessory Frame {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/accessory/frame/#description","text":"Frame , like its namesake, is a frame for M5Core. It gives you an extra structure supporting or containing M5Core.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/accessory/frame/#include","text":"1x FRAME 4x hexagon screw KA2x4 1x Allen wrench","title":"Include"},{"location":"tutorials/M5Stack/docs/en/accessory/frame/#related-link","text":"Purchase","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/accessory/cable/grove_cable/","text":"Accessory GROVE Cable {docsify-ignore-all} :memo: Description \ud83d\uded2 Purchase Description GROVE Cable would be a necessary tool used on M5Stack development, since all PORTs on M5Core are GROVE stadard. This Grove cable, compatible with the GROVE port on M5Core,simply have 4 lines, two for data, one for power,and one for Ground. We've offered alternative length: 10cm, 20cm, 50cm, 1m, 2m. Feature 5 specifications: 10cm, 20cm, 0.5m, 1m, 2m","title":"Accessory GROVE Cable {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/accessory/cable/grove_cable/#accessory-grove-cable-docsify-ignore-all","text":":memo: Description \ud83d\uded2 Purchase","title":"Accessory GROVE Cable {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/accessory/cable/grove_cable/#description","text":"GROVE Cable would be a necessary tool used on M5Stack development, since all PORTs on M5Core are GROVE stadard. This Grove cable, compatible with the GROVE port on M5Core,simply have 4 lines, two for data, one for power,and one for Ground. We've offered alternative length: 10cm, 20cm, 50cm, 1m, 2m.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/accessory/cable/grove_cable/#feature","text":"5 specifications: 10cm, 20cm, 0.5m, 1m, 2m","title":"Feature"},{"location":"tutorials/M5Stack/docs/en/accessory/cable/lego_cable/","text":"Accessory LEGO Cable {docsify-ignore-all} :memo: Description \ud83d\uded2 Purchase Description LEGO Cable is used for LEGO motor which is compatible with BALA and M5Module LEGO+. We have prepared different length to fit your needs on different appliactions. Feature 3 specifications: 10cm, 20cm, 30cm","title":"Accessory LEGO Cable {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/accessory/cable/lego_cable/#accessory-lego-cable-docsify-ignore-all","text":":memo: Description \ud83d\uded2 Purchase","title":"Accessory LEGO Cable {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/accessory/cable/lego_cable/#description","text":"LEGO Cable is used for LEGO motor which is compatible with BALA and M5Module LEGO+. We have prepared different length to fit your needs on different appliactions.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/accessory/cable/lego_cable/#feature","text":"3 specifications: 10cm, 20cm, 30cm","title":"Feature"},{"location":"tutorials/M5Stack/docs/en/accessory/converter/grove_t/","text":"Accessory Grove-T {docsify-ignore-all} :memo: Description \ud83d\uded2 Purchase Description Grove-T is a T-shaped hub. Is this remind you the HUB unit ? They are basically the same thing, just in different shape.This is also used for GROVE port expanding. Notice: Grove-T is just a hardware expander, if you are looking for hardware and software(standard protocol) expander like I2C, Single-bus, please check PaHUB or PbHUB . If you connectted two I2C slave devices onto HUB that share the same adress, you will have problem getting I2C data from both.","title":"Accessory Grove-T {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/accessory/converter/grove_t/#accessory-grove-t-docsify-ignore-all","text":":memo: Description \ud83d\uded2 Purchase","title":"Accessory Grove-T {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/accessory/converter/grove_t/#description","text":"Grove-T is a T-shaped hub. Is this remind you the HUB unit ? They are basically the same thing, just in different shape.This is also used for GROVE port expanding. Notice: Grove-T is just a hardware expander, if you are looking for hardware and software(standard protocol) expander like I2C, Single-bus, please check PaHUB or PbHUB . If you connectted two I2C slave devices onto HUB that share the same adress, you will have problem getting I2C data from both.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/api/axp192_m5stickc/","text":"AXP192 (Power management) The AXP192 is a highly integrated power system management chip. begin() Syntax: void begin(void); Description: Initialize the AXP192. Example: #include M5StickC.h void setup() { M5.begin(); //By default, M5.begin() will initialize AXP192 chip } void loop() {} ScreenBreath() Syntax: void ScreenBreath(uint8_t brightness); Description: Change the LDO3 output voltage of the AXP192 chip. parameter description brightness TFT backlight brightness (range: 7~15) Example: #include M5StickC.h uint8_t i = 7; void setup() { M5.begin(); //By default, M5.begin() will initialize AXP192 chip M5.Lcd.printf( Hello, M5Stack!! ); } void loop() { M5.Axp.ScreenBreath(i++); if (i 15) i = 7; delay(1000); } GetVbatData() Syntax: uint16_t GetVbatData(void); Description: Get the battery voltage value. Example: #include M5StickC.h double vbat = 0.0; void setup() { M5.begin(); //By default, M5.begin() will initialize AXP192 chip M5.Lcd.fillScreen(BLACK); } void loop() { vbat = M5.Axp.GetVbatData() * 1.1 / 1000; M5.Lcd.setCursor(0, 0, 1); M5.Lcd.printf( vbat:%.3fV\\r\\n , vbat); delay(500); } GetIchargeData() Syntax: uint16_t GetIchargeData(void); Description: Get the battery charging current. Example: #include M5StickC.h int charge; void setup() { M5.begin(); //By default, M5.begin() will initialize AXP192 chip M5.Lcd.fillScreen(BLACK); } void loop() { charge = M5.Axp.GetIchargeData() / 2; M5.Lcd.setCursor(0, 0, 1); M5.Lcd.printf( icharge:%dmA\\r\\n , charge); delay(500); }","title":"AXP192 (Power management)"},{"location":"tutorials/M5Stack/docs/en/api/axp192_m5stickc/#axp192-power-management","text":"The AXP192 is a highly integrated power system management chip.","title":"AXP192 (Power management)"},{"location":"tutorials/M5Stack/docs/en/api/axp192_m5stickc/#begin","text":"Syntax: void begin(void); Description: Initialize the AXP192. Example: #include M5StickC.h void setup() { M5.begin(); //By default, M5.begin() will initialize AXP192 chip } void loop() {}","title":"begin()"},{"location":"tutorials/M5Stack/docs/en/api/axp192_m5stickc/#screenbreath","text":"Syntax: void ScreenBreath(uint8_t brightness); Description: Change the LDO3 output voltage of the AXP192 chip. parameter description brightness TFT backlight brightness (range: 7~15) Example: #include M5StickC.h uint8_t i = 7; void setup() { M5.begin(); //By default, M5.begin() will initialize AXP192 chip M5.Lcd.printf( Hello, M5Stack!! ); } void loop() { M5.Axp.ScreenBreath(i++); if (i 15) i = 7; delay(1000); }","title":"ScreenBreath()"},{"location":"tutorials/M5Stack/docs/en/api/axp192_m5stickc/#getvbatdata","text":"Syntax: uint16_t GetVbatData(void); Description: Get the battery voltage value. Example: #include M5StickC.h double vbat = 0.0; void setup() { M5.begin(); //By default, M5.begin() will initialize AXP192 chip M5.Lcd.fillScreen(BLACK); } void loop() { vbat = M5.Axp.GetVbatData() * 1.1 / 1000; M5.Lcd.setCursor(0, 0, 1); M5.Lcd.printf( vbat:%.3fV\\r\\n , vbat); delay(500); }","title":"GetVbatData()"},{"location":"tutorials/M5Stack/docs/en/api/axp192_m5stickc/#getichargedata","text":"Syntax: uint16_t GetIchargeData(void); Description: Get the battery charging current. Example: #include M5StickC.h int charge; void setup() { M5.begin(); //By default, M5.begin() will initialize AXP192 chip M5.Lcd.fillScreen(BLACK); } void loop() { charge = M5.Axp.GetIchargeData() / 2; M5.Lcd.setCursor(0, 0, 1); M5.Lcd.printf( icharge:%dmA\\r\\n , charge); delay(500); }","title":"GetIchargeData()"},{"location":"tutorials/M5Stack/docs/en/api/button/","text":"Button read() Syntax: uint8_t read(); Description: This function returns reading the state of the button directly. 1: pressed, 0: released. Example: #include M5Stack.h void setup() { M5.begin(); } void loop() { M5.Lcd.setCursor(0, 0); M5.Lcd.print( Button A Status: ); M5.Lcd.println(M5.BtnA.read()); } isPressed() Syntax: uint8_t isPressed(); Description: This function returns the state of the button the last time Button.read() was called. 1: pressed, 0: released. Example: #include M5Stack.h void setup() { M5.begin(); } void loop() { M5.update(); // need to call update() M5.Lcd.setCursor(0, 0); if (M5.BtnA.isPressed()) { M5.Lcd.printf( A button is pressed. ); } else { M5.Lcd.printf( A button is released. ); } } wasPressed() Syntax: uint8_t wasPressed(); Description: This function returns 1 only once each time the button is pressed. 1: pressed, 0: released. Example: #include M5Stack.h void setup() { M5.begin(); } void loop() { M5.update(); M5.Lcd.clear(); M5.Lcd.setCursor(0, 0); if (M5.BtnA.wasPressed()) { M5.Lcd.printf( Button A was pressed. ); delay(1000); } } pressedFor() Syntax: uint8_t pressedFor(uint32_t ms); Description: This function returns 1 if button has been pressed for more than specified time. 1: pressed, 0: released. argument description type ms pressing time (ms) uint32_t Example: #include M5Stack.h void setup() { M5.begin(); } void loop() { M5.update(); M5.Lcd.clear(); M5.Lcd.setCursor(0, 0); if (M5.BtnA.pressedFor(2000)) { M5.Lcd.printf( Button A was pressed for more than 2 seconds. ); delay(1000); } }","title":"Button"},{"location":"tutorials/M5Stack/docs/en/api/button/#button","text":"","title":"Button"},{"location":"tutorials/M5Stack/docs/en/api/button/#read","text":"Syntax: uint8_t read(); Description: This function returns reading the state of the button directly. 1: pressed, 0: released. Example: #include M5Stack.h void setup() { M5.begin(); } void loop() { M5.Lcd.setCursor(0, 0); M5.Lcd.print( Button A Status: ); M5.Lcd.println(M5.BtnA.read()); }","title":"read()"},{"location":"tutorials/M5Stack/docs/en/api/button/#ispressed","text":"Syntax: uint8_t isPressed(); Description: This function returns the state of the button the last time Button.read() was called. 1: pressed, 0: released. Example: #include M5Stack.h void setup() { M5.begin(); } void loop() { M5.update(); // need to call update() M5.Lcd.setCursor(0, 0); if (M5.BtnA.isPressed()) { M5.Lcd.printf( A button is pressed. ); } else { M5.Lcd.printf( A button is released. ); } }","title":"isPressed()"},{"location":"tutorials/M5Stack/docs/en/api/button/#waspressed","text":"Syntax: uint8_t wasPressed(); Description: This function returns 1 only once each time the button is pressed. 1: pressed, 0: released. Example: #include M5Stack.h void setup() { M5.begin(); } void loop() { M5.update(); M5.Lcd.clear(); M5.Lcd.setCursor(0, 0); if (M5.BtnA.wasPressed()) { M5.Lcd.printf( Button A was pressed. ); delay(1000); } }","title":"wasPressed()"},{"location":"tutorials/M5Stack/docs/en/api/button/#pressedfor","text":"Syntax: uint8_t pressedFor(uint32_t ms); Description: This function returns 1 if button has been pressed for more than specified time. 1: pressed, 0: released. argument description type ms pressing time (ms) uint32_t Example: #include M5Stack.h void setup() { M5.begin(); } void loop() { M5.update(); M5.Lcd.clear(); M5.Lcd.setCursor(0, 0); if (M5.BtnA.pressedFor(2000)) { M5.Lcd.printf( Button A was pressed for more than 2 seconds. ); delay(1000); } }","title":"pressedFor()"},{"location":"tutorials/M5Stack/docs/en/api/commutil/","text":"I2C This is a class to control M5Stack's Grove-A port (I2C). I2C communication needs to be initialized in advance by M5.Begin(). writeCommand() Syntax: bool writeCommand(uint8_t address, uint8_t subAddress); Description: Write to the specified address. Used when there are no parameters. Function argument Function argument Type Description address uint8_t Slave Address subAddress uint8_t function address Function return value Value Description true Write success false Write failure writeByte() Syntax: bool writeByte(uint8_t address, uint8_t subAddress, uint8_t data); Description: Write to the specified address. Used when there is one parameter. Function argument Function argument Type Description address uint8_t Slave Address subAddress uint8_t function address data uint8_t parameter Function return value Value Description true Write success false Write failure writeBytes() Syntax: bool writeBytes(uint8_t address, uint8_t subAddress, uint8_t *data,uint8_t length); Description: Write to the specified address. Use when there are multiple parameters. Function argument Function argument Type Description address uint8_t Slave Address subAddress uint8_t function address data uint8_t * top of data memory length uint8_t length of data Function return value Value Description true Write success false Write failure readByte() Syntax: bool readByte(uint8_t address, uint8_t *result); Description: Read from the specified address. It is used when there is no data to send before reading and the response is 1 byte. Function argument Function argument Type Description address uint8_t Slave Address result uint8_t * stored memory Function return value Value Description true Read success false Read failure readByte() Syntax: bool readByte(uint8_t address, uint8_t subAddress,uint8_t *result); Description: Read from the specified address. It is used when the data to be sent before reading is only the functional address and the response is 1 byte. Function argument Function argument Type Description address uint8_t Slave Address subAddress uint8_t function address result uint8_t * stored memory Function return value Value Description true Read success false Read failure readBytes() Syntax: bool readBytes(uint8_t address, uint8_t count,uint8_t * dest); Description: Read from the specified address. Use when there is no data to send before reading and there are multiple responses. Function argument Function argument Type Description address uint8_t Slave Address count uint8_t Length of request bytes result uint8_t * stored memory Function return value Value Description true Read success false Read failure readBytes() Syntax: bool readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest); Description: Read from the specified address. It is used when the data to be sent before reading is only the functional address and there are multiple responses. Function argument argument Typer Description address uint8_t Slave Address subAddress uint8_t Addresress count uint8_t Length of request bytes result uint8_t * stored memory Function return value Value Description true Read success false Read failure scanID() Syntax: bool readBytes(bool *result); Description: Perform device presence check on I2C bus. Function argument Function argument Type Description result bool * stored memory(128bytes) Function return value Value Description true Read success false Read failure Example of use; bool result[0x80]; M5.I2C.scanID( result[0]);","title":"I2C"},{"location":"tutorials/M5Stack/docs/en/api/commutil/#i2c","text":"This is a class to control M5Stack's Grove-A port (I2C). I2C communication needs to be initialized in advance by M5.Begin().","title":"I2C"},{"location":"tutorials/M5Stack/docs/en/api/commutil/#writecommand","text":"Syntax: bool writeCommand(uint8_t address, uint8_t subAddress); Description: Write to the specified address. Used when there are no parameters. Function argument Function argument Type Description address uint8_t Slave Address subAddress uint8_t function address Function return value Value Description true Write success false Write failure","title":"writeCommand()"},{"location":"tutorials/M5Stack/docs/en/api/commutil/#writebyte","text":"Syntax: bool writeByte(uint8_t address, uint8_t subAddress, uint8_t data); Description: Write to the specified address. Used when there is one parameter. Function argument Function argument Type Description address uint8_t Slave Address subAddress uint8_t function address data uint8_t parameter Function return value Value Description true Write success false Write failure","title":"writeByte()"},{"location":"tutorials/M5Stack/docs/en/api/commutil/#writebytes","text":"Syntax: bool writeBytes(uint8_t address, uint8_t subAddress, uint8_t *data,uint8_t length); Description: Write to the specified address. Use when there are multiple parameters. Function argument Function argument Type Description address uint8_t Slave Address subAddress uint8_t function address data uint8_t * top of data memory length uint8_t length of data Function return value Value Description true Write success false Write failure","title":"writeBytes()"},{"location":"tutorials/M5Stack/docs/en/api/commutil/#readbyte","text":"Syntax: bool readByte(uint8_t address, uint8_t *result); Description: Read from the specified address. It is used when there is no data to send before reading and the response is 1 byte. Function argument Function argument Type Description address uint8_t Slave Address result uint8_t * stored memory Function return value Value Description true Read success false Read failure","title":"readByte()"},{"location":"tutorials/M5Stack/docs/en/api/commutil/#readbyte_1","text":"Syntax: bool readByte(uint8_t address, uint8_t subAddress,uint8_t *result); Description: Read from the specified address. It is used when the data to be sent before reading is only the functional address and the response is 1 byte. Function argument Function argument Type Description address uint8_t Slave Address subAddress uint8_t function address result uint8_t * stored memory Function return value Value Description true Read success false Read failure","title":"readByte()"},{"location":"tutorials/M5Stack/docs/en/api/commutil/#readbytes","text":"Syntax: bool readBytes(uint8_t address, uint8_t count,uint8_t * dest); Description: Read from the specified address. Use when there is no data to send before reading and there are multiple responses. Function argument Function argument Type Description address uint8_t Slave Address count uint8_t Length of request bytes result uint8_t * stored memory Function return value Value Description true Read success false Read failure","title":"readBytes()"},{"location":"tutorials/M5Stack/docs/en/api/commutil/#readbytes_1","text":"Syntax: bool readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest); Description: Read from the specified address. It is used when the data to be sent before reading is only the functional address and there are multiple responses. Function argument argument Typer Description address uint8_t Slave Address subAddress uint8_t Addresress count uint8_t Length of request bytes result uint8_t * stored memory Function return value Value Description true Read success false Read failure","title":"readBytes()"},{"location":"tutorials/M5Stack/docs/en/api/commutil/#scanid","text":"Syntax: bool readBytes(bool *result); Description: Perform device presence check on I2C bus. Function argument Function argument Type Description result bool * stored memory(128bytes) Function return value Value Description true Read success false Read failure Example of use; bool result[0x80]; M5.I2C.scanID( result[0]);","title":"scanID()"},{"location":"tutorials/M5Stack/docs/en/api/gpio/","text":"I/O (GPIO/ADC/DAC/PWM) Refer to Arduino API of Arduino For the sake of convenience, I will focus on things that are closely related to M5Stack M5STACK PIN allocation: pin No Name allocation 0 G0 downloader 1 T1 UART 2 G2 Side terminal (except M5FIRE),M5-BUS 3 R1 UART 4 G4 TF 5 G5 Side terminal (except M5FIRE),M5-BUS 6 G6 SDIO 7 G7 SDIO 8 G8 SDIO 9 G9 SDIO 10 G10 SDIO 11 G11 SDIO 12 G12 LCD 13 G13 LCD 14 G14 LCD 15 G15 LCD 16 R2 UART 17 T2 UART 18 G18 TF,Top terminal(SCK),M5-BUS 19 G19 TF,Top terminal(MISO),M5-BUS 21 G21 GROVE-A(SDA) 22 G22 GROVE-A(SCL) 23 G23 TF,Top terminal(MOSI) 25 G25 Speaker,Side terminal (except M5FIRE),M5-BUS 26 G26 Side terminal (except M5FIRE),M5-BUS 27 G27 LCD 32 G32 LCD BackLight 33 G33 LCD 34 G34 None 35 G35 Side terminal (except M5FIRE) 36 G36 Side terminal (except M5FIRE) 37 G37 Button C 38 G38 Button B 39 G39 Button A digitalRead() Syntax: int digitalRead(uint8_t pin); Description: Reads the state of the terminal. Function argument Function argument Type Description pin uint8 Pin No Function return value: Pin input state(0/1) Note 1)If the pin mode is not set to INPUT, the correct result will not be returned. 2)If there are other circuits in the control line, they will be affected. Example of use; uint32_t pin21_data; pin21_data = digitalRead(21); digitalWrite() Syntax: void digitalWrite(uint8_t pin, uint8_t val); Description: Writes the state of the terminal. Function argument Function argument Type Description pin uint8 pin No val uint8 \u51fa\u529b\u72b6\u614b(0/1) Function return value: None. Note 1)If the pin mode is not set to OUTPUT, the correct result will not be returned. 2)If there are other circuits in the control line, please note it as it may be physically damaged. Example of use; digitalWrite(2,1); pinMode() Syntax: void pinMode(uint8_t pin, uint8_t mode); Description: Set terminal input / output mode. Function argument Function argument Type Description pin uint8 pin No mode uint8 INPUT,OUTPUT,INPUT_PULLUP\u306e\u3044\u305a\u308c\u304b Function return value: None. Note If there are other circuits on the bus, please note that there is a possibility of physical damage. For example, when the speaker (G25) terminal is set to INPUT mode, the current flowing to the speaker causes the main unit to generate heat. Make sure that the operations are correct as there is a risk of damage. Example of use; pinMode(2,INPUT); analogRead() Syntax: uint16_t analogRead(uint8_t pin); Description: Reads the value of the analog terminal. Function argument Function argument Type Description pin uint8 pin No Function return value: Read result. The maximum value of the response is determined by analogSetWidth (). Note G35 and G36 can be used in M5Stack. Example of use; uint16_t ret; ret=analogRead(35); dacWrite() Syntax: void dacWrite(uint8_t pin, uint8_t value); Description: Output command to analog terminal. Function argument Function argument Type Description pin uint8 pin No value uint8 set output voltage Function return value: None.\u3002 Note G25 and G26 can be used in M5Stack. Example of use; dacWrite(25,0x40); ledcSetup() Syntax: double ledcSetup(uint8_t channel, double freq, uint8_t resolution_bits); Description: Set the duty output Function argument Function argument Type Description channel uint8 channel (0\uff5e15) freq double frequency (Hz) resolution_bits uint8_t Number of full scale bits for duty indication Function return value: Actual output frequency. Note Channel and GPIO port numbers are not identical. It is good to recognize that it is a number to memorize the setting. ledcAttachPin() Syntax: void ledcAttachPin(uint8_t pin, uint8_t chan); Description: Specify the port to output. Function argument Function argument Type Description pin uint8_t pin No) chan uint8_t Channel(0\uff5e15) Function return value: None. ledcWrite() Syntax: void ledcWrite(uint8_t chan, uint32_t duty); Description: Output with the specified duty value. Function argument Function argument Type Description chan uint8_t Channel(0\uff5e15) duty uint32_t Duty Function return value: None. Note The unit of duty depends on the bit scale set at initialization. When specifying with 8 bits, specifying 0xFF results in 100% output. ledcDetachPin() Syntax: void ledcDetachPin(uint8_t pin); Description: Release the assigned port and stop the output. Function argument Function argument Type Description pin uint8_t pin No) Function return value: None.","title":"I/O (GPIO/ADC/DAC/PWM)"},{"location":"tutorials/M5Stack/docs/en/api/gpio/#io-gpioadcdacpwm","text":"Refer to Arduino API of Arduino For the sake of convenience, I will focus on things that are closely related to M5Stack M5STACK PIN allocation: pin No Name allocation 0 G0 downloader 1 T1 UART 2 G2 Side terminal (except M5FIRE),M5-BUS 3 R1 UART 4 G4 TF 5 G5 Side terminal (except M5FIRE),M5-BUS 6 G6 SDIO 7 G7 SDIO 8 G8 SDIO 9 G9 SDIO 10 G10 SDIO 11 G11 SDIO 12 G12 LCD 13 G13 LCD 14 G14 LCD 15 G15 LCD 16 R2 UART 17 T2 UART 18 G18 TF,Top terminal(SCK),M5-BUS 19 G19 TF,Top terminal(MISO),M5-BUS 21 G21 GROVE-A(SDA) 22 G22 GROVE-A(SCL) 23 G23 TF,Top terminal(MOSI) 25 G25 Speaker,Side terminal (except M5FIRE),M5-BUS 26 G26 Side terminal (except M5FIRE),M5-BUS 27 G27 LCD 32 G32 LCD BackLight 33 G33 LCD 34 G34 None 35 G35 Side terminal (except M5FIRE) 36 G36 Side terminal (except M5FIRE) 37 G37 Button C 38 G38 Button B 39 G39 Button A","title":"I/O (GPIO/ADC/DAC/PWM)"},{"location":"tutorials/M5Stack/docs/en/api/gpio/#digitalread","text":"Syntax: int digitalRead(uint8_t pin); Description: Reads the state of the terminal. Function argument Function argument Type Description pin uint8 Pin No Function return value: Pin input state(0/1) Note 1)If the pin mode is not set to INPUT, the correct result will not be returned. 2)If there are other circuits in the control line, they will be affected. Example of use; uint32_t pin21_data; pin21_data = digitalRead(21);","title":"digitalRead()"},{"location":"tutorials/M5Stack/docs/en/api/gpio/#digitalwrite","text":"Syntax: void digitalWrite(uint8_t pin, uint8_t val); Description: Writes the state of the terminal. Function argument Function argument Type Description pin uint8 pin No val uint8 \u51fa\u529b\u72b6\u614b(0/1) Function return value: None. Note 1)If the pin mode is not set to OUTPUT, the correct result will not be returned. 2)If there are other circuits in the control line, please note it as it may be physically damaged. Example of use; digitalWrite(2,1);","title":"digitalWrite()"},{"location":"tutorials/M5Stack/docs/en/api/gpio/#pinmode","text":"Syntax: void pinMode(uint8_t pin, uint8_t mode); Description: Set terminal input / output mode. Function argument Function argument Type Description pin uint8 pin No mode uint8 INPUT,OUTPUT,INPUT_PULLUP\u306e\u3044\u305a\u308c\u304b Function return value: None. Note If there are other circuits on the bus, please note that there is a possibility of physical damage. For example, when the speaker (G25) terminal is set to INPUT mode, the current flowing to the speaker causes the main unit to generate heat. Make sure that the operations are correct as there is a risk of damage. Example of use; pinMode(2,INPUT);","title":"pinMode()"},{"location":"tutorials/M5Stack/docs/en/api/gpio/#analogread","text":"Syntax: uint16_t analogRead(uint8_t pin); Description: Reads the value of the analog terminal. Function argument Function argument Type Description pin uint8 pin No Function return value: Read result. The maximum value of the response is determined by analogSetWidth (). Note G35 and G36 can be used in M5Stack. Example of use; uint16_t ret; ret=analogRead(35);","title":"analogRead()"},{"location":"tutorials/M5Stack/docs/en/api/gpio/#dacwrite","text":"Syntax: void dacWrite(uint8_t pin, uint8_t value); Description: Output command to analog terminal. Function argument Function argument Type Description pin uint8 pin No value uint8 set output voltage Function return value: None.\u3002 Note G25 and G26 can be used in M5Stack. Example of use; dacWrite(25,0x40);","title":"dacWrite()"},{"location":"tutorials/M5Stack/docs/en/api/gpio/#ledcsetup","text":"Syntax: double ledcSetup(uint8_t channel, double freq, uint8_t resolution_bits); Description: Set the duty output Function argument Function argument Type Description channel uint8 channel (0\uff5e15) freq double frequency (Hz) resolution_bits uint8_t Number of full scale bits for duty indication Function return value: Actual output frequency. Note Channel and GPIO port numbers are not identical. It is good to recognize that it is a number to memorize the setting.","title":"ledcSetup()"},{"location":"tutorials/M5Stack/docs/en/api/gpio/#ledcattachpin","text":"Syntax: void ledcAttachPin(uint8_t pin, uint8_t chan); Description: Specify the port to output. Function argument Function argument Type Description pin uint8_t pin No) chan uint8_t Channel(0\uff5e15) Function return value: None.","title":"ledcAttachPin()"},{"location":"tutorials/M5Stack/docs/en/api/gpio/#ledcwrite","text":"Syntax: void ledcWrite(uint8_t chan, uint32_t duty); Description: Output with the specified duty value. Function argument Function argument Type Description chan uint8_t Channel(0\uff5e15) duty uint32_t Duty Function return value: None. Note The unit of duty depends on the bit scale set at initialization. When specifying with 8 bits, specifying 0xFF results in 100% output.","title":"ledcWrite()"},{"location":"tutorials/M5Stack/docs/en/api/gpio/#ledcdetachpin","text":"Syntax: void ledcDetachPin(uint8_t pin); Description: Release the assigned port and stop the output. Function argument Function argument Type Description pin uint8_t pin No) Function return value: None.","title":"ledcDetachPin()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/","text":"LCD The screen pixel is 320x240, with the top left corner of the screen as the origin (0,0) Color codes are predefined and can be used. Definition Value R G B TFT_BLACK 0x0000 0 0 0 TFT_NAVY 0x000F 0 0 128 TFT_DARKGREEN 0x03E0 0 128 0 TFT_MAROON 0x7800 128 0 0 TFT_PURPLE 0x780F 128 0 128 TFT_OLIVE 0x7BE0 128 128 0 TFT_LIGHTGREY 0xC618 192 192 192 TFT_DARKGREY 0x7BEF 128 128 128 TFT_BLUE 0x001F 0 0 255 TFT_GREENYELLOW 0xB7E0 180 255 0 TFT_GREEN 0x07E0 0 255 0 TFT_YELLOW 0xFFE0 255 255 0 TFT_ORANGE 0xFDA0 255 180 0 TFT_PINK 0xFC9F 255 255 16 TFT_CYAN 0x07FF 0 255 255 TFT_DARKCYAN 0x03EF 0 128 128 TFT_RED 0xF800 255 0 0 TFT_MAGENTA 0xF81F 255 0 255 TFT_WHITE 0xFFFF 255 255 255 begin() Description: Initialize it for use. Syntax: begin(); Function argument: None Function return value: None Note: 1)If you do not want to initialize the LCD with M5.begin( ), call this function before using the display. sleep() Description: Switch the display to energy saving mode Syntax: sleep(); Function argument: None Function return value: None Note: 1) Call wakeup () function to wake up. 2) Since the LCD backlight of M5Stack is controlled separately, please adjust it with the setBrightness () function if necessary. Example of use: #include M5Stack.h M5.Lcd.sleep(); M5.Lcd.setBrightness(0); wakeup() Description: Restore the display from energy saving mode Syntax: wakeup(); Function argument: None Function return value: None Note: 1) Since the LCD backlight of M5Stack is controlled separately, please adjust it with the setBrightness () function if necessary. Example of use: #include M5Stack.h M5.Lcd.wakeup(); M5.Lcd.setBrightness(200); setBrightness() Description: Adjust the display backlight. Syntax: setBrightness(uint8_t brightness); Function argument: argument type Description brightness uint8_t Brightness (0: Off - 255:Full) Function return value: None. Note: 1) The backlight is controlled by PWM (44.1 KHz). 2) Many backlights have a direct effect on battery consumption. Example of use: #include M5Stack.h M5.Lcd.setBrightness(200); progressBar() Description: Display a bar that shows the progress. Syntax: progressBar(int x, int y, int w, int h, uint8_t val); Function argument: argument type Description x int Coordinate X(left corner) y int Coordinate Y(left corner) w int width (px) h int height(px) val uint8_t progress(0-100%) Function return value: None Note: 1) The color is expressed in blue (0x09F1). 2) Please erase the background beforehand to draw only the additional amount. Example of use: #include M5Stack.h M5.Lcd.fillRect(0,0,240,20,0); M5.Lcd.progressBar(0,0,240,20, 20); qrcode() Description: Generate a QR code. Syntax: qrcode(const char *string, uint16_t x, uint16_t y, uint8_t width, uint8_t version); qrcode(const String string, uint16_t x, uint16_t y, uint8_t width, uint8_t version); Function argument: argument type Description val string / String String to embed in QR x uint16_t Coordinate X(left corner) y uint16_t Coordinate Y(left corner) width uint8_t width (px) version uint8_t QR code version Function return value: None Note: 1) Please indicate the appropriate QR code version according to the number of characters. Example of use: #include M5Stack.h M5.Lcd.qrcode( http://www.m5stack.com ,50,10,220,6); drawBitmap() Description: Draw a bitmap Syntax: drawBitmap(int16_t x0, int16_t y0, int16_t w, int16_t h, const uint16_t *data); drawBitmap(int16_t x0, int16_t y0, int16_t w, int16_t h, uint16_t *data); drawBitmap(int16_t x0, int16_t y0, int16_t w, int16_t h, const uint16_t *data, uint16_t transparent); drawBitmap(int16_t x0, int16_t y0, int16_t w, int16_t h, const uint8_t *data); drawBitmap(int16_t x0, int16_t y0, int16_t w, int16_t h, uint8_t *data); Function argument: argument type Description x0 uint16_t Coordinate X(left corner) y0 uint16_t Coordinate Y(left corner) w int16_t width (px) h int16_t height(px) data uint16_t / uint8_t image data transparent uint16_t Transparent color code Function return value: None Note: 1) The color code is expressed by a total of 16 bits: red 5 bits, green 6 bits and blue 5 bits from the top. Example of use: See sample sketch:M5Stack- Advanced- drawXBitmap drawBmpFile() Description: Read a bitmap from a file and draw it. Syntax: drawBmpFile(fs::FS fs, const char *path, uint16_t x, uint16_t y); Function argument: argument type Description fs fs::FS File stream path const char * file path x int16_t Coordinate X(left corner) y int16_t Coordinate Y(left corner) Function return value: None Note: 1) It may not be possible to expand depending on the size and the number of bits. Example of use: #include M5Stack.h M5.Lcd.drawBmpFile(SD, /p2.bmp ,0,0); drawJpg() Description: Read JPEG data from memory and draw it. Syntax: void drawJpg(const uint8_t *jpg_data, size_t jpg_len, uint16_t x = 0, uint16_t y = 0, uint16_t maxWidth = 0, uint16_t maxHeight = 0, uint16_t offX = 0, uint16_t offY = 0, jpeg_div_t scale = JPEG_DIV_NONE); Function argument: argument type Description jpg_data uint8_t * top of data jpg_len size_t data length x uint16_t Coordinate X (left corner) y uint16_t Coordinate Y (left corner) maxWidth uint16_t Maximum width (px) maxHeight uint16_t Maximum height (px) offX uint16_t offset X (px) offY uint16_t offset Y (px) scale jpeg_div_t scale scale (jpeg_div_t)\uff1a Definition Description JPEG_DIV_NONE no care. JPEG_DIV_2 1/2 JPEG_DIV_4 1/4 JPEG_DIV_8 1/8 JPEG_DIV_MAX MAX Function return value: None Note: 1) Depending on the size, the number of bits and the format (progressive etc.), it may not be possible to expand. drawJpgFile() Description: Read JPEG data from a file and draw it. Syntax: void drawJpgFile(fs::FS fs, const char *path, uint16_t x = 0, uint16_t y = 0, uint16_t maxWidth = 0, uint16_t maxHeight = 0, uint16_t offX = 0, uint16_t offY = 0, jpeg_div_t scale = JPEG_DIV_NONE); Function argument: argument type Description fs fs::FS file stream path const char * file path x uint16_t Coordinate X(left corner) y uint16_t Coordinate Y(left corner) maxWidth uint16_t Max Width (px) maxHeight uint16_t Max Height (px) offX uint16_t Offset X (px) offY uint16_t Offset Y (px) scale jpeg_div_t Scale Scale(jpeg_div_t)\uff1a Definition Description JPEG_DIV_NONE no care. JPEG_DIV_2 1/2 JPEG_DIV_4 1/4 JPEG_DIV_8 1/8 JPEG_DIV_MAX MAX Function return value: None Note: 1) Depending on the size and format (progressive etc.), it may not be possible to expand. fillScreen() Syntax: fillScreen(uint16_t color); Function: Fill the entire screen with the specified color. Param Description color the color to be filled Example: #include M5Stack.h M5.begin(); M5.Lcd.fillScreen(RED); setTextColor() Syntax: setTextColor(uint16_t color, uint16_t backgroundcolor); Function: Set the foreground color and background color of the displayed text. Param Description color the color of text backgroundcolor the background color of text If backgroundcolor is not given, current background color is used Example: #include M5Stack.h M5.begin(); M5.Lcd.setTextColor(RED); setCursor() Syntax: setCursor(uint16_t x0, uint16_t y0); Function: Move the cursor to (x0, y0). Example: #include M5Stack.h M5.begin(); M5.Lcd.setCursor(100,100); M5.Lcd.print( Hello ); drawPixel() Syntax: drawPixel(int16_t x, int16_t y, uint16_t color); Function: Draw a point at position (x, y). Param Description color color value If color is not given, current background color is used Example: #include M5Stack.h M5.begin(); M5.Lcd.drawPixel(22,22,RED); drawPixel() Description: Draws a pixel of a specified color at a specified position. Syntax: drawPixel(int16_t x, int16_t y, [uint16_t color]); Function argument: argument Description type x Coordinate X int16_t y Coordinate Y int16_t color Pixel color. (Optional) uint16_t Example of use: #include M5Stack.h M5.begin(); M5.Lcd.drawPixel(22, 22, RED); drawChar() Description: Draws a straight line of the specified color from the specified start point to the end point. Syntax: drawChar(int32_t x, int32_t y, uint16_t c, uint32_t color, uint32_t bg, uint8_t size); Function argument: argument type Description x int32_t Coordinate X (upper left) y int32_t Coordinate Y (upper left) c uint16_t Character code color uint32_t Drawing color bg uint32_t Background color size uint8_t Character size Example of use: #include M5Stack.h M5.begin(); M5.Lcd.drawChar(0,0,'A',TFT_GREEN,TFT_BLACK,3); drawFastVLine() Description: Draw a vertical line from X to Y. Syntax: drawFastVLine(int32_t x, int32_t y, int32_t h, uint32_t color); Function argument: Argument Type Description x int16_t x position of start point y int16_t y position of start point h int16_t line length color uint32_t Line color (optional) Example of use: #include M5Stack.h M5.Lcd.drawFastHLine(0, 0, 12, TFT_GREEN); drawFastVLine() Description: Draw a horizontal line from X to Y. Syntax: drawFastHLine(int32_t x, int32_t y, int32_t w, uint32_t color); Function argument: Argument Type Description x int16_t x position of start point y int16_t y position of start point h int16_t line length color uint32_t Line color (optional) Example of use: #include M5Stack.h M5.Lcd.drawFastHLine(0, 0, 12, TFT_GREEN); drawLine() Syntax: drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color); Function: Draw the line from point (x,y) to point (x1,y1). Param Description color color value If color is not given, current background color is used Example: #include M5Stack.h M5.begin(); M5.Lcd.drawLine(0,0,12,12,WHITE); drawTriangle() Syntax: drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color); Function: Draw the triangel between points (x,y), (x1,y1) and (x2,y2). Param Description color color value If color is not given, current background color is used Example: #include M5Stack.h M5.begin(); M5.Lcd.drawTriangle(22,22,69,98,51,22,RED); fillTriangle() Syntax: fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color); Function: Fill the triangel between points (x,y), (x1,y1) and (x2,y2). Param Description color color value If color is not given, current background color is used Example: #include M5Stack.h M5.begin(); M5.Lcd.fillTriangle(22,22,69,98,51,22,RED); drawRect() Syntax: drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color); Function: Draw the rectangle from the upper left point at (x,y) and width and height. Param Description x position of point y position of point w width of rectangle h height of rectangle color Line color.(Optional.) Example: #include M5Stack.h M5.begin(); M5.Lcd.drawRect(180, 12, 122, 10, BLUE); fillRect() Syntax: fillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color); Function: Fill the rectangle from the upper left point at (x,y) and width and height. Param Description x position of point y position of point w width of rectangle h height of rectangle color Line color.(Optional.) Example: #include M5Stack.h M5.begin(); M5.Lcd.fillRect(180, 12, 122, 10, BLUE); drawRoundRect() Syntax: drawRoundRect(int16_t x0, int16_t y0, int16_t w,int16_t h, int16_t radius, uint16_t color); Function: Draw the rectangle with rounded corners from the upper left point at (x,y) and width and height. Corner radius is given by radius argument. Param Description x position of point y position of point w width of circle h height of circle radius the radius of circle color color value If color is not given, current background color is used Example: #include M5Stack.h M5.begin(); M5.Lcd.fillRoundRect(180,70,122,10,4,BLUE); fillRoundRect() Description: Draw a filled square with the upper left point (x, y) and width and height. Syntax: fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, [uint16_t color]); Function argument: argument Description type x coordinate of the top left corner of the rectangle int16_t y coordinate of the top left corner of the rectangle int16_t w width of rectangle int16_t h height of rectangle int16_t r corner radius int16_t color Color of the square line. Optional. uint16_t Example of use: #include M5Stack.h M5.begin(); M5.Lcd.fillRoundRect(180, 70, 122, 10, 4, BLUE); drawEllipse() Description: Draw an ellipse with the top left point (x, y) and the width and height. Syntax: drawEllipse(int16_t x0, int16_t y0, int32_t rx, int32_t ry, uint16_t color); Function argument: argument Description type x0 Center X coordinate of the ellipse int16_t y0 Center Y coordinate of the ellipse int16_t rx Width of circle int16_t ry Height of circle int16_t color circle color uint16_t Example of use: #include M5Stack.h M5.Lcd.drawEllipse(100,100,20,30, TFT_GREEN); fillEllipse() Description: Draw a filled ellipse, specifying the top left point (x, y) and the width and height. Syntax: fillEllipse(int16_t x0, int16_t y0, int32_t rx, int32_t ry, uint16_t color); Function argument: argument Description type x0 Center X coordinate of the ellipse int16_t y0 Center Y coordinate of the ellipse int16_t rx Width of circle int16_t ry Height of circle int16_t color circle color uint16_t Example of use: #include M5Stack.h M5.Lcd.drawEllipse(100,100,20,30, TFT_GREEN); color565() Description: Change to the color code (rgb 565) used in the function. Syntax: color565(uint8_t red, uint8_t green, uint8_t blue); Function argument: Argument Description Type red red int8_t green green int8_t blue blue int8_t Function return value: None Example of use: #include M5Stack.h uint16_t colorvalue=0; colorvalue=color565(255,255,255); setRotation() Description: Rotate the screen. Syntax: setRotation(uint8_t r); Function argument: argument type Description r uint8_t Rotation angle r (unit:90 deg) Example of use: #include M5Stack.h M5.begin(); M5.Lcd.setRotation(1); Note: 1) The display control of M5Stack is rotated by 90 \u00b0, and setRotation (1) is executed in M5.Lcd.begin (). 2) 0 to 3 rotate, 4 to 7 reverse and rotate. invertDisplay() Description: Reverse the screen color in negative / positive. Syntax: invertDisplay(boolean i); Function argument: Argument Type Description i boolean true : inverted Example of use: #include M5Stack.h M5.begin(); M5.Lcd.invertDisplay(true); loadFont() Description: Load a font Syntax: loadFont(String fontName, fs::FS ffs); Function argument: argument type Description fontName String font filepath ffs fs::FS file stream Example of use: #include M5Stack.h M5.Lcd.loadFont( filename , SD); unloadFont() Description: Finish using a font Syntax: unloadFont(); Function argument: None Example of use: #include M5Stack.h M5.Lcd.unloadFont(); fontsLoaded() Description: Returns whether you are loading a font Syntax: fontsLoaded(); Function argument: None Function return value: \u5024 Description true loaded false Unread Example of use: #include M5Stack.h if(M5.Lcd.unloadFont()){ M5.Lcd.unloadFont(); } print() Syntax: print(); Function: Start printing text at the current position of the screen. The specified content is printed in the foreground color by default. Example: #include M5Stack.h M5.begin(); M5.Lcd.print( this is a print text function ); drawString() Description: Draw a character Syntax: drawString(const char *string, int32_t poX, int32_t poY, uint8_t font); drawString(const char *string, int32_t poX, int32_t poY); drawString(const String string, int32_t poX, int32_t poY, uint8_t font); drawString(const String string, int32_t poX, int32_t poY); Function argument: argument type Description poX int32_t Coordinate X (upper left) poY int32_t Coordinate Y (upper left) string const char * / String String font uint8_t 1: If use the loaded font Function return value: None printf() Description: Draw the specified string. Syntax: printf(\"Format specification\",arg1...); Note: The format specification can be specified according to the usual C language format. Example of use: #include M5Stack.h int a=1; M5.begin(); M5.Lcd.printf( A=%d ,a); Usage {docsify-ignore} #include M5Stack.h M5.begin(); M5.Lcd.fillScreen(BLACK) #set the default background color M5.Lcd.drawLine(0, 0, WHITE); M5.Lcd.drawTriangle(22, 22, 69, 98, 51, 22, RED); M5.Lcd.fillTriangle(122, 122, 169, 198, 151, 182, RED); M5.Lcd.drawRect(180, 12, 122, 10, BLUE); M5.Lcd.fillRect(180, 30, 122, 10, BLUE); M5.Lcd.drawRoundRect(180, 50, 122, 10, 4, BLUE); M5.Lcd.fillRoundRect(180, 70, 122, 10, 4, BLUE); M5.Lcd.print( this is a print text function );","title":"LCD"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#lcd","text":"The screen pixel is 320x240, with the top left corner of the screen as the origin (0,0) Color codes are predefined and can be used. Definition Value R G B TFT_BLACK 0x0000 0 0 0 TFT_NAVY 0x000F 0 0 128 TFT_DARKGREEN 0x03E0 0 128 0 TFT_MAROON 0x7800 128 0 0 TFT_PURPLE 0x780F 128 0 128 TFT_OLIVE 0x7BE0 128 128 0 TFT_LIGHTGREY 0xC618 192 192 192 TFT_DARKGREY 0x7BEF 128 128 128 TFT_BLUE 0x001F 0 0 255 TFT_GREENYELLOW 0xB7E0 180 255 0 TFT_GREEN 0x07E0 0 255 0 TFT_YELLOW 0xFFE0 255 255 0 TFT_ORANGE 0xFDA0 255 180 0 TFT_PINK 0xFC9F 255 255 16 TFT_CYAN 0x07FF 0 255 255 TFT_DARKCYAN 0x03EF 0 128 128 TFT_RED 0xF800 255 0 0 TFT_MAGENTA 0xF81F 255 0 255 TFT_WHITE 0xFFFF 255 255 255","title":"LCD"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#begin","text":"Description: Initialize it for use. Syntax: begin(); Function argument: None Function return value: None Note: 1)If you do not want to initialize the LCD with M5.begin( ), call this function before using the display.","title":"begin()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#sleep","text":"Description: Switch the display to energy saving mode Syntax: sleep(); Function argument: None Function return value: None Note: 1) Call wakeup () function to wake up. 2) Since the LCD backlight of M5Stack is controlled separately, please adjust it with the setBrightness () function if necessary. Example of use: #include M5Stack.h M5.Lcd.sleep(); M5.Lcd.setBrightness(0);","title":"sleep()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#wakeup","text":"Description: Restore the display from energy saving mode Syntax: wakeup(); Function argument: None Function return value: None Note: 1) Since the LCD backlight of M5Stack is controlled separately, please adjust it with the setBrightness () function if necessary. Example of use: #include M5Stack.h M5.Lcd.wakeup(); M5.Lcd.setBrightness(200);","title":"wakeup()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#setbrightness","text":"Description: Adjust the display backlight. Syntax: setBrightness(uint8_t brightness); Function argument: argument type Description brightness uint8_t Brightness (0: Off - 255:Full) Function return value: None. Note: 1) The backlight is controlled by PWM (44.1 KHz). 2) Many backlights have a direct effect on battery consumption. Example of use: #include M5Stack.h M5.Lcd.setBrightness(200);","title":"setBrightness()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#progressbar","text":"Description: Display a bar that shows the progress. Syntax: progressBar(int x, int y, int w, int h, uint8_t val); Function argument: argument type Description x int Coordinate X(left corner) y int Coordinate Y(left corner) w int width (px) h int height(px) val uint8_t progress(0-100%) Function return value: None Note: 1) The color is expressed in blue (0x09F1). 2) Please erase the background beforehand to draw only the additional amount. Example of use: #include M5Stack.h M5.Lcd.fillRect(0,0,240,20,0); M5.Lcd.progressBar(0,0,240,20, 20);","title":"progressBar()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#qrcode","text":"Description: Generate a QR code. Syntax: qrcode(const char *string, uint16_t x, uint16_t y, uint8_t width, uint8_t version); qrcode(const String string, uint16_t x, uint16_t y, uint8_t width, uint8_t version); Function argument: argument type Description val string / String String to embed in QR x uint16_t Coordinate X(left corner) y uint16_t Coordinate Y(left corner) width uint8_t width (px) version uint8_t QR code version Function return value: None Note: 1) Please indicate the appropriate QR code version according to the number of characters. Example of use: #include M5Stack.h M5.Lcd.qrcode( http://www.m5stack.com ,50,10,220,6);","title":"qrcode()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#drawbitmap","text":"Description: Draw a bitmap Syntax: drawBitmap(int16_t x0, int16_t y0, int16_t w, int16_t h, const uint16_t *data); drawBitmap(int16_t x0, int16_t y0, int16_t w, int16_t h, uint16_t *data); drawBitmap(int16_t x0, int16_t y0, int16_t w, int16_t h, const uint16_t *data, uint16_t transparent); drawBitmap(int16_t x0, int16_t y0, int16_t w, int16_t h, const uint8_t *data); drawBitmap(int16_t x0, int16_t y0, int16_t w, int16_t h, uint8_t *data); Function argument: argument type Description x0 uint16_t Coordinate X(left corner) y0 uint16_t Coordinate Y(left corner) w int16_t width (px) h int16_t height(px) data uint16_t / uint8_t image data transparent uint16_t Transparent color code Function return value: None Note: 1) The color code is expressed by a total of 16 bits: red 5 bits, green 6 bits and blue 5 bits from the top. Example of use: See sample sketch:M5Stack- Advanced- drawXBitmap","title":"drawBitmap()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#drawbmpfile","text":"Description: Read a bitmap from a file and draw it. Syntax: drawBmpFile(fs::FS fs, const char *path, uint16_t x, uint16_t y); Function argument: argument type Description fs fs::FS File stream path const char * file path x int16_t Coordinate X(left corner) y int16_t Coordinate Y(left corner) Function return value: None Note: 1) It may not be possible to expand depending on the size and the number of bits. Example of use: #include M5Stack.h M5.Lcd.drawBmpFile(SD, /p2.bmp ,0,0);","title":"drawBmpFile()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#drawjpg","text":"Description: Read JPEG data from memory and draw it. Syntax: void drawJpg(const uint8_t *jpg_data, size_t jpg_len, uint16_t x = 0, uint16_t y = 0, uint16_t maxWidth = 0, uint16_t maxHeight = 0, uint16_t offX = 0, uint16_t offY = 0, jpeg_div_t scale = JPEG_DIV_NONE); Function argument: argument type Description jpg_data uint8_t * top of data jpg_len size_t data length x uint16_t Coordinate X (left corner) y uint16_t Coordinate Y (left corner) maxWidth uint16_t Maximum width (px) maxHeight uint16_t Maximum height (px) offX uint16_t offset X (px) offY uint16_t offset Y (px) scale jpeg_div_t scale scale (jpeg_div_t)\uff1a Definition Description JPEG_DIV_NONE no care. JPEG_DIV_2 1/2 JPEG_DIV_4 1/4 JPEG_DIV_8 1/8 JPEG_DIV_MAX MAX Function return value: None Note: 1) Depending on the size, the number of bits and the format (progressive etc.), it may not be possible to expand.","title":"drawJpg()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#drawjpgfile","text":"Description: Read JPEG data from a file and draw it. Syntax: void drawJpgFile(fs::FS fs, const char *path, uint16_t x = 0, uint16_t y = 0, uint16_t maxWidth = 0, uint16_t maxHeight = 0, uint16_t offX = 0, uint16_t offY = 0, jpeg_div_t scale = JPEG_DIV_NONE); Function argument: argument type Description fs fs::FS file stream path const char * file path x uint16_t Coordinate X(left corner) y uint16_t Coordinate Y(left corner) maxWidth uint16_t Max Width (px) maxHeight uint16_t Max Height (px) offX uint16_t Offset X (px) offY uint16_t Offset Y (px) scale jpeg_div_t Scale Scale(jpeg_div_t)\uff1a Definition Description JPEG_DIV_NONE no care. JPEG_DIV_2 1/2 JPEG_DIV_4 1/4 JPEG_DIV_8 1/8 JPEG_DIV_MAX MAX Function return value: None Note: 1) Depending on the size and format (progressive etc.), it may not be possible to expand.","title":"drawJpgFile()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#fillscreen","text":"Syntax: fillScreen(uint16_t color); Function: Fill the entire screen with the specified color. Param Description color the color to be filled Example: #include M5Stack.h M5.begin(); M5.Lcd.fillScreen(RED);","title":"fillScreen()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#settextcolor","text":"Syntax: setTextColor(uint16_t color, uint16_t backgroundcolor); Function: Set the foreground color and background color of the displayed text. Param Description color the color of text backgroundcolor the background color of text If backgroundcolor is not given, current background color is used Example: #include M5Stack.h M5.begin(); M5.Lcd.setTextColor(RED);","title":"setTextColor()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#setcursor","text":"Syntax: setCursor(uint16_t x0, uint16_t y0); Function: Move the cursor to (x0, y0). Example: #include M5Stack.h M5.begin(); M5.Lcd.setCursor(100,100); M5.Lcd.print( Hello );","title":"setCursor()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#drawpixel","text":"Syntax: drawPixel(int16_t x, int16_t y, uint16_t color); Function: Draw a point at position (x, y). Param Description color color value If color is not given, current background color is used Example: #include M5Stack.h M5.begin(); M5.Lcd.drawPixel(22,22,RED);","title":"drawPixel()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#drawpixel_1","text":"Description: Draws a pixel of a specified color at a specified position. Syntax: drawPixel(int16_t x, int16_t y, [uint16_t color]); Function argument: argument Description type x Coordinate X int16_t y Coordinate Y int16_t color Pixel color. (Optional) uint16_t Example of use: #include M5Stack.h M5.begin(); M5.Lcd.drawPixel(22, 22, RED);","title":"drawPixel()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#drawchar","text":"Description: Draws a straight line of the specified color from the specified start point to the end point. Syntax: drawChar(int32_t x, int32_t y, uint16_t c, uint32_t color, uint32_t bg, uint8_t size); Function argument: argument type Description x int32_t Coordinate X (upper left) y int32_t Coordinate Y (upper left) c uint16_t Character code color uint32_t Drawing color bg uint32_t Background color size uint8_t Character size Example of use: #include M5Stack.h M5.begin(); M5.Lcd.drawChar(0,0,'A',TFT_GREEN,TFT_BLACK,3);","title":"drawChar()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#drawfastvline","text":"Description: Draw a vertical line from X to Y. Syntax: drawFastVLine(int32_t x, int32_t y, int32_t h, uint32_t color); Function argument: Argument Type Description x int16_t x position of start point y int16_t y position of start point h int16_t line length color uint32_t Line color (optional) Example of use: #include M5Stack.h M5.Lcd.drawFastHLine(0, 0, 12, TFT_GREEN);","title":"drawFastVLine()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#drawfastvline_1","text":"Description: Draw a horizontal line from X to Y. Syntax: drawFastHLine(int32_t x, int32_t y, int32_t w, uint32_t color); Function argument: Argument Type Description x int16_t x position of start point y int16_t y position of start point h int16_t line length color uint32_t Line color (optional) Example of use: #include M5Stack.h M5.Lcd.drawFastHLine(0, 0, 12, TFT_GREEN);","title":"drawFastVLine()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#drawline","text":"Syntax: drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color); Function: Draw the line from point (x,y) to point (x1,y1). Param Description color color value If color is not given, current background color is used Example: #include M5Stack.h M5.begin(); M5.Lcd.drawLine(0,0,12,12,WHITE);","title":"drawLine()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#drawtriangle","text":"Syntax: drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color); Function: Draw the triangel between points (x,y), (x1,y1) and (x2,y2). Param Description color color value If color is not given, current background color is used Example: #include M5Stack.h M5.begin(); M5.Lcd.drawTriangle(22,22,69,98,51,22,RED);","title":"drawTriangle()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#filltriangle","text":"Syntax: fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color); Function: Fill the triangel between points (x,y), (x1,y1) and (x2,y2). Param Description color color value If color is not given, current background color is used Example: #include M5Stack.h M5.begin(); M5.Lcd.fillTriangle(22,22,69,98,51,22,RED);","title":"fillTriangle()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#drawrect","text":"Syntax: drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color); Function: Draw the rectangle from the upper left point at (x,y) and width and height. Param Description x position of point y position of point w width of rectangle h height of rectangle color Line color.(Optional.) Example: #include M5Stack.h M5.begin(); M5.Lcd.drawRect(180, 12, 122, 10, BLUE);","title":"drawRect()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#fillrect","text":"Syntax: fillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color); Function: Fill the rectangle from the upper left point at (x,y) and width and height. Param Description x position of point y position of point w width of rectangle h height of rectangle color Line color.(Optional.) Example: #include M5Stack.h M5.begin(); M5.Lcd.fillRect(180, 12, 122, 10, BLUE);","title":"fillRect()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#drawroundrect","text":"Syntax: drawRoundRect(int16_t x0, int16_t y0, int16_t w,int16_t h, int16_t radius, uint16_t color); Function: Draw the rectangle with rounded corners from the upper left point at (x,y) and width and height. Corner radius is given by radius argument. Param Description x position of point y position of point w width of circle h height of circle radius the radius of circle color color value If color is not given, current background color is used Example: #include M5Stack.h M5.begin(); M5.Lcd.fillRoundRect(180,70,122,10,4,BLUE);","title":"drawRoundRect()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#fillroundrect","text":"Description: Draw a filled square with the upper left point (x, y) and width and height. Syntax: fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, [uint16_t color]); Function argument: argument Description type x coordinate of the top left corner of the rectangle int16_t y coordinate of the top left corner of the rectangle int16_t w width of rectangle int16_t h height of rectangle int16_t r corner radius int16_t color Color of the square line. Optional. uint16_t Example of use: #include M5Stack.h M5.begin(); M5.Lcd.fillRoundRect(180, 70, 122, 10, 4, BLUE);","title":"fillRoundRect()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#drawellipse","text":"Description: Draw an ellipse with the top left point (x, y) and the width and height. Syntax: drawEllipse(int16_t x0, int16_t y0, int32_t rx, int32_t ry, uint16_t color); Function argument: argument Description type x0 Center X coordinate of the ellipse int16_t y0 Center Y coordinate of the ellipse int16_t rx Width of circle int16_t ry Height of circle int16_t color circle color uint16_t Example of use: #include M5Stack.h M5.Lcd.drawEllipse(100,100,20,30, TFT_GREEN);","title":"drawEllipse()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#fillellipse","text":"Description: Draw a filled ellipse, specifying the top left point (x, y) and the width and height. Syntax: fillEllipse(int16_t x0, int16_t y0, int32_t rx, int32_t ry, uint16_t color); Function argument: argument Description type x0 Center X coordinate of the ellipse int16_t y0 Center Y coordinate of the ellipse int16_t rx Width of circle int16_t ry Height of circle int16_t color circle color uint16_t Example of use: #include M5Stack.h M5.Lcd.drawEllipse(100,100,20,30, TFT_GREEN);","title":"fillEllipse()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#color565","text":"Description: Change to the color code (rgb 565) used in the function. Syntax: color565(uint8_t red, uint8_t green, uint8_t blue); Function argument: Argument Description Type red red int8_t green green int8_t blue blue int8_t Function return value: None Example of use: #include M5Stack.h uint16_t colorvalue=0; colorvalue=color565(255,255,255);","title":"color565()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#setrotation","text":"Description: Rotate the screen. Syntax: setRotation(uint8_t r); Function argument: argument type Description r uint8_t Rotation angle r (unit:90 deg) Example of use: #include M5Stack.h M5.begin(); M5.Lcd.setRotation(1); Note: 1) The display control of M5Stack is rotated by 90 \u00b0, and setRotation (1) is executed in M5.Lcd.begin (). 2) 0 to 3 rotate, 4 to 7 reverse and rotate.","title":"setRotation()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#invertdisplay","text":"Description: Reverse the screen color in negative / positive. Syntax: invertDisplay(boolean i); Function argument: Argument Type Description i boolean true : inverted Example of use: #include M5Stack.h M5.begin(); M5.Lcd.invertDisplay(true);","title":"invertDisplay()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#loadfont","text":"Description: Load a font Syntax: loadFont(String fontName, fs::FS ffs); Function argument: argument type Description fontName String font filepath ffs fs::FS file stream Example of use: #include M5Stack.h M5.Lcd.loadFont( filename , SD);","title":"loadFont()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#unloadfont","text":"Description: Finish using a font Syntax: unloadFont(); Function argument: None Example of use: #include M5Stack.h M5.Lcd.unloadFont();","title":"unloadFont()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#fontsloaded","text":"Description: Returns whether you are loading a font Syntax: fontsLoaded(); Function argument: None Function return value: \u5024 Description true loaded false Unread Example of use: #include M5Stack.h if(M5.Lcd.unloadFont()){ M5.Lcd.unloadFont(); }","title":"fontsLoaded()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#print","text":"Syntax: print(); Function: Start printing text at the current position of the screen. The specified content is printed in the foreground color by default. Example: #include M5Stack.h M5.begin(); M5.Lcd.print( this is a print text function );","title":"print()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#drawstring","text":"Description: Draw a character Syntax: drawString(const char *string, int32_t poX, int32_t poY, uint8_t font); drawString(const char *string, int32_t poX, int32_t poY); drawString(const String string, int32_t poX, int32_t poY, uint8_t font); drawString(const String string, int32_t poX, int32_t poY); Function argument: argument type Description poX int32_t Coordinate X (upper left) poY int32_t Coordinate Y (upper left) string const char * / String String font uint8_t 1: If use the loaded font Function return value: None","title":"drawString()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#printf","text":"Description: Draw the specified string. Syntax: printf(\"Format specification\",arg1...); Note: The format specification can be specified according to the usual C language format. Example of use: #include M5Stack.h int a=1; M5.begin(); M5.Lcd.printf( A=%d ,a);","title":"printf()"},{"location":"tutorials/M5Stack/docs/en/api/lcd/#usage-docsify-ignore","text":"#include M5Stack.h M5.begin(); M5.Lcd.fillScreen(BLACK) #set the default background color M5.Lcd.drawLine(0, 0, WHITE); M5.Lcd.drawTriangle(22, 22, 69, 98, 51, 22, RED); M5.Lcd.fillTriangle(122, 122, 169, 198, 151, 182, RED); M5.Lcd.drawRect(180, 12, 122, 10, BLUE); M5.Lcd.fillRect(180, 30, 122, 10, BLUE); M5.Lcd.drawRoundRect(180, 50, 122, 10, 4, BLUE); M5.Lcd.fillRoundRect(180, 70, 122, 10, 4, BLUE); M5.Lcd.print( this is a print text function );","title":"Usage {docsify-ignore}"},{"location":"tutorials/M5Stack/docs/en/api/lcd_m5stickc/","text":"TFT Screen The M5StickC screen resolution is 80x160 , the top left corner of the screen as the origin (0,0) ScreenBreath() Syntax: void ScreenBreath(uint8_t brightness); Description: Adjust the brightness of the screen backlight. Parameter Description brightness TFT backlight brightness ( \u503c: 7 - 15 ) Example: #include M5StickC.h uint8_t i = 7; void setup() { M5.begin(); M5.Lcd.fillScreen(WHITE); } void loop() { M5.Axp.ScreenBreath(i++); if (i 15) i = 7; delay(500); } fillScreen() Syntax: fillScreen(uint16_t color); Description: Fills the entire screen with the specified color. Parameter Description color color value Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.fillScreen(BLUE); } void loop() {} setTextColor() Syntax: setTextColor(uint16_t color, [uint16_t backgroundcolor]); Description: Sets the foreground color and background color of the displayed text. Parameter Description color foreground color backgroundcolor background color If the function's backgroundcolor value is not given, the current background color is used. Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.setTextColor(RED, WHITE); M5.Lcd.println( Hello, M5Stack world!! ); } void loop() {} setCursor() Syntax: setCursor(int16_t x0, int16_t y0, uint8_t font); Description: Move the cursor position to (x0, y0). Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.setCursor(7, 20, 2); M5.Lcd.println( scan done ); M5.Lcd.setCursor(5, 60, 4); M5.Lcd.printf( 50 AP ); } void loop(){} drawPixel() Syntax: drawPixel(int16_t x, int16_t y, [uint16_t color]); Description: Draw a pixel at the position (x, y). Parameter Description color pixel color If the function's color value is not given, the current background color is used. Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.drawPixel(22, 22, RED); } void loop() {} drawLine() Syntax: drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, [uint16_t color]); Description: Draw a line from the point (x, y) to the point (x1, y1) in the specified color. Parameter Description color line color If the function's color value is not given, the current background color is used. Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.drawLine(0, 0, 12, 12, BLUE); } void loop() {} drawTriangle() Syntax: drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, [uint16_t color]); Description: Draw a triangle with the specified color, with vertices of (x, y), (x1, y1), and (x2, y2). Parameter Description color line color If the function's color value is not given, the current background color is used. Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.drawTriangle(22, 22, 69, 98, 51, 22, RED); } void loop() {} fillTriangle() Syntax: fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, [uint16_t color]); Description: Fill a triangle with the specified color, with vertices of (x, y), (x1, y1) and (x2, y2). Parameter Description color fill color If the function's color value is not given, the current background color is used. Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.fillTriangle(22, 22, 69, 98, 51, 22, RED); } void loop() {} drawRect() Syntax: drawRect(int16_t x, int16_t y, int16_t w, int16_t h, [uint16_t color]); Description: Draws a rectangle with a specified color, where the coordinates of the upper left corner of the rectangle are (x, y), and the width and height. Parameter Description w width (pixel) h height (pixel) color line color If the function's color value is not given, the current background color is used. Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.drawRect(50, 100, 30, 10, BLUE); } void loop() {} fillRect() Syntax: fillRect(int16_t x, int16_t y, int16_t w, int16_t h, [uint16_t color]); Description: Fill a rectangle with the specified color. The coordinates of the upper left corner are (x, y), and the width and height. Parameter Description w width (pixel) h height (pixel) color fill color If the function's color value is not given, the current background color is used. Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.fillRect(50, 100, 20, 10, BLUE); } void loop() {} drawRoundRect() Syntax: drawRoundRect(int16_t x0, int16_t y0, int16_t w, int16_t h, int16_t radius, uint16_t color); Description: Draw a rounded corner rectangle with the specified color, where the coordinates of the upper left corner of the rectangle are (x, y), the width, the height and the radius of the fillet. Parameter Description w width (pixel) h height (pixel) radius radius of corner fillet color fill color If the function's color value is not given, the current background color is used. Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.fillRoundRect(40, 70, 20, 10, 4, BLUE); } void loop() {} print() Syntax: print(); Description: Printing text (string) at the current cursor position of the screen. The default printed content color style is white on black. Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.print( print text ); } void loop() {} Usage {docsify-ignore} #include M5StickC.h void setup() { M5.begin(); M5.Lcd.fillScreen(WHITE); // set the default background color M5.Lcd.drawLine(0, 0, 100, 100, WHITE); M5.Lcd.drawTriangle(22, 22, 69, 98, 51, 22, RED); M5.Lcd.fillTriangle(22, 22, 69, 98, 51, 22, RED); M5.Lcd.drawRect(50, 100, 30, 10, BLUE); M5.Lcd.fillRect(50, 100, 30, 10, BLUE); M5.Lcd.drawRoundRect(40, 70, 20, 10, 4, BLUE); M5.Lcd.fillRoundRect(40, 70, 20, 10, 4, BLUE); M5.Lcd.print( print text ); } void loop() {}","title":"TFT Screen"},{"location":"tutorials/M5Stack/docs/en/api/lcd_m5stickc/#tft-screen","text":"The M5StickC screen resolution is 80x160 , the top left corner of the screen as the origin (0,0)","title":"TFT Screen"},{"location":"tutorials/M5Stack/docs/en/api/lcd_m5stickc/#screenbreath","text":"Syntax: void ScreenBreath(uint8_t brightness); Description: Adjust the brightness of the screen backlight. Parameter Description brightness TFT backlight brightness ( \u503c: 7 - 15 ) Example: #include M5StickC.h uint8_t i = 7; void setup() { M5.begin(); M5.Lcd.fillScreen(WHITE); } void loop() { M5.Axp.ScreenBreath(i++); if (i 15) i = 7; delay(500); }","title":"ScreenBreath()"},{"location":"tutorials/M5Stack/docs/en/api/lcd_m5stickc/#fillscreen","text":"Syntax: fillScreen(uint16_t color); Description: Fills the entire screen with the specified color. Parameter Description color color value Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.fillScreen(BLUE); } void loop() {}","title":"fillScreen()"},{"location":"tutorials/M5Stack/docs/en/api/lcd_m5stickc/#settextcolor","text":"Syntax: setTextColor(uint16_t color, [uint16_t backgroundcolor]); Description: Sets the foreground color and background color of the displayed text. Parameter Description color foreground color backgroundcolor background color If the function's backgroundcolor value is not given, the current background color is used. Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.setTextColor(RED, WHITE); M5.Lcd.println( Hello, M5Stack world!! ); } void loop() {}","title":"setTextColor()"},{"location":"tutorials/M5Stack/docs/en/api/lcd_m5stickc/#setcursor","text":"Syntax: setCursor(int16_t x0, int16_t y0, uint8_t font); Description: Move the cursor position to (x0, y0). Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.setCursor(7, 20, 2); M5.Lcd.println( scan done ); M5.Lcd.setCursor(5, 60, 4); M5.Lcd.printf( 50 AP ); } void loop(){}","title":"setCursor()"},{"location":"tutorials/M5Stack/docs/en/api/lcd_m5stickc/#drawpixel","text":"Syntax: drawPixel(int16_t x, int16_t y, [uint16_t color]); Description: Draw a pixel at the position (x, y). Parameter Description color pixel color If the function's color value is not given, the current background color is used. Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.drawPixel(22, 22, RED); } void loop() {}","title":"drawPixel()"},{"location":"tutorials/M5Stack/docs/en/api/lcd_m5stickc/#drawline","text":"Syntax: drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, [uint16_t color]); Description: Draw a line from the point (x, y) to the point (x1, y1) in the specified color. Parameter Description color line color If the function's color value is not given, the current background color is used. Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.drawLine(0, 0, 12, 12, BLUE); } void loop() {}","title":"drawLine()"},{"location":"tutorials/M5Stack/docs/en/api/lcd_m5stickc/#drawtriangle","text":"Syntax: drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, [uint16_t color]); Description: Draw a triangle with the specified color, with vertices of (x, y), (x1, y1), and (x2, y2). Parameter Description color line color If the function's color value is not given, the current background color is used. Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.drawTriangle(22, 22, 69, 98, 51, 22, RED); } void loop() {}","title":"drawTriangle()"},{"location":"tutorials/M5Stack/docs/en/api/lcd_m5stickc/#filltriangle","text":"Syntax: fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, [uint16_t color]); Description: Fill a triangle with the specified color, with vertices of (x, y), (x1, y1) and (x2, y2). Parameter Description color fill color If the function's color value is not given, the current background color is used. Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.fillTriangle(22, 22, 69, 98, 51, 22, RED); } void loop() {}","title":"fillTriangle()"},{"location":"tutorials/M5Stack/docs/en/api/lcd_m5stickc/#drawrect","text":"Syntax: drawRect(int16_t x, int16_t y, int16_t w, int16_t h, [uint16_t color]); Description: Draws a rectangle with a specified color, where the coordinates of the upper left corner of the rectangle are (x, y), and the width and height. Parameter Description w width (pixel) h height (pixel) color line color If the function's color value is not given, the current background color is used. Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.drawRect(50, 100, 30, 10, BLUE); } void loop() {}","title":"drawRect()"},{"location":"tutorials/M5Stack/docs/en/api/lcd_m5stickc/#fillrect","text":"Syntax: fillRect(int16_t x, int16_t y, int16_t w, int16_t h, [uint16_t color]); Description: Fill a rectangle with the specified color. The coordinates of the upper left corner are (x, y), and the width and height. Parameter Description w width (pixel) h height (pixel) color fill color If the function's color value is not given, the current background color is used. Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.fillRect(50, 100, 20, 10, BLUE); } void loop() {}","title":"fillRect()"},{"location":"tutorials/M5Stack/docs/en/api/lcd_m5stickc/#drawroundrect","text":"Syntax: drawRoundRect(int16_t x0, int16_t y0, int16_t w, int16_t h, int16_t radius, uint16_t color); Description: Draw a rounded corner rectangle with the specified color, where the coordinates of the upper left corner of the rectangle are (x, y), the width, the height and the radius of the fillet. Parameter Description w width (pixel) h height (pixel) radius radius of corner fillet color fill color If the function's color value is not given, the current background color is used. Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.fillRoundRect(40, 70, 20, 10, 4, BLUE); } void loop() {}","title":"drawRoundRect()"},{"location":"tutorials/M5Stack/docs/en/api/lcd_m5stickc/#print","text":"Syntax: print(); Description: Printing text (string) at the current cursor position of the screen. The default printed content color style is white on black. Example: #include M5StickC.h void setup() { M5.begin(); M5.Lcd.print( print text ); } void loop() {}","title":"print()"},{"location":"tutorials/M5Stack/docs/en/api/lcd_m5stickc/#usage-docsify-ignore","text":"#include M5StickC.h void setup() { M5.begin(); M5.Lcd.fillScreen(WHITE); // set the default background color M5.Lcd.drawLine(0, 0, 100, 100, WHITE); M5.Lcd.drawTriangle(22, 22, 69, 98, 51, 22, RED); M5.Lcd.fillTriangle(22, 22, 69, 98, 51, 22, RED); M5.Lcd.drawRect(50, 100, 30, 10, BLUE); M5.Lcd.fillRect(50, 100, 30, 10, BLUE); M5.Lcd.drawRoundRect(40, 70, 20, 10, 4, BLUE); M5.Lcd.fillRoundRect(40, 70, 20, 10, 4, BLUE); M5.Lcd.print( print text ); } void loop() {}","title":"Usage {docsify-ignore}"},{"location":"tutorials/M5Stack/docs/en/api/mpu9250/","text":"IMU Sensor MPU9250 IMU The MPU9250 is a multi-chip module that integrates two chips. One chip is the MPU6500, which consists of a 3-axis gyroscope and a 3-axis accelerometer. The other is the AK8963 is a 3-axis magnetometer. initMPU9250() Syntax: void initMPU9250(); Description: This function initialize MPU6500 chip. Example: #include M5Stack.h #include utility/MPU9250.h MPU9250 IMU; // new a MPU9250 object void setup() { M5.begin(); Wire.begin(); IMU.initMPU9250(); // this line must be after Wire.begin() } void loop() { } initAK8963() Syntax: void initAK8963(float * destination); Description: This function initialize AK8963 chip. Argument Description Type destination for AK8963 Calibration Value float * Example: #include M5Stack.h #include utility/MPU9250.h MPU9250 IMU; // new a MPU9250 object void setup() { M5.begin(); Wire.begin(); IMU.initAK8963(IMU.magCalibration); M5.Lcd.println( AK8963 initialized for active data mode.... ); if (Serial) { M5.Lcd.println( Calibration values: ); M5.Lcd.print( X-Axis sensitivity adjustment value ); M5.Lcd.println(IMU.magCalibration[0], 2); M5.Lcd.print( Y-Axis sensitivity adjustment value ); M5.Lcd.println(IMU.magCalibration[1], 2); M5.Lcd.print( Z-Axis sensitivity adjustment value ); M5.Lcd.println(IMU.magCalibration[2], 2); } } void loop() { } calibrateMPU9250() Syntax: void calibrateMPU9250(float * gyroBias, float * accelBias); Description: This function calcurate offset values of gyro and accelerometer. Argument Description Type gyroBias gyro offset float * accelBias accel offset float * Example: #include M5Stack.h #include utility/MPU9250.h MPU9250 IMU; // new a MPU9250 object void setup() { M5.begin(); Wire.begin(); IMU.initMPU9250(); IMU.calibrateMPU9250(IMU.gyroBias, IMU.accelBias); M5.Lcd.fillScreen(BLACK); M5.Lcd.setTextSize(1); M5.Lcd.setCursor(0, 0); M5.Lcd.print( MPU9250 bias ); M5.Lcd.setCursor(0, 16); M5.Lcd.print( x y z ); M5.Lcd.setCursor(0, 32); M5.Lcd.print((int)(1000 * IMU.accelBias[0])); M5.Lcd.setCursor(32, 32); M5.Lcd.print((int)(1000 * IMU.accelBias[1])); M5.Lcd.setCursor(64, 32); M5.Lcd.print((int)(1000 * IMU.accelBias[2])); M5.Lcd.setCursor(96, 32); M5.Lcd.print( mg ); M5.Lcd.setCursor(0, 48); M5.Lcd.print(IMU.gyroBias[0], 1); M5.Lcd.setCursor(32, 48); M5.Lcd.print(IMU.gyroBias[1], 1); M5.Lcd.setCursor(64, 48); M5.Lcd.print(IMU.gyroBias[2], 1); M5.Lcd.setCursor(96, 48); M5.Lcd.print( o/s ); } void loop() { } readByte() Syntax: uint8_t readByte(uint8_t address, uint8_t subAddress) ; Description: This function reads a byte data from specified register of MPU9250. Argument Description Type address (MPU9250/AK8963) I2C address uint8_t subAddress register address uint8_t Example: #include M5Stack.h #include utility/MPU9250.h MPU9250 IMU; // new a MPU9250 object void setup() { M5.begin(); Wire.begin(); uint8_t id = IMU.readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250); M5.Lcd.print( MPU9250 I AM 0x ); M5.Lcd.print(id, HEX); } void loop() { } readGyroData() Syntax: void readGyroData(int16_t * destination); Description: This function reads the value of 3-axis gyro sensor. Argument Description Type destination read gyro values int16_t * Example: #include M5Stack.h #include utility/MPU9250.h MPU9250 IMU; // new a MPU9250 object void setup() { M5.begin(); Wire.begin(); IMU.initMPU9250(); IMU.calibrateMPU9250(IMU.gyroBias, IMU.accelBias); } void loop() { // If intPin goes high, all data registers have new data // On interrupt, check if data ready interrupt if (IMU.readByte(MPU9250_ADDRESS, INT_STATUS) 0x01) { M5.Lcd.clear(); M5.Lcd.setCursor(0, 0); IMU.readGyroData(IMU.gyroCount); // Read the x/y/z adc values IMU.getGres(); // get Gyro scales saved to gRes IMU.gx = (float)IMU.gyroCount[0] * IMU.gRes; IMU.gy = (float)IMU.gyroCount[1] * IMU.gRes; IMU.gz = (float)IMU.gyroCount[2] * IMU.gRes; M5.Lcd.print( X-gyro rate: ); M5.Lcd.print(IMU.gx, 3); M5.Lcd.println( degrees/sec ); M5.Lcd.print( Y-gyro rate: ); M5.Lcd.print(IMU.gy, 3); M5.Lcd.println( degrees/sec ); M5.Lcd.print( Z-gyro rate: ); M5.Lcd.print(IMU.gz, 3); M5.Lcd.println( degrees/sec ); } delay(500); } readAccelData() Syntax: void readAccelData(int16_t * destination); Description: This function reads the value of 3-axis accelerate sensor. Argument Description Type destination read accelerate values int16_t * Example: #include M5Stack.h #include utility/MPU9250.h MPU9250 IMU; // new a MPU9250 object void setup() { M5.begin(); Wire.begin(); IMU.initMPU9250(); IMU.calibrateMPU9250(IMU.gyroBias, IMU.accelBias); } void loop() { // If intPin goes high, all data registers have new data // On interrupt, check if data ready interrupt if (IMU.readByte(MPU9250_ADDRESS, INT_STATUS) 0x01) { M5.Lcd.clear(); M5.Lcd.setCursor(0, 0); IMU.readAccelData(IMU.accelCount); IMU.getAres(); // get accelerometer scales saved to aRes IMU.ax = (float)IMU.accelCount[0] * IMU.aRes; // - accelBias[0]; IMU.ay = (float)IMU.accelCount[1] * IMU.aRes; // - accelBias[1]; IMU.az = (float)IMU.accelCount[2] * IMU.aRes; // - accelBias[2]; M5.Lcd.print( X-acceleration: ); M5.Lcd.print(1000 * IMU.ax); M5.Lcd.println( mg ); M5.Lcd.print( Y-acceleration: ); M5.Lcd.print(1000 * IMU.ay); M5.Lcd.println( mg ); M5.Lcd.print( Z-acceleration: ); M5.Lcd.print(1000 * IMU.az); M5.Lcd.println( mg ); } delay(500); }","title":"IMU Sensor MPU9250"},{"location":"tutorials/M5Stack/docs/en/api/mpu9250/#imu-sensor-mpu9250","text":"IMU The MPU9250 is a multi-chip module that integrates two chips. One chip is the MPU6500, which consists of a 3-axis gyroscope and a 3-axis accelerometer. The other is the AK8963 is a 3-axis magnetometer.","title":"IMU Sensor MPU9250"},{"location":"tutorials/M5Stack/docs/en/api/mpu9250/#initmpu9250","text":"Syntax: void initMPU9250(); Description: This function initialize MPU6500 chip. Example: #include M5Stack.h #include utility/MPU9250.h MPU9250 IMU; // new a MPU9250 object void setup() { M5.begin(); Wire.begin(); IMU.initMPU9250(); // this line must be after Wire.begin() } void loop() { }","title":"initMPU9250()"},{"location":"tutorials/M5Stack/docs/en/api/mpu9250/#initak8963","text":"Syntax: void initAK8963(float * destination); Description: This function initialize AK8963 chip. Argument Description Type destination for AK8963 Calibration Value float * Example: #include M5Stack.h #include utility/MPU9250.h MPU9250 IMU; // new a MPU9250 object void setup() { M5.begin(); Wire.begin(); IMU.initAK8963(IMU.magCalibration); M5.Lcd.println( AK8963 initialized for active data mode.... ); if (Serial) { M5.Lcd.println( Calibration values: ); M5.Lcd.print( X-Axis sensitivity adjustment value ); M5.Lcd.println(IMU.magCalibration[0], 2); M5.Lcd.print( Y-Axis sensitivity adjustment value ); M5.Lcd.println(IMU.magCalibration[1], 2); M5.Lcd.print( Z-Axis sensitivity adjustment value ); M5.Lcd.println(IMU.magCalibration[2], 2); } } void loop() { }","title":"initAK8963()"},{"location":"tutorials/M5Stack/docs/en/api/mpu9250/#calibratempu9250","text":"Syntax: void calibrateMPU9250(float * gyroBias, float * accelBias); Description: This function calcurate offset values of gyro and accelerometer. Argument Description Type gyroBias gyro offset float * accelBias accel offset float * Example: #include M5Stack.h #include utility/MPU9250.h MPU9250 IMU; // new a MPU9250 object void setup() { M5.begin(); Wire.begin(); IMU.initMPU9250(); IMU.calibrateMPU9250(IMU.gyroBias, IMU.accelBias); M5.Lcd.fillScreen(BLACK); M5.Lcd.setTextSize(1); M5.Lcd.setCursor(0, 0); M5.Lcd.print( MPU9250 bias ); M5.Lcd.setCursor(0, 16); M5.Lcd.print( x y z ); M5.Lcd.setCursor(0, 32); M5.Lcd.print((int)(1000 * IMU.accelBias[0])); M5.Lcd.setCursor(32, 32); M5.Lcd.print((int)(1000 * IMU.accelBias[1])); M5.Lcd.setCursor(64, 32); M5.Lcd.print((int)(1000 * IMU.accelBias[2])); M5.Lcd.setCursor(96, 32); M5.Lcd.print( mg ); M5.Lcd.setCursor(0, 48); M5.Lcd.print(IMU.gyroBias[0], 1); M5.Lcd.setCursor(32, 48); M5.Lcd.print(IMU.gyroBias[1], 1); M5.Lcd.setCursor(64, 48); M5.Lcd.print(IMU.gyroBias[2], 1); M5.Lcd.setCursor(96, 48); M5.Lcd.print( o/s ); } void loop() { }","title":"calibrateMPU9250()"},{"location":"tutorials/M5Stack/docs/en/api/mpu9250/#readbyte","text":"Syntax: uint8_t readByte(uint8_t address, uint8_t subAddress) ; Description: This function reads a byte data from specified register of MPU9250. Argument Description Type address (MPU9250/AK8963) I2C address uint8_t subAddress register address uint8_t Example: #include M5Stack.h #include utility/MPU9250.h MPU9250 IMU; // new a MPU9250 object void setup() { M5.begin(); Wire.begin(); uint8_t id = IMU.readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250); M5.Lcd.print( MPU9250 I AM 0x ); M5.Lcd.print(id, HEX); } void loop() { }","title":"readByte()"},{"location":"tutorials/M5Stack/docs/en/api/mpu9250/#readgyrodata","text":"Syntax: void readGyroData(int16_t * destination); Description: This function reads the value of 3-axis gyro sensor. Argument Description Type destination read gyro values int16_t * Example: #include M5Stack.h #include utility/MPU9250.h MPU9250 IMU; // new a MPU9250 object void setup() { M5.begin(); Wire.begin(); IMU.initMPU9250(); IMU.calibrateMPU9250(IMU.gyroBias, IMU.accelBias); } void loop() { // If intPin goes high, all data registers have new data // On interrupt, check if data ready interrupt if (IMU.readByte(MPU9250_ADDRESS, INT_STATUS) 0x01) { M5.Lcd.clear(); M5.Lcd.setCursor(0, 0); IMU.readGyroData(IMU.gyroCount); // Read the x/y/z adc values IMU.getGres(); // get Gyro scales saved to gRes IMU.gx = (float)IMU.gyroCount[0] * IMU.gRes; IMU.gy = (float)IMU.gyroCount[1] * IMU.gRes; IMU.gz = (float)IMU.gyroCount[2] * IMU.gRes; M5.Lcd.print( X-gyro rate: ); M5.Lcd.print(IMU.gx, 3); M5.Lcd.println( degrees/sec ); M5.Lcd.print( Y-gyro rate: ); M5.Lcd.print(IMU.gy, 3); M5.Lcd.println( degrees/sec ); M5.Lcd.print( Z-gyro rate: ); M5.Lcd.print(IMU.gz, 3); M5.Lcd.println( degrees/sec ); } delay(500); }","title":"readGyroData()"},{"location":"tutorials/M5Stack/docs/en/api/mpu9250/#readacceldata","text":"Syntax: void readAccelData(int16_t * destination); Description: This function reads the value of 3-axis accelerate sensor. Argument Description Type destination read accelerate values int16_t * Example: #include M5Stack.h #include utility/MPU9250.h MPU9250 IMU; // new a MPU9250 object void setup() { M5.begin(); Wire.begin(); IMU.initMPU9250(); IMU.calibrateMPU9250(IMU.gyroBias, IMU.accelBias); } void loop() { // If intPin goes high, all data registers have new data // On interrupt, check if data ready interrupt if (IMU.readByte(MPU9250_ADDRESS, INT_STATUS) 0x01) { M5.Lcd.clear(); M5.Lcd.setCursor(0, 0); IMU.readAccelData(IMU.accelCount); IMU.getAres(); // get accelerometer scales saved to aRes IMU.ax = (float)IMU.accelCount[0] * IMU.aRes; // - accelBias[0]; IMU.ay = (float)IMU.accelCount[1] * IMU.aRes; // - accelBias[1]; IMU.az = (float)IMU.accelCount[2] * IMU.aRes; // - accelBias[2]; M5.Lcd.print( X-acceleration: ); M5.Lcd.print(1000 * IMU.ax); M5.Lcd.println( mg ); M5.Lcd.print( Y-acceleration: ); M5.Lcd.print(1000 * IMU.ay); M5.Lcd.println( mg ); M5.Lcd.print( Z-acceleration: ); M5.Lcd.print(1000 * IMU.az); M5.Lcd.println( mg ); } delay(500); }","title":"readAccelData()"},{"location":"tutorials/M5Stack/docs/en/api/power/","text":"Power Power related functions depend on the IP5306 chip. Please refer to the data sheet IP5306 as required. The older M5STACK hardware does not support communication with IP5306 chip. When using functions, also consider supporting out of control cases. * Use initialization, communication check, and control in this order, as shown in the example below. M5.Power.begin(); if(!M5.Power.canControl()) { //can't control. return; } M5.Power.lightSleep(SLEEP_SEC(5)); begin() Syntax: void begin() Description: Performs initialization of Power class. Function argument No argument. Function return value No return value. setPowerBoostOnOff() Syntax: bool setPowerBoostOnOff(bool en) Description: Change the power on / off method. The power does not turn off when connected via USB. Function argument Param Description true Press and hold to turn on / off. false Turn on / off with two short presses. Function return value Param Description true Control success. false Control failure. setPowerBoostSet() Syntax: bool setPowerBoostSet(bool en) Description: Change the power on / off method. The power does not turn off when connected via USB. Function argument Param Description true ON / OFF in one short press. false Follow the setPowerBoostOnOff () method. Function return value Param Description true Control success. false Control failure. setPowerVin() Syntax: bool setPowerVin(bool en) Description: When the power supply from USB etc. is cut off, Decide whether to turn on the power again. Function argument Param Description true The power will be turned on again. false The power will not be turned on again. Function return value Param Description true Control success. false Control failure. setPowerWLEDSet() Syntax: bool setPowerWLEDSet(bool en) Description: Set the mode to turn on the power LED. In addition, IP5306 of M5GO is not wired and can not be controlled by this function. Function argument Param Description true Turn on the LED with two short presses false Turn on the LED with Press and hold Function return value Param Description true Control success. false Control failure. setPowerBtnEn() Syntax: bool setPowerBtnEn(bool en) Description: Set whether to accept the power button. About the behavior when not accepting the button: If the power is on, the power button only accepts CPU reset. If the power is not supplied, the power can not be turned on. Function argument Param Description true Accept power operation. false Does not accept power control. Function return value Param Description true Control success. false Control failure. setLowPowerShutdownTime() Syntax: bool setLowPowerShutdownTime(ShutdownTime time) Description: Set the waiting time until IP5306 makes the energy saving judgment and the power is turned off. Function argument Param Description ShutdownTime::SHUTDOWN_8S wait at 8sec. ShutdownTime::SHUTDOWN_16S wait at 16sec. ShutdownTime::SHUTDOWN_32S wait at 32sec. ShutdownTime::SHUTDOWN_64S wait at 64sec. Function return value Param Description true Control success. false Control failure. setPowerBoostKeepOn() Syntax: bool setPowerBoostKeepOn(bool en) Description: This function sets/unsets always boost output mode. Function argument Param Description true Always output power. false not Always output power. Function return value Param Description true Control success. false Control failure. setKeepLightLoad() Syntax: bool setKeepLightLoad(bool en) Description: This function sets/unsets to disable the automatic shutdown. (Deprecated: This function will be disabled and will be removed in the near future) Function argument Param Description true When the current is too small, IP5306 will not automatically shutdown, false When the current is too small, IP5306 will automatically shutdown. Function return value Param Description true Control success. false Control failure. setLowPowerShutdown() Syntax: bool setLowPowerShutdown(bool en) Description: Set the power saving automatic shutdown function. (Deprecated: this function is disabled and will eventually disappear. Use setPowerBoostKeepOn()) Function argument Param Description true Enable energy saving shutdown function. false Disable energy saving shutdown function. Function return value Param Description true Control success. false Control failure. setAutoBootOnLoad() Syntax: bool setAutoBootOnLoad(bool en) Description: Set whether to automatically start when power consumption occurs on the secondary side of IP5306. Function argument Param Description true Enable the auto start function. false Disable auto start function. Function return value Param Description true Control success. false Control failure. setCharge() Syntax: bool setCharge(bool en) Description: This function sets/unsets charge mode. When the battery is fully charged, try set charge enable- disable- enable, It can be recharged. Function argument Param Description true Start charging, false Stop charging. Function return value Param Description true Control success. false Control failure. isChargeFull() Syntax: bool isChargeFull() Description: This function checks if the battery is fully charged. Function argument No argument. Function return value Param Description true Full charged, false Not full charged. canControl() Syntax: bool canControl() Description: This function checks the existence of the battery controller over I2C communication. Function argument No argument. Function return value Param Description true Battery controller is found, false Battery controller is not found. isCharging() Syntax: bool isCharging() Description: This function checks the state of the charging. Function argument No argument. Function return value Param Description true In charging, false Not in charging. getBatteryLevel() Syntax: bool getBatteryLevel() Description: This function gets the battery level. Function argument No argument. Function return value Battery remaining percentage. (0-100 %) Returns -1 if it can not communicate with the controller. setWakeupButton() Syntax: void setWakeupButton(uint8_t button) Description: Sets the signal port to monitor when waking from sleep. Function argument Param Description button number of port. Function return value No return value. Example of use: setWakeupButton(BUTTON_A_PIN); reset() Syntax: void reset(); Description: Reset CPU and reboot. Function argument No argument. Function return value No return value. isResetbySoftware() Syntax: bool isResetbySoftware() Description: It is judged whether the current activation status is after CPU reset. (It will be true if equivalent processing from reset () or RTOS etc. is performed) Function argument No argument, Function return value Param Description true By software reset false For other reasons isResetbyWatchdog() Syntax: bool isResetbyWatchdog() Description: Determines whether the current activation status is after the watchdog. Function argument No argument, Function return value Param Description true By watchdog false For other reasons isResetbyDeepsleep() Syntax: bool isResetbyDeepsleep() Description: Determines if the current wakeup state is after deepSleep (). Function argument No argument, Function return value Param Description true after deepSleep() false For other reasons isResetbyPowerSW() Syntax: bool isResetbyPowerSW() Description: Determines whether the current start state is after power on from the power switch. Function argument No argument, Function return value Param Description true By PowerSwitch false For other reasons deepSleep() Syntax: void deepSleep(uint64_t time_in_us) Description: This function shifts to deep sleep mode. It starts when the specified time or port status changes. After waking up, the CPU will be restarted instead of running from the next line. Example of use: Save energy for 5 seconds and then restart. deepSleep(SLEEP_SEC(5)); lightSleep() Syntax: void lightSleep(uint64_t time_in_us) Description: This function shifts to deep sleep mode. It starts when the specified time or port changes. After returning, it will be executed from the next line. Power saving capability is lacking compared to deepSleep(). Example of use: Save energy for 5 seconds and then restart. lightSleep(SLEEP_SEC(5)); powerOFF() Syntax: void powerOFF() Description: Turn off the power. By turning off the IP5306 after 8 seconds using the power saving function Turn off the power supplied to the circuit side. Usage notes: M5Stack does not have a means to forcibly turn off the power. So,this function is realized by using the power saving function of IP5306. If the user is consuming current in the circuit IP5306 fails to determine the power off.","title":"Power"},{"location":"tutorials/M5Stack/docs/en/api/power/#power","text":"Power related functions depend on the IP5306 chip. Please refer to the data sheet IP5306 as required. The older M5STACK hardware does not support communication with IP5306 chip. When using functions, also consider supporting out of control cases. * Use initialization, communication check, and control in this order, as shown in the example below. M5.Power.begin(); if(!M5.Power.canControl()) { //can't control. return; } M5.Power.lightSleep(SLEEP_SEC(5));","title":"Power"},{"location":"tutorials/M5Stack/docs/en/api/power/#begin","text":"Syntax: void begin() Description: Performs initialization of Power class. Function argument No argument. Function return value No return value.","title":"begin()"},{"location":"tutorials/M5Stack/docs/en/api/power/#setpowerboostonoff","text":"Syntax: bool setPowerBoostOnOff(bool en) Description: Change the power on / off method. The power does not turn off when connected via USB. Function argument Param Description true Press and hold to turn on / off. false Turn on / off with two short presses. Function return value Param Description true Control success. false Control failure.","title":"setPowerBoostOnOff()"},{"location":"tutorials/M5Stack/docs/en/api/power/#setpowerboostset","text":"Syntax: bool setPowerBoostSet(bool en) Description: Change the power on / off method. The power does not turn off when connected via USB. Function argument Param Description true ON / OFF in one short press. false Follow the setPowerBoostOnOff () method. Function return value Param Description true Control success. false Control failure.","title":"setPowerBoostSet()"},{"location":"tutorials/M5Stack/docs/en/api/power/#setpowervin","text":"Syntax: bool setPowerVin(bool en) Description: When the power supply from USB etc. is cut off, Decide whether to turn on the power again. Function argument Param Description true The power will be turned on again. false The power will not be turned on again. Function return value Param Description true Control success. false Control failure.","title":"setPowerVin()"},{"location":"tutorials/M5Stack/docs/en/api/power/#setpowerwledset","text":"Syntax: bool setPowerWLEDSet(bool en) Description: Set the mode to turn on the power LED. In addition, IP5306 of M5GO is not wired and can not be controlled by this function. Function argument Param Description true Turn on the LED with two short presses false Turn on the LED with Press and hold Function return value Param Description true Control success. false Control failure.","title":"setPowerWLEDSet()"},{"location":"tutorials/M5Stack/docs/en/api/power/#setpowerbtnen","text":"Syntax: bool setPowerBtnEn(bool en) Description: Set whether to accept the power button. About the behavior when not accepting the button: If the power is on, the power button only accepts CPU reset. If the power is not supplied, the power can not be turned on. Function argument Param Description true Accept power operation. false Does not accept power control. Function return value Param Description true Control success. false Control failure.","title":"setPowerBtnEn()"},{"location":"tutorials/M5Stack/docs/en/api/power/#setlowpowershutdowntime","text":"Syntax: bool setLowPowerShutdownTime(ShutdownTime time) Description: Set the waiting time until IP5306 makes the energy saving judgment and the power is turned off. Function argument Param Description ShutdownTime::SHUTDOWN_8S wait at 8sec. ShutdownTime::SHUTDOWN_16S wait at 16sec. ShutdownTime::SHUTDOWN_32S wait at 32sec. ShutdownTime::SHUTDOWN_64S wait at 64sec. Function return value Param Description true Control success. false Control failure.","title":"setLowPowerShutdownTime()"},{"location":"tutorials/M5Stack/docs/en/api/power/#setpowerboostkeepon","text":"Syntax: bool setPowerBoostKeepOn(bool en) Description: This function sets/unsets always boost output mode. Function argument Param Description true Always output power. false not Always output power. Function return value Param Description true Control success. false Control failure.","title":"setPowerBoostKeepOn()"},{"location":"tutorials/M5Stack/docs/en/api/power/#setkeeplightload","text":"Syntax: bool setKeepLightLoad(bool en) Description: This function sets/unsets to disable the automatic shutdown. (Deprecated: This function will be disabled and will be removed in the near future) Function argument Param Description true When the current is too small, IP5306 will not automatically shutdown, false When the current is too small, IP5306 will automatically shutdown. Function return value Param Description true Control success. false Control failure.","title":"setKeepLightLoad()"},{"location":"tutorials/M5Stack/docs/en/api/power/#setlowpowershutdown","text":"Syntax: bool setLowPowerShutdown(bool en) Description: Set the power saving automatic shutdown function. (Deprecated: this function is disabled and will eventually disappear. Use setPowerBoostKeepOn()) Function argument Param Description true Enable energy saving shutdown function. false Disable energy saving shutdown function. Function return value Param Description true Control success. false Control failure.","title":"setLowPowerShutdown()"},{"location":"tutorials/M5Stack/docs/en/api/power/#setautobootonload","text":"Syntax: bool setAutoBootOnLoad(bool en) Description: Set whether to automatically start when power consumption occurs on the secondary side of IP5306. Function argument Param Description true Enable the auto start function. false Disable auto start function. Function return value Param Description true Control success. false Control failure.","title":"setAutoBootOnLoad()"},{"location":"tutorials/M5Stack/docs/en/api/power/#setcharge","text":"Syntax: bool setCharge(bool en) Description: This function sets/unsets charge mode. When the battery is fully charged, try set charge enable- disable- enable, It can be recharged. Function argument Param Description true Start charging, false Stop charging. Function return value Param Description true Control success. false Control failure.","title":"setCharge()"},{"location":"tutorials/M5Stack/docs/en/api/power/#ischargefull","text":"Syntax: bool isChargeFull() Description: This function checks if the battery is fully charged. Function argument No argument. Function return value Param Description true Full charged, false Not full charged.","title":"isChargeFull()"},{"location":"tutorials/M5Stack/docs/en/api/power/#cancontrol","text":"Syntax: bool canControl() Description: This function checks the existence of the battery controller over I2C communication. Function argument No argument. Function return value Param Description true Battery controller is found, false Battery controller is not found.","title":"canControl()"},{"location":"tutorials/M5Stack/docs/en/api/power/#ischarging","text":"Syntax: bool isCharging() Description: This function checks the state of the charging. Function argument No argument. Function return value Param Description true In charging, false Not in charging.","title":"isCharging()"},{"location":"tutorials/M5Stack/docs/en/api/power/#getbatterylevel","text":"Syntax: bool getBatteryLevel() Description: This function gets the battery level. Function argument No argument. Function return value Battery remaining percentage. (0-100 %) Returns -1 if it can not communicate with the controller.","title":"getBatteryLevel()"},{"location":"tutorials/M5Stack/docs/en/api/power/#setwakeupbutton","text":"Syntax: void setWakeupButton(uint8_t button) Description: Sets the signal port to monitor when waking from sleep. Function argument Param Description button number of port. Function return value No return value. Example of use: setWakeupButton(BUTTON_A_PIN);","title":"setWakeupButton()"},{"location":"tutorials/M5Stack/docs/en/api/power/#reset","text":"Syntax: void reset(); Description: Reset CPU and reboot. Function argument No argument. Function return value No return value.","title":"reset()"},{"location":"tutorials/M5Stack/docs/en/api/power/#isresetbysoftware","text":"Syntax: bool isResetbySoftware() Description: It is judged whether the current activation status is after CPU reset. (It will be true if equivalent processing from reset () or RTOS etc. is performed) Function argument No argument, Function return value Param Description true By software reset false For other reasons","title":"isResetbySoftware()"},{"location":"tutorials/M5Stack/docs/en/api/power/#isresetbywatchdog","text":"Syntax: bool isResetbyWatchdog() Description: Determines whether the current activation status is after the watchdog. Function argument No argument, Function return value Param Description true By watchdog false For other reasons","title":"isResetbyWatchdog()"},{"location":"tutorials/M5Stack/docs/en/api/power/#isresetbydeepsleep","text":"Syntax: bool isResetbyDeepsleep() Description: Determines if the current wakeup state is after deepSleep (). Function argument No argument, Function return value Param Description true after deepSleep() false For other reasons","title":"isResetbyDeepsleep()"},{"location":"tutorials/M5Stack/docs/en/api/power/#isresetbypowersw","text":"Syntax: bool isResetbyPowerSW() Description: Determines whether the current start state is after power on from the power switch. Function argument No argument, Function return value Param Description true By PowerSwitch false For other reasons","title":"isResetbyPowerSW()"},{"location":"tutorials/M5Stack/docs/en/api/power/#deepsleep","text":"Syntax: void deepSleep(uint64_t time_in_us) Description: This function shifts to deep sleep mode. It starts when the specified time or port status changes. After waking up, the CPU will be restarted instead of running from the next line. Example of use: Save energy for 5 seconds and then restart. deepSleep(SLEEP_SEC(5));","title":"deepSleep()"},{"location":"tutorials/M5Stack/docs/en/api/power/#lightsleep","text":"Syntax: void lightSleep(uint64_t time_in_us) Description: This function shifts to deep sleep mode. It starts when the specified time or port changes. After returning, it will be executed from the next line. Power saving capability is lacking compared to deepSleep(). Example of use: Save energy for 5 seconds and then restart. lightSleep(SLEEP_SEC(5));","title":"lightSleep()"},{"location":"tutorials/M5Stack/docs/en/api/power/#poweroff","text":"Syntax: void powerOFF() Description: Turn off the power. By turning off the IP5306 after 8 seconds using the power saving function Turn off the power supplied to the circuit side. Usage notes: M5Stack does not have a means to forcibly turn off the power. So,this function is realized by using the power saving function of IP5306. If the user is consuming current in the circuit IP5306 fails to determine the power off.","title":"powerOFF()"},{"location":"tutorials/M5Stack/docs/en/api/sh200q_m5stickc/","text":"IMU(SH200Q\uff09 The SH200Q is a 6-axis IMU sensor. It can detect 3-axis gyro data and 3-axis acceleration data. Init() Syntax: void Init(); Description: It initialize the SH200Q. Example: #include M5StickC.h void setup() { uint8_t c; M5.begin(); M5.IMU.Init(); M5.IMU.I2C_Read_NBytes(SH200I_ADDRESS, SH200I_WHOAMI, 1, c); M5.Lcd.print( SH200Q I AM ); M5.Lcd.println(c, HEX); } void loop() {} getGyroData() Syntax: void getGyroData(int16_t gx, int16_t gy, int16_t* gz); Description: It get gyro data of SH200Q. Example: #include M5StickC.h int16_t gyroX, gyroY, gyroZ; void setup() { M5.begin(); M5.IMU.Init(); } void loop() { M5.IMU.getGyroData( gyroX, gyroY, gyroZ); M5.Lcd.setCursor(0, 30); M5.Lcd.printf( X:%7.2f\\nY:%7.2f\\nZ:%7.2f mg , ((float)gyroX) * M5.IMU.gRes, ((float)gyroY) * M5.IMU.gRes, ((float)gyroZ) * M5.IMU.gRes); delay(500); } getAccelData() Syntax: void getAccelData(int16_t ax, int16_t ay, int16_t* az); Description: It get SH200Q acceleration data. Example: #include M5StickC.h int16_t accX, accY, accZ; void setup() { M5.begin(); M5.IMU.Init(); } void loop() { M5.IMU.getAccelData( accX, accY, accZ); M5.Lcd.setCursor(0, 45); M5.Lcd.printf( X:%5.2f\\nY:%5.2f\\nZ:%5.2f o/s , ((float)accX) * M5.IMU.aRes, ((float)accY) * M5.IMU.aRes, ((float)accZ) * M5.IMU.aRes); delay(500); }","title":"IMU(SH200Q\uff09"},{"location":"tutorials/M5Stack/docs/en/api/sh200q_m5stickc/#imush200q","text":"The SH200Q is a 6-axis IMU sensor. It can detect 3-axis gyro data and 3-axis acceleration data.","title":"IMU(SH200Q\uff09"},{"location":"tutorials/M5Stack/docs/en/api/sh200q_m5stickc/#init","text":"Syntax: void Init(); Description: It initialize the SH200Q. Example: #include M5StickC.h void setup() { uint8_t c; M5.begin(); M5.IMU.Init(); M5.IMU.I2C_Read_NBytes(SH200I_ADDRESS, SH200I_WHOAMI, 1, c); M5.Lcd.print( SH200Q I AM ); M5.Lcd.println(c, HEX); } void loop() {}","title":"Init()"},{"location":"tutorials/M5Stack/docs/en/api/sh200q_m5stickc/#getgyrodata","text":"Syntax: void getGyroData(int16_t gx, int16_t gy, int16_t* gz); Description: It get gyro data of SH200Q. Example: #include M5StickC.h int16_t gyroX, gyroY, gyroZ; void setup() { M5.begin(); M5.IMU.Init(); } void loop() { M5.IMU.getGyroData( gyroX, gyroY, gyroZ); M5.Lcd.setCursor(0, 30); M5.Lcd.printf( X:%7.2f\\nY:%7.2f\\nZ:%7.2f mg , ((float)gyroX) * M5.IMU.gRes, ((float)gyroY) * M5.IMU.gRes, ((float)gyroZ) * M5.IMU.gRes); delay(500); }","title":"getGyroData()"},{"location":"tutorials/M5Stack/docs/en/api/sh200q_m5stickc/#getacceldata","text":"Syntax: void getAccelData(int16_t ax, int16_t ay, int16_t* az); Description: It get SH200Q acceleration data. Example: #include M5StickC.h int16_t accX, accY, accZ; void setup() { M5.begin(); M5.IMU.Init(); } void loop() { M5.IMU.getAccelData( accX, accY, accZ); M5.Lcd.setCursor(0, 45); M5.Lcd.printf( X:%5.2f\\nY:%5.2f\\nZ:%5.2f o/s , ((float)accX) * M5.IMU.aRes, ((float)accY) * M5.IMU.aRes, ((float)accZ) * M5.IMU.aRes); delay(500); }","title":"getAccelData()"},{"location":"tutorials/M5Stack/docs/en/api/speaker/","text":"Speaker begin() Description: Initialize the speaker. Syntax: begin(); Function argument: None Function return value: None end() Description: Mute the speakers and stop the output. Syntax: end(); Function argument: None Function return value: None tone() Syntax: tone(uint16_t freq, [uint32_t duration]); Description: Set the pitch of speaker. Param Description type freq frequency uint16_t duration duration (unit: millisecond) uint16_t Example #include M5Stack.h void setup() { M5.begin(); M5.Speaker.tone(900, 1000); } setBeep() Description: Set the beep sound. Syntax: setBeep(uint16_t freq, uint16_t duration); Argument Description Type freq pitch (frequency Hz) uint16_t duration beep time (ms), optional. uint16_t Example of use: #include M5Stack.h void setup() { M5.begin(); M5.Speaker.setBeep(900, 1000); }","title":"Speaker"},{"location":"tutorials/M5Stack/docs/en/api/speaker/#speaker","text":"","title":"Speaker"},{"location":"tutorials/M5Stack/docs/en/api/speaker/#begin","text":"Description: Initialize the speaker. Syntax: begin(); Function argument: None Function return value: None","title":"begin()"},{"location":"tutorials/M5Stack/docs/en/api/speaker/#end","text":"Description: Mute the speakers and stop the output. Syntax: end(); Function argument: None Function return value: None","title":"end()"},{"location":"tutorials/M5Stack/docs/en/api/speaker/#tone","text":"Syntax: tone(uint16_t freq, [uint32_t duration]); Description: Set the pitch of speaker. Param Description type freq frequency uint16_t duration duration (unit: millisecond) uint16_t Example #include M5Stack.h void setup() { M5.begin(); M5.Speaker.tone(900, 1000); }","title":"tone()"},{"location":"tutorials/M5Stack/docs/en/api/speaker/#setbeep","text":"Description: Set the beep sound. Syntax: setBeep(uint16_t freq, uint16_t duration); Argument Description Type freq pitch (frequency Hz) uint16_t duration beep time (ms), optional. uint16_t Example of use: #include M5Stack.h void setup() { M5.begin(); M5.Speaker.setBeep(900, 1000); }","title":"setBeep()"},{"location":"tutorials/M5Stack/docs/en/api/system/","text":"System begin() Syntax: void begin(bool LCDEnable=true, bool SDEnable=true, bool SerialEnable=true,bool I2CEnable=false); Description: This function sets enable/disable LCD, TF Card,Serial port and I2C port. Definition: void M5Stack::begin(bool LCDEnable, bool SDEnable, bool SerialEnable,bool I2CEnable) { // Correct init once if (isInited) return; else isInited = true; // UART if (SerialEnable) { Serial.begin(115200); Serial.flush(); delay(50); Serial.print( M5Stack initializing... ); } // LCD INIT if (LCDEnable) { Lcd.begin(); } // TF Card if (SDEnable) { SD.begin(TFCARD_CS_PIN, SPI, 40000000); } // TONE // Speaker.begin(); // Set wakeup button Power.setWakeupButton(BUTTON_A_PIN); // I2C init if(I2CEnable) { Wire.begin(21, 22); } if (SerialEnable) { Serial.println( OK ); } } void M5Stack::update() { //Button update BtnA.read(); BtnB.read(); BtnC.read(); //Speaker update Speaker.update(); } update() Syntax: void update(); Description: This function reads The State of Button A and B and C. Definition: void M5Stack::update() { //Button update BtnA.read(); BtnB.read(); BtnC.read(); //Speaker update Speaker.update(); } Example: #include M5Stack.h void setup() { M5.begin(); } void loop() { M5.update(); } powerOFF() ! Deprecated: Please use Power::deepSleep() Syntax: void powerOFF(); Description: This function turns off the power of M5. Definition: void M5Stack::powerOFF() { M5.Power.deepSleep(); } Example: #include M5Stack.h void setup() { M5.begin(); M5.Lcd.println( This is software power off demo ); M5.Lcd.println( Press the button A to power off. ); M5.setWakeupButton(BUTTON_A_PIN); } void loop() { M5.update(); if (M5.BtnA.wasPressed()) { M5.powerOFF(); } }","title":"System"},{"location":"tutorials/M5Stack/docs/en/api/system/#system","text":"","title":"System"},{"location":"tutorials/M5Stack/docs/en/api/system/#begin","text":"Syntax: void begin(bool LCDEnable=true, bool SDEnable=true, bool SerialEnable=true,bool I2CEnable=false); Description: This function sets enable/disable LCD, TF Card,Serial port and I2C port. Definition: void M5Stack::begin(bool LCDEnable, bool SDEnable, bool SerialEnable,bool I2CEnable) { // Correct init once if (isInited) return; else isInited = true; // UART if (SerialEnable) { Serial.begin(115200); Serial.flush(); delay(50); Serial.print( M5Stack initializing... ); } // LCD INIT if (LCDEnable) { Lcd.begin(); } // TF Card if (SDEnable) { SD.begin(TFCARD_CS_PIN, SPI, 40000000); } // TONE // Speaker.begin(); // Set wakeup button Power.setWakeupButton(BUTTON_A_PIN); // I2C init if(I2CEnable) { Wire.begin(21, 22); } if (SerialEnable) { Serial.println( OK ); } } void M5Stack::update() { //Button update BtnA.read(); BtnB.read(); BtnC.read(); //Speaker update Speaker.update(); }","title":"begin()"},{"location":"tutorials/M5Stack/docs/en/api/system/#update","text":"Syntax: void update(); Description: This function reads The State of Button A and B and C. Definition: void M5Stack::update() { //Button update BtnA.read(); BtnB.read(); BtnC.read(); //Speaker update Speaker.update(); } Example: #include M5Stack.h void setup() { M5.begin(); } void loop() { M5.update(); }","title":"update()"},{"location":"tutorials/M5Stack/docs/en/api/system/#poweroff","text":"! Deprecated: Please use Power::deepSleep() Syntax: void powerOFF(); Description: This function turns off the power of M5. Definition: void M5Stack::powerOFF() { M5.Power.deepSleep(); } Example: #include M5Stack.h void setup() { M5.begin(); M5.Lcd.println( This is software power off demo ); M5.Lcd.println( Press the button A to power off. ); M5.setWakeupButton(BUTTON_A_PIN); } void loop() { M5.update(); if (M5.BtnA.wasPressed()) { M5.powerOFF(); } }","title":"powerOFF()"},{"location":"tutorials/M5Stack/docs/en/api/system_m5stickc/","text":"System (M5StickC) begin() Syntax: void begin(bool LCDEnable=true, bool PowerEnable=true, bool SerialEnable=true); Description: Clear the serial port buffer, set the serial port baud rate to 115200; initialize the LCD; initialize the power management chip AXP192. Definition: void M5StickC::begin(bool LCDEnable, bool PowerEnable, bool SerialEnable) { //! Correct init once if (isInited) return; else isInited = true; //! UART if (SerialEnable) { Serial.begin(115200); Serial.flush(); delay(50); Serial.print( M5StickC initializing... ); } // Power if (PowerEnable) { Axp.begin(); } // LCD INIT if (LCDEnable) { Lcd.begin(); } if (SerialEnable) { Serial.println( OK ); } } Example: #include M5StickC.h void setup() { M5.begin(); } void loop() {} GetBm8563Time() This is the API function of the BM8563 chip. The chip communicates with the ESP32 via I2C, and the I2C address is 0x51. Syntax: void GetBm8563Time(void); Description: Get the current hour, minute, and second value and save it to M5.Rtc.Hour, M5.Rtc.Minute, M5.Rtc.Second, in ASCII format. Example:\uff1a #include M5StickC.h void setup() { // put your setup code here, to run once: M5.begin(); M5.Lcd.setRotation(3); M5.Lcd.fillScreen(BLACK); M5.Lcd.setTextSize(2); M5.Lcd.println( rtc test ); } void loop() { // put your main code here, to run repeatedly: M5.Rtc.GetBm8563Time(); M5.Lcd.setCursor(0, 30, 2); M5.Lcd.printf( %02d : %02d : %02d\\n , M5.Rtc.Hour, M5.Rtc.Minute, M5.Rtc.Second); delay(1000); }","title":"System (M5StickC)"},{"location":"tutorials/M5Stack/docs/en/api/system_m5stickc/#system-m5stickc","text":"","title":"System (M5StickC)"},{"location":"tutorials/M5Stack/docs/en/api/system_m5stickc/#begin","text":"Syntax: void begin(bool LCDEnable=true, bool PowerEnable=true, bool SerialEnable=true); Description: Clear the serial port buffer, set the serial port baud rate to 115200; initialize the LCD; initialize the power management chip AXP192. Definition: void M5StickC::begin(bool LCDEnable, bool PowerEnable, bool SerialEnable) { //! Correct init once if (isInited) return; else isInited = true; //! UART if (SerialEnable) { Serial.begin(115200); Serial.flush(); delay(50); Serial.print( M5StickC initializing... ); } // Power if (PowerEnable) { Axp.begin(); } // LCD INIT if (LCDEnable) { Lcd.begin(); } if (SerialEnable) { Serial.println( OK ); } } Example: #include M5StickC.h void setup() { M5.begin(); } void loop() {}","title":"begin()"},{"location":"tutorials/M5Stack/docs/en/api/system_m5stickc/#getbm8563time","text":"This is the API function of the BM8563 chip. The chip communicates with the ESP32 via I2C, and the I2C address is 0x51. Syntax: void GetBm8563Time(void); Description: Get the current hour, minute, and second value and save it to M5.Rtc.Hour, M5.Rtc.Minute, M5.Rtc.Second, in ASCII format. Example:\uff1a #include M5StickC.h void setup() { // put your setup code here, to run once: M5.begin(); M5.Lcd.setRotation(3); M5.Lcd.fillScreen(BLACK); M5.Lcd.setTextSize(2); M5.Lcd.println( rtc test ); } void loop() { // put your main code here, to run repeatedly: M5.Rtc.GetBm8563Time(); M5.Lcd.setCursor(0, 30, 2); M5.Lcd.printf( %02d : %02d : %02d\\n , M5.Rtc.Hour, M5.Rtc.Minute, M5.Rtc.Second); delay(1000); }","title":"GetBm8563Time()"},{"location":"tutorials/M5Stack/docs/en/api/tf/","text":"TF card begin() Syntax: boolean begin(uint8_t cspin); Description: This function initialize TF card. Argument Description Type cspin chip select line (defaults SS line of SPI bus) uint8_t Example: #include M5Stack.h void setup() { SD.begin(); } open() Syntax: File open(const char *filename, uint8_t mode = FILE_READ); Description: This function open the file. Argument Description Type filepath path to file const char * mode read / write / rw (optional) uint8_t Example: /* display contents of hello.txt in TF card to M5 screen. */ #include M5Stack.h void setup() { M5.begin(); if (!SD.begin()) { M5.Lcd.println( Card failed, or not present ); while (1); } Serial.println( TF card initialized. ); File f = SD.open( /hello.txt , FILE_READ); if (f) { M5.Lcd.print(f.read()); f.close(); } else { M5.Lcd.println( open error hello.txt ); } } void loop() { }","title":"TF card"},{"location":"tutorials/M5Stack/docs/en/api/tf/#tf-card","text":"","title":"TF card"},{"location":"tutorials/M5Stack/docs/en/api/tf/#begin","text":"Syntax: boolean begin(uint8_t cspin); Description: This function initialize TF card. Argument Description Type cspin chip select line (defaults SS line of SPI bus) uint8_t Example: #include M5Stack.h void setup() { SD.begin(); }","title":"begin()"},{"location":"tutorials/M5Stack/docs/en/api/tf/#open","text":"Syntax: File open(const char *filename, uint8_t mode = FILE_READ); Description: This function open the file. Argument Description Type filepath path to file const char * mode read / write / rw (optional) uint8_t Example: /* display contents of hello.txt in TF card to M5 screen. */ #include M5Stack.h void setup() { M5.begin(); if (!SD.begin()) { M5.Lcd.println( Card failed, or not present ); while (1); } Serial.println( TF card initialized. ); File f = SD.open( /hello.txt , FILE_READ); if (f) { M5.Lcd.print(f.read()); f.close(); } else { M5.Lcd.println( open error hello.txt ); } } void loop() { }","title":"open()"},{"location":"tutorials/M5Stack/docs/en/app/bala/","text":"BALA - Balanced Car {docsify-ignore-all} :memo: Description :bulb: Quick Start :octocat: Example \ud83d\uded2 Purchase :clapper: Related Video Description BALA is a balance bot based on M5Stack FIRE, including a 2 DC driver module based on Mega328p which is a core chip on Arduino UNO. You can even program The M5Stack BALA through Arduino or MicroPython with few code. The 2 DC driver module communicates with M5Stack FIRE through I2C bus. It's default I2C address is 0x56 . Feature Programming Support Python Compatible LEGO POGO Pin TF Card Support PARAMETER Model M5Stack FIRE ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash 16MB Flash + 4MB PSRAM Input 5V @ 500mA Interface TypeC x 1, GROVE(I2C+I/0+UART), Pogo Pin x 1 LCD 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Microphone MEMS Analog BSE3729 Microphone LED SK6812 3535 RGB LED x 10 MEMS MPU9250 (MPU6500 + AK8963) Battery 550mAh @ 3.7V, inside Op.Temp. 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 21 mm C.A.S.E Plastic ( PC ) Weight 56g Include 1x M5Stack BALA 1x Motor Driver 2x N20(Encoder included) Type-C USB Cable Related Video BALA Case BALA Case - Mobile phone control BALA Case - Line tracer BALA Case - Line following using mobile camera","title":"BALA - Balanced Car {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/app/bala/#bala-balanced-car-docsify-ignore-all","text":":memo: Description :bulb: Quick Start :octocat: Example \ud83d\uded2 Purchase :clapper: Related Video","title":"BALA - Balanced Car {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/app/bala/#description","text":"BALA is a balance bot based on M5Stack FIRE, including a 2 DC driver module based on Mega328p which is a core chip on Arduino UNO. You can even program The M5Stack BALA through Arduino or MicroPython with few code. The 2 DC driver module communicates with M5Stack FIRE through I2C bus. It's default I2C address is 0x56 .","title":"Description"},{"location":"tutorials/M5Stack/docs/en/app/bala/#feature","text":"Programming Support Python Compatible LEGO POGO Pin TF Card Support","title":"Feature"},{"location":"tutorials/M5Stack/docs/en/app/bala/#parameter","text":"Model M5Stack FIRE ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash 16MB Flash + 4MB PSRAM Input 5V @ 500mA Interface TypeC x 1, GROVE(I2C+I/0+UART), Pogo Pin x 1 LCD 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Microphone MEMS Analog BSE3729 Microphone LED SK6812 3535 RGB LED x 10 MEMS MPU9250 (MPU6500 + AK8963) Battery 550mAh @ 3.7V, inside Op.Temp. 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 21 mm C.A.S.E Plastic ( PC ) Weight 56g","title":"PARAMETER"},{"location":"tutorials/M5Stack/docs/en/app/bala/#include","text":"1x M5Stack BALA 1x Motor Driver 2x N20(Encoder included) Type-C USB Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/app/bala/#related-video","text":"BALA Case BALA Case - Mobile phone control BALA Case - Line tracer BALA Case - Line following using mobile camera","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/app/flir/","text":"Application FLIR {docsify-ignore-all} :memo: Description :octocat: Example \ud83d\uded2 Purchase Description FLIR is a module which integrates lwir micro thermal camera ( Lepton 3.0 ) supplied by FLIR company. Real-time access to non-contact temperature measurement data. Easy to use because it integrates a digital thermal image processing unit. Lepton is equipped in M5 standard size 3D printing housing, after stacking M5Core, communicate with the master via IIC. The effective pixels obtained by the Lepton sensor are 160\u00d7120, but you can display the image size of different resolutions on the M5Core through the Arduino program. The image sizes for different resolutions are 80x60, 160x120, 240x320. Note: If working long hours, Lepton will heat up. But the output image is not affected by the camera temperature. Feature 160\u00d7120 Effective Pixels Lepton Low operating power\u2002\u2014\u2002150 mW (operating), 650 mW (during shutter event), 5 mW (standby) Field of view: 56\u00b0, with shutter Lepton Input Supply Voltage: 1.2V\uff0c2.8V\uff0c2.5V - 3.1V IO Fast imaging time ( 0.5 second) Parameter Lepton Parameter item Parameter value Effective Frame Rate 8.7Hz Input Clock 25-MHz Pixel Size 12\u00b5m Scene Dynamic Range Low Gain Mode: -10 to 400\u00b0C; High Gain Mode: -10 to 140\u00b0C Spectral Range 8 \u00b5m to 14 \u00b5m Thermal Sensitivity \uff1c50 mK\uff080.050\u2103\uff09 Input Supply Voltage 2.8 V, 1.2 V, 2.5 V - 3.1 V IO Optimum Temperature Range -10 \u00b0C to +80 \u00b0C Include 1x FLIR Application Car engine failure check Building dehumidification insulation sealing test Industrial furnace inner wall refractory crack Outdoor observation of animals at night Related Link Offical Video Forum Lepton Info (FLIR Website) Datasheet - Lepton 2.5 - Lepton 3 3.5 Lepton Engineering Datasheet Lepton Software Interface Description Example If you want the complete code, please click here \u3002","title":"Application FLIR {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/app/flir/#application-flir-docsify-ignore-all","text":":memo: Description :octocat: Example \ud83d\uded2 Purchase","title":"Application FLIR {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/app/flir/#description","text":"FLIR is a module which integrates lwir micro thermal camera ( Lepton 3.0 ) supplied by FLIR company. Real-time access to non-contact temperature measurement data. Easy to use because it integrates a digital thermal image processing unit. Lepton is equipped in M5 standard size 3D printing housing, after stacking M5Core, communicate with the master via IIC. The effective pixels obtained by the Lepton sensor are 160\u00d7120, but you can display the image size of different resolutions on the M5Core through the Arduino program. The image sizes for different resolutions are 80x60, 160x120, 240x320. Note: If working long hours, Lepton will heat up. But the output image is not affected by the camera temperature.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/app/flir/#feature","text":"160\u00d7120 Effective Pixels Lepton Low operating power\u2002\u2014\u2002150 mW (operating), 650 mW (during shutter event), 5 mW (standby) Field of view: 56\u00b0, with shutter Lepton Input Supply Voltage: 1.2V\uff0c2.8V\uff0c2.5V - 3.1V IO Fast imaging time ( 0.5 second)","title":"Feature"},{"location":"tutorials/M5Stack/docs/en/app/flir/#parameter","text":"Lepton Parameter item Parameter value Effective Frame Rate 8.7Hz Input Clock 25-MHz Pixel Size 12\u00b5m Scene Dynamic Range Low Gain Mode: -10 to 400\u00b0C; High Gain Mode: -10 to 140\u00b0C Spectral Range 8 \u00b5m to 14 \u00b5m Thermal Sensitivity \uff1c50 mK\uff080.050\u2103\uff09 Input Supply Voltage 2.8 V, 1.2 V, 2.5 V - 3.1 V IO Optimum Temperature Range -10 \u00b0C to +80 \u00b0C","title":"Parameter"},{"location":"tutorials/M5Stack/docs/en/app/flir/#include","text":"1x FLIR","title":"Include"},{"location":"tutorials/M5Stack/docs/en/app/flir/#application","text":"Car engine failure check Building dehumidification insulation sealing test Industrial furnace inner wall refractory crack Outdoor observation of animals at night","title":"Application"},{"location":"tutorials/M5Stack/docs/en/app/flir/#related-link","text":"Offical Video Forum Lepton Info (FLIR Website) Datasheet - Lepton 2.5 - Lepton 3 3.5 Lepton Engineering Datasheet Lepton Software Interface Description","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/app/flir/#example","text":"If you want the complete code, please click here \u3002 < !-- ## \u76f8\u5173\u89c6\u9891 **Lidar Bot \u5728\u8ff7\u5bab\u4e2d\u5de1\u7ebf**","title":"Example"},{"location":"tutorials/M5Stack/docs/en/app/lidarbot/","text":"LidarBot {docsify-ignore-all} :memo: Description :octocat: Example \ud83d\uded2 Purchase :clapper: Related Video Description LidarBot is a four-wheeled car based on indoor navigation. The car body is loaded with lidar, four Mecanum wheels, control-wheel bottom board(based on MEGA328), two RGB bars, M5Core(CarMainController) and some LEGO holes. Real-time communication via ESP-NOW between the car and the remote control handle. After receiving the control signal, the car master controlls the wheels and RGB bars through the specified protocol format. And in addition to controlling the car's flexible front, rear, left and right movements, the indoor terrain can also be displayed on the display screens of the car master(M5Core) and the remote control handle. Feature Lidar: 8m @ 6Hz Programming Support Arduino Compatible LEGO Protocol for CarBottomBoard Protocol Format: Data Header ( command type ) + Data Packet + Data Tail Control Target Protocol Format Example Function Wheels 0xAA,SpeedX(-7 ~ 7),SpeedY,SpeedZ,SpeedA,0x55 0xAA, 5, 5, 5, 5, 0x55(Go ahead, speed: 5) ControlWheel(5, 5, 5) One RGB 0xAB,LedIndex,R(0 ~ 254),G,B,0x55 0xAB, 3, 20, 50, 100, 0x55(3th RGB displays specific color) setLedColor(3, 20, 50, 100) Front RGB Bar 0xAC,R(0 ~ 254),G,B,0x55 0xAC, 20, 50, 100, 0x55(Front LED Bar displays specific color) setFrontLedBar(20, 50, 100) Back RGB Bar 0xAD,R(0 ~ 254),G,B,0x55 0xAD, 20, 50, 100, 0x55(Back LED Bar displays specific color) setBackLedBar(20, 50, 100) All RGB 0xAE,R(0 ~ 254),G,B,0x55 0xAE, 20, 50, 100, 0x55(All LED display specific color) setLedAll(20, 50, 100) ServoMotor0 0xAF,Angle(0 ~ 180),0x55 0xAF, 100, 0x55(Servo 0 turns angle 100 degree) setServo0Angle(100) ServoMotor1 0xB0,Angle(0 ~ 180),0x55 0xB0, 100, 0x55(Servo 1 turns angle 100 degree) setServo1Angle(100) PARAMETER The size of LidarBot: 142mm x 117mm x 120mm Communication Parameter M5Core(CarMain) - Lidar ( U1RXD (GPIO16) - Lidar) Serial Configuration: \"230400bps, 8, n, 1\"(8 bits data, no parity, 1 stop bit) M5Core(CarMain) - CarBottomBoard ( U2TXD (GPIO17) - Lidar) Serial Configuration: \"115200bps, 8, n, 1\"(8 bits data, no parity, 1 stop bit) PinMap ServoMotor0 - A0(MEGA328) ServoMotor1 - A1(MEGA328) NeoPixelRGB - 11(MEGA328) Include 1x LidarBot 1x Remote Control Handle 2x Battery(1300mAh @ 11.1V) 1x Power Charger 1x Type-C USB Cable APPLICATIONS Indoor Navigation Autonomous walking maze Route plan Autopilot Example If you want the complete code, please click here \u3002 Tree for Example Directory \u251c\u2500LidarBot_CarMain_V1.1 - Main program of LidarBot \u251c\u2500LidarBot_RemoteController_V1.0 - Program of RemoteController V1.0 \u2514\u2500LidarBot_RemoteController_V1.2 - Program of RemoteController V1.2(higher precision) Program analysis: 1. Main program of LidarBot: /* Main program */ void loop() { espnow.BotConnectUpdate();// ESPNOW reconnect lidarcar.MapDisplay();// display map esp_now_send(espnow.peer_addr, lidarcar.mapdata, 180);// ESPNOW sends map data } Single function resolution: Usage of reading radar data ```arduino #include \"lidarcar.h\" LidarCar lidarcar; lidarcar.Init(); GetData();//save radar data to array distance[] ``` Usage of line following ```arduino #include \"rprtrack.h\" Rprtrack rprtrack; SensorStatus();// save line following data to array sensorValue[] CalTrackDev();// handle array sensorValue[], get car offset and save it ``` Usage of ESP_NOW Please refer to https://github.com/m5stack/M5-espnow 2. Program of RemoteController /* Main program */ void loop() { espnow.RemoteConnectUpdate();// ESPNOW reconnect keyboard.GetValue();// read data of joystick // ESPNOW sends joystick data to car esp_now_send(espnow.peer_addr, keyboard.keyData, 3); MapDisplay();// display map accessport.AnalzyCommand();// send map data to PC software } Single function resolution: Usage of JOYSTICK ```arduino #include \"keyboard.h\" KeyBoard keyboard; keyboard.Init(); // get joystick data and save to adX, adY GetValue(); ``` Usage of communication with PC software ```arduino #include \"accessport.h\" AccessPort accessport; accessport.AnalzyCommand();// send map data to PC software ``` Related Video LidarBOT Case","title":"LidarBot {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/app/lidarbot/#lidarbot-docsify-ignore-all","text":":memo: Description :octocat: Example \ud83d\uded2 Purchase :clapper: Related Video","title":"LidarBot {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/app/lidarbot/#description","text":"LidarBot is a four-wheeled car based on indoor navigation. The car body is loaded with lidar, four Mecanum wheels, control-wheel bottom board(based on MEGA328), two RGB bars, M5Core(CarMainController) and some LEGO holes. Real-time communication via ESP-NOW between the car and the remote control handle. After receiving the control signal, the car master controlls the wheels and RGB bars through the specified protocol format. And in addition to controlling the car's flexible front, rear, left and right movements, the indoor terrain can also be displayed on the display screens of the car master(M5Core) and the remote control handle.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/app/lidarbot/#feature","text":"Lidar: 8m @ 6Hz Programming Support Arduino Compatible LEGO","title":"Feature"},{"location":"tutorials/M5Stack/docs/en/app/lidarbot/#protocol-for-carbottomboard","text":"Protocol Format: Data Header ( command type ) + Data Packet + Data Tail Control Target Protocol Format Example Function Wheels 0xAA,SpeedX(-7 ~ 7),SpeedY,SpeedZ,SpeedA,0x55 0xAA, 5, 5, 5, 5, 0x55(Go ahead, speed: 5) ControlWheel(5, 5, 5) One RGB 0xAB,LedIndex,R(0 ~ 254),G,B,0x55 0xAB, 3, 20, 50, 100, 0x55(3th RGB displays specific color) setLedColor(3, 20, 50, 100) Front RGB Bar 0xAC,R(0 ~ 254),G,B,0x55 0xAC, 20, 50, 100, 0x55(Front LED Bar displays specific color) setFrontLedBar(20, 50, 100) Back RGB Bar 0xAD,R(0 ~ 254),G,B,0x55 0xAD, 20, 50, 100, 0x55(Back LED Bar displays specific color) setBackLedBar(20, 50, 100) All RGB 0xAE,R(0 ~ 254),G,B,0x55 0xAE, 20, 50, 100, 0x55(All LED display specific color) setLedAll(20, 50, 100) ServoMotor0 0xAF,Angle(0 ~ 180),0x55 0xAF, 100, 0x55(Servo 0 turns angle 100 degree) setServo0Angle(100) ServoMotor1 0xB0,Angle(0 ~ 180),0x55 0xB0, 100, 0x55(Servo 1 turns angle 100 degree) setServo1Angle(100)","title":"Protocol for CarBottomBoard"},{"location":"tutorials/M5Stack/docs/en/app/lidarbot/#parameter","text":"The size of LidarBot: 142mm x 117mm x 120mm Communication Parameter M5Core(CarMain) - Lidar ( U1RXD (GPIO16) - Lidar) Serial Configuration: \"230400bps, 8, n, 1\"(8 bits data, no parity, 1 stop bit) M5Core(CarMain) - CarBottomBoard ( U2TXD (GPIO17) - Lidar) Serial Configuration: \"115200bps, 8, n, 1\"(8 bits data, no parity, 1 stop bit) PinMap ServoMotor0 - A0(MEGA328) ServoMotor1 - A1(MEGA328) NeoPixelRGB - 11(MEGA328)","title":"PARAMETER"},{"location":"tutorials/M5Stack/docs/en/app/lidarbot/#include","text":"1x LidarBot 1x Remote Control Handle 2x Battery(1300mAh @ 11.1V) 1x Power Charger 1x Type-C USB Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/app/lidarbot/#applications","text":"Indoor Navigation Autonomous walking maze Route plan Autopilot","title":"APPLICATIONS"},{"location":"tutorials/M5Stack/docs/en/app/lidarbot/#example","text":"If you want the complete code, please click here \u3002 Tree for Example Directory \u251c\u2500LidarBot_CarMain_V1.1 - Main program of LidarBot \u251c\u2500LidarBot_RemoteController_V1.0 - Program of RemoteController V1.0 \u2514\u2500LidarBot_RemoteController_V1.2 - Program of RemoteController V1.2(higher precision)","title":"Example"},{"location":"tutorials/M5Stack/docs/en/app/lidarbot/#program-analysis","text":"","title":"Program analysis:"},{"location":"tutorials/M5Stack/docs/en/app/lidarbot/#1-main-program-of-lidarbot","text":"/* Main program */ void loop() { espnow.BotConnectUpdate();// ESPNOW reconnect lidarcar.MapDisplay();// display map esp_now_send(espnow.peer_addr, lidarcar.mapdata, 180);// ESPNOW sends map data } Single function resolution: Usage of reading radar data ```arduino #include \"lidarcar.h\" LidarCar lidarcar; lidarcar.Init(); GetData();//save radar data to array distance[] ``` Usage of line following ```arduino #include \"rprtrack.h\" Rprtrack rprtrack; SensorStatus();// save line following data to array sensorValue[] CalTrackDev();// handle array sensorValue[], get car offset and save it ``` Usage of ESP_NOW Please refer to https://github.com/m5stack/M5-espnow","title":"1. Main program of LidarBot:"},{"location":"tutorials/M5Stack/docs/en/app/lidarbot/#2-program-of-remotecontroller","text":"/* Main program */ void loop() { espnow.RemoteConnectUpdate();// ESPNOW reconnect keyboard.GetValue();// read data of joystick // ESPNOW sends joystick data to car esp_now_send(espnow.peer_addr, keyboard.keyData, 3); MapDisplay();// display map accessport.AnalzyCommand();// send map data to PC software } Single function resolution: Usage of JOYSTICK ```arduino #include \"keyboard.h\" KeyBoard keyboard; keyboard.Init(); // get joystick data and save to adX, adY GetValue(); ``` Usage of communication with PC software ```arduino #include \"accessport.h\" AccessPort accessport; accessport.AnalzyCommand();// send map data to PC software ```","title":"2. Program of RemoteController"},{"location":"tutorials/M5Stack/docs/en/app/lidarbot/#related-video","text":"LidarBOT Case","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/app/piano/","text":"PIANO {docsify-ignore-all} :memo: Description :electric_plug: PinMap \ud83d\uded2 Purchase Description PIANO is a piano application. After Downloaded example to M5Core, and PIANO was attatched to M5Core bottom , you can play this PIANO immediately. The touch sensor ( TS20 ) built in PIANO communicates with M5Core through IIC. There are two TS20 built in PIANO and their IIC addresses are 0x6A and 0x7A. PIANO needs access to the base of the M5Core as shown below. Example https://github.com/m5stack/M5-ProductExampleCodes/blob/master/App/PIANO/Arduino/M5PIANO/M5PIANO.ino PinMap Touch Sensor (TS20) LED ESP32 Chip GPIO7 GPIO6 GPIO5 GPIO26 GPIO2 TS20 RESET EN SCL SDA RGB LED Signal Pin","title":"PIANO {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/app/piano/#piano-docsify-ignore-all","text":":memo: Description :electric_plug: PinMap \ud83d\uded2 Purchase","title":"PIANO {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/app/piano/#description","text":"PIANO is a piano application. After Downloaded example to M5Core, and PIANO was attatched to M5Core bottom , you can play this PIANO immediately. The touch sensor ( TS20 ) built in PIANO communicates with M5Core through IIC. There are two TS20 built in PIANO and their IIC addresses are 0x6A and 0x7A. PIANO needs access to the base of the M5Core as shown below.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/app/piano/#example","text":"https://github.com/m5stack/M5-ProductExampleCodes/blob/master/App/PIANO/Arduino/M5PIANO/M5PIANO.ino","title":"Example"},{"location":"tutorials/M5Stack/docs/en/app/piano/#pinmap","text":"Touch Sensor (TS20) LED ESP32 Chip GPIO7 GPIO6 GPIO5 GPIO26 GPIO2 TS20 RESET EN SCL SDA RGB LED Signal Pin","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/base/btc_base/","text":"Base BTC {docsify-ignore-all} :memo: Description :octocat: Example \ud83d\uded2 Purchase Description BTC is a M5 base that allows you sit your M5 core instead of laying them down or hang on the wall. BTC is not just a sit for holding the M5 core but also comes with serveral features like temperature and humiluty detection(by DHT12), and charging base. Note: Although M5Core BASIC or GRAY can be attached to this base, but BTC can not charge them. Actually, our Cores, as we know, are built in chargin chip (IP5306). After plugged a USB cable in, the Core was charging without any charger. Once M5Core has been attached to BTC, it can not controll ENV Unit at this time. Because BTC has been built in DHT12 sensor which will cause IIC address conflict. Product Features DHT12 inside Include Type-C USB Cable M3 x 16 Tools PinMap DHT12 ESP32 Chip GPIO22 GND GPIO21 3V3 DHT12 SCL GND SDA 3V3 Related Link Offical Video Forum Example Arduino IDE To get the code BTC.ino , please click here . #include M5Stack.h #include DHT12.h #include Wire.h //The DHT12 uses I2C comunication. void setup() { M5.begin(); Wire.begin(); M5.Lcd.setBrightness(10); Serial.println(F( ENV Unit(DHT12 and BMP280) test... )); } void loop() { float tmp = dht12.readTemperature(); float hum = dht12.readHumidity(); Serial.printf( Temperatura: %2.2f*C Humedad: %0.2f%%\\r\\n , tmp, hum); M5.Lcd.setCursor(0, 0); M5.Lcd.setTextColor(WHITE, BLACK); M5.Lcd.setTextSize(3); M5.Lcd.printf( Temp: %2.1f \\r\\nHumi: %2.0f%% \\r\\n , tmp, hum); delay(100); }","title":"Base BTC {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/base/btc_base/#base-btc-docsify-ignore-all","text":":memo: Description :octocat: Example \ud83d\uded2 Purchase","title":"Base BTC {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/base/btc_base/#description","text":"BTC is a M5 base that allows you sit your M5 core instead of laying them down or hang on the wall. BTC is not just a sit for holding the M5 core but also comes with serveral features like temperature and humiluty detection(by DHT12), and charging base. Note: Although M5Core BASIC or GRAY can be attached to this base, but BTC can not charge them. Actually, our Cores, as we know, are built in chargin chip (IP5306). After plugged a USB cable in, the Core was charging without any charger. Once M5Core has been attached to BTC, it can not controll ENV Unit at this time. Because BTC has been built in DHT12 sensor which will cause IIC address conflict.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/base/btc_base/#product-features","text":"DHT12 inside","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/base/btc_base/#include","text":"Type-C USB Cable M3 x 16 Tools","title":"Include"},{"location":"tutorials/M5Stack/docs/en/base/btc_base/#pinmap","text":"DHT12 ESP32 Chip GPIO22 GND GPIO21 3V3 DHT12 SCL GND SDA 3V3","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/base/btc_base/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/base/btc_base/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/base/btc_base/#arduino-ide","text":"To get the code BTC.ino , please click here . #include M5Stack.h #include DHT12.h #include Wire.h //The DHT12 uses I2C comunication. void setup() { M5.begin(); Wire.begin(); M5.Lcd.setBrightness(10); Serial.println(F( ENV Unit(DHT12 and BMP280) test... )); } void loop() { float tmp = dht12.readTemperature(); float hum = dht12.readHumidity(); Serial.printf( Temperatura: %2.2f*C Humedad: %0.2f%%\\r\\n , tmp, hum); M5.Lcd.setCursor(0, 0); M5.Lcd.setTextColor(WHITE, BLACK); M5.Lcd.setTextSize(3); M5.Lcd.printf( Temp: %2.1f \\r\\nHumi: %2.0f%% \\r\\n , tmp, hum); delay(100); }","title":"Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/base/core_bottom/","text":"CORE BOTTOM {docsify-ignore-all} :memo: Description \ud83d\uded2 Purchase Description Core BOTTOM is the bottom part of M5Core like M5Basic and M5 GRAY, with M-BUS socket and extend pins on the side, also include a Lipo battery . If you want to buy these bottoms separately, you can get it from here. M-Bus","title":"CORE BOTTOM {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/base/core_bottom/#core-bottom-docsify-ignore-all","text":":memo: Description \ud83d\uded2 Purchase","title":"CORE BOTTOM {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/base/core_bottom/#description","text":"Core BOTTOM is the bottom part of M5Core like M5Basic and M5 GRAY, with M-BUS socket and extend pins on the side, also include a Lipo battery . If you want to buy these bottoms separately, you can get it from here. M-Bus","title":"Description"},{"location":"tutorials/M5Stack/docs/en/base/face_base/","text":"FACE Base {docsify-ignore-all} Description FACE Base is a base of FACES Kit . It's composed of M5Core base and battery as shown below. There are some expanding gpio(see the last picture) of M-Bus at the back of FACES Base, in order for you make a complex project conveniently. Obsolutely, a battery(600mAh) is built in base, so that you can use FACES Kit without usb cable. Usage Please stack M5Core and FACES Keyboard( i.e. QWERTY, GameBoy, Calculator ) over Base when use it as shown below Related Link Purchase FACES Kit M-Bus","title":"FACE Base {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/base/face_base/#face-base-docsify-ignore-all","text":"","title":"FACE Base {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/base/face_base/#description","text":"FACE Base is a base of FACES Kit . It's composed of M5Core base and battery as shown below. There are some expanding gpio(see the last picture) of M-Bus at the back of FACES Base, in order for you make a complex project conveniently. Obsolutely, a battery(600mAh) is built in base, so that you can use FACES Kit without usb cable.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/base/face_base/#usage","text":"Please stack M5Core and FACES Keyboard( i.e. QWERTY, GameBoy, Calculator ) over Base when use it as shown below","title":"Usage"},{"location":"tutorials/M5Stack/docs/en/base/face_base/#related-link","text":"Purchase FACES Kit","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/base/face_base/#m-bus","text":"","title":"M-Bus"},{"location":"tutorials/M5Stack/docs/en/base/lan_base/","text":"Base LAN {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description Although M5 core is ESP32-based, having Wi-Fi and Bluetooth intergrated, it doesn't stop you enable the Ethernet function. This LAN is a M5 Base that having a W5500 chip, which is a Hardwired TCP/IP embedded Ethernet controller that provides easier Internet connection to embedded systems. This Base is speciffically design for industrial application scenarioes, comes with couple of HT3.96 connectors, 485(?) metal rail and magnet discs for easy installation and fixation. The 6 pin of HT3.96 connector are dangling, you can wired them up with the M-BUS and other circult as you like. The figure below shows the inner of LAN If you need to add RS485 interface, soldering the RS485 board onto the mian board pin correspondingly. TTL-to-RS485 adapter board and LAN base The figure below tells you how the TTL-to-RS485 adapter board connected onto LAN backplane The serial port pins on the RS485 board will be connected to the GPIO16 and GPIO17 of the LAN backplane. PinMap W5500 W5500 ESP32 Chip MOSI GPIO23 MISO GPIO19 CLK GPIO18 CS GPIO26 RST GPIO13 INTn GPIO34 M-Bus Product Features Input Supply Voltage: 9-24V HT3.96 port for supporting RS485 Support RS485 communication Easy to fixed on the wall Include 1x LAN Base 1x TTL-to-RS485 adapter board 1x pin header 20pin 1x metal rails and magnet discs 3x HT3.96 terminal 2x 3pin 1x 4pin 10x cold crimp terminal 3x Allen wrench - 1x 1.5mm - 1x 2mm - 1x 2.5mm 2x hexagon socket head cap screws M3x28 4x hexagon socket tapping screw KA2x4 1x countersunk head screw M3x8 Application M5Core + LAN implementing a conveyor controller PC transmits video to Core via cable Related Link Offical Video Forum Datasheet - W5500 Schematic Related Video LAN Case - The PC uses the UDP protocol to transmit video to the Core via the LAN cradle","title":"Base LAN {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/base/lan_base/#base-lan-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"Base LAN {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/base/lan_base/#description","text":"Although M5 core is ESP32-based, having Wi-Fi and Bluetooth intergrated, it doesn't stop you enable the Ethernet function. This LAN is a M5 Base that having a W5500 chip, which is a Hardwired TCP/IP embedded Ethernet controller that provides easier Internet connection to embedded systems. This Base is speciffically design for industrial application scenarioes, comes with couple of HT3.96 connectors, 485(?) metal rail and magnet discs for easy installation and fixation. The 6 pin of HT3.96 connector are dangling, you can wired them up with the M-BUS and other circult as you like. The figure below shows the inner of LAN If you need to add RS485 interface, soldering the RS485 board onto the mian board pin correspondingly. TTL-to-RS485 adapter board and LAN base The figure below tells you how the TTL-to-RS485 adapter board connected onto LAN backplane The serial port pins on the RS485 board will be connected to the GPIO16 and GPIO17 of the LAN backplane.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/base/lan_base/#pinmap","text":"W5500 W5500 ESP32 Chip MOSI GPIO23 MISO GPIO19 CLK GPIO18 CS GPIO26 RST GPIO13 INTn GPIO34 M-Bus","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/base/lan_base/#product-features","text":"Input Supply Voltage: 9-24V HT3.96 port for supporting RS485 Support RS485 communication Easy to fixed on the wall","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/base/lan_base/#include","text":"1x LAN Base 1x TTL-to-RS485 adapter board 1x pin header 20pin 1x metal rails and magnet discs 3x HT3.96 terminal 2x 3pin 1x 4pin 10x cold crimp terminal 3x Allen wrench - 1x 1.5mm - 1x 2mm - 1x 2.5mm 2x hexagon socket head cap screws M3x28 4x hexagon socket tapping screw KA2x4 1x countersunk head screw M3x8","title":"Include"},{"location":"tutorials/M5Stack/docs/en/base/lan_base/#application","text":"M5Core + LAN implementing a conveyor controller PC transmits video to Core via cable","title":"Application"},{"location":"tutorials/M5Stack/docs/en/base/lan_base/#related-link","text":"Offical Video Forum Datasheet - W5500","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/base/lan_base/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/base/lan_base/#related-video","text":"LAN Case - The PC uses the UDP protocol to transmit video to the Core via the LAN cradle","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/base/m5go_bottom/","text":"Base M5GO BOTTOM {docsify-ignore-all} :memo: Description :electric_plug: Schematic \ud83d\uded2 Purchase Description M5GO BOTTOM is apparently the bottom part of M5GO which is a upgrade of basic bottoms, with a larger battery, LOGO-compatilble holes, MICPHONE, LED Bar , two more GROVE PORT\uff0cand more. M5GO BOTTOM is the same Bottom of M5GO Lite , M5GO IoT Kit and M5Fire . PinMap POGO Pin POGO Pin ESP32 Chip SCL GPIO22 SDA GPIO21 LED Bar There are 10 RGB Leds built in M5GO Base LED Pin ESP32 Chip LED Pin GPIO15 MIC MIC Pin ESP32 Chip MIC Pin GPIO34 GROVE PORT B(I/O) ESP32 Chip G36 GPIO36 G26 GPIO26 5V 5V GND GND PORT C(UART2) ESP32 Chip RXD GPIO16 TXD GPIO17 5V 5V GND GND M-Bus Related Link M5GO IOT Starter Kit Purchase Schematic","title":"Base M5GO BOTTOM {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/base/m5go_bottom/#base-m5go-bottom-docsify-ignore-all","text":":memo: Description :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Base M5GO BOTTOM {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/base/m5go_bottom/#description","text":"M5GO BOTTOM is apparently the bottom part of M5GO which is a upgrade of basic bottoms, with a larger battery, LOGO-compatilble holes, MICPHONE, LED Bar , two more GROVE PORT\uff0cand more. M5GO BOTTOM is the same Bottom of M5GO Lite , M5GO IoT Kit and M5Fire .","title":"Description"},{"location":"tutorials/M5Stack/docs/en/base/m5go_bottom/#pinmap","text":"POGO Pin POGO Pin ESP32 Chip SCL GPIO22 SDA GPIO21 LED Bar There are 10 RGB Leds built in M5GO Base LED Pin ESP32 Chip LED Pin GPIO15 MIC MIC Pin ESP32 Chip MIC Pin GPIO34 GROVE PORT B(I/O) ESP32 Chip G36 GPIO36 G26 GPIO26 5V 5V GND GND PORT C(UART2) ESP32 Chip RXD GPIO16 TXD GPIO17 5V 5V GND GND M-Bus","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/base/m5go_bottom/#related-link","text":"M5GO IOT Starter Kit Purchase","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/base/m5go_bottom/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/base/m5go_charger/","text":"Base M5GO Charger {docsify-ignore-all} :memo: Description \ud83d\uded2 Purchase Description M5GO CHARGER is a charger base for M5GO Lite kit and M5GO IOT Kit and FIRE . The charging indicator light will blink when base is charging, but the light will keep on when charge completed. Include 1x M5GO CHARGER Type-C USB cable Related Link M5GO IOT Starter Kit Purchase Link","title":"Base M5GO Charger {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/base/m5go_charger/#base-m5go-charger-docsify-ignore-all","text":":memo: Description \ud83d\uded2 Purchase","title":"Base M5GO Charger {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/base/m5go_charger/#description","text":"M5GO CHARGER is a charger base for M5GO Lite kit and M5GO IOT Kit and FIRE . The charging indicator light will blink when base is charging, but the light will keep on when charge completed.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/base/m5go_charger/#include","text":"1x M5GO CHARGER Type-C USB cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/base/m5go_charger/#related-link","text":"M5GO IOT Starter Kit Purchase Link","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/base/m5go_rfid/","text":"Base M5GO RFID {docsify-ignore-all} :memo: Description :electric_plug: PinMap \ud83d\uded2 Purchase Description M5GO RFID is a upgraded version base of M5GO BOTTOM . Comparing to the normal version ( M5GO Bottom ), M5GO RFID owns RFID function and IR transmitter , miss maget . And it's battery capacity is only 330 mAh . M5GO Base is composed of battery(330mAh), M-Bus interface, charging indicator(red led), RFID coil , IR transmitter , two RGB Bar, PORT B and PORT C. PinMap POGO Pin POGO Pin ESP32 Chip SCL GPIO22 SDA GPIO21 LED Bar There are 10 RGB Leds built in M5GO Base LED Pin ESP32 Chip LED Pin GPIO15 MIC MIC Pin ESP32 Chip MIC Pin GPIO34 GROVE PORT B(I/O) ESP32 Chip G36 GPIO36 G26 GPIO26 5V 5V GND GND PORT C(UART2) ESP32 Chip RXD GPIO16 TXD GPIO17 5V 5V GND GND IR transmitter IR Transmitter ESP32 Chip IR Transmitter GPIO13 M-Bus Related Link M5GO IOT Starter Kit Purchase Link","title":"Base M5GO RFID {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/base/m5go_rfid/#base-m5go-rfid-docsify-ignore-all","text":":memo: Description :electric_plug: PinMap \ud83d\uded2 Purchase","title":"Base M5GO RFID {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/base/m5go_rfid/#description","text":"M5GO RFID is a upgraded version base of M5GO BOTTOM . Comparing to the normal version ( M5GO Bottom ), M5GO RFID owns RFID function and IR transmitter , miss maget . And it's battery capacity is only 330 mAh . M5GO Base is composed of battery(330mAh), M-Bus interface, charging indicator(red led), RFID coil , IR transmitter , two RGB Bar, PORT B and PORT C.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/base/m5go_rfid/#pinmap","text":"POGO Pin POGO Pin ESP32 Chip SCL GPIO22 SDA GPIO21 LED Bar There are 10 RGB Leds built in M5GO Base LED Pin ESP32 Chip LED Pin GPIO15 MIC MIC Pin ESP32 Chip MIC Pin GPIO34 GROVE PORT B(I/O) ESP32 Chip G36 GPIO36 G26 GPIO26 5V 5V GND GND PORT C(UART2) ESP32 Chip RXD GPIO16 TXD GPIO17 5V 5V GND GND IR transmitter IR Transmitter ESP32 Chip IR Transmitter GPIO13 M-Bus","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/base/m5go_rfid/#related-link","text":"M5GO IOT Starter Kit Purchase Link","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/base/node_base/","text":"Base Node {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description Node , like its namesake, is a smart node with full-featured functions in a IoT application scenarios. It can be program as a intelligent speaker like Echo. Node provides more hardware resources: built-in high-fidelity audio codec chip\uff0cMIC, DHT12, IR emitter ... ESP32 provides an Audio Develope Platform called ESP-ADF. ESP-ADF supports development of audio applications for the Espressif Systems ESP32 chip in the most comprehensive way. With ESP-ADF, you can easily add features, develop audio applications from simple to complex: Music player or recorder supports audio formats such as MP3, AAC, FLAC, WAV, OGG, AMR, TS, EQ, Downmixer, Sonic, G.711, SPEEX ... Play music from sources: HTTP, HLS(HTTP Live Streaming), SPIFFS, SDCARD, A2DP-Source, A2DP-Sink, HFP ... Integrate Media services such as: DLNA, WeChat ... Internet Radio Voice recognition and integration with online services such as Alexa, DuerOS, and more. Product Feature 1x 12 RGBs 1x temperature humidity sensor(DHT12),which can display its own status and perception surrounding environment. 4x IR Transmitter LEDs at four corners and 2x IR Receivers 2x MIC 1x HiFi stereo codec chip ( Up to 24bit DAC ) 1x 500mAh lithium battery PinMap ESP32 GPIO0 GPIO13 GPIO5 GPIO2 ( MOSI ) GPIO34 ( MISO ) GPIO21 GPIO22 GPIO25 Codec Chip ( WM8978 ) I2S_CLK ( MCLK ) I2S_WS ( LRC ) I2S_BCK ( BCK ) I2S_IN ( DACDAT ) I2S_OUT ( ADCDAT ) I2C_SDA ( SDIN ) I2C_SCL ( SCLK ) L_OUT1 ( LOUT1 ) ESP32 GPIO15 GPIO35 GPIO12 GPIO21 GPIO22 RGBLed(SK6812) Signal Pin IR IR_Receive IR_Send DHT12 I2C_SDA I2C_SCL Include 1x Node Module Wall holder 4x screws 4x Type-C USB Cable Applications Intelligent IOT node Webradio Intelligent sound box Related Link Offical Video Forum Datasheet - WM8978 Example Voice control RGB light circle ( Chinese ) Related Video NODE Case - Voice Recognition","title":"Base Node {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/base/node_base/#base-node-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"Base Node {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/base/node_base/#description","text":"Node , like its namesake, is a smart node with full-featured functions in a IoT application scenarios. It can be program as a intelligent speaker like Echo. Node provides more hardware resources: built-in high-fidelity audio codec chip\uff0cMIC, DHT12, IR emitter ... ESP32 provides an Audio Develope Platform called ESP-ADF. ESP-ADF supports development of audio applications for the Espressif Systems ESP32 chip in the most comprehensive way. With ESP-ADF, you can easily add features, develop audio applications from simple to complex: Music player or recorder supports audio formats such as MP3, AAC, FLAC, WAV, OGG, AMR, TS, EQ, Downmixer, Sonic, G.711, SPEEX ... Play music from sources: HTTP, HLS(HTTP Live Streaming), SPIFFS, SDCARD, A2DP-Source, A2DP-Sink, HFP ... Integrate Media services such as: DLNA, WeChat ... Internet Radio Voice recognition and integration with online services such as Alexa, DuerOS, and more.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/base/node_base/#product-feature","text":"1x 12 RGBs 1x temperature humidity sensor(DHT12),which can display its own status and perception surrounding environment. 4x IR Transmitter LEDs at four corners and 2x IR Receivers 2x MIC 1x HiFi stereo codec chip ( Up to 24bit DAC ) 1x 500mAh lithium battery","title":"Product Feature"},{"location":"tutorials/M5Stack/docs/en/base/node_base/#pinmap","text":"ESP32 GPIO0 GPIO13 GPIO5 GPIO2 ( MOSI ) GPIO34 ( MISO ) GPIO21 GPIO22 GPIO25 Codec Chip ( WM8978 ) I2S_CLK ( MCLK ) I2S_WS ( LRC ) I2S_BCK ( BCK ) I2S_IN ( DACDAT ) I2S_OUT ( ADCDAT ) I2C_SDA ( SDIN ) I2C_SCL ( SCLK ) L_OUT1 ( LOUT1 ) ESP32 GPIO15 GPIO35 GPIO12 GPIO21 GPIO22 RGBLed(SK6812) Signal Pin IR IR_Receive IR_Send DHT12 I2C_SDA I2C_SCL","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/base/node_base/#include","text":"1x Node Module Wall holder 4x screws 4x Type-C USB Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/base/node_base/#applications","text":"Intelligent IOT node Webradio Intelligent sound box","title":"Applications"},{"location":"tutorials/M5Stack/docs/en/base/node_base/#related-link","text":"Offical Video Forum Datasheet - WM8978","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/base/node_base/#example","text":"Voice control RGB light circle ( Chinese )","title":"Example"},{"location":"tutorials/M5Stack/docs/en/base/node_base/#related-video","text":"NODE Case - Voice Recognition","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/base/plc_base/","text":"Base PLC {docsify-ignore-all} :memo: Description :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description PLC is a Base specifically design for industrial application. DC Power in 9-24V. Does this PLC remind you of the 'PLC' in industrial controll short for 'Programmable Logic Controller'. This PLC base is not the typical 'PLC' used in programmable controller, but its does able to implement the most common controller in industrial field. Based on the current M5 development system, you can add as many Realys as you want, you can enable the TTL-RS485 communication, you can layout your customized circult on the protoboard. you also can make it an LoRa node by stacking a LoRa module etc. This base gives you unlimited number of combinations, it is powerful, flexiable, and covered with industrial-grade case. If you're happen to working in an industrial field, We especially recommend this PLC base to you which will surely give you the best and the most fast way to resolve your requirement. The current sensor (ACS712TELC-05B) is also integrated on the RS485 adapter board for current monitoring. If you need to add RS485 interface, soldering the RS485 board onto the mian board pin correspondingly. The serial port pins on the RS485 board will be connected to the GPIO16 and GPIO17 of the LAN backplane. Feature Support 9-24V voltage input Individual package weight: 0.1kg Package size: 5cm * 5cm * 5cm (1.97in * 1.97in * 1.97in) Include 1x PLC-Proto Broad 1x RS485 module 1x PLC Plastic Enclosure 1x Slide Guide 1x Magnet 1x 6 Pin 3.96 Pitch Terminal 1x 4 Pin 3.96 Pitch Terminal 3x hexagonal wrench 7x Screw (Three models: M2x4, M3x6, M3x18) 1x Sticker Related Link Offical Video Forum Schematic Related Video RS485 Communication","title":"Base PLC {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/base/plc_base/#base-plc-docsify-ignore-all","text":":memo: Description :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"Base PLC {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/base/plc_base/#description","text":"PLC is a Base specifically design for industrial application. DC Power in 9-24V. Does this PLC remind you of the 'PLC' in industrial controll short for 'Programmable Logic Controller'. This PLC base is not the typical 'PLC' used in programmable controller, but its does able to implement the most common controller in industrial field. Based on the current M5 development system, you can add as many Realys as you want, you can enable the TTL-RS485 communication, you can layout your customized circult on the protoboard. you also can make it an LoRa node by stacking a LoRa module etc. This base gives you unlimited number of combinations, it is powerful, flexiable, and covered with industrial-grade case. If you're happen to working in an industrial field, We especially recommend this PLC base to you which will surely give you the best and the most fast way to resolve your requirement. The current sensor (ACS712TELC-05B) is also integrated on the RS485 adapter board for current monitoring. If you need to add RS485 interface, soldering the RS485 board onto the mian board pin correspondingly. The serial port pins on the RS485 board will be connected to the GPIO16 and GPIO17 of the LAN backplane.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/base/plc_base/#feature","text":"Support 9-24V voltage input Individual package weight: 0.1kg Package size: 5cm * 5cm * 5cm (1.97in * 1.97in * 1.97in)","title":"Feature"},{"location":"tutorials/M5Stack/docs/en/base/plc_base/#include","text":"1x PLC-Proto Broad 1x RS485 module 1x PLC Plastic Enclosure 1x Slide Guide 1x Magnet 1x 6 Pin 3.96 Pitch Terminal 1x 4 Pin 3.96 Pitch Terminal 3x hexagonal wrench 7x Screw (Three models: M2x4, M3x6, M3x18) 1x Sticker","title":"Include"},{"location":"tutorials/M5Stack/docs/en/base/plc_base/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/base/plc_base/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/base/plc_base/#related-video","text":"RS485 Communication","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/core/basic/","text":"BASIC {docsify-ignore-all} :memo: Description :bulb: Quick Start :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description M5Stack BASIC Kit , like its namesake, is a starter kit among the M5Stack development kit series. Its modular, stackable, scalable, and portable device is powered with an ESP-32 core, which makes it open source, low cost, full-function, and easy for developers to handle new product development on all stages include circuit design, PCB design, software, mold design and production. This Basic kit provides a friendly price and full-featured resources which makes it a good starter kit for you to explore IoT. Ever wanted to explore the fastest way of IoT prototyping, M5Stack development board is the perfect solution. Not like others, M5Stack development board is highly productlized, covered with industrial grade case, and ESP32-based development board. ESP32 is a hybid Wi-Fi Bluetooth chip contains a dual-core and 4MB of SPI Flash . Together with 30+ M5Stack stackable modules , 40+ extendable units , and different levels of program language, you can create and verify your IoT product in a very short time. Supported development platforms and program languages: Arduino, Blockly language with UIFlow , Micropython . Regardless of what level program skill you have, M5Stack would guide you in every step of the way to realize your idea as well as to the final productilization. If you ever played with ESP8266, you would realize that ESP32 is a perfect upgrade from ESP8266. In comparison, ESP32 is full-feathered with more GPIO, plenty of analog inputs and two analog outputs, multiple extra perpherials( like a spare UART ). Official development platform ESP-IDF have planted with FreeRTOS. With dual-core and real time OS you can get more organized code and much high speed processor. M5Stack Basic is consist with two separable parts. the upside part has all kinds of processor, chips and some other slot components. The bottom part has a lithium battery, M-BUS socket and extendable pins on both sides. Notice: 1)Basic kit have no IMU sensor inside 2)GPIO0, GPIO12, GPIO13, GPIO15, GPIO34, pins that related to I2S are not extended out 3)GPIO34-39 are input-only Product Features 5V DC power supply USB Type-C ESP32-based 4 MByte flash Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Program Platform: UIFlow , MicroPython , Arduino ESP32 Features 240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support Peripherals Pin Map LCD TF Card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND Parameter Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 4MB Power Input 5V @ 500mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 150mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 12.5 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits of M5 For details click here \u3002 Download chart click here \u3002 Kit includes 1x M5Stack BASIC Controller 1x Basic Base 8x Dupont Type-C USB cable User Manual Related Link Datasheet - ESP32 - IP5306 Related Video M5Stack Instroduce M5Core Cases","title":"BASIC {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/core/basic/#basic-docsify-ignore-all","text":":memo: Description :bulb: Quick Start :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"BASIC {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/core/basic/#description","text":"M5Stack BASIC Kit , like its namesake, is a starter kit among the M5Stack development kit series. Its modular, stackable, scalable, and portable device is powered with an ESP-32 core, which makes it open source, low cost, full-function, and easy for developers to handle new product development on all stages include circuit design, PCB design, software, mold design and production. This Basic kit provides a friendly price and full-featured resources which makes it a good starter kit for you to explore IoT. Ever wanted to explore the fastest way of IoT prototyping, M5Stack development board is the perfect solution. Not like others, M5Stack development board is highly productlized, covered with industrial grade case, and ESP32-based development board. ESP32 is a hybid Wi-Fi Bluetooth chip contains a dual-core and 4MB of SPI Flash . Together with 30+ M5Stack stackable modules , 40+ extendable units , and different levels of program language, you can create and verify your IoT product in a very short time. Supported development platforms and program languages: Arduino, Blockly language with UIFlow , Micropython . Regardless of what level program skill you have, M5Stack would guide you in every step of the way to realize your idea as well as to the final productilization. If you ever played with ESP8266, you would realize that ESP32 is a perfect upgrade from ESP8266. In comparison, ESP32 is full-feathered with more GPIO, plenty of analog inputs and two analog outputs, multiple extra perpherials( like a spare UART ). Official development platform ESP-IDF have planted with FreeRTOS. With dual-core and real time OS you can get more organized code and much high speed processor. M5Stack Basic is consist with two separable parts. the upside part has all kinds of processor, chips and some other slot components. The bottom part has a lithium battery, M-BUS socket and extendable pins on both sides. Notice: 1)Basic kit have no IMU sensor inside 2)GPIO0, GPIO12, GPIO13, GPIO15, GPIO34, pins that related to I2S are not extended out 3)GPIO34-39 are input-only","title":"Description"},{"location":"tutorials/M5Stack/docs/en/core/basic/#product-features","text":"5V DC power supply USB Type-C ESP32-based 4 MByte flash Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Program Platform: UIFlow , MicroPython , Arduino","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/core/basic/#esp32-features","text":"240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support","title":"ESP32 Features"},{"location":"tutorials/M5Stack/docs/en/core/basic/#peripherals-pin-map","text":"LCD TF Card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND","title":"Peripherals Pin Map"},{"location":"tutorials/M5Stack/docs/en/core/basic/#parameter","text":"Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 4MB Power Input 5V @ 500mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 150mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 12.5 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits of M5 For details click here \u3002 Download chart click here \u3002","title":"Parameter"},{"location":"tutorials/M5Stack/docs/en/core/basic/#kit-includes","text":"1x M5Stack BASIC Controller 1x Basic Base 8x Dupont Type-C USB cable User Manual","title":"Kit includes"},{"location":"tutorials/M5Stack/docs/en/core/basic/#related-link","text":"Datasheet - ESP32 - IP5306","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/core/basic/#related-video","text":"M5Stack Instroduce M5Core Cases","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/core/face_kit/","text":"FACES Kit {docsify-ignore-all} GameBoy Keyboard Calculator Keyboard QWERTY Keyboard FACES Charger Related Link FACES Kit is a feast of functional panels, contains the most commonly used panels and keyboards with MEGA328 processor inside, communication protocol through IIC(0x08) as slave mode. With these 3 different panels, it will be very easy to support keyboard interaction with your M5Core. If you up for some classic video game, GameBoy panel plus M5Core is the perfect combination. All you need to do is upload an game simulator onto M5 controller, and attach the GameBoy panel underneath. this is how it looks: Download a gameboy game: https://docs.m5stack.com/#/en/quick_start/faces/gameboy_burn_a_nes_game The other two panels are Calculator Keyboard and QWERTY Keyboard. QWERTY Keyboard Other than 3 functional panels, this development kit comes with more stuff like a charger table with Mangent and POGO pin connector. For more information on M5Stack series development board, please check the Gray Kit Product Features 5V DC power supply USB Type-C ESP32-based 4 MByte PSRAM MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino Include 1x GRAY M5Stack Controller(M5Core) 1x FACES Charger table 1x FACES sling 1x panel sticker 3x FACES Keyboard(GameBoy, Calculator, QWERTY) 10x Femal-male dupont 6x M3x10 screw 1x hexagon screw key Download the factory test code (Win) Go to M5stack and download M5Burner. Connect FACES to PC thru Type-C. Find FACES Kit firmware and click Burn Related Link Datasheet - ESP32 - MPU9250 Register Manual - IP5306 M5Core Schematic Example Panel Firmware Purchase NOTE The Gray version core is configured in the FACES Kit, and our Core has several versions. Similarly, other versions of Core can be stacked on the base of the FACES. The following picture is a comparison of their main differences, which is convenient for you to use. If you want to view the detailed defference with them, please click here . If you want to download the detailed defference with them, please click here .","title":"FACES Kit {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/core/face_kit/#faces-kit-docsify-ignore-all","text":"GameBoy Keyboard Calculator Keyboard QWERTY Keyboard FACES Charger Related Link FACES Kit is a feast of functional panels, contains the most commonly used panels and keyboards with MEGA328 processor inside, communication protocol through IIC(0x08) as slave mode. With these 3 different panels, it will be very easy to support keyboard interaction with your M5Core. If you up for some classic video game, GameBoy panel plus M5Core is the perfect combination. All you need to do is upload an game simulator onto M5 controller, and attach the GameBoy panel underneath. this is how it looks: Download a gameboy game: https://docs.m5stack.com/#/en/quick_start/faces/gameboy_burn_a_nes_game The other two panels are Calculator Keyboard and QWERTY Keyboard.","title":"FACES Kit {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/core/face_kit/#qwerty-keyboard","text":"Other than 3 functional panels, this development kit comes with more stuff like a charger table with Mangent and POGO pin connector. For more information on M5Stack series development board, please check the Gray Kit","title":"QWERTY Keyboard"},{"location":"tutorials/M5Stack/docs/en/core/face_kit/#product-features","text":"5V DC power supply USB Type-C ESP32-based 4 MByte PSRAM MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/core/face_kit/#include","text":"1x GRAY M5Stack Controller(M5Core) 1x FACES Charger table 1x FACES sling 1x panel sticker 3x FACES Keyboard(GameBoy, Calculator, QWERTY) 10x Femal-male dupont 6x M3x10 screw 1x hexagon screw key","title":"Include"},{"location":"tutorials/M5Stack/docs/en/core/face_kit/#download-the-factory-test-code-win","text":"Go to M5stack and download M5Burner. Connect FACES to PC thru Type-C. Find FACES Kit firmware and click Burn","title":"Download the factory test code (Win)"},{"location":"tutorials/M5Stack/docs/en/core/face_kit/#related-link","text":"Datasheet - ESP32 - MPU9250 Register Manual - IP5306 M5Core Schematic Example Panel Firmware Purchase","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/core/face_kit/#note","text":"The Gray version core is configured in the FACES Kit, and our Core has several versions. Similarly, other versions of Core can be stacked on the base of the FACES. The following picture is a comparison of their main differences, which is convenient for you to use. If you want to view the detailed defference with them, please click here . If you want to download the detailed defference with them, please click here .","title":"NOTE"},{"location":"tutorials/M5Stack/docs/en/core/fire/","text":"FIRE {docsify-ignore-all} :memo: Description :bulb: Quick Start :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description M5Stack FIRE Kit is a upgrade from the Gray kits,except the 9-Axis IMU sensor. It provides more hardware resources : 16M Flash + 4M PSRAM , enhanced Base (M5GO Base and M5GO CHG Base), larger battery, etc. With a IMU posture sensor, you can include posture detection in your work : accelerated speed, angulation, and trajectory deection. You can make relative products like sports data collector, 3D remote gesture controller and more. FIRE is M5 Core device. Its modular, stackable, scalable, and portable device is powered with an ESP-32 core, which makes it open source, low cost, full-function, and easy for developers to handle new product development on all stages include circuit design, PCB design, software, mold design and production. M5Stack Fire comes with three separable parts. The top part ,just like Basic and Gray Kit, has all kinds of processors, chips ,scokets, 2.4G antenna etc, such as ESP32, power management IC , a LCD screen and some other interface components. The middle part is called M5GO base provides a lithium battery, M-BUS socket , LED bar and two more GROVE Port. The bottom part is a charge table,can be connect to the M5GO base via POGO pins. Ever wanted to explore the fastest way of IoT prototyping, M5Stack development board is the perfect solution. Not like others, M5Stack development board is highly productlized, covered with industrial grade case, and ESP32-based development board. ESP32 is a hybid Wi-Fi Bluetooth chip contains a dual-core and 4MB of SPI Flash . Together with 30+ M5Stack stackable modules , 40+ extendable units , and different levels of program language, you can create and verify your IoT product in a very short time. Supported development platforms and program languages: Arduino, Blockly language with UIFlow , Micropython . Regardless of what level program skill you have, M5Stack would guide you in every step of the way to realize your idea as well as to the final productilization. If you ever played with ESP8266, you would realize that ESP32 is a perfect upgrade from ESP8266. In comparison, ESP32 is full-feathered with more GPIO, plenty of analog inputs and two analog outputs, multiple extra perpherials( like a spare UART ). Official development platform ESP-IDF have planted with FreeRTOS. With dual-core and real time OS you can get more organized code and much high speed processor. Product Features 5V DC power supply USB Type-C ESP32-based 16 MB Flash 4 MB PSRAM MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino ESP32 Features 240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support Peripherals Pin Map LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND 9-Axis Posture Sensor MPU9250 I2C address 0x68 ESP32 Chip GPIO22 GPIO21 5V GND MPU9250 SCL SDA 5V GND M5GO Base Port GROVE Port B ESP32 Chip GPIO36 GPIO26 5V GND GROVE B GPIO36 GPIO26 5V GND GROVE Port C ESP32 Chip GPIO16 GPIO17 5V GND GROVE C RXD TXD 5V GND LED Bar Micphone Speaker ESP32 Chip GPIO15 GPIO34 GPIO25 LED Bar SIG Pin MIC MIC Pin Speaker Speaker Pin PARAMETER Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 16MB Power Input 5V @ 600mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 600mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 21 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002 Include 1x M5Stack Fire Controller 1x M5GO Base( LEGO compatible) 1x M5GO CHG Base 10x Femal-male Dupont Type-C USB cable User Manual Related Link Datasheet - ESP32 - MPU9250 Register Manual - IP5306 Related Video m5stack instroduce m5stack Case - Piu UI framework with Moddable SDK","title":"FIRE {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/core/fire/#fire-docsify-ignore-all","text":":memo: Description :bulb: Quick Start :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"FIRE {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/core/fire/#description","text":"M5Stack FIRE Kit is a upgrade from the Gray kits,except the 9-Axis IMU sensor. It provides more hardware resources : 16M Flash + 4M PSRAM , enhanced Base (M5GO Base and M5GO CHG Base), larger battery, etc. With a IMU posture sensor, you can include posture detection in your work : accelerated speed, angulation, and trajectory deection. You can make relative products like sports data collector, 3D remote gesture controller and more. FIRE is M5 Core device. Its modular, stackable, scalable, and portable device is powered with an ESP-32 core, which makes it open source, low cost, full-function, and easy for developers to handle new product development on all stages include circuit design, PCB design, software, mold design and production. M5Stack Fire comes with three separable parts. The top part ,just like Basic and Gray Kit, has all kinds of processors, chips ,scokets, 2.4G antenna etc, such as ESP32, power management IC , a LCD screen and some other interface components. The middle part is called M5GO base provides a lithium battery, M-BUS socket , LED bar and two more GROVE Port. The bottom part is a charge table,can be connect to the M5GO base via POGO pins. Ever wanted to explore the fastest way of IoT prototyping, M5Stack development board is the perfect solution. Not like others, M5Stack development board is highly productlized, covered with industrial grade case, and ESP32-based development board. ESP32 is a hybid Wi-Fi Bluetooth chip contains a dual-core and 4MB of SPI Flash . Together with 30+ M5Stack stackable modules , 40+ extendable units , and different levels of program language, you can create and verify your IoT product in a very short time. Supported development platforms and program languages: Arduino, Blockly language with UIFlow , Micropython . Regardless of what level program skill you have, M5Stack would guide you in every step of the way to realize your idea as well as to the final productilization. If you ever played with ESP8266, you would realize that ESP32 is a perfect upgrade from ESP8266. In comparison, ESP32 is full-feathered with more GPIO, plenty of analog inputs and two analog outputs, multiple extra perpherials( like a spare UART ). Official development platform ESP-IDF have planted with FreeRTOS. With dual-core and real time OS you can get more organized code and much high speed processor.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/core/fire/#product-features","text":"5V DC power supply USB Type-C ESP32-based 16 MB Flash 4 MB PSRAM MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/core/fire/#esp32-features","text":"240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support","title":"ESP32 Features"},{"location":"tutorials/M5Stack/docs/en/core/fire/#peripherals-pin-map","text":"LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND 9-Axis Posture Sensor MPU9250 I2C address 0x68 ESP32 Chip GPIO22 GPIO21 5V GND MPU9250 SCL SDA 5V GND","title":"Peripherals Pin Map"},{"location":"tutorials/M5Stack/docs/en/core/fire/#m5go-base-port","text":"GROVE Port B ESP32 Chip GPIO36 GPIO26 5V GND GROVE B GPIO36 GPIO26 5V GND GROVE Port C ESP32 Chip GPIO16 GPIO17 5V GND GROVE C RXD TXD 5V GND LED Bar Micphone Speaker ESP32 Chip GPIO15 GPIO34 GPIO25 LED Bar SIG Pin MIC MIC Pin Speaker Speaker Pin","title":"M5GO Base Port"},{"location":"tutorials/M5Stack/docs/en/core/fire/#parameter","text":"Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 16MB Power Input 5V @ 600mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 600mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 21 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002","title":"PARAMETER"},{"location":"tutorials/M5Stack/docs/en/core/fire/#include","text":"1x M5Stack Fire Controller 1x M5GO Base( LEGO compatible) 1x M5GO CHG Base 10x Femal-male Dupont Type-C USB cable User Manual","title":"Include"},{"location":"tutorials/M5Stack/docs/en/core/fire/#related-link","text":"Datasheet - ESP32 - MPU9250 Register Manual - IP5306","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/core/fire/#related-video","text":"m5stack instroduce m5stack Case - Piu UI framework with Moddable SDK","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/core/gray/","text":"GRAY {docsify-ignore-all} :memo: Description :bulb: Quick Start :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description M5Stack GRAY Kit is from one of the M5Stack development kit series, it\u2019s a upgrade from the Basic kits. In comparison, Gray kit provide a extra IMU sensor, MPU9250. With a IMU posture sensor, you can include posture detection in your work : accelerated speed, angulation, and trajectory detection. You can make relative products like sports data collector, 3D remote gesture controller and more. GRAY is M5 Core device. Its modular, stackable, scalable, and portable device is powered with an ESP-32 core, which makes it open source, low cost, full-function, and easy for developers to handle new product development on all stages include circuit design, PCB design, software, mold design and production. Ever wanted to explore the fastest way of IoT prototyping, M5Stack development board is the perfect solution. Not like others, M5Stack development board is highly productlized, covered with industrial grade case, and ESP32-based development board. ESP32 is a hybid Wi-Fi Bluetooth chip contains a dual-core and 4MB of SPI Flash . Together with 30+ M5Stack stackable modules , 40+ extendable units , and different levels of program language, you can create and verify your IoT product in a very short time. Supported development platforms and program languages: Arduino, Blockly language with UIFlow , Micropython . Regardless of what level program skill you have, M5Stack would guide you in every step of the way to realize your idea as well as to the final productilization. If you ever played with ESP8266, you would realize that ESP32 is a perfect upgrade from ESP8266. In comparison, ESP32 is full-feathered with more GPIO, plenty of analog inputs and two analog outputs, multiple extra perpherials( like a spare UART ). Official development platform ESP-IDF have planted with FreeRTOS. With dual-core and real time OS you can get more organized code and much high speed processor. Product Features 5V DC power supply USB Type-C ESP32-based 16 MB Flash MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (Up to 16GB support) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino ESP32 Features 240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support Peripherals Pin Map LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE A IP5306 Power Management IC (IP5306) is customized I2C edition\uff0cits I2C address is 0x75. Click here to check IP5306 datasheet ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND 9-Axis Posture Sensor MPU9250 I2C address 0x68 ESP32 Chip GPIO22 GPIO21 5V GND MPU9250 SCL SDA 5V GND PARAMETER Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 16MB (old: 4MB) Power Input 5V @ 150mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 150mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 12.5 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002 Include 1x M5Stack Gray Controller 1x Basic Base 10x Femal-male Dupont Type-C USB cable User Manual Related Link datasheet - ESP32 - MPU9250 datasheet - IP5306 schematic Related Video m5stack instroduce M5Core Cases","title":"GRAY {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/core/gray/#gray-docsify-ignore-all","text":":memo: Description :bulb: Quick Start :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"GRAY {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/core/gray/#description","text":"M5Stack GRAY Kit is from one of the M5Stack development kit series, it\u2019s a upgrade from the Basic kits. In comparison, Gray kit provide a extra IMU sensor, MPU9250. With a IMU posture sensor, you can include posture detection in your work : accelerated speed, angulation, and trajectory detection. You can make relative products like sports data collector, 3D remote gesture controller and more. GRAY is M5 Core device. Its modular, stackable, scalable, and portable device is powered with an ESP-32 core, which makes it open source, low cost, full-function, and easy for developers to handle new product development on all stages include circuit design, PCB design, software, mold design and production. Ever wanted to explore the fastest way of IoT prototyping, M5Stack development board is the perfect solution. Not like others, M5Stack development board is highly productlized, covered with industrial grade case, and ESP32-based development board. ESP32 is a hybid Wi-Fi Bluetooth chip contains a dual-core and 4MB of SPI Flash . Together with 30+ M5Stack stackable modules , 40+ extendable units , and different levels of program language, you can create and verify your IoT product in a very short time. Supported development platforms and program languages: Arduino, Blockly language with UIFlow , Micropython . Regardless of what level program skill you have, M5Stack would guide you in every step of the way to realize your idea as well as to the final productilization. If you ever played with ESP8266, you would realize that ESP32 is a perfect upgrade from ESP8266. In comparison, ESP32 is full-feathered with more GPIO, plenty of analog inputs and two analog outputs, multiple extra perpherials( like a spare UART ). Official development platform ESP-IDF have planted with FreeRTOS. With dual-core and real time OS you can get more organized code and much high speed processor.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/core/gray/#product-features","text":"5V DC power supply USB Type-C ESP32-based 16 MB Flash MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (Up to 16GB support) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/core/gray/#esp32-features","text":"240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support","title":"ESP32 Features"},{"location":"tutorials/M5Stack/docs/en/core/gray/#peripherals-pin-map","text":"LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE A IP5306 Power Management IC (IP5306) is customized I2C edition\uff0cits I2C address is 0x75. Click here to check IP5306 datasheet ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND 9-Axis Posture Sensor MPU9250 I2C address 0x68 ESP32 Chip GPIO22 GPIO21 5V GND MPU9250 SCL SDA 5V GND","title":"Peripherals Pin Map"},{"location":"tutorials/M5Stack/docs/en/core/gray/#parameter","text":"Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 16MB (old: 4MB) Power Input 5V @ 150mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 150mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 12.5 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002","title":"PARAMETER"},{"location":"tutorials/M5Stack/docs/en/core/gray/#include","text":"1x M5Stack Gray Controller 1x Basic Base 10x Femal-male Dupont Type-C USB cable User Manual","title":"Include"},{"location":"tutorials/M5Stack/docs/en/core/gray/#related-link","text":"datasheet - ESP32 - MPU9250 datasheet - IP5306 schematic","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/core/gray/#related-video","text":"m5stack instroduce M5Core Cases","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/core/m5go/","text":"M5GO IOT Starter Kit {docsify-ignore-all} :memo: Description :bulb: Quick Start :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description This M5GO IOT Kit is a multi-Unit feast with 6 M5units inside (ENV, IR, RGB, PIR, ANGLE, HUB). Just like other M5Stack development kit, M5GO is powered by ESP32. Every M5stack development kit can be programmed through Arduino IDE, WebIDE UIFlow, Micropython, and Blockly, simplifying the development process for those requiring a joint hardware and software solution. Not only does M5stack have far-reaching IoT applications in industry, agriculture, and home, but it also empowers students to learn to code in STEM classrooms. This M5GO kit is specifically designed for STEM education. The pack includes 1 M5GO conroller + 6 M5units + plenty of accessories. Having all those goods, together with the Blockly program platform, allows the school students to explore the engineering world , making their own IoT product and implement brilliant ideas into real life. Product Features 5V DC power supply USB Type-C ESP32-based 16 MByte PSRAM MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino ESP32 Features 240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support PinMap Peripherals Pin Map LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND 9-Axis Posture Sensor MPU9250 I2C address 0x68 ESP32 Chip GPIO22 GPIO21 5V GND MPU9250 SCL SDA 5V GND M5GO Base Port GROVE Port B ESP32 Chip GPIO36 GPIO26 5V GND GROVE B GPIO36 GPIO26 5V GND GROVE Port C ESP32 Chip GPIO16 GPIO17 5V GND GROVE C RXD TXD 5V GND LED Bar Micphone Speaker ESP32 Chip GPIO15 GPIO34 GPIO25 LED Bar SIG Pin MIC MIC Pin Speaker Speaker Pin PARAMETER Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 16MB Power Input 5V @ 150mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 600mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 21 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002 Include 1x white M5Core controller 1x M5GO Base( LEGO compatible) 6x Units(ENV, IR, RGB, PIR, ANGLE, HUB) 4x LEGO connectors and bricks 3x GROVE cable Type-C USB cable User Manual Related Link Datasheet - ESP32 - MPU9250 Register Manual - IP5306 Related Video m5stack instroduce","title":"M5GO IOT Starter Kit {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/core/m5go/#m5go-iot-starter-kit-docsify-ignore-all","text":":memo: Description :bulb: Quick Start :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"M5GO IOT Starter Kit {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/core/m5go/#description","text":"This M5GO IOT Kit is a multi-Unit feast with 6 M5units inside (ENV, IR, RGB, PIR, ANGLE, HUB). Just like other M5Stack development kit, M5GO is powered by ESP32. Every M5stack development kit can be programmed through Arduino IDE, WebIDE UIFlow, Micropython, and Blockly, simplifying the development process for those requiring a joint hardware and software solution. Not only does M5stack have far-reaching IoT applications in industry, agriculture, and home, but it also empowers students to learn to code in STEM classrooms. This M5GO kit is specifically designed for STEM education. The pack includes 1 M5GO conroller + 6 M5units + plenty of accessories. Having all those goods, together with the Blockly program platform, allows the school students to explore the engineering world , making their own IoT product and implement brilliant ideas into real life.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/core/m5go/#product-features","text":"5V DC power supply USB Type-C ESP32-based 16 MByte PSRAM MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/core/m5go/#esp32-features","text":"240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support","title":"ESP32 Features"},{"location":"tutorials/M5Stack/docs/en/core/m5go/#pinmap","text":"","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/core/m5go/#peripherals-pin-map","text":"LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND 9-Axis Posture Sensor MPU9250 I2C address 0x68 ESP32 Chip GPIO22 GPIO21 5V GND MPU9250 SCL SDA 5V GND","title":"Peripherals Pin Map"},{"location":"tutorials/M5Stack/docs/en/core/m5go/#m5go-base-port","text":"GROVE Port B ESP32 Chip GPIO36 GPIO26 5V GND GROVE B GPIO36 GPIO26 5V GND GROVE Port C ESP32 Chip GPIO16 GPIO17 5V GND GROVE C RXD TXD 5V GND LED Bar Micphone Speaker ESP32 Chip GPIO15 GPIO34 GPIO25 LED Bar SIG Pin MIC MIC Pin Speaker Speaker Pin","title":"M5GO Base Port"},{"location":"tutorials/M5Stack/docs/en/core/m5go/#parameter","text":"Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 16MB Power Input 5V @ 150mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 600mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 21 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002","title":"PARAMETER"},{"location":"tutorials/M5Stack/docs/en/core/m5go/#include","text":"1x white M5Core controller 1x M5GO Base( LEGO compatible) 6x Units(ENV, IR, RGB, PIR, ANGLE, HUB) 4x LEGO connectors and bricks 3x GROVE cable Type-C USB cable User Manual","title":"Include"},{"location":"tutorials/M5Stack/docs/en/core/m5go/#related-link","text":"Datasheet - ESP32 - MPU9250 Register Manual - IP5306","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/core/m5go/#related-video","text":"m5stack instroduce","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/core/m5go_lite/","text":"M5GO Lite {docsify-ignore-all} :memo: Description :bulb: Quick Start :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video DESCRIPTION M5GO Lite is a light pack of M5GO kit, instead of having 6 M5units, M5Go-Lite provides 1 ENV + accessories and the same M5 controller as M5GO. M5Go-Lite is also designed for STEM education. M5GO controller itself is already a full-feathered, highly integrated, upgraded development board provides plenty of hardware resources, such as LCD screen, speaker, Led bar, 16M flash, microphone and more. Light but not least. All M5stack development board can be programmed through Arduino IDE, WebIDE UIFlow, Micropython, and Blockly, simplifying the development process for those requiring a joint hardware and software solution. Not only does M5stack have far-reaching IoT applications in industry, agriculture, and home, but it also empowers students to learn to code in STEM classrooms. Product Features 5V DC power supply USB Type-C ESP32-based 16 MByte PSRAM MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino ESP32 Features 240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support PinMap Peripherals Pin Map LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND 9-Axis Posture Sensor MPU9250 I2C address 0x68 ESP32 Chip GPIO22 GPIO21 5V GND MPU9250 SCL SDA 5V GND M5GO Base Port GROVE Port B ESP32 Chip GPIO36 GPIO26 5V GND GROVE B GPIO36 GPIO26 5V GND GROVE Port C ESP32 Chip GPIO16 GPIO17 5V GND GROVE C RXD TXD 5V GND LED Bar Micphone Speaker ESP32 Chip GPIO15 GPIO34 GPIO25 LED Bar SIG Pin MIC MIC Pin Speaker Speaker Pin PARAMETER Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 16MB Power Input 5V @ 150mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 600mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 21 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002 \u5305\u542b 1x white M5GO Controller 1x M5GO Base 1x ENV Unit 1x GROVE Cable Type-C USB Cable User Manual Related Link Datasheet - ESP32 - MPU9250 Example 1. Arduino IDE M5GO + ENV to get weather data: But before compiling this program, please install Adafruit BMP280 Library and copy Adafruit_Sensor.h to C:\\Users\\ user_name \\Documents\\Arduino\\libraries\\Adafruit_BMP280_Library first. For more infomation, Click here /* Install Adafruit BMP280 Library first. */ #include M5Stack.h #include DHT12.h #include Wire.h //The DHT12 uses I2C comunication. #include Adafruit_Sensor.h #include Adafruit_BMP280.h // new two objects DHT12 dht12; Adafruit_BMP280 bme; // initialization M5.begin(); Wire.begin(); bme.begin(); // read data float tmp = dht12.readTemperature(); float hum = dht12.readHumidity(); float pressure = bme.readPressure(); More examples are here 2. UIFlow For more details, click here Related Video m5stack instroduce","title":"M5GO Lite {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/core/m5go_lite/#m5go-lite-docsify-ignore-all","text":":memo: Description :bulb: Quick Start :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"M5GO Lite {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/core/m5go_lite/#description","text":"M5GO Lite is a light pack of M5GO kit, instead of having 6 M5units, M5Go-Lite provides 1 ENV + accessories and the same M5 controller as M5GO. M5Go-Lite is also designed for STEM education. M5GO controller itself is already a full-feathered, highly integrated, upgraded development board provides plenty of hardware resources, such as LCD screen, speaker, Led bar, 16M flash, microphone and more. Light but not least. All M5stack development board can be programmed through Arduino IDE, WebIDE UIFlow, Micropython, and Blockly, simplifying the development process for those requiring a joint hardware and software solution. Not only does M5stack have far-reaching IoT applications in industry, agriculture, and home, but it also empowers students to learn to code in STEM classrooms.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/docs/en/core/m5go_lite/#product-features","text":"5V DC power supply USB Type-C ESP32-based 16 MByte PSRAM MPU9250 Speaker, 3 Buttons, LCD(320*240), 1 Reset 2.4G Antenna: Proant 440 TF card slot (16G Maximum size) Battery Socket 150 mAh Lipo Battery Extendable Pins Holes Grove Port M-Bus Socket Pins Development Platform UIFlow , MicroPython , Arduino","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/core/m5go_lite/#esp32-features","text":"240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support","title":"ESP32 Features"},{"location":"tutorials/M5Stack/docs/en/core/m5go_lite/#pinmap","text":"","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/core/m5go_lite/#peripherals-pin-map","text":"LCD TF card LCD \uff1a320x240 TF card Maximum size 16GB ESP32 Chip GPIO23 GPIO19 GPIO18 GPIO14 GPIO27 GPIO33 GPIO32 GPIO4 ILI9341 MOSI / CLK CS DC RST BL TF Card MOSI MISO CLK CS Button Speaker ESP32 Chip GPIO39 GPIO38 GPIO37 GPIO25 Button Pin BUTTON A BUTTON B BUTTON C Speaker Speaker Pin GROVE Port A IP5306 We've use the customized I2C version of IP5306, on power management. Its I2C address is 0x75. Click here to check its datasheet ESP32 Chip GPIO22 GPIO21 5V GND GROVE A SCL SDA 5V GND IP5306 SCL SDA 5V GND 9-Axis Posture Sensor MPU9250 I2C address 0x68 ESP32 Chip GPIO22 GPIO21 5V GND MPU9250 SCL SDA 5V GND","title":"Peripherals Pin Map"},{"location":"tutorials/M5Stack/docs/en/core/m5go_lite/#m5go-base-port","text":"GROVE Port B ESP32 Chip GPIO36 GPIO26 5V GND GROVE B GPIO36 GPIO26 5V GND GROVE Port C ESP32 Chip GPIO16 GPIO17 5V GND GROVE C RXD TXD 5V GND LED Bar Micphone Speaker ESP32 Chip GPIO15 GPIO34 GPIO25 LED Bar SIG Pin MIC MIC Pin Speaker Speaker Pin","title":"M5GO Base Port"},{"location":"tutorials/M5Stack/docs/en/core/m5go_lite/#parameter","text":"Resources Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash Memory 16MB Power Input 5V @ 150mA Port TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD Screen 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 Battery 600mAh @ 3.7V Operating Temperature 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 21 mm Case Material Plastic ( PC ) Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002","title":"PARAMETER"},{"location":"tutorials/M5Stack/docs/en/core/m5go_lite/#_1","text":"1x white M5GO Controller 1x M5GO Base 1x ENV Unit 1x GROVE Cable Type-C USB Cable User Manual","title":"\u5305\u542b"},{"location":"tutorials/M5Stack/docs/en/core/m5go_lite/#related-link","text":"Datasheet - ESP32 - MPU9250","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/core/m5go_lite/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/core/m5go_lite/#1-arduino-ide","text":"M5GO + ENV to get weather data: But before compiling this program, please install Adafruit BMP280 Library and copy Adafruit_Sensor.h to C:\\Users\\ user_name \\Documents\\Arduino\\libraries\\Adafruit_BMP280_Library first. For more infomation, Click here /* Install Adafruit BMP280 Library first. */ #include M5Stack.h #include DHT12.h #include Wire.h //The DHT12 uses I2C comunication. #include Adafruit_Sensor.h #include Adafruit_BMP280.h // new two objects DHT12 dht12; Adafruit_BMP280 bme; // initialization M5.begin(); Wire.begin(); bme.begin(); // read data float tmp = dht12.readTemperature(); float hum = dht12.readHumidity(); float pressure = bme.readPressure(); More examples are here","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/core/m5go_lite/#2-uiflow","text":"For more details, click here","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/core/m5go_lite/#related-video","text":"m5stack instroduce","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/core/m5stick/","text":"M5Stick {docsify-ignore-all} :memo: Description :bulb: Quick Start :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description M5Stick is a mini M5Stack, powered by ESP32. It is a portable, easy-to-use, open source, IoT development board. What it can do? This tiny block is able to realize your idea, enlighten your creativity, and help with your IoT prototying in a very short time. It will takes away a lot of the pains form the development process. M5stickC is one of the core devices in M5Stack product series which is built in a continues growing hardware software ecosystem. It has a lot of compatible modules units, as well as the open source code engineering community that will help you maximum your benefit in every step of the developing process. The following figure shows the position indication of Button A and Assembly hole Power on / off: Power on: Click the reset button Shutdown: Double the reset button Feature 5V DC power supply USB Type-C ESP32-based 4 MByte Flash 9-Axis IMU MPU9250(only gray type) Red LED Buzzer IR transmitter Microphone 1 Buttons, OLED(1.3 inch), 1 Reset 2.4G Antenna: Proant 440 80 mAh Lipo Battery Extendable Socket Grove Port Wearable Wall mounted Development Platform UIFlow , MicroPython , Arduino ESP32 Features 240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support PinMap Peripheral Pin Mapping blue LED BUTTON BUZZER IR Transmitter ESP32 GPIO17 GPIO19 GPIO26 GPIO35 IR Transmitter Pin Blue LED Pin BUZZER Pin BUTTON Pin OLED Screen ESP32 GPIO14 GPIO27 GPIO33 OLED CS DC RST GROVE Port ESP32 GPIO13 GPIO25 5V GND GROVE Port SCL SDA 5V GND Gray type: ESP32 GPIO22 GPIO21 9-Axis posture sentsor: MPU9250 SCL SDA Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002 Include 1x M5Stick 1x USB Type-C cable Gray type: - Accessories: WATCH BELT , WALL/1515 and BRICK Schematic If you want the complete schematic, please click here . Related Link Datasheet - ESP32 - MPU9250 Register Manual - IP5306 Example Arduino M5Stick Factory Test M5Stick Watch UIFlow White square game Related Video m5stick Case - Remote control air conditioner m5stick Case - .obj model viewer","title":"M5Stick {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/core/m5stick/#m5stick-docsify-ignore-all","text":":memo: Description :bulb: Quick Start :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"M5Stick {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/core/m5stick/#description","text":"M5Stick is a mini M5Stack, powered by ESP32. It is a portable, easy-to-use, open source, IoT development board. What it can do? This tiny block is able to realize your idea, enlighten your creativity, and help with your IoT prototying in a very short time. It will takes away a lot of the pains form the development process. M5stickC is one of the core devices in M5Stack product series which is built in a continues growing hardware software ecosystem. It has a lot of compatible modules units, as well as the open source code engineering community that will help you maximum your benefit in every step of the developing process. The following figure shows the position indication of Button A and Assembly hole Power on / off: Power on: Click the reset button Shutdown: Double the reset button","title":"Description"},{"location":"tutorials/M5Stack/docs/en/core/m5stick/#feature","text":"5V DC power supply USB Type-C ESP32-based 4 MByte Flash 9-Axis IMU MPU9250(only gray type) Red LED Buzzer IR transmitter Microphone 1 Buttons, OLED(1.3 inch), 1 Reset 2.4G Antenna: Proant 440 80 mAh Lipo Battery Extendable Socket Grove Port Wearable Wall mounted Development Platform UIFlow , MicroPython , Arduino","title":"Feature"},{"location":"tutorials/M5Stack/docs/en/core/m5stick/#esp32-features","text":"240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support","title":"ESP32 Features"},{"location":"tutorials/M5Stack/docs/en/core/m5stick/#pinmap","text":"","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/core/m5stick/#peripheral-pin-mapping","text":"blue LED BUTTON BUZZER IR Transmitter ESP32 GPIO17 GPIO19 GPIO26 GPIO35 IR Transmitter Pin Blue LED Pin BUZZER Pin BUTTON Pin OLED Screen ESP32 GPIO14 GPIO27 GPIO33 OLED CS DC RST GROVE Port ESP32 GPIO13 GPIO25 5V GND GROVE Port SCL SDA 5V GND Gray type: ESP32 GPIO22 GPIO21 9-Axis posture sentsor: MPU9250 SCL SDA Notice\uff1a Comparision Between Different Development Kits For details click here \u3002 Download chart click here \u3002","title":"Peripheral Pin Mapping"},{"location":"tutorials/M5Stack/docs/en/core/m5stick/#include","text":"1x M5Stick 1x USB Type-C cable Gray type: - Accessories: WATCH BELT , WALL/1515 and BRICK","title":"Include"},{"location":"tutorials/M5Stack/docs/en/core/m5stick/#schematic","text":"If you want the complete schematic, please click here .","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/core/m5stick/#related-link","text":"Datasheet - ESP32 - MPU9250 Register Manual - IP5306","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/core/m5stick/#example","text":"Arduino M5Stick Factory Test M5Stick Watch UIFlow White square game","title":"Example"},{"location":"tutorials/M5Stack/docs/en/core/m5stick/#related-video","text":"m5stick Case - Remote control air conditioner m5stick Case - .obj model viewer","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/core/m5stickc/","text":"M5StickC {docsify-ignore-all} :memo: Description :bulb: Quick Start :octocat: Example \ud83d\uded2 Purchase :clapper: Related Video Description M5Stick-C is a mini M5Stack, powered by ESP32. It is a portable, easy-to-use, open source, IoT development board. What it can do? This tiny block is able to realize your idea, enlighten your creativity, and help with your IoT prototying in a very short time. It will takes away a lot of the pains form the development process. M5stickC is one of the core devices in M5Stack product series which is built in a continues growing hardware software ecosystem. It has a lot of compatible modules units, as well as the open source code engineering community that will help you maximum your benefit in every step of the developing process. Power switch operation\uff1a Power on \uff1aLong press power button for 2 seconds Power on \uff1aShort press power button for 6 seconds Notice: Baudrate supported by M5StickC: 1200 ~115200, 250K, 500K, 750K, 1500K Only Orange type is available for now Product Features 5V DC power supply USB Type-C ESP32-based 4 MByte Flash 6-Axis IMU SH200Q Red LED IR transmitter Microphone 2 Buttons, LCD(0.96 inch), 1 Reset 2.4G Antenna: Proant 440 80 mAh Lipo Battery Extendable Socket Grove Port Wearable Wall mounted Development Platform UIFlow , MicroPython , Arduino ESP32 Features 240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support PinMap RED LED IR Transmitter BUTTON A BUTTON B ESP32 GPIO10 GPIO9 GPIO37 GPIO39 RED LED LED Pin IR Transmitter Transmitter Pin BUTTON A Button Pin BUTTON B Button Pin TFT LCD Driver IC\uff1aST7735S Resolution\uff1a80 * 160 ESP32 GPIO15 GPIO13 GPIO23 GPIO18 GPIO5 TFT LCD TFT_MOSI TFT_CLK TFT_DC TFT_RST TFT_CS GROVE PORT ESP32 GPIO33 GPIO32 5V GND GROVE port SCL SDA 5V GND MIC (SPM1423) ESP32 GPIO0 GPIO34 MICPHONE SCL SDA 6-Axis posture sensor (SH200Q) power management IC (AXP192) ESP32 GPIO22 GPIO21 6-Axis posture sensor SCL SDA power management IC SCL SDA M5StickC extendable IO at top Include 1x M5StickC 1x USB Type-C cable Related Link datasheet ESP32-PICO ST7735S BM8563 SH200Q AXP192 SPM1423 Example Arduino M5StickC facory test code M5StickC Vending Machine Related Video M5StickC Case - counter M5StickC Case - Safe system","title":"M5StickC {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/core/m5stickc/#m5stickc-docsify-ignore-all","text":":memo: Description :bulb: Quick Start :octocat: Example \ud83d\uded2 Purchase :clapper: Related Video","title":"M5StickC {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/core/m5stickc/#description","text":"M5Stick-C is a mini M5Stack, powered by ESP32. It is a portable, easy-to-use, open source, IoT development board. What it can do? This tiny block is able to realize your idea, enlighten your creativity, and help with your IoT prototying in a very short time. It will takes away a lot of the pains form the development process. M5stickC is one of the core devices in M5Stack product series which is built in a continues growing hardware software ecosystem. It has a lot of compatible modules units, as well as the open source code engineering community that will help you maximum your benefit in every step of the developing process. Power switch operation\uff1a Power on \uff1aLong press power button for 2 seconds Power on \uff1aShort press power button for 6 seconds Notice: Baudrate supported by M5StickC: 1200 ~115200, 250K, 500K, 750K, 1500K Only Orange type is available for now","title":"Description"},{"location":"tutorials/M5Stack/docs/en/core/m5stickc/#product-features","text":"5V DC power supply USB Type-C ESP32-based 4 MByte Flash 6-Axis IMU SH200Q Red LED IR transmitter Microphone 2 Buttons, LCD(0.96 inch), 1 Reset 2.4G Antenna: Proant 440 80 mAh Lipo Battery Extendable Socket Grove Port Wearable Wall mounted Development Platform UIFlow , MicroPython , Arduino","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/core/m5stickc/#esp32-features","text":"240 MHz dual core Tensilica LX6 microcontroller with 600 DMIPS Integrated 520 KB SRAM Integrated 802.11b/g/n HT40 Wi-Fi transceiver, baseband, stack and LWIP Integrated dual mode Bluetooth (classic and BLE) Hall sensor 10x capactive touch interface 32 kHz crystal oscillator PWM/timer input/output available on every GPIO pin SDIO master/salve 50MHz SD-card interface support","title":"ESP32 Features"},{"location":"tutorials/M5Stack/docs/en/core/m5stickc/#pinmap","text":"RED LED IR Transmitter BUTTON A BUTTON B ESP32 GPIO10 GPIO9 GPIO37 GPIO39 RED LED LED Pin IR Transmitter Transmitter Pin BUTTON A Button Pin BUTTON B Button Pin TFT LCD Driver IC\uff1aST7735S Resolution\uff1a80 * 160 ESP32 GPIO15 GPIO13 GPIO23 GPIO18 GPIO5 TFT LCD TFT_MOSI TFT_CLK TFT_DC TFT_RST TFT_CS GROVE PORT ESP32 GPIO33 GPIO32 5V GND GROVE port SCL SDA 5V GND MIC (SPM1423) ESP32 GPIO0 GPIO34 MICPHONE SCL SDA 6-Axis posture sensor (SH200Q) power management IC (AXP192) ESP32 GPIO22 GPIO21 6-Axis posture sensor SCL SDA power management IC SCL SDA M5StickC extendable IO at top","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/core/m5stickc/#include","text":"1x M5StickC 1x USB Type-C cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/core/m5stickc/#related-link","text":"datasheet ESP32-PICO ST7735S BM8563 SH200Q AXP192 SPM1423","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/core/m5stickc/#example","text":"Arduino M5StickC facory test code M5StickC Vending Machine","title":"Example"},{"location":"tutorials/M5Stack/docs/en/core/m5stickc/#related-video","text":"M5StickC Case - counter M5StickC Case - Safe system","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/core/white/","text":"M5Core WHITE {docsify-ignore-all} Description The White M5Core is a main board of M5GO IOT Starter Kit. The White M5Core is similar with M5Core GRAY. But it's bottom module is M5GO Base, not the same as M5Core GRAY. It equips the ESP32 with everything necessary to program, run and develop on the wonderchip. It also features a MEMS Chip( MPU9250 ), and a TFT LCD, so you can create a 3D remote gesture controller, a simple \"Leap Motion\" via M5Stack GRAY in a day in stead of couple weeks and so on. The a Bottom board on the back of M5Core. It's designed for expanding gpio on M-Bus besides I2S Pins(GPIO0, GPIO12, GPIO13, GPIO15, GPIO34)for DIY. Each gpio on M-Bus is expanded as pin and port for convenience and flexibility. Feature Programming Support UIFlow MicroPython Arduino Compatible LEGO TF Card Support PARAMETER Source Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash 16MB Input 5V @ 500mA Interface TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 MEMS MPU9250 Battery 150mAh @ 3.7V, inside vb Op.Temp. 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 12.5 mm C.A.S.E Plastic ( PC ) Weight 120g with bottom, 100g only core PinMap POGO Pin POGO Pin ESP32 Chip SCL GPIO22 SDA GPIO21 LED Bar LED Pin ESP32 Chip LED Pin GPIO15 MIC MIC Pin ESP32 Chip MIC Pin GPIO34 Speak Speak Pin ESP32 Chip Speak Pin GPIO25 Button Button Pin ESP32 Chip BUTTON A GPIO39 BUTTON B GPIO38 BUTTON C GPIO37 GROVE PORT A(I2C) ESP32 Chip SCL GPIO22 SDA GPIO21 5V 5V GND GND PORT B(I/O) ESP32 Chip G36 GPIO36 G26 GPIO26 5V 5V GND GND PORT C(UART2) ESP32 Chip RXD GPIO16 TXD GPIO17 5V 5V GND GND MEMS Chip MPU9250 i2c address: 0x68 MPU9250 ESP32 Chip SCL GPIO22 SDA GPIO21 5V 5V GND GND LCD ILI9341 ESP32 Chip MOSI GPIO23 MISO / CLK GPIO18 CS GPIO14 DC GPIO27 RST GPIO33 BL GPIO32 TF Card TFCard Pin ESP32 Chip MOSI GPIO23 MISO GPIO19 CLK GPIO18 CS GPIO4 M-Bus NOTE: We have several kinds of Cores, the following figures show the main differece with them. If you want to view the detailed defference with them, please click here . If you want to download the detailed defference with them, please click here . Include 1x M5Core WHITE 1x M5GO Base 1x M5GO CHG BASE Type-C USB Cable User Manual Related Link Example - Arduino - MicroPython Purchase Quick Start Arduino - MacOS - Windows_64 MicroPython The difference between M5Cores","title":"M5Core WHITE {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/core/white/#m5core-white-docsify-ignore-all","text":"","title":"M5Core WHITE {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/core/white/#description","text":"The White M5Core is a main board of M5GO IOT Starter Kit. The White M5Core is similar with M5Core GRAY. But it's bottom module is M5GO Base, not the same as M5Core GRAY. It equips the ESP32 with everything necessary to program, run and develop on the wonderchip. It also features a MEMS Chip( MPU9250 ), and a TFT LCD, so you can create a 3D remote gesture controller, a simple \"Leap Motion\" via M5Stack GRAY in a day in stead of couple weeks and so on. The a Bottom board on the back of M5Core. It's designed for expanding gpio on M-Bus besides I2S Pins(GPIO0, GPIO12, GPIO13, GPIO15, GPIO34)for DIY. Each gpio on M-Bus is expanded as pin and port for convenience and flexibility.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/core/white/#feature","text":"Programming Support UIFlow MicroPython Arduino Compatible LEGO TF Card Support","title":"Feature"},{"location":"tutorials/M5Stack/docs/en/core/white/#parameter","text":"Source Parameter ESP32 240MHz dual core, 600 DMIPS, 520KB SRAM, Wi-Fi, dual mode Bluetooth Flash 16MB Input 5V @ 500mA Interface TypeC x 1, GROVE(I2C+I/0+UART) x 1 LCD 2 inch, 320x240 Colorful TFT LCD, ILI9341 Speaker 1W-0928 MEMS MPU9250 Battery 150mAh @ 3.7V, inside vb Op.Temp. 32\u00b0F to 104\u00b0F ( 0\u00b0C to 40\u00b0C ) Size 54 x 54 x 12.5 mm C.A.S.E Plastic ( PC ) Weight 120g with bottom, 100g only core","title":"PARAMETER"},{"location":"tutorials/M5Stack/docs/en/core/white/#pinmap","text":"POGO Pin POGO Pin ESP32 Chip SCL GPIO22 SDA GPIO21 LED Bar LED Pin ESP32 Chip LED Pin GPIO15 MIC MIC Pin ESP32 Chip MIC Pin GPIO34 Speak Speak Pin ESP32 Chip Speak Pin GPIO25 Button Button Pin ESP32 Chip BUTTON A GPIO39 BUTTON B GPIO38 BUTTON C GPIO37 GROVE PORT A(I2C) ESP32 Chip SCL GPIO22 SDA GPIO21 5V 5V GND GND PORT B(I/O) ESP32 Chip G36 GPIO36 G26 GPIO26 5V 5V GND GND PORT C(UART2) ESP32 Chip RXD GPIO16 TXD GPIO17 5V 5V GND GND MEMS Chip MPU9250 i2c address: 0x68 MPU9250 ESP32 Chip SCL GPIO22 SDA GPIO21 5V 5V GND GND LCD ILI9341 ESP32 Chip MOSI GPIO23 MISO / CLK GPIO18 CS GPIO14 DC GPIO27 RST GPIO33 BL GPIO32 TF Card TFCard Pin ESP32 Chip MOSI GPIO23 MISO GPIO19 CLK GPIO18 CS GPIO4 M-Bus NOTE: We have several kinds of Cores, the following figures show the main differece with them. If you want to view the detailed defference with them, please click here . If you want to download the detailed defference with them, please click here .","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/core/white/#include","text":"1x M5Core WHITE 1x M5GO Base 1x M5GO CHG BASE Type-C USB Cable User Manual","title":"Include"},{"location":"tutorials/M5Stack/docs/en/core/white/#related-link","text":"Example - Arduino - MicroPython Purchase Quick Start Arduino - MacOS - Windows_64 MicroPython The difference between M5Cores","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/module/battery/","text":"Module BATTERY {docsify-ignore-all} :memo: Description \ud83d\uded2 Purchase Description BATTERY : The Lipo Battery extension module, 700 mAh ADD-ON. You want to make a demo or prototype product that needs more battery life, then you realize the battery in M5GO base and Basic base is not enough. Here comes BATTERY which is a handy M5modules to upgrade your Lipo battery life. Since the Lipo batteries is parallelable, you can stack mutilple of them to maximum your power endurance. * CAUTION: The safety of Lipo battery is affected by many conditions. Overcharge, over-discharge, over-temperature, short circuit, crush and nail penetration may all result in a catastrophic failure, including the pouch rupturing, the electrolyte leaking, and fire. Although every battery we offer have accompany by a protect circult board, using Lipo battery in you product still needs to be treated with caution Hardware connection Once the BATTERY is stacked underneath the M5 controller, the battery positive pole is connected to VBAT pin at IP5306 Product Features 700mAh High-Capacity Battery Include 1x M5Stack BATTERY Module Related Link Offical Video Forum","title":"Module BATTERY  {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/battery/#module-battery-docsify-ignore-all","text":":memo: Description \ud83d\uded2 Purchase","title":"Module BATTERY  {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/battery/#description","text":"BATTERY : The Lipo Battery extension module, 700 mAh ADD-ON. You want to make a demo or prototype product that needs more battery life, then you realize the battery in M5GO base and Basic base is not enough. Here comes BATTERY which is a handy M5modules to upgrade your Lipo battery life. Since the Lipo batteries is parallelable, you can stack mutilple of them to maximum your power endurance. * CAUTION: The safety of Lipo battery is affected by many conditions. Overcharge, over-discharge, over-temperature, short circuit, crush and nail penetration may all result in a catastrophic failure, including the pouch rupturing, the electrolyte leaking, and fire. Although every battery we offer have accompany by a protect circult board, using Lipo battery in you product still needs to be treated with caution","title":"Description"},{"location":"tutorials/M5Stack/docs/en/module/battery/#hardware-connection","text":"Once the BATTERY is stacked underneath the M5 controller, the battery positive pole is connected to VBAT pin at IP5306","title":"Hardware connection"},{"location":"tutorials/M5Stack/docs/en/module/battery/#product-features","text":"700mAh High-Capacity Battery","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/module/battery/#include","text":"1x M5Stack BATTERY Module","title":"Include"},{"location":"tutorials/M5Stack/docs/en/module/battery/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/module/bus/","text":"Module BUS {docsify-ignore-all} :memo: Description \ud83d\uded2 Purchase Description BUS allows you add your own circult design on the Universal prototype perboard and interact with the M5 core via M-BUS. Just like other M5modules, BUS is able to connected with other layer through M-BUS, while in this module, we've extended the M_BUS pin to pin to the other side of the board. You might need to cut off the fence on the side to be able to dupont out the pins. we've include a 2*15 90 degree pin set in the package. Product Features Hole Size: 0.039\" 1mm (CNC Drilled) Hole Pitch: 0.1 in - (2.54 mm) Entire Hole Quantity: 200 Holes Include 1x BUS Module Related Link Offical Video Forum","title":"Module BUS {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/bus/#module-bus-docsify-ignore-all","text":":memo: Description \ud83d\uded2 Purchase","title":"Module BUS {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/bus/#description","text":"BUS allows you add your own circult design on the Universal prototype perboard and interact with the M5 core via M-BUS. Just like other M5modules, BUS is able to connected with other layer through M-BUS, while in this module, we've extended the M_BUS pin to pin to the other side of the board. You might need to cut off the fence on the side to be able to dupont out the pins. we've include a 2*15 90 degree pin set in the package.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/module/bus/#product-features","text":"Hole Size: 0.039\" 1mm (CNC Drilled) Hole Pitch: 0.1 in - (2.54 mm) Entire Hole Quantity: 200 Holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/module/bus/#include","text":"1x BUS Module","title":"Include"},{"location":"tutorials/M5Stack/docs/en/module/bus/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/module/commu/","text":"COMMU {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description COMMU is a Muti-Communication-Interface-Converter. Integrated with 2 IIC, 1 TTL, 1 CAN, 1 RS485. Apparently COMMU has packed with most of series communications. Default connection: TTL - UART0, RS485 - UART2. Since ESP32 pin map is allowed for re-assign, you can re-assign or re-mapping the TTL or RS485 interface to other pins. Be care about TTL Interface. It is a UART Interface actually by default. But you can switch it to connect with UART2 after changed those jumpers(J6, J7, J9, J10). Product Features 2x I2C Interface 1x CAN Interface 1x RS485 Interface 1x TTL Interface CAN controller: MCP2515-1/SO RS485 Transceiver: SP3485EN-L/TR Include 1x M5Stack COMMU Module PinMap CAN ESP32 Chip CAN_CS GPIO12 CAN_INT GPIO15 CAN_SCK GPIO18 CAN_MISO GPIO19 CAN_MOSI GPIO23 I2C Interface ESP32 Chip IIC_SDA GPIO21 IIC_SCL GPIO22 Related Link Offical Video Forum Datasheet SP3485 MCP2515 Example Arduino IDE CAN communication These are two COMMU examples for CAN communication, tansmitter and receiver. Press Button A to sent the message, and display the received message on the screen. Step 1 : Copy MCP_CAN_lib file to C:\\Users\\ user_name \\Documents\\Arduino\\libraries , Step 2 : Open project file commu_can_transmitter.ino , and commu_can_receiver.ino Step 3 : Compile and upload the two project to two M5Cores separatly. The below code is incomplete(just for usage). If you want the complete code, please click here . /* commu_can_transmitter.ino */ #include M5Stack.h #include mcp_can.h #include m5_logo.h #define CAN0_INT 15 // Set INT to pin 2 MCP_CAN CAN0(12); // Set CS to pin 10 // declaration byte data[8] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}; // initialization M5.begin(); CAN0.begin(MCP_ANY, CAN_1000KBPS, MCP_8MHZ); /* Change to normal mode to allow messages tobe transmitted */ CAN0.setMode(MCP_NORMAL); // send data CAN0.sendMsgBuf(0x100, 0, 8, data); /* commu_can_receiver.ino */ #include M5Stack.h #include mcp_can.h #include m5_logo.h #define CAN0_INT 15 // Set INT to pin 2 MCP_CAN CAN0(12); // Set CS to pin 10 // declaration byte data[8] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}; // initialization M5.begin(); /* Initialize MCP2515 running at 16MHz with a baudrate of 500kb/s */ /* and the masks and filters disabled. */ CAN0.begin(MCP_ANY, CAN_1000KBPS, MCP_8MHZ); /* Set operation mode to normal so theMCP2515 sends acks to received data. */ CAN0.setMode(MCP_NORMAL); pinMode(CAN0_INT, INPUT);// Configuring pin for /INT input // read data CAN0.readMsgBuf( rxId, len, rxBuf); RS485 communication This is a COMMU example for RS485 communication. Burn example to two M5Cores. Then after pressed Button A, this two cores will send message to each other and receive data. Schematic","title":"COMMU {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/commu/#commu-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"COMMU {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/commu/#description","text":"COMMU is a Muti-Communication-Interface-Converter. Integrated with 2 IIC, 1 TTL, 1 CAN, 1 RS485. Apparently COMMU has packed with most of series communications. Default connection: TTL - UART0, RS485 - UART2. Since ESP32 pin map is allowed for re-assign, you can re-assign or re-mapping the TTL or RS485 interface to other pins. Be care about TTL Interface. It is a UART Interface actually by default. But you can switch it to connect with UART2 after changed those jumpers(J6, J7, J9, J10).","title":"Description"},{"location":"tutorials/M5Stack/docs/en/module/commu/#product-features","text":"2x I2C Interface 1x CAN Interface 1x RS485 Interface 1x TTL Interface CAN controller: MCP2515-1/SO RS485 Transceiver: SP3485EN-L/TR","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/module/commu/#include","text":"1x M5Stack COMMU Module","title":"Include"},{"location":"tutorials/M5Stack/docs/en/module/commu/#pinmap","text":"CAN ESP32 Chip CAN_CS GPIO12 CAN_INT GPIO15 CAN_SCK GPIO18 CAN_MISO GPIO19 CAN_MOSI GPIO23 I2C Interface ESP32 Chip IIC_SDA GPIO21 IIC_SCL GPIO22","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/module/commu/#related-link","text":"Offical Video Forum Datasheet SP3485 MCP2515","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/module/commu/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/module/commu/#arduino-ide","text":"","title":"Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/module/commu/#can-communication","text":"These are two COMMU examples for CAN communication, tansmitter and receiver. Press Button A to sent the message, and display the received message on the screen. Step 1 : Copy MCP_CAN_lib file to C:\\Users\\ user_name \\Documents\\Arduino\\libraries , Step 2 : Open project file commu_can_transmitter.ino , and commu_can_receiver.ino Step 3 : Compile and upload the two project to two M5Cores separatly. The below code is incomplete(just for usage). If you want the complete code, please click here . /* commu_can_transmitter.ino */ #include M5Stack.h #include mcp_can.h #include m5_logo.h #define CAN0_INT 15 // Set INT to pin 2 MCP_CAN CAN0(12); // Set CS to pin 10 // declaration byte data[8] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}; // initialization M5.begin(); CAN0.begin(MCP_ANY, CAN_1000KBPS, MCP_8MHZ); /* Change to normal mode to allow messages tobe transmitted */ CAN0.setMode(MCP_NORMAL); // send data CAN0.sendMsgBuf(0x100, 0, 8, data); /* commu_can_receiver.ino */ #include M5Stack.h #include mcp_can.h #include m5_logo.h #define CAN0_INT 15 // Set INT to pin 2 MCP_CAN CAN0(12); // Set CS to pin 10 // declaration byte data[8] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}; // initialization M5.begin(); /* Initialize MCP2515 running at 16MHz with a baudrate of 500kb/s */ /* and the masks and filters disabled. */ CAN0.begin(MCP_ANY, CAN_1000KBPS, MCP_8MHZ); /* Set operation mode to normal so theMCP2515 sends acks to received data. */ CAN0.setMode(MCP_NORMAL); pinMode(CAN0_INT, INPUT);// Configuring pin for /INT input // read data CAN0.readMsgBuf( rxId, len, rxBuf);","title":"CAN communication"},{"location":"tutorials/M5Stack/docs/en/module/commu/#rs485-communication","text":"This is a COMMU example for RS485 communication. Burn example to two M5Cores. Then after pressed Button A, this two cores will send message to each other and receive data.","title":"RS485 communication"},{"location":"tutorials/M5Stack/docs/en/module/commu/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/module/encoder/","text":"Module ENCODER {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description ENCODER is compatible with FACE Kit. You can have it replace the keycoard panel inside the FACE kit. It is designed for rotary encoder control, integrated Mega328 microprocessor inside and LEDs around the encoder. The series communication protocol between M5 core and ENCODER is IIC (adress: 0x5E) Product Features 12 RGB Led IIC communication Simple API for programming Mega328 inside Encoder detection Function Control single RGB /* Parameter: led_index: 0 ~ 11 r, g, b: 0 ~ 254 */ void Led(int led_index, int r, int g, int b){ // IIC send data Wire.beginTransmission(Faces_Encoder_I2C_ADDR); Wire.write(led_index); Wire.write(r); Wire.write(g); Wire.write(b); Wire.endTransmission(); } Read encoder increment void get_encoder_increment(void){ int temp_encoder_increment; // IIC read data Wire.requestFrom(Faces_Encoder_I2C_ADDR, 3); if(Wire.available()){ temp_encoder_increment = Wire.read();// get increment button_state = Wire.read();// get button value } if(temp_encoder_increment 127){//anti-clockwise direction = 1;// flag for encoder direction encoder_increment = 256 - temp_encoder_increment; } else{// clockwise direction = 0; encoder_increment = temp_encoder_increment; } } Include 1x M5Stack ENCODER Module Encoder turnpanel Related Link Offical Video Forum The Firmware of inside MEGA328 Example Arduino IDE If you want the complete code faces_encoder.ino , please click here . /* * faces_encoder.ino */ #include M5Stack.h #define Faces_Encoder_I2C_ADDR 0X5E // declaration int encoder_increment;//positive: clockwise nagtive: anti-clockwise uint16_t encoder_value=0; int button_state; uint8_t direction;//0: clockwise 1: anti-clockwise int temp_encoder_increment; // initialization M5.begin(); Wire.begin(); // get data from ENCONDER Wire.requestFrom(Faces_Encoder_I2C_ADDR, 3); if(Wire.available()){ temp_encoder_increment = Wire.read();// the first byte: increment button_state = Wire.read();// the second byte: button value } // IIC send data, 4bytes Wire.beginTransmission(Faces_Encoder_I2C_ADDR); Wire.write(led_index); Wire.write(r); Wire.write(g); Wire.write(b); Wire.endTransmission();","title":"Module ENCODER {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/encoder/#module-encoder-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Module ENCODER {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/encoder/#description","text":"ENCODER is compatible with FACE Kit. You can have it replace the keycoard panel inside the FACE kit. It is designed for rotary encoder control, integrated Mega328 microprocessor inside and LEDs around the encoder. The series communication protocol between M5 core and ENCODER is IIC (adress: 0x5E)","title":"Description"},{"location":"tutorials/M5Stack/docs/en/module/encoder/#product-features","text":"12 RGB Led IIC communication Simple API for programming Mega328 inside Encoder detection","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/module/encoder/#function","text":"Control single RGB /* Parameter: led_index: 0 ~ 11 r, g, b: 0 ~ 254 */ void Led(int led_index, int r, int g, int b){ // IIC send data Wire.beginTransmission(Faces_Encoder_I2C_ADDR); Wire.write(led_index); Wire.write(r); Wire.write(g); Wire.write(b); Wire.endTransmission(); } Read encoder increment void get_encoder_increment(void){ int temp_encoder_increment; // IIC read data Wire.requestFrom(Faces_Encoder_I2C_ADDR, 3); if(Wire.available()){ temp_encoder_increment = Wire.read();// get increment button_state = Wire.read();// get button value } if(temp_encoder_increment 127){//anti-clockwise direction = 1;// flag for encoder direction encoder_increment = 256 - temp_encoder_increment; } else{// clockwise direction = 0; encoder_increment = temp_encoder_increment; } }","title":"Function"},{"location":"tutorials/M5Stack/docs/en/module/encoder/#include","text":"1x M5Stack ENCODER Module Encoder turnpanel","title":"Include"},{"location":"tutorials/M5Stack/docs/en/module/encoder/#related-link","text":"Offical Video Forum The Firmware of inside MEGA328","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/module/encoder/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/module/encoder/#arduino-ide","text":"If you want the complete code faces_encoder.ino , please click here . /* * faces_encoder.ino */ #include M5Stack.h #define Faces_Encoder_I2C_ADDR 0X5E // declaration int encoder_increment;//positive: clockwise nagtive: anti-clockwise uint16_t encoder_value=0; int button_state; uint8_t direction;//0: clockwise 1: anti-clockwise int temp_encoder_increment; // initialization M5.begin(); Wire.begin(); // get data from ENCONDER Wire.requestFrom(Faces_Encoder_I2C_ADDR, 3); if(Wire.available()){ temp_encoder_increment = Wire.read();// the first byte: increment button_state = Wire.read();// the second byte: button value } // IIC send data, 4bytes Wire.beginTransmission(Faces_Encoder_I2C_ADDR); Wire.write(led_index); Wire.write(r); Wire.write(g); Wire.write(b); Wire.endTransmission();","title":"Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/module/gps/","text":"Module GPS {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description GPS is build with NEO-M8N, u-blox M8 concurrent GNSS modules and come with an active Antenna. The NEO-M8 series provides high sensitivity and minimal acquisition times while maintaining low system power. The NEO-M8N integrates a 72-channel u-blox M8 GNSS engine that supports multiple GNSS systems ( Beidou, Galileo, GLONASS, GPS / QZSS ) and able to receive 3 GNSS systems simultaneously. The series communicate protocol between M5Core and GPS is UART, physically connected via UART2 (GPIO16, GPIO17) If you want to Change the uart baudrate,please check here ( u-center-just-for-Windows ) Notice: GPS signal can only be found outdoors UART protocol: baud rate (default is 9600bps), data bit (8 bits), start bit (1 bit), stop bit (1 bit), Parity (none) ! M5Stack Fire has occupied GPIO16 / 17 to connect with the PSRAM by default, it's conflict with TXD / RXD (GPIO16, GPIO17) of GPS module. Therefore, when using the GPS module with the M5Stack Fire, you might have to cut the TXD and RXD from GPS module and wire fly to another set of UART pin, if you gonna use the PSRAM. Product Features Operating voltage: 2.7 ~ 3.6 Operating temperature: -40 ~ 80 \u00b0C Antenna type: built-in ceramic antenna and external antenna external Antenna port: SMA Can receive data from 3 GNSS systems concurrently Horizontal position accuracy: minimum 2.5m GPS module (NEO-M8N) Built-in Flash, so that you can upgrade firmware via u-center-just-for-Windows Supported protocols: NMEA, UBX, RTCM Industry leading -167dBm sensitivity Backward compatibility with NEO\u20107 and NEO\u20106 series Include 1x GPS Module 1x external Antenna(cable length : 1 meter) Application GPS-based logistics tracking management Driverless car positioning Related Link Offical Video Forum GPS Info (GPS) TinyGPS++ library Data Sheet - NEO-M8N u-blox Protocol Manual Example Arduino IDE To the complete code GPSRaw.ino , please click here . Note: The GPS module needs placed outdoors to be able to receive GPS signal #include M5Stack.h /* By default, GPS is connected with M5Core through UART2 */ HardwareSerial GPSRaw(2); void setup() { M5.begin(); GPSRaw.begin(9600);// GPS init Serial.println( hello ); termInit(); } void loop() { // put your main code here, to run repeatedly: if(Serial.available()) { int ch = Serial.read(); GPSRaw.write(ch); } if(GPSRaw.available()) { int ch = GPSRaw.read();// read GPS information Serial.write(ch); termPutchar(ch); } } After burnt the example code GPSRaw.ino , m5core and PC serial terminal will display following information Protocol Specification: Please refer to the u-blox 8 / u-blox M8 Receiver Description - Manual , The following table is a description of the xxRMC message in the NMEA protocol as an example. Schematic","title":"Module GPS {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/gps/#module-gps-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Module GPS {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/gps/#description","text":"GPS is build with NEO-M8N, u-blox M8 concurrent GNSS modules and come with an active Antenna. The NEO-M8 series provides high sensitivity and minimal acquisition times while maintaining low system power. The NEO-M8N integrates a 72-channel u-blox M8 GNSS engine that supports multiple GNSS systems ( Beidou, Galileo, GLONASS, GPS / QZSS ) and able to receive 3 GNSS systems simultaneously. The series communicate protocol between M5Core and GPS is UART, physically connected via UART2 (GPIO16, GPIO17) If you want to Change the uart baudrate,please check here ( u-center-just-for-Windows ) Notice: GPS signal can only be found outdoors UART protocol: baud rate (default is 9600bps), data bit (8 bits), start bit (1 bit), stop bit (1 bit), Parity (none) ! M5Stack Fire has occupied GPIO16 / 17 to connect with the PSRAM by default, it's conflict with TXD / RXD (GPIO16, GPIO17) of GPS module. Therefore, when using the GPS module with the M5Stack Fire, you might have to cut the TXD and RXD from GPS module and wire fly to another set of UART pin, if you gonna use the PSRAM.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/module/gps/#product-features","text":"Operating voltage: 2.7 ~ 3.6 Operating temperature: -40 ~ 80 \u00b0C Antenna type: built-in ceramic antenna and external antenna external Antenna port: SMA Can receive data from 3 GNSS systems concurrently Horizontal position accuracy: minimum 2.5m GPS module (NEO-M8N) Built-in Flash, so that you can upgrade firmware via u-center-just-for-Windows Supported protocols: NMEA, UBX, RTCM Industry leading -167dBm sensitivity Backward compatibility with NEO\u20107 and NEO\u20106 series","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/module/gps/#include","text":"1x GPS Module 1x external Antenna(cable length : 1 meter)","title":"Include"},{"location":"tutorials/M5Stack/docs/en/module/gps/#application","text":"GPS-based logistics tracking management Driverless car positioning","title":"Application"},{"location":"tutorials/M5Stack/docs/en/module/gps/#related-link","text":"Offical Video Forum GPS Info (GPS) TinyGPS++ library Data Sheet - NEO-M8N u-blox Protocol Manual","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/module/gps/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/module/gps/#arduino-ide","text":"To the complete code GPSRaw.ino , please click here . Note: The GPS module needs placed outdoors to be able to receive GPS signal #include M5Stack.h /* By default, GPS is connected with M5Core through UART2 */ HardwareSerial GPSRaw(2); void setup() { M5.begin(); GPSRaw.begin(9600);// GPS init Serial.println( hello ); termInit(); } void loop() { // put your main code here, to run repeatedly: if(Serial.available()) { int ch = Serial.read(); GPSRaw.write(ch); } if(GPSRaw.available()) { int ch = GPSRaw.read();// read GPS information Serial.write(ch); termPutchar(ch); } } After burnt the example code GPSRaw.ino , m5core and PC serial terminal will display following information Protocol Specification: Please refer to the u-blox 8 / u-blox M8 Receiver Description - Manual , The following table is a description of the xxRMC message in the NMEA protocol as an example.","title":"Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/module/gps/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/module/joystick/","text":"Module JOYSTICK {docsify-ignore-all} :memo: Description :octocat: Example \ud83d\uded2 Purchase Description JOYSTICK is a control column module. A joystick is an input device consisting of a stick that pivots on a base and reports its angle or direction to the device it is controlling. Same as ENCODER, it is compatible with FACE Kit. You can have it replace the keycoard panel inside the FACE kit. Through IIC you can get the offset data form (X, Y) axis, also the button status. You can customized the LED behavior as you like. JOYSTICK IIC address is 0x5E). Product Features 12 RGB Led IIC communication Simple API for programming Function Control single RGB /* Parameter: indexOfLED: 0 ~ 11 r, g, b: 0 ~ 254 */ void Led(int indexOfLED, int r, int g, int b){ Wire.beginTransmission(FACE_JOY_ADDR); Wire.write(indexOfLED); Wire.write(r); Wire.write(g); Wire.write(b); Wire.endTransmission(); } Read the offset of each direction void get_joystick_offset(void){ Wire.requestFrom(FACE_JOY_ADDR, 5); if (Wire.available()) { y_data_L = Wire.read(); y_data_H = Wire.read(); x_data_L = Wire.read(); x_data_H = Wire.read(); button_data = Wire.read();// Z(0: released 1: pressed) } Include 1x M5Stack JOYSTICK Module board 1x Joystick Bar Related Link Offical Video Forum The Firmware of inside MEGA328 Example Arduino IDE To the complete code faces_joystick.ino , click here \u3002 /* * faces_joystick.ino */ #include M5Stack.h #define FACE_JOY_ADDR 0X5E // declaration uint8_t x_data_L; uint8_t x_data_H; uint8_t y_data_L; uint8_t y_data_H; uint8_t button_data; uint16_t x_data; uint16_t y_data; // initialization M5.begin(); Wire.begin(); // get data from ENCONDER Wire.requestFrom(FACE_JOY_ADDR, 5); if (Wire.available()) { y_data_L = Wire.read(); y_data_H = Wire.read(); x_data_L = Wire.read(); x_data_H = Wire.read(); button_data = Wire.read();// Z(0: released 1: pressed) x_data = x_data_H 8 |x_data_L; y_data = y_data_H 8 |y_data_L; } // IIC send data, 4bytes Wire.beginTransmission(FACE_JOY_ADDR); Wire.write(indexOfLED); Wire.write(r); Wire.write(g); Wire.write(b); Wire.endTransmission();","title":"Module JOYSTICK {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/joystick/#module-joystick-docsify-ignore-all","text":":memo: Description :octocat: Example \ud83d\uded2 Purchase","title":"Module JOYSTICK {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/joystick/#description","text":"JOYSTICK is a control column module. A joystick is an input device consisting of a stick that pivots on a base and reports its angle or direction to the device it is controlling. Same as ENCODER, it is compatible with FACE Kit. You can have it replace the keycoard panel inside the FACE kit. Through IIC you can get the offset data form (X, Y) axis, also the button status. You can customized the LED behavior as you like. JOYSTICK IIC address is 0x5E).","title":"Description"},{"location":"tutorials/M5Stack/docs/en/module/joystick/#product-features","text":"12 RGB Led IIC communication Simple API for programming","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/module/joystick/#function","text":"Control single RGB /* Parameter: indexOfLED: 0 ~ 11 r, g, b: 0 ~ 254 */ void Led(int indexOfLED, int r, int g, int b){ Wire.beginTransmission(FACE_JOY_ADDR); Wire.write(indexOfLED); Wire.write(r); Wire.write(g); Wire.write(b); Wire.endTransmission(); } Read the offset of each direction void get_joystick_offset(void){ Wire.requestFrom(FACE_JOY_ADDR, 5); if (Wire.available()) { y_data_L = Wire.read(); y_data_H = Wire.read(); x_data_L = Wire.read(); x_data_H = Wire.read(); button_data = Wire.read();// Z(0: released 1: pressed) }","title":"Function"},{"location":"tutorials/M5Stack/docs/en/module/joystick/#include","text":"1x M5Stack JOYSTICK Module board 1x Joystick Bar","title":"Include"},{"location":"tutorials/M5Stack/docs/en/module/joystick/#related-link","text":"Offical Video Forum The Firmware of inside MEGA328","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/module/joystick/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/module/joystick/#arduino-ide","text":"To the complete code faces_joystick.ino , click here \u3002 /* * faces_joystick.ino */ #include M5Stack.h #define FACE_JOY_ADDR 0X5E // declaration uint8_t x_data_L; uint8_t x_data_H; uint8_t y_data_L; uint8_t y_data_H; uint8_t button_data; uint16_t x_data; uint16_t y_data; // initialization M5.begin(); Wire.begin(); // get data from ENCONDER Wire.requestFrom(FACE_JOY_ADDR, 5); if (Wire.available()) { y_data_L = Wire.read(); y_data_H = Wire.read(); x_data_L = Wire.read(); x_data_H = Wire.read(); button_data = Wire.read();// Z(0: released 1: pressed) x_data = x_data_H 8 |x_data_L; y_data = y_data_H 8 |y_data_L; } // IIC send data, 4bytes Wire.beginTransmission(FACE_JOY_ADDR); Wire.write(indexOfLED); Wire.write(r); Wire.write(g); Wire.write(b); Wire.endTransmission();","title":"Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/module/lego_plus/","text":"Module LEGO+ {docsify-ignore-all} :memo: Description :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description LEGO+ is a LEGO DC Motor Driver module. It's build with MEGA328 and L293DD, implemented 4 driver channels. A DC power input is designed for power supplement. Through M-BUS the DC in can automaticlly power the M5 core at top. Series Communication: IIC (0x56). LEGO motor is one of the Technic pieces form LEGO. The purpose of LEGO Technic is to create more advanced models with more complex technical functions, compared to the simpler brick-building properties of normal Lego. Product Features DC Power input: 6-12V DC Connector Type: XT60 (female) 4x LEGO motor port 2x IIC GROVE port (extend PORTA from M5 Core) L293DD: PUSH-PULL Driver Chip Include 1x LEGO+ module 1x 10cm LEGO cable 1x DC connector Related Link Offical Video Forum The Firmware of inside MEGA328 Example UIFlow To get the complete code, please click here \u3002 Schematic NOTE If you want to change the firmware inside MEGA328 chip which has implemented the motor driver code by default, you can overwrite through ISP port. Below shows the location of ISP port. Related Video LEGO+ - Build a tank","title":"Module LEGO+ {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/lego_plus/#module-lego-docsify-ignore-all","text":":memo: Description :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"Module LEGO+ {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/lego_plus/#description","text":"LEGO+ is a LEGO DC Motor Driver module. It's build with MEGA328 and L293DD, implemented 4 driver channels. A DC power input is designed for power supplement. Through M-BUS the DC in can automaticlly power the M5 core at top. Series Communication: IIC (0x56). LEGO motor is one of the Technic pieces form LEGO. The purpose of LEGO Technic is to create more advanced models with more complex technical functions, compared to the simpler brick-building properties of normal Lego.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/module/lego_plus/#product-features","text":"DC Power input: 6-12V DC Connector Type: XT60 (female) 4x LEGO motor port 2x IIC GROVE port (extend PORTA from M5 Core) L293DD: PUSH-PULL Driver Chip","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/module/lego_plus/#include","text":"1x LEGO+ module 1x 10cm LEGO cable 1x DC connector","title":"Include"},{"location":"tutorials/M5Stack/docs/en/module/lego_plus/#related-link","text":"Offical Video Forum The Firmware of inside MEGA328","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/module/lego_plus/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/module/lego_plus/#uiflow","text":"To get the complete code, please click here \u3002","title":"UIFlow"},{"location":"tutorials/M5Stack/docs/en/module/lego_plus/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/module/lego_plus/#note","text":"If you want to change the firmware inside MEGA328 chip which has implemented the motor driver code by default, you can overwrite through ISP port. Below shows the location of ISP port.","title":"NOTE"},{"location":"tutorials/M5Stack/docs/en/module/lego_plus/#related-video","text":"LEGO+ - Build a tank","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/module/lora/","text":"Module LORA {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description LoRa integrated LoRa Module Ra-02, designed and produced by Ai-Thinker. On the board has some extra space left over, so we give you a prototyping area, it's great for adding on your customized circult working with the LoRa Module. LoRa enables long-range transmissions (more than 10 km in rural areas) with low power consumption\uff0cThe technology is presented in two parts: LoRa, the physical layer and LoRaWAN (Long Range Wide Area Network), the upper layers. LoRa and LoRaWAN permit long-range connectivity for Internet of Things (IoT) devices in different types of industries. Product Features Lora Module: Ra-02 (by Ai-Thinker) Series Communication Protocol: SPI Universal Perboard Working Frequency: 433 MHz Supports FSK, GFSK, MSK, GMSK, LoRa \u2122 and OOK modulation modes Receive sensitivity: lowest to -141 dBm Programmable bit rate up to 300Kbps Build-in PCB Antenna External Antenna port Program platform: Arduino, Mrcropython, UIFlow(Blockly) Include 1x M5Stack LoRa Module Applications Automatic meter reading Home building automation Remote irrigation system Related Link Offical Video Forum LoRa Info (LoRa) LoRaWAN Regional Parameters","title":"Module LORA {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/lora/#module-lora-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Module LORA {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/lora/#description","text":"LoRa integrated LoRa Module Ra-02, designed and produced by Ai-Thinker. On the board has some extra space left over, so we give you a prototyping area, it's great for adding on your customized circult working with the LoRa Module. LoRa enables long-range transmissions (more than 10 km in rural areas) with low power consumption\uff0cThe technology is presented in two parts: LoRa, the physical layer and LoRaWAN (Long Range Wide Area Network), the upper layers. LoRa and LoRaWAN permit long-range connectivity for Internet of Things (IoT) devices in different types of industries.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/module/lora/#product-features","text":"Lora Module: Ra-02 (by Ai-Thinker) Series Communication Protocol: SPI Universal Perboard Working Frequency: 433 MHz Supports FSK, GFSK, MSK, GMSK, LoRa \u2122 and OOK modulation modes Receive sensitivity: lowest to -141 dBm Programmable bit rate up to 300Kbps Build-in PCB Antenna External Antenna port Program platform: Arduino, Mrcropython, UIFlow(Blockly)","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/module/lora/#include","text":"1x M5Stack LoRa Module","title":"Include"},{"location":"tutorials/M5Stack/docs/en/module/lora/#applications","text":"Automatic meter reading Home building automation Remote irrigation system","title":"Applications"},{"location":"tutorials/M5Stack/docs/en/module/lora/#related-link","text":"Offical Video Forum LoRa Info (LoRa) LoRaWAN Regional Parameters <!-- ?> If your board LCD can't display or has some other problem, we suggest you to add the two statements code followed by ``m5.begin();`` as shown below. Because GPIO5 who has connected NSS pin of LoRa module need be pull-up at the moment your board(or system) power on to prevent system's LCD can't display. pinMode(5,OUTPUT); digitalWrite(5,HIGH); m5.begin(); ``` -- ## Example ### Arduino IDE These are the point-to-point communication examples between two LORA modules. The LoRa nodes send and receive messages. * Blue string indicates send succeed. * Yellow string display the received messages. * Red string indicates initialization failed. *To get complete code, please click [here](https://github.com/m5stack/M5-ProductExampleCodes/tree/master/Module/LORA/Arduino)* ```arduino #include M5Stack.h #include M5LoRa.h //declaration String outgoing; // outgoing message byte msgCount = 0; // count of outgoing messages byte localAddress = 0xBB; // address of this device byte destination = 0xFF; // destination to send to //initialization M5.begin(); LoRa.setPins(); // set CS, reset, IRQ pin LoRa.begin(433E6); // initialize ratio at 915 MHz //send message void sendMessage(String outgoing) { LoRa.beginPacket(); // start packet LoRa.write(destination); // add destination address LoRa.write(localAddress); // add sender address LoRa.write(msgCount); // add message ID LoRa.write(outgoing.length()); // add payload length LoRa.print(outgoing); // add payload LoRa.endPacket(); // finish packet and send it msgCount++; // increment message ID } //receive message void onReceive(int packetSize) { if (packetSize == 0) return; // if there's no packet, return int recipient = LoRa.read(); // recipient address byte sender = LoRa.read(); // sender address byte incomingMsgId = LoRa.read(); // incoming msg ID byte incomingLength = LoRa.read(); // incoming msg length String incoming = ; while (LoRa.available()) { incoming += (char)LoRa.read(); } } onReceive(LoRa.parsePacket()); ## Schematic","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/module/lorawan/","text":"Module LoRaWAN {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description LoRaWAN build with RHF76-052 and optional Antennas. RHF76-052 is designed by Ai-Thinker, it is a LoRaWAN \u2122 UART modem compatible device, supports LoRaWAN communication. It's based on the RHF76-052 module and an embeded LoRaWAN stack. You can use M5 core as a host MCU to control this this modem with simple AT command or UART. Since LoRa defines the lower physical layer, the upper networking layers were lacking. LoRaWAN was developed to define the upper layers of the network. LoRaWAN is a media access control (MAC) layer protocol but acts mainly as a network layer protocol for managing communication between LPWAN gateways and end-node devices as a routing protocol,maintained by the LoRa Alliance. you can upgrade your work with a LoRa / LoRaWAN radio, so it can communicate over very long distances and extrmely low power consuming. By default, the UART configuration: \"9600, 8, n, 1\"(8 bits data, no parity, 1 stop bit) Notice: The 5 holes which are under the silk screen \"LoRaWAN\" are designed for upgrading the firmware of LoRaWAN module. Product Features Build-in PCB Antenna External Antenna Port LoRaWAN Module Specification Model: RHF76-052 Version: C - Single Band 868/915 MHz Radio IC: Semtech SX1276 Microcontroller: STM32L052C8T6 Package: SMD-33 Size: 28 x 23 x 3 mm Weight: 3.2g interface: UART Protocol: AT commands Embedded LoRaWAN protocol stack Frequency: 868/915 MHz TXOP: 20dBm @ 868MHz/915MHz Link budget: 160dB Antenna: external (via PCB pad) Supply voltage range: 1.8 ~ 3.6V Typical supply voltage: 3.3V Current usage in sleep mode: 1.45uA Protocol: LoRaWAN Work temperature: -40 ~+85C Storage temperature: -40 ~ +90C, 90% RH Certification: FCC, CE, IC, TELEC Pinouts (datasheet, p. 6-7): SPI USART I2C USB ADC 10 GPIO Include 1x M5Stack LoRaWAN Module Applications Automatic meter reading Home building automation Remote irrigation system PinMap RHF76-052_UART ESP32 Chip RXD GPIO17 TXD GPIO16 M5Stack Fire has occupied GPIO16 / 17 to connect with the PSRAM by default, it's conflict with TXD / RXD (GPIO16, GPIO17) in this module. Therefore, when using the LoRaWAN module with the M5Stack Fire, you might have to cut the TXD and RXD from GPS module and wire fly to another set of UART pin, if you gonna use the PSRAM. Related Link Offical Video Forum LoRaWAN Datasheet (LoRaWAN) LoRaWAN User Manual AT command for LoRaWAN LoRaWAN Regional Parameters Example Arduino IDE This is a exmaple of p2p LoRaWAN modules communication. Reference to 3.6 Point to Point communication with LoRa of LoRaWAN User Manual . Function: Press button B to set 433MHz as LoRaWAN operating frequency, and send \"Hello World\"; Press button C to set 868MHz as LoRaWAN operating frequency and send \"Hello World\"; Press button A to clear the screen. Note: Befor compiling this program, please extract LoRaWan_for_M5Stack.rar to this path C:\\Users\\ user_name \\Documents\\Arduino\\libraries . The below code is incomplete. To get the complete code, please click here . /* device_A.ino */ #include M5Stack.h #include LoRaWan.h #define SerialUSB Serial // declaration M5.begin(); SerialUSB.begin(9600); lora.init(); delay(2000); // must delay for lorawan power on // 433MHz frequency initialization lora.initP2PMode(433, SF12, BW500, 8, 8, 20); // 868MHz frequency initialization lora.initP2PMode(868, SF12, BW500, 8, 8, 20); // send string lora.transferPacketP2PMode( hello world ); // receive data short length = 0; short rssi = 0; memset(buffer, 0, 128); length = lora.receivePacketP2PMode(buffer, 128, rssi, 1); /* device_B.ino */ #include M5Stack.h #include LoRaWan.h #define SerialUSB Serial // declaration M5.begin(); SerialUSB.begin(9600); lora.init(); delay(2000); // must delay for lorawan power on // 433MHz frequency initialization lora.initP2PMode(433, SF12, BW500, 8, 8, 20); // 868MHz frequency initialization lora.initP2PMode(868, SF12, BW500, 8, 8, 20); // send string lora.transferPacketP2PMode( hello world ); // receive data short length = 0; short rssi = 0; memset(buffer, 0, 128); length = lora.receivePacketP2PMode(buffer, 128, rssi, 1); Schematic","title":"Module LoRaWAN {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/lorawan/#module-lorawan-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Module LoRaWAN {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/lorawan/#description","text":"LoRaWAN build with RHF76-052 and optional Antennas. RHF76-052 is designed by Ai-Thinker, it is a LoRaWAN \u2122 UART modem compatible device, supports LoRaWAN communication. It's based on the RHF76-052 module and an embeded LoRaWAN stack. You can use M5 core as a host MCU to control this this modem with simple AT command or UART. Since LoRa defines the lower physical layer, the upper networking layers were lacking. LoRaWAN was developed to define the upper layers of the network. LoRaWAN is a media access control (MAC) layer protocol but acts mainly as a network layer protocol for managing communication between LPWAN gateways and end-node devices as a routing protocol,maintained by the LoRa Alliance. you can upgrade your work with a LoRa / LoRaWAN radio, so it can communicate over very long distances and extrmely low power consuming. By default, the UART configuration: \"9600, 8, n, 1\"(8 bits data, no parity, 1 stop bit) Notice: The 5 holes which are under the silk screen \"LoRaWAN\" are designed for upgrading the firmware of LoRaWAN module.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/module/lorawan/#product-features","text":"Build-in PCB Antenna External Antenna Port","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/module/lorawan/#lorawan-module-specification","text":"Model: RHF76-052 Version: C - Single Band 868/915 MHz Radio IC: Semtech SX1276 Microcontroller: STM32L052C8T6 Package: SMD-33 Size: 28 x 23 x 3 mm Weight: 3.2g interface: UART Protocol: AT commands Embedded LoRaWAN protocol stack Frequency: 868/915 MHz TXOP: 20dBm @ 868MHz/915MHz Link budget: 160dB Antenna: external (via PCB pad) Supply voltage range: 1.8 ~ 3.6V Typical supply voltage: 3.3V Current usage in sleep mode: 1.45uA Protocol: LoRaWAN Work temperature: -40 ~+85C Storage temperature: -40 ~ +90C, 90% RH Certification: FCC, CE, IC, TELEC Pinouts (datasheet, p. 6-7): SPI USART I2C USB ADC 10 GPIO","title":"LoRaWAN Module Specification"},{"location":"tutorials/M5Stack/docs/en/module/lorawan/#include","text":"1x M5Stack LoRaWAN Module","title":"Include"},{"location":"tutorials/M5Stack/docs/en/module/lorawan/#applications","text":"Automatic meter reading Home building automation Remote irrigation system","title":"Applications"},{"location":"tutorials/M5Stack/docs/en/module/lorawan/#pinmap","text":"RHF76-052_UART ESP32 Chip RXD GPIO17 TXD GPIO16 M5Stack Fire has occupied GPIO16 / 17 to connect with the PSRAM by default, it's conflict with TXD / RXD (GPIO16, GPIO17) in this module. Therefore, when using the LoRaWAN module with the M5Stack Fire, you might have to cut the TXD and RXD from GPS module and wire fly to another set of UART pin, if you gonna use the PSRAM.","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/module/lorawan/#related-link","text":"Offical Video Forum LoRaWAN Datasheet (LoRaWAN) LoRaWAN User Manual AT command for LoRaWAN LoRaWAN Regional Parameters","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/module/lorawan/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/module/lorawan/#arduino-ide","text":"This is a exmaple of p2p LoRaWAN modules communication. Reference to 3.6 Point to Point communication with LoRa of LoRaWAN User Manual . Function: Press button B to set 433MHz as LoRaWAN operating frequency, and send \"Hello World\"; Press button C to set 868MHz as LoRaWAN operating frequency and send \"Hello World\"; Press button A to clear the screen. Note: Befor compiling this program, please extract LoRaWan_for_M5Stack.rar to this path C:\\Users\\ user_name \\Documents\\Arduino\\libraries . The below code is incomplete. To get the complete code, please click here . /* device_A.ino */ #include M5Stack.h #include LoRaWan.h #define SerialUSB Serial // declaration M5.begin(); SerialUSB.begin(9600); lora.init(); delay(2000); // must delay for lorawan power on // 433MHz frequency initialization lora.initP2PMode(433, SF12, BW500, 8, 8, 20); // 868MHz frequency initialization lora.initP2PMode(868, SF12, BW500, 8, 8, 20); // send string lora.transferPacketP2PMode( hello world ); // receive data short length = 0; short rssi = 0; memset(buffer, 0, 128); length = lora.receivePacketP2PMode(buffer, 128, rssi, 1); /* device_B.ino */ #include M5Stack.h #include LoRaWan.h #define SerialUSB Serial // declaration M5.begin(); SerialUSB.begin(9600); lora.init(); delay(2000); // must delay for lorawan power on // 433MHz frequency initialization lora.initP2PMode(433, SF12, BW500, 8, 8, 20); // 868MHz frequency initialization lora.initP2PMode(868, SF12, BW500, 8, 8, 20); // send string lora.transferPacketP2PMode( hello world ); // receive data short length = 0; short rssi = 0; memset(buffer, 0, 128); length = lora.receivePacketP2PMode(buffer, 128, rssi, 1);","title":"Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/module/lorawan/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/module/plc/","text":"PLC Module {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description The M5Stack PLC Module is a prototye industrial board, including RS484 adapter and electricity meter module. With DC9~24V power input, PLC-Proto motherboard reserved 6Pin or 4Pin relay output, digital input, communication interface etc. Feature Free DIY Programmable Logic Controller Individual package weight: 0.1kg (0.22lb.) Package size: 5cm * 5cm * 5cm (1.97in * 1.97in * 1.97in) Include 1x PLC-Proto Broad 1x RS485 module 1x PLC Plastic Enclosure 1x Slide Guide 1x Magnet 1x 6 Pin 3.96 Pitch Terminal 1x 4 Pin 3.96 Pitch Terminal 3x Hex Key 7x Electrical Terminal 1x Sticker Applications Programmable Logic Controller Programmable Motion Controller Digital Operation Processor Strong Electric Controller Related Link Offical Video Forum","title":"PLC Module {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/plc/#plc-module-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"PLC Module {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/plc/#description","text":"The M5Stack PLC Module is a prototye industrial board, including RS484 adapter and electricity meter module. With DC9~24V power input, PLC-Proto motherboard reserved 6Pin or 4Pin relay output, digital input, communication interface etc.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/module/plc/#feature","text":"Free DIY Programmable Logic Controller Individual package weight: 0.1kg (0.22lb.) Package size: 5cm * 5cm * 5cm (1.97in * 1.97in * 1.97in)","title":"Feature"},{"location":"tutorials/M5Stack/docs/en/module/plc/#include","text":"1x PLC-Proto Broad 1x RS485 module 1x PLC Plastic Enclosure 1x Slide Guide 1x Magnet 1x 6 Pin 3.96 Pitch Terminal 1x 4 Pin 3.96 Pitch Terminal 3x Hex Key 7x Electrical Terminal 1x Sticker","title":"Include"},{"location":"tutorials/M5Stack/docs/en/module/plc/#applications","text":"Programmable Logic Controller Programmable Motion Controller Digital Operation Processor Strong Electric Controller","title":"Applications"},{"location":"tutorials/M5Stack/docs/en/module/plc/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/module/plus/","text":"Module PLUS {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description PLUS is a enhanced M5 module comes with Lipo battery(500mAh), gear potentiometer, IR transmitter, extend PORT B(GPIO Port), PORT C(UART Port) from M5 core and a Microphone soldering pad. Powered with MEGA28, it could be a great upgrade of the hardwre resources by adding up PLUS to your work. Communication Protocol: IIC (0x62). Product Features 500mAh Battery Programmable gear potentiometer IR transmitter Including PORT B and PORT C Include 1x M5Stack PLUS Module Related Link Offical Video Forum The Firmware of inside MEGA328 Example Arduino IDE The Code below plus_read_encoder.ino is incomplete. To get the complete code, please click here . /* * Read data from the gear potentiometer * Send infrared light */ #include Arduino.h #include M5Stack.h #define IrPin 13 #define PLUS_ADDR 0x62 // declaration int32_t number = 0; uint8_t press = 0; // initialization M5.begin(true, false, false); Wire.begin(); ledcSetup(1, 38000, 10); ledcAttachPin(IrPin, 1);// IR Pin setting // read data Wire.requestFrom(PLUS_ADDR, 2); while(Wire.available()) { int8_t encode = Wire.read(); uint8_t press_n = Wire.read(); number += encode; if(press_n == 0xff) { press = 0;//encoder was pressed } else { press = 1;//encoder was releaed } } Schematic Related Video PLUS Case - Page flipping and selection of menu interface","title":"Module PLUS {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/plus/#module-plus-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"Module PLUS {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/plus/#description","text":"PLUS is a enhanced M5 module comes with Lipo battery(500mAh), gear potentiometer, IR transmitter, extend PORT B(GPIO Port), PORT C(UART Port) from M5 core and a Microphone soldering pad. Powered with MEGA28, it could be a great upgrade of the hardwre resources by adding up PLUS to your work. Communication Protocol: IIC (0x62).","title":"Description"},{"location":"tutorials/M5Stack/docs/en/module/plus/#product-features","text":"500mAh Battery Programmable gear potentiometer IR transmitter Including PORT B and PORT C","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/module/plus/#include","text":"1x M5Stack PLUS Module","title":"Include"},{"location":"tutorials/M5Stack/docs/en/module/plus/#related-link","text":"Offical Video Forum The Firmware of inside MEGA328","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/module/plus/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/module/plus/#arduino-ide","text":"The Code below plus_read_encoder.ino is incomplete. To get the complete code, please click here . /* * Read data from the gear potentiometer * Send infrared light */ #include Arduino.h #include M5Stack.h #define IrPin 13 #define PLUS_ADDR 0x62 // declaration int32_t number = 0; uint8_t press = 0; // initialization M5.begin(true, false, false); Wire.begin(); ledcSetup(1, 38000, 10); ledcAttachPin(IrPin, 1);// IR Pin setting // read data Wire.requestFrom(PLUS_ADDR, 2); while(Wire.available()) { int8_t encode = Wire.read(); uint8_t press_n = Wire.read(); number += encode; if(press_n == 0xff) { press = 0;//encoder was pressed } else { press = 1;//encoder was releaed } }","title":"Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/module/plus/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/module/plus/#related-video","text":"PLUS Case - Page flipping and selection of menu interface","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/module/proto/","text":"Module PROTO {docsify-ignore-all} :memo: Description \ud83d\uded2 Purchase Description PROTO is a pure universal prototype perboard. You can have the total freedom to make your own project as you want it, with prototyping perboards that allows laying out customized circult to interact with the M5 core via M-BUS. Product Features Hole Size: 0.039\" 1mm (CNC Drilled) Hole Pitch: 0.1 in - (2.54 mm) Entire Hole Quantity: 260 Holes Interface LINE0 LINE1 GND IO35(ADC1) GND IO36(ADC2) GND EN IO23(MOSI) IO25(DAC0) IO19(MISO) IO26(DAC1) IO18(EXT_SCK) 3V3 IO3(U1_RX) IO1(U1_TX) IO16(U1_RX) IO17(U2_TX) IO21(I2C_SDA) IO22(I2C_SCL) IO2 IO5 IO12(I2S_SCLK) IO13 IO15(I2S_OUT) IO0 HPOWR IO34 HPOWR 5V HPOWR BAT Include 1x M5Stack PROTO Module Related Link Offical Video Forum","title":"Module PROTO {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/proto/#module-proto-docsify-ignore-all","text":":memo: Description \ud83d\uded2 Purchase","title":"Module PROTO {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/proto/#description","text":"PROTO is a pure universal prototype perboard. You can have the total freedom to make your own project as you want it, with prototyping perboards that allows laying out customized circult to interact with the M5 core via M-BUS.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/module/proto/#product-features","text":"Hole Size: 0.039\" 1mm (CNC Drilled) Hole Pitch: 0.1 in - (2.54 mm) Entire Hole Quantity: 260 Holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/module/proto/#interface","text":"LINE0 LINE1 GND IO35(ADC1) GND IO36(ADC2) GND EN IO23(MOSI) IO25(DAC0) IO19(MISO) IO26(DAC1) IO18(EXT_SCK) 3V3 IO3(U1_RX) IO1(U1_TX) IO16(U1_RX) IO17(U2_TX) IO21(I2C_SDA) IO22(I2C_SCL) IO2 IO5 IO12(I2S_SCLK) IO13 IO15(I2S_OUT) IO0 HPOWR IO34 HPOWR 5V HPOWR BAT","title":"Interface"},{"location":"tutorials/M5Stack/docs/en/module/proto/#include","text":"1x M5Stack PROTO Module","title":"Include"},{"location":"tutorials/M5Stack/docs/en/module/proto/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/module/servo/","text":"Module SERVO {docsify-ignore-all} :clapper: Video Tutorial :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description SERVO is made to implement the bestest, easiest way to drive Servo motors. This M5 module will make quick work of your next Servo project! It is able to drive mutiple Servo motors, up to 12 channals. We also added an DC input for power supplement. Through M-BUS the DC in can automatically power the M5 core at top. Servo is powered by MEGA328 communicate via IIC(0x53). Product Features 12x servo ports DC power input: 6-12V DC Connector Type: XT60 (female) Include 1x M5Stack Servo Module 1x Common Male to XT60 Male DC convertor Applications Humanoid robot Bionic multi-joint robot Triaxial Camera Cradle Related Link Offical Video Forum The Firmware of inside MEGA328 Example 1. Arduino IDE The below code is incomplete(just for usage). If you want the complete code, please click here . #define SERVO_ADDR 0x53 //the IIC address of SERVO Module /* * control servo(CH channle) by us */ Wire.beginTransmission(SERVO_ADDR); Wire.write(CH|0x00); Wire.write(timeL); Wire.write(timeH); Wire.endTransmission(); /* * control servo(CH channle) by angle */ Wire.beginTransmission(SERVO_ADDR); Wire.write(CH|0x10); Wire.write(angle);//0-180\u00b0 Wire.endTransmission(); 2. UIFlow Wanna explore the easiest way of Servo programming?? Check out the Blockly Platform at UIFlow . TO get the complete code, please click here . Schematic Related Video Video Tutorial SERVO Case","title":"Module SERVO {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/servo/#module-servo-docsify-ignore-all","text":":clapper: Video Tutorial :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"Module SERVO {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/servo/#description","text":"SERVO is made to implement the bestest, easiest way to drive Servo motors. This M5 module will make quick work of your next Servo project! It is able to drive mutiple Servo motors, up to 12 channals. We also added an DC input for power supplement. Through M-BUS the DC in can automatically power the M5 core at top. Servo is powered by MEGA328 communicate via IIC(0x53).","title":"Description"},{"location":"tutorials/M5Stack/docs/en/module/servo/#product-features","text":"12x servo ports DC power input: 6-12V DC Connector Type: XT60 (female)","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/module/servo/#include","text":"1x M5Stack Servo Module 1x Common Male to XT60 Male DC convertor","title":"Include"},{"location":"tutorials/M5Stack/docs/en/module/servo/#applications","text":"Humanoid robot Bionic multi-joint robot Triaxial Camera Cradle","title":"Applications"},{"location":"tutorials/M5Stack/docs/en/module/servo/#related-link","text":"Offical Video Forum The Firmware of inside MEGA328","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/module/servo/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/module/servo/#1-arduino-ide","text":"The below code is incomplete(just for usage). If you want the complete code, please click here . #define SERVO_ADDR 0x53 //the IIC address of SERVO Module /* * control servo(CH channle) by us */ Wire.beginTransmission(SERVO_ADDR); Wire.write(CH|0x00); Wire.write(timeL); Wire.write(timeH); Wire.endTransmission(); /* * control servo(CH channle) by angle */ Wire.beginTransmission(SERVO_ADDR); Wire.write(CH|0x10); Wire.write(angle);//0-180\u00b0 Wire.endTransmission();","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/module/servo/#2-uiflow","text":"Wanna explore the easiest way of Servo programming?? Check out the Blockly Platform at UIFlow . TO get the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/module/servo/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/module/servo/#related-video","text":"Video Tutorial SERVO Case","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/module/sim800/","text":"Module SIM800L {docsify-ignore-all} :memo: Description :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description SIM800L is a cellular phone module, integrated SIM800L, a GSM/GPRS module, only cpmpatible with 2G network. if you want to integrate a cellular module into your design with vioce, text and SMS, this hand-solderable module is pretty nice! Series Protocol: UART Product Features 3.5 mm phone audio jack MIC (MIC is disable by default. To enable it, you will need to weld a 0 ohm resistor at MIC-EN ) Supply voltage: 3.8V - 4.2V Recommended supply voltage: 4V Power consumption: sleep mode 2.0mA idle mode 7.0mA GSM transmission (avg): 350 mA GSM transmission (peek): 2000mA Module size: 25 x 23 mm Interface: UART (max. 2.8V) and AT commands SIM card socket: microSIM (bottom side) Supported frequencies: Quad Band (850 / 950 / 1800 /1900 MHz) Antenna connector: IPX Spring Antenna on board Status signaling: LED Working temperature range: -40 do + 85 \u00b0 C PinMap SIM800 SIM800 Pin ESP32 Chip TXD U2RXD(GPIO16) RXD U2TXD(GPIO17) RST GPIO5 Include 1x M5Stack SIM800L Module Applications Nitrogen dioxide alarm Automatic Web Spider SMS-notifier Remote meter reading system Related Link Offical Video Forum Schematic Related Video SIM800L Case - Phone calling SIM800L Case - Receive SMS","title":"Module SIM800L  {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/sim800/#module-sim800l-docsify-ignore-all","text":":memo: Description :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"Module SIM800L  {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/sim800/#description","text":"SIM800L is a cellular phone module, integrated SIM800L, a GSM/GPRS module, only cpmpatible with 2G network. if you want to integrate a cellular module into your design with vioce, text and SMS, this hand-solderable module is pretty nice! Series Protocol: UART","title":"Description"},{"location":"tutorials/M5Stack/docs/en/module/sim800/#product-features","text":"3.5 mm phone audio jack MIC (MIC is disable by default. To enable it, you will need to weld a 0 ohm resistor at MIC-EN ) Supply voltage: 3.8V - 4.2V Recommended supply voltage: 4V Power consumption: sleep mode 2.0mA idle mode 7.0mA GSM transmission (avg): 350 mA GSM transmission (peek): 2000mA Module size: 25 x 23 mm Interface: UART (max. 2.8V) and AT commands SIM card socket: microSIM (bottom side) Supported frequencies: Quad Band (850 / 950 / 1800 /1900 MHz) Antenna connector: IPX Spring Antenna on board Status signaling: LED Working temperature range: -40 do + 85 \u00b0 C","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/module/sim800/#pinmap","text":"SIM800 SIM800 Pin ESP32 Chip TXD U2RXD(GPIO16) RXD U2TXD(GPIO17) RST GPIO5","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/module/sim800/#include","text":"1x M5Stack SIM800L Module","title":"Include"},{"location":"tutorials/M5Stack/docs/en/module/sim800/#applications","text":"Nitrogen dioxide alarm Automatic Web Spider SMS-notifier Remote meter reading system","title":"Applications"},{"location":"tutorials/M5Stack/docs/en/module/sim800/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/module/sim800/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/module/sim800/#related-video","text":"SIM800L Case - Phone calling SIM800L Case - Receive SMS","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/module/stepmotor/","text":"Module STEPMOTOR {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description STEPMOTOR is used for stepper motor control. It is perfect for any motion project as it can drive up to 3 Stepper motors with GRBL control. It is built with MEGA328P has been flashed GRBL firmware. The module comunicates with M5Core via I2C(0x70) Integrated 3 DRV8825, a simple but very powerful board that can control one bipolar stepper motor at the time and allows micro stepping up to 1/32 of a step. Product Features 9-24V Power Input 3-way stepper motors (X, Y, Z) Include 1x Step Motor Module 12V Power (Optional) 1x 5V FAN Module for heat dissipation (Optional) Applications DIY 3D Printer Simple Robot Arm Related Link Offical Video Forum The Firmware of inside MEGA328 Example 1. Arduino IDE The code below is incomplete. TO get complete code, please click here . /* If Button A was pressed, stepmotor will rotate back and forth at a time */ #include M5Stack.h #include Wire.h #define STEPMOTOR_I2C_ADDR 0x70 // initialization M5.begin(); Wire.begin(); // Controlling Protocol: // G n X distance Y distance Z distance F speed SendCommand(STEPMOTOR_I2C_ADDR, G1 X20Y20Z20 F500 ); SendCommand(STEPMOTOR_I2C_ADDR, G1 X0Y0Z0 F400 ); // Get Data from Module. Wire.requestFrom(STEPMOTOR_I2C_ADDR, 1); if (Wire.available() 0) { int u = Wire.read(); if (u != 0) Serial.write(u); } // Send Data to Module. while (Serial.available() 0) { int inByte = Serial.read(); SendByte(STEPMOTOR_I2C_ADDR, inByte); } 2. UIFlow Wanna explore the easiest way of Servo programming?? Check out the Blockly Platform at UIFlow . To get complete code, please click here . Schematic","title":"Module STEPMOTOR {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/stepmotor/#module-stepmotor-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Module STEPMOTOR {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/stepmotor/#description","text":"STEPMOTOR is used for stepper motor control. It is perfect for any motion project as it can drive up to 3 Stepper motors with GRBL control. It is built with MEGA328P has been flashed GRBL firmware. The module comunicates with M5Core via I2C(0x70) Integrated 3 DRV8825, a simple but very powerful board that can control one bipolar stepper motor at the time and allows micro stepping up to 1/32 of a step.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/module/stepmotor/#product-features","text":"9-24V Power Input 3-way stepper motors (X, Y, Z)","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/module/stepmotor/#include","text":"1x Step Motor Module 12V Power (Optional) 1x 5V FAN Module for heat dissipation (Optional)","title":"Include"},{"location":"tutorials/M5Stack/docs/en/module/stepmotor/#applications","text":"DIY 3D Printer Simple Robot Arm","title":"Applications"},{"location":"tutorials/M5Stack/docs/en/module/stepmotor/#related-link","text":"Offical Video Forum The Firmware of inside MEGA328","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/module/stepmotor/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/module/stepmotor/#1-arduino-ide","text":"The code below is incomplete. TO get complete code, please click here . /* If Button A was pressed, stepmotor will rotate back and forth at a time */ #include M5Stack.h #include Wire.h #define STEPMOTOR_I2C_ADDR 0x70 // initialization M5.begin(); Wire.begin(); // Controlling Protocol: // G n X distance Y distance Z distance F speed SendCommand(STEPMOTOR_I2C_ADDR, G1 X20Y20Z20 F500 ); SendCommand(STEPMOTOR_I2C_ADDR, G1 X0Y0Z0 F400 ); // Get Data from Module. Wire.requestFrom(STEPMOTOR_I2C_ADDR, 1); if (Wire.available() 0) { int u = Wire.read(); if (u != 0) Serial.write(u); } // Send Data to Module. while (Serial.available() 0) { int inByte = Serial.read(); SendByte(STEPMOTOR_I2C_ADDR, inByte); }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/module/stepmotor/#2-uiflow","text":"Wanna explore the easiest way of Servo programming?? Check out the Blockly Platform at UIFlow . To get complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/module/stepmotor/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/module/usb/","text":"Module USB {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description USB is a USB driver module, integrated MAX3421E which adds USB host or peripheral capability to any system with an SPI interface. Ever up for adding the standard USB features on your project? this M5 moudle is the perfect solution. Series Protocol: SPI Product Features 1x UAB stadard A port 10x extended GPIO pins extended 3v3, 5v GND Including 1x M5Stack USB Module Application USB keylogger Read and write U disk using M5Core Related Link Offical Video Forum Datasheet - MAX3421E Example To get complete code, please click here . NOTE: Before compile this example code, you need to download the corresponding USB library from here . Unzip and copy this library folder to Arduino library path.( This is my path C:\\Users\\ user_name \\Documents\\Arduino\\libraries ) Download the example usb_mouse.ino Plug the USB mouse into USB A port. Hold down the left button to draw white lines. Hold down the right button to draw green line. Press the middle wheel button to clear the screen. #include M5Stack.h #include SPI.h #include Usb.h #include hiduniversal.h #include hidboot.h #include usbhub.h #include M5Mouse.h // new objects USB Usb; USBHub Hub( Usb); HIDBoot USB_HID_PROTOCOL_MOUSE HidMouse( Usb); MouseRptParser Prs; // initialization M5.begin(); Usb.Init(); HidMouse.SetReportParser(0,(HIDReportParser*) Prs); // handle event coming from usb device Usb.Task(); if(Usb.getUsbTaskState() == USB_STATE_RUNNING) { Mouse_Pointer(mou_px, mou_py); mou_px = 0; mou_py = 0; /* left button pressed: draw white point */ if (mou_button == 1) M5.Lcd.drawCircle(StaPotX, StaPotY, 1, WHITE); /* right button pressed: draw green point */ if (mou_button == 2) M5.Lcd.drawCircle(StaPotX, StaPotY, 1, GREEN); /* middle button pressed: clear screen */ if (mou_button == 4) M5.Lcd.fillScreen(BLACK); } Schematic Related Video USB Case - Read USB device","title":"Module USB {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/usb/#module-usb-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"Module USB {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/module/usb/#description","text":"USB is a USB driver module, integrated MAX3421E which adds USB host or peripheral capability to any system with an SPI interface. Ever up for adding the standard USB features on your project? this M5 moudle is the perfect solution. Series Protocol: SPI","title":"Description"},{"location":"tutorials/M5Stack/docs/en/module/usb/#product-features","text":"1x UAB stadard A port 10x extended GPIO pins extended 3v3, 5v GND","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/module/usb/#including","text":"1x M5Stack USB Module","title":"Including"},{"location":"tutorials/M5Stack/docs/en/module/usb/#application","text":"USB keylogger Read and write U disk using M5Core","title":"Application"},{"location":"tutorials/M5Stack/docs/en/module/usb/#related-link","text":"Offical Video Forum Datasheet - MAX3421E","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/module/usb/#example","text":"To get complete code, please click here . NOTE: Before compile this example code, you need to download the corresponding USB library from here . Unzip and copy this library folder to Arduino library path.( This is my path C:\\Users\\ user_name \\Documents\\Arduino\\libraries ) Download the example usb_mouse.ino Plug the USB mouse into USB A port. Hold down the left button to draw white lines. Hold down the right button to draw green line. Press the middle wheel button to clear the screen. #include M5Stack.h #include SPI.h #include Usb.h #include hiduniversal.h #include hidboot.h #include usbhub.h #include M5Mouse.h // new objects USB Usb; USBHub Hub( Usb); HIDBoot USB_HID_PROTOCOL_MOUSE HidMouse( Usb); MouseRptParser Prs; // initialization M5.begin(); Usb.Init(); HidMouse.SetReportParser(0,(HIDReportParser*) Prs); // handle event coming from usb device Usb.Task(); if(Usb.getUsbTaskState() == USB_STATE_RUNNING) { Mouse_Pointer(mou_px, mou_py); mou_px = 0; mou_py = 0; /* left button pressed: draw white point */ if (mou_button == 1) M5.Lcd.drawCircle(StaPotX, StaPotY, 1, WHITE); /* right button pressed: draw green point */ if (mou_button == 2) M5.Lcd.drawCircle(StaPotX, StaPotY, 1, GREEN); /* middle button pressed: clear screen */ if (mou_button == 4) M5.Lcd.fillScreen(BLACK); }","title":"Example"},{"location":"tutorials/M5Stack/docs/en/module/usb/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/module/usb/#related-video","text":"USB Case - Read USB device","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/quick_start/bala/bala_quick_start/","text":"BALA Quick Start {docsify-ignore-all} ! For building a M5Bala program, you need prepare M5Stack Fire or M5GO White as master. Prepare Install Serial Driver - How to Establish Serial Connection Development Environment UIFlow Arduino IDE UIFlow Burn UIFlow firmware - How to Burn Firmware WiFi connection - How to Connect wifi using Core Find the location of POGO Pin, and stack M5Core over M5Bala wheel. Click the Red button on the side of M5Core (double click for shutdown). Click the button on the side of M5Bala Wheel for power on (double click for shutdown). Open UIFlow website, and switch programming language from Blockly to Python . Copy the following code to UIFlow and then click Download for running it. from m5stack import * from m5ui import * from m5bala import M5Bala import i2c_bus clear_bg(0x111111) m5bala = M5Bala(i2c_bus.get(i2c_bus.M_BUS)) btnA = M5Button(name= ButtonA , text= ButtonA , visibility=False) btnB = M5Button(name= ButtonB , text= ButtonB , visibility=False) btnC = M5Button(name= ButtonC , text= ButtonC , visibility=False) title0 = M5Title(title= Title , fgcolor=0xFFFFFF, bgcolor=0x0000FF) title0.setTitle('calirate start') wait(2) sampleCount = 2000 gyroXSum = 0 gyroYSum = 0 gyroZSum = 0 for _ in range(sampleCount): gyroXYZ = m5bala.imu.gyro gyroXSum += gyroXYZ[0] # X gyroYSum += gyroXYZ[1] # Y gyroZSum += gyroXYZ[2] # Z gyroXMean = gyroXSum / sampleCount gyroYMean = gyroYSum / sampleCount gyroZMean = gyroZSum / sampleCount m5bala.imu.setGyroOffsets(gyroXMean, gyroYMean, gyroZMean) title0.setTitle('balance start') while True: m5bala.balance() wait(0.001) Arduino IDE Setting Arduino development environment - Establish Serail Connection - Get Started with Ardino IDE Install m5stack library in Library Manager of Arduino IDE. Install NeoPixelBus library in Library Manager of Arduino IDE. Install MPU6050_tockn library in Library Manager of Arduino IDE. Confirm that M5Core has connected to PC successfully, then click Tools - Port for selecting the corresponding serial port on Arduino IDE. click Tools - Board: for selecting M5Stack-Core-ESP32 or M5Stack-Fire on Arduino IDE. Clone M5Bala , If you has not installed Git yet, click here for downloading please and install it. git clone --recursive https://github.com/m5stack/M5Bala.git Click Sketch - Include Library - Add .ZIP Library... for select M5Bala which has been cloned just now. Open a bala example: Click File - Examples - M5Bala - Basic . (Be careful that example Default_firmware has bug.) Execute","title":"BALA Quick Start {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/bala/bala_quick_start/#bala-quick-start-docsify-ignore-all","text":"! For building a M5Bala program, you need prepare M5Stack Fire or M5GO White as master.","title":"BALA Quick Start {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/bala/bala_quick_start/#prepare","text":"Install Serial Driver - How to Establish Serial Connection","title":"Prepare"},{"location":"tutorials/M5Stack/docs/en/quick_start/bala/bala_quick_start/#development-environment","text":"UIFlow Arduino IDE","title":"Development Environment"},{"location":"tutorials/M5Stack/docs/en/quick_start/bala/bala_quick_start/#uiflow","text":"Burn UIFlow firmware - How to Burn Firmware WiFi connection - How to Connect wifi using Core Find the location of POGO Pin, and stack M5Core over M5Bala wheel. Click the Red button on the side of M5Core (double click for shutdown). Click the button on the side of M5Bala Wheel for power on (double click for shutdown). Open UIFlow website, and switch programming language from Blockly to Python . Copy the following code to UIFlow and then click Download for running it. from m5stack import * from m5ui import * from m5bala import M5Bala import i2c_bus clear_bg(0x111111) m5bala = M5Bala(i2c_bus.get(i2c_bus.M_BUS)) btnA = M5Button(name= ButtonA , text= ButtonA , visibility=False) btnB = M5Button(name= ButtonB , text= ButtonB , visibility=False) btnC = M5Button(name= ButtonC , text= ButtonC , visibility=False) title0 = M5Title(title= Title , fgcolor=0xFFFFFF, bgcolor=0x0000FF) title0.setTitle('calirate start') wait(2) sampleCount = 2000 gyroXSum = 0 gyroYSum = 0 gyroZSum = 0 for _ in range(sampleCount): gyroXYZ = m5bala.imu.gyro gyroXSum += gyroXYZ[0] # X gyroYSum += gyroXYZ[1] # Y gyroZSum += gyroXYZ[2] # Z gyroXMean = gyroXSum / sampleCount gyroYMean = gyroYSum / sampleCount gyroZMean = gyroZSum / sampleCount m5bala.imu.setGyroOffsets(gyroXMean, gyroYMean, gyroZMean) title0.setTitle('balance start') while True: m5bala.balance() wait(0.001)","title":"UIFlow"},{"location":"tutorials/M5Stack/docs/en/quick_start/bala/bala_quick_start/#arduino-ide","text":"Setting Arduino development environment - Establish Serail Connection - Get Started with Ardino IDE Install m5stack library in Library Manager of Arduino IDE. Install NeoPixelBus library in Library Manager of Arduino IDE. Install MPU6050_tockn library in Library Manager of Arduino IDE. Confirm that M5Core has connected to PC successfully, then click Tools - Port for selecting the corresponding serial port on Arduino IDE. click Tools - Board: for selecting M5Stack-Core-ESP32 or M5Stack-Fire on Arduino IDE. Clone M5Bala , If you has not installed Git yet, click here for downloading please and install it. git clone --recursive https://github.com/m5stack/M5Bala.git Click Sketch - Include Library - Add .ZIP Library... for select M5Bala which has been cloned just now. Open a bala example: Click File - Examples - M5Bala - Basic . (Be careful that example Default_firmware has bug.) Execute","title":"Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/quick_start/faces/gameboy_burn_a_nes_game/","text":"Burn A NES Game {docsify-ignore-all} This document will help you for burning a gameboy game(NES file) so that you can play a game with GameBoy Keyboard. CONTENT Download firmware Burn Game file Reset you device Download firmware Download the gameboy simulator firmware named firmware.zip from Github . And unzip firmware.zip . Windows OS Mac OS Burn Game file Windows OS Open Flash Download Tools \u70b9\u51fb\u4e0b\u8f7d apply by Espressif, choose ESP32 DownloadTool option, choose 4 files, and execute those operations as the following pictures shown. ( choose firmware file, your serial port, erase and program flash ) Mac OS (1) install esptool Open terminal , execute this command pip install esptool (2) burn the game firmware Open terminal , go to the path where firmware.zip is located Execute the following commands in the terminal unzip firmware.zip cd firmware esptool.py erase_flash sh flash.sh Reset you device After reset FACES, enjoy your game now. ? Tip If you want another game, please change the Game file (.nes)","title":"Burn A NES Game {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/faces/gameboy_burn_a_nes_game/#burn-a-nes-game-docsify-ignore-all","text":"This document will help you for burning a gameboy game(NES file) so that you can play a game with GameBoy Keyboard.","title":"Burn A NES Game {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/faces/gameboy_burn_a_nes_game/#content","text":"Download firmware Burn Game file Reset you device","title":"CONTENT"},{"location":"tutorials/M5Stack/docs/en/quick_start/faces/gameboy_burn_a_nes_game/#download-firmware","text":"Download the gameboy simulator firmware named firmware.zip from Github . And unzip firmware.zip .","title":"Download firmware"},{"location":"tutorials/M5Stack/docs/en/quick_start/faces/gameboy_burn_a_nes_game/#windows-os","text":"","title":"Windows OS"},{"location":"tutorials/M5Stack/docs/en/quick_start/faces/gameboy_burn_a_nes_game/#mac-os","text":"","title":"Mac OS"},{"location":"tutorials/M5Stack/docs/en/quick_start/faces/gameboy_burn_a_nes_game/#burn-game-file","text":"","title":"Burn Game file"},{"location":"tutorials/M5Stack/docs/en/quick_start/faces/gameboy_burn_a_nes_game/#windows-os_1","text":"Open Flash Download Tools \u70b9\u51fb\u4e0b\u8f7d apply by Espressif, choose ESP32 DownloadTool option, choose 4 files, and execute those operations as the following pictures shown. ( choose firmware file, your serial port, erase and program flash )","title":"Windows OS"},{"location":"tutorials/M5Stack/docs/en/quick_start/faces/gameboy_burn_a_nes_game/#mac-os_1","text":"","title":"Mac OS"},{"location":"tutorials/M5Stack/docs/en/quick_start/faces/gameboy_burn_a_nes_game/#1-install-esptool","text":"Open terminal , execute this command pip install esptool","title":"(1) install esptool"},{"location":"tutorials/M5Stack/docs/en/quick_start/faces/gameboy_burn_a_nes_game/#2-burn-the-game-firmware","text":"Open terminal , go to the path where firmware.zip is located Execute the following commands in the terminal unzip firmware.zip cd firmware esptool.py erase_flash sh flash.sh","title":"(2) burn the game firmware"},{"location":"tutorials/M5Stack/docs/en/quick_start/faces/gameboy_burn_a_nes_game/#reset-you-device","text":"After reset FACES, enjoy your game now. ? Tip If you want another game, please change the Game file (.nes)","title":"Reset you device"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5camera/m5camera_quick_start/","text":"ESP32Cam/M5Camera Quick Start {docsify-ignore-all} :clapper: Video Tutorial :memo: Text Tutorial Text Tutorial It is really really out of the box. Your ESP32Cam/M5Camera will immediately run without any code after you power it. plug usb cable into ESP32Cam/M5Camera and open the serial terminal on your computer. Then waitting a few seconds, you connect to a AP named \" M5CAM \" with your computer(or mobile phone). And you open the browser on the computer(or mobile phone), enter a URL http://192.168.4.1 . At the moment, your can see the real-time transmission of video by ESP32Cam/M5Camera on the browser. Now, A WebCam you achieved successfully ! Note: ESP32Cam/M5Camera AP only can connect with one device at a time. Video Tutorial Firmware ESP32Cam Firmware: https://github.com/m5stack/m5stack-cam-psram/tree/NoPsram M5Camera(A model) Firmware: https://github.com/m5stack/m5stack-cam-psram/tree/master M5Camera(B model) Firmware: https://github.com/m5stack/m5stack-cam-psram/tree/master M5CameraX Firmware: https://github.com/m5stack/m5stack-cam-psram/tree/master M5CameraF Firmware: https://github.com/m5stack/m5stack-cam-psram/tree/FishEye","title":"ESP32Cam/M5Camera Quick Start {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5camera/m5camera_quick_start/#esp32camm5camera-quick-start-docsify-ignore-all","text":":clapper: Video Tutorial :memo: Text Tutorial","title":"ESP32Cam/M5Camera Quick Start {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5camera/m5camera_quick_start/#text-tutorial","text":"It is really really out of the box. Your ESP32Cam/M5Camera will immediately run without any code after you power it. plug usb cable into ESP32Cam/M5Camera and open the serial terminal on your computer. Then waitting a few seconds, you connect to a AP named \" M5CAM \" with your computer(or mobile phone). And you open the browser on the computer(or mobile phone), enter a URL http://192.168.4.1 . At the moment, your can see the real-time transmission of video by ESP32Cam/M5Camera on the browser. Now, A WebCam you achieved successfully ! Note: ESP32Cam/M5Camera AP only can connect with one device at a time.","title":"Text Tutorial"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5camera/m5camera_quick_start/#video-tutorial","text":"","title":"Video Tutorial"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5camera/m5camera_quick_start/#firmware","text":"ESP32Cam Firmware: https://github.com/m5stack/m5stack-cam-psram/tree/NoPsram M5Camera(A model) Firmware: https://github.com/m5stack/m5stack-cam-psram/tree/master M5Camera(B model) Firmware: https://github.com/m5stack/m5stack-cam-psram/tree/master M5CameraX Firmware: https://github.com/m5stack/m5stack-cam-psram/tree/master M5CameraF Firmware: https://github.com/m5stack/m5stack-cam-psram/tree/FishEye","title":"Firmware"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/","text":"M5Core Quick Start - Arduino Mac {docsify-ignore-all} Table of Contents 1. Install Arduino IDE 2. Install USB to Serial Driver 3. Install ESP32 Boards Manager 4. Install M5Stack Library 5. Example 6. Video Tutorial 1. Install Arduino IDE Open your browser, enter the official website of Arduino https://www.arduino.cc/en/Main/Software (1) click Mac OS X for downloading Arduino IDE (2) click JUST DOWNLOAD (3) Once the Arduino IDE is downloaded, you can double-click it to open it 2. Install USB to Serial Driver Open your browser, enter the official website of M5Stack https://m5stack.com/download (1) click Mac for downloading this installation package and then unzip this package (2) After unzipped this package, double click the disk image SiLabsUSBDriverDisk.dmg for installing (3) Check the serial port number /dev/tty.SLAB_USBtoUART Comfirm if the USB to Serial Driver was successfully installed already: Open Terminal , connect M5Core with PC through USB Type-C cable, and execute the following command for viewing serial port list. Disconnect M5Core device, and execute the just executed command to verify which port disappears from the list. The disappearing COM port is the serial port name corresponding to M5Core. Now, the serial port name is tty.SLAB_USBtoUART 3. Install ESP32 Boards Manager (1) Open IDE, click File - Peferences - Settings (2) Copy the following ESP32 Boards Manager url to Additional Boards Manager URLs: ESP32 Boards Manager url: https://dl.espressif.com/dl/package_esp32_index.json (3) Click Tools - Board: - Boards Manager... (4) Search ESP32 in the new pop-up dialog, then click Install 4. Install M5Stack Library (1) Open Arduino IDE, then Select Sketch - Include Library - Manage Libraries... (2) \u641c\u7d22 M5Stack \u5e76\u5b89\u88c5\uff0c\u5982\u4e0b\u56fe\u6240\u793a 5. Example This section for verifying whether you can program with Arduino or not. Now, The USB cable connects to M5Core, then select your serial port which is connected M5Core. Select a demo example, compile and upload (1) Select the correct board name and serial port name Open Arduino IDE, select Tools - Board - M5Stack-Core-ESP32 for your M5Core, Tools - Ports for serial port (2) Then select an example likes HelloWorld.ino Select File - Examples - M5Stack - Basics Select a example named HelloWorld . Upload it, and after this program was uploaded successfully, the screen on M5Core will display \"Hello World!\" Note Although most versions of MacOS have no problem with detecting the COM port, on some newer versions of High Sierra sometimes Slab_USBtoUART does not appear. If this is the case, after you connect the M5 open security and privacy in the system preferences and set it to permit . ? If you want to read more the permission about the CP2104 USB driver, visit the following link please. https://developer.apple.com/library/archive/technotes/tn2459/_index.html 6. Related Video Video tutorial for developing M5Core in Arduino","title":"M5Core Quick Start - Arduino Mac {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#m5core-quick-start-arduino-mac-docsify-ignore-all","text":"","title":"M5Core Quick Start - Arduino Mac {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#table-of-contents","text":"1. Install Arduino IDE 2. Install USB to Serial Driver 3. Install ESP32 Boards Manager 4. Install M5Stack Library 5. Example 6. Video Tutorial","title":"Table of Contents"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#1-install-arduino-ide","text":"Open your browser, enter the official website of Arduino https://www.arduino.cc/en/Main/Software","title":"1. Install Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#1-click-mac-os-x-for-downloading-arduino-ide","text":"","title":"(1) click Mac OS X for downloading Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#2-click-just-download","text":"","title":"(2) click JUST DOWNLOAD"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#3-once-the-arduino-ide-is-downloaded-you-can-double-click-it-to-open-it","text":"","title":"(3) Once the Arduino IDE is downloaded, you can double-click it to open it"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#2-install-usb-to-serial-driver","text":"Open your browser, enter the official website of M5Stack https://m5stack.com/download","title":"2. Install USB to Serial Driver"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#1-click-mac-for-downloading-this-installation-package-and-then-unzip-this-package","text":"","title":"(1) click Mac for downloading this installation package and then unzip this package"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#2-after-unzipped-this-package-double-click-the-disk-image-silabsusbdriverdiskdmg-for-installing","text":"","title":"(2) After unzipped this package, double click the disk image SiLabsUSBDriverDisk.dmg for installing"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#3-check-the-serial-port-number-devttyslab_usbtouart","text":"Comfirm if the USB to Serial Driver was successfully installed already: Open Terminal , connect M5Core with PC through USB Type-C cable, and execute the following command for viewing serial port list. Disconnect M5Core device, and execute the just executed command to verify which port disappears from the list. The disappearing COM port is the serial port name corresponding to M5Core. Now, the serial port name is tty.SLAB_USBtoUART","title":"(3) Check the serial port number /dev/tty.SLAB_USBtoUART"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#3-install-esp32-boards-manager","text":"","title":"3. Install ESP32 Boards Manager"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#1-open-ide-click-file-peferences-settings","text":"","title":"(1) Open IDE, click File-&gt;Peferences-&gt;Settings"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#2-copy-the-following-esp32-boards-manager-url-to-additional-boards-manager-urls","text":"ESP32 Boards Manager url: https://dl.espressif.com/dl/package_esp32_index.json","title":"(2) Copy the following ESP32 Boards Manager url to Additional Boards Manager URLs:"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#3-click-tools-board-boards-manager","text":"","title":"(3) Click Tools-&gt;Board:-&gt;Boards Manager..."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#4-search-esp32-in-the-new-pop-up-dialog-then-click-install","text":"","title":"(4) Search ESP32 in the new pop-up dialog, then click Install"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#4-install-m5stack-library","text":"","title":"4. Install M5Stack Library"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#1-open-arduino-ide-then-select-sketch-include-library-manage-libraries","text":"","title":"(1) Open Arduino IDE, then Select Sketch-&gt;Include Library-&gt;Manage Libraries..."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#2-m5stack","text":"","title":"(2) \u641c\u7d22 M5Stack \u5e76\u5b89\u88c5\uff0c\u5982\u4e0b\u56fe\u6240\u793a"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#5-example","text":"This section for verifying whether you can program with Arduino or not. Now, The USB cable connects to M5Core, then select your serial port which is connected M5Core. Select a demo example, compile and upload","title":"5. Example"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#1-select-the-correct-board-name-and-serial-port-name","text":"Open Arduino IDE, select Tools - Board - M5Stack-Core-ESP32 for your M5Core, Tools - Ports for serial port","title":"(1) Select the correct board name and serial port name"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#2-then-select-an-example-likes-helloworldino","text":"Select File - Examples - M5Stack - Basics Select a example named HelloWorld . Upload it, and after this program was uploaded successfully, the screen on M5Core will display \"Hello World!\"","title":"(2) Then select an example likes HelloWorld.ino"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#note","text":"Although most versions of MacOS have no problem with detecting the COM port, on some newer versions of High Sierra sometimes Slab_USBtoUART does not appear. If this is the case, after you connect the M5 open security and privacy in the system preferences and set it to permit . ? If you want to read more the permission about the CP2104 USB driver, visit the following link please. https://developer.apple.com/library/archive/technotes/tn2459/_index.html","title":"Note"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_MacOS/#6-related-video","text":"Video tutorial for developing M5Core in Arduino","title":"6. Related Video"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/","text":"M5Core Quick Start - Arduino Win {docsify-ignore-all} Table of Contents 1. Install Arduino IDE 2. Install USB to Serial Driver 3. Install ESP32 Boards Manager 4. Install M5Stack Library 5. Example 1. Install Arduino IDE Open your browser, enter the official website of Arduino https://www.arduino.cc/en/Main/Software (1) click Windows ZIP file for non admin install for downloading Arduino IDE (2) click JUST DOWNLOAD (3) To install IDE, double click Arduino executable file. Keep the default selection throughout this process, including the installation path is also the default. 2. Install USB to Serial Driver Open your browser, enter the official website of M5Stack https://m5stack.com/download (1) click Windows for downloading this installation package and then unzip this package. (2) According to your Windows operating system type, select the corresponding driver installation package 32-bit Windows operating system, choose CP210xVCPInstaller_x86_vx.x.x.x.exe 64-bit Windows operating system, choose CP210xVCPInstaller_x64_vx.x.x.x.exe (3) double click the executable file for installing. (4) Check the serial port number COMx To comfirm if the USB to Serial Driver was successfully installed already, Check the list of identified COM ports in the Windows Device Manager : Connect the Core to the computer via a USB Type-C cable, open Windows Device Manager , click Ports(COM LPT) for checking the list of identified COM ports. Disconnect M5Core device and connect it back, to verify which port disappears from the list and then shows back again. 3. Install ESP32 Boards Manager (1) Open IDE, click File - Peferences - Settings (2) Copy the following ESP32 Boards Manager url to Additional Boards Manager URLs: ESP32 Boards Manager url: https://dl.espressif.com/dl/package_esp32_index.json (3) Click Tools - Board: - Boards Manager... (4) Search ESP32 in the new pop-up dialog, then click Install 4. Install M5Stack Library (1) Open Arduino IDE, then Select Sketch - Include Library - Manage Libraries... (2) Search M5Stack and install it 5. Example This section for verifying whether you can program with Arduino or not. Now, The USB cable connects to M5Core, then select your serial port which is connected M5Core. Select a demo example, compile and upload (1) Execute a example likes FactoryTest.ino Select your board name, baudrate, the specified serial port: M5Stack-Core-ESP32, 921600, COM26(Now, my serial port which is connected with PC is COM26 ) (2) Then select an example likes FactoryTest.ino (3) Upload it (4) New a M5Stack program Open Arduino IDE, then new a .ino file, rename it as my_test.ino Copy the below code to my_test.ino #include M5Stack.h // the setup routine runs once when M5Stack starts up void setup(){ // Initialize the M5Stack object M5.begin(); // LCD display M5.Lcd.print( Hello World! ); M5.Lcd.print( M5Stack is running successfully! ); } // the loop routine runs over and over again forever void loop() { } compile it and upload, the M5Stack screen will show \"Hello World!\" \"M5Stack is running successfully!\"","title":"M5Core Quick Start - Arduino Win {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#m5core-quick-start-arduino-win-docsify-ignore-all","text":"","title":"M5Core Quick Start - Arduino Win {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#table-of-contents","text":"1. Install Arduino IDE 2. Install USB to Serial Driver 3. Install ESP32 Boards Manager 4. Install M5Stack Library 5. Example","title":"Table of Contents"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#1-install-arduino-ide","text":"Open your browser, enter the official website of Arduino https://www.arduino.cc/en/Main/Software","title":"1. Install Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#1-click-windows-zip-file-for-non-admin-install-for-downloading-arduino-ide","text":"","title":"(1) click Windows ZIP file for non admin install for downloading Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#2-click-just-download","text":"","title":"(2) click JUST DOWNLOAD"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#3-to-install-ide-double-click-arduino-executable-file-keep-the-default-selection-throughout-this-process-including-the-installation-path-is-also-the-default","text":"","title":"(3) To install IDE, double click Arduino executable file. Keep the default selection throughout this process, including the installation path is also the default."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#2-install-usb-to-serial-driver","text":"Open your browser, enter the official website of M5Stack https://m5stack.com/download","title":"2. Install USB to Serial Driver"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#1-click-windows-for-downloading-this-installation-package-and-then-unzip-this-package","text":"","title":"(1) click Windows for downloading this installation package and then unzip this package."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#2-according-to-your-windows-operating-system-type-select-the-corresponding-driver-installation-package","text":"32-bit Windows operating system, choose CP210xVCPInstaller_x86_vx.x.x.x.exe 64-bit Windows operating system, choose CP210xVCPInstaller_x64_vx.x.x.x.exe","title":"(2) According to your Windows operating system type, select the corresponding driver installation package"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#3-double-click-the-executable-file-for-installing","text":"","title":"(3) double click the executable file for installing."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#4-check-the-serial-port-number-comx","text":"To comfirm if the USB to Serial Driver was successfully installed already, Check the list of identified COM ports in the Windows Device Manager : Connect the Core to the computer via a USB Type-C cable, open Windows Device Manager , click Ports(COM LPT) for checking the list of identified COM ports. Disconnect M5Core device and connect it back, to verify which port disappears from the list and then shows back again.","title":"(4) Check the serial port number COMx"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#3-install-esp32-boards-manager","text":"","title":"3. Install ESP32 Boards Manager"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#1-open-ide-click-file-peferences-settings","text":"","title":"(1) Open IDE, click File-&gt;Peferences-&gt;Settings"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#2-copy-the-following-esp32-boards-manager-url-to-additional-boards-manager-urls","text":"ESP32 Boards Manager url: https://dl.espressif.com/dl/package_esp32_index.json","title":"(2) Copy the following ESP32 Boards Manager url to Additional Boards Manager URLs:"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#3-click-tools-board-boards-manager","text":"","title":"(3) Click Tools-&gt;Board:-&gt;Boards Manager..."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#4-search-esp32-in-the-new-pop-up-dialog-then-click-install","text":"","title":"(4) Search ESP32 in the new pop-up dialog, then click Install"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#4-install-m5stack-library","text":"","title":"4. Install M5Stack Library"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#1-open-arduino-ide-then-select-sketch-include-library-manage-libraries","text":"","title":"(1) Open Arduino IDE, then Select Sketch-&gt;Include Library-&gt;Manage Libraries..."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#2-search-m5stack-and-install-it","text":"","title":"(2) Search M5Stack and install it"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#5-example","text":"This section for verifying whether you can program with Arduino or not. Now, The USB cable connects to M5Core, then select your serial port which is connected M5Core. Select a demo example, compile and upload","title":"5. Example"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#1-execute-a-example-likes-factorytestino","text":"Select your board name, baudrate, the specified serial port: M5Stack-Core-ESP32, 921600, COM26(Now, my serial port which is connected with PC is COM26 )","title":"(1) Execute a example likes FactoryTest.ino"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#2-then-select-an-example-likes-factorytestino","text":"","title":"(2) Then select an example likes FactoryTest.ino"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#3-upload-it","text":"","title":"(3) Upload it"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_Arduino_Windows/#4-new-a-m5stack-program","text":"Open Arduino IDE, then new a .ino file, rename it as my_test.ino Copy the below code to my_test.ino #include M5Stack.h // the setup routine runs once when M5Stack starts up void setup(){ // Initialize the M5Stack object M5.begin(); // LCD display M5.Lcd.print( Hello World! ); M5.Lcd.print( M5Stack is running successfully! ); } // the loop routine runs over and over again forever void loop() { } compile it and upload, the M5Stack screen will show \"Hello World!\" \"M5Stack is running successfully!\"","title":"(4) New a M5Stack program"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/","text":"M5Core Quick Start - UIFlow {docsify-ignore-all} Table of Contents 1. Install USB to Serial Driver 2. Burn UIFlow Firmware 3. Wi-Fi Setting 4. Program 5. Video Tutorial 1. Install USB to Serial Driver Open your browser, enter the official website of M5Stack https://m5stack.com/download (1) click Windows for downloading this installation package and then unzip this package. (2) According to your Windows operating system type, select the corresponding driver installation package 32-bit Windows operating system, choose CP210xVCPInstaller_x86_vx.x.x.x.exe 64-bit Windows operating system, choose CP210xVCPInstaller_x64_vx.x.x.x.exe (3) double click the executable file for installing. (4) Check the serial port number COMx To comfirm if the USB to Serial Driver was successfully installed already, Check the list of identified COM ports in the Windows Device Manager : Connect the Core to the computer via a USB Type-C cable, open Windows Device Manager , click Ports(COM LPT) for checking the list of identified COM ports. Disconnect M5Core device and connect it back, to verify which port disappears from the list and then shows back again. 2. Burn UIFlow Firmware (1) Download M5Burner Access M5Stack Official Website , and download M5Burner (2) Burn the firmware Connect M5Core to the computer via the USB Type-C cable, unzip the M5Burner archive you just downloaded, and double-click the executable M5Burner.exe Select the serial number and 921600 baud rate that the board is connected to the computer, and select the latest version of UIFlow firmware. Click Burn for downloading UIFlow firmware The following interface appears, indicating that the firmware is successfully burned. 3. Wi-Fi Setting (1) Select SETUP After successfully burning the UIFlow firmware, click the red button in the upper left corner of the Core to restart the device. Once the Core is powered on, immediately click the C button that indicates you select the SETUP option on the screen for the network configuration. Then click on the middle button and select Link Server: Flow.m5stack.com . (2) Connect to AP Turn on Wi-Fi on your phone or computer, then connect to the M5Core hotspot AP displayed on the screen ( For example, the M5Stack-0d60 is now displayed ). After the connection is successful, open a browser and enter the URL 192.168.4.1 , then select Wi-Fi that can be connected to the network, enter the Wi-Fi password. ( Now, the networkable Wi-Fi is M5 ) (3) Connect to Wi-Fi After M5Core successfully connects to a networkable Wi-Fi (here M5), the screen will display APIKEY and the QR code that can access the UIFlow webpage. Description of APIKEY: APIKEY is the device unique identifier. As long as the current UIFlow is connected to which device's APIKEY, The programming code will be downloaded to that device. The status of the small dot on the screen: Green means M5Core successfully connected to M5Stack Server, that is online status Red means be offline status 4. Program (1) Connect to UIFlow Now scan the QR code on the M5Core with your phone or tablet, or if you are programming with a computer, enter the URL flow.m5stack.com on your computer's browser Every time before you upload the code to M5Core through UIFlow, make sure that UIFlow is connected to the M5Core you want to program. So you need to click on the gear in the upper right corner of the UIFlow IDE page and enter APIKEY on your M5Core screen in the pop-up dialog box. Click Save , then UIFlow will connect to M5Core. Now you can start programming with UIFlow! (2) Programming example a. draw a UI Drag and drop the 4 controls in the upper left corner of the UIFlow IDE to the UI interface of M5Stack Core and click the Run button in the upper right corner of the page to execute the effect. b. writing a Blockly program Drag the Set emoji map in0 block from the Emoji category on the left to the code area of Blockly and click the Run button. The link of source coce: https://github.com/m5stack/M5-ProductExampleCodes/blob/master/Core/M5_draw_heart.m5f c. writing a MicroPython program Copy the following code into the Python editing area, then click Run in the top right corner to execute the code. from m5stack import * from m5ui import * clear_bg(0x111111) btnA = M5Button(name='ButtonA', text='ButtonA', visibility=False) btnB = M5Button(name='ButtonB', text='ButtonB', visibility=False) btnC = M5Button(name='ButtonC', text='ButtonC', visibility=False) lcd.print( Hello M5Stack ) At this time, the word 'Hello M5Stack` will be printed on the M5Core screen. 5. Related Video UIFlow Overview Video tutorial for developing M5Core in UIFlow","title":"M5Core Quick Start - UIFlow {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#m5core-quick-start-uiflow-docsify-ignore-all","text":"","title":"M5Core Quick Start - UIFlow {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#table-of-contents","text":"1. Install USB to Serial Driver 2. Burn UIFlow Firmware 3. Wi-Fi Setting 4. Program 5. Video Tutorial","title":"Table of Contents"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#1-install-usb-to-serial-driver","text":"Open your browser, enter the official website of M5Stack https://m5stack.com/download","title":"1. Install USB to Serial Driver"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#1-click-windows-for-downloading-this-installation-package-and-then-unzip-this-package","text":"","title":"(1) click Windows for downloading this installation package and then unzip this package."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#2-according-to-your-windows-operating-system-type-select-the-corresponding-driver-installation-package","text":"32-bit Windows operating system, choose CP210xVCPInstaller_x86_vx.x.x.x.exe 64-bit Windows operating system, choose CP210xVCPInstaller_x64_vx.x.x.x.exe","title":"(2) According to your Windows operating system type, select the corresponding driver installation package"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#3-double-click-the-executable-file-for-installing","text":"","title":"(3) double click the executable file for installing."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#4-check-the-serial-port-number-comx","text":"To comfirm if the USB to Serial Driver was successfully installed already, Check the list of identified COM ports in the Windows Device Manager : Connect the Core to the computer via a USB Type-C cable, open Windows Device Manager , click Ports(COM LPT) for checking the list of identified COM ports. Disconnect M5Core device and connect it back, to verify which port disappears from the list and then shows back again.","title":"(4) Check the serial port number COMx"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#2-burn-uiflow-firmware","text":"","title":"2. Burn UIFlow Firmware"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#1-download-m5burner","text":"Access M5Stack Official Website , and download M5Burner","title":"(1) Download M5Burner"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#2-burn-the-firmware","text":"Connect M5Core to the computer via the USB Type-C cable, unzip the M5Burner archive you just downloaded, and double-click the executable M5Burner.exe Select the serial number and 921600 baud rate that the board is connected to the computer, and select the latest version of UIFlow firmware. Click Burn for downloading UIFlow firmware The following interface appears, indicating that the firmware is successfully burned.","title":"(2) Burn the firmware"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#3-wi-fi-setting","text":"","title":"3. Wi-Fi Setting"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#1-select-setup","text":"After successfully burning the UIFlow firmware, click the red button in the upper left corner of the Core to restart the device. Once the Core is powered on, immediately click the C button that indicates you select the SETUP option on the screen for the network configuration. Then click on the middle button and select Link Server: Flow.m5stack.com .","title":"(1) Select SETUP"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#2-connect-to-ap","text":"Turn on Wi-Fi on your phone or computer, then connect to the M5Core hotspot AP displayed on the screen ( For example, the M5Stack-0d60 is now displayed ). After the connection is successful, open a browser and enter the URL 192.168.4.1 , then select Wi-Fi that can be connected to the network, enter the Wi-Fi password. ( Now, the networkable Wi-Fi is M5 )","title":"(2) Connect to AP"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#3-connect-to-wi-fi","text":"After M5Core successfully connects to a networkable Wi-Fi (here M5), the screen will display APIKEY and the QR code that can access the UIFlow webpage. Description of APIKEY: APIKEY is the device unique identifier. As long as the current UIFlow is connected to which device's APIKEY, The programming code will be downloaded to that device. The status of the small dot on the screen: Green means M5Core successfully connected to M5Stack Server, that is online status Red means be offline status","title":"(3) Connect to Wi-Fi"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#4-program","text":"","title":"4. Program"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#1-connect-to-uiflow","text":"Now scan the QR code on the M5Core with your phone or tablet, or if you are programming with a computer, enter the URL flow.m5stack.com on your computer's browser Every time before you upload the code to M5Core through UIFlow, make sure that UIFlow is connected to the M5Core you want to program. So you need to click on the gear in the upper right corner of the UIFlow IDE page and enter APIKEY on your M5Core screen in the pop-up dialog box. Click Save , then UIFlow will connect to M5Core. Now you can start programming with UIFlow!","title":"(1) Connect to UIFlow"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#2-programming-example","text":"","title":"(2) Programming example"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#a-draw-a-ui","text":"Drag and drop the 4 controls in the upper left corner of the UIFlow IDE to the UI interface of M5Stack Core and click the Run button in the upper right corner of the page to execute the effect.","title":"a. draw a UI"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#b-writing-a-blockly-program","text":"Drag the Set emoji map in0 block from the Emoji category on the left to the code area of Blockly and click the Run button. The link of source coce: https://github.com/m5stack/M5-ProductExampleCodes/blob/master/Core/M5_draw_heart.m5f","title":"b. writing a Blockly program"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#c-writing-a-micropython-program","text":"Copy the following code into the Python editing area, then click Run in the top right corner to execute the code. from m5stack import * from m5ui import * clear_bg(0x111111) btnA = M5Button(name='ButtonA', text='ButtonA', visibility=False) btnB = M5Button(name='ButtonB', text='ButtonB', visibility=False) btnC = M5Button(name='ButtonC', text='ButtonC', visibility=False) lcd.print( Hello M5Stack ) At this time, the word 'Hello M5Stack` will be printed on the M5Core screen.","title":"c. writing a MicroPython program"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython/#5-related-video","text":"UIFlow Overview Video tutorial for developing M5Core in UIFlow","title":"5. Related Video"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython_m5cloud/","text":"M5Core Quick Start - M5Cloud {docsify-ignore-all} ? If it's first time to use M5Core or you want to change the networkable AP that means the Core can't access http://cloud.m5stack.com , you need visit this article for setting wifi How to connect wifi using Core with M5Cloud . By default, we consider your M5Core has been connected with the networkable AP successfully. And the screen shows like this figure below. CONTENT Connect to M5Cloud Binding device Program with Core 1. Connect to M5Cloud Now If you want to program the M5 from your computer, enter the url shown at the top of the screen cloud.m5stack.com It will show as following figure. Now, register a account. 2. Binding device Press Device - Add buttom on M5Cloud IDE for binding M5Stack board to your account.(Now, my check code is 052879 ) At the moment, you can program it through Python as shown below. 3. Program with Core a. New a Project a. Code it Now, let's get started with FACES Kit. After creating a new project, add a file named faces.py as a python module. Then copy following code into faces.py and main.py, and save they. File name: faces.py M5Stack MicroPython FACES keyboard I2C driver class Faces: def __init__(self, i2c=None): if i2c == None: from machine import I2C, Pin self.i2c = I2C(sda=21, scl=22) else: self.i2c = i2c self.addr = 0x08 self.cb = None def read(self): return self.i2c.readfrom(self.addr, 1) def _callback(self, pin): from machine import Pin if pin == Pin(5): self.cb(self.read()) def callback(self, cb): from machine import Pin self.pin = Pin(5) self.pin.init(Pin.IN) self.pin.irq(trigger=Pin.IRQ_FALLING, handler=self._callback) self.cb = cb File name: main.py from m5stack import * from faces import Faces keyboard = Faces() # read once print( Key value: , end='') print(keyboard.read()) # callback def keyboard_cb(value): print( Key value: , end='') print(value) lcd.print(value) keyboard.callback(keyboard_cb) Now, upload and run it! Complete The function of This demostration is that screen and serial terminal will display the value of the key you pressed. Now, I press the first line of QWERTY Keyboard. (\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\")","title":"M5Core Quick Start - M5Cloud {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython_m5cloud/#m5core-quick-start-m5cloud-docsify-ignore-all","text":"? If it's first time to use M5Core or you want to change the networkable AP that means the Core can't access http://cloud.m5stack.com , you need visit this article for setting wifi How to connect wifi using Core with M5Cloud . By default, we consider your M5Core has been connected with the networkable AP successfully. And the screen shows like this figure below.","title":"M5Core Quick Start - M5Cloud {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython_m5cloud/#content","text":"Connect to M5Cloud Binding device Program with Core","title":"CONTENT"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython_m5cloud/#1-connect-to-m5cloud","text":"Now If you want to program the M5 from your computer, enter the url shown at the top of the screen cloud.m5stack.com It will show as following figure. Now, register a account.","title":"1. Connect to M5Cloud"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython_m5cloud/#2-binding-device","text":"Press Device - Add buttom on M5Cloud IDE for binding M5Stack board to your account.(Now, my check code is 052879 ) At the moment, you can program it through Python as shown below.","title":"2. Binding device"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython_m5cloud/#3-program-with-core","text":"","title":"3. Program with Core"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython_m5cloud/#a-new-a-project","text":"","title":"a. New a Project"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython_m5cloud/#a-code-it","text":"Now, let's get started with FACES Kit. After creating a new project, add a file named faces.py as a python module. Then copy following code into faces.py and main.py, and save they. File name: faces.py M5Stack MicroPython FACES keyboard I2C driver class Faces: def __init__(self, i2c=None): if i2c == None: from machine import I2C, Pin self.i2c = I2C(sda=21, scl=22) else: self.i2c = i2c self.addr = 0x08 self.cb = None def read(self): return self.i2c.readfrom(self.addr, 1) def _callback(self, pin): from machine import Pin if pin == Pin(5): self.cb(self.read()) def callback(self, cb): from machine import Pin self.pin = Pin(5) self.pin.init(Pin.IN) self.pin.irq(trigger=Pin.IRQ_FALLING, handler=self._callback) self.cb = cb File name: main.py from m5stack import * from faces import Faces keyboard = Faces() # read once print( Key value: , end='') print(keyboard.read()) # callback def keyboard_cb(value): print( Key value: , end='') print(value) lcd.print(value) keyboard.callback(keyboard_cb) Now, upload and run it!","title":"a. Code it"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_get_started_MicroPython_m5cloud/#complete","text":"The function of This demostration is that screen and serial terminal will display the value of the key you pressed. Now, I press the first line of QWERTY Keyboard. (\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\")","title":"Complete"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_quick_start/","text":"M5Core Get Started {docsify-ignore-all} Pick up your programming mode below for getting started Arduino-MacOS Arduino-Windows UIFlow","title":"M5Core Get Started {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5core/m5stack_core_quick_start/#m5core-get-started-docsify-ignore-all","text":"Pick up your programming mode below for getting started Arduino-MacOS Arduino-Windows UIFlow","title":"M5Core Get Started {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start/","text":"M5Stick Quick Start {docsify-ignore-all} Pick up your programming mode below for getting started Arduino-MacOS Arduino-Windows UIFlow","title":"M5Stick Quick Start {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start/#m5stick-quick-start-docsify-ignore-all","text":"Pick up your programming mode below for getting started Arduino-MacOS Arduino-Windows UIFlow","title":"M5Stick Quick Start {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/","text":"M5Stick Quick Start - Arduino Mac {docsify-ignore-all} Table of Contents 1. Install Arduino IDE 2. Install USB to Serial Driver 3. Install ESP32 Boards Manager 4. Install M5Stack Library 5. Install U8g2 Library 6. Example 1. Install Arduino IDE Open your browser, enter the official website of Arduino https://www.arduino.cc/en/Main/Software (1) click Mac OS X for downloading Arduino IDE (2) click JUST DOWNLOAD (3) Once the Arduino IDE is downloaded, you can double-click it to open it 2. Install USB to Serial Driver Open your browser, enter the official website of M5Stack https://m5stack.com/download (1) click Mac for downloading this installation package and then unzip this package (2) After unzipped this package, double click the disk image SiLabsUSBDriverDisk.dmg for installing (3) Check the serial port number /dev/tty.SLAB_USBtoUART Comfirm if the USB to Serial Driver was successfully installed already: Open Terminal , connect M5Core with PC through USB Type-C cable, and execute the following command for viewing serial port list. Disconnect M5Core device, and execute the just executed command to verify which port disappears from the list. The disappearing COM port is the serial port name corresponding to M5Core. Now, the serial port name is tty.SLAB_USBtoUART 3. Install ESP32 Boards Manager (1) Open IDE, click File - Peferences - Settings (2) Copy the following ESP32 Boards Manager url to Additional Boards Manager URLs: ESP32 Boards Manager url: https://dl.espressif.com/dl/package_esp32_index.json (3) Click Tools - Board: - Boards Manager... (4) Search ESP32 in the new pop-up dialog, then click Install 4. Install M5Stack Library (1) Open Arduino IDE, then Select Sketch - Include Library - Manage Libraries... (2) Search M5Stack and install it 5. Install U8g2 Library (1) Open Arduino IDE, then Select Sketch - Include Library - Manage Libraries... , search U8g2 and install it 6. Example The USB cable connects to M5Stick built in MPU9250 , then select your serial port which is connected the M5Stick. Select a demo example, compile and upload (1) Select your board and the serial port Start up Arduino IDE, and click Tools - Boards - M5Stack-Core-ESP32 to select your board Click Tools - Ports - to select the serial port which is connected with M5Stick (2) Select an example Click File- Examples . Here are some test programs in M5Stack - Stick Try to open a sketch called FactoryTest inside Basics. Compile it and upload, the M5Stick screen will show \"Hello World! Exist\"\" The button located at the bottom left of stick is the power button, click to turn it on, press again to reset when running. If you want to let stick enter deep sleep status, you need to press the power button twice quickly. Note Although most versions of MacOS have no problem with detecting the COM port, on some newer versions of High Sierra sometimes Slab_USBtoUART does not appear. If this is the case, after you connect the M5 open security and privacy in the system preferences and set it to permit . ? If you want to read more the permission about the CP2104 USB driver, visit the following link please. https://developer.apple.com/library/archive/technotes/tn2459/_index.html","title":"M5Stick Quick Start - Arduino Mac {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#m5stick-quick-start-arduino-mac-docsify-ignore-all","text":"","title":"M5Stick Quick Start - Arduino Mac {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#table-of-contents","text":"1. Install Arduino IDE 2. Install USB to Serial Driver 3. Install ESP32 Boards Manager 4. Install M5Stack Library 5. Install U8g2 Library 6. Example","title":"Table of Contents"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#1-install-arduino-ide","text":"Open your browser, enter the official website of Arduino https://www.arduino.cc/en/Main/Software","title":"1. Install Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#1-click-mac-os-x-for-downloading-arduino-ide","text":"","title":"(1) click Mac OS X for downloading Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#2-click-just-download","text":"","title":"(2) click JUST DOWNLOAD"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#3-once-the-arduino-ide-is-downloaded-you-can-double-click-it-to-open-it","text":"","title":"(3) Once the Arduino IDE is downloaded, you can double-click it to open it"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#2-install-usb-to-serial-driver","text":"Open your browser, enter the official website of M5Stack https://m5stack.com/download","title":"2. Install USB to Serial Driver"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#1-click-mac-for-downloading-this-installation-package-and-then-unzip-this-package","text":"","title":"(1) click Mac for downloading this installation package and then unzip this package"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#2-after-unzipped-this-package-double-click-the-disk-image-silabsusbdriverdiskdmg-for-installing","text":"","title":"(2) After unzipped this package, double click the disk image SiLabsUSBDriverDisk.dmg for installing"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#3-check-the-serial-port-number-devttyslab_usbtouart","text":"Comfirm if the USB to Serial Driver was successfully installed already: Open Terminal , connect M5Core with PC through USB Type-C cable, and execute the following command for viewing serial port list. Disconnect M5Core device, and execute the just executed command to verify which port disappears from the list. The disappearing COM port is the serial port name corresponding to M5Core. Now, the serial port name is tty.SLAB_USBtoUART","title":"(3) Check the serial port number /dev/tty.SLAB_USBtoUART"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#3-install-esp32-boards-manager","text":"","title":"3. Install ESP32 Boards Manager"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#1-open-ide-click-file-peferences-settings","text":"","title":"(1) Open IDE, click File-&gt;Peferences-&gt;Settings"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#2-copy-the-following-esp32-boards-manager-url-to-additional-boards-manager-urls","text":"ESP32 Boards Manager url: https://dl.espressif.com/dl/package_esp32_index.json","title":"(2) Copy the following ESP32 Boards Manager url to Additional Boards Manager URLs:"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#3-click-tools-board-boards-manager","text":"","title":"(3) Click Tools-&gt;Board:-&gt;Boards Manager..."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#4-search-esp32-in-the-new-pop-up-dialog-then-click-install","text":"","title":"(4) Search ESP32 in the new pop-up dialog, then click Install"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#4-install-m5stack-library","text":"","title":"4. Install M5Stack Library"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#1-open-arduino-ide-then-select-sketch-include-library-manage-libraries","text":"","title":"(1) Open Arduino IDE, then Select Sketch-&gt;Include Library-&gt;Manage Libraries..."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#2-search-m5stack-and-install-it","text":"","title":"(2) Search M5Stack and install it"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#5-install-u8g2-library","text":"","title":"5. Install U8g2 Library"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#1-open-arduino-ide-then-select-sketch-include-library-manage-libraries-search-u8g2-and-install-it","text":"","title":"(1) Open Arduino IDE, then Select Sketch-&gt;Include Library-&gt;Manage Libraries..., search U8g2 and install it"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#6-example","text":"The USB cable connects to M5Stick built in MPU9250 , then select your serial port which is connected the M5Stick. Select a demo example, compile and upload","title":"6. Example"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#1-select-your-board-and-the-serial-port","text":"Start up Arduino IDE, and click Tools - Boards - M5Stack-Core-ESP32 to select your board Click Tools - Ports - to select the serial port which is connected with M5Stick","title":"(1) Select your board and the serial port"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#2-select-an-example","text":"Click File- Examples . Here are some test programs in M5Stack - Stick Try to open a sketch called FactoryTest inside Basics. Compile it and upload, the M5Stick screen will show \"Hello World! Exist\"\" The button located at the bottom left of stick is the power button, click to turn it on, press again to reset when running. If you want to let stick enter deep sleep status, you need to press the power button twice quickly.","title":"(2) Select an example"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_MacOS/#note","text":"Although most versions of MacOS have no problem with detecting the COM port, on some newer versions of High Sierra sometimes Slab_USBtoUART does not appear. If this is the case, after you connect the M5 open security and privacy in the system preferences and set it to permit . ? If you want to read more the permission about the CP2104 USB driver, visit the following link please. https://developer.apple.com/library/archive/technotes/tn2459/_index.html","title":"Note"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/","text":"M5Stick Quick Start - Arduino Win {docsify-ignore-all} Table of Contents 1. Install Arduino IDE 2. Install USB to Serial Driver 3. Install ESP32 Boards Manager 4. Install M5Stack Library 5. Install U8g2 Library 6. Example 1. Install Arduino IDE Open your browser, enter the official website of Arduino https://www.arduino.cc/en/Main/Software (1) click Windows ZIP file for non admin install for downloading Arduino IDE (2) click JUST DOWNLOAD (3) To install IDE, double click Arduino executable file. Keep the default selection throughout this process, including the installation path is also the default. 2. Install USB to Serial Driver Open your browser, enter the official website of M5Stack https://m5stack.com/download (1) click Windows for downloading this installation package and then unzip this package. (2) According to your Windows operating system type, select the corresponding driver installation package 32-bit Windows operating system, choose CP210xVCPInstaller_x86_vx.x.x.x.exe 64-bit Windows operating system, choose CP210xVCPInstaller_x64_vx.x.x.x.exe (3) double click the executable file for installing. (4) Check the serial port number COMx To comfirm if the USB to Serial Driver was successfully installed already, Check the list of identified COM ports in the Windows Device Manager : Connect the Core to the computer via a USB Type-C cable, open Windows Device Manager , click Ports(COM LPT) for checking the list of identified COM ports. Disconnect M5Core device and connect it back, to verify which port disappears from the list and then shows back again. 3. Install ESP32 Boards Manager (1) Open IDE, click File - Peferences - Settings (2) Copy the following ESP32 Boards Manager url to Additional Boards Manager URLs: ESP32 Boards Manager url: https://dl.espressif.com/dl/package_esp32_index.json (3) Click Tools - Board: - Boards Manager... (4) Search ESP32 in the new pop-up dialog, then click Install 4. Install M5Stack Library (1) Open Arduino IDE, then Select Sketch - Include Library - Manage Libraries... (2) Search M5Stack and install it 5. Install U8g2 Library (1) Open Arduino IDE, then Select Sketch - Include Library - Manage Libraries... , search M5Stack and install it 6. Example This section for verifying whether you can program with Arduino or not. Now, The USB cable connects to M5Stick built in MPU9250 , then select your serial port which is connected the M5Stick. Select a demo example, compile and upload (1) Execute a example likes FactoryTest.ino Select your board name, baudrate, the specified serial port: M5Stack-Core-ESP32, 921600, COM4 (Now, my serial port which is connected with PC is COM4 ) (2) Then select an example likes FactoryTest.ino Then select an example likes M5Stack - Stick - FactoryTest.ino (3) Upload it Phenomenon: After pressing button A, the screen displays \"Hello World! Exist\" The button located at the bottom left of stick is the power button, click to turn it on, press again to reset when running. If you want to let stick enter deep sleep status, you need to press the power button twice quickly.","title":"M5Stick Quick Start - Arduino Win {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#m5stick-quick-start-arduino-win-docsify-ignore-all","text":"","title":"M5Stick Quick Start - Arduino Win {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#table-of-contents","text":"1. Install Arduino IDE 2. Install USB to Serial Driver 3. Install ESP32 Boards Manager 4. Install M5Stack Library 5. Install U8g2 Library 6. Example","title":"Table of Contents"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#1-install-arduino-ide","text":"Open your browser, enter the official website of Arduino https://www.arduino.cc/en/Main/Software","title":"1. Install Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#1-click-windows-zip-file-for-non-admin-install-for-downloading-arduino-ide","text":"","title":"(1) click Windows ZIP file for non admin install for downloading Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#2-click-just-download","text":"","title":"(2) click JUST DOWNLOAD"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#3-to-install-ide-double-click-arduino-executable-file-keep-the-default-selection-throughout-this-process-including-the-installation-path-is-also-the-default","text":"","title":"(3) To install IDE, double click Arduino executable file. Keep the default selection throughout this process, including the installation path is also the default."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#2-install-usb-to-serial-driver","text":"Open your browser, enter the official website of M5Stack https://m5stack.com/download","title":"2. Install USB to Serial Driver"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#1-click-windows-for-downloading-this-installation-package-and-then-unzip-this-package","text":"","title":"(1) click Windows for downloading this installation package and then unzip this package."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#2-according-to-your-windows-operating-system-type-select-the-corresponding-driver-installation-package","text":"32-bit Windows operating system, choose CP210xVCPInstaller_x86_vx.x.x.x.exe 64-bit Windows operating system, choose CP210xVCPInstaller_x64_vx.x.x.x.exe","title":"(2) According to your Windows operating system type, select the corresponding driver installation package"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#3-double-click-the-executable-file-for-installing","text":"","title":"(3) double click the executable file for installing."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#4-check-the-serial-port-number-comx","text":"To comfirm if the USB to Serial Driver was successfully installed already, Check the list of identified COM ports in the Windows Device Manager : Connect the Core to the computer via a USB Type-C cable, open Windows Device Manager , click Ports(COM LPT) for checking the list of identified COM ports. Disconnect M5Core device and connect it back, to verify which port disappears from the list and then shows back again.","title":"(4) Check the serial port number COMx"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#3-install-esp32-boards-manager","text":"","title":"3. Install ESP32 Boards Manager"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#1-open-ide-click-file-peferences-settings","text":"","title":"(1) Open IDE, click File-&gt;Peferences-&gt;Settings"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#2-copy-the-following-esp32-boards-manager-url-to-additional-boards-manager-urls","text":"ESP32 Boards Manager url: https://dl.espressif.com/dl/package_esp32_index.json","title":"(2) Copy the following ESP32 Boards Manager url to Additional Boards Manager URLs:"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#3-click-tools-board-boards-manager","text":"","title":"(3) Click Tools-&gt;Board:-&gt;Boards Manager..."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#4-search-esp32-in-the-new-pop-up-dialog-then-click-install","text":"","title":"(4) Search ESP32 in the new pop-up dialog, then click Install"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#4-install-m5stack-library","text":"","title":"4. Install M5Stack Library"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#1-open-arduino-ide-then-select-sketch-include-library-manage-libraries","text":"","title":"(1) Open Arduino IDE, then Select Sketch-&gt;Include Library-&gt;Manage Libraries..."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#2-search-m5stack-and-install-it","text":"","title":"(2) Search M5Stack and install it"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#5-install-u8g2-library","text":"","title":"5. Install U8g2 Library"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#1-open-arduino-ide-then-select-sketch-include-library-manage-libraries-search-m5stack-and-install-it","text":"","title":"(1) Open Arduino IDE, then Select Sketch-&gt;Include Library-&gt;Manage Libraries..., search M5Stack and install it"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#6-example","text":"This section for verifying whether you can program with Arduino or not. Now, The USB cable connects to M5Stick built in MPU9250 , then select your serial port which is connected the M5Stick. Select a demo example, compile and upload","title":"6. Example"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#1-execute-a-example-likes-factorytestino","text":"Select your board name, baudrate, the specified serial port: M5Stack-Core-ESP32, 921600, COM4 (Now, my serial port which is connected with PC is COM4 )","title":"(1) Execute a example likes FactoryTest.ino"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#2-then-select-an-example-likes-factorytestino","text":"Then select an example likes M5Stack - Stick - FactoryTest.ino","title":"(2) Then select an example likes FactoryTest.ino"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_arduino_Windows/#3-upload-it","text":"Phenomenon: After pressing button A, the screen displays \"Hello World! Exist\" The button located at the bottom left of stick is the power button, click to turn it on, press again to reset when running. If you want to let stick enter deep sleep status, you need to press the power button twice quickly.","title":"(3) Upload it"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_uiflow/","text":"M5Stick Quick Start - UIFlow {docsify-ignore-all} Update firmware Power on Setting environment Step1. Setting WIFI Step2. Setting API Key Example Related Video UIFlow Tutorial Update firmware Update the stick to the latest firmware version for a better experience. If you need to update or burn firmware by yourself, please click here Power on The button located at the bottom left of stick is the power button, click to turn it on, press again to reset when running. If you want to let stick enter deep sleep status, you need to press the power button twice quickly. In addition to the power button, the stick also provides another button A for you to program. Setting environment Step1. Setting WIFI When you turn on stick for the first time, it will enter the configuration page by default. And it's OLED screen will display it's own AP name(SSID) and ap-setting address(192.168.4.1) . At this time, you can use the mobile phone to connect to this hotspot. After the connection is successful, use the browser to enter the network configuration address, enter the WIFI configuration page, enter the personal WIFI information, click Save , and wait for the connection to succeed. Step2. Setting API Key After the WIFI is successfully configured, stick will automatically reset and enter the programming mode. When the screen displays \u201cDone\u201d, it indicates that the network has been successfully connected. Access our WebIDE flow.m5stack.com for programming. Click the Settings button at the top right of the WebIDE , enter the API Key displayed on the stick screen and click Save . Now, start programming. Supplement If clicked Download , stick will run the last downloaded program straight. In this case, if you want to enter programming mode, you need to press A button once the stick screen disappears UIFlow logo after it was reset. If you want to configurate a new wifi for stick, you need to press and hold A button for more than one second and then release once the stick screen disappears UIFlow logo after it was reset. Example Click and download example . And open this example code in UIFlow, then run it. Program phenomenon: White squares will scroll back and forth on the screen. Note the resolution of stick screen is 64x128 , so if you want to drag a graph at WebIDE to display on stick screen, it's better for you to drag it within a certain range shown as following figure.(Currently only supports the display of rectangular patterns, as well as labels.) Related Video UIFlow introduce UIFlow quick start (Mac Linux)","title":"M5Stick Quick Start - UIFlow {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_uiflow/#m5stick-quick-start-uiflow-docsify-ignore-all","text":"Update firmware Power on Setting environment Step1. Setting WIFI Step2. Setting API Key Example Related Video UIFlow Tutorial","title":"M5Stick Quick Start - UIFlow {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_uiflow/#update-firmware","text":"Update the stick to the latest firmware version for a better experience. If you need to update or burn firmware by yourself, please click here","title":"Update firmware"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_uiflow/#power-on","text":"The button located at the bottom left of stick is the power button, click to turn it on, press again to reset when running. If you want to let stick enter deep sleep status, you need to press the power button twice quickly. In addition to the power button, the stick also provides another button A for you to program.","title":"Power on"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_uiflow/#setting-environment","text":"","title":"Setting environment"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_uiflow/#step1-setting-wifi","text":"When you turn on stick for the first time, it will enter the configuration page by default. And it's OLED screen will display it's own AP name(SSID) and ap-setting address(192.168.4.1) . At this time, you can use the mobile phone to connect to this hotspot. After the connection is successful, use the browser to enter the network configuration address, enter the WIFI configuration page, enter the personal WIFI information, click Save , and wait for the connection to succeed.","title":"Step1. Setting WIFI"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_uiflow/#step2-setting-api-key","text":"After the WIFI is successfully configured, stick will automatically reset and enter the programming mode. When the screen displays \u201cDone\u201d, it indicates that the network has been successfully connected. Access our WebIDE flow.m5stack.com for programming. Click the Settings button at the top right of the WebIDE , enter the API Key displayed on the stick screen and click Save . Now, start programming.","title":"Step2. Setting API Key"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_uiflow/#supplement","text":"If clicked Download , stick will run the last downloaded program straight. In this case, if you want to enter programming mode, you need to press A button once the stick screen disappears UIFlow logo after it was reset. If you want to configurate a new wifi for stick, you need to press and hold A button for more than one second and then release once the stick screen disappears UIFlow logo after it was reset.","title":"Supplement"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_uiflow/#example","text":"Click and download example . And open this example code in UIFlow, then run it. Program phenomenon: White squares will scroll back and forth on the screen.","title":"Example"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_uiflow/#note","text":"the resolution of stick screen is 64x128 , so if you want to drag a graph at WebIDE to display on stick screen, it's better for you to drag it within a certain range shown as following figure.(Currently only supports the display of rectangular patterns, as well as labels.)","title":"Note"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stick/m5stick_quick_start_with_uiflow/#related-video","text":"UIFlow introduce UIFlow quick start (Mac Linux)","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start/","text":"M5StickC Quick Start {docsify-ignore-all} Pick up your programming mode below for getting started Arduino-Windows UIFlow","title":"M5StickC Quick Start {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start/#m5stickc-quick-start-docsify-ignore-all","text":"Pick up your programming mode below for getting started Arduino-Windows UIFlow","title":"M5StickC Quick Start {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_MacOS/","text":"M5Stick Quick Start - Arduino Mac {docsify-ignore-all} Text Tutorial Setting Environment Step1. Install Arduino IDE Step2. ESP32 Board Support Step3. Install M5Stack Lib Step4. Install U8g2 library Example Setting Environment Step1. Install Arduino IDE First, if Arudino IDE is not installed, install it. It's download address is https://www.arduino.cc/en/Main/Software Step2. ESP32 Board Support Open Arduino IDE, click Arduino - Peferences - Settings Copy the following last ESP32 Board Manager URL to this option Additional Boards Manager URLs: NOW, last ESP32 board manager URL is https://dl.espressif.com/dl/package_esp32_index.json Confirm OK and click Tools - Board: - Boards Manager... for installing esp32 Search ESP32 in the new pop-up dialog, then click install Step3. Install M5Stack Lib Start up Arduino IDE, then Select Sketch - Include Library - Manage Libraries... Type M5Stack into the search box, search it and install. Step4. Install U8g2 Library Open Arduino IDE, click Sketch - Include Library - Manage Libraries... , search U8g2 for installing. Example The USB cable connects to M5Stick built in MPU9250 , then select your serial port which is connected the M5Stick. Select a demo example, compile and upload 1. Select your board and the serial port Start up Arduino IDE, and click Tools - Boards - M5Stack-Core-ESP32 to select your board Click Tools - Ports - to select the serial port which is connected with M5Stick 2. Select an example Click File- Examples . Here are some test programs in M5Stack - Stick Try to open a sketch called FactoryTest inside Basics. Compile it and upload, the M5Stick screen will show \"Hello World! Exist\"\" The button located at the bottom left of stick is the power button, click to turn it on, press again to reset when running. If you want to let stick enter deep sleep status, you need to press the power button twice quickly. Note Although most versions of MacOS have no problem with detecting the COM port, on some newer versions of High Sierra sometimes Slab_USBtoUART does not appear. If this is the case, after you connect the M5 open security and privacy in the system preferences and set it to permit . ? If you want to read more the permission about the CP2104 USB driver, visit the following link please. https://developer.apple.com/library/archive/technotes/tn2459/_index.html","title":"M5Stick Quick Start - Arduino Mac {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_MacOS/#m5stick-quick-start-arduino-mac-docsify-ignore-all","text":"","title":"M5Stick Quick Start - Arduino Mac {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_MacOS/#text-tutorial","text":"Setting Environment Step1. Install Arduino IDE Step2. ESP32 Board Support Step3. Install M5Stack Lib Step4. Install U8g2 library Example","title":"Text Tutorial"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_MacOS/#setting-environment","text":"","title":"Setting Environment"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_MacOS/#step1-install-arduino-ide","text":"First, if Arudino IDE is not installed, install it. It's download address is https://www.arduino.cc/en/Main/Software","title":"Step1. Install Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_MacOS/#step2-esp32-board-support","text":"Open Arduino IDE, click Arduino - Peferences - Settings Copy the following last ESP32 Board Manager URL to this option Additional Boards Manager URLs: NOW, last ESP32 board manager URL is https://dl.espressif.com/dl/package_esp32_index.json Confirm OK and click Tools - Board: - Boards Manager... for installing esp32 Search ESP32 in the new pop-up dialog, then click install","title":"Step2. ESP32 Board Support"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_MacOS/#step3-install-m5stack-lib","text":"Start up Arduino IDE, then Select Sketch - Include Library - Manage Libraries... Type M5Stack into the search box, search it and install.","title":"Step3. Install M5Stack Lib"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_MacOS/#step4-install-u8g2-library","text":"Open Arduino IDE, click Sketch - Include Library - Manage Libraries... , search U8g2 for installing.","title":"Step4. Install U8g2 Library"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_MacOS/#example","text":"The USB cable connects to M5Stick built in MPU9250 , then select your serial port which is connected the M5Stick. Select a demo example, compile and upload","title":"Example"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_MacOS/#1-select-your-board-and-the-serial-port","text":"Start up Arduino IDE, and click Tools - Boards - M5Stack-Core-ESP32 to select your board Click Tools - Ports - to select the serial port which is connected with M5Stick","title":"1. Select your board and the serial port"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_MacOS/#2-select-an-example","text":"Click File- Examples . Here are some test programs in M5Stack - Stick Try to open a sketch called FactoryTest inside Basics. Compile it and upload, the M5Stick screen will show \"Hello World! Exist\"\" The button located at the bottom left of stick is the power button, click to turn it on, press again to reset when running. If you want to let stick enter deep sleep status, you need to press the power button twice quickly.","title":"2. Select an example"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_MacOS/#note","text":"Although most versions of MacOS have no problem with detecting the COM port, on some newer versions of High Sierra sometimes Slab_USBtoUART does not appear. If this is the case, after you connect the M5 open security and privacy in the system preferences and set it to permit . ? If you want to read more the permission about the CP2104 USB driver, visit the following link please. https://developer.apple.com/library/archive/technotes/tn2459/_index.html","title":"Note"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/","text":"M5StickC Quick Start - Arduino Win {docsify-ignore-all} Table of Contents 1. Install Arduino IDE 2. Install ESP32 Boards Manager 3. Install M5Stack Library 4. Example 5. Video Tutorial 1. Install Arduino IDE Open your browser, enter the official website of Arduino https://www.arduino.cc/en/Main/Software (1) click Windows ZIP file for non admin install for downloading Arduino IDE (2) click JUST DOWNLOAD (3) To install IDE, double click Arduino executable file. Keep the default selection throughout this process, including the installation path is also the default. 2. Install ESP32 Boards Manager (1) Open IDE, click File - Peferences - Settings (2) Copy the following ESP32 Boards Manager url to Additional Boards Manager URLs: ESP32 Boards Manager url: https://dl.espressif.com/dl/package_esp32_index.json (3) Click Tools - Board: - Boards Manager... (4) Search ESP32 in the new pop-up dialog, then click Install 3. Install M5StickC Library (1) Open Arduino IDE, then Select Sketch - Include Library - Manage Libraries... (2) Search M5StickC and install it 4. Example This section for verifying whether you can program with Arduino or not. (1) Comfire the serial port Open the Windows Device Manager Because M5StickC's serial driver chip is driver-free installation type, connect the M5StickC and the computer with the Tpye-C USB cable. A new serial port number will appear in the Device Manager. (2) Select an example likes FactoryTest.ino Open Arduino IDE, then select your serial port which is connected M5Core. Select Board: ESP32 Pico Kit Select Upload Speed: 115200bps or 1.5Mbps Select Port: COM31 (Now, my serial port which is connected with PC is COM31 ) Select M5StickC - Basics - FactoryTest.ino Click Upload 5. Video Tutorial Video tutorial for developing M5StickC in Arduino","title":"M5StickC Quick Start - Arduino Win {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/#m5stickc-quick-start-arduino-win-docsify-ignore-all","text":"","title":"M5StickC Quick Start - Arduino Win {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/#table-of-contents","text":"1. Install Arduino IDE 2. Install ESP32 Boards Manager 3. Install M5Stack Library 4. Example 5. Video Tutorial","title":"Table of Contents"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/#1-install-arduino-ide","text":"Open your browser, enter the official website of Arduino https://www.arduino.cc/en/Main/Software","title":"1. Install Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/#1-click-windows-zip-file-for-non-admin-install-for-downloading-arduino-ide","text":"","title":"(1) click Windows ZIP file for non admin install for downloading Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/#2-click-just-download","text":"","title":"(2) click JUST DOWNLOAD"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/#3-to-install-ide-double-click-arduino-executable-file-keep-the-default-selection-throughout-this-process-including-the-installation-path-is-also-the-default","text":"","title":"(3) To install IDE, double click Arduino executable file. Keep the default selection throughout this process, including the installation path is also the default."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/#2-install-esp32-boards-manager","text":"","title":"2. Install ESP32 Boards Manager"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/#1-open-ide-click-file-peferences-settings","text":"","title":"(1) Open IDE, click File-&gt;Peferences-&gt;Settings"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/#2-copy-the-following-esp32-boards-manager-url-to-additional-boards-manager-urls","text":"ESP32 Boards Manager url: https://dl.espressif.com/dl/package_esp32_index.json","title":"(2) Copy the following ESP32 Boards Manager url to Additional Boards Manager URLs:"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/#3-click-tools-board-boards-manager","text":"","title":"(3) Click Tools-&gt;Board:-&gt;Boards Manager..."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/#4-search-esp32-in-the-new-pop-up-dialog-then-click-install","text":"","title":"(4) Search ESP32 in the new pop-up dialog, then click Install"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/#3-install-m5stickc-library","text":"","title":"3. Install M5StickC Library"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/#1-open-arduino-ide-then-select-sketch-include-library-manage-libraries","text":"","title":"(1) Open Arduino IDE, then Select Sketch-&gt;Include Library-&gt;Manage Libraries..."},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/#2-search-m5stickc-and-install-it","text":"","title":"(2) Search M5StickC and install it"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/#4-example","text":"This section for verifying whether you can program with Arduino or not.","title":"4. Example"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/#1-comfire-the-serial-port","text":"Open the Windows Device Manager Because M5StickC's serial driver chip is driver-free installation type, connect the M5StickC and the computer with the Tpye-C USB cable. A new serial port number will appear in the Device Manager.","title":"(1) Comfire the serial port"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/#2-select-an-example-likes-factorytestino","text":"Open Arduino IDE, then select your serial port which is connected M5Core. Select Board: ESP32 Pico Kit Select Upload Speed: 115200bps or 1.5Mbps Select Port: COM31 (Now, my serial port which is connected with PC is COM31 ) Select M5StickC - Basics - FactoryTest.ino Click Upload","title":"(2) Select an example likes FactoryTest.ino"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_arduino_Windows/#5-video-tutorial","text":"Video tutorial for developing M5StickC in Arduino","title":"5. Video Tutorial"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_uiflow/","text":"M5StickC Quick Start - UIFlow {docsify-ignore-all} 1. Burn UIFlow Firmware 2. Wi-Fi Setting 3. Program 1. Burn UIFlow Firmware (1) Download M5Burner Access M5Stack Official Website , and download M5Burner (2) Burn the firmware Connect M5StickC to the computer via the USB Type-C cable, unzip the M5Burner archive you just downloaded, and double-click the executable M5Burner.exe Select the COM , Baudrate and the lastest firmware Select COM: COM31 (Now, my serial port which is connected with PC is COM31 ) Select Baudrate: 115200 Download and select Firmware: UIFlow-vx.x.x-StickC Click Burn for downloading UIFlow firmware The following figure indicates that the firmware is successfully burned. 2. Wi-Fi Setting (1) Select SETUP After successfully burning the UIFlow firmware, click the Power Switch button in the lower left corner of the M5StickC. M5StickC will display the AP name as the shown below (2) Connect to AP Turn on Wi-Fi on your phone or computer, then connect to the M5StickC hotspot AP displayed on the screen ( For example, the M5-80f0 is now displayed ). After the connection is successful, open a browser and enter the URL 192.168.4.1 , then select Wi-Fi that can be connected to the network, enter the Wi-Fi password. ( Now, the networkable Wi-Fi is M5 ) (3) Connect to Wi-Fi After M5StickC successfully connects to a networkable Wi-Fi (here M5), the screen will display APIKEY . Description of APIKEY: APIKEY is the device unique identifier. As long as the current UIFlow is connected to which device's APIKEY, The programming code will be downloaded to that device. The status of the network icon on the screen: Green means M5StickC successfully connected to UIFlow Server, that is online status Red means be offline status 3. Program (1) Connect to UIFlow Now If you are programming with a computer, enter the URL flow.m5stack.com on your computer's browser Every time before you upload the code to M5StickC through UIFlow, make sure that UIFlow is connected to the M5StickC you want to program. So you need to click on the gear in the upper right corner of the UIFlow IDE page and enter APIKEY on your M5StickC screen in the pop-up dialog box. Click Save , then UIFlow will connect to M5StickC. Now you can start programming with UIFlow! (2) Programming example Drag and drop the Lable in the upper left corner of the UIFlow IDE to the UI interface of M5StickC , change their text and font From Hardware - LED , drag a block named LED ON and another block named LED OFF From Timer , drag a block named Wait 1s Click the Run button in the upper right corner of the page to execute the effect The Result:","title":"M5StickC Quick Start - UIFlow {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_uiflow/#m5stickc-quick-start-uiflow-docsify-ignore-all","text":"1. Burn UIFlow Firmware 2. Wi-Fi Setting 3. Program","title":"M5StickC Quick Start - UIFlow {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_uiflow/#1-burn-uiflow-firmware","text":"","title":"1. Burn UIFlow Firmware"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_uiflow/#1-download-m5burner","text":"Access M5Stack Official Website , and download M5Burner","title":"(1) Download M5Burner"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_uiflow/#2-burn-the-firmware","text":"Connect M5StickC to the computer via the USB Type-C cable, unzip the M5Burner archive you just downloaded, and double-click the executable M5Burner.exe Select the COM , Baudrate and the lastest firmware Select COM: COM31 (Now, my serial port which is connected with PC is COM31 ) Select Baudrate: 115200 Download and select Firmware: UIFlow-vx.x.x-StickC Click Burn for downloading UIFlow firmware The following figure indicates that the firmware is successfully burned.","title":"(2) Burn the firmware"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_uiflow/#2-wi-fi-setting","text":"","title":"2. Wi-Fi Setting"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_uiflow/#1-select-setup","text":"After successfully burning the UIFlow firmware, click the Power Switch button in the lower left corner of the M5StickC. M5StickC will display the AP name as the shown below","title":"(1) Select SETUP"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_uiflow/#2-connect-to-ap","text":"Turn on Wi-Fi on your phone or computer, then connect to the M5StickC hotspot AP displayed on the screen ( For example, the M5-80f0 is now displayed ). After the connection is successful, open a browser and enter the URL 192.168.4.1 , then select Wi-Fi that can be connected to the network, enter the Wi-Fi password. ( Now, the networkable Wi-Fi is M5 )","title":"(2) Connect to AP"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_uiflow/#3-connect-to-wi-fi","text":"After M5StickC successfully connects to a networkable Wi-Fi (here M5), the screen will display APIKEY . Description of APIKEY: APIKEY is the device unique identifier. As long as the current UIFlow is connected to which device's APIKEY, The programming code will be downloaded to that device. The status of the network icon on the screen: Green means M5StickC successfully connected to UIFlow Server, that is online status Red means be offline status","title":"(3) Connect to Wi-Fi"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_uiflow/#3-program","text":"","title":"3. Program"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_uiflow/#1-connect-to-uiflow","text":"Now If you are programming with a computer, enter the URL flow.m5stack.com on your computer's browser Every time before you upload the code to M5StickC through UIFlow, make sure that UIFlow is connected to the M5StickC you want to program. So you need to click on the gear in the upper right corner of the UIFlow IDE page and enter APIKEY on your M5StickC screen in the pop-up dialog box. Click Save , then UIFlow will connect to M5StickC. Now you can start programming with UIFlow!","title":"(1) Connect to UIFlow"},{"location":"tutorials/M5Stack/docs/en/quick_start/m5stickc/m5stickc_quick_start_with_uiflow/#2-programming-example","text":"Drag and drop the Lable in the upper left corner of the UIFlow IDE to the UI interface of M5StickC , change their text and font From Hardware - LED , drag a block named LED ON and another block named LED OFF From Timer , drag a block named Wait 1s Click the Run button in the upper right corner of the page to execute the effect The Result:","title":"(2) Programming example"},{"location":"tutorials/M5Stack/docs/en/related_documents/establish_serial_connection/","text":"Establish Serial Connection {docsify-ignore-all} MacOS Windows This section provides guidance how to establish serial connection between your board and PC. For MacOS 1. Install the USB driver Download the SiLabs CP2104 Driver After the disk image SiLabsUSBDriverDisk.dmg was downloaded, mount it. And install this USB driver following those screenshots. 2. Check port on MacOS To check the device name for the serial port of your your board board (or external converter dongle), open terminal and run this command two times, first with the board / dongle unplugged, then with plugged in. The port which appears the second time is the one you need: MacOS ls /dev/cu.* For Windows 1.Install the USB driver Download the SiLabs CP2104 Driver Choice the version of USB driver according to your windows version(Windows7/8/10). Choice the right version installer(x64/x86), and install it. 2. Check port on Windows Check the list of identified COM ports in the Windows Device Manager. Disconnect your board and connect it back, to verify which port disappears from the list and then shows back again. Figures below show serial port for M5Stack Core board","title":"Establish Serial Connection {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/related_documents/establish_serial_connection/#establish-serial-connection-docsify-ignore-all","text":"MacOS Windows This section provides guidance how to establish serial connection between your board and PC.","title":"Establish Serial Connection {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/related_documents/establish_serial_connection/#for-macos","text":"","title":"For MacOS"},{"location":"tutorials/M5Stack/docs/en/related_documents/establish_serial_connection/#1-install-the-usb-driver","text":"Download the SiLabs CP2104 Driver After the disk image SiLabsUSBDriverDisk.dmg was downloaded, mount it. And install this USB driver following those screenshots.","title":"1. Install the USB driver"},{"location":"tutorials/M5Stack/docs/en/related_documents/establish_serial_connection/#2-check-port-on-macos","text":"To check the device name for the serial port of your your board board (or external converter dongle), open terminal and run this command two times, first with the board / dongle unplugged, then with plugged in. The port which appears the second time is the one you need: MacOS ls /dev/cu.*","title":"2. Check port on MacOS"},{"location":"tutorials/M5Stack/docs/en/related_documents/establish_serial_connection/#for-windows","text":"","title":"For Windows"},{"location":"tutorials/M5Stack/docs/en/related_documents/establish_serial_connection/#1install-the-usb-driver","text":"Download the SiLabs CP2104 Driver Choice the version of USB driver according to your windows version(Windows7/8/10). Choice the right version installer(x64/x86), and install it.","title":"1.Install the USB driver"},{"location":"tutorials/M5Stack/docs/en/related_documents/establish_serial_connection/#2-check-port-on-windows","text":"Check the list of identified COM ports in the Windows Device Manager. Disconnect your board and connect it back, to verify which port disappears from the list and then shows back again. Figures below show serial port for M5Stack Core board","title":"2. Check port on Windows"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_burn_firmware/","text":"How to Burn Firmware {docsify-ignore-all} :clapper: Video Tutorial :memo: Text Tutorial This article will guide you how to burn a right firmware to your board via M5Burner. Text Tutorial Windows MacOS Linux Windows 1. Install USB driver If you have not installed the CP2104 USB driver yet, read here . Otherwise, Start directly from step 2. 2. Download M5Burner For downloading M5Burner, visit the M5Stack Website please. 3. Burn the firmware Unzip the M5Burner tool which you donwloaded for official website just now, then double click M5Burner.exe . Then choice the serial port which is connected with your board and the Baud which is 921600 following below steps. Choice a right firmware, click Erase and then click Burn . If you want to program with UIFlow (/ M5Cloud ), select M5Flow-vx.x (/ M5Cloud-vx.x.x ) option(the lastest version). If you own a ESP32CAM (/ M5CAMERA), select M5Cam-vx.x (/M5Cam-psram) option ! Notice If it does not display any COMx port or only COM1 exists at the option, you need to visit this article establish_serial_connection and reinstall the USB driver. a. Choice a right firmware a. select M5Flow-vx.x option(the lastest version), if you want to program with UIFlow b. select M5Cam-vx.x (/M5Cam-psram) option, if you own a ESP32CAM (/ M5CAMERA) b. Click Erase If M5Burner shows the information Hard resetting via RTS pin... below, it means chip has been erased successfully. If M5Burner shows the information Leaving... Staying in bootloader. below, it means chip has been burnt successfully. 3. Then reset your board ? Tip If M5Burner means be busy after clicking Burn , please wait for a few minutes. It'll be normal after the firmware has been burnt successfully. ? Tip If the burning procedure has been interrupted(like M5Burner has been closed suddenly... ), it's better to burn your board again. MacOS 1. Install USB Driver (If you have not install USB driver, follow this step. Otherwise, jump to step 2 directly.) The first thing to do is to visit the official website https://m5stack.com, then select Explore - Download from the top menu, download the M5Burner and the CP21X Driver . Once the driver download is complete. Open the driver file as shown below. Now, the USB driver has been installed successfully. You must now allow the operating system to run third-party applications. Open the search , then find the Terminal application.app and start it by pressing Enter . Now write the line below and press Enter . Now, click on the Apple in the upper left corner, then open System Preferences... , then open Security Privacy . Make sure you have the radio check box set to Anywhere (if not, check it). 2. Open M5Burner Now go back to the browser to Downloads button and open the file with the Ctrl key pressed. 3. Burn the firmware So, now connect your device to your Mac with a USB cable. Select the corresponding SOFTWARE version (Normally, select the lastest version) and click on the Flash button. At the end of the process, the indicator will be completely painted. Once the device is flashed - disconnect the cable from the Mac and press the red button (the same power button) on the M5. Linux 1. Install pip and esptool Open the terminal, enter the following command according to your system version for installing Python package management tool pip . Centos7: sudo yum install python-pip Ubuntu and Debian: sudo apt-get install python-pip Arch: sudo pacman -S --needed python-pip After installing pip successfully, enter sudo pip install esptool for installing esptool . 2. Download the last version of M5Burner Access UIFlow , download the MacOS version installer M5Burner-Flow-For-MacOS , and unzip it. 3. Execute Creat a new folder M5burner , and copy M5Burner_MacOS/M5Burner_MacOS.app/Contents/Resources/firmware/M5Flow/ to ~/M5burner If you want to bun v1.1.1 version firmware, switch the current directory to the corresponding directory e.g. cd ~/M5burner/M5Flow/v1.1.1-en Plug the M5Core in, and enter sudo chmod +x *.sh for granting root authority, and run sudo ./flash.sh Video Tutorial Windows","title":"How to Burn Firmware {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_burn_firmware/#how-to-burn-firmware-docsify-ignore-all","text":":clapper: Video Tutorial :memo: Text Tutorial This article will guide you how to burn a right firmware to your board via M5Burner.","title":"How to Burn Firmware {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_burn_firmware/#text-tutorial","text":"Windows MacOS Linux","title":"Text Tutorial"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_burn_firmware/#windows","text":"","title":"Windows"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_burn_firmware/#1-install-usb-driver","text":"If you have not installed the CP2104 USB driver yet, read here . Otherwise, Start directly from step 2.","title":"1. Install USB driver"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_burn_firmware/#2-download-m5burner","text":"For downloading M5Burner, visit the M5Stack Website please.","title":"2. Download M5Burner"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_burn_firmware/#3-burn-the-firmware","text":"Unzip the M5Burner tool which you donwloaded for official website just now, then double click M5Burner.exe . Then choice the serial port which is connected with your board and the Baud which is 921600 following below steps. Choice a right firmware, click Erase and then click Burn . If you want to program with UIFlow (/ M5Cloud ), select M5Flow-vx.x (/ M5Cloud-vx.x.x ) option(the lastest version). If you own a ESP32CAM (/ M5CAMERA), select M5Cam-vx.x (/M5Cam-psram) option ! Notice If it does not display any COMx port or only COM1 exists at the option, you need to visit this article establish_serial_connection and reinstall the USB driver. a. Choice a right firmware a. select M5Flow-vx.x option(the lastest version), if you want to program with UIFlow b. select M5Cam-vx.x (/M5Cam-psram) option, if you own a ESP32CAM (/ M5CAMERA) b. Click Erase If M5Burner shows the information Hard resetting via RTS pin... below, it means chip has been erased successfully. If M5Burner shows the information Leaving... Staying in bootloader. below, it means chip has been burnt successfully.","title":"3. Burn the firmware"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_burn_firmware/#3-then-reset-your-board","text":"? Tip If M5Burner means be busy after clicking Burn , please wait for a few minutes. It'll be normal after the firmware has been burnt successfully. ? Tip If the burning procedure has been interrupted(like M5Burner has been closed suddenly... ), it's better to burn your board again.","title":"3. Then reset your board"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_burn_firmware/#macos","text":"","title":"MacOS"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_burn_firmware/#1-install-usb-driver-if-you-have-not-install-usb-driver-follow-this-step-otherwise-jump-to-step-2-directly","text":"The first thing to do is to visit the official website https://m5stack.com, then select Explore - Download from the top menu, download the M5Burner and the CP21X Driver . Once the driver download is complete. Open the driver file as shown below. Now, the USB driver has been installed successfully. You must now allow the operating system to run third-party applications. Open the search , then find the Terminal application.app and start it by pressing Enter . Now write the line below and press Enter . Now, click on the Apple in the upper left corner, then open System Preferences... , then open Security Privacy . Make sure you have the radio check box set to Anywhere (if not, check it).","title":"1. Install USB Driver (If you have not install USB driver, follow this step. Otherwise, jump to step 2 directly.)"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_burn_firmware/#2-open-m5burner","text":"Now go back to the browser to Downloads button and open the file with the Ctrl key pressed.","title":"2. Open M5Burner"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_burn_firmware/#3-burn-the-firmware_1","text":"So, now connect your device to your Mac with a USB cable. Select the corresponding SOFTWARE version (Normally, select the lastest version) and click on the Flash button. At the end of the process, the indicator will be completely painted. Once the device is flashed - disconnect the cable from the Mac and press the red button (the same power button) on the M5.","title":"3. Burn the firmware"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_burn_firmware/#linux","text":"","title":"Linux"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_burn_firmware/#1-install-pip-and-esptool","text":"Open the terminal, enter the following command according to your system version for installing Python package management tool pip . Centos7: sudo yum install python-pip Ubuntu and Debian: sudo apt-get install python-pip Arch: sudo pacman -S --needed python-pip After installing pip successfully, enter sudo pip install esptool for installing esptool .","title":"1. Install pip and esptool"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_burn_firmware/#2-download-the-last-version-of-m5burner","text":"Access UIFlow , download the MacOS version installer M5Burner-Flow-For-MacOS , and unzip it.","title":"2. Download the last version of M5Burner"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_burn_firmware/#3-execute","text":"Creat a new folder M5burner , and copy M5Burner_MacOS/M5Burner_MacOS.app/Contents/Resources/firmware/M5Flow/ to ~/M5burner If you want to bun v1.1.1 version firmware, switch the current directory to the corresponding directory e.g. cd ~/M5burner/M5Flow/v1.1.1-en Plug the M5Core in, and enter sudo chmod +x *.sh for granting root authority, and run sudo ./flash.sh","title":"3. Execute"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_burn_firmware/#video-tutorial","text":"Windows","title":"Video Tutorial"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_connect_wifi_using_core/","text":"How to Connect WIFI Using Core {docsify-ignore-all} :clapper: Video Tutorial :memo: Text Tutorial ? Tip If your M5Stack Core was not burnt with a specific firmware named UIFlow in advance, please visit this article How to burn firmware for burnning) After powering on Core and pressing the red button on the left hand side of the M5\uff0cyou will be greeted by this screen. Let's connect to networkable AP. Text Tutorial Press UPLOAD Button Select Networkable AP Reset Your Device 1. Press UPLOAD Button Now, press the upload buttom. The screen will show this message. 2. Select Networkable AP Use Mobile Phone or PC for connectting to M5Core AP(like M5Stack-a67c ), and then open brower to login 192.168.4.1 for setting your networkable WIFI name and password. (Now, my networkable wifi is named MasterHax_5G ) 3. Reset Your Device After connected wifi successfully, reset your core according to the prompt on 192.168.4.1 Complete Once you've reset M5Stack Core, pressed the upload buttom, you will arrive at a screen with a QR code. Now, you can try to program with your core following this article Quick Start with UIFlow ? Note Similarly, if you want another networkable WIFI AP to connect with Core, press the SETUP buttom while core was power-up. Video Tutorial WIFI Configuration","title":"How to Connect WIFI Using Core {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_connect_wifi_using_core/#how-to-connect-wifi-using-core-docsify-ignore-all","text":":clapper: Video Tutorial :memo: Text Tutorial ? Tip If your M5Stack Core was not burnt with a specific firmware named UIFlow in advance, please visit this article How to burn firmware for burnning) After powering on Core and pressing the red button on the left hand side of the M5\uff0cyou will be greeted by this screen. Let's connect to networkable AP.","title":"How to Connect WIFI Using Core {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_connect_wifi_using_core/#text-tutorial","text":"Press UPLOAD Button Select Networkable AP Reset Your Device","title":"Text Tutorial"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_connect_wifi_using_core/#1-press-upload-button","text":"Now, press the upload buttom. The screen will show this message.","title":"1. Press UPLOAD Button"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_connect_wifi_using_core/#2-select-networkable-ap","text":"Use Mobile Phone or PC for connectting to M5Core AP(like M5Stack-a67c ), and then open brower to login 192.168.4.1 for setting your networkable WIFI name and password. (Now, my networkable wifi is named MasterHax_5G )","title":"2. Select Networkable AP"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_connect_wifi_using_core/#3-reset-your-device","text":"After connected wifi successfully, reset your core according to the prompt on 192.168.4.1","title":"3. Reset Your Device"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_connect_wifi_using_core/#complete","text":"Once you've reset M5Stack Core, pressed the upload buttom, you will arrive at a screen with a QR code. Now, you can try to program with your core following this article Quick Start with UIFlow ? Note Similarly, if you want another networkable WIFI AP to connect with Core, press the SETUP buttom while core was power-up.","title":"Complete"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_connect_wifi_using_core/#video-tutorial","text":"WIFI Configuration","title":"Video Tutorial"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_connect_wifi_using_core_with_m5cloud/","text":"How to Connect WIFI (For M5Cloud) {docsify-ignore-all} ? Tip If your M5Stack Core was not burnt with a specific firmware named M5Cloud in advance, please visit this article How to burn firmware for burnning) After powering on Core\uff0cyou will be greeted by this screen. Let's connect to networkable AP. CONTENT Connect to M5Core AP Select Networkable AP Reset Your Device 1. Connect to M5Core AP Use Mobile Phone or PC for connectting to M5Core AP(like M5Stack-a67c ) 2. Select Networkable AP Then open brower to login 192.168.4.1 for setting your networkable WIFI name and password. (Now, my networkable wifi is named MasterHax_2.4G ) ? Note If you connect wifi unsuccessfully, repeat it again please. 3. Reset Your Device After connected wifi successfully, reset your core according to the prompt on 192.168.4.1 ? Note If your device has been bound to M5Cloud's account before(means you have entered the check code on M5Cloud ), the screen will display as below Complete Now, you can try to program with your core following this article Quick Start with M5Cloud","title":"How to Connect WIFI (For M5Cloud) {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_connect_wifi_using_core_with_m5cloud/#how-to-connect-wifi-for-m5cloud-docsify-ignore-all","text":"? Tip If your M5Stack Core was not burnt with a specific firmware named M5Cloud in advance, please visit this article How to burn firmware for burnning) After powering on Core\uff0cyou will be greeted by this screen. Let's connect to networkable AP.","title":"How to Connect WIFI (For M5Cloud) {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_connect_wifi_using_core_with_m5cloud/#content","text":"Connect to M5Core AP Select Networkable AP Reset Your Device","title":"CONTENT"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_connect_wifi_using_core_with_m5cloud/#1-connect-to-m5core-ap","text":"Use Mobile Phone or PC for connectting to M5Core AP(like M5Stack-a67c )","title":"1. Connect to M5Core AP"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_connect_wifi_using_core_with_m5cloud/#2-select-networkable-ap","text":"Then open brower to login 192.168.4.1 for setting your networkable WIFI name and password. (Now, my networkable wifi is named MasterHax_2.4G ) ? Note If you connect wifi unsuccessfully, repeat it again please.","title":"2. Select Networkable AP"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_connect_wifi_using_core_with_m5cloud/#3-reset-your-device","text":"After connected wifi successfully, reset your core according to the prompt on 192.168.4.1 ? Note If your device has been bound to M5Cloud's account before(means you have entered the check code on M5Cloud ), the screen will display as below","title":"3. Reset Your Device"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_connect_wifi_using_core_with_m5cloud/#complete","text":"Now, you can try to program with your core following this article Quick Start with M5Cloud","title":"Complete"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_install_git_and_arduino/","text":"How to install Git and Arduino IDE (Windows) {docsify-ignore-all} 1. Install Git If you has installed Git , please following next setp 2 straight.Otherwise, download the client of Git and install it. 2. Install Arduino IDE download address https://www.arduino.cc/en/Main/Software Double click to install Arduino IDE","title":"How to install Git and Arduino IDE (Windows) {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_install_git_and_arduino/#how-to-install-git-and-arduino-ide-windows-docsify-ignore-all","text":"","title":"How to install Git and Arduino IDE (Windows) {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_install_git_and_arduino/#1-install-git","text":"If you has installed Git , please following next setp 2 straight.Otherwise, download the client of Git and install it.","title":"1. Install Git"},{"location":"tutorials/M5Stack/docs/en/related_documents/how_to_install_git_and_arduino/#2-install-arduino-ide","text":"download address https://www.arduino.cc/en/Main/Software Double click to install Arduino IDE","title":"2. Install Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/related_documents/upgrade_m5stack_lib/","text":"Upgrade M5Stack Lib {docsify-ignore-all} 1. Start up Arduino IDE, then Select Sketch - Include Library - Manage Libraries... 2. Type M5Stack into the search box, search it. 3. If it shows as below figure, click Update . But if it shows Install , it means you has not installed M5Stack Lib. So, you need click Install for installing lib.","title":"Upgrade M5Stack Lib {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/related_documents/upgrade_m5stack_lib/#upgrade-m5stack-lib-docsify-ignore-all","text":"","title":"Upgrade M5Stack Lib {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/related_documents/upgrade_m5stack_lib/#1-start-up-arduino-ide-then-select-sketch-include-library-manage-libraries","text":"","title":"1. Start up Arduino IDE, then Select Sketch-&gt;Include Library-&gt;Manage Libraries..."},{"location":"tutorials/M5Stack/docs/en/related_documents/upgrade_m5stack_lib/#2-type-m5stack-into-the-search-box-search-it","text":"","title":"2. Type M5Stack into the search box, search it."},{"location":"tutorials/M5Stack/docs/en/related_documents/upgrade_m5stack_lib/#3-if-it-shows-as-below-figure-click-update","text":"But if it shows Install , it means you has not installed M5Stack Lib. So, you need click Install for installing lib.","title":"3. If it shows as below figure, click Update."},{"location":"tutorials/M5Stack/docs/en/tool/usb_downloader/","text":"ESP32 USB Downloader {docsify-ignore-all} :memo: Description :electric_plug: Schematic \ud83d\uded2 Purchase Description A tool built-in USB-to-UART bridge chip(CP2104) can be connected with UART port for automatically burning firmware. TXD led, RXD led, Power led and 6pin @ 2.54mm bus sockets. PARAMETER There are two reserved pins(RTS, DTR) on M5Stack USB Downloader for other applications. PinNumber PinName 1 GND 2 GPIO0 3 EN 4 TXD 5 RXD 6 3.3V Usage: Include 1x M5Stack USB Downloader Related Link UserGuide Schematic","title":"ESP32 USB Downloader {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/tool/usb_downloader/#esp32-usb-downloader-docsify-ignore-all","text":":memo: Description :electric_plug: Schematic \ud83d\uded2 Purchase","title":"ESP32 USB Downloader {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/tool/usb_downloader/#description","text":"A tool built-in USB-to-UART bridge chip(CP2104) can be connected with UART port for automatically burning firmware. TXD led, RXD led, Power led and 6pin @ 2.54mm bus sockets.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/tool/usb_downloader/#parameter","text":"There are two reserved pins(RTS, DTR) on M5Stack USB Downloader for other applications. PinNumber PinName 1 GND 2 GPIO0 3 EN 4 TXD 5 RXD 6 3.3V Usage:","title":"PARAMETER"},{"location":"tutorials/M5Stack/docs/en/tool/usb_downloader/#include","text":"1x M5Stack USB Downloader","title":"Include"},{"location":"tutorials/M5Stack/docs/en/tool/usb_downloader/#related-link","text":"UserGuide","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/tool/usb_downloader/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/tool/usb_isp/","text":"","title":"Usb isp"},{"location":"tutorials/M5Stack/docs/en/unit/396port/","text":"Unit 396PORT {docsify-ignore-all} :memo: Description \ud83d\uded2 Purchase Description 3.96port a GROVE-to-VH3.96 interface convertor. The HT3.96 piece is 4 pins. HT3.96 is classed as Pluggable System Terminal Block catelog. Terminal blocks are used to secure and/or terminate wires and, in their simplest form, consist of several individual terminals arranged in a long strip. Terminals are useful for connecting wiring to a ground or, in the case of electrical power, for connecting electrical switches and outlets to the mains Product Features 1x HT3.96 connector(4 pins) 2x Lego cpmpatible holes Connector Specifications Type: Plug, Female Sockets Number of Positions: 6 Positions Per Level: 6 Number of Levels: 1 Pitch: 0.156\"\uff083.96mm\uff09 Header Orientation: - Mounting Type: Free-hanging Include 1x 396PORT Unit 1x Grove Cable 1x HT3.96 Male Socket Related Link Offical Video Forum","title":"Unit 396PORT {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/396port/#unit-396port-docsify-ignore-all","text":":memo: Description \ud83d\uded2 Purchase","title":"Unit 396PORT {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/396port/#description","text":"3.96port a GROVE-to-VH3.96 interface convertor. The HT3.96 piece is 4 pins. HT3.96 is classed as Pluggable System Terminal Block catelog. Terminal blocks are used to secure and/or terminate wires and, in their simplest form, consist of several individual terminals arranged in a long strip. Terminals are useful for connecting wiring to a ground or, in the case of electrical power, for connecting electrical switches and outlets to the mains","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/396port/#product-features","text":"1x HT3.96 connector(4 pins) 2x Lego cpmpatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/396port/#connector-specifications","text":"Type: Plug, Female Sockets Number of Positions: 6 Positions Per Level: 6 Number of Levels: 1 Pitch: 0.156\"\uff083.96mm\uff09 Header Orientation: - Mounting Type: Free-hanging","title":"Connector Specifications"},{"location":"tutorials/M5Stack/docs/en/unit/396port/#include","text":"1x 396PORT Unit 1x Grove Cable 1x HT3.96 Male Socket","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/396port/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/adc/","text":"Unit ADC {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description ADC integrated with ADS1100 which is a fully differential, 16-bit, self-calibrating,delta-sigma A/D converter. It communicates through an I2C interface,which means you can collect AD data thru PortA on M5 core from this unit to enhence your A/D performance. The I2C address is 0x48. Product Specification COMPLETE DATA ACQUISITION SYSTEM IN A TINY SOT23-6 PACKAGE 16-BITS NO MISSING CODES INL: 0.0125% of FSR MAX CONTINUOUS SELF-CALIBRATION SINGLE-CYCLE CONVERSION PROGRAMMABLE GAIN AMPLIFIER GAIN = 1, 2, 4, OR 8 LOW NOISE: 4\u00b5Vp-p PROGRAMMABLE DATA RATE: 8SPS to 128SPS INTERNAL SYSTEM CLOCK I2CTM INTERFACE POWER SUPPLY: 2.7V to 5.5V LOW CURRENT CONSUMPTION: 90\u00b5A AVAILABLE IN EIGHT DIFFERENT ADDRESSES Two Lego-compatible holes APPLICATION ECG signal acquisition Blood pressure measurement Dynamometer Include 1x ADC unit 1x GROVE Cable 1x HT3.96 Male Socket(2 pins) Related Link Offical Video Forum Datasheet - ADS1100 Example 1. Arduino IDE The below code is incomplete(just for usage). If you want the complete code, please click here . #include M5Stack.h #include Wire.h #include ADS1100.h #define ADS1100_DEFAULT_ADDRESS 0x48 // declaration byte error; int8_t address; //new a object ADS1100 ads; // initialization M5.begin(true, false, false); ads.getAddr_ADS1100(ADS1100_DEFAULT_ADDRESS);// 0x48, 1001 000 (ADDR = GND) ads.setGain(GAIN_ONE); // 1x gain(default) ads.setMode(MODE_CONTIN); // Continuous conversion mode (default) ads.setRate(RATE_8); // 8SPS (default) ads.setOSMode(OSMODE_SINGLE); // Set to start a single-conversion ads.begin(); // read data address = ads.ads_i2cAddress; Wire.beginTransmission(address); Wire.endTransmission(); ads.Measure_Differential(); 2. UIFlow If you want the complete code, please click here . Schematic PinMap M5Core ( GROVE A ) GPIO22 GPIO21 5V GND ADC Unit SCL SDA 5V GND","title":"Unit ADC {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/adc/#unit-adc-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Unit ADC {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/adc/#description","text":"ADC integrated with ADS1100 which is a fully differential, 16-bit, self-calibrating,delta-sigma A/D converter. It communicates through an I2C interface,which means you can collect AD data thru PortA on M5 core from this unit to enhence your A/D performance. The I2C address is 0x48.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/adc/#product-specification","text":"COMPLETE DATA ACQUISITION SYSTEM IN A TINY SOT23-6 PACKAGE 16-BITS NO MISSING CODES INL: 0.0125% of FSR MAX CONTINUOUS SELF-CALIBRATION SINGLE-CYCLE CONVERSION PROGRAMMABLE GAIN AMPLIFIER GAIN = 1, 2, 4, OR 8 LOW NOISE: 4\u00b5Vp-p PROGRAMMABLE DATA RATE: 8SPS to 128SPS INTERNAL SYSTEM CLOCK I2CTM INTERFACE POWER SUPPLY: 2.7V to 5.5V LOW CURRENT CONSUMPTION: 90\u00b5A AVAILABLE IN EIGHT DIFFERENT ADDRESSES Two Lego-compatible holes","title":"Product Specification"},{"location":"tutorials/M5Stack/docs/en/unit/adc/#application","text":"ECG signal acquisition Blood pressure measurement Dynamometer","title":"APPLICATION"},{"location":"tutorials/M5Stack/docs/en/unit/adc/#include","text":"1x ADC unit 1x GROVE Cable 1x HT3.96 Male Socket(2 pins)","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/adc/#related-link","text":"Offical Video Forum Datasheet - ADS1100","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/adc/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/adc/#1-arduino-ide","text":"The below code is incomplete(just for usage). If you want the complete code, please click here . #include M5Stack.h #include Wire.h #include ADS1100.h #define ADS1100_DEFAULT_ADDRESS 0x48 // declaration byte error; int8_t address; //new a object ADS1100 ads; // initialization M5.begin(true, false, false); ads.getAddr_ADS1100(ADS1100_DEFAULT_ADDRESS);// 0x48, 1001 000 (ADDR = GND) ads.setGain(GAIN_ONE); // 1x gain(default) ads.setMode(MODE_CONTIN); // Continuous conversion mode (default) ads.setRate(RATE_8); // 8SPS (default) ads.setOSMode(OSMODE_SINGLE); // Set to start a single-conversion ads.begin(); // read data address = ads.ads_i2cAddress; Wire.beginTransmission(address); Wire.endTransmission(); ads.Measure_Differential();","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/adc/#2-uiflow","text":"If you want the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/adc/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/adc/#pinmap","text":"M5Core ( GROVE A ) GPIO22 GPIO21 5V GND ADC Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/angle/","text":"Unit ANGLE {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description ANGLE is a rotary switch Unit,simply having a 10K potentiometer inside. This unit can be used for Continuous singal control, such as volume, brightness, or motor speed. A potentiometer is a manually adjustable, variable resistor with three terminals. Two terminals are connected to a resistive element, the third terminal is connected to an adjustable wiper. The position of the wiper determines the output voltage. The out voltage is captured and converted by AD on ESP32 on portB. In M5Stack product system, Normally the Grove color indicates the type of communications. - Black: Single BUS (AD ,DA ,GPIO) - Red: I2C - Blue\uff1aUart - White\uff1a Others(depends) The Unit's Grove interface is black, indicating an analog interface that needs to be connected to the M5Core's GROVE B interface. Product Features Output voltage range: 0 ~ 2500mV GROVE interface, support UIFlow and Arduino Two Lego-compatible holes Include 1x ANGLE Unit 1x Grove Cable Related Link Offical Video Forum Example 1. Arduino IDE The code below is incomplete. To get the complete code, please click here . Example function: Display the digital value converted from the Unit output voltage (0 ~ 4095) #include M5Stack.h // select the input pin for the potentiometer int sensorPin = 36; // last variable to store the value coming from the sensor int last_sensorValue = 0; // current variable to store the value coming from the sensor int cur_sensorValue = 0; void setup() { M5.begin(); pinMode(sensorPin, INPUT); M5.Lcd.setTextSize(2); M5.Lcd.setCursor(0, 0); M5.Lcd.print( the value of ANGLE: ); } void loop() { // read the value from the sensor: cur_sensorValue = analogRead(sensorPin); M5.Lcd.setCursor(0, 25); if(abs(cur_sensorValue - last_sensorValue) 10){//debaunce M5.Lcd.fillRect(0, 25, 100, 25, BLACK); M5.Lcd.print(cur_sensorValue); last_sensorValue = cur_sensorValue; } delay(50); } 2. UIFlow If you want the complete code, please click here . Schematic PinMap M5Core(GROVE B) GPIO36 GPIO26 5V GND ANGLE Unit Sensor Pin 5V GND","title":"Unit ANGLE {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/angle/#unit-angle-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Unit ANGLE {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/angle/#description","text":"ANGLE is a rotary switch Unit,simply having a 10K potentiometer inside. This unit can be used for Continuous singal control, such as volume, brightness, or motor speed. A potentiometer is a manually adjustable, variable resistor with three terminals. Two terminals are connected to a resistive element, the third terminal is connected to an adjustable wiper. The position of the wiper determines the output voltage. The out voltage is captured and converted by AD on ESP32 on portB. In M5Stack product system, Normally the Grove color indicates the type of communications. - Black: Single BUS (AD ,DA ,GPIO) - Red: I2C - Blue\uff1aUart - White\uff1a Others(depends) The Unit's Grove interface is black, indicating an analog interface that needs to be connected to the M5Core's GROVE B interface.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/angle/#product-features","text":"Output voltage range: 0 ~ 2500mV GROVE interface, support UIFlow and Arduino Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/angle/#include","text":"1x ANGLE Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/angle/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/angle/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/angle/#1-arduino-ide","text":"The code below is incomplete. To get the complete code, please click here . Example function: Display the digital value converted from the Unit output voltage (0 ~ 4095) #include M5Stack.h // select the input pin for the potentiometer int sensorPin = 36; // last variable to store the value coming from the sensor int last_sensorValue = 0; // current variable to store the value coming from the sensor int cur_sensorValue = 0; void setup() { M5.begin(); pinMode(sensorPin, INPUT); M5.Lcd.setTextSize(2); M5.Lcd.setCursor(0, 0); M5.Lcd.print( the value of ANGLE: ); } void loop() { // read the value from the sensor: cur_sensorValue = analogRead(sensorPin); M5.Lcd.setCursor(0, 25); if(abs(cur_sensorValue - last_sensorValue) 10){//debaunce M5.Lcd.fillRect(0, 25, 100, 25, BLACK); M5.Lcd.print(cur_sensorValue); last_sensorValue = cur_sensorValue; } delay(50); }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/angle/#2-uiflow","text":"If you want the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/angle/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/angle/#pinmap","text":"M5Core(GROVE B) GPIO36 GPIO26 5V GND ANGLE Unit Sensor Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/butterfly/","text":"Unit BUTTERFLY {docsify-ignore-all} :memo: Description :bulb: Assembly \ud83d\uded2 Purchase :clapper: Related Video Description BUTTERFLY is a butterfly model launcher, that allows you to lauch a butterfly model to the air. The launcher is implmented by 1 servo and a plastic seat. This set can be placed on dress at fashion show or anywhere you want decorate with some flying bufferflies. To set the butterfly model you need to tight up the rubber band by rotate the model at one end and fixed the other end. Put the tighten-up butterfly at the bottom the launcher. Now everything is ready to go. For more infomation please check out the video. Product Features GROVE interface, support UIFlow and Arduino Steps 1, download this example into Core. 2, Wire the Core with Launcher by GROVE cable and Grove2Pin converter Now that you can control the Lanuncher(Servo Motor) through the Core. to realse \"butterfly\", program the Servo Motor to rotate 30 degree to lock it, program the Servo Motor to 0 degree ,","title":"Unit BUTTERFLY {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/butterfly/#unit-butterfly-docsify-ignore-all","text":":memo: Description :bulb: Assembly \ud83d\uded2 Purchase :clapper: Related Video","title":"Unit BUTTERFLY {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/butterfly/#description","text":"BUTTERFLY is a butterfly model launcher, that allows you to lauch a butterfly model to the air. The launcher is implmented by 1 servo and a plastic seat. This set can be placed on dress at fashion show or anywhere you want decorate with some flying bufferflies. To set the butterfly model you need to tight up the rubber band by rotate the model at one end and fixed the other end. Put the tighten-up butterfly at the bottom the launcher. Now everything is ready to go. For more infomation please check out the video.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/butterfly/#product-features","text":"GROVE interface, support UIFlow and Arduino","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/butterfly/#steps","text":"1, download this example into Core. 2, Wire the Core with Launcher by GROVE cable and Grove2Pin converter Now that you can control the Lanuncher(Servo Motor) through the Core. to realse \"butterfly\", program the Servo Motor to rotate 30 degree to lock it, program the Servo Motor to 0 degree ,","title":"Steps"},{"location":"tutorials/M5Stack/docs/en/unit/button/","text":"Unit BUTTON {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description BUTTON is a single button Unit. The button status can be detected by the input pin status,simply capture the high/low electrical level. As shown in the figure below: Output status: This unit communicates with M5Core through GROVE B port. Feature GROVE interface, support UIFlow and Arduino Two Lego installation holes Include 1x BUTTON Unit 1x Grove Cable APPLICATION Lamp holder switch Remote control switch Related Link Offical Video Forum Example 1. Arduino IDE The code below is incomplete(just for usage). To get the complete code, please click here . #include M5Stack.h // declaration int cur_value = 0; // initialization M5.begin();// init pinMode(36, INPUT);// BUTTON Pin // read data cur_value = digitalRead(36);// read the value of BUTTON M5.update(); 2. UIFlow If you want the complete code, please click here . Schematic PinMap M5Core(GROVE B) Btn (GPIO36) NC (GPIO26) 5V GND BUTTON Unit BUTTON Pin 5V GND","title":"Unit BUTTON {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/button/#unit-button-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Unit BUTTON {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/button/#description","text":"BUTTON is a single button Unit. The button status can be detected by the input pin status,simply capture the high/low electrical level. As shown in the figure below: Output status: This unit communicates with M5Core through GROVE B port.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/button/#feature","text":"GROVE interface, support UIFlow and Arduino Two Lego installation holes","title":"Feature"},{"location":"tutorials/M5Stack/docs/en/unit/button/#include","text":"1x BUTTON Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/button/#application","text":"Lamp holder switch Remote control switch","title":"APPLICATION"},{"location":"tutorials/M5Stack/docs/en/unit/button/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/button/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/button/#1-arduino-ide","text":"The code below is incomplete(just for usage). To get the complete code, please click here . #include M5Stack.h // declaration int cur_value = 0; // initialization M5.begin();// init pinMode(36, INPUT);// BUTTON Pin // read data cur_value = digitalRead(36);// read the value of BUTTON M5.update();","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/button/#2-uiflow","text":"If you want the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/button/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/button/#pinmap","text":"M5Core(GROVE B) Btn (GPIO36) NC (GPIO26) 5V GND BUTTON Unit BUTTON Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/cardkb/","text":"Unit CardKB {docsify-ignore-all} :memo: Description :octocat: Example \ud83d\uded2 Purchase :clapper: Related Video Description CardKB is a unit can implement a full-featured QWERTY keyboard. Consider that you want make some cool stuff that require keyboard typing and interaction, but M5 core it self just have 3 buttons, here comes the flexible and powerful CardKB unit. It also can achieve button combination(Sym+Key, Shift+Key, Fn+Key) and output richer key value. This unit communicates with M5Core through GROVE A port(IIC interface). Address is 0x5F. 1. Button combination description: Single button pressed , keyborad will output the first key value(letter button will output lower case form). E.g if \"Q\" was pressed, keyboard will output \"q\"(lower case). Sym+key , keyborad will output the second key value. E.g if \"Sym\" was single pressed, then \"Q\" was pressed, the keyboard will output \"{\". If \"Sym\" was double clicked, then the keyboard will lock this function, all key pressed will output it's second key value. Shift+key , if a letter button was pressed, it'll output upper case form. E.g if \"Shift\" was single pressed, then \"Q\" was pressed, the keyboard will output \"Q\". If \"Shift\" was double clicked, then the keyboard will lock this function, all letter key pressed will output it's upper case form. Fn+key(custom function key combination) , keyborad will output the third key value. You can custom what function the key pressed corresponds. Product Features Full-function keyboard, multi-key combination GROVE interface, support UIFlow and Arduino Two Lego compatible holes Include 1x CardKB unit 1x GROVE Cable Application Keyboard peripherals for M5Stack Core Related Link Offical Video Forum CardKB Firmware Example 1. Arduino IDE To get the code, please click here \u3002 #include Wire.h #include M5Stack.h #define CARDKB_ADDR 0x5F void setup() { M5.begin(); Serial.begin(115200); Wire.begin(); pinMode(5, INPUT); digitalWrite(5, HIGH); M5.Lcd.fillScreen(BLACK); M5.Lcd.setCursor(1, 10); M5.Lcd.setTextColor(YELLOW); M5.Lcd.setTextSize(2); M5.Lcd.printf( IIC Address: 0x5F\\n ); M5.Lcd.printf( ); } void loop() { Wire.requestFrom(CARDKB_ADDR, 1); while (Wire.available()) { char c = Wire.read(); // receive a byte as characterif if (c != 0) { M5.Lcd.printf( %c , c); Serial.println(c, HEX); // M5.Speaker.beep(); } } } 2. UIFlow To get the complete code, please click here \u3002 PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND CardKB SCL SDA 5V GND Related Video CardKB Case - 01","title":"Unit CardKB {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/cardkb/#unit-cardkb-docsify-ignore-all","text":":memo: Description :octocat: Example \ud83d\uded2 Purchase :clapper: Related Video","title":"Unit CardKB {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/cardkb/#description","text":"CardKB is a unit can implement a full-featured QWERTY keyboard. Consider that you want make some cool stuff that require keyboard typing and interaction, but M5 core it self just have 3 buttons, here comes the flexible and powerful CardKB unit. It also can achieve button combination(Sym+Key, Shift+Key, Fn+Key) and output richer key value. This unit communicates with M5Core through GROVE A port(IIC interface). Address is 0x5F. 1. Button combination description: Single button pressed , keyborad will output the first key value(letter button will output lower case form). E.g if \"Q\" was pressed, keyboard will output \"q\"(lower case). Sym+key , keyborad will output the second key value. E.g if \"Sym\" was single pressed, then \"Q\" was pressed, the keyboard will output \"{\". If \"Sym\" was double clicked, then the keyboard will lock this function, all key pressed will output it's second key value. Shift+key , if a letter button was pressed, it'll output upper case form. E.g if \"Shift\" was single pressed, then \"Q\" was pressed, the keyboard will output \"Q\". If \"Shift\" was double clicked, then the keyboard will lock this function, all letter key pressed will output it's upper case form. Fn+key(custom function key combination) , keyborad will output the third key value. You can custom what function the key pressed corresponds.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/cardkb/#product-features","text":"Full-function keyboard, multi-key combination GROVE interface, support UIFlow and Arduino Two Lego compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/cardkb/#include","text":"1x CardKB unit 1x GROVE Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/cardkb/#application","text":"Keyboard peripherals for M5Stack Core","title":"Application"},{"location":"tutorials/M5Stack/docs/en/unit/cardkb/#related-link","text":"Offical Video Forum CardKB Firmware","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/cardkb/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/cardkb/#1-arduino-ide","text":"To get the code, please click here \u3002 #include Wire.h #include M5Stack.h #define CARDKB_ADDR 0x5F void setup() { M5.begin(); Serial.begin(115200); Wire.begin(); pinMode(5, INPUT); digitalWrite(5, HIGH); M5.Lcd.fillScreen(BLACK); M5.Lcd.setCursor(1, 10); M5.Lcd.setTextColor(YELLOW); M5.Lcd.setTextSize(2); M5.Lcd.printf( IIC Address: 0x5F\\n ); M5.Lcd.printf( ); } void loop() { Wire.requestFrom(CARDKB_ADDR, 1); while (Wire.available()) { char c = Wire.read(); // receive a byte as characterif if (c != 0) { M5.Lcd.printf( %c , c); Serial.println(c, HEX); // M5.Speaker.beep(); } } }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/cardkb/#2-uiflow","text":"To get the complete code, please click here \u3002","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/cardkb/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND CardKB SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/cardkb/#related-video","text":"CardKB Case - 01","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/unit/catear/","text":"Unit CATEAR {docsify-ignore-all} :memo: Description :octocat: Example \ud83d\uded2 Purchase :clapper: Related Video Description CATEAR is a cat ear headband made by 118 Neopixels. Neopixels are smart RGB LEDs. Each one can be programmed and display any color. It is also allowed to set the brightness , lighting-up flow and Blink-mode. If you want be standout in a party, at Halloween, why not get this good to add on some excellent lighting effects on your outfit. It can be programmed by any type of M5 core. Connected with Grove port. Alternative Port: A, B, C Product Features Neopixel quantity: 118 GROVE interface, support UIFlow and Arduino Two Lego-compatible holes Include 1x CATEAR Unit 1x Grove Cable Related Link Offical Video Forum Arduino Library realted to Neopixel driving: FastLED Library FastLED Reference(Chinese version) Example UIFlow To get the complete code, please click here . PinMap If CATEAR was connected to GROVE A M5Core(GROVE A) GPIO22 GPIO21 5V GND CATEAR Unit CATEAR Pin 5V GND If CATEAR was connected to GROVE B M5Core(GROVE B) GPIO36 GPIO26 5V GND CATEAR Unit CATEAR Pin 5V GND If CATEAR was connected to GROVE C M5Core(GROVE C) GPIO16 GPIO17 5V GND CATEAR Unit CATEAR Pin 5V GND Related Video CatEAR","title":"Unit CATEAR {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/catear/#unit-catear-docsify-ignore-all","text":":memo: Description :octocat: Example \ud83d\uded2 Purchase :clapper: Related Video","title":"Unit CATEAR {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/catear/#description","text":"CATEAR is a cat ear headband made by 118 Neopixels. Neopixels are smart RGB LEDs. Each one can be programmed and display any color. It is also allowed to set the brightness , lighting-up flow and Blink-mode. If you want be standout in a party, at Halloween, why not get this good to add on some excellent lighting effects on your outfit. It can be programmed by any type of M5 core. Connected with Grove port. Alternative Port: A, B, C","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/catear/#product-features","text":"Neopixel quantity: 118 GROVE interface, support UIFlow and Arduino Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/catear/#include","text":"1x CATEAR Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/catear/#related-link","text":"Offical Video Forum Arduino Library realted to Neopixel driving: FastLED Library FastLED Reference(Chinese version)","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/catear/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/catear/#uiflow","text":"To get the complete code, please click here .","title":"UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/catear/#pinmap","text":"If CATEAR was connected to GROVE A M5Core(GROVE A) GPIO22 GPIO21 5V GND CATEAR Unit CATEAR Pin 5V GND If CATEAR was connected to GROVE B M5Core(GROVE B) GPIO36 GPIO26 5V GND CATEAR Unit CATEAR Pin 5V GND If CATEAR was connected to GROVE C M5Core(GROVE C) GPIO16 GPIO17 5V GND CATEAR Unit CATEAR Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/catear/#related-video","text":"CatEAR","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/unit/color/","text":"Unit COLOR {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description COLOR is color recognition unit integrated TCS3472 . Like its namesake, COLOR is able to detect color value and return RGB data to the host. Identify color principle: In the TCS3472, a 3*4 array of filtered photodiodes and a 16 bit analog-to-digital converters are embedded. Of the 12 photodiodes, 3 have red filters, 3 have green filters, 3 have blue filters and 3 have no filter(clear). When detecting the color of an object, TCS3472 returns data from four channels: red(R), green(G), blue(B) and clear(C)(non-filtered). The response from the red, green and blue channels (RGB) can be used to determine a particular source\u2019s chromaticity coordinates (x, y). Chromaticity Calculation Process Overview: When we get coordinates (x, y), please reference the below figure so as to get the recommended color. This Unit communicates with the M5Core via the GROVE A interface(I2C). Address is 0x29. Product Features Detection range: -40\u2103~85\u2103 GROVE interface, support UIFlow and Arduino Two Lego-compatible holes Include 1x COLOR Unit 1x Grove Cable Application Product Color Verification Color tracking robot Related Link Offical Video Forum Datasheet - TCS3472 Example 1. Arduino IDE The code below is incomplete. To get the complete code, please click here . /* Color test hardware: M5Stack please install the Adfruit TCS34725 library first ... */ #include Wire.h #include M5Stack.h #include Adafruit_TCS34725.h // declaration uint16_t clear, red, green, blue; #define commonAnode true // set to false if using a common cathode LED // new a object Adafruit_TCS34725 tcs; tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS,TCS34725_GAIN_4X); // initialization M5.begin(true, false, false); tcs.begin(); tcs.setIntegrationTime(TCS34725_INTEGRATIONTIME_154MS); tcs.setGain(TCS34725_GAIN_4X); // read data tcs.getRawData( red, green, blue, clear); After burnt this example, PC serial terminal will print original value RGBC(red, green, blue, clear). Schematic PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND COLOR Unit SCL SDA 5V GND Related Video COLOR Case - 01","title":"Unit COLOR {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/color/#unit-color-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"Unit COLOR {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/color/#description","text":"COLOR is color recognition unit integrated TCS3472 . Like its namesake, COLOR is able to detect color value and return RGB data to the host. Identify color principle: In the TCS3472, a 3*4 array of filtered photodiodes and a 16 bit analog-to-digital converters are embedded. Of the 12 photodiodes, 3 have red filters, 3 have green filters, 3 have blue filters and 3 have no filter(clear). When detecting the color of an object, TCS3472 returns data from four channels: red(R), green(G), blue(B) and clear(C)(non-filtered). The response from the red, green and blue channels (RGB) can be used to determine a particular source\u2019s chromaticity coordinates (x, y). Chromaticity Calculation Process Overview: When we get coordinates (x, y), please reference the below figure so as to get the recommended color. This Unit communicates with the M5Core via the GROVE A interface(I2C). Address is 0x29.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/color/#product-features","text":"Detection range: -40\u2103~85\u2103 GROVE interface, support UIFlow and Arduino Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/color/#include","text":"1x COLOR Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/color/#application","text":"Product Color Verification Color tracking robot","title":"Application"},{"location":"tutorials/M5Stack/docs/en/unit/color/#related-link","text":"Offical Video Forum Datasheet - TCS3472","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/color/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/color/#1-arduino-ide","text":"The code below is incomplete. To get the complete code, please click here . /* Color test hardware: M5Stack please install the Adfruit TCS34725 library first ... */ #include Wire.h #include M5Stack.h #include Adafruit_TCS34725.h // declaration uint16_t clear, red, green, blue; #define commonAnode true // set to false if using a common cathode LED // new a object Adafruit_TCS34725 tcs; tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS,TCS34725_GAIN_4X); // initialization M5.begin(true, false, false); tcs.begin(); tcs.setIntegrationTime(TCS34725_INTEGRATIONTIME_154MS); tcs.setGain(TCS34725_GAIN_4X); // read data tcs.getRawData( red, green, blue, clear); After burnt this example, PC serial terminal will print original value RGBC(red, green, blue, clear).","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/color/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/color/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND COLOR Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/color/#related-video","text":"COLOR Case - 01","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/unit/dac/","text":"Unit DAC {docsify-ignore-all} :memo: Description :octocat: Example \ud83d\uded2 Purchase Description DAC is a unit can convert digital signal to analog signal like voltage waveform, audio waveform and so on. It integrates a 12-bit high resolution DAC chip named MCP4725 which integrates a on-board non-volatile memory (EEPROM). The unit comunicates with M5Core with I2C. The DAC input and configuration data can be programmed to the EEPROM. I2C address is 0x60. Product Features Up to 12 bits of resolution Output 0~3.3V voltage GROVE interface, support UIFlow and Arduino Two Lego-compatible holes Include 1x DAC Unit 1x Grove Cable APPLICATION MP3 Audio Player mini Oscilloscope Related Link Offical Video Forum Datasheet - MCP4725 Example 1. Arduino IDE The code below is incomplete(just for usage). To get the complete code, please click here . /* hardware : m5stack uint dac please install adafruit MCP4725 lib */ #include Wire.h #include Adafruit_MCP4725.h // new a object Adafruit_MCP4725 dac; // initialization dac.begin(0x60); dac.setVoltage(2048, false); // 12bit value , false mean not write EEPROM dac.setVoltage(1024, false);// input digital value 1024 to unit delay(1000); dac.setVoltage(2048, false);// input digital value 2048 to unit delay(1000); Schematic PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND DAC Unit SCL SDA 5V GND","title":"Unit DAC {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/dac/#unit-dac-docsify-ignore-all","text":":memo: Description :octocat: Example \ud83d\uded2 Purchase","title":"Unit DAC {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/dac/#description","text":"DAC is a unit can convert digital signal to analog signal like voltage waveform, audio waveform and so on. It integrates a 12-bit high resolution DAC chip named MCP4725 which integrates a on-board non-volatile memory (EEPROM). The unit comunicates with M5Core with I2C. The DAC input and configuration data can be programmed to the EEPROM. I2C address is 0x60.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/dac/#product-features","text":"Up to 12 bits of resolution Output 0~3.3V voltage GROVE interface, support UIFlow and Arduino Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/dac/#include","text":"1x DAC Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/dac/#application","text":"MP3 Audio Player mini Oscilloscope","title":"APPLICATION"},{"location":"tutorials/M5Stack/docs/en/unit/dac/#related-link","text":"Offical Video Forum Datasheet - MCP4725","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/dac/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/dac/#1-arduino-ide","text":"The code below is incomplete(just for usage). To get the complete code, please click here . /* hardware : m5stack uint dac please install adafruit MCP4725 lib */ #include Wire.h #include Adafruit_MCP4725.h // new a object Adafruit_MCP4725 dac; // initialization dac.begin(0x60); dac.setVoltage(2048, false); // 12bit value , false mean not write EEPROM dac.setVoltage(1024, false);// input digital value 1024 to unit delay(1000); dac.setVoltage(2048, false);// input digital value 2048 to unit delay(1000);","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/dac/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/dac/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND DAC Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/dual_button/","text":"Unit Dual-BUTTON {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description Dual Button , as its namesake, has two buttons with different color. If the Button unit is not enough, how about double it up to a pair. They share the exact same mechanism, button status can be detected by the input pin status,simply capture the high/low electrical level. This unit communicates with M5Core through GROVE B port. Output status: Product Features GROVE interface, support UIFlow and Arduino Two Lego-compatible holes Include 1x Dual BUTTON Unit 1x Grove Cable Application Game Controller Remote control switch Related Link Offical Video Forum Example 1. Arduino IDE The code below is incomplete(just for usage). TO get the complete code, please click here . #include M5Stack.h // declaration int cur_value_red = 0; int cur_value_blue = 0; // initialization M5.begin(); pinMode(26, INPUT);// Red Button Pin setting pinMode(36, INPUT);// Blue Button Pin setting // read data cur_value_red = digitalRead(26); cur_value_blue = digitalRead(36); M5.update(); 2. UIFlow To get the complete code, please click here . Schematic PinMap M5Core (GROVE B) GPIO36 GPIO26 5V GND DUAL_BUTTON Unit Blue Button Pin Red Button Pin 5V GND Related Video Joystick Case - Page flipping and selection of menu interface","title":"Unit Dual-BUTTON {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/dual_button/#unit-dual-button-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"Unit Dual-BUTTON {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/dual_button/#description","text":"Dual Button , as its namesake, has two buttons with different color. If the Button unit is not enough, how about double it up to a pair. They share the exact same mechanism, button status can be detected by the input pin status,simply capture the high/low electrical level. This unit communicates with M5Core through GROVE B port. Output status:","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/dual_button/#product-features","text":"GROVE interface, support UIFlow and Arduino Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/dual_button/#include","text":"1x Dual BUTTON Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/dual_button/#application","text":"Game Controller Remote control switch","title":"Application"},{"location":"tutorials/M5Stack/docs/en/unit/dual_button/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/dual_button/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/dual_button/#1-arduino-ide","text":"The code below is incomplete(just for usage). TO get the complete code, please click here . #include M5Stack.h // declaration int cur_value_red = 0; int cur_value_blue = 0; // initialization M5.begin(); pinMode(26, INPUT);// Red Button Pin setting pinMode(36, INPUT);// Blue Button Pin setting // read data cur_value_red = digitalRead(26); cur_value_blue = digitalRead(36); M5.update();","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/dual_button/#2-uiflow","text":"To get the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/dual_button/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/dual_button/#pinmap","text":"M5Core (GROVE B) GPIO36 GPIO26 5V GND DUAL_BUTTON Unit Blue Button Pin Red Button Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/dual_button/#related-video","text":"Joystick Case - Page flipping and selection of menu interface","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/unit/earth/","text":"Unit EARTH {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description EARTH unit is a Soil Moisture Sensor for measuring the moisture in soil and similar materials. The soil moisture sensor is pretty straight forward to use. The two large exposed pads function as probes for the sensor, together acting as a variable resistor. The higher moisture that is in the soil means the better the conductivity between the two so that the sensor will result in a lower resistance, and a higher SIG out. You can read the moisture in soil by ADC. Inside this Unit we put an extra potentiometers to change the measurement range. Product Features Adjustable threshold, including 10K adjustable resistor Analog Digital output GROVE interface, support UIFlow and Arduino Two Lego-compatible holes Include 1x EARTH unit 1x GROVE Cable Application Potted soil moisture monitoring Related Link Offical Video Forum Example 1. Arduino IDE The code below is incomplete. To get the complete code, please click here . #include M5Stack.h void setup() { M5.begin(); dacWrite(25, 0);//disable the speak noise pinMode(26, INPUT);// set digital pin } uint16_t analogRead_value = 0; uint16_t digitalRead_value = 0; void loop() { analogRead_value = analogRead(36);// read analog value of EARTH digitalRead_value = digitalRead(26);// read digital value of EARTH } 2. UIFlow To get the complete code, please click here . Schematic PinMap M5Core(GROVE B) GPIO36 GPIO26 5V GND EARTH Unit AnalogSignal Pin DigitalSignal Pin 5V GND Related Video EARTH Tutorial - Monitor vase soil moisture 1 EARTH Case - Monitor vase soil moisture 2","title":"Unit EARTH {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/earth/#unit-earth-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"Unit EARTH {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/earth/#description","text":"EARTH unit is a Soil Moisture Sensor for measuring the moisture in soil and similar materials. The soil moisture sensor is pretty straight forward to use. The two large exposed pads function as probes for the sensor, together acting as a variable resistor. The higher moisture that is in the soil means the better the conductivity between the two so that the sensor will result in a lower resistance, and a higher SIG out. You can read the moisture in soil by ADC. Inside this Unit we put an extra potentiometers to change the measurement range.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/earth/#product-features","text":"Adjustable threshold, including 10K adjustable resistor Analog Digital output GROVE interface, support UIFlow and Arduino Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/earth/#include","text":"1x EARTH unit 1x GROVE Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/earth/#application","text":"Potted soil moisture monitoring","title":"Application"},{"location":"tutorials/M5Stack/docs/en/unit/earth/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/earth/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/earth/#1-arduino-ide","text":"The code below is incomplete. To get the complete code, please click here . #include M5Stack.h void setup() { M5.begin(); dacWrite(25, 0);//disable the speak noise pinMode(26, INPUT);// set digital pin } uint16_t analogRead_value = 0; uint16_t digitalRead_value = 0; void loop() { analogRead_value = analogRead(36);// read analog value of EARTH digitalRead_value = digitalRead(26);// read digital value of EARTH }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/earth/#2-uiflow","text":"To get the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/earth/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/earth/#pinmap","text":"M5Core(GROVE B) GPIO36 GPIO26 5V GND EARTH Unit AnalogSignal Pin DigitalSignal Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/earth/#related-video","text":"EARTH Tutorial - Monitor vase soil moisture 1 EARTH Case - Monitor vase soil moisture 2","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/unit/env/","text":"Unit ENV {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description ENV is a environment sensor, can be used for temperature, humidity, and atmospheric pressure measurement. Build with DHT12 and BMP280. DHT12 is a upgradation version of DHT11 humidity temperature sensor, fully downward compatible, more precise and add I2C interface. BMP280 is an absolute barometric pressure sensor especially designed for mobile applications, offers highest flexibility to optimize the device regarding power consumption, resolution and filter performance. Feature Temperature: measuring range: -20 ~ 60 \u2103 resolution: \u00b10.2\u2103 Humidity: measuring range: 20 ~ 95 %RH resolution: 0.1% Air pressure measuring range: 300 ~ 1100hPa resolution: \u00b11hPa GROVE interface, support UIFlow and Arduino Two Lego installation holes Include 1x ENV Unit 1x Grove Cable Related Link Offical Video Forum Example 1. Arduino IDE This is a ENV example, implemented reading temperature, humidity and atmospheric pressure function. 1, Before compiling, please install Adafruit BMP280 Library 2, copy Adafruit_Sensor.h to C:\\Users\\ user_name \\Documents\\Arduino\\libraries\\Adafruit_BMP280_Library The code below is incomplete. To get the complete code, please click here . /* Install Adafruit BMP280 Library first. */ #include M5Stack.h #include DHT12.h #include Wire.h //The DHT12 uses I2C comunication. #include Adafruit_Sensor.h #include Adafruit_BMP280.h // new two objects DHT12 dht12; Adafruit_BMP280 bme; // initialization M5.begin(); Wire.begin(); bme.begin(); // read data float tmp = dht12.readTemperature(); float hum = dht12.readHumidity(); float pressure = bme.readPressure(); 2. UIFlow If you want the complete code, please click here . Schematic PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND ENV Unit SCL SDA 5V GND","title":"Unit ENV {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/env/#unit-env-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Unit ENV {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/env/#description","text":"ENV is a environment sensor, can be used for temperature, humidity, and atmospheric pressure measurement. Build with DHT12 and BMP280. DHT12 is a upgradation version of DHT11 humidity temperature sensor, fully downward compatible, more precise and add I2C interface. BMP280 is an absolute barometric pressure sensor especially designed for mobile applications, offers highest flexibility to optimize the device regarding power consumption, resolution and filter performance.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/env/#feature","text":"Temperature: measuring range: -20 ~ 60 \u2103 resolution: \u00b10.2\u2103 Humidity: measuring range: 20 ~ 95 %RH resolution: 0.1% Air pressure measuring range: 300 ~ 1100hPa resolution: \u00b11hPa GROVE interface, support UIFlow and Arduino Two Lego installation holes","title":"Feature"},{"location":"tutorials/M5Stack/docs/en/unit/env/#include","text":"1x ENV Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/env/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/env/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/env/#1-arduino-ide","text":"This is a ENV example, implemented reading temperature, humidity and atmospheric pressure function. 1, Before compiling, please install Adafruit BMP280 Library 2, copy Adafruit_Sensor.h to C:\\Users\\ user_name \\Documents\\Arduino\\libraries\\Adafruit_BMP280_Library The code below is incomplete. To get the complete code, please click here . /* Install Adafruit BMP280 Library first. */ #include M5Stack.h #include DHT12.h #include Wire.h //The DHT12 uses I2C comunication. #include Adafruit_Sensor.h #include Adafruit_BMP280.h // new two objects DHT12 dht12; Adafruit_BMP280 bme; // initialization M5.begin(); Wire.begin(); bme.begin(); // read data float tmp = dht12.readTemperature(); float hum = dht12.readHumidity(); float pressure = bme.readPressure();","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/env/#2-uiflow","text":"If you want the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/env/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/env/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND ENV Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/esp32cam/","text":"Unit ESP32CAM {docsify-ignore-all} :memo: Description :bulb: Quick Start :octocat: Code :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description ESP32CAM is a development board for image recognition. It features an ESP32(4M Flash + 520K RAM) chip and 2-Megapixel carmera(OV2640). It also supports image transmission via Wi-Fi and debuging through USB Type-C port. The hardware comes preloaded software, programmed by ESP-IDF. It is an application to run Wi-Fi camera. The output image is size 600*800, since it's 2-Maga camera, you sure can optimize the software to output the maximum size of photos. what this software can do? - Power the board via USB type-C or GROVE - Use your phone to Wi-Fi scan an AP name start with 'm5stack-' and click to connect this AP. - Open up web browser on your phone and visit 192.168.4.1 - Then here comes the picture. Video is about 5-6 frames per senconds. not super fast. The hardware also comes with some reserved weld pad, just in case you want put these chips back on board. - 9-axis gyroscope (MPU6050) - pressure sensor (BME280) - analog MIC (SPQ2410) - Battery socket ESP32CAM is the most popular pattern among the M5 camera series so far. If you need more storage please check M5Camera. If you need fisheye lens, please check M5CameraF. Note: ESP32CAM is named differently when different hardware is selected. They follow the rules below. ESP32CAM_#_#... means optional hardware name follows \"ESP32CAM\". If configured with MPU6050, will be named ESP32CAM_6050 If also configured with microphone, will be named ESP32CAM_6050_MIC If also configured with BME280, will be named ESP32CAM_6050_MIC_BME280 Product Features ESP32 specifications Dual-core Tensilica LX6 microprocessor Up to 240MHz clock frequency 520KB internal RAM 4MB Flash memory Integrated 802.11 BGN WiFi transceiver Integrated dual-mode Bluetooth (classic and BLE) Hardware accelerated encryption (AES, SHA2, ECC, RSA-4096) CP2104 USB TTL OV2640 sensor Output Formats(8-bit): YUV(422/420)/YCbCr422 RGB565/555 8-bit compressed data 8-/10-bit Raw RGB data Maximum Image Transfer Rate UXGA/SXGA: 15fps SVGA: 30fps CIF: 60fps Scan Mode: Progressive Camera specifications Field of View : 65 degree Maxmium Pixel: 2M Size: 20.5 \u00d7 46.5 \u00d7 11.5mm Include 1x ESP32CAM Unit PinMap Camera Interface PinMap Interface OV2640 Pin ESP32Cam SCCB Clock SIOC IO23 SCCB Data SIOD IO25 System Clock XCLK IO27 Vertical Sync VSYNC IO22 Horizontal Reference HREF IO26 Pixel Clock PCLK IO21 Pixel Data Bit 0 D2 IO17 Pixel Data Bit 1 D3 IO35 Pixel Data Bit 2 D4 IO34 Pixel Data Bit 3 D5 IO5 Pixel Data Bit 4 D6 IO39 Pixel Data Bit 5 D7 IO18 Pixel Data Bit 6 D8 IO36 Pixel Data Bit 7 D9 IO19 Camera Reset RESET IO15 Camera Power Down PWDN see Note 1 Power Supply 3.3V 3V3 3V3 Ground GND GND GROVE Interface Grove ESP32Cam SCL IO4 SDA IO13 5V 5V GND GND LED Interface LED ESP32Cam LED_Pin IO16 reserved chip interfaces BME280 Interface It's IIC address is 0x76. BME280 ESP32Cam SCL IO4 SDA IO13 MPU6050 Interface It's IIC address is 0x68. MPU6050 ESP32Cam SCL IO4 SDA IO13 MIC(SPQ2410) Interface SPQ2410 ESP32Cam OUT IO32 NOTE: Camera Power Down pin does not need to be connected to ESP32 GPIO. Instead it may be pulled down to ground with 10 kOhm resistor. We have several patterns of camera board, the following figures shows the main differece view click here . download click here . Related Link Offical Video Forum Datasheet - ESP32 - OV2640 Code Firmware ESP32CAM Firmware Related Video ESP32CAM Case - 01 M5Camera Case - 02","title":"Unit ESP32CAM {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/esp32cam/#unit-esp32cam-docsify-ignore-all","text":":memo: Description :bulb: Quick Start :octocat: Code :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"Unit ESP32CAM {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/esp32cam/#description","text":"ESP32CAM is a development board for image recognition. It features an ESP32(4M Flash + 520K RAM) chip and 2-Megapixel carmera(OV2640). It also supports image transmission via Wi-Fi and debuging through USB Type-C port. The hardware comes preloaded software, programmed by ESP-IDF. It is an application to run Wi-Fi camera. The output image is size 600*800, since it's 2-Maga camera, you sure can optimize the software to output the maximum size of photos. what this software can do? - Power the board via USB type-C or GROVE - Use your phone to Wi-Fi scan an AP name start with 'm5stack-' and click to connect this AP. - Open up web browser on your phone and visit 192.168.4.1 - Then here comes the picture. Video is about 5-6 frames per senconds. not super fast. The hardware also comes with some reserved weld pad, just in case you want put these chips back on board. - 9-axis gyroscope (MPU6050) - pressure sensor (BME280) - analog MIC (SPQ2410) - Battery socket ESP32CAM is the most popular pattern among the M5 camera series so far. If you need more storage please check M5Camera. If you need fisheye lens, please check M5CameraF. Note: ESP32CAM is named differently when different hardware is selected. They follow the rules below. ESP32CAM_#_#... means optional hardware name follows \"ESP32CAM\". If configured with MPU6050, will be named ESP32CAM_6050 If also configured with microphone, will be named ESP32CAM_6050_MIC If also configured with BME280, will be named ESP32CAM_6050_MIC_BME280","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/esp32cam/#product-features","text":"ESP32 specifications Dual-core Tensilica LX6 microprocessor Up to 240MHz clock frequency 520KB internal RAM 4MB Flash memory Integrated 802.11 BGN WiFi transceiver Integrated dual-mode Bluetooth (classic and BLE) Hardware accelerated encryption (AES, SHA2, ECC, RSA-4096) CP2104 USB TTL OV2640 sensor Output Formats(8-bit): YUV(422/420)/YCbCr422 RGB565/555 8-bit compressed data 8-/10-bit Raw RGB data Maximum Image Transfer Rate UXGA/SXGA: 15fps SVGA: 30fps CIF: 60fps Scan Mode: Progressive Camera specifications Field of View : 65 degree Maxmium Pixel: 2M Size: 20.5 \u00d7 46.5 \u00d7 11.5mm","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/esp32cam/#include","text":"1x ESP32CAM Unit","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/esp32cam/#pinmap","text":"Camera Interface PinMap Interface OV2640 Pin ESP32Cam SCCB Clock SIOC IO23 SCCB Data SIOD IO25 System Clock XCLK IO27 Vertical Sync VSYNC IO22 Horizontal Reference HREF IO26 Pixel Clock PCLK IO21 Pixel Data Bit 0 D2 IO17 Pixel Data Bit 1 D3 IO35 Pixel Data Bit 2 D4 IO34 Pixel Data Bit 3 D5 IO5 Pixel Data Bit 4 D6 IO39 Pixel Data Bit 5 D7 IO18 Pixel Data Bit 6 D8 IO36 Pixel Data Bit 7 D9 IO19 Camera Reset RESET IO15 Camera Power Down PWDN see Note 1 Power Supply 3.3V 3V3 3V3 Ground GND GND GROVE Interface Grove ESP32Cam SCL IO4 SDA IO13 5V 5V GND GND LED Interface LED ESP32Cam LED_Pin IO16 reserved chip interfaces BME280 Interface It's IIC address is 0x76. BME280 ESP32Cam SCL IO4 SDA IO13 MPU6050 Interface It's IIC address is 0x68. MPU6050 ESP32Cam SCL IO4 SDA IO13 MIC(SPQ2410) Interface SPQ2410 ESP32Cam OUT IO32 NOTE: Camera Power Down pin does not need to be connected to ESP32 GPIO. Instead it may be pulled down to ground with 10 kOhm resistor. We have several patterns of camera board, the following figures shows the main differece view click here . download click here .","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/esp32cam/#related-link","text":"Offical Video Forum Datasheet - ESP32 - OV2640","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/esp32cam/#code","text":"","title":"Code"},{"location":"tutorials/M5Stack/docs/en/unit/esp32cam/#firmware","text":"ESP32CAM Firmware","title":"Firmware"},{"location":"tutorials/M5Stack/docs/en/unit/esp32cam/#related-video","text":"ESP32CAM Case - 01 M5Camera Case - 02","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/unit/extio/","text":"Unit EXT.IO {docsify-ignore-all} :memo: Description :octocat: Example \ud83d\uded2 Purchase Description EXT.IO is a GOIO Expander. With simple I2C commands you can have up to 8 GPIOs. Integrates PCA9554PW. This 8-bit I/O expander for the two-line bidirectionalbus (I2C) is designed for 2.3-V to 5.5-V VCC \u2022 Open-Drain Active-Low Interrupt Output operation. It provides general-purpose remote I/O expansion for most microcontroller families via the I2C interface. IIC address: 0x27. It\u2019s difficult to foresee the needs of your project from the start. EXT.IO is the perfect solution for expanding the number of IO. It allows you to add new features, logic,timing and sensing to alrady highly integrated designs. Product Features Expanded I/O number: 8 GROVE interface, support UIFlow and Arduino Two Lego-compatible holes Include 1x EXT.IO Unit 1x Grove Cable Related Link Offical Video Forum Datasheet - PCA9554PW Example 1. Arduino IDE To get the complete code, please click here \u3002 /* Connect to GRVOE A on M5Core */ #include M5Stack.h #include PCA9554.h // Load the PCA9554 Library // new a object PCA9554 ioCon1(0x27); uint8_t res; // initialization M5.begin(); Wire.begin(); ioCon1.twiWrite(21, 22); // GROVE A delay(10); res = 1; ioCon1.twiRead(res); Serial.printf( res:%d\\r\\n , res); ioCon1.portMode0(ALLOUTPUT); //Set the port as all output // set the specific pin ioCon1.digitalWrite0(0, HIGH); ioCon1.digitalWrite0(1, HIGH); ioCon1.digitalWrite0(2, HIGH); ioCon1.digitalWrite0(3, HIGH); ioCon1.digitalWrite0(4, HIGH); ioCon1.digitalWrite0(5, HIGH); ioCon1.digitalWrite0(6, HIGH); ioCon1.digitalWrite0(7, HIGH); // write 0-7 HIGHT Serial.println(ioCon1.digitalWritePort0(0xff)); // write 0-7 LOW Serial.println(ioCon1.digitalWritePort0(0x00)); 2. UIFlow To get the complete code, please click here . PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND EXT.IO Unit SCL SDA 5V GND","title":"Unit EXT.IO {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/extio/#unit-extio-docsify-ignore-all","text":":memo: Description :octocat: Example \ud83d\uded2 Purchase","title":"Unit EXT.IO {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/extio/#description","text":"EXT.IO is a GOIO Expander. With simple I2C commands you can have up to 8 GPIOs. Integrates PCA9554PW. This 8-bit I/O expander for the two-line bidirectionalbus (I2C) is designed for 2.3-V to 5.5-V VCC \u2022 Open-Drain Active-Low Interrupt Output operation. It provides general-purpose remote I/O expansion for most microcontroller families via the I2C interface. IIC address: 0x27. It\u2019s difficult to foresee the needs of your project from the start. EXT.IO is the perfect solution for expanding the number of IO. It allows you to add new features, logic,timing and sensing to alrady highly integrated designs.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/extio/#product-features","text":"Expanded I/O number: 8 GROVE interface, support UIFlow and Arduino Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/extio/#include","text":"1x EXT.IO Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/extio/#related-link","text":"Offical Video Forum Datasheet - PCA9554PW","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/extio/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/extio/#1-arduino-ide","text":"To get the complete code, please click here \u3002 /* Connect to GRVOE A on M5Core */ #include M5Stack.h #include PCA9554.h // Load the PCA9554 Library // new a object PCA9554 ioCon1(0x27); uint8_t res; // initialization M5.begin(); Wire.begin(); ioCon1.twiWrite(21, 22); // GROVE A delay(10); res = 1; ioCon1.twiRead(res); Serial.printf( res:%d\\r\\n , res); ioCon1.portMode0(ALLOUTPUT); //Set the port as all output // set the specific pin ioCon1.digitalWrite0(0, HIGH); ioCon1.digitalWrite0(1, HIGH); ioCon1.digitalWrite0(2, HIGH); ioCon1.digitalWrite0(3, HIGH); ioCon1.digitalWrite0(4, HIGH); ioCon1.digitalWrite0(5, HIGH); ioCon1.digitalWrite0(6, HIGH); ioCon1.digitalWrite0(7, HIGH); // write 0-7 HIGHT Serial.println(ioCon1.digitalWritePort0(0xff)); // write 0-7 LOW Serial.println(ioCon1.digitalWritePort0(0x00));","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/extio/#2-uiflow","text":"To get the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/extio/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND EXT.IO Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/finger/","text":"Unit FINGER {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description FINGER Unit is a fingerprint sensor. This all-in-one fingerprint sensor makes fingerprint adding,verification,mananging super simple. Uart protocol, Compact size and ultra-low power consumption makes it very attractive to use around M5Stack series product. it performs fast fingerprint matching with highest security level and optimal user convenience. You can program to set the fingerprint recognition comparison level and different security level . if you ever consider secure your project with biometrics,don't forget to include this M5unit FINGER . This unit cummunicate with M5Core by UART protocol connected via PORTC UART settings: - Baudrate( default: 19200bps ) - Start bits(1 bit) - Stop bits(1 bit) - Parity(no) Product Features Include 1x FINGER Unit 1x Grove Cable Application Fingerprint Attendance Machine Fingerprint Locker Related Link Offical Video Forum FINGER communication protocol Example 1. Arduino IDE The code below is incomplete(just for usage). To get the complete code, please click here . /* Connect to GRVOE C on M5Core */ #include M5Stack.h #include finger.h uint8_t userNum; //User number uint8_t res1; // result for res1 #define ACK_SUCCESS 0x00 #define ACK_FAIL 0x01 #define ACK_FULL 0x04 #define ACK_NOUSER 0x05 #define ACK_USER_EXIST 0x07 #define ACK_TIMEOUT 0x08 // initialization M5.begin(); Serial2.begin(19200, SERIAL_8N1, 16, 17); userNum = fpm_getUserNum(); M5.Lcd.print( userNum: ); M5.Lcd.println(userNum); // add a new user res1 = fpm_addUser(userNum,1); //get function result // compare your finger res1 = fpm_compareFinger(); // delete all user res1 = fpm_deleteAllUser(); Schematic PinMap M5Core(GROVE C) U2RXD U2TXD 5V GND FINGER Unit TXD RXD 5V GND Related Video FINGER Application","title":"Unit FINGER {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/finger/#unit-finger-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"Unit FINGER {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/finger/#description","text":"FINGER Unit is a fingerprint sensor. This all-in-one fingerprint sensor makes fingerprint adding,verification,mananging super simple. Uart protocol, Compact size and ultra-low power consumption makes it very attractive to use around M5Stack series product. it performs fast fingerprint matching with highest security level and optimal user convenience. You can program to set the fingerprint recognition comparison level and different security level . if you ever consider secure your project with biometrics,don't forget to include this M5unit FINGER . This unit cummunicate with M5Core by UART protocol connected via PORTC UART settings: - Baudrate( default: 19200bps ) - Start bits(1 bit) - Stop bits(1 bit) - Parity(no)","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/finger/#product-features","text":"","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/finger/#include","text":"1x FINGER Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/finger/#application","text":"Fingerprint Attendance Machine Fingerprint Locker","title":"Application"},{"location":"tutorials/M5Stack/docs/en/unit/finger/#related-link","text":"Offical Video Forum FINGER communication protocol","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/finger/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/finger/#1-arduino-ide","text":"The code below is incomplete(just for usage). To get the complete code, please click here . /* Connect to GRVOE C on M5Core */ #include M5Stack.h #include finger.h uint8_t userNum; //User number uint8_t res1; // result for res1 #define ACK_SUCCESS 0x00 #define ACK_FAIL 0x01 #define ACK_FULL 0x04 #define ACK_NOUSER 0x05 #define ACK_USER_EXIST 0x07 #define ACK_TIMEOUT 0x08 // initialization M5.begin(); Serial2.begin(19200, SERIAL_8N1, 16, 17); userNum = fpm_getUserNum(); M5.Lcd.print( userNum: ); M5.Lcd.println(userNum); // add a new user res1 = fpm_addUser(userNum,1); //get function result // compare your finger res1 = fpm_compareFinger(); // delete all user res1 = fpm_deleteAllUser();","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/finger/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/finger/#pinmap","text":"M5Core(GROVE C) U2RXD U2TXD 5V GND FINGER Unit TXD RXD 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/finger/#related-video","text":"FINGER Application","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/unit/gps/","text":"Unit GPS {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description This is the M5Unit version of GPS , integrates a Zhongke Weibeidou navigation chip AT6558 and a amplification chip MAX2659 used for amplifying antenna signal. AT6558 is highly performance, supports many types of satellite navigation system,able to receive satellite signals on 56 channels GNSS signal from 6 satellite navigation system, joint location, navigation, timing and more. The module is able to obtain accurate global location information. quick and accurate positioning for anywhere in the city, in the canyon, under the overhead, and inside the car. The module can be widely used in vehicle monitoring, bus reporting, car navigation, onboard navigation, notebook navigation and other products. You can plug it into port C on M5core via GROVE cable, which is a standard UART interface. UART settings : - Baudrate( default: 9600bps ) - Start bits(1 bit) - Stop bits(1 bit) - Parity(no) Product Features Functional specification Positioning accuracy: 2.5 meters (CEP50, open space) Channel: 56 Support single system positioning of BDS/GPS/GLONASS satellite navigation systems, or multi-system joint positioning in any combination Support D-GNSS differential positioning Positioning update frequency: 1-10Hz Maximum height: 1800 m Maximum speed: 515 m/s Maximum acceleration: = 4 G Low power consumption BDS/GPS dual mode continuous operation: 23mA (@3.3V) Standby: 10uA (@3.3V) Sensitivity Tracking: -162dBm Capture: -148dBm Cold start: -146dBm Start Time Cold start: 35 seconds Warm start: 32 seconds Hot start: 1 second Operating temperature: -40~85\u00b0C Two Lego-compatible holes Include 1x GPS Unit 1x Grove Cable Application Car, ship positioning and navigation Smart law enforcement positioning Related Link Offical Video Forum [Datasheet] - AT6558 - MAX2659 TinyGPS++ library CASIC multimode satellite navigation receiver protocol specification GnssToolKit3(Windows Version) Example Arduino IDE To get the complete code GPSRaw.ino , please click here . #include M5Stack.h /* By default, GPS is connected with M5Core through UART2 */ HardwareSerial GPSRaw(2); void setup() { M5.begin(); GPSRaw.begin(9600);// GPS init Serial.println( hello ); termInit(); } void loop() { // put your main code here, to run repeatedly: if(Serial.available()) { int ch = Serial.read(); GPSRaw.write(ch); } if(GPSRaw.available()) { int ch = GPSRaw.read();// read GPS information Serial.write(ch); termPutchar(ch); } } After burnt the example code GPSRaw.ino , m5core and PC serial terminal will display following information $GNGGA,063012.000,2234.87140,N,11357.22414,E,1,06,4.2,7.3,M,0.0,M,,*7D $GNGLL,2234.87140,N,11357.22414,E,063012.000,A,A*4C $GPGSA,A,3,01,09,11,18,23,,,,,,,,6.3,4.2,4.7*32 $BDGSA,A,3,13,,,,,,,,,,,,6.3,4.2,4.7*21 $GPGSV,3,1,10,01,54,164,33,04,,,22,08,46,019,,09,23,230,24*40 $GPGSV,3,2,10,11,81,200,12,18,65,110,26,23,14,195,25,27,18,041,*78 $GPGSV,3,3,10,28,10,300,15,30,33,319,*7C $BDGSV,1,1,01,13,43,195,29*5A $GNRMC,063012.000,A,2234.87140,N,11357.22414,E,0.69,171.74,240419,,,A*7A $GNVTG,171.74,T,,M,0.69,N,1.27,K,A*2C $GNZDA,063012.000,24,04,2019,00,00*46 $GPTXT,01,01,01,ANTENNA OPEN*25 Analysis: $GNRMC,063012.000,A,2234.87140,N,11357.22414,E,0.69,171.74,240419,,,A*7A Indicates that the positioning information is UTC time is 06:30:12, north latitude 22.58119\u00b0, east longitude 113.95357\u00b0, date is April 24, 2019 Schematic PinMap M5Core(GROVE C) U2RXD(GPIO16) U2TXD(GPIO17) 5V GND GPS Unit Signal Transmitter(TXD) Signal Receiver(RXD) 5V GND","title":"Unit GPS {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/gps/#unit-gps-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Unit GPS {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/gps/#description","text":"This is the M5Unit version of GPS , integrates a Zhongke Weibeidou navigation chip AT6558 and a amplification chip MAX2659 used for amplifying antenna signal. AT6558 is highly performance, supports many types of satellite navigation system,able to receive satellite signals on 56 channels GNSS signal from 6 satellite navigation system, joint location, navigation, timing and more. The module is able to obtain accurate global location information. quick and accurate positioning for anywhere in the city, in the canyon, under the overhead, and inside the car. The module can be widely used in vehicle monitoring, bus reporting, car navigation, onboard navigation, notebook navigation and other products. You can plug it into port C on M5core via GROVE cable, which is a standard UART interface. UART settings : - Baudrate( default: 9600bps ) - Start bits(1 bit) - Stop bits(1 bit) - Parity(no)","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/gps/#product-features","text":"Functional specification Positioning accuracy: 2.5 meters (CEP50, open space) Channel: 56 Support single system positioning of BDS/GPS/GLONASS satellite navigation systems, or multi-system joint positioning in any combination Support D-GNSS differential positioning Positioning update frequency: 1-10Hz Maximum height: 1800 m Maximum speed: 515 m/s Maximum acceleration: = 4 G Low power consumption BDS/GPS dual mode continuous operation: 23mA (@3.3V) Standby: 10uA (@3.3V) Sensitivity Tracking: -162dBm Capture: -148dBm Cold start: -146dBm Start Time Cold start: 35 seconds Warm start: 32 seconds Hot start: 1 second Operating temperature: -40~85\u00b0C Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/gps/#include","text":"1x GPS Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/gps/#application","text":"Car, ship positioning and navigation Smart law enforcement positioning","title":"Application"},{"location":"tutorials/M5Stack/docs/en/unit/gps/#related-link","text":"Offical Video Forum [Datasheet] - AT6558 - MAX2659 TinyGPS++ library CASIC multimode satellite navigation receiver protocol specification GnssToolKit3(Windows Version)","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/gps/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/gps/#arduino-ide","text":"To get the complete code GPSRaw.ino , please click here . #include M5Stack.h /* By default, GPS is connected with M5Core through UART2 */ HardwareSerial GPSRaw(2); void setup() { M5.begin(); GPSRaw.begin(9600);// GPS init Serial.println( hello ); termInit(); } void loop() { // put your main code here, to run repeatedly: if(Serial.available()) { int ch = Serial.read(); GPSRaw.write(ch); } if(GPSRaw.available()) { int ch = GPSRaw.read();// read GPS information Serial.write(ch); termPutchar(ch); } } After burnt the example code GPSRaw.ino , m5core and PC serial terminal will display following information $GNGGA,063012.000,2234.87140,N,11357.22414,E,1,06,4.2,7.3,M,0.0,M,,*7D $GNGLL,2234.87140,N,11357.22414,E,063012.000,A,A*4C $GPGSA,A,3,01,09,11,18,23,,,,,,,,6.3,4.2,4.7*32 $BDGSA,A,3,13,,,,,,,,,,,,6.3,4.2,4.7*21 $GPGSV,3,1,10,01,54,164,33,04,,,22,08,46,019,,09,23,230,24*40 $GPGSV,3,2,10,11,81,200,12,18,65,110,26,23,14,195,25,27,18,041,*78 $GPGSV,3,3,10,28,10,300,15,30,33,319,*7C $BDGSV,1,1,01,13,43,195,29*5A $GNRMC,063012.000,A,2234.87140,N,11357.22414,E,0.69,171.74,240419,,,A*7A $GNVTG,171.74,T,,M,0.69,N,1.27,K,A*2C $GNZDA,063012.000,24,04,2019,00,00*46 $GPTXT,01,01,01,ANTENNA OPEN*25 Analysis: $GNRMC,063012.000,A,2234.87140,N,11357.22414,E,0.69,171.74,240419,,,A*7A Indicates that the positioning information is UTC time is 06:30:12, north latitude 22.58119\u00b0, east longitude 113.95357\u00b0, date is April 24, 2019","title":"Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/gps/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/gps/#pinmap","text":"M5Core(GROVE C) U2RXD(GPIO16) U2TXD(GPIO17) 5V GND GPS Unit Signal Transmitter(TXD) Signal Receiver(RXD) 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/heart/","text":"Unit HEART {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description HEART is build with MAX30100 . MAX30100 is a complete pulse oximetry and heartrate sensor system solution designed for the demanding requirements of wearable devices. The MAX30100 provides very small total solution size without sacrificing optical or electrical performance. Minimal external hardware components are needed for integration into a wearable device. How do we use this Unit to test the heart rate and ? Put your finger on the detection area. What is the communication protocol between M5 core and this unit? I2C . Product Features Programmable Sample Rate and LED Current for Power Savings Ultra-Low Shutdown Current (0.7\u00b5A, typ) Advanced Functionality Improves Measurement Performance High Sample Rate Capability Fast Data Output Capability GROVE interface Software Develop platform: Arduino Two Lego-compatible holes Include 1x HEART Unit 1x Grove Cable Related Link Offical Video Forum Datasheet - MAX30100 MAX30100lib Example 1. Arduino IDE To get the code, please click here . /* Install MAX30100lib Library first. MAX30100_RawData.ino */ #include Wire.h #include MAX30100.h #define SAMPLING_RATE MAX30100_SAMPRATE_100HZ #define IR_LED_CURRENT MAX30100_LED_CURR_50MA #define RED_LED_CURRENT MAX30100_LED_CURR_27_1MA // set HIGHRES_MODE to true only // when setting PULSE_WIDTH to MAX30100_SPC_PW_1600US_16BITS #define PULSE_WIDTH MAX30100_SPC_PW_1600US_16BITS #define HIGHRES_MODE true // new a object MAX30100 sensor; void setup() { Serial.begin(115200); Serial.print( Initializing MAX30100.. ); if (!sensor.begin()) { Serial.println( FAILED ); for(;;); } else { Serial.println( SUCCESS ); } sensor.setMode(MAX30100_MODE_SPO2_HR); sensor.setLedsCurrent(IR_LED_CURRENT, RED_LED_CURRENT); sensor.setLedsPulseWidth(PULSE_WIDTH); sensor.setSamplingRate(SAMPLING_RATE); sensor.setHighresModeEnabled(HIGHRES_MODE); } void loop() { uint16_t ir, red; sensor.update(); while (sensor.getRawValues( ir, red)) { Serial.print(ir); Serial.print('\\t'); Serial.println(red); } } Schematic PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND HEART Unit SCL SDA 5V GND","title":"Unit HEART {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/heart/#unit-heart-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Unit HEART {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/heart/#description","text":"HEART is build with MAX30100 . MAX30100 is a complete pulse oximetry and heartrate sensor system solution designed for the demanding requirements of wearable devices. The MAX30100 provides very small total solution size without sacrificing optical or electrical performance. Minimal external hardware components are needed for integration into a wearable device. How do we use this Unit to test the heart rate and ? Put your finger on the detection area. What is the communication protocol between M5 core and this unit? I2C .","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/heart/#product-features","text":"Programmable Sample Rate and LED Current for Power Savings Ultra-Low Shutdown Current (0.7\u00b5A, typ) Advanced Functionality Improves Measurement Performance High Sample Rate Capability Fast Data Output Capability GROVE interface Software Develop platform: Arduino Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/heart/#include","text":"1x HEART Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/heart/#related-link","text":"Offical Video Forum Datasheet - MAX30100 MAX30100lib","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/heart/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/heart/#1-arduino-ide","text":"To get the code, please click here . /* Install MAX30100lib Library first. MAX30100_RawData.ino */ #include Wire.h #include MAX30100.h #define SAMPLING_RATE MAX30100_SAMPRATE_100HZ #define IR_LED_CURRENT MAX30100_LED_CURR_50MA #define RED_LED_CURRENT MAX30100_LED_CURR_27_1MA // set HIGHRES_MODE to true only // when setting PULSE_WIDTH to MAX30100_SPC_PW_1600US_16BITS #define PULSE_WIDTH MAX30100_SPC_PW_1600US_16BITS #define HIGHRES_MODE true // new a object MAX30100 sensor; void setup() { Serial.begin(115200); Serial.print( Initializing MAX30100.. ); if (!sensor.begin()) { Serial.println( FAILED ); for(;;); } else { Serial.println( SUCCESS ); } sensor.setMode(MAX30100_MODE_SPO2_HR); sensor.setLedsCurrent(IR_LED_CURRENT, RED_LED_CURRENT); sensor.setLedsPulseWidth(PULSE_WIDTH); sensor.setSamplingRate(SAMPLING_RATE); sensor.setHighresModeEnabled(HIGHRES_MODE); } void loop() { uint16_t ir, red; sensor.update(); while (sensor.getRawValues( ir, red)) { Serial.print(ir); Serial.print('\\t'); Serial.println(red); } }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/heart/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/heart/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND HEART Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/hex/","text":"Unit HEX {docsify-ignore-all} :memo: Description :octocat: Example \ud83d\uded2 Purchase Description HEX is a hexagona Neopixel panel. Total 37 Neopixels. With a input port and a output port, you can have mutiple of them in series connection. This how LEDs layout in the panel. Pay attention to the sequence in your code. Product Features Total LED: 37 Software development platform: Arduino,UIFlow(Blockly python) Two Lego-compatible holes Include 1x HEX Unit 1x Grove Cable Related Link Offical Video Forum Neopixel Library on Arduino FastLED Library FastLED Reference(Chinese version) Example 1. Arduino IDE FastLED library on Arduino presents excellent and colorful lighting effects. Before compile, it is require to install the FastLED library and connect HEX to GROVE A. To get the complete code, please click here \u3002 /* Install FastLED library first.(HEX is connected to GROVE A) */ #include M5Stack.h #include FastLED.h #define Neopixel_PIN 21 #define NUM_LEDS 37 CRGB leds[NUM_LEDS]; uint8_t gHue = 0; void setup() { Serial.begin(115200); M5.begin(); M5.Lcd.clear(BLACK); M5.Lcd.setTextColor(YELLOW); M5.Lcd.setTextSize(2); M5.Lcd.setCursor(40, 0); M5.Lcd.println( HEX Example ); M5.Lcd.setTextColor(WHITE); M5.Lcd.setCursor(0, 25); M5.Lcd.println( Display rainbow effect ); // Neopixel initialization FastLED.addLeds WS2811,Neopixel_PIN,GRB / (leds, NUM_LEDS).setCorrection(TypicalLEDStrip); FastLED.setBrightness(10); } void loop(){ fill_rainbow( leds, NUM_LEDS, gHue, 7); FastLED.show();// must be executed for neopixel becoming effective EVERY_N_MILLISECONDS( 20 ) { gHue++; } } UIFlow To get the complete code, please click here . PinMap If HEX was connected to GROVE A M5Core(GROVE A) GPIO22 GPIO21 5V GND HEX Unit HEX Pin 5V GND If HEX was connected to GROVE B M5Core(GROVE B) GPIO36 GPIO26 5V GND HEX Unit HEX Pin 5V GND If HEX was connected to GROVE C M5Core(GROVE C) GPIO16 GPIO17 5V GND HEX Unit HEX Pin 5V GND","title":"Unit HEX {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/hex/#unit-hex-docsify-ignore-all","text":":memo: Description :octocat: Example \ud83d\uded2 Purchase","title":"Unit HEX {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/hex/#description","text":"HEX is a hexagona Neopixel panel. Total 37 Neopixels. With a input port and a output port, you can have mutiple of them in series connection. This how LEDs layout in the panel. Pay attention to the sequence in your code.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/hex/#product-features","text":"Total LED: 37 Software development platform: Arduino,UIFlow(Blockly python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/hex/#include","text":"1x HEX Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/hex/#related-link","text":"Offical Video Forum Neopixel Library on Arduino FastLED Library FastLED Reference(Chinese version)","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/hex/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/hex/#1-arduino-ide","text":"FastLED library on Arduino presents excellent and colorful lighting effects. Before compile, it is require to install the FastLED library and connect HEX to GROVE A. To get the complete code, please click here \u3002 /* Install FastLED library first.(HEX is connected to GROVE A) */ #include M5Stack.h #include FastLED.h #define Neopixel_PIN 21 #define NUM_LEDS 37 CRGB leds[NUM_LEDS]; uint8_t gHue = 0; void setup() { Serial.begin(115200); M5.begin(); M5.Lcd.clear(BLACK); M5.Lcd.setTextColor(YELLOW); M5.Lcd.setTextSize(2); M5.Lcd.setCursor(40, 0); M5.Lcd.println( HEX Example ); M5.Lcd.setTextColor(WHITE); M5.Lcd.setCursor(0, 25); M5.Lcd.println( Display rainbow effect ); // Neopixel initialization FastLED.addLeds WS2811,Neopixel_PIN,GRB / (leds, NUM_LEDS).setCorrection(TypicalLEDStrip); FastLED.setBrightness(10); } void loop(){ fill_rainbow( leds, NUM_LEDS, gHue, 7); FastLED.show();// must be executed for neopixel becoming effective EVERY_N_MILLISECONDS( 20 ) { gHue++; } }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/hex/#uiflow","text":"To get the complete code, please click here .","title":"UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/hex/#pinmap","text":"If HEX was connected to GROVE A M5Core(GROVE A) GPIO22 GPIO21 5V GND HEX Unit HEX Pin 5V GND If HEX was connected to GROVE B M5Core(GROVE B) GPIO36 GPIO26 5V GND HEX Unit HEX Pin 5V GND If HEX was connected to GROVE C M5Core(GROVE C) GPIO16 GPIO17 5V GND HEX Unit HEX Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/hub/","text":"Unit HUB {docsify-ignore-all} :memo: Description :electric_plug: Schematic \ud83d\uded2 Purchase Description HUB is one of the six Units in M5GO, allowed buy separately. This Units is used for GROVE port expanding. Notice: HUB is just a hardware expander, if you are looking for hardware and software(standard protocol) expander like I2C, Single-bus, please check PaHUB or PbHUB . If you connectted two I2C slave devices onto HUB that share the same adress, you will have problem getting I2C data from both. Product Features GROVE Expander Two Lego-compatible holes Include 1x HUB Unit 1x Grove Cable Related Link Offical Video Forum Schematic","title":"Unit HUB {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/hub/#unit-hub-docsify-ignore-all","text":":memo: Description :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Unit HUB {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/hub/#description","text":"HUB is one of the six Units in M5GO, allowed buy separately. This Units is used for GROVE port expanding. Notice: HUB is just a hardware expander, if you are looking for hardware and software(standard protocol) expander like I2C, Single-bus, please check PaHUB or PbHUB . If you connectted two I2C slave devices onto HUB that share the same adress, you will have problem getting I2C data from both.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/hub/#product-features","text":"GROVE Expander Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/hub/#include","text":"1x HUB Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/hub/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/hub/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/ir/","text":"Unit IR {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description IR is an pair of infrared photoelectric. Also from M5Go Kit, Contains 1x infrared emitter and 1x receiver. IR remote control is widely used in consumer electronics,it can be used to operate devices such as a television set, DVD player, or other home appliance, from a short distance. Since this unit comes with emitter and receiver, you can practice not only onIR encode but also on IR decode. Product Features 1x infrared emitter 1x infrared receiver Distance range: 5m Software Development Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes Include 1x IR Unit 1x Grove Cable Related Link Offical Video Forum Example 1. Arduino IDE The code below is incomplete. TO get the complete code, please click here . #include M5Stack.h // declaration int cur_recv_value = 0; // initialization M5.begin(); pinMode(ir_recv_pin, INPUT);// receiver pin pinMode(ir_send_pin, OUTPUT);// transmitter pin digitalWrite(ir_send_pin, 1);// send infrared light // read data cur_recv_value = digitalRead(ir_recv_pin);// read the status of receiver 2. UIFlow To get the complete code, please click here . Schematic PinMap M5Core(GROVE B) GPIO36 GPIO26 5V GND IR Unit Receiver Pin Transmitter Pin 5V GND","title":"Unit IR {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/ir/#unit-ir-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Unit IR {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/ir/#description","text":"IR is an pair of infrared photoelectric. Also from M5Go Kit, Contains 1x infrared emitter and 1x receiver. IR remote control is widely used in consumer electronics,it can be used to operate devices such as a television set, DVD player, or other home appliance, from a short distance. Since this unit comes with emitter and receiver, you can practice not only onIR encode but also on IR decode.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/ir/#product-features","text":"1x infrared emitter 1x infrared receiver Distance range: 5m Software Development Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/ir/#include","text":"1x IR Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/ir/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/ir/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/ir/#1-arduino-ide","text":"The code below is incomplete. TO get the complete code, please click here . #include M5Stack.h // declaration int cur_recv_value = 0; // initialization M5.begin(); pinMode(ir_recv_pin, INPUT);// receiver pin pinMode(ir_send_pin, OUTPUT);// transmitter pin digitalWrite(ir_send_pin, 1);// send infrared light // read data cur_recv_value = digitalRead(ir_recv_pin);// read the status of receiver","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/ir/#2-uiflow","text":"To get the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/ir/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/ir/#pinmap","text":"M5Core(GROVE B) GPIO36 GPIO26 5V GND IR Unit Receiver Pin Transmitter Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/joystick/","text":"Unit JOYSTICK {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description JOYSTICK , we have two types of JOYSTICKs one is build on a panle compatible with FACES Kit, this is the M5Unit version of JOYSTICK JOYSTICK is very similar to the 'analog' joystick on PS2 (PlayStation 2) controllers. The X and Y axes are two 10k potentiometers which control 2D movement by generating analog signals. The joystick also has a push button that could be used for special applications. Therefore, the entire Unit can output X-Y motion signals in both directions and Z direction. As designed in the schematic, the Joystick X dimension is connected to pin A0 of MEGA328, the Joystick Y dimension is connected to pin A1 on MEGA328, the Joystick Z dimension is connected to pin A2 on MEGA328. This Unit communicates with the M5Core via the GROVE A interface. It's I2C address is 0x52. By reading the data transferred from JOSTICK, you can obtain the motion information of JOYSTICK. Product Features Output value of X, Y direction: 10 ~ 250 Output value of Z direction is (0: released; 1: pressed) Software Development Platform : Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes Include 1x JOYSTICK Unit 1x Grove Cable Application Game Controller Robot remote control Related Link Offical Video Forum Example 1. Arduino IDE The code below is incomplete(just for usage).To get complete code, please click here . #include M5Stack.h #include Wire.h #define JOY_ADDR 0x52 // declaration uint8_t x_data, y_data, button_data; char data[100]; // initialization M5.begin(); M5.Lcd.clear(); dacWrite(25, 0);//disable the speak noise Wire.begin(21, 22, 400000); // read data Wire.requestFrom(JOY_ADDR, 3); if (Wire.available()) { x_data = Wire.read();// X(range: 10~250) y_data = Wire.read();// Y(range: 10~250) button_data = Wire.read();// Z(0: released 1: pressed) sprintf(data, x:%d y:%d button:%d\\n , x_data, y_data, button_data); } 2. UIFlow To get complete code, please click here . Schematic PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND JOYSTICK Unit SCL SDA 5V GND Related Video Joystick Case - controll wheelchair Joystick Case - Page flipping and selection of menu interface","title":"Unit JOYSTICK {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/joystick/#unit-joystick-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"Unit JOYSTICK {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/joystick/#description","text":"JOYSTICK , we have two types of JOYSTICKs one is build on a panle compatible with FACES Kit, this is the M5Unit version of JOYSTICK JOYSTICK is very similar to the 'analog' joystick on PS2 (PlayStation 2) controllers. The X and Y axes are two 10k potentiometers which control 2D movement by generating analog signals. The joystick also has a push button that could be used for special applications. Therefore, the entire Unit can output X-Y motion signals in both directions and Z direction. As designed in the schematic, the Joystick X dimension is connected to pin A0 of MEGA328, the Joystick Y dimension is connected to pin A1 on MEGA328, the Joystick Z dimension is connected to pin A2 on MEGA328. This Unit communicates with the M5Core via the GROVE A interface. It's I2C address is 0x52. By reading the data transferred from JOSTICK, you can obtain the motion information of JOYSTICK.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/joystick/#product-features","text":"Output value of X, Y direction: 10 ~ 250 Output value of Z direction is (0: released; 1: pressed) Software Development Platform : Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/joystick/#include","text":"1x JOYSTICK Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/joystick/#application","text":"Game Controller Robot remote control","title":"Application"},{"location":"tutorials/M5Stack/docs/en/unit/joystick/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/joystick/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/joystick/#1-arduino-ide","text":"The code below is incomplete(just for usage).To get complete code, please click here . #include M5Stack.h #include Wire.h #define JOY_ADDR 0x52 // declaration uint8_t x_data, y_data, button_data; char data[100]; // initialization M5.begin(); M5.Lcd.clear(); dacWrite(25, 0);//disable the speak noise Wire.begin(21, 22, 400000); // read data Wire.requestFrom(JOY_ADDR, 3); if (Wire.available()) { x_data = Wire.read();// X(range: 10~250) y_data = Wire.read();// Y(range: 10~250) button_data = Wire.read();// Z(0: released 1: pressed) sprintf(data, x:%d y:%d button:%d\\n , x_data, y_data, button_data); }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/joystick/#2-uiflow","text":"To get complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/joystick/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/joystick/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND JOYSTICK Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/joystick/#related-video","text":"Joystick Case - controll wheelchair Joystick Case - Page flipping and selection of menu interface","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/unit/light/","text":"Unit LIGHT {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description LIGHT is a light intensity sensor unit with an adjustable photoresistor\u3002 A photoresistor is a light-controlled variable resistor. The resistance of a photoresistor decreases with increasing incident light intensity, and vice versa. It exhibits photoconductivity which make it possiable to detect the varies based on Voltage, and use a AD to convert the digital data. We add some extra work to strengthen the circult, a Dual Differential Comparators LM393 , compares the differntial voltage between the photoresistor and the varistor. It could offer larger and accuracy range of light intensity. Product Features 10K adjustable resistor Software Development Platform: Arduino, UIFlow(Blocky,Python) Two Lego-compatible holes Include 1x LIGHT Unit 1x Grove Cable Related Link Offical Video Forum Example 1. Arduino IDE The code below is incomplete. To complete code, please click here . #include M5Stack.h // declaration uint16_t analogRead_value = 0; uint16_t digitalRead_value = 0; // initialization M5.begin(); dacWrite(25, 0);// disable the speak noise pinMode(26, INPUT);// LIGHT Pin setting // read data analogRead_value = analogRead(36);// read analog value of LIGHT digitalRead_value = digitalRead(26); 2. UIFlow To get complete code, please click here . Schematic PinMap M5Core(GROVE B) GPIO36 GPIO26 5V GND LIGHT Unit AnalogSignal Pin DigitalSignal Pin 5V GND Related Video LIGHT - Tutorial LIGHT Application","title":"Unit LIGHT {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/light/#unit-light-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"Unit LIGHT {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/light/#description","text":"LIGHT is a light intensity sensor unit with an adjustable photoresistor\u3002 A photoresistor is a light-controlled variable resistor. The resistance of a photoresistor decreases with increasing incident light intensity, and vice versa. It exhibits photoconductivity which make it possiable to detect the varies based on Voltage, and use a AD to convert the digital data. We add some extra work to strengthen the circult, a Dual Differential Comparators LM393 , compares the differntial voltage between the photoresistor and the varistor. It could offer larger and accuracy range of light intensity.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/light/#product-features","text":"10K adjustable resistor Software Development Platform: Arduino, UIFlow(Blocky,Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/light/#include","text":"1x LIGHT Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/light/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/light/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/light/#1-arduino-ide","text":"The code below is incomplete. To complete code, please click here . #include M5Stack.h // declaration uint16_t analogRead_value = 0; uint16_t digitalRead_value = 0; // initialization M5.begin(); dacWrite(25, 0);// disable the speak noise pinMode(26, INPUT);// LIGHT Pin setting // read data analogRead_value = analogRead(36);// read analog value of LIGHT digitalRead_value = digitalRead(26);","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/light/#2-uiflow","text":"To get complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/light/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/light/#pinmap","text":"M5Core(GROVE B) GPIO36 GPIO26 5V GND LIGHT Unit AnalogSignal Pin DigitalSignal Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/light/#related-video","text":"LIGHT - Tutorial LIGHT Application","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera/","text":"Unit M5Camera {docsify-ignore-all} :memo: Description :bulb: Quick Start :octocat: Code :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description M5Camera is a development board for image recognition. It features an ESP32(4M Flash + 520K RAM) chip and 2-Megapixel carmera(OV2640). M5Camera offers plenty of storage, with an extra 4 Mbyte PSRAM. It also supports image transmission via Wi-Fi and debuging through USB Type-C port. The hardware comes preloaded software, programmed by ESP-IDF. It is an application to run Wi-Fi camera. The output image is size 600*800, since it's 2-Maga camera, you sure can optimize the software to output the maximum size of photos. what this software can do? - Power the board via USB type-C or GROVE - Use your phone to Wi-Fi scan an AP name start with 'm5stack-' and click to connect this AP. - Open up web browser on your phone and visit 192.168.4.1 - Then here comes the picture. Video is about 5-6 frames per senconds. not super fast. The hardware also comes with some reserved weld pad, just in case you want put these chips back on board. - 9-axis gyroscope (MPU6050) - pressure sensor (BME280) - Analog MIC (SPQ2410) - Battery socket Please notice: There are 2 types of M5Camera - Model A Model B - They have different circuits, can be identified by backside sticker - Model A is halt production. The new coming M5Camera is just Model B - In Model A circult design MPU6050 and camera sensor have I2C conflict, which means you can't use both at the same time. - Model B have better performance on image quality and processing speed. This Unit reserves the weld of the 9-axis gyroscope (MPU6050), Temperature and humidity pressure sensor (BME280) and Digital silicon microphone (SPM1423) . If you need those devices, you can Self-weld them or purchase those version thraightly. Additionally, M5Camera also reserves the weld of battery. Note: M5Camera is named differently when different hardware is selected. They follow the rules below. M5Camera_#_#... means optional hardware name follows \"M5Camera\". If configured with MPU6050, will be named M5Camera_6050 If also configured with microphone, will be named M5Camera_6050_MIC If also configured with BME280, will be named M5Camera_6050_MIC_BME280 Product Features ESP32 specifications Dual-core Tensilica LX6 microprocessor Up to 240MHz clock frequency 4MB PSRAM 4MB Flash memory Integrated 802.11 BGN WiFi transceiver Integrated dual-mode Bluetooth (classic and BLE) Hardware accelerated encryption (AES, SHA2, ECC, RSA-4096) CP2104 USB-to-TTL converter OV2640 sensor Output Formats(8-bit): YUV(422/420)/YCbCr422 RGB565/555 8-bit compressed data 8-/10-bit Raw RGB data Maximum Image Transfer Rate according to specific format UXGA/SXGA: 15fps SVGA: 30fps CIF: 60fps Scan Mode: Progressive Camera specifications CCD size : 1/4 inch Field of View : 65 degree Maxmium Pixel: 2M Sensor best resolution: 1600 * 1200 Dimension: 40 \u00d7 49 \u00d7 13mm Include 1x M5Camera 1x Type-C USB Cable PinMap There are two versions of M5Camera Unit: A Model and B Model. Camera Interface PinMap Interface Camera Pin M5Camera(A model) M5Camera(B model) SCCB Clock SIOC IO23 IO23 SCCB Data SIOD IO25 IO22 System Clock XCLK IO27 IO27 Vertical Sync VSYNC IO22 IO25 Horizontal Reference HREF IO26 IO26 Pixel Clock PCLK IO21 IO21 Pixel Data Bit 0 D2 IO32 IO32 Pixel Data Bit 1 D3 IO35 IO35 Pixel Data Bit 2 D4 IO34 IO34 Pixel Data Bit 3 D5 IO5 IO5 Pixel Data Bit 4 D6 IO39 IO39 Pixel Data Bit 5 D7 IO18 IO18 Pixel Data Bit 6 D8 IO36 IO36 Pixel Data Bit 7 D9 IO19 IO19 Camera Reset RESET IO15 IO15 Camera Power Down PWDN see Note 1 see Note 1 Power Supply 3.3V 3V3 3V3 3V3 Ground GND GND GND GROVE Interface Grove M5Camera(A model) M5Camera(B model) SCL IO13 IO13 SDA IO12 IO4 5V 5V 5V GND GND GND LED Interface LED M5Camera(A model) M5Camera(B model) LED_Pin IO14 IO14 The following tables are Reserved Chip Interfaces BME280 Interface It's IIC address is 0x76. BME280 M5Camera(A model) M5Camera(B model) SCL IO23 IO23 SDA IO22 IO22 MPU6050 Interface It's IIC address is 0x68. MPU6050 M5Camera(A model) M5Camera(B model) SCL IO23 IO23 SDA IO22 IO22 MIC(SPM1423) Interface MIC(SPM1423) M5Camera(A model) M5Camera(B model) SCL IO2 IO2 SDA IO4 IO4 NOTE: Camera Power Down pin does not need to be connected to ESP32 GPIO. Instead it may be pulled down to ground with 10 kOhm resistor. We have several patterns of camera board, the following figures shows the main differece view click here . download click here . Related Link Offical Video Forum Datasheet - ESP32 - OV2640 Code Firmware A Model B Model Example Color recognition Face recognition Schematic Power circuit Chip peripheral circuit USB to serial port part of the circuit Related Video M5Camera Case - Image transmission between M5Camera and M5Core M5Camera Case - Protective pudding","title":"Unit M5Camera {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera/#unit-m5camera-docsify-ignore-all","text":":memo: Description :bulb: Quick Start :octocat: Code :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"Unit M5Camera {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera/#description","text":"M5Camera is a development board for image recognition. It features an ESP32(4M Flash + 520K RAM) chip and 2-Megapixel carmera(OV2640). M5Camera offers plenty of storage, with an extra 4 Mbyte PSRAM. It also supports image transmission via Wi-Fi and debuging through USB Type-C port. The hardware comes preloaded software, programmed by ESP-IDF. It is an application to run Wi-Fi camera. The output image is size 600*800, since it's 2-Maga camera, you sure can optimize the software to output the maximum size of photos. what this software can do? - Power the board via USB type-C or GROVE - Use your phone to Wi-Fi scan an AP name start with 'm5stack-' and click to connect this AP. - Open up web browser on your phone and visit 192.168.4.1 - Then here comes the picture. Video is about 5-6 frames per senconds. not super fast. The hardware also comes with some reserved weld pad, just in case you want put these chips back on board. - 9-axis gyroscope (MPU6050) - pressure sensor (BME280) - Analog MIC (SPQ2410) - Battery socket Please notice: There are 2 types of M5Camera - Model A Model B - They have different circuits, can be identified by backside sticker - Model A is halt production. The new coming M5Camera is just Model B - In Model A circult design MPU6050 and camera sensor have I2C conflict, which means you can't use both at the same time. - Model B have better performance on image quality and processing speed. This Unit reserves the weld of the 9-axis gyroscope (MPU6050), Temperature and humidity pressure sensor (BME280) and Digital silicon microphone (SPM1423) . If you need those devices, you can Self-weld them or purchase those version thraightly. Additionally, M5Camera also reserves the weld of battery. Note: M5Camera is named differently when different hardware is selected. They follow the rules below. M5Camera_#_#... means optional hardware name follows \"M5Camera\". If configured with MPU6050, will be named M5Camera_6050 If also configured with microphone, will be named M5Camera_6050_MIC If also configured with BME280, will be named M5Camera_6050_MIC_BME280","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera/#product-features","text":"ESP32 specifications Dual-core Tensilica LX6 microprocessor Up to 240MHz clock frequency 4MB PSRAM 4MB Flash memory Integrated 802.11 BGN WiFi transceiver Integrated dual-mode Bluetooth (classic and BLE) Hardware accelerated encryption (AES, SHA2, ECC, RSA-4096) CP2104 USB-to-TTL converter OV2640 sensor Output Formats(8-bit): YUV(422/420)/YCbCr422 RGB565/555 8-bit compressed data 8-/10-bit Raw RGB data Maximum Image Transfer Rate according to specific format UXGA/SXGA: 15fps SVGA: 30fps CIF: 60fps Scan Mode: Progressive Camera specifications CCD size : 1/4 inch Field of View : 65 degree Maxmium Pixel: 2M Sensor best resolution: 1600 * 1200 Dimension: 40 \u00d7 49 \u00d7 13mm","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera/#include","text":"1x M5Camera 1x Type-C USB Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera/#pinmap","text":"There are two versions of M5Camera Unit: A Model and B Model. Camera Interface PinMap Interface Camera Pin M5Camera(A model) M5Camera(B model) SCCB Clock SIOC IO23 IO23 SCCB Data SIOD IO25 IO22 System Clock XCLK IO27 IO27 Vertical Sync VSYNC IO22 IO25 Horizontal Reference HREF IO26 IO26 Pixel Clock PCLK IO21 IO21 Pixel Data Bit 0 D2 IO32 IO32 Pixel Data Bit 1 D3 IO35 IO35 Pixel Data Bit 2 D4 IO34 IO34 Pixel Data Bit 3 D5 IO5 IO5 Pixel Data Bit 4 D6 IO39 IO39 Pixel Data Bit 5 D7 IO18 IO18 Pixel Data Bit 6 D8 IO36 IO36 Pixel Data Bit 7 D9 IO19 IO19 Camera Reset RESET IO15 IO15 Camera Power Down PWDN see Note 1 see Note 1 Power Supply 3.3V 3V3 3V3 3V3 Ground GND GND GND GROVE Interface Grove M5Camera(A model) M5Camera(B model) SCL IO13 IO13 SDA IO12 IO4 5V 5V 5V GND GND GND LED Interface LED M5Camera(A model) M5Camera(B model) LED_Pin IO14 IO14 The following tables are Reserved Chip Interfaces BME280 Interface It's IIC address is 0x76. BME280 M5Camera(A model) M5Camera(B model) SCL IO23 IO23 SDA IO22 IO22 MPU6050 Interface It's IIC address is 0x68. MPU6050 M5Camera(A model) M5Camera(B model) SCL IO23 IO23 SDA IO22 IO22 MIC(SPM1423) Interface MIC(SPM1423) M5Camera(A model) M5Camera(B model) SCL IO2 IO2 SDA IO4 IO4 NOTE: Camera Power Down pin does not need to be connected to ESP32 GPIO. Instead it may be pulled down to ground with 10 kOhm resistor. We have several patterns of camera board, the following figures shows the main differece view click here . download click here .","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera/#related-link","text":"Offical Video Forum Datasheet - ESP32 - OV2640","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera/#code","text":"","title":"Code"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera/#firmware","text":"A Model B Model","title":"Firmware"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera/#example","text":"Color recognition Face recognition","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera/#power-circuit","text":"","title":"Power circuit"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera/#chip-peripheral-circuit","text":"","title":"Chip peripheral circuit"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera/#usb-to-serial-port-part-of-the-circuit","text":"","title":"USB to serial port part of the circuit"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera/#related-video","text":"M5Camera Case - Image transmission between M5Camera and M5Core M5Camera Case - Protective pudding","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera_f/","text":"Unit M5CameraF {docsify-ignore-all} :memo: Description :bulb: Quick Start :octocat: Code \ud83d\uded2 :electric_plug: Schematic Purchase Description M5CameraF is a development board for image recognition. It features an ESP32(4M Flash + 520K RAM) chip and 2-Megapixel carmera(OV2640). M5CameraF offers plenty of storage, with an extra 4 Mbyte PSRAM. It also supports image transmission via Wi-Fi and debuging through USB Type-C port. The hardware comes preloaded software, programmed by ESP-IDF. It is an application to run Wi-Fi camera. The output image is size 600*800, since it's 2-Maga camera, you sure can optimize the software to output the maximum size of photos. what this software can do? - Power the board via USB type-C or GROVE - Use your phone to Wi-Fi scan an AP name start with 'm5stack-' and click to connect this AP. - Open up web browser on your phone and visit 192.168.4.1 - Then here comes the picture. Video is about 5-6 frames per senconds. not super fast. The hardware also comes with some reserved weld pad, just in case you want put these chips back on board. - 9-axis gyroscope (MPU6050) - pressure sensor (BME280) - Digital silicon microphone (SPM1423) - Battery socket This Unit reserves the weld of the 9-axis gyroscope (MPU6050), Temperature and humidity pressure sensor (BME280) and Digital silicon microphone (SPM1423) . If you need those devices, you can Self-weld them or purchase those version thraightly. Additionally, M5CameraF also reserves the weld of battery. The size of the battery that can be accommodated in the case corresponds to a battery capacity of 80mAh . Note: M5CameraF is named differently when different hardware is selected. They follow the rules below. M5CameraF_#_#... means optional hardware name follows \"M5CameraF\". If configured with MPU6050, will be named M5CameraF_6050 If also configured with microphone, will be named M5CameraF_6050_MIC If also configured with BME280, will be named M5CameraF_6050_MIC_BME280 If also configured with battery, will be named M5CameraF_6050_MIC_BME280_BAT Feature ESP32 specifications Dual-core Tensilica LX6 microprocessor Up to 240MHz clock frequency 4MB PSRAM 4MB Flash memory Integrated 802.11 BGN WiFi transceiver Integrated dual-mode Bluetooth (classic and BLE) Hardware accelerated encryption (AES, SHA2, ECC, RSA-4096) CP2104 USB-to-TTL converter OV2640 sensor Output Formats(8-bit): YUV(422/420)/YCbCr422 RGB565/555 8-bit compressed data 8-/10-bit Raw RGB data Maximum Image Transfer Rate according to specific format UXGA/SXGA: 15fps SVGA: 30fps CIF: 60fps Scan Mode: Progressive Camera specifications Field of View : 160 degree Maxmium Pixel: 200W Sensor best resolution: 1600 * 1200 Size\uff1a23.5 \u00d7 48 \u00d7 23.5mm Include 1x M5CameraF 1x LEGO Adapter 1x Wall/1515 1x Type-C USB Cable PinMap Camera Interface PinMap Interface Camera Pin M5CameraF SCCB Clock SIOC IO23 SCCB Data SIOD IO22 System Clock XCLK IO27 Vertical Sync VSYNC IO25 Horizontal Reference HREF IO26 Pixel Clock PCLK IO21 Pixel Data Bit 0 D2 IO32 Pixel Data Bit 1 D3 IO35 Pixel Data Bit 2 D4 IO34 Pixel Data Bit 3 D5 IO5 Pixel Data Bit 4 D6 IO39 Pixel Data Bit 5 D7 IO18 Pixel Data Bit 6 D8 IO36 Pixel Data Bit 7 D9 IO19 Camera Reset RESET IO15 Camera Power Down PWDN see Note 1 Power Supply 3.3V 3V3 3V3 Ground GND GND GROVE Interface Grove M5CameraF SCL IO13 SDA IO4 5V 5V GND GND LED Interface LED M5CameraF LED_Pin IO14 The following tables are Reserved Chip Interfaces BME280 Interface It's IIC address is 0x76. BME280 M5CameraF SCL IO23 SDA IO22 MPU6050 Interface It's IIC address is 0x68. MPU6050 M5CameraF SCL IO23 SDA IO22 MIC(SPM1423) Interface MIC(SPM1423) M5CameraF CLK IO4 DATA IO2 NOTE: Camera Power Down pin does not need to be connected to ESP32 GPIO. Instead it may be pulled down to ground with 10 kOhm resistor. We have several patterns of camera board, the following figures shows the main differece view click here . download click here . Related Link Offical Video Forum Datasheet - ESP32 - OV2640 Code Firmware M5Camera Firmware Schematic Power circuit Chip peripheral circuit USB to serial port part of the circuit !-- ### Example Color recognition Face recognition --","title":"Unit M5CameraF {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera_f/#unit-m5cameraf-docsify-ignore-all","text":":memo: Description :bulb: Quick Start :octocat: Code \ud83d\uded2 :electric_plug: Schematic Purchase","title":"Unit M5CameraF {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera_f/#description","text":"M5CameraF is a development board for image recognition. It features an ESP32(4M Flash + 520K RAM) chip and 2-Megapixel carmera(OV2640). M5CameraF offers plenty of storage, with an extra 4 Mbyte PSRAM. It also supports image transmission via Wi-Fi and debuging through USB Type-C port. The hardware comes preloaded software, programmed by ESP-IDF. It is an application to run Wi-Fi camera. The output image is size 600*800, since it's 2-Maga camera, you sure can optimize the software to output the maximum size of photos. what this software can do? - Power the board via USB type-C or GROVE - Use your phone to Wi-Fi scan an AP name start with 'm5stack-' and click to connect this AP. - Open up web browser on your phone and visit 192.168.4.1 - Then here comes the picture. Video is about 5-6 frames per senconds. not super fast. The hardware also comes with some reserved weld pad, just in case you want put these chips back on board. - 9-axis gyroscope (MPU6050) - pressure sensor (BME280) - Digital silicon microphone (SPM1423) - Battery socket This Unit reserves the weld of the 9-axis gyroscope (MPU6050), Temperature and humidity pressure sensor (BME280) and Digital silicon microphone (SPM1423) . If you need those devices, you can Self-weld them or purchase those version thraightly. Additionally, M5CameraF also reserves the weld of battery. The size of the battery that can be accommodated in the case corresponds to a battery capacity of 80mAh . Note: M5CameraF is named differently when different hardware is selected. They follow the rules below. M5CameraF_#_#... means optional hardware name follows \"M5CameraF\". If configured with MPU6050, will be named M5CameraF_6050 If also configured with microphone, will be named M5CameraF_6050_MIC If also configured with BME280, will be named M5CameraF_6050_MIC_BME280 If also configured with battery, will be named M5CameraF_6050_MIC_BME280_BAT","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera_f/#feature","text":"ESP32 specifications Dual-core Tensilica LX6 microprocessor Up to 240MHz clock frequency 4MB PSRAM 4MB Flash memory Integrated 802.11 BGN WiFi transceiver Integrated dual-mode Bluetooth (classic and BLE) Hardware accelerated encryption (AES, SHA2, ECC, RSA-4096) CP2104 USB-to-TTL converter OV2640 sensor Output Formats(8-bit): YUV(422/420)/YCbCr422 RGB565/555 8-bit compressed data 8-/10-bit Raw RGB data Maximum Image Transfer Rate according to specific format UXGA/SXGA: 15fps SVGA: 30fps CIF: 60fps Scan Mode: Progressive Camera specifications Field of View : 160 degree Maxmium Pixel: 200W Sensor best resolution: 1600 * 1200 Size\uff1a23.5 \u00d7 48 \u00d7 23.5mm","title":"Feature"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera_f/#include","text":"1x M5CameraF 1x LEGO Adapter 1x Wall/1515 1x Type-C USB Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera_f/#pinmap","text":"Camera Interface PinMap Interface Camera Pin M5CameraF SCCB Clock SIOC IO23 SCCB Data SIOD IO22 System Clock XCLK IO27 Vertical Sync VSYNC IO25 Horizontal Reference HREF IO26 Pixel Clock PCLK IO21 Pixel Data Bit 0 D2 IO32 Pixel Data Bit 1 D3 IO35 Pixel Data Bit 2 D4 IO34 Pixel Data Bit 3 D5 IO5 Pixel Data Bit 4 D6 IO39 Pixel Data Bit 5 D7 IO18 Pixel Data Bit 6 D8 IO36 Pixel Data Bit 7 D9 IO19 Camera Reset RESET IO15 Camera Power Down PWDN see Note 1 Power Supply 3.3V 3V3 3V3 Ground GND GND GROVE Interface Grove M5CameraF SCL IO13 SDA IO4 5V 5V GND GND LED Interface LED M5CameraF LED_Pin IO14 The following tables are Reserved Chip Interfaces BME280 Interface It's IIC address is 0x76. BME280 M5CameraF SCL IO23 SDA IO22 MPU6050 Interface It's IIC address is 0x68. MPU6050 M5CameraF SCL IO23 SDA IO22 MIC(SPM1423) Interface MIC(SPM1423) M5CameraF CLK IO4 DATA IO2 NOTE: Camera Power Down pin does not need to be connected to ESP32 GPIO. Instead it may be pulled down to ground with 10 kOhm resistor. We have several patterns of camera board, the following figures shows the main differece view click here . download click here .","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera_f/#related-link","text":"Offical Video Forum Datasheet - ESP32 - OV2640","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera_f/#code","text":"","title":"Code"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera_f/#firmware","text":"M5Camera Firmware","title":"Firmware"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera_f/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera_f/#power-circuit","text":"","title":"Power circuit"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera_f/#chip-peripheral-circuit","text":"","title":"Chip peripheral circuit"},{"location":"tutorials/M5Stack/docs/en/unit/m5camera_f/#usb-to-serial-port-part-of-the-circuit","text":"!-- ### Example Color recognition Face recognition --","title":"USB to serial port part of the circuit"},{"location":"tutorials/M5Stack/docs/en/unit/makey/","text":"Unit MAKEY {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description MAKEY Unit is inspired by an Invention kit called Makey Makey which brings the concept that users can connect everyday objects to computer programs. Using a circuit board, alligator clips, and a USB cable, the circult uses closed loop electrical signals to send the microprocessor either a keyboard stroke or mouse click signal. We've tried connect a bounch of fruits, one for each key,to this Unit. When you touch the apple, you make a connection, and MaKey sends the processor a keyboard message. The buzzer inside or speaker on M5core will exhibit the key value, so instead of using a keyboard, you can make a fruit piano. This Unit communicates with the M5Core via the GROVE A I2C(0x51). Instructions: 1\uff09Use the buzzer on the unit to exhibit sounds: Take a Dupont wire(male to male), one end plug into GND, hold the other end to your hand. Take another Dupont wire(male to male), one end plug into different key holes, the other end hold by the other hand. Make it a close circult. Plug into different key tones the buzzer will emit the corresponding tones. 2\uff09Use the speaker on the M5core to exhibit sounds: Connct MAKEY with M5Core via Grove A Download this example . Repeat the same operation as above. you will see this sound much better. Product Features Arduino Mega328p Controller Buzzer inside Up to 16 keys Software Development Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes Include 1x MAKEY unit 1x GROVE Cable Application Fruit piano Related Link Offical Video Forum Maykey Firmware Example 1. Arduino IDE The code below is incomplete. To get complete code, please click here . #include M5Stack.h #include Wire.h // initialization M5.begin(); pinMode(21, INPUT); pinMode(22, INPUT); Wire.begin();// Init I2C // read data Wire.requestFrom(MAKEY_ADDR, 2); while (Wire.available()) { Key1 = Wire.read();//read data from MAKEY Key2 = Wire.read();//read data from MAKEY tone_key = (Key2 8) | Key1;// the following picture will explain tone_key } 2. UIFlow To get complete code, please click here . Schematic PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND MAKEY Unit SCL SDA 5V GND","title":"Unit MAKEY {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/makey/#unit-makey-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Unit MAKEY {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/makey/#description","text":"MAKEY Unit is inspired by an Invention kit called Makey Makey which brings the concept that users can connect everyday objects to computer programs. Using a circuit board, alligator clips, and a USB cable, the circult uses closed loop electrical signals to send the microprocessor either a keyboard stroke or mouse click signal. We've tried connect a bounch of fruits, one for each key,to this Unit. When you touch the apple, you make a connection, and MaKey sends the processor a keyboard message. The buzzer inside or speaker on M5core will exhibit the key value, so instead of using a keyboard, you can make a fruit piano. This Unit communicates with the M5Core via the GROVE A I2C(0x51). Instructions: 1\uff09Use the buzzer on the unit to exhibit sounds: Take a Dupont wire(male to male), one end plug into GND, hold the other end to your hand. Take another Dupont wire(male to male), one end plug into different key holes, the other end hold by the other hand. Make it a close circult. Plug into different key tones the buzzer will emit the corresponding tones. 2\uff09Use the speaker on the M5core to exhibit sounds: Connct MAKEY with M5Core via Grove A Download this example . Repeat the same operation as above. you will see this sound much better.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/makey/#product-features","text":"Arduino Mega328p Controller Buzzer inside Up to 16 keys Software Development Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/makey/#include","text":"1x MAKEY unit 1x GROVE Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/makey/#application","text":"Fruit piano","title":"Application"},{"location":"tutorials/M5Stack/docs/en/unit/makey/#related-link","text":"Offical Video Forum Maykey Firmware","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/makey/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/makey/#1-arduino-ide","text":"The code below is incomplete. To get complete code, please click here . #include M5Stack.h #include Wire.h // initialization M5.begin(); pinMode(21, INPUT); pinMode(22, INPUT); Wire.begin();// Init I2C // read data Wire.requestFrom(MAKEY_ADDR, 2); while (Wire.available()) { Key1 = Wire.read();//read data from MAKEY Key2 = Wire.read();//read data from MAKEY tone_key = (Key2 8) | Key1;// the following picture will explain tone_key }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/makey/#2-uiflow","text":"To get complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/makey/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/makey/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND MAKEY Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/ncir/","text":"Unit NCIR {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description NCIR featured with built-in infrared sensor MLX90614 . It can be used to measure the surface temperature of a human body or other object. Unlike most temperature sensors, this sensor measures infrared light bouncing off of remote objects so it can sense temperature without having to touch them physically. Simply point the sensor towards what you want to measure and it will detect the temperature by absorbing IR waves emitted. Because it doesn't have to touch the object it's measuring, it can sense a wider range of temperatures than most digital sensors: from -70\u00b0C to +380\u00b0C! It takes the measurement over an 90-degree field of view so it can be handy for determining the average temperature of an area. Connect with M5Core via GROVE A IIC(0x5A). Product Features Operating voltage: 4.5 to 5.5V Measuring temperature range: -70\u00b0C ~ 382.2\u00b0C Measurement accuracy at room temperature: \u00b10.5\u00b0C Field of view: 90\u00b0 Sofrware Development Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes Include 1x NCIR Unit 1x Grove Cable APPLICATION Body Temperature Measurement Object (biological) Motion Detection Related Link Offical Video Forum Datasheet - MLX90614 Example 1. Arduino IDE The code below is incomplete. TO get complete code, please click here . #include M5Stack.h #include Wire.h #define NCIR_ADDR 0x5A // declaration uint16_t result; float temperature; // initialization Wire.begin();\\ M5.begin(); // read data Wire.beginTransmission(NCIR_ADDR);Wire.write(0x07);Wire.endTransmission(false); Wire.requestFrom(NCIR_ADDR, 2); result = Wire.read();// Receive DATA result |= Wire.read() 8;// Receive DATA // store temperature value temperature = result * 0.02 - 273.15; 2. UIFlow TO get complete code, please click here . Schematic PinMap M5Core (GROVE A) GPIO22 GPIO21 5V GND NCIR Unit SCL SDA 5V GND","title":"Unit NCIR {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/ncir/#unit-ncir-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Unit NCIR {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/ncir/#description","text":"NCIR featured with built-in infrared sensor MLX90614 . It can be used to measure the surface temperature of a human body or other object. Unlike most temperature sensors, this sensor measures infrared light bouncing off of remote objects so it can sense temperature without having to touch them physically. Simply point the sensor towards what you want to measure and it will detect the temperature by absorbing IR waves emitted. Because it doesn't have to touch the object it's measuring, it can sense a wider range of temperatures than most digital sensors: from -70\u00b0C to +380\u00b0C! It takes the measurement over an 90-degree field of view so it can be handy for determining the average temperature of an area. Connect with M5Core via GROVE A IIC(0x5A).","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/ncir/#product-features","text":"Operating voltage: 4.5 to 5.5V Measuring temperature range: -70\u00b0C ~ 382.2\u00b0C Measurement accuracy at room temperature: \u00b10.5\u00b0C Field of view: 90\u00b0 Sofrware Development Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/ncir/#include","text":"1x NCIR Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/ncir/#application","text":"Body Temperature Measurement Object (biological) Motion Detection","title":"APPLICATION"},{"location":"tutorials/M5Stack/docs/en/unit/ncir/#related-link","text":"Offical Video Forum Datasheet - MLX90614","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/ncir/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/ncir/#1-arduino-ide","text":"The code below is incomplete. TO get complete code, please click here . #include M5Stack.h #include Wire.h #define NCIR_ADDR 0x5A // declaration uint16_t result; float temperature; // initialization Wire.begin();\\ M5.begin(); // read data Wire.beginTransmission(NCIR_ADDR);Wire.write(0x07);Wire.endTransmission(false); Wire.requestFrom(NCIR_ADDR, 2); result = Wire.read();// Receive DATA result |= Wire.read() 8;// Receive DATA // store temperature value temperature = result * 0.02 - 273.15;","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/ncir/#2-uiflow","text":"TO get complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/ncir/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/ncir/#pinmap","text":"M5Core (GROVE A) GPIO22 GPIO21 5V GND NCIR Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/neoflash/","text":"Unit NEOFLASH {docsify-ignore-all} :memo: Description :octocat: Example \ud83d\uded2 Purchase :clapper: Related Video Description NEOFLASH is a RGB LED panel with 192 RGB LED(24x8). When you program this Unit, please pay attention to the sequence of the Neopixels. From top left (Where PIR placed) to right, and top to bottom. Connect this unit with M5Core via GROVE PORTB Single-Bus. We put Magnet on the backside, which means you can attach this to any metal surface. When you plug the GROVE PORTA into M5core, you have convert it into 3 extended GROVE A laid on the side. Product Features Total Neopixel quantity: 192 PIR PORTA extension(up to 3) Software Development Platform: Arduino, UIFlow(Blockly, python) Two Lego-compatible holes Include 1x NeoFlash Unit 1x Grove Cable Related Link Offical Video Forum FastLED Library FastLED Reference(Chinese version) Example 1. Arduino IDE This is a example that takes real-time time from the network and displays it on NEOFLASH. Show real time when someone is shaking before NEOFLASH, otherwise the time \"disappears\". To get complete code, please click here \u3002 PinMap M5Core(GROVE B) GPIO36 GPIO26 5V GND NEOFLASH Unit PIR Pin RGB Pin 5V GND Related Video Neoflash's Tutorial Neoflash Case - Alarm Clock","title":"Unit NEOFLASH {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/neoflash/#unit-neoflash-docsify-ignore-all","text":":memo: Description :octocat: Example \ud83d\uded2 Purchase :clapper: Related Video","title":"Unit NEOFLASH {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/neoflash/#description","text":"NEOFLASH is a RGB LED panel with 192 RGB LED(24x8). When you program this Unit, please pay attention to the sequence of the Neopixels. From top left (Where PIR placed) to right, and top to bottom. Connect this unit with M5Core via GROVE PORTB Single-Bus. We put Magnet on the backside, which means you can attach this to any metal surface. When you plug the GROVE PORTA into M5core, you have convert it into 3 extended GROVE A laid on the side.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/neoflash/#product-features","text":"Total Neopixel quantity: 192 PIR PORTA extension(up to 3) Software Development Platform: Arduino, UIFlow(Blockly, python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/neoflash/#include","text":"1x NeoFlash Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/neoflash/#related-link","text":"Offical Video Forum FastLED Library FastLED Reference(Chinese version)","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/neoflash/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/neoflash/#1-arduino-ide","text":"This is a example that takes real-time time from the network and displays it on NEOFLASH. Show real time when someone is shaking before NEOFLASH, otherwise the time \"disappears\". To get complete code, please click here \u3002","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/neoflash/#pinmap","text":"M5Core(GROVE B) GPIO36 GPIO26 5V GND NEOFLASH Unit PIR Pin RGB Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/neoflash/#related-video","text":"Neoflash's Tutorial Neoflash Case - Alarm Clock","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/unit/neopixel/","text":"Unit NEOPIXEL {docsify-ignore-all} :memo: Description :octocat: Example \ud83d\uded2 Purchase :clapper: Related Video Description NeoPixel is a extendable strip light with Neopixels lined on. Just in case you haven\u2019t heard about Neopixel yet, Neopixel features digitally addressable LEDs,which means each led can display RGB color and brightness individually. It is very easy to program by Single-BUS with simple protocol. Another feature is the extension and flexiblulity.You can even connect many of them up together to create a massive long LED display. It's important to note that, the brightness and the quantity of LEDs matters the most to the power consuming, if you have a bunch of them connectted up, you will need extra power supply. Notice: please pay attention to the direction of the input port and output port Product Features Alternative length: 10cm/20cm/0.5m/1m/2m Sofeware Development Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes extendable Include 1x NeoPixel Unit 1x Grove Cable Related Link Offical Video Forum FastLED Library FastLED Reference(Chinese version) Example 1. Arduino IDE To get complete code, please click here \u3002 /* Install FastLED library first. */ #include M5Stack.h #include FastLED.h #define Neopixel_PIN 21 #define NUM_LEDS 30 CRGB leds[NUM_LEDS]; uint8_t gHue = 0; static TaskHandle_t FastLEDshowTaskHandle = 0; static TaskHandle_t userTaskHandle = 0; void setup(){ Serial.begin(115200); M5.begin(); M5.Lcd.clear(BLACK); M5.Lcd.setTextColor(YELLOW); M5.Lcd.setTextSize(2); M5.Lcd.setCursor(40, 0); M5.Lcd.println( Neopixel example ); M5.Lcd.setTextColor(WHITE); M5.Lcd.setCursor(0, 25); M5.Lcd.println( Display rainbow effect ); // Neopixel initialization FastLED.addLeds WS2811,Neopixel_PIN,GRB \\ (leds, NUM_LEDS).setCorrection(TypicalLEDStrip); FastLED.setBrightness(10); xTaskCreatePinnedToCore(FastLEDshowTask, \\ FastLEDshowTask , 2048, NULL, 2, NULL, 1); } void loop(){ } void FastLEDshowESP32(){ if (userTaskHandle == 0){ userTaskHandle = xTaskGetCurrentTaskHandle(); xTaskNotifyGive(FastLEDshowTaskHandle); const TickType_t xMaxBlockTime = pdMS_TO_TICKS( 200 ); ulTaskNotifyTake(pdTRUE, xMaxBlockTime); userTaskHandle = 0; } } void FastLEDshowTask(void *pvParameters){ for(;;){ fill_rainbow(leds, NUM_LEDS, gHue, 7);// rainbow effect FastLED.show();// must be executed for neopixel becoming effective EVERY_N_MILLISECONDS( 20 ) { gHue++; } } } 2. UIFlow To get the complete code, please click here . PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND NEOPIXEL Unit Signal Pin 5V GND Related Video Neopixel case - 01 Neopixel case - 02","title":"Unit NEOPIXEL {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/neopixel/#unit-neopixel-docsify-ignore-all","text":":memo: Description :octocat: Example \ud83d\uded2 Purchase :clapper: Related Video","title":"Unit NEOPIXEL {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/neopixel/#description","text":"NeoPixel is a extendable strip light with Neopixels lined on. Just in case you haven\u2019t heard about Neopixel yet, Neopixel features digitally addressable LEDs,which means each led can display RGB color and brightness individually. It is very easy to program by Single-BUS with simple protocol. Another feature is the extension and flexiblulity.You can even connect many of them up together to create a massive long LED display. It's important to note that, the brightness and the quantity of LEDs matters the most to the power consuming, if you have a bunch of them connectted up, you will need extra power supply. Notice: please pay attention to the direction of the input port and output port","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/neopixel/#product-features","text":"Alternative length: 10cm/20cm/0.5m/1m/2m Sofeware Development Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes extendable","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/neopixel/#include","text":"1x NeoPixel Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/neopixel/#related-link","text":"Offical Video Forum FastLED Library FastLED Reference(Chinese version)","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/neopixel/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/neopixel/#1-arduino-ide","text":"To get complete code, please click here \u3002 /* Install FastLED library first. */ #include M5Stack.h #include FastLED.h #define Neopixel_PIN 21 #define NUM_LEDS 30 CRGB leds[NUM_LEDS]; uint8_t gHue = 0; static TaskHandle_t FastLEDshowTaskHandle = 0; static TaskHandle_t userTaskHandle = 0; void setup(){ Serial.begin(115200); M5.begin(); M5.Lcd.clear(BLACK); M5.Lcd.setTextColor(YELLOW); M5.Lcd.setTextSize(2); M5.Lcd.setCursor(40, 0); M5.Lcd.println( Neopixel example ); M5.Lcd.setTextColor(WHITE); M5.Lcd.setCursor(0, 25); M5.Lcd.println( Display rainbow effect ); // Neopixel initialization FastLED.addLeds WS2811,Neopixel_PIN,GRB \\ (leds, NUM_LEDS).setCorrection(TypicalLEDStrip); FastLED.setBrightness(10); xTaskCreatePinnedToCore(FastLEDshowTask, \\ FastLEDshowTask , 2048, NULL, 2, NULL, 1); } void loop(){ } void FastLEDshowESP32(){ if (userTaskHandle == 0){ userTaskHandle = xTaskGetCurrentTaskHandle(); xTaskNotifyGive(FastLEDshowTaskHandle); const TickType_t xMaxBlockTime = pdMS_TO_TICKS( 200 ); ulTaskNotifyTake(pdTRUE, xMaxBlockTime); userTaskHandle = 0; } } void FastLEDshowTask(void *pvParameters){ for(;;){ fill_rainbow(leds, NUM_LEDS, gHue, 7);// rainbow effect FastLED.show();// must be executed for neopixel becoming effective EVERY_N_MILLISECONDS( 20 ) { gHue++; } } }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/neopixel/#2-uiflow","text":"To get the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/neopixel/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND NEOPIXEL Unit Signal Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/neopixel/#related-video","text":"Neopixel case - 01 Neopixel case - 02","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/unit/pir/","text":"Unit PIR {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description PIR is used to measure infrared (IR) light radiating from objects in its field of view. PIR sensors are commonly called simply \"PIR\", or sometimes \"PID\", for \"passive infrared detector\". The term passive refers to the fact that PIR devices do not radiate energy for detection purposes. They work entirely by detecting infrared radiation emitted by or reflected from objects. This Unit communicates with the M5Core via the GROVE B. Notice: This Unit has 2s delay time. Feature Detects the distance: 150cm Delay time: 2s Sensing range: 100\u00b0 Quiescent current: 60uA Operating temperature: -20 - 80 \u00b0C GROVE interface, support UIFlow and Arduino Two Lego installation holes Include 1x PIR unit 1x GROVE Cable Application Human body Induction Lamp Security Product Automatic Induction Appliance Settings Related Link Offical Video Forum Example 1. Arduino IDE The code below is incomplete. To get complete code, please click here . #include M5Stack.h // initialization M5.begin(); pinMode(36, INPUT);// set pir sensor pin as input // read data int value = digitalRead(36);// read the pin(0: not detectd 1: detected) M5.update(); 2. UIFlow To get complete code, please click here . Schematic PinMap M5Core(GROVE B) GPIO36 GPIO26 5V GND PIR Unit Sensor Pin 5V GND","title":"Unit PIR {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/pir/#unit-pir-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Unit PIR {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/pir/#description","text":"PIR is used to measure infrared (IR) light radiating from objects in its field of view. PIR sensors are commonly called simply \"PIR\", or sometimes \"PID\", for \"passive infrared detector\". The term passive refers to the fact that PIR devices do not radiate energy for detection purposes. They work entirely by detecting infrared radiation emitted by or reflected from objects. This Unit communicates with the M5Core via the GROVE B. Notice: This Unit has 2s delay time.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/pir/#feature","text":"Detects the distance: 150cm Delay time: 2s Sensing range: 100\u00b0 Quiescent current: 60uA Operating temperature: -20 - 80 \u00b0C GROVE interface, support UIFlow and Arduino Two Lego installation holes","title":"Feature"},{"location":"tutorials/M5Stack/docs/en/unit/pir/#include","text":"1x PIR unit 1x GROVE Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/pir/#application","text":"Human body Induction Lamp Security Product Automatic Induction Appliance Settings","title":"Application"},{"location":"tutorials/M5Stack/docs/en/unit/pir/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/pir/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/pir/#1-arduino-ide","text":"The code below is incomplete. To get complete code, please click here . #include M5Stack.h // initialization M5.begin(); pinMode(36, INPUT);// set pir sensor pin as input // read data int value = digitalRead(36);// read the pin(0: not detectd 1: detected) M5.update();","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/pir/#2-uiflow","text":"To get complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/pir/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/pir/#pinmap","text":"M5Core(GROVE B) GPIO36 GPIO26 5V GND PIR Unit Sensor Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/proto/","text":"Unit PROTO {docsify-ignore-all} :memo: Description :electric_plug: \u539f\u7406\u56fe \ud83d\uded2 Purchase Description PROTO is a Unit size of universal prototyping board. You can have the total freedom to make your own project as you want it, with prototyping perboards that allows laying out customized circult to interact with the M5 core GROVE Port. Product Features Hole Size: 0.039\" 1mm (CNC Drilled) Hole Pitch: 0.1 in - (2.54 mm) Entire Hole Quantity: 70 Holes Two Lego-compatible holes Include 1x PROTO unit 1x GROVE Cable Related Link Offical Video Forum Schematic PinMap M5Core(GROVE B) GPIO36 GPIO26 5V GND PROTO Unit GPIO36 GPIO26 5V GND","title":"Unit PROTO {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/proto/#unit-proto-docsify-ignore-all","text":":memo: Description :electric_plug: \u539f\u7406\u56fe \ud83d\uded2 Purchase","title":"Unit PROTO {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/proto/#description","text":"PROTO is a Unit size of universal prototyping board. You can have the total freedom to make your own project as you want it, with prototyping perboards that allows laying out customized circult to interact with the M5 core GROVE Port.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/proto/#product-features","text":"Hole Size: 0.039\" 1mm (CNC Drilled) Hole Pitch: 0.1 in - (2.54 mm) Entire Hole Quantity: 70 Holes Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/proto/#include","text":"1x PROTO unit 1x GROVE Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/proto/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/proto/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/proto/#pinmap","text":"M5Core(GROVE B) GPIO36 GPIO26 5V GND PROTO Unit GPIO36 GPIO26 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/relay/","text":"Unit RELAY {docsify-ignore-all} :clapper: Video Tutorial :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description RELAY , as its namesake, is a M5Unit that implenments a Relay functions. Relay can be used as an electrically operated switch, uses an electromagnet to mechanically operate a switch,to where it is necessary to control a large power load circuit by a separate low-power signal, like a digital signal output from a mircoprocessor. Up to 30V DC and 220V AC. There are 3 pins named: ON, OFF, COM. You can program to make COM connect to ON or OFF, just by high and low out put of a digital GPIO. Product Features Single-BUS control Up to 3A @ 30 V DC or 220 V AC Software Development Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes Include 1x RELAY Unit 1x Grove Cable 1x 3.96 soket Application Remote control of high-power appliances, such as refrigerators, air conditioners, TVs, etc. Related Link Offical Video Forum Example 1. Arduino IDE The code below is incomplete. To get complete code, please click here . #include M5Stack.h void setup() { M5.begin(); M5.Lcd.clear(BLACK); M5.Lcd.setTextFont(4); M5.Lcd.setTextColor(YELLOW, BLACK); //disable the speak noise dacWrite(25, 0); pinMode(26, OUTPUT);// RELAY Pin setting } void loop(void) { digitalWrite(26, HIGH);// RELAY Unit work delay(500); digitalWrite(26, LOW);// RELAY Unit stop work delay(500); } 2. UIFlow To get complete code, please click here . Schematic PinMap M5Core(GROVE B) GPIO36 GPIO26 5V GND RELAY Unit RELAY Controlling Pin 5V GND Video Tutorial Program with UIFlow","title":"Unit RELAY {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/relay/#unit-relay-docsify-ignore-all","text":":clapper: Video Tutorial :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Unit RELAY {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/relay/#description","text":"RELAY , as its namesake, is a M5Unit that implenments a Relay functions. Relay can be used as an electrically operated switch, uses an electromagnet to mechanically operate a switch,to where it is necessary to control a large power load circuit by a separate low-power signal, like a digital signal output from a mircoprocessor. Up to 30V DC and 220V AC. There are 3 pins named: ON, OFF, COM. You can program to make COM connect to ON or OFF, just by high and low out put of a digital GPIO.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/relay/#product-features","text":"Single-BUS control Up to 3A @ 30 V DC or 220 V AC Software Development Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/relay/#include","text":"1x RELAY Unit 1x Grove Cable 1x 3.96 soket","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/relay/#application","text":"Remote control of high-power appliances, such as refrigerators, air conditioners, TVs, etc.","title":"Application"},{"location":"tutorials/M5Stack/docs/en/unit/relay/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/relay/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/relay/#1-arduino-ide","text":"The code below is incomplete. To get complete code, please click here . #include M5Stack.h void setup() { M5.begin(); M5.Lcd.clear(BLACK); M5.Lcd.setTextFont(4); M5.Lcd.setTextColor(YELLOW, BLACK); //disable the speak noise dacWrite(25, 0); pinMode(26, OUTPUT);// RELAY Pin setting } void loop(void) { digitalWrite(26, HIGH);// RELAY Unit work delay(500); digitalWrite(26, LOW);// RELAY Unit stop work delay(500); }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/relay/#2-uiflow","text":"To get complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/relay/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/relay/#pinmap","text":"M5Core(GROVE B) GPIO36 GPIO26 5V GND RELAY Unit RELAY Controlling Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/relay/#video-tutorial","text":"Program with UIFlow","title":"Video Tutorial"},{"location":"tutorials/M5Stack/docs/en/unit/rfid/","text":"Unit RFID {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description RFID has an RFID chip MFRC522 inside. The MFRC522 operates in the 13.56MHz frequency band and uses the modulation and demodulation principle to interact with the proximity RF card. This unit can realize the function of the card reading and writing device, to identify and record multiple card information, to encode and authority a RF card. It is able tp establish applications such as access control system, punching system, warehouse goods storage and community vehicle access registration. Connect this Unit to GROVE PORTA on M5Core, IIC adress is 0x28. Product Features Operating frequency: 13.56 MHz I2C data rate: Fast mode: up to 400 Kbit/s; High-speed mode: up to 3400 Kbit/s RC522 Transceiver Buffer: 64 bytes Supported protocol: ISO14443A, MIFARE and NTAG Operate temperature: -20\u2103-85\u2103 How long data be saved for: 10 years Reading and writing distance: 8 cm Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego installation holes Include 1x RFID unit 1x GROVE Cable Application Smart home access control system Vehicle management Smart transportation Smart bookshelf Related Link Offical Video Forum Datasheet - MFRC522 Example 1. Arduino IDE The code below is incomplete. To get complete code, please click here . After programming the RFID.ino, the IC card or the mobile phone NFC, close to the unit, moves back and forth around the unit, and the UID of the IC card or the RFID chip in the mobile phone will be printed on the screen of the M5Core. /* RFID.ino */ #include Wire.h #include MFRC522_I2C.h #include M5Stack.h // 0x28 is i2c address on SDA. Check your address with i2cscanner if not match. MFRC522 mfrc522(0x28); // Create MFRC522 instance. // initialization M5.begin(); Serial.begin(115200); Wire.begin(); /* Init MFRC522 */ mfrc522.PCD_Init(); /* Show details of PCD - MFRC522 Card Reader details */ ShowReaderDetails(); // get the uid of available card mfrc522.PICC_IsNewCardPresent();// scan for a new card mfrc522.PICC_ReadCardSerial();// read data // a new card is selected. The UID and SAK is saved at mfrc522.uid structor. for (byte i = 0; i mfrc522.uid.size; i++) { Serial.print(mfrc522.uid.uidByte[i] 0x10 ? 0 : ); Serial.print(mfrc522.uid.uidByte[i], HEX); } // other function void ShowReaderDetails() { /* Get the MFRC522 software version */ byte v = mfrc522.PCD_ReadRegister(mfrc522.VersionReg); if (v == 0x91) Serial.print(F( = v1.0 )); else if (v == 0x92) Serial.print(F( = v2.0 )); else Serial.print(F( (unknown) )); } 2. UIFlow To get complete code, please click here . After opening and burning this example using UIFlow , place the proximity card on the Unit surface and the screen displays \u201cTrue\u201d and the UID number of the card. Schematic PinMap M5Core ( GROVE A ) GPIO22 GPIO21 5V GND RFID Unit SCL SDA 5V GND","title":"Unit RFID {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/rfid/#unit-rfid-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Unit RFID {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/rfid/#description","text":"RFID has an RFID chip MFRC522 inside. The MFRC522 operates in the 13.56MHz frequency band and uses the modulation and demodulation principle to interact with the proximity RF card. This unit can realize the function of the card reading and writing device, to identify and record multiple card information, to encode and authority a RF card. It is able tp establish applications such as access control system, punching system, warehouse goods storage and community vehicle access registration. Connect this Unit to GROVE PORTA on M5Core, IIC adress is 0x28.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/rfid/#product-features","text":"Operating frequency: 13.56 MHz I2C data rate: Fast mode: up to 400 Kbit/s; High-speed mode: up to 3400 Kbit/s RC522 Transceiver Buffer: 64 bytes Supported protocol: ISO14443A, MIFARE and NTAG Operate temperature: -20\u2103-85\u2103 How long data be saved for: 10 years Reading and writing distance: 8 cm Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego installation holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/rfid/#include","text":"1x RFID unit 1x GROVE Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/rfid/#application","text":"Smart home access control system Vehicle management Smart transportation Smart bookshelf","title":"Application"},{"location":"tutorials/M5Stack/docs/en/unit/rfid/#related-link","text":"Offical Video Forum Datasheet - MFRC522","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/rfid/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/rfid/#1-arduino-ide","text":"The code below is incomplete. To get complete code, please click here . After programming the RFID.ino, the IC card or the mobile phone NFC, close to the unit, moves back and forth around the unit, and the UID of the IC card or the RFID chip in the mobile phone will be printed on the screen of the M5Core. /* RFID.ino */ #include Wire.h #include MFRC522_I2C.h #include M5Stack.h // 0x28 is i2c address on SDA. Check your address with i2cscanner if not match. MFRC522 mfrc522(0x28); // Create MFRC522 instance. // initialization M5.begin(); Serial.begin(115200); Wire.begin(); /* Init MFRC522 */ mfrc522.PCD_Init(); /* Show details of PCD - MFRC522 Card Reader details */ ShowReaderDetails(); // get the uid of available card mfrc522.PICC_IsNewCardPresent();// scan for a new card mfrc522.PICC_ReadCardSerial();// read data // a new card is selected. The UID and SAK is saved at mfrc522.uid structor. for (byte i = 0; i mfrc522.uid.size; i++) { Serial.print(mfrc522.uid.uidByte[i] 0x10 ? 0 : ); Serial.print(mfrc522.uid.uidByte[i], HEX); } // other function void ShowReaderDetails() { /* Get the MFRC522 software version */ byte v = mfrc522.PCD_ReadRegister(mfrc522.VersionReg); if (v == 0x91) Serial.print(F( = v1.0 )); else if (v == 0x92) Serial.print(F( = v2.0 )); else Serial.print(F( (unknown) )); }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/rfid/#2-uiflow","text":"To get complete code, please click here . After opening and burning this example using UIFlow , place the proximity card on the Unit surface and the screen displays \u201cTrue\u201d and the UID number of the card.","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/rfid/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/rfid/#pinmap","text":"M5Core ( GROVE A ) GPIO22 GPIO21 5V GND RFID Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/rgb/","text":"Unit RGB {docsify-ignore-all} :memo: Description :octocat: Example \ud83d\uded2 Purchase Description RGB is LED Unit include 3 individual LEDs. It is also one of the Unit from M5GO Kit. Each one can display anycolor based on RGB value. One feature of this Unit is extension, which means you can have mutiple of them wired together. This is a very useful piece on STEM class, students can program it to realize some of cool applications, for example a traffic light. Product Features Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes Include 1x RGB Unit 1x Grove Cable Related Link Offical Video Forum Example 1. Arduino IDE The code below is incomplete. To get complete code, please click here . /* Install the AdaFruit NeoPixel library first */ #include Adafruit_NeoPixel.h #define RGB_PIN 26 #define NUMPIXELS 3 // new a object Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB+NEO_KHZ800); int delayval = 150;// delay for half a second // initialization pixels.begin(); // This initializes the NeoPixel library. // display rgb pixels.setPixelColor(0, pixels.Color(100,0,0));//parameter = (rgb index, color) pixels.setPixelColor(1, pixels.Color(0,100,0)); pixels.setPixelColor(2, pixels.Color(0,0,100)); pixels.show(); // This sends the updated pixel color to the hardware. 2. UIFlow To get complete code, please click here . PinMap M5Core(GROVE B) GPIO36 GPIO26 5V GND RGB Unit Signal Pin 5V GND","title":"Unit RGB {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/rgb/#unit-rgb-docsify-ignore-all","text":":memo: Description :octocat: Example \ud83d\uded2 Purchase","title":"Unit RGB {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/rgb/#description","text":"RGB is LED Unit include 3 individual LEDs. It is also one of the Unit from M5GO Kit. Each one can display anycolor based on RGB value. One feature of this Unit is extension, which means you can have mutiple of them wired together. This is a very useful piece on STEM class, students can program it to realize some of cool applications, for example a traffic light.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/rgb/#product-features","text":"Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/rgb/#include","text":"1x RGB Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/rgb/#related-link","text":"Offical Video Forum","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/rgb/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/rgb/#1-arduino-ide","text":"The code below is incomplete. To get complete code, please click here . /* Install the AdaFruit NeoPixel library first */ #include Adafruit_NeoPixel.h #define RGB_PIN 26 #define NUMPIXELS 3 // new a object Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB+NEO_KHZ800); int delayval = 150;// delay for half a second // initialization pixels.begin(); // This initializes the NeoPixel library. // display rgb pixels.setPixelColor(0, pixels.Color(100,0,0));//parameter = (rgb index, color) pixels.setPixelColor(1, pixels.Color(0,100,0)); pixels.setPixelColor(2, pixels.Color(0,0,100)); pixels.show(); // This sends the updated pixel color to the hardware.","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/rgb/#2-uiflow","text":"To get complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/rgb/#pinmap","text":"M5Core(GROVE B) GPIO36 GPIO26 5V GND RGB Unit Signal Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/rs485/","text":"Unit RS485 {docsify-ignore-all} :memo: Description \ud83d\uded2 Purchase Description RS485 is a TTL to RS485 convertor. RS485 is a standard defining the electrical characteristics of drivers and receivers for use in serial communications systems, widely used in industrial field. multipoint systems are supported. used for converting TTL level to RS485 level. If the device to be controlled only can communicate with other device through RS485, you can connect this device with M5Core through this unit. In this case, you could easily control a RS485 device with UIFlow . Product Features Built in MAX485/SP485EEN DC in 12/24 V Program Platform: Arduino, UIFlow(Blockly,Pyhton) Two Lego-compatible holes Include 1x RS485 Unit 1x Grove Cable Related Link Offical Video Forum Datasheet - MAX485 - SP485EEN PinMap M5Core(GROVE C) U2RXD(GPIO16) U2TXD(GPIO17) 5V GND RS485 Unit RS485 TXD RS485 RXD 5V GND","title":"Unit RS485 {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/rs485/#unit-rs485-docsify-ignore-all","text":":memo: Description \ud83d\uded2 Purchase","title":"Unit RS485 {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/rs485/#description","text":"RS485 is a TTL to RS485 convertor. RS485 is a standard defining the electrical characteristics of drivers and receivers for use in serial communications systems, widely used in industrial field. multipoint systems are supported. used for converting TTL level to RS485 level. If the device to be controlled only can communicate with other device through RS485, you can connect this device with M5Core through this unit. In this case, you could easily control a RS485 device with UIFlow .","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/rs485/#product-features","text":"Built in MAX485/SP485EEN DC in 12/24 V Program Platform: Arduino, UIFlow(Blockly,Pyhton) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/rs485/#include","text":"1x RS485 Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/rs485/#related-link","text":"Offical Video Forum Datasheet - MAX485 - SP485EEN","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/rs485/#pinmap","text":"M5Core(GROVE C) U2RXD(GPIO16) U2TXD(GPIO17) 5V GND RS485 Unit RS485 TXD RS485 RXD 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/thermal/","text":"Unit THERMAL {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description THERMAL is a thermal imager Unit contains a thermopile sensors named MLX90640 . It can be used to measure the surface temperature of an object and form a thermographic image by a temperature gradient composed of different surface temperatures. The image resolution is 32 x 24 . The MLX90640 Infrared (IR) sensor array combines high resolution and reliable operation in harsh environments, providing a cost-effective alternative to more expensive high-end thermal imaging cameras. Unlike the case of a microbolometer, the sensor does not require frequent recalibration, ensuring continuous monitoring and reducing system cost. The field of view (FoV) option includes a standard 55\u00b0 x 35\u00b0 version and a wide angle version of 110\u00b0 x 75\u00b0 for distances up to 7m. This Unit is 110\u00b0\u00d775\u00b0 FoV , also known as the BAA package. The Unit communicates with the M5Core through the Grove A interface, IIC address is 0x33 Product Features Operating Voltage: 3V ~ 3.6V Current Consumption: 23mA Field of View: 55\u00b0x35\u00b0 Measurement Range: -40\u00b0C ~ 300\u00b0C Resolution: \u00b11.5\u00b0C Refresh Rate: 0.5Hz-64Hz Operating temperature: -40\u00b0C ~ 85\u00b0C Two Lego-compatible holes Include 1x THERMAL Unit 1x Grove Cable APPLICATION High precision non-contact temperature measurements Intrusion / Movement detection Visual IR thermometers Related Link Offical Video Forum Datasheet - MLX90640 Example 1. Arduino IDE The code below is incomplete. To get complete code, please click here \u3002 /* MLX90640.ino */ #include M5Stack.h #include Wire.h #include MLX90640_API.h #include MLX90640_I2C_Driver.h // declaration uint16_t eeMLX90640[832];//32 * 24 = 768 int SetRefreshRate; // initialization /* load system parameter */ MLX90640_DumpEE(MLX90640_address, eeMLX90640); /* load extraction parameter */ MLX90640_ExtractParameters(eeMLX90640, mlx90640); SetRefreshRate = MLX90640_SetRefreshRate(0x33, 0x05); M5.Lcd.fillScreen(TFT_BLACK); infodisplay(); // display heat map M5.update(); infodisplay(); interpolate_image(reversePixels,ROWS,COLS,dest_2d,\\ INTERPOLATED_ROWS,INTERPOLATED_COLS); Schematic PinMap M5Core (GROVE A) GPIO22 GPIO21 5V GND THERMAL Unit SCL SDA 5V GND Related Video THERMAL Case","title":"Unit THERMAL {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/thermal/#unit-thermal-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"Unit THERMAL {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/thermal/#description","text":"THERMAL is a thermal imager Unit contains a thermopile sensors named MLX90640 . It can be used to measure the surface temperature of an object and form a thermographic image by a temperature gradient composed of different surface temperatures. The image resolution is 32 x 24 . The MLX90640 Infrared (IR) sensor array combines high resolution and reliable operation in harsh environments, providing a cost-effective alternative to more expensive high-end thermal imaging cameras. Unlike the case of a microbolometer, the sensor does not require frequent recalibration, ensuring continuous monitoring and reducing system cost. The field of view (FoV) option includes a standard 55\u00b0 x 35\u00b0 version and a wide angle version of 110\u00b0 x 75\u00b0 for distances up to 7m. This Unit is 110\u00b0\u00d775\u00b0 FoV , also known as the BAA package. The Unit communicates with the M5Core through the Grove A interface, IIC address is 0x33","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/thermal/#product-features","text":"Operating Voltage: 3V ~ 3.6V Current Consumption: 23mA Field of View: 55\u00b0x35\u00b0 Measurement Range: -40\u00b0C ~ 300\u00b0C Resolution: \u00b11.5\u00b0C Refresh Rate: 0.5Hz-64Hz Operating temperature: -40\u00b0C ~ 85\u00b0C Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/thermal/#include","text":"1x THERMAL Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/thermal/#application","text":"High precision non-contact temperature measurements Intrusion / Movement detection Visual IR thermometers","title":"APPLICATION"},{"location":"tutorials/M5Stack/docs/en/unit/thermal/#related-link","text":"Offical Video Forum Datasheet - MLX90640","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/thermal/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/thermal/#1-arduino-ide","text":"The code below is incomplete. To get complete code, please click here \u3002 /* MLX90640.ino */ #include M5Stack.h #include Wire.h #include MLX90640_API.h #include MLX90640_I2C_Driver.h // declaration uint16_t eeMLX90640[832];//32 * 24 = 768 int SetRefreshRate; // initialization /* load system parameter */ MLX90640_DumpEE(MLX90640_address, eeMLX90640); /* load extraction parameter */ MLX90640_ExtractParameters(eeMLX90640, mlx90640); SetRefreshRate = MLX90640_SetRefreshRate(0x33, 0x05); M5.Lcd.fillScreen(TFT_BLACK); infodisplay(); // display heat map M5.update(); infodisplay(); interpolate_image(reversePixels,ROWS,COLS,dest_2d,\\ INTERPOLATED_ROWS,INTERPOLATED_COLS);","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/thermal/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/thermal/#pinmap","text":"M5Core (GROVE A) GPIO22 GPIO21 5V GND THERMAL Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/thermal/#related-video","text":"THERMAL Case","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/unit/tof/","text":"Unit TOF {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase Description TOF that employs time-of-flight techniques to resolve distance between the emit point and the reach point of a subject, measuring the round trip time of an artificial light signal provided by a laser. This unit integrated a distance measuring sensor VL53L0x providing accurate distance measurement whatever the target reflectance, unlike conventional technologies. It can measure absolute distances up to 2m in less than 30ms. This unit comunicates with M5Core via I2C(0x29). Product Features High precision Measure absolute distances up to 2m The wavelength of laser: 940nm Program Platform: Arduino, UIFlo(Blockly, Python) Two Lego-compatible holes Include 1x ToF Unit 1x Grove Cable APPLICATION 1D gesture recognition Laser Ranging 3D structured light imaging\uff083D sensing\uff09 Camera assist (ultra fast autofocus and depth of field) Related Link Offical Video Forum Datasheet - VL53L0X Example 1. Arduino IDE The below code is incomplete(just for usage). If you want the complete code, please click here . #include M5Stack.h #include Wire.h #define ToF_ADDR 0x29//the iic address of tof #define SYSRANGE_START 0x00 #define RESULT_RANGE_STATUS 0x14 #define ToF_ADDR 0x29 //the IIC address of ToF // declaration uint16_t dist=0; // initialization M5.begin(); Wire.begin();// join i2c bus (address optional for master) // read data write_byte_data_at(VL53L0X_REG_SYSRANGE_START, 0x01); read_block_data_at(VL53L0X_REG_RESULT_RANGE_STATUS, 12);//read 12 bytes once // get distance dist = makeuint16(gbuf[11], gbuf[10]);//split distance data to variable dist 2. UIFlow If you want the complete code, please click here . Schematic PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND TOF Unit SCL SDA 5V GND","title":"Unit TOF {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/tof/#unit-tof-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase","title":"Unit TOF {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/tof/#description","text":"TOF that employs time-of-flight techniques to resolve distance between the emit point and the reach point of a subject, measuring the round trip time of an artificial light signal provided by a laser. This unit integrated a distance measuring sensor VL53L0x providing accurate distance measurement whatever the target reflectance, unlike conventional technologies. It can measure absolute distances up to 2m in less than 30ms. This unit comunicates with M5Core via I2C(0x29).","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/tof/#product-features","text":"High precision Measure absolute distances up to 2m The wavelength of laser: 940nm Program Platform: Arduino, UIFlo(Blockly, Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/tof/#include","text":"1x ToF Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/tof/#application","text":"1D gesture recognition Laser Ranging 3D structured light imaging\uff083D sensing\uff09 Camera assist (ultra fast autofocus and depth of field)","title":"APPLICATION"},{"location":"tutorials/M5Stack/docs/en/unit/tof/#related-link","text":"Offical Video Forum Datasheet - VL53L0X","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/tof/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/tof/#1-arduino-ide","text":"The below code is incomplete(just for usage). If you want the complete code, please click here . #include M5Stack.h #include Wire.h #define ToF_ADDR 0x29//the iic address of tof #define SYSRANGE_START 0x00 #define RESULT_RANGE_STATUS 0x14 #define ToF_ADDR 0x29 //the IIC address of ToF // declaration uint16_t dist=0; // initialization M5.begin(); Wire.begin();// join i2c bus (address optional for master) // read data write_byte_data_at(VL53L0X_REG_SYSRANGE_START, 0x01); read_block_data_at(VL53L0X_REG_RESULT_RANGE_STATUS, 12);//read 12 bytes once // get distance dist = makeuint16(gbuf[11], gbuf[10]);//split distance data to variable dist","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/tof/#2-uiflow","text":"If you want the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/tof/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/tof/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND TOF Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/trace/","text":"Unit TRACE {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video Description TRACE is mainly consist of 4 sets of IR, 1x infrared emitting and 1x infrared receiver for each set. The infrared LEDs should be placed towards and close to the ground where having black tracing lines and white background (or vice versa) layouts. The IR transmitter keep emitting, at the mean time infrared ray would be absorbed by different color of objects. Black can absorb more ray than other color, so the infrared receiver (infrared sensitive phototransistor) would receive less which makes the resistance value of the phototransistor would vary with different object color. Then we assign an AD convertor tp capture the data. This Unit communicates with the M5Core via GROVE PORTA I2C(0x5A). Product Features operation range: The reflecting surface is less than 11mm from the photoelectric surface Program Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes Include 1x TRACE Unit 1x Grove Cable Application Self-tracing robot Related Link Offical Video Forum TRACE Firmeare Example 1. Arduino IDE The code below is incomplete. To get complete code, please click here \u3002 #include M5Stack.h #include Wire.h #define TRACE_ADDR 0x5a // declaration #define VALUE_SPLIT uint8_t value; int SensorArray[4] = {0}; // initialization m5.begin(); Serial.begin(115200); Wire.begin(); // read data Wire.beginTransmission(TRACE_ADDR); Wire.write(0x00); Wire.endTransmission(); Wire.requestFrom(TRACE_ADDR,1); while(Wire.available()){ value = Wire.read(); } SensorArray[3] = (value 0x08) 3; SensorArray[2] = (value 0x04) 2; SensorArray[1] = (value 0x02) 1; SensorArray[0] = (value 0x01) 0; 2. UIFlow To get complete code, please click here \u3002 Schematic PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND TRACE Unit SCL SDA 5V GND Related Video TRACE Case","title":"Unit TRACE {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/trace/#unit-trace-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: Schematic \ud83d\uded2 Purchase :clapper: Related Video","title":"Unit TRACE {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/trace/#description","text":"TRACE is mainly consist of 4 sets of IR, 1x infrared emitting and 1x infrared receiver for each set. The infrared LEDs should be placed towards and close to the ground where having black tracing lines and white background (or vice versa) layouts. The IR transmitter keep emitting, at the mean time infrared ray would be absorbed by different color of objects. Black can absorb more ray than other color, so the infrared receiver (infrared sensitive phototransistor) would receive less which makes the resistance value of the phototransistor would vary with different object color. Then we assign an AD convertor tp capture the data. This Unit communicates with the M5Core via GROVE PORTA I2C(0x5A).","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/trace/#product-features","text":"operation range: The reflecting surface is less than 11mm from the photoelectric surface Program Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/trace/#include","text":"1x TRACE Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/trace/#application","text":"Self-tracing robot","title":"Application"},{"location":"tutorials/M5Stack/docs/en/unit/trace/#related-link","text":"Offical Video Forum TRACE Firmeare","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/trace/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/trace/#1-arduino-ide","text":"The code below is incomplete. To get complete code, please click here \u3002 #include M5Stack.h #include Wire.h #define TRACE_ADDR 0x5a // declaration #define VALUE_SPLIT uint8_t value; int SensorArray[4] = {0}; // initialization m5.begin(); Serial.begin(115200); Wire.begin(); // read data Wire.beginTransmission(TRACE_ADDR); Wire.write(0x00); Wire.endTransmission(); Wire.requestFrom(TRACE_ADDR,1); while(Wire.available()){ value = Wire.read(); } SensorArray[3] = (value 0x08) 3; SensorArray[2] = (value 0x04) 2; SensorArray[1] = (value 0x02) 1; SensorArray[0] = (value 0x01) 0;","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/trace/#2-uiflow","text":"To get complete code, please click here \u3002","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/trace/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/trace/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND TRACE Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/docs/en/unit/trace/#related-video","text":"TRACE Case","title":"Related Video"},{"location":"tutorials/M5Stack/docs/en/unit/weight/","text":"Unit WEIGHT {docsify-ignore-all} :memo: Description :octocat: Example :electric_plug: \u539f\u7406\u56fe \ud83d\uded2 \u8d2d\u4e70\u94fe\u63a5 Description WEIGHT intergrates an 24 bits A/D chip HX711 that is specifically designed for electronic weighing device. The input multiplexer selects either Channel A or B differential input to the low-noise programmable gain amplifier (PGA). Channel A can be programmed with a gain of 128 or 64, corresponding to a full-scale differential input voltage of \u00b120mV or \u00b140mV respectively, when a 5V supply is connected to AVDD analog power supply pin. Channel B has a fixed gain of 32. There is no programming needed for the internal registers. All controls to the HX711 are through the pins. In the test, we have this Unit channel A to connect a pressure sensor. Then use M5Core screen to display the weight data. Product Features Two selectable differential input channels On-chip active low noise PGA with selectable gain of 32, 64 and 128 On-chip power supply regulator for load-cell and ADC analog power supply On-chip oscillator requiring no external component with optional external crystal On-chip power-on-reset Simple digital control and serial interface: pin-driven controls, no programming needed Selectable 10SPS or 80SPS output data rate Simultaneous 50 and 60Hz supply rejection Current consumption including on-chip analog power supply regulator: normal operation 1.5mA, power down 1uA Operation supply voltage range: 2.6 ~ 5.5V Operation temperature range: -40 ~ +85\u2103 16 pin SOP-16 package Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes Include 1x WEIGHT Unit 1x Grove Cable Application Micro weight meter Kitchen Scale Related Link Offical Video Forum Datasheet - HX711 Example 1. Arduino IDE We used a pressure sensor(10kg) in this experiment. (Unit: gram) To get complete code, please click here \u3002 /* This Unit connects to GRVOE B on M5Core. */ #include M5Stack.h #include hx711.h HX711 scale(36, 26);// GROVE B void setup() { M5.begin(); M5.Lcd.clear(BLACK); M5.Lcd.setTextSize(2); M5.Lcd.setTextColor(YELLOW); M5.Lcd.setCursor(50, 10); M5.Lcd.print( UNIT_WEIGHT EXAMPLE\\n ); M5.Lcd.setCursor(15, 50); M5.Lcd.print( Connect Unit to GROVE B ); Serial.begin(115200); scale.setOffset(125184); scale.setScale(67.4); M5.Lcd.setCursor(0, 90); M5.Lcd.print( The weight: ); } void loop(){ // Serial.println(scale.averageValue()); float weight; weight = ((float)((int)((scale.getGram()+0.005)*100)))/100; // sprintf( weight, %0.2f , scale.getGram()); Serial.print( The weight: ); Serial.print(weight); M5.Lcd.fillRect(150, 90, 100, 20, BLACK); M5.Lcd.setCursor(150, 90); M5.Lcd.print(weight); Serial.println( g ); delay(100); } 2. UIFlow To get complete code, please click here \u3002 Schematic Pinmap If WEIGHT was connected to GROVE A M5Core(GROVE A) GPIO22 GPIO21 5V GND WEIGHT Unit DATA Pin (DAT) CLOCK Pin (CLK) 5V GND If WEIGHT was connected to GROVE B M5Core(GROVE B) GPIO36 GPIO26 5V GND WEIGHT Unit DATA Pin (DAT) CLOCK Pin (CLK) 5V GND If WEIGHT was connected to GROVE C M5Core(GROVE C) GPIO16 GPIO17 5V GND WEIGHT Unit DATA Pin (DAT) CLOCK Pin (CLK) 5V GND","title":"Unit WEIGHT {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/weight/#unit-weight-docsify-ignore-all","text":":memo: Description :octocat: Example :electric_plug: \u539f\u7406\u56fe \ud83d\uded2 \u8d2d\u4e70\u94fe\u63a5","title":"Unit WEIGHT {docsify-ignore-all}"},{"location":"tutorials/M5Stack/docs/en/unit/weight/#description","text":"WEIGHT intergrates an 24 bits A/D chip HX711 that is specifically designed for electronic weighing device. The input multiplexer selects either Channel A or B differential input to the low-noise programmable gain amplifier (PGA). Channel A can be programmed with a gain of 128 or 64, corresponding to a full-scale differential input voltage of \u00b120mV or \u00b140mV respectively, when a 5V supply is connected to AVDD analog power supply pin. Channel B has a fixed gain of 32. There is no programming needed for the internal registers. All controls to the HX711 are through the pins. In the test, we have this Unit channel A to connect a pressure sensor. Then use M5Core screen to display the weight data.","title":"Description"},{"location":"tutorials/M5Stack/docs/en/unit/weight/#product-features","text":"Two selectable differential input channels On-chip active low noise PGA with selectable gain of 32, 64 and 128 On-chip power supply regulator for load-cell and ADC analog power supply On-chip oscillator requiring no external component with optional external crystal On-chip power-on-reset Simple digital control and serial interface: pin-driven controls, no programming needed Selectable 10SPS or 80SPS output data rate Simultaneous 50 and 60Hz supply rejection Current consumption including on-chip analog power supply regulator: normal operation 1.5mA, power down 1uA Operation supply voltage range: 2.6 ~ 5.5V Operation temperature range: -40 ~ +85\u2103 16 pin SOP-16 package Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/docs/en/unit/weight/#include","text":"1x WEIGHT Unit 1x Grove Cable","title":"Include"},{"location":"tutorials/M5Stack/docs/en/unit/weight/#application","text":"Micro weight meter Kitchen Scale","title":"Application"},{"location":"tutorials/M5Stack/docs/en/unit/weight/#related-link","text":"Offical Video Forum Datasheet - HX711","title":"Related Link"},{"location":"tutorials/M5Stack/docs/en/unit/weight/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/docs/en/unit/weight/#1-arduino-ide","text":"We used a pressure sensor(10kg) in this experiment. (Unit: gram) To get complete code, please click here \u3002 /* This Unit connects to GRVOE B on M5Core. */ #include M5Stack.h #include hx711.h HX711 scale(36, 26);// GROVE B void setup() { M5.begin(); M5.Lcd.clear(BLACK); M5.Lcd.setTextSize(2); M5.Lcd.setTextColor(YELLOW); M5.Lcd.setCursor(50, 10); M5.Lcd.print( UNIT_WEIGHT EXAMPLE\\n ); M5.Lcd.setCursor(15, 50); M5.Lcd.print( Connect Unit to GROVE B ); Serial.begin(115200); scale.setOffset(125184); scale.setScale(67.4); M5.Lcd.setCursor(0, 90); M5.Lcd.print( The weight: ); } void loop(){ // Serial.println(scale.averageValue()); float weight; weight = ((float)((int)((scale.getGram()+0.005)*100)))/100; // sprintf( weight, %0.2f , scale.getGram()); Serial.print( The weight: ); Serial.print(weight); M5.Lcd.fillRect(150, 90, 100, 20, BLACK); M5.Lcd.setCursor(150, 90); M5.Lcd.print(weight); Serial.println( g ); delay(100); }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/docs/en/unit/weight/#2-uiflow","text":"To get complete code, please click here \u3002","title":"2. UIFlow"},{"location":"tutorials/M5Stack/docs/en/unit/weight/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/docs/en/unit/weight/#pinmap","text":"If WEIGHT was connected to GROVE A M5Core(GROVE A) GPIO22 GPIO21 5V GND WEIGHT Unit DATA Pin (DAT) CLOCK Pin (CLK) 5V GND If WEIGHT was connected to GROVE B M5Core(GROVE B) GPIO36 GPIO26 5V GND WEIGHT Unit DATA Pin (DAT) CLOCK Pin (CLK) 5V GND If WEIGHT was connected to GROVE C M5Core(GROVE C) GPIO16 GPIO17 5V GND WEIGHT Unit DATA Pin (DAT) CLOCK Pin (CLK) 5V GND","title":"Pinmap"},{"location":"tutorials/M5Stack/modules/battery/description/","text":"DESCRIPTION BATTERY : The Lipo Battery extension module, 700 mAh ADD-ON. You want to make a demo or prototype product that needs more battery life, then you realize the battery in M5GO base and Basic base is not enough. Here comes BATTERY which is a handy M5modules to upgrade your Lipo battery life. Since the Lipo batteries is parallelable, you can stack mutilple of them to maximum your power endurance. * CAUTION: The safety of Lipo battery is affected by many conditions. Overcharge, over-discharge, over-temperature, short circuit, crush and nail penetration may all result in a catastrophic failure, including the pouch rupturing, the electrolyte leaking, and fire. Although every battery we offer have accompany by a protect circult board, using Lipo battery in you product still needs to be treated with caution Hardware connection Once the BATTERY is stacked underneath the M5 controller, the battery positive pole is connected to VBAT pin at IP5306 Product Features 700mAh High-Capacity Battery Kit includes 1x M5Stack BATTERY Module","title":"Description"},{"location":"tutorials/M5Stack/modules/battery/description/#description","text":"BATTERY : The Lipo Battery extension module, 700 mAh ADD-ON. You want to make a demo or prototype product that needs more battery life, then you realize the battery in M5GO base and Basic base is not enough. Here comes BATTERY which is a handy M5modules to upgrade your Lipo battery life. Since the Lipo batteries is parallelable, you can stack mutilple of them to maximum your power endurance. * CAUTION: The safety of Lipo battery is affected by many conditions. Overcharge, over-discharge, over-temperature, short circuit, crush and nail penetration may all result in a catastrophic failure, including the pouch rupturing, the electrolyte leaking, and fire. Although every battery we offer have accompany by a protect circult board, using Lipo battery in you product still needs to be treated with caution","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/modules/battery/description/#hardware-connection","text":"Once the BATTERY is stacked underneath the M5 controller, the battery positive pole is connected to VBAT pin at IP5306","title":"Hardware connection"},{"location":"tutorials/M5Stack/modules/battery/description/#product-features","text":"700mAh High-Capacity Battery","title":"Product Features"},{"location":"tutorials/M5Stack/modules/battery/description/#kit-includes","text":"1x M5Stack BATTERY Module","title":"Kit includes"},{"location":"tutorials/M5Stack/modules/battery/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/modules/battery/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/modules/battery/learn/","text":"LEARN","title":"Learn"},{"location":"tutorials/M5Stack/modules/battery/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/modules/battery/more-information/","text":"MORE INFORMATION","title":"More information"},{"location":"tutorials/M5Stack/modules/battery/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/modules/bus/description/","text":"DESCRIPTION BUS allows you add your own circult design on the Universal prototype perboard and interact with the M5 core via M-BUS. Just like other M5modules, BUS is able to connected with other layer through M-BUS, while in this module, we've extended the M_BUS pin to pin to the other side of the board. You might need to cut off the fence on the side to be able to dupont out the pins. we've include a 2*15 90 degree pin set in the package. Product Features Hole Size: 0.039\" 1mm (CNC Drilled) Hole Pitch: 0.1 in - (2.54 mm) Entire Hole Quantity: 200 Holes Kit includes 1x M5Stack BUS Module","title":"Description"},{"location":"tutorials/M5Stack/modules/bus/description/#description","text":"BUS allows you add your own circult design on the Universal prototype perboard and interact with the M5 core via M-BUS. Just like other M5modules, BUS is able to connected with other layer through M-BUS, while in this module, we've extended the M_BUS pin to pin to the other side of the board. You might need to cut off the fence on the side to be able to dupont out the pins. we've include a 2*15 90 degree pin set in the package.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/modules/bus/description/#product-features","text":"Hole Size: 0.039\" 1mm (CNC Drilled) Hole Pitch: 0.1 in - (2.54 mm) Entire Hole Quantity: 200 Holes","title":"Product Features"},{"location":"tutorials/M5Stack/modules/bus/description/#kit-includes","text":"1x M5Stack BUS Module","title":"Kit includes"},{"location":"tutorials/M5Stack/modules/bus/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/modules/bus/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/modules/bus/learn/","text":"LEARN","title":"Learn"},{"location":"tutorials/M5Stack/modules/bus/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/modules/bus/more-information/","text":"MORE INFORMATION","title":"More information"},{"location":"tutorials/M5Stack/modules/bus/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/modules/commu/description/","text":"DESCRIPTION COMMU is a Muti-Communication-Interface-Converter. Integrated with 2 IIC, 1 TTL, 1 CAN, 1 RS485. Apparently COMMU has packed with most of series communications. Default connection: TTL - UART0, RS485 - UART2. Since ESP32 pin map is allowed for re-assign, you can re-assign or re-mapping the TTL or RS485 interface to other pins. Product Features 2x I2C Interface 1x CAN Interface 1x RS485 Interface 1x TTL Interface CAN controller: MCP2515-1/SO RS485 Transceiver: SP3485EN-L/TR Kit includes 1x M5Stack COMMU Module","title":"Description"},{"location":"tutorials/M5Stack/modules/commu/description/#description","text":"COMMU is a Muti-Communication-Interface-Converter. Integrated with 2 IIC, 1 TTL, 1 CAN, 1 RS485. Apparently COMMU has packed with most of series communications. Default connection: TTL - UART0, RS485 - UART2. Since ESP32 pin map is allowed for re-assign, you can re-assign or re-mapping the TTL or RS485 interface to other pins.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/modules/commu/description/#product-features","text":"2x I2C Interface 1x CAN Interface 1x RS485 Interface 1x TTL Interface CAN controller: MCP2515-1/SO RS485 Transceiver: SP3485EN-L/TR","title":"Product Features"},{"location":"tutorials/M5Stack/modules/commu/description/#kit-includes","text":"1x M5Stack COMMU Module","title":"Kit includes"},{"location":"tutorials/M5Stack/modules/commu/documents/","text":"DOCUMENTS Datasheet SP3485 MCP2515","title":"Documents"},{"location":"tutorials/M5Stack/modules/commu/documents/#documents","text":"Datasheet SP3485 MCP2515","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/modules/commu/learn/","text":"LEARN Example Arduino IDE CAN communication These are two COMMU examples for CAN communication, tansmitter and receiver. Press Button A to sent the message, and display the received message on the screen. Step 1 : Copy MCP_CAN_lib file to C:\\Users\\ user_name \\Documents\\Arduino\\libraries , Step 2 : Open project file commu_can_transmitter.ino , and commu_can_receiver.ino Step 3 : Compile and upload the two project to two M5Cores separatly. Below code is incomplete. If you want the complete code, please click here . /* commu_can_transmitter.ino */ #include M5Stack.h #include mcp_can.h #include m5_logo.h #define CAN0_INT 15 // Set INT to pin 2 MCP_CAN CAN0(12); // Set CS to pin 10 // declaration byte data[8] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}; // initialization M5.begin(); CAN0.begin(MCP_ANY, CAN_1000KBPS, MCP_8MHZ); /* Change to normal mode to allow messages tobe transmitted */ CAN0.setMode(MCP_NORMAL); // send data CAN0.sendMsgBuf(0x100, 0, 8, data); /* commu_can_receiver.ino */ #include M5Stack.h #include mcp_can.h #include m5_logo.h #define CAN0_INT 15 // Set INT to pin 2 MCP_CAN CAN0(12); // Set CS to pin 10 // declaration byte data[8] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}; // initialization M5.begin(); /* Initialize MCP2515 running at 16MHz with a baudrate of 500kb/s */ /* and the masks and filters disabled. */ CAN0.begin(MCP_ANY, CAN_1000KBPS, MCP_8MHZ); /* Set operation mode to normal so theMCP2515 sends acks to received data. */ CAN0.setMode(MCP_NORMAL); pinMode(CAN0_INT, INPUT);// Configuring pin for /INT input // read data CAN0.readMsgBuf( rxId, len, rxBuf);","title":"Learn"},{"location":"tutorials/M5Stack/modules/commu/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/modules/commu/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/modules/commu/learn/#arduino-ide","text":"","title":"Arduino IDE"},{"location":"tutorials/M5Stack/modules/commu/learn/#can-communication","text":"These are two COMMU examples for CAN communication, tansmitter and receiver. Press Button A to sent the message, and display the received message on the screen. Step 1 : Copy MCP_CAN_lib file to C:\\Users\\ user_name \\Documents\\Arduino\\libraries , Step 2 : Open project file commu_can_transmitter.ino , and commu_can_receiver.ino Step 3 : Compile and upload the two project to two M5Cores separatly. Below code is incomplete. If you want the complete code, please click here . /* commu_can_transmitter.ino */ #include M5Stack.h #include mcp_can.h #include m5_logo.h #define CAN0_INT 15 // Set INT to pin 2 MCP_CAN CAN0(12); // Set CS to pin 10 // declaration byte data[8] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}; // initialization M5.begin(); CAN0.begin(MCP_ANY, CAN_1000KBPS, MCP_8MHZ); /* Change to normal mode to allow messages tobe transmitted */ CAN0.setMode(MCP_NORMAL); // send data CAN0.sendMsgBuf(0x100, 0, 8, data); /* commu_can_receiver.ino */ #include M5Stack.h #include mcp_can.h #include m5_logo.h #define CAN0_INT 15 // Set INT to pin 2 MCP_CAN CAN0(12); // Set CS to pin 10 // declaration byte data[8] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}; // initialization M5.begin(); /* Initialize MCP2515 running at 16MHz with a baudrate of 500kb/s */ /* and the masks and filters disabled. */ CAN0.begin(MCP_ANY, CAN_1000KBPS, MCP_8MHZ); /* Set operation mode to normal so theMCP2515 sends acks to received data. */ CAN0.setMode(MCP_NORMAL); pinMode(CAN0_INT, INPUT);// Configuring pin for /INT input // read data CAN0.readMsgBuf( rxId, len, rxBuf);","title":"CAN communication"},{"location":"tutorials/M5Stack/modules/commu/more-information/","text":"MORE INFORMATION PinMap CAN ESP32 Chip CAN_CS GPIO12 CAN_INT GPIO15 CAN_SCK GPIO18 CAN_MISO GPIO19 CAN_MOSI GPIO23 I2C Interface ESP32 Chip IIC_SDA GPIO21 IIC_SCL GPIO22 Schematic","title":"More information"},{"location":"tutorials/M5Stack/modules/commu/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/modules/commu/more-information/#pinmap","text":"CAN ESP32 Chip CAN_CS GPIO12 CAN_INT GPIO15 CAN_SCK GPIO18 CAN_MISO GPIO19 CAN_MOSI GPIO23 I2C Interface ESP32 Chip IIC_SDA GPIO21 IIC_SCL GPIO22","title":"PinMap"},{"location":"tutorials/M5Stack/modules/commu/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/modules/encoder/description/","text":"DESCRIPTION ENCODER is compatible with FACE Kit. You can have it replace the keycoard panel inside the FACE kit. It is designed for rotary encoder control, integrated Mega328 microprocessor inside and LEDs around the encoder. The series communication protocol between M5 core and ENCODER is IIC (adress: 0x5E) Product Features 12 RGB Led IIC communication Simple API for programming Mega328 inside Encoder detection Kit includes 1x M5Stack ENCODER Module Encoder turnpanel","title":"Description"},{"location":"tutorials/M5Stack/modules/encoder/description/#description","text":"ENCODER is compatible with FACE Kit. You can have it replace the keycoard panel inside the FACE kit. It is designed for rotary encoder control, integrated Mega328 microprocessor inside and LEDs around the encoder. The series communication protocol between M5 core and ENCODER is IIC (adress: 0x5E)","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/modules/encoder/description/#product-features","text":"12 RGB Led IIC communication Simple API for programming Mega328 inside Encoder detection","title":"Product Features"},{"location":"tutorials/M5Stack/modules/encoder/description/#kit-includes","text":"1x M5Stack ENCODER Module Encoder turnpanel","title":"Kit includes"},{"location":"tutorials/M5Stack/modules/encoder/documents/","text":"DOCUMENTS ENCODER Firmware","title":"Documents"},{"location":"tutorials/M5Stack/modules/encoder/documents/#documents","text":"ENCODER Firmware","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/modules/encoder/learn/","text":"LEARN Function Control single LED /* Parameter: led_index: 0 ~ 11 r, g, b: 0 ~ 254 */ void Led(int led_index, int r, int g, int b){ // IIC send data Wire.beginTransmission(Faces_Encoder_I2C_ADDR); Wire.write(led_index); Wire.write(r); Wire.write(g); Wire.write(b); Wire.endTransmission(); } Read encoder increment void get_encoder_increment(void){ int temp_encoder_increment; // IIC read data Wire.requestFrom(Faces_Encoder_I2C_ADDR, 3); if(Wire.available()){ temp_encoder_increment = Wire.read();// get increment button_state = Wire.read();// get button value } if(temp_encoder_increment 127){//anti-clockwise direction = 1;// flag for encoder direction encoder_increment = 256 - temp_encoder_increment; } else{// clockwise direction = 0; encoder_increment = temp_encoder_increment; } } Example Arduino IDE If you want the complete code faces_encoder.ino , please click here . /* * faces_encoder.ino */ #include M5Stack.h #define Faces_Encoder_I2C_ADDR 0X5E // declaration int encoder_increment;//positive: clockwise nagtive: anti-clockwise uint16_t encoder_value=0; int button_state; uint8_t direction;//0: clockwise 1: anti-clockwise int temp_encoder_increment; // initialization M5.begin(); Wire.begin(); // get data from ENCONDER Wire.requestFrom(Faces_Encoder_I2C_ADDR, 3); if(Wire.available()){ temp_encoder_increment = Wire.read();// the first byte: increment button_state = Wire.read();// the second byte: button value } // IIC send data, 4bytes Wire.beginTransmission(Faces_Encoder_I2C_ADDR); Wire.write(led_index); Wire.write(r); Wire.write(g); Wire.write(b); Wire.endTransmission();","title":"Learn"},{"location":"tutorials/M5Stack/modules/encoder/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/modules/encoder/learn/#function","text":"Control single LED /* Parameter: led_index: 0 ~ 11 r, g, b: 0 ~ 254 */ void Led(int led_index, int r, int g, int b){ // IIC send data Wire.beginTransmission(Faces_Encoder_I2C_ADDR); Wire.write(led_index); Wire.write(r); Wire.write(g); Wire.write(b); Wire.endTransmission(); } Read encoder increment void get_encoder_increment(void){ int temp_encoder_increment; // IIC read data Wire.requestFrom(Faces_Encoder_I2C_ADDR, 3); if(Wire.available()){ temp_encoder_increment = Wire.read();// get increment button_state = Wire.read();// get button value } if(temp_encoder_increment 127){//anti-clockwise direction = 1;// flag for encoder direction encoder_increment = 256 - temp_encoder_increment; } else{// clockwise direction = 0; encoder_increment = temp_encoder_increment; } }","title":"Function"},{"location":"tutorials/M5Stack/modules/encoder/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/modules/encoder/learn/#arduino-ide","text":"If you want the complete code faces_encoder.ino , please click here . /* * faces_encoder.ino */ #include M5Stack.h #define Faces_Encoder_I2C_ADDR 0X5E // declaration int encoder_increment;//positive: clockwise nagtive: anti-clockwise uint16_t encoder_value=0; int button_state; uint8_t direction;//0: clockwise 1: anti-clockwise int temp_encoder_increment; // initialization M5.begin(); Wire.begin(); // get data from ENCONDER Wire.requestFrom(Faces_Encoder_I2C_ADDR, 3); if(Wire.available()){ temp_encoder_increment = Wire.read();// the first byte: increment button_state = Wire.read();// the second byte: button value } // IIC send data, 4bytes Wire.beginTransmission(Faces_Encoder_I2C_ADDR); Wire.write(led_index); Wire.write(r); Wire.write(g); Wire.write(b); Wire.endTransmission();","title":"Arduino IDE"},{"location":"tutorials/M5Stack/modules/encoder/more-information/","text":"MORE INFORMATION","title":"More information"},{"location":"tutorials/M5Stack/modules/encoder/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/modules/gps/description/","text":"DESCRIPTION GPS is build with NEO-M8N, u-blox M8 concurrent GNSS modules and come with an active Antenna. The NEO-M8 series provides high sensitivity and minimal acquisition times while maintaining low system power. The NEO-M8N integrates a 72-channel u-blox M8 GNSS engine that supports multiple GNSS systems ( Beidou, Galileo, GLONASS, GPS / QZSS ) and able to receive 3 GNSS systems simultaneously. The series communicate protocol between M5Core and GPS is UART, physically connected via UART2 (GPIO16, GPIO17) If you want to Change the uart baudrate,please check here ( u-center-just-for-Windows ) * Notice: GPS signal can only be found outdoors Product Features Operating voltage: 2.7 ~ 3.6 Operating temperature: -40 ~ 80 \u00b0C Antenna type: built-in ceramic antenna and external antenna external Antenna port: SMA Can receive data from 3 GNSS systems concurrently Horizontal position accuracy: minimum 2.5m GPS module (NEO-M8N) Built-in Flash, so that you can upgrade firmware via u-center-just-for-Windows Supported protocols: NMEA, UBX, RTCM Industry leading -167dBm sensitivity Backward compatibility with NEO\u20107 and NEO\u20106 series Kit includes 1x GPS Module 1x external Antenna(cable length : 1 meter) Application GPS-based logistics tracking management Driverless car positioning","title":"Description"},{"location":"tutorials/M5Stack/modules/gps/description/#description","text":"GPS is build with NEO-M8N, u-blox M8 concurrent GNSS modules and come with an active Antenna. The NEO-M8 series provides high sensitivity and minimal acquisition times while maintaining low system power. The NEO-M8N integrates a 72-channel u-blox M8 GNSS engine that supports multiple GNSS systems ( Beidou, Galileo, GLONASS, GPS / QZSS ) and able to receive 3 GNSS systems simultaneously. The series communicate protocol between M5Core and GPS is UART, physically connected via UART2 (GPIO16, GPIO17) If you want to Change the uart baudrate,please check here ( u-center-just-for-Windows ) * Notice: GPS signal can only be found outdoors","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/modules/gps/description/#product-features","text":"Operating voltage: 2.7 ~ 3.6 Operating temperature: -40 ~ 80 \u00b0C Antenna type: built-in ceramic antenna and external antenna external Antenna port: SMA Can receive data from 3 GNSS systems concurrently Horizontal position accuracy: minimum 2.5m GPS module (NEO-M8N) Built-in Flash, so that you can upgrade firmware via u-center-just-for-Windows Supported protocols: NMEA, UBX, RTCM Industry leading -167dBm sensitivity Backward compatibility with NEO\u20107 and NEO\u20106 series","title":"Product Features"},{"location":"tutorials/M5Stack/modules/gps/description/#kit-includes","text":"1x GPS Module 1x external Antenna(cable length : 1 meter)","title":"Kit includes"},{"location":"tutorials/M5Stack/modules/gps/description/#application","text":"GPS-based logistics tracking management Driverless car positioning","title":"Application"},{"location":"tutorials/M5Stack/modules/gps/documents/","text":"DOCUMENTS GPS Info (GPS) TinyGPS++ library Data Sheet - NEO-M8N u-blox Protocol Manual","title":"Documents"},{"location":"tutorials/M5Stack/modules/gps/documents/#documents","text":"GPS Info (GPS) TinyGPS++ library Data Sheet - NEO-M8N u-blox Protocol Manual","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/modules/gps/learn/","text":"LEARN Example Arduino IDE To the complete code GPSRaw.ino , please click here . Note: The GPS module needs placed outdoors to be able to receive GPS signal #include M5Stack.h /* By default, GPS is connected with M5Core through UART2 */ HardwareSerial GPSRaw(2); void setup() { M5.begin(); GPSRaw.begin(9600);// GPS init Serial.println( hello ); termInit(); } void loop() { // put your main code here, to run repeatedly: if(Serial.available()) { int ch = Serial.read(); GPSRaw.write(ch); } if(GPSRaw.available()) { int ch = GPSRaw.read();// read GPS information Serial.write(ch); termPutchar(ch); } } After burnt the example code GPSRaw.ino , m5core and PC serial terminal will display following information Protocol Specification: Please refer to the u-blox 8 / u-blox M8 Receiver Description - Manual , The following table is a instruction of xxRMC message in NMEA protocol.","title":"Learn"},{"location":"tutorials/M5Stack/modules/gps/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/modules/gps/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/modules/gps/learn/#arduino-ide","text":"To the complete code GPSRaw.ino , please click here . Note: The GPS module needs placed outdoors to be able to receive GPS signal #include M5Stack.h /* By default, GPS is connected with M5Core through UART2 */ HardwareSerial GPSRaw(2); void setup() { M5.begin(); GPSRaw.begin(9600);// GPS init Serial.println( hello ); termInit(); } void loop() { // put your main code here, to run repeatedly: if(Serial.available()) { int ch = Serial.read(); GPSRaw.write(ch); } if(GPSRaw.available()) { int ch = GPSRaw.read();// read GPS information Serial.write(ch); termPutchar(ch); } } After burnt the example code GPSRaw.ino , m5core and PC serial terminal will display following information Protocol Specification: Please refer to the u-blox 8 / u-blox M8 Receiver Description - Manual , The following table is a instruction of xxRMC message in NMEA protocol.","title":"Arduino IDE"},{"location":"tutorials/M5Stack/modules/gps/more-information/","text":"MORE INFORMATION UART protocol: baud rate (default is 9600bps), data bit (8 bits), start bit (1 bit), stop bit (1 bit), Parity (none) M5Stack Fire has occupied GPIO16 / 17 to connect with the PSRAM by default, it's conflict with TXD / RXD (GPIO16, GPIO17) of GPS module. Therefore, when using the GPS module with the M5Stack Fire, you might have to cut the TXD and RXD from GPS module and wire fly to another set of UART pin, if you gonna use the PSRAM. Schematic","title":"More information"},{"location":"tutorials/M5Stack/modules/gps/more-information/#more-information","text":"UART protocol: baud rate (default is 9600bps), data bit (8 bits), start bit (1 bit), stop bit (1 bit), Parity (none) M5Stack Fire has occupied GPIO16 / 17 to connect with the PSRAM by default, it's conflict with TXD / RXD (GPIO16, GPIO17) of GPS module. Therefore, when using the GPS module with the M5Stack Fire, you might have to cut the TXD and RXD from GPS module and wire fly to another set of UART pin, if you gonna use the PSRAM.","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/modules/gps/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/modules/joystick/description/","text":"DESCRIPTION JOYSTICK is a control column module. A joystick is an input device consisting of a stick that pivots on a base and reports its angle or direction to the device it is controlling. Same as ENCODER, it is compatible with FACE Kit. You can have it replace the keycoard panel inside the FACE kit. Through IIC you can get the offset data form (X, Y) axis, also the button status. You can customized the LED behavior as you like. JOYSTICK IIC address is 0x5E). Product Features 12 RGB Led IIC communication Simple API for programming Kit includes 1x M5Stack JOYSTICK Module board 1x Joystick Bar","title":"Description"},{"location":"tutorials/M5Stack/modules/joystick/description/#description","text":"JOYSTICK is a control column module. A joystick is an input device consisting of a stick that pivots on a base and reports its angle or direction to the device it is controlling. Same as ENCODER, it is compatible with FACE Kit. You can have it replace the keycoard panel inside the FACE kit. Through IIC you can get the offset data form (X, Y) axis, also the button status. You can customized the LED behavior as you like. JOYSTICK IIC address is 0x5E).","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/modules/joystick/description/#product-features","text":"12 RGB Led IIC communication Simple API for programming","title":"Product Features"},{"location":"tutorials/M5Stack/modules/joystick/description/#kit-includes","text":"1x M5Stack JOYSTICK Module board 1x Joystick Bar","title":"Kit includes"},{"location":"tutorials/M5Stack/modules/joystick/documents/","text":"DOCUMENTS JOYSTICK Firmware","title":"Documents"},{"location":"tutorials/M5Stack/modules/joystick/documents/#documents","text":"JOYSTICK Firmware","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/modules/joystick/learn/","text":"LEARN Function Control single LED /* Parameter: indexOfLED: 0 ~ 11 r, g, b: 0 ~ 254 */ void Led(int indexOfLED, int r, int g, int b){ Wire.beginTransmission(FACE_JOY_ADDR); Wire.write(indexOfLED); Wire.write(r); Wire.write(g); Wire.write(b); Wire.endTransmission(); } Read the offset of each direction void get_joystick_offset(void){ Wire.requestFrom(FACE_JOY_ADDR, 5); if (Wire.available()) { y_data_L = Wire.read(); y_data_H = Wire.read(); x_data_L = Wire.read(); x_data_H = Wire.read(); button_data = Wire.read();// Z(0: released 1: pressed) } Example Arduino IDE To the complete code faces_joystick.ino , click here \u3002 /* * faces_joystick.ino */ #include M5Stack.h #define FACE_JOY_ADDR 0X5E // declaration uint8_t x_data_L; uint8_t x_data_H; uint8_t y_data_L; uint8_t y_data_H; uint8_t button_data; uint16_t x_data; uint16_t y_data; // initialization M5.begin(); Wire.begin(); // get data from ENCONDER Wire.requestFrom(FACE_JOY_ADDR, 5); if (Wire.available()) { y_data_L = Wire.read(); y_data_H = Wire.read(); x_data_L = Wire.read(); x_data_H = Wire.read(); button_data = Wire.read();// Z(0: released 1: pressed) x_data = x_data_H 8 |x_data_L; y_data = y_data_H 8 |y_data_L; } // IIC send data, 4bytes Wire.beginTransmission(FACE_JOY_ADDR); Wire.write(indexOfLED); Wire.write(r); Wire.write(g); Wire.write(b); Wire.endTransmission();","title":"Learn"},{"location":"tutorials/M5Stack/modules/joystick/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/modules/joystick/learn/#function","text":"Control single LED /* Parameter: indexOfLED: 0 ~ 11 r, g, b: 0 ~ 254 */ void Led(int indexOfLED, int r, int g, int b){ Wire.beginTransmission(FACE_JOY_ADDR); Wire.write(indexOfLED); Wire.write(r); Wire.write(g); Wire.write(b); Wire.endTransmission(); } Read the offset of each direction void get_joystick_offset(void){ Wire.requestFrom(FACE_JOY_ADDR, 5); if (Wire.available()) { y_data_L = Wire.read(); y_data_H = Wire.read(); x_data_L = Wire.read(); x_data_H = Wire.read(); button_data = Wire.read();// Z(0: released 1: pressed) }","title":"Function"},{"location":"tutorials/M5Stack/modules/joystick/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/modules/joystick/learn/#arduino-ide","text":"To the complete code faces_joystick.ino , click here \u3002 /* * faces_joystick.ino */ #include M5Stack.h #define FACE_JOY_ADDR 0X5E // declaration uint8_t x_data_L; uint8_t x_data_H; uint8_t y_data_L; uint8_t y_data_H; uint8_t button_data; uint16_t x_data; uint16_t y_data; // initialization M5.begin(); Wire.begin(); // get data from ENCONDER Wire.requestFrom(FACE_JOY_ADDR, 5); if (Wire.available()) { y_data_L = Wire.read(); y_data_H = Wire.read(); x_data_L = Wire.read(); x_data_H = Wire.read(); button_data = Wire.read();// Z(0: released 1: pressed) x_data = x_data_H 8 |x_data_L; y_data = y_data_H 8 |y_data_L; } // IIC send data, 4bytes Wire.beginTransmission(FACE_JOY_ADDR); Wire.write(indexOfLED); Wire.write(r); Wire.write(g); Wire.write(b); Wire.endTransmission();","title":"Arduino IDE"},{"location":"tutorials/M5Stack/modules/joystick/more-information/","text":"MORE INFORMATION","title":"More information"},{"location":"tutorials/M5Stack/modules/joystick/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/modules/lego_plus/description/","text":"DESCRIPTION LEGO+ is a LEGO DC Motor Driver module. It's build with MEGA328 and L293DD, implemented 4 driver channels. A DC power input is designed for power supplement. Through M-BUS the DC in can automaticlly power the M5 core at top. Series Communication: IIC (0x56). LEGO motor is one of the Technic pieces form LEGO. The purpose of LEGO Technic is to create more advanced models with more complex technical functions, compared to the simpler brick-building properties of normal Lego. Product Features DC Power input: 6-12V DC Connector Type: XT60 (female) 4x LEGO motor port 2x IIC GROVE port (extend PORTA from M5 Core) L293DD: PUSH-PULL Driver Chip Kit includes 1x LEGO+ module 1x 10cm LEGO cable 1x DC connector","title":"Description"},{"location":"tutorials/M5Stack/modules/lego_plus/description/#description","text":"LEGO+ is a LEGO DC Motor Driver module. It's build with MEGA328 and L293DD, implemented 4 driver channels. A DC power input is designed for power supplement. Through M-BUS the DC in can automaticlly power the M5 core at top. Series Communication: IIC (0x56). LEGO motor is one of the Technic pieces form LEGO. The purpose of LEGO Technic is to create more advanced models with more complex technical functions, compared to the simpler brick-building properties of normal Lego.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/modules/lego_plus/description/#product-features","text":"DC Power input: 6-12V DC Connector Type: XT60 (female) 4x LEGO motor port 2x IIC GROVE port (extend PORTA from M5 Core) L293DD: PUSH-PULL Driver Chip","title":"Product Features"},{"location":"tutorials/M5Stack/modules/lego_plus/description/#kit-includes","text":"1x LEGO+ module 1x 10cm LEGO cable 1x DC connector","title":"Kit includes"},{"location":"tutorials/M5Stack/modules/lego_plus/documents/","text":"DOCUMENTS LEGO+ Firmware","title":"Documents"},{"location":"tutorials/M5Stack/modules/lego_plus/documents/#documents","text":"LEGO+ Firmware","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/modules/lego_plus/learn/","text":"LEARN Example UIFlow To get the complete code, please click here \u3002","title":"Learn"},{"location":"tutorials/M5Stack/modules/lego_plus/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/modules/lego_plus/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/modules/lego_plus/learn/#uiflow","text":"To get the complete code, please click here \u3002","title":"UIFlow"},{"location":"tutorials/M5Stack/modules/lego_plus/more-information/","text":"MORE INFORMATION Schematic NOTE If you want to change the firmware inside MEGA328 chip which has implemented the motor driver code by default, you can overwrite through ISP port. Below shows the location of ISP port.","title":"More information"},{"location":"tutorials/M5Stack/modules/lego_plus/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/modules/lego_plus/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/modules/lego_plus/more-information/#note","text":"If you want to change the firmware inside MEGA328 chip which has implemented the motor driver code by default, you can overwrite through ISP port. Below shows the location of ISP port.","title":"NOTE"},{"location":"tutorials/M5Stack/modules/lora/description/","text":"DESCRIPTION LoRa integrated LoRa Module Ra-02, designed and produced by Ai-Thinker. On the board has some extra space left over, so we give you a prototyping area, it's great for adding on your customized circult working with the LoRa Module. LoRa enables long-range transmissions (more than 10 km in rural areas) with low power consumption\uff0cThe technology is presented in two parts: LoRa, the physical layer and LoRaWAN (Long Range Wide Area Network), the upper layers. LoRa and LoRaWAN permit long-range connectivity for Internet of Things (IoT) devices in different types of industries. Product Features Lora Module: Ra-02 (by Ai-Thinker) Series Communication Protocol: SPI Universal Perboard Working Frequency: 433 MHz Supports FSK, GFSK, MSK, GMSK, LoRa \u2122 and OOK modulation modes Receive sensitivity: lowest to -141 dBm Programmable bit rate up to 300Kbps Build-in PCB Antenna External Antenna port Program platform: Arduino, Mrcropython, UIFlow(Blockly) Kit includes 1x M5Stack LoRa Module Applications Automatic meter reading Home building automation Remote irrigation system","title":"Description"},{"location":"tutorials/M5Stack/modules/lora/description/#description","text":"LoRa integrated LoRa Module Ra-02, designed and produced by Ai-Thinker. On the board has some extra space left over, so we give you a prototyping area, it's great for adding on your customized circult working with the LoRa Module. LoRa enables long-range transmissions (more than 10 km in rural areas) with low power consumption\uff0cThe technology is presented in two parts: LoRa, the physical layer and LoRaWAN (Long Range Wide Area Network), the upper layers. LoRa and LoRaWAN permit long-range connectivity for Internet of Things (IoT) devices in different types of industries.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/modules/lora/description/#product-features","text":"Lora Module: Ra-02 (by Ai-Thinker) Series Communication Protocol: SPI Universal Perboard Working Frequency: 433 MHz Supports FSK, GFSK, MSK, GMSK, LoRa \u2122 and OOK modulation modes Receive sensitivity: lowest to -141 dBm Programmable bit rate up to 300Kbps Build-in PCB Antenna External Antenna port Program platform: Arduino, Mrcropython, UIFlow(Blockly)","title":"Product Features"},{"location":"tutorials/M5Stack/modules/lora/description/#kit-includes","text":"1x M5Stack LoRa Module","title":"Kit includes"},{"location":"tutorials/M5Stack/modules/lora/description/#applications","text":"Automatic meter reading Home building automation Remote irrigation system","title":"Applications"},{"location":"tutorials/M5Stack/modules/lora/documents/","text":"DOCUMENTS LoRa Info (LoRa)","title":"Documents"},{"location":"tutorials/M5Stack/modules/lora/documents/#documents","text":"LoRa Info (LoRa)","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/modules/lora/learn/","text":"LEARN Example Arduino IDE These are the point-to-point communication examples between two LORA modules. The LoRa nodes send and receive messages. Blue string indicates send succeed. Yellow string display the received messages. Red string indicates initialization failed. To get complete code, please click here #include M5Stack.h #include M5LoRa.h //declaration String outgoing; // outgoing message byte msgCount = 0; // count of outgoing messages byte localAddress = 0xBB; // address of this device byte destination = 0xFF; // destination to send to //initialization M5.begin(); LoRa.setPins(); // set CS, reset, IRQ pin LoRa.begin(433E6); // initialize ratio at 915 MHz //send message void sendMessage(String outgoing) { LoRa.beginPacket(); // start packet LoRa.write(destination); // add destination address LoRa.write(localAddress); // add sender address LoRa.write(msgCount); // add message ID LoRa.write(outgoing.length()); // add payload length LoRa.print(outgoing); // add payload LoRa.endPacket(); // finish packet and send it msgCount++; // increment message ID } //receive message void onReceive(int packetSize) { if (packetSize == 0) return; // if there's no packet, return int recipient = LoRa.read(); // recipient address byte sender = LoRa.read(); // sender address byte incomingMsgId = LoRa.read(); // incoming msg ID byte incomingLength = LoRa.read(); // incoming msg length String incoming = ; while (LoRa.available()) { incoming += (char)LoRa.read(); } } onReceive(LoRa.parsePacket());","title":"Learn"},{"location":"tutorials/M5Stack/modules/lora/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/modules/lora/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/modules/lora/learn/#arduino-ide","text":"These are the point-to-point communication examples between two LORA modules. The LoRa nodes send and receive messages. Blue string indicates send succeed. Yellow string display the received messages. Red string indicates initialization failed. To get complete code, please click here #include M5Stack.h #include M5LoRa.h //declaration String outgoing; // outgoing message byte msgCount = 0; // count of outgoing messages byte localAddress = 0xBB; // address of this device byte destination = 0xFF; // destination to send to //initialization M5.begin(); LoRa.setPins(); // set CS, reset, IRQ pin LoRa.begin(433E6); // initialize ratio at 915 MHz //send message void sendMessage(String outgoing) { LoRa.beginPacket(); // start packet LoRa.write(destination); // add destination address LoRa.write(localAddress); // add sender address LoRa.write(msgCount); // add message ID LoRa.write(outgoing.length()); // add payload length LoRa.print(outgoing); // add payload LoRa.endPacket(); // finish packet and send it msgCount++; // increment message ID } //receive message void onReceive(int packetSize) { if (packetSize == 0) return; // if there's no packet, return int recipient = LoRa.read(); // recipient address byte sender = LoRa.read(); // sender address byte incomingMsgId = LoRa.read(); // incoming msg ID byte incomingLength = LoRa.read(); // incoming msg length String incoming = ; while (LoRa.available()) { incoming += (char)LoRa.read(); } } onReceive(LoRa.parsePacket());","title":"Arduino IDE"},{"location":"tutorials/M5Stack/modules/lora/more-information/","text":"MORE INFORMATION Schematic","title":"More information"},{"location":"tutorials/M5Stack/modules/lora/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/modules/lora/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/modules/lorawan/description/","text":"DESCRIPTION LoRaWAN build with RHF76-052 and optional Antennas. RHF76-052 is designed by Ai-Thinker, it is a LoRaWAN \u2122 UART modem compatible device, supports LoRaWAN communication. It's based on the RHF76-052 module and an embeded LoRaWAN stack. You can use M5 core as a host MCU to control this this modem with simple AT command or UART. Since LoRa defines the lower physical layer, the upper networking layers were lacking. LoRaWAN was developed to define the upper layers of the network. LoRaWAN is a media access control (MAC) layer protocol but acts mainly as a network layer protocol for managing communication between LPWAN gateways and end-node devices as a routing protocol,maintained by the LoRa Alliance. you can upgrade your work with a LoRa / LoRaWAN radio, so it can communicate over very long distances and extrmely low power consuming. By default, the UART configuration: \"9600, 8, n, 1\"(8 bits data, no parity, 1 stop bit) Notice: The 5 holes which are under the silk screen \"LoRaWAN\" are designed for upgrading the firmware of LoRaWAN module. Product Features Build-in PCB Antenna External Antenna Port LoRaWAN Module Specification Model: RHF76-052 Version: C - Single Band 868/915 MHz Radio IC: Semtech SX1276 Microcontroller: STM32L052C8T6 Package: SMD-33 Size: 28 x 23 x 3 mm Weight: 3.2g interface: UART Protocol: AT commands Embedded LoRaWAN protocol stack Frequency: 868/915 MHz TXOP: 20dBm @ 868MHz/915MHz Link budget: 160dB Antenna: external (via PCB pad) Supply voltage range: 1.8 ~ 3.6V Typical supply voltage: 3.3V Current usage in sleep mode: 1.45uA Protocol: LoRaWAN Work temperature: -40 ~+85C Storage temperature: -40 ~ +90C, 90% RH Certification: FCC, CE, IC, TELEC Pinouts (datasheet, p. 6-7): SPI USART I2C USB ADC 10 GPIO Kit includes 1x M5Stack LoRaWAN Module Applications Automatic meter reading Home building automation Remote irrigation system","title":"Description"},{"location":"tutorials/M5Stack/modules/lorawan/description/#description","text":"LoRaWAN build with RHF76-052 and optional Antennas. RHF76-052 is designed by Ai-Thinker, it is a LoRaWAN \u2122 UART modem compatible device, supports LoRaWAN communication. It's based on the RHF76-052 module and an embeded LoRaWAN stack. You can use M5 core as a host MCU to control this this modem with simple AT command or UART. Since LoRa defines the lower physical layer, the upper networking layers were lacking. LoRaWAN was developed to define the upper layers of the network. LoRaWAN is a media access control (MAC) layer protocol but acts mainly as a network layer protocol for managing communication between LPWAN gateways and end-node devices as a routing protocol,maintained by the LoRa Alliance. you can upgrade your work with a LoRa / LoRaWAN radio, so it can communicate over very long distances and extrmely low power consuming. By default, the UART configuration: \"9600, 8, n, 1\"(8 bits data, no parity, 1 stop bit) Notice: The 5 holes which are under the silk screen \"LoRaWAN\" are designed for upgrading the firmware of LoRaWAN module.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/modules/lorawan/description/#product-features","text":"Build-in PCB Antenna External Antenna Port","title":"Product Features"},{"location":"tutorials/M5Stack/modules/lorawan/description/#lorawan-module-specification","text":"Model: RHF76-052 Version: C - Single Band 868/915 MHz Radio IC: Semtech SX1276 Microcontroller: STM32L052C8T6 Package: SMD-33 Size: 28 x 23 x 3 mm Weight: 3.2g interface: UART Protocol: AT commands Embedded LoRaWAN protocol stack Frequency: 868/915 MHz TXOP: 20dBm @ 868MHz/915MHz Link budget: 160dB Antenna: external (via PCB pad) Supply voltage range: 1.8 ~ 3.6V Typical supply voltage: 3.3V Current usage in sleep mode: 1.45uA Protocol: LoRaWAN Work temperature: -40 ~+85C Storage temperature: -40 ~ +90C, 90% RH Certification: FCC, CE, IC, TELEC Pinouts (datasheet, p. 6-7): SPI USART I2C USB ADC 10 GPIO","title":"LoRaWAN Module Specification"},{"location":"tutorials/M5Stack/modules/lorawan/description/#kit-includes","text":"1x M5Stack LoRaWAN Module","title":"Kit includes"},{"location":"tutorials/M5Stack/modules/lorawan/description/#applications","text":"Automatic meter reading Home building automation Remote irrigation system","title":"Applications"},{"location":"tutorials/M5Stack/modules/lorawan/documents/","text":"DOCUMENTS LoRaWAN Datasheet (LoRaWAN) LoRaWAN User Manual AT command for LoRaWAN","title":"Documents"},{"location":"tutorials/M5Stack/modules/lorawan/documents/#documents","text":"LoRaWAN Datasheet (LoRaWAN) LoRaWAN User Manual AT command for LoRaWAN","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/modules/lorawan/learn/","text":"LEARN Example Arduino IDE This is a exmaple of p2p LoRaWAN modules communication. Reference to 3.6 Point to Point communication with LoRa of LoRaWAN User Manual . Function: Press button B to set 433MHz as LoRaWAN operating frequency, and send \"Hello World\"; Press button C to set 868MHz as LoRaWAN operating frequency and send \"Hello World\"; Press button A to clear the screen. Note: Before compiling this program, please extract LoRaWan_for_M5Stack.rar to this path C:\\Users\\ user_name \\Documents\\Arduino\\libraries . The below code is incomplete. To get the complete code, please click here . /* device_A.ino */ #include M5Stack.h #include LoRaWan.h #define SerialUSB Serial // declaration M5.begin(); SerialUSB.begin(9600); lora.init(); delay(2000); // must delay for lorawan power on // 433MHz frequency initialization lora.initP2PMode(433, SF12, BW500, 8, 8, 20); // 868MHz frequency initialization lora.initP2PMode(868, SF12, BW500, 8, 8, 20); // send string lora.transferPacketP2PMode( hello world ); // receive data short length = 0; short rssi = 0; memset(buffer, 0, 128); length = lora.receivePacketP2PMode(buffer, 128, rssi, 1); /* device_B.ino */ #include M5Stack.h #include LoRaWan.h #define SerialUSB Serial // declaration M5.begin(); SerialUSB.begin(9600); lora.init(); delay(2000); // must delay for lorawan power on // 433MHz frequency initialization lora.initP2PMode(433, SF12, BW500, 8, 8, 20); // 868MHz frequency initialization lora.initP2PMode(868, SF12, BW500, 8, 8, 20); // send string lora.transferPacketP2PMode( hello world ); // receive data short length = 0; short rssi = 0; memset(buffer, 0, 128); length = lora.receivePacketP2PMode(buffer, 128, rssi, 1);","title":"Learn"},{"location":"tutorials/M5Stack/modules/lorawan/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/modules/lorawan/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/modules/lorawan/learn/#arduino-ide","text":"This is a exmaple of p2p LoRaWAN modules communication. Reference to 3.6 Point to Point communication with LoRa of LoRaWAN User Manual . Function: Press button B to set 433MHz as LoRaWAN operating frequency, and send \"Hello World\"; Press button C to set 868MHz as LoRaWAN operating frequency and send \"Hello World\"; Press button A to clear the screen. Note: Before compiling this program, please extract LoRaWan_for_M5Stack.rar to this path C:\\Users\\ user_name \\Documents\\Arduino\\libraries . The below code is incomplete. To get the complete code, please click here . /* device_A.ino */ #include M5Stack.h #include LoRaWan.h #define SerialUSB Serial // declaration M5.begin(); SerialUSB.begin(9600); lora.init(); delay(2000); // must delay for lorawan power on // 433MHz frequency initialization lora.initP2PMode(433, SF12, BW500, 8, 8, 20); // 868MHz frequency initialization lora.initP2PMode(868, SF12, BW500, 8, 8, 20); // send string lora.transferPacketP2PMode( hello world ); // receive data short length = 0; short rssi = 0; memset(buffer, 0, 128); length = lora.receivePacketP2PMode(buffer, 128, rssi, 1); /* device_B.ino */ #include M5Stack.h #include LoRaWan.h #define SerialUSB Serial // declaration M5.begin(); SerialUSB.begin(9600); lora.init(); delay(2000); // must delay for lorawan power on // 433MHz frequency initialization lora.initP2PMode(433, SF12, BW500, 8, 8, 20); // 868MHz frequency initialization lora.initP2PMode(868, SF12, BW500, 8, 8, 20); // send string lora.transferPacketP2PMode( hello world ); // receive data short length = 0; short rssi = 0; memset(buffer, 0, 128); length = lora.receivePacketP2PMode(buffer, 128, rssi, 1);","title":"Arduino IDE"},{"location":"tutorials/M5Stack/modules/lorawan/more-information/","text":"MORE INFORMATION PinMap RHF76-052_UART ESP32 Chip RXD GPIO17 TXD GPIO16 M5Stack Fire has occupied GPIO16 / 17 to connect with the PSRAM by default, it's conflict with TXD / RXD (GPIO16, GPIO17) in this module. Therefore, when using the LoRaWAN module with the M5Stack Fire, you might have to cut the TXD and RXD from GPS module and wire fly to another set of UART pin, if you gonna use the PSRAM. Schematic","title":"More information"},{"location":"tutorials/M5Stack/modules/lorawan/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/modules/lorawan/more-information/#pinmap","text":"RHF76-052_UART ESP32 Chip RXD GPIO17 TXD GPIO16 M5Stack Fire has occupied GPIO16 / 17 to connect with the PSRAM by default, it's conflict with TXD / RXD (GPIO16, GPIO17) in this module. Therefore, when using the LoRaWAN module with the M5Stack Fire, you might have to cut the TXD and RXD from GPS module and wire fly to another set of UART pin, if you gonna use the PSRAM.","title":"PinMap"},{"location":"tutorials/M5Stack/modules/lorawan/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/modules/plus/description/","text":"DESCRIPTION PLUS is a enhanced M5 module comes with Lipo battery(500mAh), gear potentiometer, IR transmitter, extend PORT B(GPIO Port), PORT C(UART Port) from M5 core and a Microphone soldering pad. Powered with MEGA28, it could be a great upgrade of the hardwre resources by adding up PLUS to your work. Communication Protocol: IIC (0x62). Product Features 500mAh Battery Programmable gear potentiometer IR transmitter PORT B PORT C Kit includes 1x M5Stack PLUS Module","title":"Description"},{"location":"tutorials/M5Stack/modules/plus/description/#description","text":"PLUS is a enhanced M5 module comes with Lipo battery(500mAh), gear potentiometer, IR transmitter, extend PORT B(GPIO Port), PORT C(UART Port) from M5 core and a Microphone soldering pad. Powered with MEGA28, it could be a great upgrade of the hardwre resources by adding up PLUS to your work. Communication Protocol: IIC (0x62).","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/modules/plus/description/#product-features","text":"500mAh Battery Programmable gear potentiometer IR transmitter PORT B PORT C","title":"Product Features"},{"location":"tutorials/M5Stack/modules/plus/description/#kit-includes","text":"1x M5Stack PLUS Module","title":"Kit includes"},{"location":"tutorials/M5Stack/modules/plus/documents/","text":"DOCUMENTS PLUS Firmware","title":"Documents"},{"location":"tutorials/M5Stack/modules/plus/documents/#documents","text":"PLUS Firmware","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/modules/plus/learn/","text":"LEARN Example Arduino IDE Code below plus_read_encoder.ino is incomplete. To get the complete code, please click here .* /* * Read data from the gear potentiometer * Send infrared light */ #include Arduino.h #include M5Stack.h #define IrPin 13 #define PLUS_ADDR 0x62 // declaration int32_t number = 0; uint8_t press = 0; // initialization M5.begin(true, false, false); Wire.begin(); ledcSetup(1, 38000, 10); ledcAttachPin(IrPin, 1);// IR Pin setting // read data Wire.requestFrom(PLUS_ADDR, 2); while(Wire.available()) { int8_t encode = Wire.read(); uint8_t press_n = Wire.read(); number += encode; if(press_n == 0xff) { press = 0;//encoder was pressed } else { press = 1;//encoder was releaed } }","title":"Learn"},{"location":"tutorials/M5Stack/modules/plus/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/modules/plus/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/modules/plus/learn/#arduino-ide","text":"Code below plus_read_encoder.ino is incomplete. To get the complete code, please click here .* /* * Read data from the gear potentiometer * Send infrared light */ #include Arduino.h #include M5Stack.h #define IrPin 13 #define PLUS_ADDR 0x62 // declaration int32_t number = 0; uint8_t press = 0; // initialization M5.begin(true, false, false); Wire.begin(); ledcSetup(1, 38000, 10); ledcAttachPin(IrPin, 1);// IR Pin setting // read data Wire.requestFrom(PLUS_ADDR, 2); while(Wire.available()) { int8_t encode = Wire.read(); uint8_t press_n = Wire.read(); number += encode; if(press_n == 0xff) { press = 0;//encoder was pressed } else { press = 1;//encoder was releaed } }","title":"Arduino IDE"},{"location":"tutorials/M5Stack/modules/plus/more-information/","text":"MORE INFORMATION Schematic","title":"More information"},{"location":"tutorials/M5Stack/modules/plus/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/modules/plus/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/modules/proto/description/","text":"DESCRIPTION PROTO is a pure universal prototype perboard. You can have the total freedom to make your own project as you want it, with prototyping perboards that allows laying out customized circult to interact with the M5 core via M-BUS. Product Features Hole Size: 0.039\" 1mm (CNC Drilled) Hole Pitch: 0.1 in - (2.54 mm) Entire Hole Quantity: 260 Holes Kit includes 1x M5Stack PROTO Module","title":"Description"},{"location":"tutorials/M5Stack/modules/proto/description/#description","text":"PROTO is a pure universal prototype perboard. You can have the total freedom to make your own project as you want it, with prototyping perboards that allows laying out customized circult to interact with the M5 core via M-BUS.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/modules/proto/description/#product-features","text":"Hole Size: 0.039\" 1mm (CNC Drilled) Hole Pitch: 0.1 in - (2.54 mm) Entire Hole Quantity: 260 Holes","title":"Product Features"},{"location":"tutorials/M5Stack/modules/proto/description/#kit-includes","text":"1x M5Stack PROTO Module","title":"Kit includes"},{"location":"tutorials/M5Stack/modules/proto/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/modules/proto/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/modules/proto/learn/","text":"LEARN","title":"Learn"},{"location":"tutorials/M5Stack/modules/proto/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/modules/proto/more-information/","text":"MORE INFORMATION M-BUS Interface LINE0 LINE1 GND IO35(ADC1) GND IO36(ADC2) GND EN IO23(MOSI) IO25(DAC0) IO19(MISO) IO26(DAC1) IO18(EXT_SCK) 3V3 IO3(U1_RX) IO1(U1_TX) IO16(U1_RX) IO17(U2_TX) IO21(I2C_SDA) IO22(I2C_SCL) IO2 IO5 IO12(I2S_SCLK) IO13 IO15(I2S_OUT) IO0 HPOWR IO34 HPOWR 5V HPOWR BAT","title":"More information"},{"location":"tutorials/M5Stack/modules/proto/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/modules/proto/more-information/#m-bus-interface","text":"LINE0 LINE1 GND IO35(ADC1) GND IO36(ADC2) GND EN IO23(MOSI) IO25(DAC0) IO19(MISO) IO26(DAC1) IO18(EXT_SCK) 3V3 IO3(U1_RX) IO1(U1_TX) IO16(U1_RX) IO17(U2_TX) IO21(I2C_SDA) IO22(I2C_SCL) IO2 IO5 IO12(I2S_SCLK) IO13 IO15(I2S_OUT) IO0 HPOWR IO34 HPOWR 5V HPOWR BAT","title":"M-BUS Interface"},{"location":"tutorials/M5Stack/modules/servo/description/","text":"DESCRIPTION SERVO is made to implement the bestest, easiest way to drive Servo motors. This M5 module will make quick work of your next Servo project! It is able to drive mutiple Servo motors, up to 12 channals. We also added an DC input for power supplement. Through M-BUS the DC in can automatically power the M5 core at top. Servo is powered by MEGA328 communicate via IIC(0x53). Product Features 12x servo ports DC power input: 6-12V DC Connector Type: XT60 (female) Kit includes 1x M5Stack Servo Module 1x Common Male to XT60 Male DC convertor Applications Humanoid robot Bionic multi-joint robot Triaxial Camera Cradle","title":"Description"},{"location":"tutorials/M5Stack/modules/servo/description/#description","text":"SERVO is made to implement the bestest, easiest way to drive Servo motors. This M5 module will make quick work of your next Servo project! It is able to drive mutiple Servo motors, up to 12 channals. We also added an DC input for power supplement. Through M-BUS the DC in can automatically power the M5 core at top. Servo is powered by MEGA328 communicate via IIC(0x53).","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/modules/servo/description/#product-features","text":"12x servo ports DC power input: 6-12V DC Connector Type: XT60 (female)","title":"Product Features"},{"location":"tutorials/M5Stack/modules/servo/description/#kit-includes","text":"1x M5Stack Servo Module 1x Common Male to XT60 Male DC convertor","title":"Kit includes"},{"location":"tutorials/M5Stack/modules/servo/description/#applications","text":"Humanoid robot Bionic multi-joint robot Triaxial Camera Cradle","title":"Applications"},{"location":"tutorials/M5Stack/modules/servo/documents/","text":"DOCUMENTS SERVO Firmware","title":"Documents"},{"location":"tutorials/M5Stack/modules/servo/documents/#documents","text":"SERVO Firmware","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/modules/servo/learn/","text":"LEARN Example 1. Arduino IDE The code below is incomplete. If you want the complete code, please click here . #define SERVO_ADDR 0x53 //the IIC address of SERVO Module /* * control servo(CH channle) by us */ Wire.beginTransmission(SERVO_ADDR); Wire.write(CH|0x00); Wire.write(timeL); Wire.write(timeH); Wire.endTransmission(); /* * control servo(CH channle) by angle */ Wire.beginTransmission(SERVO_ADDR); Wire.write(CH|0x10); Wire.write(angle);//0-180\u00b0 Wire.endTransmission(); 2. UIFlow Wanna explore the easiest way of Servo programming?? Check out the Blockly Platform at UIFlow . TO get the complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/modules/servo/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/modules/servo/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/modules/servo/learn/#1-arduino-ide","text":"The code below is incomplete. If you want the complete code, please click here . #define SERVO_ADDR 0x53 //the IIC address of SERVO Module /* * control servo(CH channle) by us */ Wire.beginTransmission(SERVO_ADDR); Wire.write(CH|0x00); Wire.write(timeL); Wire.write(timeH); Wire.endTransmission(); /* * control servo(CH channle) by angle */ Wire.beginTransmission(SERVO_ADDR); Wire.write(CH|0x10); Wire.write(angle);//0-180\u00b0 Wire.endTransmission();","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/modules/servo/learn/#2-uiflow","text":"Wanna explore the easiest way of Servo programming?? Check out the Blockly Platform at UIFlow . TO get the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/modules/servo/more-information/","text":"MORE INFORMATION Tutorial Video Forum Schematic","title":"More information"},{"location":"tutorials/M5Stack/modules/servo/more-information/#more-information","text":"Tutorial Video Forum","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/modules/servo/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/modules/sim800/description/","text":"DESCRIPTION SIM800L is a cellular phone module, integrated SIM800L, a GSM/GPRS module, only cpmpatible with 2G network. if you want to integrate a cellular module into your design with vioce, text and SMS, this hand-solderable module is pretty nice! Series Protocol: UART Product Features 3.5 mm phone audio jack MIC (MIC is disable by default. To enable it, you will need to weld a 0 ohm resistor at MIC-EN ) Supply voltage: 3.8V - 4.2V Recommended supply voltage: 4V Power consumption: sleep mode 2.0mA idle mode 7.0mA GSM transmission (avg): 350 mA GSM transmission (peak): 2000mA Module size: 25 x 23 mm Interface: UART (max. 2.8V) and AT commands SIM card socket: microSIM (bottom side) Supported frequencies: Quad Band (850 / 950 / 1800 /1900 MHz) Antenna connector: IPX Spring Antenna on board Status signaling: LED Working temperature range: -40 do + 85 \u00b0 C Kit includes 1x M5Stack SIM800L Module Applications Nitrogen dioxide alarm Automatic Web Spider SMS-notifier Remote meter reading system","title":"Description"},{"location":"tutorials/M5Stack/modules/sim800/description/#description","text":"SIM800L is a cellular phone module, integrated SIM800L, a GSM/GPRS module, only cpmpatible with 2G network. if you want to integrate a cellular module into your design with vioce, text and SMS, this hand-solderable module is pretty nice! Series Protocol: UART","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/modules/sim800/description/#product-features","text":"3.5 mm phone audio jack MIC (MIC is disable by default. To enable it, you will need to weld a 0 ohm resistor at MIC-EN ) Supply voltage: 3.8V - 4.2V Recommended supply voltage: 4V Power consumption: sleep mode 2.0mA idle mode 7.0mA GSM transmission (avg): 350 mA GSM transmission (peak): 2000mA Module size: 25 x 23 mm Interface: UART (max. 2.8V) and AT commands SIM card socket: microSIM (bottom side) Supported frequencies: Quad Band (850 / 950 / 1800 /1900 MHz) Antenna connector: IPX Spring Antenna on board Status signaling: LED Working temperature range: -40 do + 85 \u00b0 C","title":"Product Features"},{"location":"tutorials/M5Stack/modules/sim800/description/#kit-includes","text":"1x M5Stack SIM800L Module","title":"Kit includes"},{"location":"tutorials/M5Stack/modules/sim800/description/#applications","text":"Nitrogen dioxide alarm Automatic Web Spider SMS-notifier Remote meter reading system","title":"Applications"},{"location":"tutorials/M5Stack/modules/sim800/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/modules/sim800/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/modules/sim800/learn/","text":"LEARN","title":"Learn"},{"location":"tutorials/M5Stack/modules/sim800/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/modules/sim800/more-information/","text":"MORE INFORMATION PinMap SIM800 SIM800 Pin ESP32 Chip TXD U2RXD(GPIO16) RXD U2TXD(GPIO17) RST GPIO5 Schematic","title":"More information"},{"location":"tutorials/M5Stack/modules/sim800/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/modules/sim800/more-information/#pinmap","text":"SIM800 SIM800 Pin ESP32 Chip TXD U2RXD(GPIO16) RXD U2TXD(GPIO17) RST GPIO5","title":"PinMap"},{"location":"tutorials/M5Stack/modules/sim800/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/modules/stepmotor/description/","text":"DESCRIPTION STEPMOTOR is used for stepper motor control. It is perfect for any motion project as it can drive up to 3 Stepper motors with GRBL control. It is built with MEGA328P has been flashed GRBL firmware. The module comunicates with M5Core via I2C(0x70) Integrated 3 DRV8825, a simple but very powerful board that can control one bipolar stepper motor at the time and allows micro stepping up to 1/32 of a step. Product Features 9-24V Power Input 3-way stepper motors (X, Y, Z) Kit includes 1x Step Motor Module 12V Power (Optional) 1x 5V FAN Module for heat dissipation (Optional) Applications DIY 3D Printer Simple Robot Arm","title":"Description"},{"location":"tutorials/M5Stack/modules/stepmotor/description/#description","text":"STEPMOTOR is used for stepper motor control. It is perfect for any motion project as it can drive up to 3 Stepper motors with GRBL control. It is built with MEGA328P has been flashed GRBL firmware. The module comunicates with M5Core via I2C(0x70) Integrated 3 DRV8825, a simple but very powerful board that can control one bipolar stepper motor at the time and allows micro stepping up to 1/32 of a step.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/modules/stepmotor/description/#product-features","text":"9-24V Power Input 3-way stepper motors (X, Y, Z)","title":"Product Features"},{"location":"tutorials/M5Stack/modules/stepmotor/description/#kit-includes","text":"1x Step Motor Module 12V Power (Optional) 1x 5V FAN Module for heat dissipation (Optional)","title":"Kit includes"},{"location":"tutorials/M5Stack/modules/stepmotor/description/#applications","text":"DIY 3D Printer Simple Robot Arm","title":"Applications"},{"location":"tutorials/M5Stack/modules/stepmotor/documents/","text":"DOCUMENTS STEPMOTOR Firmware","title":"Documents"},{"location":"tutorials/M5Stack/modules/stepmotor/documents/#documents","text":"STEPMOTOR Firmware","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/modules/stepmotor/learn/","text":"LEARN Example 1. Arduino IDE The code below is incomplete. TO get complete code, please click here . /* If Button A was pressed, stepmotor will rotate back and forth at a time */ #include M5Stack.h #include Wire.h #define STEPMOTOR_I2C_ADDR 0x70 // initialization M5.begin(); Wire.begin(); // Controlling Protocol: // G n X distance Y distance Z distance F speed SendCommand(STEPMOTOR_I2C_ADDR, G1 X20Y20Z20 F500 ); SendCommand(STEPMOTOR_I2C_ADDR, G1 X0Y0Z0 F400 ); // Get Data from Module. Wire.requestFrom(STEPMOTOR_I2C_ADDR, 1); if (Wire.available() 0) { int u = Wire.read(); if (u != 0) Serial.write(u); } // Send Data to Module. while (Serial.available() 0) { int inByte = Serial.read(); SendByte(STEPMOTOR_I2C_ADDR, inByte); } 2. UIFlow Wanna explore the easiest way of Servo programming?? Check out the Blockly Platform at UIFlow . To get complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/modules/stepmotor/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/modules/stepmotor/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/modules/stepmotor/learn/#1-arduino-ide","text":"The code below is incomplete. TO get complete code, please click here . /* If Button A was pressed, stepmotor will rotate back and forth at a time */ #include M5Stack.h #include Wire.h #define STEPMOTOR_I2C_ADDR 0x70 // initialization M5.begin(); Wire.begin(); // Controlling Protocol: // G n X distance Y distance Z distance F speed SendCommand(STEPMOTOR_I2C_ADDR, G1 X20Y20Z20 F500 ); SendCommand(STEPMOTOR_I2C_ADDR, G1 X0Y0Z0 F400 ); // Get Data from Module. Wire.requestFrom(STEPMOTOR_I2C_ADDR, 1); if (Wire.available() 0) { int u = Wire.read(); if (u != 0) Serial.write(u); } // Send Data to Module. while (Serial.available() 0) { int inByte = Serial.read(); SendByte(STEPMOTOR_I2C_ADDR, inByte); }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/modules/stepmotor/learn/#2-uiflow","text":"Wanna explore the easiest way of Servo programming?? Check out the Blockly Platform at UIFlow . To get complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/modules/stepmotor/more-information/","text":"MORE INFORMATION Schematic","title":"More information"},{"location":"tutorials/M5Stack/modules/stepmotor/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/modules/stepmotor/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/modules/usb/description/","text":"DESCRIPTION USB is a USB driver module, integrated MAX3421E which adds USB host or peripheral capability to any system with an SPI interface. Ever up for adding the standard USB features on your project? this M5 moudle is the perfect solution. Series Protocol: SPI Product Features 1x UAB stadard A port 10x extended GPIO pins extended 3v3, 5v GND Kit includes 1x M5Stack USB Module Application USB keylogger Read and write U disk using M5Core","title":"Description"},{"location":"tutorials/M5Stack/modules/usb/description/#description","text":"USB is a USB driver module, integrated MAX3421E which adds USB host or peripheral capability to any system with an SPI interface. Ever up for adding the standard USB features on your project? this M5 moudle is the perfect solution. Series Protocol: SPI","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/modules/usb/description/#product-features","text":"1x UAB stadard A port 10x extended GPIO pins extended 3v3, 5v GND","title":"Product Features"},{"location":"tutorials/M5Stack/modules/usb/description/#kit-includes","text":"1x M5Stack USB Module","title":"Kit includes"},{"location":"tutorials/M5Stack/modules/usb/description/#application","text":"USB keylogger Read and write U disk using M5Core","title":"Application"},{"location":"tutorials/M5Stack/modules/usb/documents/","text":"DOCUMENTS Datasheet - MAX3421E","title":"Documents"},{"location":"tutorials/M5Stack/modules/usb/documents/#documents","text":"Datasheet - MAX3421E","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/modules/usb/learn/","text":"LEARN Example To get complete code, please click here . NOTE: Before compile this example code, you need to download the corresponding USB library from here . Unzip and copy this library folder to Arduino library path.( This is my path C:\\Users\\ user_name \\Documents\\Arduino\\libraries ) Download the example usb_mouse.ino Plug the USB mouse into USB A port. Hold down the left button to draw white lines. Hold down the right button to draw green line. Press the middle wheel button to clear the screen. #include M5Stack.h #include SPI.h #include Usb.h #include hiduniversal.h #include hidboot.h #include usbhub.h #include M5Mouse.h // new objects USB Usb; USBHub Hub( Usb); HIDBoot USB_HID_PROTOCOL_MOUSE HidMouse( Usb); MouseRptParser Prs; // initialization M5.begin(); Usb.Init(); HidMouse.SetReportParser(0,(HIDReportParser*) Prs); // handle event coming from usb device Usb.Task(); if(Usb.getUsbTaskState() == USB_STATE_RUNNING) { Mouse_Pointer(mou_px, mou_py); mou_px = 0; mou_py = 0; /* left button pressed: draw white point */ if (mou_button == 1) M5.Lcd.drawCircle(StaPotX, StaPotY, 1, WHITE); /* right button pressed: draw green point */ if (mou_button == 2) M5.Lcd.drawCircle(StaPotX, StaPotY, 1, GREEN); /* middle button pressed: clear screen */ if (mou_button == 4) M5.Lcd.fillScreen(BLACK); }","title":"Learn"},{"location":"tutorials/M5Stack/modules/usb/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/modules/usb/learn/#example","text":"To get complete code, please click here . NOTE: Before compile this example code, you need to download the corresponding USB library from here . Unzip and copy this library folder to Arduino library path.( This is my path C:\\Users\\ user_name \\Documents\\Arduino\\libraries ) Download the example usb_mouse.ino Plug the USB mouse into USB A port. Hold down the left button to draw white lines. Hold down the right button to draw green line. Press the middle wheel button to clear the screen. #include M5Stack.h #include SPI.h #include Usb.h #include hiduniversal.h #include hidboot.h #include usbhub.h #include M5Mouse.h // new objects USB Usb; USBHub Hub( Usb); HIDBoot USB_HID_PROTOCOL_MOUSE HidMouse( Usb); MouseRptParser Prs; // initialization M5.begin(); Usb.Init(); HidMouse.SetReportParser(0,(HIDReportParser*) Prs); // handle event coming from usb device Usb.Task(); if(Usb.getUsbTaskState() == USB_STATE_RUNNING) { Mouse_Pointer(mou_px, mou_py); mou_px = 0; mou_py = 0; /* left button pressed: draw white point */ if (mou_button == 1) M5.Lcd.drawCircle(StaPotX, StaPotY, 1, WHITE); /* right button pressed: draw green point */ if (mou_button == 2) M5.Lcd.drawCircle(StaPotX, StaPotY, 1, GREEN); /* middle button pressed: clear screen */ if (mou_button == 4) M5.Lcd.fillScreen(BLACK); }","title":"Example"},{"location":"tutorials/M5Stack/modules/usb/more-information/","text":"MORE INFORMATION Schematic","title":"More information"},{"location":"tutorials/M5Stack/modules/usb/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/modules/usb/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/396port/description/","text":"DESCRIPTION 3.96port a GROVE-to-HT3.96 interface convertor. The HT3.96 piece is 4 pins. HT3.96 is classed as Pluggable System Terminal Block catelog. Terminal blocks are used to secure and/or terminate wires and, in their simplest form, consist of several individual terminals arranged in a long strip. Terminals are useful for connecting wiring to a ground or, in the case of electrical power, for connecting electrical switches and outlets to the mains Product Features 1x HT3.96 connector(4 pins) 2x Lego cpmpatible holes Connector Specifications Type: Plug, Female Sockets Number of Positions: 4 Positions Per Level: 4 Number of Levels: 1 Pitch: 0.156\"\uff083.96mm\uff09 Header Orientation: - Mounting Type: Free-hanging Kit includes 1x 396PORT Unit 1x Grove Cable 1x HT3.96 Male Socket","title":"Description"},{"location":"tutorials/M5Stack/unit/396port/description/#description","text":"3.96port a GROVE-to-HT3.96 interface convertor. The HT3.96 piece is 4 pins. HT3.96 is classed as Pluggable System Terminal Block catelog. Terminal blocks are used to secure and/or terminate wires and, in their simplest form, consist of several individual terminals arranged in a long strip. Terminals are useful for connecting wiring to a ground or, in the case of electrical power, for connecting electrical switches and outlets to the mains","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/396port/description/#product-features","text":"1x HT3.96 connector(4 pins) 2x Lego cpmpatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/396port/description/#connector-specifications","text":"Type: Plug, Female Sockets Number of Positions: 4 Positions Per Level: 4 Number of Levels: 1 Pitch: 0.156\"\uff083.96mm\uff09 Header Orientation: - Mounting Type: Free-hanging","title":"Connector Specifications"},{"location":"tutorials/M5Stack/unit/396port/description/#kit-includes","text":"1x 396PORT Unit 1x Grove Cable 1x HT3.96 Male Socket","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/396port/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/unit/396port/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/396port/learn/","text":"LEARN","title":"Learn"},{"location":"tutorials/M5Stack/unit/396port/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/396port/more-information/","text":"MORE INFORMATION","title":"More information"},{"location":"tutorials/M5Stack/unit/396port/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/adc/description/","text":"DESCRIPTION ADC integrated with ADS1100 which is a fully differential, 16-bit, self-calibrating,delta-sigma A/D converter. It communicates through an I2C interface,which means you can collect AD data thru PortA on M5 core from this unit to enhence your A/D performance. An ADC's work is basically collecting continuous signals from nature like the sound, electromagnetic wave , then convert it into discrete digital signals to become processable data for the MCUs. The I2C address is 0x48. Product Specification COMPLETE DATA ACQUISITION SYSTEM IN A TINY SOT23-6 PACKAGE 16-BITS NO MISSING CODES INL: 0.0125% of FSR MAX CONTINUOUS SELF-CALIBRATION SINGLE-CYCLE CONVERSION PROGRAMMABLE GAIN AMPLIFIER GAIN = 1, 2, 4, OR 8 LOW NOISE: 4\u00b5Vp-p PROGRAMMABLE DATA RATE: 8SPS to 128SPS INTERNAL SYSTEM CLOCK I2CTM INTERFACE POWER SUPPLY: 2.7V to 5.5V LOW CURRENT CONSUMPTION: 90\u00b5A AVAILABLE IN EIGHT DIFFERENT ADDRESSES Two Lego-compatible holes Kit includes 1x ADC unit 1x GROVE Cable 1x HT3.96 Male Socket(2 pins)","title":"Description"},{"location":"tutorials/M5Stack/unit/adc/description/#description","text":"ADC integrated with ADS1100 which is a fully differential, 16-bit, self-calibrating,delta-sigma A/D converter. It communicates through an I2C interface,which means you can collect AD data thru PortA on M5 core from this unit to enhence your A/D performance. An ADC's work is basically collecting continuous signals from nature like the sound, electromagnetic wave , then convert it into discrete digital signals to become processable data for the MCUs. The I2C address is 0x48.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/adc/description/#product-specification","text":"COMPLETE DATA ACQUISITION SYSTEM IN A TINY SOT23-6 PACKAGE 16-BITS NO MISSING CODES INL: 0.0125% of FSR MAX CONTINUOUS SELF-CALIBRATION SINGLE-CYCLE CONVERSION PROGRAMMABLE GAIN AMPLIFIER GAIN = 1, 2, 4, OR 8 LOW NOISE: 4\u00b5Vp-p PROGRAMMABLE DATA RATE: 8SPS to 128SPS INTERNAL SYSTEM CLOCK I2CTM INTERFACE POWER SUPPLY: 2.7V to 5.5V LOW CURRENT CONSUMPTION: 90\u00b5A AVAILABLE IN EIGHT DIFFERENT ADDRESSES Two Lego-compatible holes","title":"Product Specification"},{"location":"tutorials/M5Stack/unit/adc/description/#kit-includes","text":"1x ADC unit 1x GROVE Cable 1x HT3.96 Male Socket(2 pins)","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/adc/documents/","text":"DOCUMENTS Datasheet - ADS1100","title":"Documents"},{"location":"tutorials/M5Stack/unit/adc/documents/#documents","text":"Datasheet - ADS1100","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/adc/learn/","text":"LEARN Example 1. Arduino IDE The below code is incomplete(just for usage). If you want the complete code, please click here . #include M5Stack.h #include Wire.h #include ADS1100.h #define ADS1100_DEFAULT_ADDRESS 0x48 // declaration byte error; int8_t address; //new a object ADS1100 ads; // initialization M5.begin(true, false, false); ads.getAddr_ADS1100(ADS1100_DEFAULT_ADDRESS);// 0x48, 1001 000 (ADDR = GND) ads.setGain(GAIN_ONE); // 1x gain(default) ads.setMode(MODE_CONTIN); // Continuous conversion mode (default) ads.setRate(RATE_8); // 8SPS (default) ads.setOSMode(OSMODE_SINGLE); // Set to start a single-conversion ads.begin(); // read data address = ads.ads_i2cAddress; Wire.beginTransmission(address); Wire.endTransmission(); ads.Measure_Differential(); 2. UIFlow If you want the complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/adc/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/adc/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/adc/learn/#1-arduino-ide","text":"The below code is incomplete(just for usage). If you want the complete code, please click here . #include M5Stack.h #include Wire.h #include ADS1100.h #define ADS1100_DEFAULT_ADDRESS 0x48 // declaration byte error; int8_t address; //new a object ADS1100 ads; // initialization M5.begin(true, false, false); ads.getAddr_ADS1100(ADS1100_DEFAULT_ADDRESS);// 0x48, 1001 000 (ADDR = GND) ads.setGain(GAIN_ONE); // 1x gain(default) ads.setMode(MODE_CONTIN); // Continuous conversion mode (default) ads.setRate(RATE_8); // 8SPS (default) ads.setOSMode(OSMODE_SINGLE); // Set to start a single-conversion ads.begin(); // read data address = ads.ads_i2cAddress; Wire.beginTransmission(address); Wire.endTransmission(); ads.Measure_Differential();","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/adc/learn/#2-uiflow","text":"If you want the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/adc/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core ( GROVE A ) GPIO22 GPIO21 5V GND ADC Unit SCL SDA 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/adc/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/adc/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/adc/more-information/#pinmap","text":"M5Core ( GROVE A ) GPIO22 GPIO21 5V GND ADC Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/angle/description/","text":"DESCRIPTION ANGLE is a rotary switch Unit,simply having a 10K potentiometer inside. This unit can be used for Continuous singal control, such as volume, brightness, or motor speed. A potentiometer is a manually adjustable, variable resistor with three terminals. Two terminals are connected to a resistive element, the third terminal is connected to an adjustable wiper. The position of the wiper determines the output voltage. The out voltage is captured and converted by AD on ESP32 on portB. In M5Stack product system, Normally the Grove color indicates the type of communications. - Black: Single BUS (AD ,DA ,GPIO) - Red: I2C - Blue\uff1aUart - White\uff1a Others(depends) The Unit's Grove interface is black, indicating an analog interface that needs to be connected to the M5Core's GROVE B interface. Product Features Output voltage range: 0 ~ 2500mV Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes Kit includes 1x ANGLE unit 1x GROVE Cable","title":"Description"},{"location":"tutorials/M5Stack/unit/angle/description/#description","text":"ANGLE is a rotary switch Unit,simply having a 10K potentiometer inside. This unit can be used for Continuous singal control, such as volume, brightness, or motor speed. A potentiometer is a manually adjustable, variable resistor with three terminals. Two terminals are connected to a resistive element, the third terminal is connected to an adjustable wiper. The position of the wiper determines the output voltage. The out voltage is captured and converted by AD on ESP32 on portB. In M5Stack product system, Normally the Grove color indicates the type of communications. - Black: Single BUS (AD ,DA ,GPIO) - Red: I2C - Blue\uff1aUart - White\uff1a Others(depends) The Unit's Grove interface is black, indicating an analog interface that needs to be connected to the M5Core's GROVE B interface.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/angle/description/#product-features","text":"Output voltage range: 0 ~ 2500mV Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/angle/description/#kit-includes","text":"1x ANGLE unit 1x GROVE Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/angle/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/unit/angle/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/angle/learn/","text":"LEARN Example 1. Arduino IDE The code below is incomplete. To get the complete code, please click here . Example function: Display the digital value converted from the Unit output voltage (0 ~ 4095) #include M5Stack.h // select the input pin for the potentiometer int sensorPin = 36; // last variable to store the value coming from the sensor int last_sensorValue = 0; // current variable to store the value coming from the sensor int cur_sensorValue = 0; void setup() { M5.begin(); pinMode(sensorPin, INPUT); M5.Lcd.setTextSize(2); M5.Lcd.setCursor(0, 0); M5.Lcd.print( the value of ANGLE: ); } void loop() { // read the value from the sensor: cur_sensorValue = analogRead(sensorPin); M5.Lcd.setCursor(0, 25); if(abs(cur_sensorValue - last_sensorValue) 10){//debaunce M5.Lcd.fillRect(0, 25, 100, 25, BLACK); M5.Lcd.print(cur_sensorValue); last_sensorValue = cur_sensorValue; } delay(50); } 2. UIFlow If you want the complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/angle/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/angle/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/angle/learn/#1-arduino-ide","text":"The code below is incomplete. To get the complete code, please click here . Example function: Display the digital value converted from the Unit output voltage (0 ~ 4095) #include M5Stack.h // select the input pin for the potentiometer int sensorPin = 36; // last variable to store the value coming from the sensor int last_sensorValue = 0; // current variable to store the value coming from the sensor int cur_sensorValue = 0; void setup() { M5.begin(); pinMode(sensorPin, INPUT); M5.Lcd.setTextSize(2); M5.Lcd.setCursor(0, 0); M5.Lcd.print( the value of ANGLE: ); } void loop() { // read the value from the sensor: cur_sensorValue = analogRead(sensorPin); M5.Lcd.setCursor(0, 25); if(abs(cur_sensorValue - last_sensorValue) 10){//debaunce M5.Lcd.fillRect(0, 25, 100, 25, BLACK); M5.Lcd.print(cur_sensorValue); last_sensorValue = cur_sensorValue; } delay(50); }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/angle/learn/#2-uiflow","text":"If you want the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/angle/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core(GROVE B) GPIO36 GPIO26 5V GND ANGLE Unit Sensor Pin / 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/angle/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/angle/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/angle/more-information/#pinmap","text":"M5Core(GROVE B) GPIO36 GPIO26 5V GND ANGLE Unit Sensor Pin / 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/butterfly/description/","text":"DESCRIPTION BUTTERFLY is a butterfly model launcher, that allows you to lauch a butterfly model to the air. The launcher is implmented by 1 servo and a plastic seat. This set can be placed on dress at fashion show or anywhere you want decorate with some flying bufferflies. To set the butterfly model you need to tight up the rubber band by rotate the model at one end and fixed the other end. Put the tighten-up butterfly at the bottom the launcher. Now everything is ready to go. For more infomation please check out the video(link) Product Features Program Platform: Arduino, UIFlow(Blockly, Python) Kit includes 1x BUTTERFLY Launcher(with Servo) 1x BUTTERFLY Pattern 1x Grove Cable 1x ADAPTER","title":"Description"},{"location":"tutorials/M5Stack/unit/butterfly/description/#description","text":"BUTTERFLY is a butterfly model launcher, that allows you to lauch a butterfly model to the air. The launcher is implmented by 1 servo and a plastic seat. This set can be placed on dress at fashion show or anywhere you want decorate with some flying bufferflies. To set the butterfly model you need to tight up the rubber band by rotate the model at one end and fixed the other end. Put the tighten-up butterfly at the bottom the launcher. Now everything is ready to go. For more infomation please check out the video(link)","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/butterfly/description/#product-features","text":"Program Platform: Arduino, UIFlow(Blockly, Python)","title":"Product Features"},{"location":"tutorials/M5Stack/unit/butterfly/description/#kit-includes","text":"1x BUTTERFLY Launcher(with Servo) 1x BUTTERFLY Pattern 1x Grove Cable 1x ADAPTER","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/butterfly/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/unit/butterfly/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/butterfly/learn/","text":"LEARN Steps 1, download this example into Core. 2, Wire the Core with Launcher by GROVE cable and Grove2Pin converter Now that you can control the Lanuncher(Servo Motor) through the Core. to realse \"butterfly\", program the Servo Motor to rotate 30 degree to lock it, program the Servo Motor to 0 degree ,","title":"Learn"},{"location":"tutorials/M5Stack/unit/butterfly/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/butterfly/learn/#steps","text":"1, download this example into Core. 2, Wire the Core with Launcher by GROVE cable and Grove2Pin converter Now that you can control the Lanuncher(Servo Motor) through the Core. to realse \"butterfly\", program the Servo Motor to rotate 30 degree to lock it, program the Servo Motor to 0 degree ,","title":"Steps"},{"location":"tutorials/M5Stack/unit/butterfly/more-information/","text":"MORE INFORMATION","title":"More information"},{"location":"tutorials/M5Stack/unit/butterfly/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/button/description/","text":"DESCRIPTION BUTTON is a single button Unit. The button status can be detected by the input pin status,simply capture the high/low electrical level. As shown in the figure below: Output status: This unit communicates with M5Core through GROVE B port. Product Features Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes Kit includes 1x BUTTON Unit 1x Grove Cable","title":"Description"},{"location":"tutorials/M5Stack/unit/button/description/#description","text":"BUTTON is a single button Unit. The button status can be detected by the input pin status,simply capture the high/low electrical level. As shown in the figure below: Output status: This unit communicates with M5Core through GROVE B port.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/button/description/#product-features","text":"Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/button/description/#kit-includes","text":"1x BUTTON Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/button/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/unit/button/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/button/learn/","text":"LEARN Example 1. Arduino IDE The code below is incomplete(just for usage). To get the complete code, please click here . #include M5Stack.h // declaration int cur_value = 0; // initialization M5.begin();// init pinMode(36, INPUT);// BUTTON Pin // read data cur_value = digitalRead(36);// read the value of BUTTON M5.update(); 2. UIFlow If you want the complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/button/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/button/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/button/learn/#1-arduino-ide","text":"The code below is incomplete(just for usage). To get the complete code, please click here . #include M5Stack.h // declaration int cur_value = 0; // initialization M5.begin();// init pinMode(36, INPUT);// BUTTON Pin // read data cur_value = digitalRead(36);// read the value of BUTTON M5.update();","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/button/learn/#2-uiflow","text":"If you want the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/button/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core(GROVE B) Btn (GPIO36) NC (GPIO26) 5V GND BUTTON Unit BUTTON Pin / 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/button/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/button/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/button/more-information/#pinmap","text":"M5Core(GROVE B) Btn (GPIO36) NC (GPIO26) 5V GND BUTTON Unit BUTTON Pin / 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/cardkb/description/","text":"DESCRIPTION CardKB is a unit can implement a full-featured QWERTY keyboard. Consider that you want make some cool stuff that require keyboard typing and interaction, but M5 core it self just have 3 buttons, here comes the flexible and powerful CardKB unit. It also can achieve button combination(Sym+Key, Shift+Key, Fn+Key) and output richer key value. This unit communicates with M5Core through GROVE A port(IIC interface). Address is 0x5F. Product Features Full-function keyboard, multi-key combination Program Platform: Arduino, UIFlow(Blockly, Python) Kit includes 1x CardKB unit 1x GROVE Cable Application Keyboard peripherals for M5Stack Core","title":"Description"},{"location":"tutorials/M5Stack/unit/cardkb/description/#description","text":"CardKB is a unit can implement a full-featured QWERTY keyboard. Consider that you want make some cool stuff that require keyboard typing and interaction, but M5 core it self just have 3 buttons, here comes the flexible and powerful CardKB unit. It also can achieve button combination(Sym+Key, Shift+Key, Fn+Key) and output richer key value. This unit communicates with M5Core through GROVE A port(IIC interface). Address is 0x5F.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/cardkb/description/#product-features","text":"Full-function keyboard, multi-key combination Program Platform: Arduino, UIFlow(Blockly, Python)","title":"Product Features"},{"location":"tutorials/M5Stack/unit/cardkb/description/#kit-includes","text":"1x CardKB unit 1x GROVE Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/cardkb/description/#application","text":"Keyboard peripherals for M5Stack Core","title":"Application"},{"location":"tutorials/M5Stack/unit/cardkb/documents/","text":"DOCUMENTS CardKB Firmware","title":"Documents"},{"location":"tutorials/M5Stack/unit/cardkb/documents/#documents","text":"CardKB Firmware","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/cardkb/learn/","text":"LEARN Example 1. Arduino IDE To get the code, please click here \u3002 #include Wire.h #include M5Stack.h #define CARDKB_ADDR 0x5F void setup() { M5.begin(); Serial.begin(115200); Wire.begin(); pinMode(5, INPUT); digitalWrite(5, HIGH); M5.Lcd.fillScreen(BLACK); M5.Lcd.setCursor(1, 10); M5.Lcd.setTextColor(YELLOW); M5.Lcd.setTextSize(2); M5.Lcd.printf( IIC Address: 0x5F\\n ); M5.Lcd.printf( ); } void loop() { Wire.requestFrom(CARDKB_ADDR, 1); while (Wire.available()) { char c = Wire.read(); // receive a byte as characterif if (c != 0) { M5.Lcd.printf( %c , c); Serial.println(c, HEX); // M5.Speaker.beep(); } } } 2. UIFlow To get the complete code, please click here \u3002","title":"Learn"},{"location":"tutorials/M5Stack/unit/cardkb/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/cardkb/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/cardkb/learn/#1-arduino-ide","text":"To get the code, please click here \u3002 #include Wire.h #include M5Stack.h #define CARDKB_ADDR 0x5F void setup() { M5.begin(); Serial.begin(115200); Wire.begin(); pinMode(5, INPUT); digitalWrite(5, HIGH); M5.Lcd.fillScreen(BLACK); M5.Lcd.setCursor(1, 10); M5.Lcd.setTextColor(YELLOW); M5.Lcd.setTextSize(2); M5.Lcd.printf( IIC Address: 0x5F\\n ); M5.Lcd.printf( ); } void loop() { Wire.requestFrom(CARDKB_ADDR, 1); while (Wire.available()) { char c = Wire.read(); // receive a byte as characterif if (c != 0) { M5.Lcd.printf( %c , c); Serial.println(c, HEX); // M5.Speaker.beep(); } } }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/cardkb/learn/#2-uiflow","text":"To get the complete code, please click here \u3002","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/cardkb/more-information/","text":"MORE INFORMATION 1. Button combination description: Single button pressed , keyborad will output the first key value(letter button will output lower case form). E.g if \"Q\" was pressed, keyboard will output \"q\"(lower case). Sym+key , keyborad will output the second key value. E.g if \"Sym\" was single pressed, then \"Q\" was pressed, the keyboard will output \"{\". If \"Sym\" was double clicked, then the keyboard will lock this function, all key pressed will output it's second key value. Shift+key , if a letter button was pressed, it'll output upper case form. E.g if \"Shift\" was single pressed, then \"Q\" was pressed, the keyboard will output \"Q\". If \"Shift\" was double clicked, then the keyboard will lock this function, all letter key pressed will output it's upper case form. Fn+key(custom function key combination) , keyborad will output the third key value. You can custom what function the key pressed corresponds. PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND CardKB SCL SDA 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/cardkb/more-information/#more-information","text":"1. Button combination description: Single button pressed , keyborad will output the first key value(letter button will output lower case form). E.g if \"Q\" was pressed, keyboard will output \"q\"(lower case). Sym+key , keyborad will output the second key value. E.g if \"Sym\" was single pressed, then \"Q\" was pressed, the keyboard will output \"{\". If \"Sym\" was double clicked, then the keyboard will lock this function, all key pressed will output it's second key value. Shift+key , if a letter button was pressed, it'll output upper case form. E.g if \"Shift\" was single pressed, then \"Q\" was pressed, the keyboard will output \"Q\". If \"Shift\" was double clicked, then the keyboard will lock this function, all letter key pressed will output it's upper case form. Fn+key(custom function key combination) , keyborad will output the third key value. You can custom what function the key pressed corresponds.","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/cardkb/more-information/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND CardKB SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/catear/description/","text":"DESCRIPTION CATEAR is a cat ear headband made by 118 Neopixels. Neopixels are smart RGB LEDs. Each one can be programmed and display any color. It is also allowed to set the brightness , lighting-up flow and Blink-mode. If you want be standout in a party, at Halloween, why not get this good to add on some excellent lighting effects on your outfit. It can be programmed by any type of M5 core. Connected with Grove port. Alternative Port: A, B, C Product Features Neopixel quantity: 118 program Platform: Arduino, UIFlow(Blocklu, Python) Kit includes 1x CATEAR Unit 1x Grove Cable","title":"Description"},{"location":"tutorials/M5Stack/unit/catear/description/#description","text":"CATEAR is a cat ear headband made by 118 Neopixels. Neopixels are smart RGB LEDs. Each one can be programmed and display any color. It is also allowed to set the brightness , lighting-up flow and Blink-mode. If you want be standout in a party, at Halloween, why not get this good to add on some excellent lighting effects on your outfit. It can be programmed by any type of M5 core. Connected with Grove port. Alternative Port: A, B, C","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/catear/description/#product-features","text":"Neopixel quantity: 118 program Platform: Arduino, UIFlow(Blocklu, Python)","title":"Product Features"},{"location":"tutorials/M5Stack/unit/catear/description/#kit-includes","text":"1x CATEAR Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/catear/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/unit/catear/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/catear/learn/","text":"LEARN Example Arduino Library realted to Neopixel driving: FastLED Library FastLED Reference(Chinese version) UIFlow To get the complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/catear/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/catear/learn/#example","text":"Arduino Library realted to Neopixel driving: FastLED Library FastLED Reference(Chinese version)","title":"Example"},{"location":"tutorials/M5Stack/unit/catear/learn/#uiflow","text":"To get the complete code, please click here .","title":"UIFlow"},{"location":"tutorials/M5Stack/unit/catear/more-information/","text":"MORE INFORMATION PinMap CATEAR connected to GROVE A M5Core(GROVE A) GPIO22 GPIO21 5V GND CATEAR Unit / CATEAR Pin 5V GND CATEAR connected to GROVE B M5Core(GROVE B) GPIO36 GPIO26 5V GND CATEAR Unit / CATEAR Pin 5V GND CATEAR connected to GROVE C M5Core(GROVE C) GPIO16 GPIO17 5V GND CATEAR Unit / CATEAR Pin 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/catear/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/catear/more-information/#pinmap","text":"CATEAR connected to GROVE A M5Core(GROVE A) GPIO22 GPIO21 5V GND CATEAR Unit / CATEAR Pin 5V GND CATEAR connected to GROVE B M5Core(GROVE B) GPIO36 GPIO26 5V GND CATEAR Unit / CATEAR Pin 5V GND CATEAR connected to GROVE C M5Core(GROVE C) GPIO16 GPIO17 5V GND CATEAR Unit / CATEAR Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/color/description/","text":"DESCRIPTION COLOR is a Color Light-to-Digital Converter with IR Filter. TCS3472 device provides a digital return of red, green, blue(RGB), and clear light sensing values. An IR blocking filter,integrated on-chip and localized to the color sensing photodiodes, minimizes the IR spectral component of the incoming light and allows color measurements to be made accurately. In order to get better result, you can try to blacking the sunken area on the side with marker pen. This Unit communicates with the M5Core via the GROVE PORTA (I2C). Address is 0x29. Product Features Red, Green, Blue (RGB), and Clear Light Sensing with IR blocking filter Programmable analog gain and integration time 3,800,000:1 dynamic range Very high sensitivity - ideally suited for operation behind dark glass Program Platform: Arduino, UIFlow(Blockly, Pyhton) Two Lego-compatible holes Kit includes 1x COLOR Unit 1x Grove Cable Application RGB LED backlight control Light color temperature measurement Ambient light sensing for display backlight control Fluid and gas analysis Product color verification and sorting","title":"Description"},{"location":"tutorials/M5Stack/unit/color/description/#description","text":"COLOR is a Color Light-to-Digital Converter with IR Filter. TCS3472 device provides a digital return of red, green, blue(RGB), and clear light sensing values. An IR blocking filter,integrated on-chip and localized to the color sensing photodiodes, minimizes the IR spectral component of the incoming light and allows color measurements to be made accurately. In order to get better result, you can try to blacking the sunken area on the side with marker pen. This Unit communicates with the M5Core via the GROVE PORTA (I2C). Address is 0x29.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/color/description/#product-features","text":"Red, Green, Blue (RGB), and Clear Light Sensing with IR blocking filter Programmable analog gain and integration time 3,800,000:1 dynamic range Very high sensitivity - ideally suited for operation behind dark glass Program Platform: Arduino, UIFlow(Blockly, Pyhton) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/color/description/#kit-includes","text":"1x COLOR Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/color/description/#application","text":"RGB LED backlight control Light color temperature measurement Ambient light sensing for display backlight control Fluid and gas analysis Product color verification and sorting","title":"Application"},{"location":"tutorials/M5Stack/unit/color/documents/","text":"DOCUMENTS Datasheet - TCS3472","title":"Documents"},{"location":"tutorials/M5Stack/unit/color/documents/#documents","text":"Datasheet - TCS3472","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/color/learn/","text":"LEARN Example Arduino IDE The code below is incomplete. To get the complete code, please click here . /* Color test hardware: M5Stack please install the Adfruit TCS34725 library first ... */ #include Wire.h #include M5Stack.h #include Adafruit_TCS34725.h // declaration uint16_t clear, red, green, blue; #define commonAnode true // set to false if using a common cathode LED // new a object Adafruit_TCS34725 tcs; tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS,TCS34725_GAIN_4X); // initialization M5.begin(true, false, false); tcs.begin(); tcs.setIntegrationTime(TCS34725_INTEGRATIONTIME_154MS); tcs.setGain(TCS34725_GAIN_4X); // read data tcs.getRawData( red, green, blue, clear); After burnt this example, PC serial terminal will print original value RGBC(red, green, blue, clear).","title":"Learn"},{"location":"tutorials/M5Stack/unit/color/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/color/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/color/learn/#arduino-ide","text":"The code below is incomplete. To get the complete code, please click here . /* Color test hardware: M5Stack please install the Adfruit TCS34725 library first ... */ #include Wire.h #include M5Stack.h #include Adafruit_TCS34725.h // declaration uint16_t clear, red, green, blue; #define commonAnode true // set to false if using a common cathode LED // new a object Adafruit_TCS34725 tcs; tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS,TCS34725_GAIN_4X); // initialization M5.begin(true, false, false); tcs.begin(); tcs.setIntegrationTime(TCS34725_INTEGRATIONTIME_154MS); tcs.setGain(TCS34725_GAIN_4X); // read data tcs.getRawData( red, green, blue, clear); After burnt this example, PC serial terminal will print original value RGBC(red, green, blue, clear).","title":"Arduino IDE"},{"location":"tutorials/M5Stack/unit/color/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND COLOR Unit SCL SDA 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/color/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/color/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/color/more-information/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND COLOR Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/dac/description/","text":"DESCRIPTION DAC , like its namesake, is a high performance digital/analog signal convertor. Build with MCP4725 ,which is a low-power, high accuracy, single channel, 12-bit buffered voltage output Digital-to-Analog Convertor (DAC) with non-volatile memory(EEPROM). Same as ADC, DAC communicates with I2C. The address is 0x60. Product Features Up to 12 bits of resolution Output 0~3.3V voltage Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes Kit includes 1x DAC Unit 1x Grove Cable APPLICATION MP3 Audio Player mini Oscilloscope","title":"Description"},{"location":"tutorials/M5Stack/unit/dac/description/#description","text":"DAC , like its namesake, is a high performance digital/analog signal convertor. Build with MCP4725 ,which is a low-power, high accuracy, single channel, 12-bit buffered voltage output Digital-to-Analog Convertor (DAC) with non-volatile memory(EEPROM). Same as ADC, DAC communicates with I2C. The address is 0x60.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/dac/description/#product-features","text":"Up to 12 bits of resolution Output 0~3.3V voltage Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/dac/description/#kit-includes","text":"1x DAC Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/dac/description/#application","text":"MP3 Audio Player mini Oscilloscope","title":"APPLICATION"},{"location":"tutorials/M5Stack/unit/dac/documents/","text":"DOCUMENTS Datasheet - MCP4725","title":"Documents"},{"location":"tutorials/M5Stack/unit/dac/documents/#documents","text":"Datasheet - MCP4725","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/dac/learn/","text":"LEARN Example Arduino IDE The code below is incomplete(just for usage). To get the complete code, please click here . /* hardware : m5stack uint dac please install adafruit MCP4725 lib */ #include Wire.h #include Adafruit_MCP4725.h // new a object Adafruit_MCP4725 dac; // initialization dac.begin(0x60); dac.setVoltage(2048, false); // 12bit value , false mean not write EEPROM dac.setVoltage(1024, false);// input digital value 1024 to unit delay(1000); dac.setVoltage(2048, false);// input digital value 2048 to unit delay(1000);","title":"Learn"},{"location":"tutorials/M5Stack/unit/dac/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/dac/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/dac/learn/#arduino-ide","text":"The code below is incomplete(just for usage). To get the complete code, please click here . /* hardware : m5stack uint dac please install adafruit MCP4725 lib */ #include Wire.h #include Adafruit_MCP4725.h // new a object Adafruit_MCP4725 dac; // initialization dac.begin(0x60); dac.setVoltage(2048, false); // 12bit value , false mean not write EEPROM dac.setVoltage(1024, false);// input digital value 1024 to unit delay(1000); dac.setVoltage(2048, false);// input digital value 2048 to unit delay(1000);","title":"Arduino IDE"},{"location":"tutorials/M5Stack/unit/dac/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND DAC Unit SCL SDA 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/dac/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/dac/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/dac/more-information/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND DAC Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/dual_button/description/","text":"DESCRIPTION Dual Button , as its namesake, has two buttons with different color. If the Button unit is not enough, how about double it up to a pair. They share the exact same mechanism, button status can be detected by the input pin status,simply capture the high/low electrical level. This unit communicates with M5Core through GROVE B port. Output status: Product Features Program Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes Kit includes 1x Dual BUTTON Unit 1x Grove Cable Application Game Controller Remote control switch","title":"Description"},{"location":"tutorials/M5Stack/unit/dual_button/description/#description","text":"Dual Button , as its namesake, has two buttons with different color. If the Button unit is not enough, how about double it up to a pair. They share the exact same mechanism, button status can be detected by the input pin status,simply capture the high/low electrical level. This unit communicates with M5Core through GROVE B port. Output status:","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/dual_button/description/#product-features","text":"Program Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/dual_button/description/#kit-includes","text":"1x Dual BUTTON Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/dual_button/description/#application","text":"Game Controller Remote control switch","title":"Application"},{"location":"tutorials/M5Stack/unit/dual_button/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/unit/dual_button/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/dual_button/learn/","text":"LEARN Example 1. Arduino IDE The code below is incomplete(just for usage). TO get the complete code, please click here . #include M5Stack.h // declaration int cur_value_red = 0; int cur_value_blue = 0; // initialization M5.begin(); pinMode(26, INPUT);// Red Button Pin setting pinMode(36, INPUT);// Blue Button Pin setting // read data cur_value_red = digitalRead(26); cur_value_blue = digitalRead(36); M5.update(); 2. UIFlow To get the complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/dual_button/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/dual_button/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/dual_button/learn/#1-arduino-ide","text":"The code below is incomplete(just for usage). TO get the complete code, please click here . #include M5Stack.h // declaration int cur_value_red = 0; int cur_value_blue = 0; // initialization M5.begin(); pinMode(26, INPUT);// Red Button Pin setting pinMode(36, INPUT);// Blue Button Pin setting // read data cur_value_red = digitalRead(26); cur_value_blue = digitalRead(36); M5.update();","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/dual_button/learn/#2-uiflow","text":"To get the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/dual_button/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core (GROVE B) GPIO36 GPIO26 5V GND DUAL_BUTTON Unit Blue Button Pin Red Button Pin 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/dual_button/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/dual_button/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/dual_button/more-information/#pinmap","text":"M5Core (GROVE B) GPIO36 GPIO26 5V GND DUAL_BUTTON Unit Blue Button Pin Red Button Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/earth/description/","text":"DESCRIPTION EARTH unit is a Soil Moisture Sensor for measuring the moisture in soil and similar materials. The soil moisture sensor is pretty straight forward to use. The two large exposed pads function as probes for the sensor, together acting as a variable resistor. The higher moisture that is in the soil means the better the conductivity between the two so that the sensor will result in a lower resistance, and a higher SIG out. You can read the moisture in soil by ADC. Inside this Unit we put an extra potentiometers to change the measurement range. Product Features Adjustable threshold, including 10K adjustable resistor Analog Digital output Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes Kit includes 1x EARTH unit 1x GROVE Cable Application Potted soil moisture monitoring","title":"Description"},{"location":"tutorials/M5Stack/unit/earth/description/#description","text":"EARTH unit is a Soil Moisture Sensor for measuring the moisture in soil and similar materials. The soil moisture sensor is pretty straight forward to use. The two large exposed pads function as probes for the sensor, together acting as a variable resistor. The higher moisture that is in the soil means the better the conductivity between the two so that the sensor will result in a lower resistance, and a higher SIG out. You can read the moisture in soil by ADC. Inside this Unit we put an extra potentiometers to change the measurement range.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/earth/description/#product-features","text":"Adjustable threshold, including 10K adjustable resistor Analog Digital output Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/earth/description/#kit-includes","text":"1x EARTH unit 1x GROVE Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/earth/description/#application","text":"Potted soil moisture monitoring","title":"Application"},{"location":"tutorials/M5Stack/unit/earth/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/unit/earth/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/earth/learn/","text":"LEARN Example 1. Arduino IDE The code below is incomplete. To get the complete code, please click here . #include M5Stack.h void setup() { M5.begin(); dacWrite(25, 0);//disable the speak noise pinMode(26, INPUT);// set digital pin } uint16_t analogRead_value = 0; uint16_t digitalRead_value = 0; void loop() { analogRead_value = analogRead(36);// read analog value of EARTH digitalRead_value = digitalRead(26);// read digital value of EARTH } 2. UIFlow To get the complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/earth/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/earth/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/earth/learn/#1-arduino-ide","text":"The code below is incomplete. To get the complete code, please click here . #include M5Stack.h void setup() { M5.begin(); dacWrite(25, 0);//disable the speak noise pinMode(26, INPUT);// set digital pin } uint16_t analogRead_value = 0; uint16_t digitalRead_value = 0; void loop() { analogRead_value = analogRead(36);// read analog value of EARTH digitalRead_value = digitalRead(26);// read digital value of EARTH }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/earth/learn/#2-uiflow","text":"To get the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/earth/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core(GROVE B) GPIO36 GPIO26 5V GND EARTH Unit AnalogSignal Pin DigitalSignal Pin 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/earth/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/earth/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/earth/more-information/#pinmap","text":"M5Core(GROVE B) GPIO36 GPIO26 5V GND EARTH Unit AnalogSignal Pin DigitalSignal Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/env/description/","text":"DESCRIPTION ENV is a environment sensor, can be used for temperature, humidity, and atmospheric pressure measurement. Build with DHT12 and BMP280. DHT12 is a upgradation version of DHT11 humidity temperature sensor, fully downward compatible, more precise and add I2C interface. BMP280 is an absolute barometric pressure sensor especially designed for mobile applications, offers highest flexibility to optimize the device regarding power consumption, resolution and filter performance. Product Features Temperature: measuring range: -20 ~ 60 \u2103 resolution: \u00b10.2\u2103 Humidity: measuring range: 20 ~ 95 %RH resolution: 0.1% Air pressure measuring range: 300 ~ 1100hPa resolution: \u00b11hPa Program Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes Kit includes 1x ENV Unit 1x Grove Cable","title":"Description"},{"location":"tutorials/M5Stack/unit/env/description/#description","text":"ENV is a environment sensor, can be used for temperature, humidity, and atmospheric pressure measurement. Build with DHT12 and BMP280. DHT12 is a upgradation version of DHT11 humidity temperature sensor, fully downward compatible, more precise and add I2C interface. BMP280 is an absolute barometric pressure sensor especially designed for mobile applications, offers highest flexibility to optimize the device regarding power consumption, resolution and filter performance.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/env/description/#product-features","text":"Temperature: measuring range: -20 ~ 60 \u2103 resolution: \u00b10.2\u2103 Humidity: measuring range: 20 ~ 95 %RH resolution: 0.1% Air pressure measuring range: 300 ~ 1100hPa resolution: \u00b11hPa Program Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/env/description/#kit-includes","text":"1x ENV Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/env/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/unit/env/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/env/learn/","text":"LEARN Example 1. Arduino IDE This is a ENV example, implemented reading temperature, humidity and atmospheric pressure function. 1, Before compiling, please install Adafruit BMP280 Library 2, copy Adafruit_Sensor.h to C:\\Users\\ user_name \\Documents\\Arduino\\libraries\\Adafruit_BMP280_Library The code below is incomplete. To get the complete code, please click here . /* Install Adafruit BMP280 Library first. */ #include M5Stack.h #include DHT12.h #include Wire.h //The DHT12 uses I2C comunication. #include Adafruit_Sensor.h #include Adafruit_BMP280.h // new two objects DHT12 dht12; Adafruit_BMP280 bme; // initialization M5.begin(); Wire.begin(); bmp.begin(); // read data float tmp = dht12.readTemperature(); float hum = dht12.readHumidity(); float pressure = bme.readPressure(); 2. UIFlow To get the complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/env/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/env/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/env/learn/#1-arduino-ide","text":"This is a ENV example, implemented reading temperature, humidity and atmospheric pressure function. 1, Before compiling, please install Adafruit BMP280 Library 2, copy Adafruit_Sensor.h to C:\\Users\\ user_name \\Documents\\Arduino\\libraries\\Adafruit_BMP280_Library The code below is incomplete. To get the complete code, please click here . /* Install Adafruit BMP280 Library first. */ #include M5Stack.h #include DHT12.h #include Wire.h //The DHT12 uses I2C comunication. #include Adafruit_Sensor.h #include Adafruit_BMP280.h // new two objects DHT12 dht12; Adafruit_BMP280 bme; // initialization M5.begin(); Wire.begin(); bmp.begin(); // read data float tmp = dht12.readTemperature(); float hum = dht12.readHumidity(); float pressure = bme.readPressure();","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/env/learn/#2-uiflow","text":"To get the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/env/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND ENV Unit SCL SDA 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/env/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/env/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/env/more-information/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND ENV Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/esp32cam/description/","text":"DESCRIPTION ESP32CAM is a development board for image recognition. It features an ESP32(4M Flash + 520K RAM) chip and 2-Megapixel camera(OV2640). It also supports image transmission via Wi-Fi and debuging through USB Type-C port. The hardware comes preloaded software, programmed by ESP-IDF. It is an application to run Wi-Fi camera. The output image is size 600*800, since it's 2-Maga camera, you sure can optimize the software to output the maximum size of photos. To see what this software can do? Please flow the steps. 1) Power the board via USB type-C or GROVE 2) Use your phone to Wi-Fi scan an AP name start with 'm5stack-' and click to connect this AP. Open up web browser on your phone and visit 192.168.4.1 - Then here comes the picture. Video is about 5-6 frames per senconds. not super fast. The hardware also comes with some reserved weld pad, just in case you want put these chips back on board. - USB type-C or GROVE power input - 6-axis gyroscope (MPU6050) - pressure sensor (BMP280) - analog MIC (SPQ2410) - Battery socket ESP32CAM is the most popular pattern among the M5 camera series so far. If you need more storage please check M5Camera. If you need fisheye lens, please check M5CameraF. Product Features ESP32 specifications Dual-core Tensilica LX6 microprocessor Up to 240MHz clock frequency 520KB internal RAM 4MB Flash memory Integrated 802.11 BGN WiFi transceiver Integrated dual-mode Bluetooth (classic and BLE) Hardware accelerated encryption (AES, SHA2, ECC, RSA-4096) CP2104 USB TTL OV2640 sensor Output Formats(8-bit): YUV(422/420)/YCbCr422 RGB565/555 8-bit compressed data 8-/10-bit Raw RGB data Maximum Image Transfer Rate UXGA/SXGA: 15fps SVGA: 30fps CIF: 60fps Scan Mode: Progressive Camera specifications Field of View : 65 degree Maxmium Pixel: 2M Size: 20.5 \u00d7 46.5 \u00d7 11.5mm Kit includes 1x ESP32CAM Unit","title":"Description"},{"location":"tutorials/M5Stack/unit/esp32cam/description/#description","text":"ESP32CAM is a development board for image recognition. It features an ESP32(4M Flash + 520K RAM) chip and 2-Megapixel camera(OV2640). It also supports image transmission via Wi-Fi and debuging through USB Type-C port. The hardware comes preloaded software, programmed by ESP-IDF. It is an application to run Wi-Fi camera. The output image is size 600*800, since it's 2-Maga camera, you sure can optimize the software to output the maximum size of photos. To see what this software can do? Please flow the steps. 1) Power the board via USB type-C or GROVE 2) Use your phone to Wi-Fi scan an AP name start with 'm5stack-' and click to connect this AP. Open up web browser on your phone and visit 192.168.4.1 - Then here comes the picture. Video is about 5-6 frames per senconds. not super fast. The hardware also comes with some reserved weld pad, just in case you want put these chips back on board. - USB type-C or GROVE power input - 6-axis gyroscope (MPU6050) - pressure sensor (BMP280) - analog MIC (SPQ2410) - Battery socket ESP32CAM is the most popular pattern among the M5 camera series so far. If you need more storage please check M5Camera. If you need fisheye lens, please check M5CameraF.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/esp32cam/description/#product-features","text":"ESP32 specifications Dual-core Tensilica LX6 microprocessor Up to 240MHz clock frequency 520KB internal RAM 4MB Flash memory Integrated 802.11 BGN WiFi transceiver Integrated dual-mode Bluetooth (classic and BLE) Hardware accelerated encryption (AES, SHA2, ECC, RSA-4096) CP2104 USB TTL OV2640 sensor Output Formats(8-bit): YUV(422/420)/YCbCr422 RGB565/555 8-bit compressed data 8-/10-bit Raw RGB data Maximum Image Transfer Rate UXGA/SXGA: 15fps SVGA: 30fps CIF: 60fps Scan Mode: Progressive Camera specifications Field of View : 65 degree Maxmium Pixel: 2M Size: 20.5 \u00d7 46.5 \u00d7 11.5mm","title":"Product Features"},{"location":"tutorials/M5Stack/unit/esp32cam/description/#kit-includes","text":"1x ESP32CAM Unit","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/esp32cam/documents/","text":"DOCUMENTS Datasheet - ESP32 - OV2640","title":"Documents"},{"location":"tutorials/M5Stack/unit/esp32cam/documents/#documents","text":"Datasheet - ESP32 - OV2640","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/esp32cam/learn/","text":"LEARN Preloaded Software https://github.com/m5stack/m5stack-cam-psram/tree/NoPsram","title":"Learn"},{"location":"tutorials/M5Stack/unit/esp32cam/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/esp32cam/learn/#preloaded-software","text":"https://github.com/m5stack/m5stack-cam-psram/tree/NoPsram","title":"Preloaded Software"},{"location":"tutorials/M5Stack/unit/esp32cam/more-information/","text":"MORE INFORMATION PinMap Camera Interface PinMap Interface OV2640 Pin ESP32Cam SCCB Clock SIOC IO23 SCCB Data SIOD IO25 System Clock XCLK IO27 Vertical Sync VSYNC IO22 Horizontal Reference HREF IO26 Pixel Clock PCLK IO21 Pixel Data Bit 0 D2 IO17 Pixel Data Bit 1 D3 IO35 Pixel Data Bit 2 D4 IO34 Pixel Data Bit 3 D5 IO5 Pixel Data Bit 4 D6 IO39 Pixel Data Bit 5 D7 IO18 Pixel Data Bit 6 D8 IO36 Pixel Data Bit 7 D9 IO19 Camera Reset RESET IO15 Camera Power Down PWDN see Note 1 Power Supply 3.3V 3V3 3V3 Ground GND GND GROVE Interface Grove ESP32Cam SCL IO4 SDA IO13 5V 5V GND GND LED Interface LED ESP32Cam LED_Pin IO16 reserved chip interfaces BME280 Interface It's IIC address is 0x76. BME280 ESP32Cam SCL IO4 SDA IO13 MPU6050 Interface It's IIC address is 0x68. MPU6050 ESP32Cam SCL IO4 SDA IO13 MIC(SPQ2410) Interface SPQ2410 ESP32Cam OUT IO32 NOTE: Camera Power Down pin is connected to ground via 12k ohm on board. does not need to be connected to ESP32 GPIO. Instead it may be pulled down to ground with 10 kOhm resistor. We have several patterns of camera board, the following figures shows the main difference view click here . download click here .","title":"More information"},{"location":"tutorials/M5Stack/unit/esp32cam/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/esp32cam/more-information/#pinmap","text":"Camera Interface PinMap Interface OV2640 Pin ESP32Cam SCCB Clock SIOC IO23 SCCB Data SIOD IO25 System Clock XCLK IO27 Vertical Sync VSYNC IO22 Horizontal Reference HREF IO26 Pixel Clock PCLK IO21 Pixel Data Bit 0 D2 IO17 Pixel Data Bit 1 D3 IO35 Pixel Data Bit 2 D4 IO34 Pixel Data Bit 3 D5 IO5 Pixel Data Bit 4 D6 IO39 Pixel Data Bit 5 D7 IO18 Pixel Data Bit 6 D8 IO36 Pixel Data Bit 7 D9 IO19 Camera Reset RESET IO15 Camera Power Down PWDN see Note 1 Power Supply 3.3V 3V3 3V3 Ground GND GND GROVE Interface Grove ESP32Cam SCL IO4 SDA IO13 5V 5V GND GND LED Interface LED ESP32Cam LED_Pin IO16 reserved chip interfaces BME280 Interface It's IIC address is 0x76. BME280 ESP32Cam SCL IO4 SDA IO13 MPU6050 Interface It's IIC address is 0x68. MPU6050 ESP32Cam SCL IO4 SDA IO13 MIC(SPQ2410) Interface SPQ2410 ESP32Cam OUT IO32 NOTE: Camera Power Down pin is connected to ground via 12k ohm on board. does not need to be connected to ESP32 GPIO. Instead it may be pulled down to ground with 10 kOhm resistor. We have several patterns of camera board, the following figures shows the main difference view click here . download click here .","title":"PinMap"},{"location":"tutorials/M5Stack/unit/extio/description/","text":"DESCRIPTION EXT.IO is a GOIO Expander. With simple I2C commands you can have up to 8 GPIOs. Integrates PCA9554PW. This 8-bit I/O expander for the two-line bidirectionalbus (I2C) is designed for 2.3-V to 5.5-V VCC, Open-Drain Active-Low Interrupt Output operation. It provides general-purpose remote I/O expansion for most microcontroller families via the I2C interface. IIC address: 0x27. It\u2019s difficult to foresee the needs of your project from the start. EXT.IO is the perfect solution for expanding the number of IO. It allows you to add new features, logic,timing and sensing to alrady highly integrated designs. Product Features Expanded I/O number: 8 Program Platform : Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes Kit includes 1x EXT.IO Unit 1x Grove Cable","title":"Description"},{"location":"tutorials/M5Stack/unit/extio/description/#description","text":"EXT.IO is a GOIO Expander. With simple I2C commands you can have up to 8 GPIOs. Integrates PCA9554PW. This 8-bit I/O expander for the two-line bidirectionalbus (I2C) is designed for 2.3-V to 5.5-V VCC, Open-Drain Active-Low Interrupt Output operation. It provides general-purpose remote I/O expansion for most microcontroller families via the I2C interface. IIC address: 0x27. It\u2019s difficult to foresee the needs of your project from the start. EXT.IO is the perfect solution for expanding the number of IO. It allows you to add new features, logic,timing and sensing to alrady highly integrated designs.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/extio/description/#product-features","text":"Expanded I/O number: 8 Program Platform : Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/extio/description/#kit-includes","text":"1x EXT.IO Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/extio/documents/","text":"DOCUMENTS Datasheet - PCA9554PW","title":"Documents"},{"location":"tutorials/M5Stack/unit/extio/documents/#documents","text":"Datasheet - PCA9554PW","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/extio/learn/","text":"LEARN Example 1. Arduino IDE To get the complete code, please click here \u3002 /* Connect to GRVOE A on M5Core */ #include M5Stack.h #include PCA9554.h // Load the PCA9554 Library // new a object PCA9554 ioCon1(0x27); uint8_t res; // initialization M5.begin(); Wire.begin(); ioCon1.twiWrite(21, 22); // GROVE A delay(10); res = 1; ioCon1.twiRead(res); Serial.printf( res:%d\\r\\n , res); ioCon1.portMode0(ALLOUTPUT); //Set the port as all output // set the specific pin ioCon1.digitalWrite0(0, HIGH); ioCon1.digitalWrite0(1, HIGH); ioCon1.digitalWrite0(2, HIGH); ioCon1.digitalWrite0(3, HIGH); ioCon1.digitalWrite0(4, HIGH); ioCon1.digitalWrite0(5, HIGH); ioCon1.digitalWrite0(6, HIGH); ioCon1.digitalWrite0(7, HIGH); // write 0-7 HIGHT Serial.println(ioCon1.digitalWritePort0(0xff)); // write 0-7 LOW Serial.println(ioCon1.digitalWritePort0(0x00)); 2. UIFlow To get the complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/extio/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/extio/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/extio/learn/#1-arduino-ide","text":"To get the complete code, please click here \u3002 /* Connect to GRVOE A on M5Core */ #include M5Stack.h #include PCA9554.h // Load the PCA9554 Library // new a object PCA9554 ioCon1(0x27); uint8_t res; // initialization M5.begin(); Wire.begin(); ioCon1.twiWrite(21, 22); // GROVE A delay(10); res = 1; ioCon1.twiRead(res); Serial.printf( res:%d\\r\\n , res); ioCon1.portMode0(ALLOUTPUT); //Set the port as all output // set the specific pin ioCon1.digitalWrite0(0, HIGH); ioCon1.digitalWrite0(1, HIGH); ioCon1.digitalWrite0(2, HIGH); ioCon1.digitalWrite0(3, HIGH); ioCon1.digitalWrite0(4, HIGH); ioCon1.digitalWrite0(5, HIGH); ioCon1.digitalWrite0(6, HIGH); ioCon1.digitalWrite0(7, HIGH); // write 0-7 HIGHT Serial.println(ioCon1.digitalWritePort0(0xff)); // write 0-7 LOW Serial.println(ioCon1.digitalWritePort0(0x00));","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/extio/learn/#2-uiflow","text":"To get the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/extio/more-information/","text":"MORE INFORMATION PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND EXT.IO Unit SCL SDA 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/extio/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/extio/more-information/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND EXT.IO Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/finger/description/","text":"DESCRIPTION FINGER Unit is a fingerprint sensor. This all-in-one fingerprint sensor makes fingerprint adding,verification,mananging super simple. Uart protocol, Compact size and ultra-low power consumption makes it very attractive to use around M5Stack series product. it performs fast fingerprint matching with highest security level and optimal user convenience. You can program to set the fingerprint recognition comparison level and different security level . if you ever consider secure your project with biometrics,don't forget to include this M5unit FINGER . This unit cummunicate with M5Core by UART protocol connected via PORTC UART settings: - Baudrate( default: 19200bps ) - Start bits(1 bit) - Stop bits(1 bit) - Parity(no) Product Features Fingerprint capacity: 1000/1700/2000/3000(Default:1700) False Acceptance Rate: 0.001%(Security level 3) False Rejection Rate: 0.1%(Security level 3) Security Level: 1-5\uff08Default: 3\uff09 Output Format: User name, finger image, feature value Characteriatics value size: 193 Byte Communication Interface: UART Response Time: Fingerprint processing 0.45 Communication Baudrate: 9600-115200 (default: 19200) Operating Temperature: -10C - 60C Operating Humility: 20%-80% Kit includes 1x FINGER Unit 1x Grove Cable Application Fingerprint Attendance Machine Fingerprint Locker","title":"Description"},{"location":"tutorials/M5Stack/unit/finger/description/#description","text":"FINGER Unit is a fingerprint sensor. This all-in-one fingerprint sensor makes fingerprint adding,verification,mananging super simple. Uart protocol, Compact size and ultra-low power consumption makes it very attractive to use around M5Stack series product. it performs fast fingerprint matching with highest security level and optimal user convenience. You can program to set the fingerprint recognition comparison level and different security level . if you ever consider secure your project with biometrics,don't forget to include this M5unit FINGER . This unit cummunicate with M5Core by UART protocol connected via PORTC UART settings: - Baudrate( default: 19200bps ) - Start bits(1 bit) - Stop bits(1 bit) - Parity(no)","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/finger/description/#product-features","text":"Fingerprint capacity: 1000/1700/2000/3000(Default:1700) False Acceptance Rate: 0.001%(Security level 3) False Rejection Rate: 0.1%(Security level 3) Security Level: 1-5\uff08Default: 3\uff09 Output Format: User name, finger image, feature value Characteriatics value size: 193 Byte Communication Interface: UART Response Time: Fingerprint processing 0.45 Communication Baudrate: 9600-115200 (default: 19200) Operating Temperature: -10C - 60C Operating Humility: 20%-80%","title":"Product Features"},{"location":"tutorials/M5Stack/unit/finger/description/#kit-includes","text":"1x FINGER Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/finger/description/#application","text":"Fingerprint Attendance Machine Fingerprint Locker","title":"Application"},{"location":"tutorials/M5Stack/unit/finger/documents/","text":"DOCUMENTS FINGER communication protocol","title":"Documents"},{"location":"tutorials/M5Stack/unit/finger/documents/#documents","text":"FINGER communication protocol","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/finger/learn/","text":"LEARN Example Arduino IDE The code below is incomplete(just for usage). To get the complete code, please click here . /* Connect to GRVOE C on M5Core */ #include M5Stack.h #include finger.h uint8_t userNum; //User number uint8_t res1; // result for res1 #define ACK_SUCCESS 0x00 #define ACK_FAIL 0x01 #define ACK_FULL 0x04 #define ACK_NOUSER 0x05 #define ACK_USER_EXIST 0x07 #define ACK_TIMEOUT 0x08 // initialization M5.begin(); Serial2.begin(19200, SERIAL_8N1, 16, 17); userNum = fpm_getUserNum(); M5.Lcd.print( userNum: ); M5.Lcd.println(userNum); // add a new user res1 = fpm_addUser(userNum,1); //get function result // compare your finger res1 = fpm_compareFinger(); // delete all user res1 = fpm_deleteAllUser();","title":"Learn"},{"location":"tutorials/M5Stack/unit/finger/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/finger/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/finger/learn/#arduino-ide","text":"The code below is incomplete(just for usage). To get the complete code, please click here . /* Connect to GRVOE C on M5Core */ #include M5Stack.h #include finger.h uint8_t userNum; //User number uint8_t res1; // result for res1 #define ACK_SUCCESS 0x00 #define ACK_FAIL 0x01 #define ACK_FULL 0x04 #define ACK_NOUSER 0x05 #define ACK_USER_EXIST 0x07 #define ACK_TIMEOUT 0x08 // initialization M5.begin(); Serial2.begin(19200, SERIAL_8N1, 16, 17); userNum = fpm_getUserNum(); M5.Lcd.print( userNum: ); M5.Lcd.println(userNum); // add a new user res1 = fpm_addUser(userNum,1); //get function result // compare your finger res1 = fpm_compareFinger(); // delete all user res1 = fpm_deleteAllUser();","title":"Arduino IDE"},{"location":"tutorials/M5Stack/unit/finger/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core(GROVE C) U2RXD U2TXD 5V GND FINGER Unit TXD RXD 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/finger/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/finger/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/finger/more-information/#pinmap","text":"M5Core(GROVE C) U2RXD U2TXD 5V GND FINGER Unit TXD RXD 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/gps/description/","text":"DESCRIPTION This is the M5Unit version of GPS , integrates a Zhongke Weibeidou navigation chip AT6558 and a amplification chip MAX2659 used for amplifying antenna signal. AT6558 is highly performance, supports many types of satellite navigation system,able to receive satellite signals on 56 channels GNSS signal from 6 satellite navigation system, joint location, navigation, timing and more. The module is able to obtain accurate global location information. quick and accurate positioning for anywhere in the city, in the canyon, under the overhead, and inside the car. The module can be widely used in vehicle monitoring, bus reporting, car navigation, onboard navigation, notebook navigation and other products. You can plug it into port C on M5core via GROVE cable, which is a standard UART interface. UART settings : - Baudrate( default: 9600bps ) - Start bits(1 bit) - Stop bits(1 bit) - Parity(no) Product Features Functional specification Positioning accuracy: 2.5 meters (CEP50, open space) Channel: 56 Support single system positioning of BDS/GPS/GLONASS satellite navigation systems, or multi-system joint positioning in any combination Support D-GNSS differential positioning Positioning update frequency: 1-10Hz Maximum height: 1800 m Maximum speed: 515 m/s Maximum acceleration: = 4 G Low power consumption BDS/GPS dual mode continuous operation: 23mA (@3.3V) Standby: 10uA (@3.3V) Sensitivity Tracking: -162dBm Capture: -148dBm Cold start: -146dBm Start Time Cold start: 35 seconds Warm start: 32 seconds Hot start: 1 second Operating temperature: -40~85\u00b0C Two Lego-compatible holes Kit includes 1x GPS Unit 1x Grove Cable Application Car, ship positioning and navigation Smart law enforcement positioning","title":"Description"},{"location":"tutorials/M5Stack/unit/gps/description/#description","text":"This is the M5Unit version of GPS , integrates a Zhongke Weibeidou navigation chip AT6558 and a amplification chip MAX2659 used for amplifying antenna signal. AT6558 is highly performance, supports many types of satellite navigation system,able to receive satellite signals on 56 channels GNSS signal from 6 satellite navigation system, joint location, navigation, timing and more. The module is able to obtain accurate global location information. quick and accurate positioning for anywhere in the city, in the canyon, under the overhead, and inside the car. The module can be widely used in vehicle monitoring, bus reporting, car navigation, onboard navigation, notebook navigation and other products. You can plug it into port C on M5core via GROVE cable, which is a standard UART interface. UART settings : - Baudrate( default: 9600bps ) - Start bits(1 bit) - Stop bits(1 bit) - Parity(no)","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/gps/description/#product-features","text":"Functional specification Positioning accuracy: 2.5 meters (CEP50, open space) Channel: 56 Support single system positioning of BDS/GPS/GLONASS satellite navigation systems, or multi-system joint positioning in any combination Support D-GNSS differential positioning Positioning update frequency: 1-10Hz Maximum height: 1800 m Maximum speed: 515 m/s Maximum acceleration: = 4 G Low power consumption BDS/GPS dual mode continuous operation: 23mA (@3.3V) Standby: 10uA (@3.3V) Sensitivity Tracking: -162dBm Capture: -148dBm Cold start: -146dBm Start Time Cold start: 35 seconds Warm start: 32 seconds Hot start: 1 second Operating temperature: -40~85\u00b0C Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/gps/description/#kit-includes","text":"1x GPS Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/gps/description/#application","text":"Car, ship positioning and navigation Smart law enforcement positioning","title":"Application"},{"location":"tutorials/M5Stack/unit/gps/documents/","text":"DOCUMENTS [Datasheet] - AT6558 - MAX2659 TinyGPS++ library CASIC multimode satellite navigation receiver protocol specification GnssToolKit3(Windows Version)","title":"Documents"},{"location":"tutorials/M5Stack/unit/gps/documents/#documents","text":"[Datasheet] - AT6558 - MAX2659 TinyGPS++ library CASIC multimode satellite navigation receiver protocol specification GnssToolKit3(Windows Version)","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/gps/learn/","text":"LEARN Example Arduino IDE To get the complete code GPSRaw.ino , please click here . #include M5Stack.h /* By default, GPS is connected with M5Core through UART2 */ HardwareSerial GPSRaw(2); void setup() { M5.begin(); GPSRaw.begin(9600);// GPS init Serial.println( hello ); termInit(); } void loop() { // put your main code here, to run repeatedly: if(Serial.available()) { int ch = Serial.read(); GPSRaw.write(ch); } if(GPSRaw.available()) { int ch = GPSRaw.read();// read GPS information Serial.write(ch); termPutchar(ch); } } Once you download the example code GPSRaw.ino , when device start, following information will print by uart, you can either display with M5 core screen or PC. $GNGGA,063012.000,2234.87140,N,11357.22414,E,1,06,4.2,7.3,M,0.0,M,,*7D $GNGLL,2234.87140,N,11357.22414,E,063012.000,A,A*4C $GPGSA,A,3,01,09,11,18,23,,,,,,,,6.3,4.2,4.7*32 $BDGSA,A,3,13,,,,,,,,,,,,6.3,4.2,4.7*21 $GPGSV,3,1,10,01,54,164,33,04,,,22,08,46,019,,09,23,230,24*40 $GPGSV,3,2,10,11,81,200,12,18,65,110,26,23,14,195,25,27,18,041,*78 $GPGSV,3,3,10,28,10,300,15,30,33,319,*7C $BDGSV,1,1,01,13,43,195,29*5A $GNRMC,063012.000,A,2234.87140,N,11357.22414,E,0.69,171.74,240419,,,A*7A $GNVTG,171.74,T,,M,0.69,N,1.27,K,A*2C $GNZDA,063012.000,24,04,2019,00,00*46 $GPTXT,01,01,01,ANTENNA OPEN*25 Analysis: $GNRMC,063012.000,A,2234.87140,N,11357.22414,E,0.69,171.74,240419,,,A*7A Indicates that the positioning information is: UTC time is 06:30:12, north latitude 22.58119\u00b0, east longitude 113.95357\u00b0,April 24, 2019","title":"Learn"},{"location":"tutorials/M5Stack/unit/gps/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/gps/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/gps/learn/#arduino-ide","text":"To get the complete code GPSRaw.ino , please click here . #include M5Stack.h /* By default, GPS is connected with M5Core through UART2 */ HardwareSerial GPSRaw(2); void setup() { M5.begin(); GPSRaw.begin(9600);// GPS init Serial.println( hello ); termInit(); } void loop() { // put your main code here, to run repeatedly: if(Serial.available()) { int ch = Serial.read(); GPSRaw.write(ch); } if(GPSRaw.available()) { int ch = GPSRaw.read();// read GPS information Serial.write(ch); termPutchar(ch); } } Once you download the example code GPSRaw.ino , when device start, following information will print by uart, you can either display with M5 core screen or PC. $GNGGA,063012.000,2234.87140,N,11357.22414,E,1,06,4.2,7.3,M,0.0,M,,*7D $GNGLL,2234.87140,N,11357.22414,E,063012.000,A,A*4C $GPGSA,A,3,01,09,11,18,23,,,,,,,,6.3,4.2,4.7*32 $BDGSA,A,3,13,,,,,,,,,,,,6.3,4.2,4.7*21 $GPGSV,3,1,10,01,54,164,33,04,,,22,08,46,019,,09,23,230,24*40 $GPGSV,3,2,10,11,81,200,12,18,65,110,26,23,14,195,25,27,18,041,*78 $GPGSV,3,3,10,28,10,300,15,30,33,319,*7C $BDGSV,1,1,01,13,43,195,29*5A $GNRMC,063012.000,A,2234.87140,N,11357.22414,E,0.69,171.74,240419,,,A*7A $GNVTG,171.74,T,,M,0.69,N,1.27,K,A*2C $GNZDA,063012.000,24,04,2019,00,00*46 $GPTXT,01,01,01,ANTENNA OPEN*25 Analysis: $GNRMC,063012.000,A,2234.87140,N,11357.22414,E,0.69,171.74,240419,,,A*7A Indicates that the positioning information is: UTC time is 06:30:12, north latitude 22.58119\u00b0, east longitude 113.95357\u00b0,April 24, 2019","title":"Arduino IDE"},{"location":"tutorials/M5Stack/unit/gps/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core(GROVE C) U2RXD(GPIO16) U2TXD(GPIO17) 5V GND GPS Unit Signal Transmitter (TXD) Signal Receiver (RXD) 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/gps/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/gps/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/gps/more-information/#pinmap","text":"M5Core(GROVE C) U2RXD(GPIO16) U2TXD(GPIO17) 5V GND GPS Unit Signal Transmitter (TXD) Signal Receiver (RXD) 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/heart/description/","text":"DESCRIPTION HEART is build with MAX30100 .. MAX30100 is a complete pulse oximetry and heartrate sensor system solution designed for the demanding requirements of wearable devices. The MAX30100 provides very small total solution size without sacrificing optical or electrical performance. Minimal external hardware components are needed for integration into a wearable device. How do we use this Unit to test the heart rate and ? Put your finger on the detection area. What is the communication protocol between M5 core and this unit? I2C . Product Features Programmable Sample Rate and LED Current for Power Savings Ultra-Low Shutdown Current (0.7\u00b5A, typ) Advanced Functionality Improves Measurement Performance High Sample Rate Capability Fast Data Output Capability GROVE interface Software Develop platform: Arduino Two Lego-compatible holes Kit includes 1x HEART Unit 1x Grove Cable","title":"Description"},{"location":"tutorials/M5Stack/unit/heart/description/#description","text":"HEART is build with MAX30100 .. MAX30100 is a complete pulse oximetry and heartrate sensor system solution designed for the demanding requirements of wearable devices. The MAX30100 provides very small total solution size without sacrificing optical or electrical performance. Minimal external hardware components are needed for integration into a wearable device. How do we use this Unit to test the heart rate and ? Put your finger on the detection area. What is the communication protocol between M5 core and this unit? I2C .","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/heart/description/#product-features","text":"Programmable Sample Rate and LED Current for Power Savings Ultra-Low Shutdown Current (0.7\u00b5A, typ) Advanced Functionality Improves Measurement Performance High Sample Rate Capability Fast Data Output Capability GROVE interface Software Develop platform: Arduino Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/heart/description/#kit-includes","text":"1x HEART Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/heart/documents/","text":"DOCUMENTS Datasheet - MAX30100 MAX30100 lib","title":"Documents"},{"location":"tutorials/M5Stack/unit/heart/documents/#documents","text":"Datasheet - MAX30100 MAX30100 lib","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/heart/learn/","text":"LEARN Example Arduino IDE To get the code, please click here . /* Install MAX30100lib Library first. MAX30100_RawData.ino */ #include Wire.h #include MAX30100.h #define SAMPLING_RATE MAX30100_SAMPRATE_100HZ #define IR_LED_CURRENT MAX30100_LED_CURR_50MA #define RED_LED_CURRENT MAX30100_LED_CURR_27_1MA // set HIGHRES_MODE to true only // when setting PULSE_WIDTH to MAX30100_SPC_PW_1600US_16BITS #define PULSE_WIDTH MAX30100_SPC_PW_1600US_16BITS #define HIGHRES_MODE true // new a object MAX30100 sensor; void setup() { Serial.begin(115200); Serial.print( Initializing MAX30100.. ); if (!sensor.begin()) { Serial.println( FAILED ); for(;;); } else { Serial.println( SUCCESS ); } sensor.setMode(MAX30100_MODE_SPO2_HR); sensor.setLedsCurrent(IR_LED_CURRENT, RED_LED_CURRENT); sensor.setLedsPulseWidth(PULSE_WIDTH); sensor.setSamplingRate(SAMPLING_RATE); sensor.setHighresModeEnabled(HIGHRES_MODE); } void loop() { uint16_t ir, red; sensor.update(); while (sensor.getRawValues( ir, red)) { Serial.print(ir); Serial.print('\\t'); Serial.println(red); } }","title":"Learn"},{"location":"tutorials/M5Stack/unit/heart/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/heart/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/heart/learn/#arduino-ide","text":"To get the code, please click here . /* Install MAX30100lib Library first. MAX30100_RawData.ino */ #include Wire.h #include MAX30100.h #define SAMPLING_RATE MAX30100_SAMPRATE_100HZ #define IR_LED_CURRENT MAX30100_LED_CURR_50MA #define RED_LED_CURRENT MAX30100_LED_CURR_27_1MA // set HIGHRES_MODE to true only // when setting PULSE_WIDTH to MAX30100_SPC_PW_1600US_16BITS #define PULSE_WIDTH MAX30100_SPC_PW_1600US_16BITS #define HIGHRES_MODE true // new a object MAX30100 sensor; void setup() { Serial.begin(115200); Serial.print( Initializing MAX30100.. ); if (!sensor.begin()) { Serial.println( FAILED ); for(;;); } else { Serial.println( SUCCESS ); } sensor.setMode(MAX30100_MODE_SPO2_HR); sensor.setLedsCurrent(IR_LED_CURRENT, RED_LED_CURRENT); sensor.setLedsPulseWidth(PULSE_WIDTH); sensor.setSamplingRate(SAMPLING_RATE); sensor.setHighresModeEnabled(HIGHRES_MODE); } void loop() { uint16_t ir, red; sensor.update(); while (sensor.getRawValues( ir, red)) { Serial.print(ir); Serial.print('\\t'); Serial.println(red); } }","title":"Arduino IDE"},{"location":"tutorials/M5Stack/unit/heart/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND HEART Unit SCL SDA 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/heart/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/heart/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/heart/more-information/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND HEART Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/hex/description/","text":"DESCRIPTION HEX is a hexagona Neopixel panel. Total 37 Neopixels. With a input port and a output port, you can have mutiple of them in series connection. This how LEDs layout in the panel. Pay attention to the sequence in your code. Product Features Total LED: 37 Software development platform: Arduino,UIFlow(Blockly python) Two Lego-compatible holes Kit includes 1x HEX Unit 1x Grove Cable","title":"Description"},{"location":"tutorials/M5Stack/unit/hex/description/#description","text":"HEX is a hexagona Neopixel panel. Total 37 Neopixels. With a input port and a output port, you can have mutiple of them in series connection. This how LEDs layout in the panel. Pay attention to the sequence in your code.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/hex/description/#product-features","text":"Total LED: 37 Software development platform: Arduino,UIFlow(Blockly python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/hex/description/#kit-includes","text":"1x HEX Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/hex/documents/","text":"DOCUMENTS Neopixel Library on Arduino - FastLED Library FastLED Reference(Chinese version)","title":"Documents"},{"location":"tutorials/M5Stack/unit/hex/documents/#documents","text":"Neopixel Library on Arduino - FastLED Library FastLED Reference(Chinese version)","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/hex/learn/","text":"LEARN Example 1. Arduino IDE FastLED library on Arduino presents excellent and colorful lighting effects. Before compile, it is require to install the FastLED library and connect HEX to GROVE A. To get the complete code, please click here \u3002 /* Install FastLED library first.(HEX is connected to GROVE A) */ #include M5Stack.h #include FastLED.h #define Neopixel_PIN 21 #define NUM_LEDS 37 CRGB leds[NUM_LEDS]; uint8_t gHue = 0; void setup() { Serial.begin(115200); M5.begin(); M5.Lcd.clear(BLACK); M5.Lcd.setTextColor(YELLOW); M5.Lcd.setTextSize(2); M5.Lcd.setCursor(40, 0); M5.Lcd.println( HEX Example ); M5.Lcd.setTextColor(WHITE); M5.Lcd.setCursor(0, 25); M5.Lcd.println( Display rainbow effect ); // Neopixel initialization FastLED.addLeds WS2811,Neopixel_PIN,GRB / (leds, NUM_LEDS).setCorrection(TypicalLEDStrip); FastLED.setBrightness(10); } void loop(){ fill_rainbow( leds, NUM_LEDS, gHue, 7); FastLED.show();// must be executed for neopixel becoming effective EVERY_N_MILLISECONDS( 20 ) { gHue++; } } UIFlow To get the complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/hex/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/hex/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/hex/learn/#1-arduino-ide","text":"FastLED library on Arduino presents excellent and colorful lighting effects. Before compile, it is require to install the FastLED library and connect HEX to GROVE A. To get the complete code, please click here \u3002 /* Install FastLED library first.(HEX is connected to GROVE A) */ #include M5Stack.h #include FastLED.h #define Neopixel_PIN 21 #define NUM_LEDS 37 CRGB leds[NUM_LEDS]; uint8_t gHue = 0; void setup() { Serial.begin(115200); M5.begin(); M5.Lcd.clear(BLACK); M5.Lcd.setTextColor(YELLOW); M5.Lcd.setTextSize(2); M5.Lcd.setCursor(40, 0); M5.Lcd.println( HEX Example ); M5.Lcd.setTextColor(WHITE); M5.Lcd.setCursor(0, 25); M5.Lcd.println( Display rainbow effect ); // Neopixel initialization FastLED.addLeds WS2811,Neopixel_PIN,GRB / (leds, NUM_LEDS).setCorrection(TypicalLEDStrip); FastLED.setBrightness(10); } void loop(){ fill_rainbow( leds, NUM_LEDS, gHue, 7); FastLED.show();// must be executed for neopixel becoming effective EVERY_N_MILLISECONDS( 20 ) { gHue++; } }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/hex/learn/#uiflow","text":"To get the complete code, please click here .","title":"UIFlow"},{"location":"tutorials/M5Stack/unit/hex/more-information/","text":"MORE INFORMATION PinMap HEX connected to GROVE A M5Core(GROVE A) GPIO22 GPIO21 5V GND HEX Unit / HEX Pin 5V GND HEX connected to GROVE B M5Core(GROVE B) GPIO36 GPIO26 5V GND HEX Unit / HEX Pin 5V GND HEX connected to GROVE C M5Core(GROVE C) GPIO16 GPIO17 5V GND HEX Unit / HEX Pin 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/hex/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/hex/more-information/#pinmap","text":"HEX connected to GROVE A M5Core(GROVE A) GPIO22 GPIO21 5V GND HEX Unit / HEX Pin 5V GND HEX connected to GROVE B M5Core(GROVE B) GPIO36 GPIO26 5V GND HEX Unit / HEX Pin 5V GND HEX connected to GROVE C M5Core(GROVE C) GPIO16 GPIO17 5V GND HEX Unit / HEX Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/hub/description/","text":"DESCRIPTION HUB is one of the six Units in M5GO, allowed buy separately. This Units is used for GROVE port expanding. Notice: HUB is just a pysical expander, if you are looking for software(standard protocol) expander like I2C, Single-bus, please check PaHUB or PbHUB . If you connectted two I2C slave devices onto HUB that share the same adress, you will have problem getting I2C data from both. Product Features GROVE Expander Two Lego-compatible holes Kit includes 1x HUB Unit 1x Grove Cable","title":"Description"},{"location":"tutorials/M5Stack/unit/hub/description/#description","text":"HUB is one of the six Units in M5GO, allowed buy separately. This Units is used for GROVE port expanding. Notice: HUB is just a pysical expander, if you are looking for software(standard protocol) expander like I2C, Single-bus, please check PaHUB or PbHUB . If you connectted two I2C slave devices onto HUB that share the same adress, you will have problem getting I2C data from both.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/hub/description/#product-features","text":"GROVE Expander Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/hub/description/#kit-includes","text":"1x HUB Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/hub/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/unit/hub/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/hub/learn/","text":"LEARN","title":"Learn"},{"location":"tutorials/M5Stack/unit/hub/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/hub/more-information/","text":"MORE INFORMATION Schematic","title":"More information"},{"location":"tutorials/M5Stack/unit/hub/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/hub/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/ir/description/","text":"DESCRIPTION IR is an pair of infrared photoelectric. Also from M5Go Kit, Contains 1x infrared emitter and 1x receiver. IR remote control is widely used in consumer electronics,it can be used to operate devices such as a television set, DVD player, or other home appliance, from a short distance. Since this unit comes with emitter and receiver, you can practice not only onIR encode but also on IR decode. Product Features 1x infrared emitter 1x infrared receiver Distance range: 5m Software Development Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes Kit includes 1x IR Unit 1x Grove Cable","title":"Description"},{"location":"tutorials/M5Stack/unit/ir/description/#description","text":"IR is an pair of infrared photoelectric. Also from M5Go Kit, Contains 1x infrared emitter and 1x receiver. IR remote control is widely used in consumer electronics,it can be used to operate devices such as a television set, DVD player, or other home appliance, from a short distance. Since this unit comes with emitter and receiver, you can practice not only onIR encode but also on IR decode.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/ir/description/#product-features","text":"1x infrared emitter 1x infrared receiver Distance range: 5m Software Development Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/ir/description/#kit-includes","text":"1x IR Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/ir/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/unit/ir/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/ir/learn/","text":"LEARN Example 1. Arduino IDE The code below is incomplete. TO get the complete code, please click here . #include M5Stack.h // declaration int cur_recv_value = 0; // initialization M5.begin(); pinMode(ir_recv_pin, INPUT);// receiver pin pinMode(ir_send_pin, OUTPUT);// transmitter pin digitalWrite(ir_send_pin, 1);// send infrared light // read data cur_recv_value = digitalRead(ir_recv_pin);// read the status of receiver 2. UIFlow To get the complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/ir/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/ir/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/ir/learn/#1-arduino-ide","text":"The code below is incomplete. TO get the complete code, please click here . #include M5Stack.h // declaration int cur_recv_value = 0; // initialization M5.begin(); pinMode(ir_recv_pin, INPUT);// receiver pin pinMode(ir_send_pin, OUTPUT);// transmitter pin digitalWrite(ir_send_pin, 1);// send infrared light // read data cur_recv_value = digitalRead(ir_recv_pin);// read the status of receiver","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/ir/learn/#2-uiflow","text":"To get the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/ir/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core(GROVE B) GPIO36 GPIO26 5V GND IR Unit Receiver Pin Transmitter Pin 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/ir/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/ir/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/ir/more-information/#pinmap","text":"M5Core(GROVE B) GPIO36 GPIO26 5V GND IR Unit Receiver Pin Transmitter Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/joystick/description/","text":"DESCRIPTION JOYSTICK , we have two types of JOYSTICKs one is build on a panle compatible with FACES Kit, this is the M5Unit version of JOYSTICK JOYSTICK is very similar to the 'analog' joystick on PS2 (PlayStation 2) controllers. The X and Y axes are two 10k potentiometers which control 2D movement by generating analog signals. The joystick also has a push button that could be used for special applications. Therefore, the entire Unit can output X-Y motion signals in both directions and Z direction. As designed in the schematic, the Joystick X dimension is connected to pin A0 of MEGA328, the Joystick Y dimension is connected to pin A1 on MEGA328, the Joystick Z dimension is connected to pin A2 on MEGA328. This Unit communicates with the M5Core via the GROVE A interface. It's I2C address is 0x52. By reading the data transferred from JOSTICK, you can obtain the motion information of JOYSTICK. Product Features Output value of X, Y direction: 10 ~ 250 Output value of Z direction is (0: released; 1: pressed) Software Development Platform : Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes Kit includes 1x JOYSTICK Unit 1x Grove Cable Application Game Controller Robot remote control","title":"Description"},{"location":"tutorials/M5Stack/unit/joystick/description/#description","text":"JOYSTICK , we have two types of JOYSTICKs one is build on a panle compatible with FACES Kit, this is the M5Unit version of JOYSTICK JOYSTICK is very similar to the 'analog' joystick on PS2 (PlayStation 2) controllers. The X and Y axes are two 10k potentiometers which control 2D movement by generating analog signals. The joystick also has a push button that could be used for special applications. Therefore, the entire Unit can output X-Y motion signals in both directions and Z direction. As designed in the schematic, the Joystick X dimension is connected to pin A0 of MEGA328, the Joystick Y dimension is connected to pin A1 on MEGA328, the Joystick Z dimension is connected to pin A2 on MEGA328. This Unit communicates with the M5Core via the GROVE A interface. It's I2C address is 0x52. By reading the data transferred from JOSTICK, you can obtain the motion information of JOYSTICK.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/joystick/description/#product-features","text":"Output value of X, Y direction: 10 ~ 250 Output value of Z direction is (0: released; 1: pressed) Software Development Platform : Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/joystick/description/#kit-includes","text":"1x JOYSTICK Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/joystick/description/#application","text":"Game Controller Robot remote control","title":"Application"},{"location":"tutorials/M5Stack/unit/joystick/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/unit/joystick/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/joystick/learn/","text":"LEARN Example 1. Arduino IDE The code below is incomplete(just for usage). To get complete code, please click here . #include M5Stack.h #include Wire.h #define JOY_ADDR 0x52 // declaration uint8_t x_data, y_data, button_data; char data[100]; // initialization M5.begin(); M5.Lcd.clear(); dacWrite(25, 0);//disable the speak noise Wire.begin(21, 22, 400000); // read data Wire.requestFrom(JOY_ADDR, 3); if (Wire.available()) { x_data = Wire.read();// X(range: 10~250) y_data = Wire.read();// Y(range: 10~250) button_data = Wire.read();// Z(0: released 1: pressed) sprintf(data, x:%d y:%d button:%d\\n , x_data, y_data, button_data); } 2. UIFlow To get complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/joystick/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/joystick/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/joystick/learn/#1-arduino-ide","text":"The code below is incomplete(just for usage). To get complete code, please click here . #include M5Stack.h #include Wire.h #define JOY_ADDR 0x52 // declaration uint8_t x_data, y_data, button_data; char data[100]; // initialization M5.begin(); M5.Lcd.clear(); dacWrite(25, 0);//disable the speak noise Wire.begin(21, 22, 400000); // read data Wire.requestFrom(JOY_ADDR, 3); if (Wire.available()) { x_data = Wire.read();// X(range: 10~250) y_data = Wire.read();// Y(range: 10~250) button_data = Wire.read();// Z(0: released 1: pressed) sprintf(data, x:%d y:%d button:%d\\n , x_data, y_data, button_data); }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/joystick/learn/#2-uiflow","text":"To get complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/joystick/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND JOYSTICK Unit SCL SDA 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/joystick/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/joystick/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/joystick/more-information/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND JOYSTICK Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/light/description/","text":"DESCRIPTION LIGHT is a light intensity sensor unit with an adjustable photoresistor\u3002 A photoresistor is a light-controlled variable resistor. The resistance of a photoresistor decreases with increasing incident light intensity, and vice versa. It exhibits photoconductivity which make it possiable to detect the varies based on Voltage, and use a AD to convert the digital data. We add some extra work to strengthen the circult, a Dual Differential Comparators LM393 , compares the differntial voltage between the photoresistor and the varistor. It could offer larger and accuracy range of light intensity. Product Features 10K adjustable resistor Software Development Platform: Arduino, UIFlow(Blocky,Python) Two Lego-compatible holes Kit includes 1x LIGHT Unit 1x Grove Cable","title":"Description"},{"location":"tutorials/M5Stack/unit/light/description/#description","text":"LIGHT is a light intensity sensor unit with an adjustable photoresistor\u3002 A photoresistor is a light-controlled variable resistor. The resistance of a photoresistor decreases with increasing incident light intensity, and vice versa. It exhibits photoconductivity which make it possiable to detect the varies based on Voltage, and use a AD to convert the digital data. We add some extra work to strengthen the circult, a Dual Differential Comparators LM393 , compares the differntial voltage between the photoresistor and the varistor. It could offer larger and accuracy range of light intensity.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/light/description/#product-features","text":"10K adjustable resistor Software Development Platform: Arduino, UIFlow(Blocky,Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/light/description/#kit-includes","text":"1x LIGHT Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/light/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/unit/light/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/light/learn/","text":"LEARN Example 1. Arduino IDE The code below is incomplete. To complete code, please click here . #include M5Stack.h // declaration uint16_t analogRead_value = 0; uint16_t digitalRead_value = 0; // initialization M5.begin(); dacWrite(25, 0);// disable the speak noise pinMode(26, INPUT);// LIGHT Pin setting // read data analogRead_value = analogRead(36);// read analog value of LIGHT digitalRead_value = digitalRead(26); 2. UIFlow To get complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/light/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/light/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/light/learn/#1-arduino-ide","text":"The code below is incomplete. To complete code, please click here . #include M5Stack.h // declaration uint16_t analogRead_value = 0; uint16_t digitalRead_value = 0; // initialization M5.begin(); dacWrite(25, 0);// disable the speak noise pinMode(26, INPUT);// LIGHT Pin setting // read data analogRead_value = analogRead(36);// read analog value of LIGHT digitalRead_value = digitalRead(26);","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/light/learn/#2-uiflow","text":"To get complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/light/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core(GROVE B) GPIO36 GPIO26 5V GND LIGHT Unit AnalogSignal Pin DigitalSignal Pin 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/light/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/light/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/light/more-information/#pinmap","text":"M5Core(GROVE B) GPIO36 GPIO26 5V GND LIGHT Unit AnalogSignal Pin DigitalSignal Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/m5camera/description/","text":"DESCRIPTION M5Camera is a development board for image recognition. It features an ESP32(4M Flash + 520K RAM + 4M psram) chip and 2-Megapixel carmera(OV2640). M5Camera offers plenty of storage, with an extra 4 Mbyte PSRAM. It also supports image transmission via Wi-Fi and debuging through USB Type-C port. The hardware comes preloaded software, programmed by ESP-IDF. It is an application to run Wi-Fi camera. The output image is size 600*800, since it's 2-Maga camera, you sure can optimize the software to output the maximum size of photos. what this software can do? - Power the board via USB type-C or GROVE - Use your phone to Wi-Fi scan an AP name start with 'm5stack-' and click to connect this AP. - Open up web browser on your phone and visit 192.168.4.1 - Then here comes the picture. Video is about 5-6 frames per senconds. not super fast. The hardware also comes with some reserved weld pad, just in case you want put these chips back on board. - 9-axis gyroscope (MPU6050) - pressure sensor (BMP280) - Analog MIC (SPQ2410) - Battery socket Please notice: There are 2 types of M5Camera - Model A Model B - They have different circults, can be identified by backside sticker - Model A is halt production. The new coming M5Camera is just Model B - In Model A circult design MPU6050 and camera sensor have I2C conflict, which means you can't use both at the same time. - Model B have better performance on image quality and processing speed. Product Features ESP32 specifications Dual-core Tensilica LX6 microprocessor Up to 240MHz clock frequency 4MB PSRAM 4MB Flash memory Integrated 802.11 BGN WiFi transceiver Integrated dual-mode Bluetooth (classic and BLE) Hardware accelerated encryption (AES, SHA2, ECC, RSA-4096) CP2104 USB-to-TTL converter OV2640 sensor Output Formats(8-bit): YUV(422/420)/YCbCr422 RGB565/555 8-bit compressed data 8-/10-bit Raw RGB data Maximum Image Transfer Rate according to specific format UXGA/SXGA: 15fps SVGA: 30fps CIF: 60fps Scan Mode: Progressive Camera specifications CCD size : 1/4 inch Field of View : 65 degree Maxmium Pixel: 2M Sensor best resolution: 1600 * 1200 Dimension: 40 \u00d7 49 \u00d7 13mm Kit includes 1x M5Camera 1x Type-C USB Cable","title":"Description"},{"location":"tutorials/M5Stack/unit/m5camera/description/#description","text":"M5Camera is a development board for image recognition. It features an ESP32(4M Flash + 520K RAM + 4M psram) chip and 2-Megapixel carmera(OV2640). M5Camera offers plenty of storage, with an extra 4 Mbyte PSRAM. It also supports image transmission via Wi-Fi and debuging through USB Type-C port. The hardware comes preloaded software, programmed by ESP-IDF. It is an application to run Wi-Fi camera. The output image is size 600*800, since it's 2-Maga camera, you sure can optimize the software to output the maximum size of photos. what this software can do? - Power the board via USB type-C or GROVE - Use your phone to Wi-Fi scan an AP name start with 'm5stack-' and click to connect this AP. - Open up web browser on your phone and visit 192.168.4.1 - Then here comes the picture. Video is about 5-6 frames per senconds. not super fast. The hardware also comes with some reserved weld pad, just in case you want put these chips back on board. - 9-axis gyroscope (MPU6050) - pressure sensor (BMP280) - Analog MIC (SPQ2410) - Battery socket Please notice: There are 2 types of M5Camera - Model A Model B - They have different circults, can be identified by backside sticker - Model A is halt production. The new coming M5Camera is just Model B - In Model A circult design MPU6050 and camera sensor have I2C conflict, which means you can't use both at the same time. - Model B have better performance on image quality and processing speed.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/m5camera/description/#product-features","text":"ESP32 specifications Dual-core Tensilica LX6 microprocessor Up to 240MHz clock frequency 4MB PSRAM 4MB Flash memory Integrated 802.11 BGN WiFi transceiver Integrated dual-mode Bluetooth (classic and BLE) Hardware accelerated encryption (AES, SHA2, ECC, RSA-4096) CP2104 USB-to-TTL converter OV2640 sensor Output Formats(8-bit): YUV(422/420)/YCbCr422 RGB565/555 8-bit compressed data 8-/10-bit Raw RGB data Maximum Image Transfer Rate according to specific format UXGA/SXGA: 15fps SVGA: 30fps CIF: 60fps Scan Mode: Progressive Camera specifications CCD size : 1/4 inch Field of View : 65 degree Maxmium Pixel: 2M Sensor best resolution: 1600 * 1200 Dimension: 40 \u00d7 49 \u00d7 13mm","title":"Product Features"},{"location":"tutorials/M5Stack/unit/m5camera/description/#kit-includes","text":"1x M5Camera 1x Type-C USB Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/m5camera/documents/","text":"DOCUMENTS Datasheet - ESP32 - OV2640","title":"Documents"},{"location":"tutorials/M5Stack/unit/m5camera/documents/#documents","text":"Datasheet - ESP32 - OV2640","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/m5camera/learn/","text":"LEARN Preloaded Software M5Camera(A model) Firmware: https://github.com/m5stack/m5stack-cam-psram/tree/master M5Camera(B model) Firmware: https://github.com/m5stack/m5stack-cam-psram/tree/master Example Color recognition Face recognition","title":"Learn"},{"location":"tutorials/M5Stack/unit/m5camera/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/m5camera/learn/#preloaded-software","text":"M5Camera(A model) Firmware: https://github.com/m5stack/m5stack-cam-psram/tree/master M5Camera(B model) Firmware: https://github.com/m5stack/m5stack-cam-psram/tree/master","title":"Preloaded Software"},{"location":"tutorials/M5Stack/unit/m5camera/learn/#example","text":"Color recognition Face recognition","title":"Example"},{"location":"tutorials/M5Stack/unit/m5camera/more-information/","text":"MORE INFORMATION PinMap There are two versions of M5Camera Unit: A Model and B Model. Camera Interface PinMap Interface Camera Pin M5Camera(A model) M5Camera(B model) SCCB Clock SIOC IO23 IO23 SCCB Data SIOD IO25 IO22 System Clock XCLK IO27 IO27 Vertical Sync VSYNC IO22 IO25 Horizontal Reference HREF IO26 IO26 Pixel Clock PCLK IO21 IO21 Pixel Data Bit 0 D2 IO32 IO32 Pixel Data Bit 1 D3 IO35 IO35 Pixel Data Bit 2 D4 IO34 IO34 Pixel Data Bit 3 D5 IO5 IO5 Pixel Data Bit 4 D6 IO39 IO39 Pixel Data Bit 5 D7 IO18 IO18 Pixel Data Bit 6 D8 IO36 IO36 Pixel Data Bit 7 D9 IO19 IO19 Camera Reset RESET IO15 IO15 Camera Power Down PWDN see Note 1 see Note 1 Power Supply 3.3V 3V3 3V3 3V3 Ground GND GND GND GROVE Interface Grove M5Camera(A model) M5Camera(B model) SCL IO13 IO13 SDA IO12 IO4 5V 5V 5V GND GND GND LED Interface LED M5Camera(A model) M5Camera(B model) LED_Pin IO14 IO14 The following tables are Reserved Chip Interfaces BME280 Interface It's IIC address is 0x76. BME280 M5Camera(A model) M5Camera(B model) SCL IO23 IO23 SDA IO22 IO22 MPU6050 Interface It's IIC address is 0x68. MPU6050 M5Camera(A model) M5Camera(B model) SCL IO23 IO23 SDA IO22 IO22 MIC(SPM1423) Interface MIC(SPM1423) M5Camera(A model) M5Camera(B model) SCL IO2 IO2 SDA IO4 IO4 NOTE: We have several patterns of camera board, the following figures shows the main difference view click here . download click here . Schematic Power circuit Chip peripheral circuit USB to serial port part of the circuit","title":"More information"},{"location":"tutorials/M5Stack/unit/m5camera/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/m5camera/more-information/#pinmap","text":"There are two versions of M5Camera Unit: A Model and B Model. Camera Interface PinMap Interface Camera Pin M5Camera(A model) M5Camera(B model) SCCB Clock SIOC IO23 IO23 SCCB Data SIOD IO25 IO22 System Clock XCLK IO27 IO27 Vertical Sync VSYNC IO22 IO25 Horizontal Reference HREF IO26 IO26 Pixel Clock PCLK IO21 IO21 Pixel Data Bit 0 D2 IO32 IO32 Pixel Data Bit 1 D3 IO35 IO35 Pixel Data Bit 2 D4 IO34 IO34 Pixel Data Bit 3 D5 IO5 IO5 Pixel Data Bit 4 D6 IO39 IO39 Pixel Data Bit 5 D7 IO18 IO18 Pixel Data Bit 6 D8 IO36 IO36 Pixel Data Bit 7 D9 IO19 IO19 Camera Reset RESET IO15 IO15 Camera Power Down PWDN see Note 1 see Note 1 Power Supply 3.3V 3V3 3V3 3V3 Ground GND GND GND GROVE Interface Grove M5Camera(A model) M5Camera(B model) SCL IO13 IO13 SDA IO12 IO4 5V 5V 5V GND GND GND LED Interface LED M5Camera(A model) M5Camera(B model) LED_Pin IO14 IO14 The following tables are Reserved Chip Interfaces BME280 Interface It's IIC address is 0x76. BME280 M5Camera(A model) M5Camera(B model) SCL IO23 IO23 SDA IO22 IO22 MPU6050 Interface It's IIC address is 0x68. MPU6050 M5Camera(A model) M5Camera(B model) SCL IO23 IO23 SDA IO22 IO22 MIC(SPM1423) Interface MIC(SPM1423) M5Camera(A model) M5Camera(B model) SCL IO2 IO2 SDA IO4 IO4 NOTE: We have several patterns of camera board, the following figures shows the main difference view click here . download click here .","title":"PinMap"},{"location":"tutorials/M5Stack/unit/m5camera/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/m5camera/more-information/#power-circuit","text":"","title":"Power circuit"},{"location":"tutorials/M5Stack/unit/m5camera/more-information/#chip-peripheral-circuit","text":"","title":"Chip peripheral circuit"},{"location":"tutorials/M5Stack/unit/m5camera/more-information/#usb-to-serial-port-part-of-the-circuit","text":"","title":"USB to serial port part of the circuit"},{"location":"tutorials/M5Stack/unit/m5camera_f/description/","text":"DESCRIPTION M5CameraF is a development board for image recognition. It features an ESP32(4M Flash + 520K RAM + 4M psram) chip and 2-Megapixel carmera(OV2640). M5Camera offers plenty of storage, with an extra 4 Mbyte PSRAM. It also supports image transmission via Wi-Fi and debuging through USB Type-C port. The hardware comes preloaded software, programmed by ESP-IDF. It is an application to run Wi-Fi camera. The output image is size 600*800, since it's 2-Maga camera, you sure can optimize the software to output the maximum size of photos. what this software can do? - Power the board via USB type-C or GROVE - Use your phone to Wi-Fi scan an AP name start with 'm5stack-' and click to connect this AP. - Open up web browser on your phone and visit 192.168.4.1 - Then here comes the picture. Video is about 5-6 frames per senconds. not super fast. The hardware also comes with some reserved weld pad, just in case you want put these chips back on board. - 9-axis gyroscope (MPU6050) - pressure sensor (BMP280) - Digital silicon microphone (SPM1423) - Battery socket Product Features ESP32 specifications Dual-core Tensilica LX6 microprocessor Up to 240MHz clock frequency 4MB PSRAM 4MB Flash memory Integrated 802.11 BGN WiFi transceiver Integrated dual-mode Bluetooth (classic and BLE) Hardware accelerated encryption (AES, SHA2, ECC, RSA-4096) CP2104 USB-to-TTL converter OV2640 sensor Output Formats(8-bit): YUV(422/420)/YCbCr422 RGB565/555 8-bit compressed data 8-/10-bit Raw RGB data Maximum Image Transfer Rate according to specific format UXGA/SXGA: 15fps SVGA: 30fps CIF: 60fps Scan Mode: Progressive Camera specifications Field of View : 160 degree Maxmium Pixel: 2M Sensor best resolution: 1600 * 1200 Size\uff1a23.5 \u00d7 48 \u00d7 23.5mm Kit includes 1x M5CameraF 1x LEGO Adapter 1x Wall/1515 1x Type-C USB Cable","title":"Description"},{"location":"tutorials/M5Stack/unit/m5camera_f/description/#description","text":"M5CameraF is a development board for image recognition. It features an ESP32(4M Flash + 520K RAM + 4M psram) chip and 2-Megapixel carmera(OV2640). M5Camera offers plenty of storage, with an extra 4 Mbyte PSRAM. It also supports image transmission via Wi-Fi and debuging through USB Type-C port. The hardware comes preloaded software, programmed by ESP-IDF. It is an application to run Wi-Fi camera. The output image is size 600*800, since it's 2-Maga camera, you sure can optimize the software to output the maximum size of photos. what this software can do? - Power the board via USB type-C or GROVE - Use your phone to Wi-Fi scan an AP name start with 'm5stack-' and click to connect this AP. - Open up web browser on your phone and visit 192.168.4.1 - Then here comes the picture. Video is about 5-6 frames per senconds. not super fast. The hardware also comes with some reserved weld pad, just in case you want put these chips back on board. - 9-axis gyroscope (MPU6050) - pressure sensor (BMP280) - Digital silicon microphone (SPM1423) - Battery socket","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/m5camera_f/description/#product-features","text":"ESP32 specifications Dual-core Tensilica LX6 microprocessor Up to 240MHz clock frequency 4MB PSRAM 4MB Flash memory Integrated 802.11 BGN WiFi transceiver Integrated dual-mode Bluetooth (classic and BLE) Hardware accelerated encryption (AES, SHA2, ECC, RSA-4096) CP2104 USB-to-TTL converter OV2640 sensor Output Formats(8-bit): YUV(422/420)/YCbCr422 RGB565/555 8-bit compressed data 8-/10-bit Raw RGB data Maximum Image Transfer Rate according to specific format UXGA/SXGA: 15fps SVGA: 30fps CIF: 60fps Scan Mode: Progressive Camera specifications Field of View : 160 degree Maxmium Pixel: 2M Sensor best resolution: 1600 * 1200 Size\uff1a23.5 \u00d7 48 \u00d7 23.5mm","title":"Product Features"},{"location":"tutorials/M5Stack/unit/m5camera_f/description/#kit-includes","text":"1x M5CameraF 1x LEGO Adapter 1x Wall/1515 1x Type-C USB Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/m5camera_f/documents/","text":"DOCUMENTS Datasheet - ESP32 - OV2640","title":"Documents"},{"location":"tutorials/M5Stack/unit/m5camera_f/documents/#documents","text":"Datasheet - ESP32 - OV2640","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/m5camera_f/learn/","text":"LEARN Preloaded Sofeware https://github.com/m5stack/m5stack-cam-psram/tree/master","title":"Learn"},{"location":"tutorials/M5Stack/unit/m5camera_f/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/m5camera_f/learn/#preloaded-sofeware","text":"https://github.com/m5stack/m5stack-cam-psram/tree/master","title":"Preloaded Sofeware"},{"location":"tutorials/M5Stack/unit/m5camera_f/more-information/","text":"MORE INFORMATION PinMap Camera Interface PinMap Interface Camera Pin M5CameraF SCCB Clock SIOC IO23 SCCB Data SIOD IO22 System Clock XCLK IO27 Vertical Sync VSYNC IO25 Horizontal Reference HREF IO26 Pixel Clock PCLK IO21 Pixel Data Bit 0 D2 IO32 Pixel Data Bit 1 D3 IO35 Pixel Data Bit 2 D4 IO34 Pixel Data Bit 3 D5 IO5 Pixel Data Bit 4 D6 IO39 Pixel Data Bit 5 D7 IO18 Pixel Data Bit 6 D8 IO36 Pixel Data Bit 7 D9 IO19 Camera Reset RESET IO15 Camera Power Down PWDN see Note 1 Power Supply 3.3V 3V3 3V3 Ground GND GND GROVE Interface Grove M5CameraF SCL IO13 SDA IO4 5V 5V GND GND LED Interface LED M5CameraF LED_Pin IO14 The following tables are Reserved Chip Interfaces BME280 Interface It's IIC address is 0x76. BME280 M5CameraF SCL IO23 SDA IO22 MPU6050 Interface It's IIC address is 0x68. MPU6050 M5CameraF SCL IO23 SDA IO22 MIC(SPM1423) Interface MIC(SPM1423) M5CameraF CLK IO4 DATA IO2 NOTE: We have several patterns of camera board, the following figures shows the main difference view click here . download click here . Schematic Power circuit Chip peripheral circuit USB to serial port part of the circuit","title":"More information"},{"location":"tutorials/M5Stack/unit/m5camera_f/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/m5camera_f/more-information/#pinmap","text":"Camera Interface PinMap Interface Camera Pin M5CameraF SCCB Clock SIOC IO23 SCCB Data SIOD IO22 System Clock XCLK IO27 Vertical Sync VSYNC IO25 Horizontal Reference HREF IO26 Pixel Clock PCLK IO21 Pixel Data Bit 0 D2 IO32 Pixel Data Bit 1 D3 IO35 Pixel Data Bit 2 D4 IO34 Pixel Data Bit 3 D5 IO5 Pixel Data Bit 4 D6 IO39 Pixel Data Bit 5 D7 IO18 Pixel Data Bit 6 D8 IO36 Pixel Data Bit 7 D9 IO19 Camera Reset RESET IO15 Camera Power Down PWDN see Note 1 Power Supply 3.3V 3V3 3V3 Ground GND GND GROVE Interface Grove M5CameraF SCL IO13 SDA IO4 5V 5V GND GND LED Interface LED M5CameraF LED_Pin IO14 The following tables are Reserved Chip Interfaces BME280 Interface It's IIC address is 0x76. BME280 M5CameraF SCL IO23 SDA IO22 MPU6050 Interface It's IIC address is 0x68. MPU6050 M5CameraF SCL IO23 SDA IO22 MIC(SPM1423) Interface MIC(SPM1423) M5CameraF CLK IO4 DATA IO2 NOTE: We have several patterns of camera board, the following figures shows the main difference view click here . download click here .","title":"PinMap"},{"location":"tutorials/M5Stack/unit/m5camera_f/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/m5camera_f/more-information/#power-circuit","text":"","title":"Power circuit"},{"location":"tutorials/M5Stack/unit/m5camera_f/more-information/#chip-peripheral-circuit","text":"","title":"Chip peripheral circuit"},{"location":"tutorials/M5Stack/unit/m5camera_f/more-information/#usb-to-serial-port-part-of-the-circuit","text":"","title":"USB to serial port part of the circuit"},{"location":"tutorials/M5Stack/unit/makey/description/","text":"DESCRIPTION MAKEY Unit is inspired by an Invention kit called Makey Makey which brings the concept that users can connect everyday objects to computer programs. Using a circuit board, alligator clips, and a USB cable, the circult uses closed loop electrical signals to send the microprocessor either a keyboard stroke or mouse click signal. We've tried connect a bounch of fruits, one for each key,to this Unit. When you touch the apple, you make a connection, and MaKey sends the processor a keyboard message. The buzzer inside or speaker on M5core will exhibit the key value, so instead of using a keyboard, you can make a fruit piano. This Unit communicates with the M5Core via the GROVE A I2C(0x51). Product Features Arduino Mega328p Controller Buzzer inside Up to 16 keys Software Development Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes Kit includes 1x MAKEY unit 1x GROVE Cable Application Fruit piano","title":"Description"},{"location":"tutorials/M5Stack/unit/makey/description/#description","text":"MAKEY Unit is inspired by an Invention kit called Makey Makey which brings the concept that users can connect everyday objects to computer programs. Using a circuit board, alligator clips, and a USB cable, the circult uses closed loop electrical signals to send the microprocessor either a keyboard stroke or mouse click signal. We've tried connect a bounch of fruits, one for each key,to this Unit. When you touch the apple, you make a connection, and MaKey sends the processor a keyboard message. The buzzer inside or speaker on M5core will exhibit the key value, so instead of using a keyboard, you can make a fruit piano. This Unit communicates with the M5Core via the GROVE A I2C(0x51).","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/makey/description/#product-features","text":"Arduino Mega328p Controller Buzzer inside Up to 16 keys Software Development Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/makey/description/#kit-includes","text":"1x MAKEY unit 1x GROVE Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/makey/description/#application","text":"Fruit piano","title":"Application"},{"location":"tutorials/M5Stack/unit/makey/documents/","text":"DOCUMENTS Maykey Firmware","title":"Documents"},{"location":"tutorials/M5Stack/unit/makey/documents/#documents","text":"Maykey Firmware","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/makey/learn/","text":"LEARN Example 1. Arduino IDE The code below is incomplete. To get complete code, please click here . #include M5Stack.h #include Wire.h // initialization M5.begin(); pinMode(21, INPUT); pinMode(22, INPUT); Wire.begin();// Init I2C // read data Wire.requestFrom(MAKEY_ADDR, 2); while (Wire.available()) { Key1 = Wire.read();//read data from MAKEY Key2 = Wire.read();//read data from MAKEY tone_key = (Key2 8) | Key1;// the following picture will explain tone_key } 2. UIFlow TO get complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/makey/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/makey/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/makey/learn/#1-arduino-ide","text":"The code below is incomplete. To get complete code, please click here . #include M5Stack.h #include Wire.h // initialization M5.begin(); pinMode(21, INPUT); pinMode(22, INPUT); Wire.begin();// Init I2C // read data Wire.requestFrom(MAKEY_ADDR, 2); while (Wire.available()) { Key1 = Wire.read();//read data from MAKEY Key2 = Wire.read();//read data from MAKEY tone_key = (Key2 8) | Key1;// the following picture will explain tone_key }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/makey/learn/#2-uiflow","text":"TO get complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/makey/more-information/","text":"MORE INFORMATION Instructions 1\uff09Use the buzzer on the unit to exhibit sounds: Take a Dupont wire(male to male), one end plug into GND, hold the other end to your hand. Take another Dupont wire(male to male), one end plug into different key holes, the other end hold by the other hand. Make it a close circult. Plug into different key tones the buzzer will emit the corresponding tones. 2\uff09Use the speaker on the M5core to exhibit sounds: Connct MAKEY with M5Core via Grove A Download this example . Repeat the same operation as above. you will see this sound much better. Schematic PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND MAKEY Unit SCL SDA 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/makey/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/makey/more-information/#instructions","text":"1\uff09Use the buzzer on the unit to exhibit sounds: Take a Dupont wire(male to male), one end plug into GND, hold the other end to your hand. Take another Dupont wire(male to male), one end plug into different key holes, the other end hold by the other hand. Make it a close circult. Plug into different key tones the buzzer will emit the corresponding tones. 2\uff09Use the speaker on the M5core to exhibit sounds: Connct MAKEY with M5Core via Grove A Download this example . Repeat the same operation as above. you will see this sound much better.","title":"Instructions"},{"location":"tutorials/M5Stack/unit/makey/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/makey/more-information/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND MAKEY Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/ncir/description/","text":"DESCRIPTION NCIR featured with built-in infrared sensor MLX90614 . It can be used to measure the surface temperature of a human body or other object. Unlike most temperature sensors, this sensor measures infrared light bouncing off of remote objects so it can sense temperature without having to touch them physically. Simply point the sensor towards what you want to measure and it will detect the temperature by absorbing IR waves emitted. Because it doesn't have to touch the object it's measuring, it can sense a wider range of temperatures than most digital sensors: from -70\u00b0C to +380\u00b0C! It takes the measurement over an 90-degree field of view so it can be handy for determining the average temperature of an area. Connect with M5Core via GROVE A IIC(0x5A). Product Features Operating voltage: 4.5 to 5.5V Measuring temperature range: -70\u00b0C ~ 382.2\u00b0C Measurement accuracy at room temperature: \u00b10.5\u00b0C Field of view: 90\u00b0 Sofrware Development Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes Kit includes 1x NCIR Unit 1x Grove Cable Application Body Temperature Measurement Object (biological) Motion Detection","title":"Description"},{"location":"tutorials/M5Stack/unit/ncir/description/#description","text":"NCIR featured with built-in infrared sensor MLX90614 . It can be used to measure the surface temperature of a human body or other object. Unlike most temperature sensors, this sensor measures infrared light bouncing off of remote objects so it can sense temperature without having to touch them physically. Simply point the sensor towards what you want to measure and it will detect the temperature by absorbing IR waves emitted. Because it doesn't have to touch the object it's measuring, it can sense a wider range of temperatures than most digital sensors: from -70\u00b0C to +380\u00b0C! It takes the measurement over an 90-degree field of view so it can be handy for determining the average temperature of an area. Connect with M5Core via GROVE A IIC(0x5A).","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/ncir/description/#product-features","text":"Operating voltage: 4.5 to 5.5V Measuring temperature range: -70\u00b0C ~ 382.2\u00b0C Measurement accuracy at room temperature: \u00b10.5\u00b0C Field of view: 90\u00b0 Sofrware Development Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/ncir/description/#kit-includes","text":"1x NCIR Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/ncir/description/#application","text":"Body Temperature Measurement Object (biological) Motion Detection","title":"Application"},{"location":"tutorials/M5Stack/unit/ncir/documents/","text":"DOCUMENTS Datasheet - MLX90614","title":"Documents"},{"location":"tutorials/M5Stack/unit/ncir/documents/#documents","text":"Datasheet - MLX90614","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/ncir/learn/","text":"LEARN Example 1. Arduino IDE The code below is incomplete. TO get complete code, please click here . #include M5Stack.h #include Wire.h #define NCIR_ADDR 0x5A // declaration uint16_t result; float temperature; // initialization Wire.begin();\\ M5.begin(); // read data Wire.beginTransmission(NCIR_ADDR);Wire.write(0x07);Wire.endTransmission(false); Wire.requestFrom(NCIR_ADDR, 2); result = Wire.read();// Receive DATA result |= Wire.read() 8;// Receive DATA // store temperature value temperature = result * 0.02 - 273.15; 2. UIFlow TO get complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/ncir/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/ncir/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/ncir/learn/#1-arduino-ide","text":"The code below is incomplete. TO get complete code, please click here . #include M5Stack.h #include Wire.h #define NCIR_ADDR 0x5A // declaration uint16_t result; float temperature; // initialization Wire.begin();\\ M5.begin(); // read data Wire.beginTransmission(NCIR_ADDR);Wire.write(0x07);Wire.endTransmission(false); Wire.requestFrom(NCIR_ADDR, 2); result = Wire.read();// Receive DATA result |= Wire.read() 8;// Receive DATA // store temperature value temperature = result * 0.02 - 273.15;","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/ncir/learn/#2-uiflow","text":"TO get complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/ncir/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core (GROVE A) GPIO22 GPIO21 5V GND NCIR Unit SCL SDA 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/ncir/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/ncir/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/ncir/more-information/#pinmap","text":"M5Core (GROVE A) GPIO22 GPIO21 5V GND NCIR Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/neoflash/description/","text":"DESCRIPTION NEOFLASH is a RGB LED panel with 192 RGB LED(24x8). When you program this Unit, please pay attention to the sequence of the Neopixels. From top left (Where PIR placed) to right, and top to bottom. Connect this unit with M5Core via GROVE PORTB Single-Bus. We put Magnet on the backside, which means you can attach this to any metal surface. When you plug the GROVE PORTA into M5core, you have convert it into 3 extended GROVE A laid on the side. Product Features Total Neopixel quantity: 192 PIR PORTA extension(up to 3) Software Development Platform: Arduino, UIFlow(Blockly, python) Two Lego-compatible holes Kit includes 1x NeoFlash Unit 1x Grove Cable","title":"Description"},{"location":"tutorials/M5Stack/unit/neoflash/description/#description","text":"NEOFLASH is a RGB LED panel with 192 RGB LED(24x8). When you program this Unit, please pay attention to the sequence of the Neopixels. From top left (Where PIR placed) to right, and top to bottom. Connect this unit with M5Core via GROVE PORTB Single-Bus. We put Magnet on the backside, which means you can attach this to any metal surface. When you plug the GROVE PORTA into M5core, you have convert it into 3 extended GROVE A laid on the side.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/neoflash/description/#product-features","text":"Total Neopixel quantity: 192 PIR PORTA extension(up to 3) Software Development Platform: Arduino, UIFlow(Blockly, python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/neoflash/description/#kit-includes","text":"1x NeoFlash Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/neoflash/documents/","text":"DOCUMENTS FastLED Library FastLED Reference(Chinese version)","title":"Documents"},{"location":"tutorials/M5Stack/unit/neoflash/documents/#documents","text":"FastLED Library FastLED Reference(Chinese version)","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/neoflash/learn/","text":"LEARN Example Arduino IDE This is a example exhibit real-time clock from the network and with PIR sensor you can add more tricks like light up when someone come close, off when nobody was around. To get complete code, please click here \u3002","title":"Learn"},{"location":"tutorials/M5Stack/unit/neoflash/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/neoflash/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/neoflash/learn/#arduino-ide","text":"This is a example exhibit real-time clock from the network and with PIR sensor you can add more tricks like light up when someone come close, off when nobody was around. To get complete code, please click here \u3002","title":"Arduino IDE"},{"location":"tutorials/M5Stack/unit/neoflash/more-information/","text":"MORE INFORMATION PinMap M5Core(GROVE B) GPIO36 GPIO26 5V GND NEOFLASH Unit PIR Pin RGB Pin 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/neoflash/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/neoflash/more-information/#pinmap","text":"M5Core(GROVE B) GPIO36 GPIO26 5V GND NEOFLASH Unit PIR Pin RGB Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/neopixel/description/","text":"DESCRIPTION NeoPixel is a extendable strip light with Neopixels lined on. Just in case you haven\u2019t heard about Neopixel yet, Neopixel features digitally addressable LEDs,which means each led can display RGB color and brightness individually. It is very easy to program by Single-BUS with simple protocol. Another feature is the extension and flexiblulity.You can even connect many of them up together to create a massive long LED display. It's important to note that, the brightness and the quantity of LEDs matters the most to the power consuming, if you have a bunch of them connectted up, you will need extra power supply. Notice: please pay attention to the direction of the input port and output port Product Features Alternative length: 10cm/20cm/0.5m/1m/2m Sofeware Development Platform: Arduino, UIFlow(Blockly,Python) extendable Kit includes 1x NeoPixel Unit 1x Grove Cable","title":"Description"},{"location":"tutorials/M5Stack/unit/neopixel/description/#description","text":"NeoPixel is a extendable strip light with Neopixels lined on. Just in case you haven\u2019t heard about Neopixel yet, Neopixel features digitally addressable LEDs,which means each led can display RGB color and brightness individually. It is very easy to program by Single-BUS with simple protocol. Another feature is the extension and flexiblulity.You can even connect many of them up together to create a massive long LED display. It's important to note that, the brightness and the quantity of LEDs matters the most to the power consuming, if you have a bunch of them connectted up, you will need extra power supply. Notice: please pay attention to the direction of the input port and output port","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/neopixel/description/#product-features","text":"Alternative length: 10cm/20cm/0.5m/1m/2m Sofeware Development Platform: Arduino, UIFlow(Blockly,Python) extendable","title":"Product Features"},{"location":"tutorials/M5Stack/unit/neopixel/description/#kit-includes","text":"1x NeoPixel Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/neopixel/documents/","text":"DOCUMENTS FastLED Library FastLED Reference(Chinese version)","title":"Documents"},{"location":"tutorials/M5Stack/unit/neopixel/documents/#documents","text":"FastLED Library FastLED Reference(Chinese version)","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/neopixel/learn/","text":"LEARN Example 1. Arduino IDE To get complete code, please click here \u3002 /* Install FastLED library first. */ #include M5Stack.h #include FastLED.h #define Neopixel_PIN 21 #define NUM_LEDS 30 CRGB leds[NUM_LEDS]; uint8_t gHue = 0; static TaskHandle_t FastLEDshowTaskHandle = 0; static TaskHandle_t userTaskHandle = 0; void setup(){ Serial.begin(115200); M5.begin(); M5.Lcd.clear(BLACK); M5.Lcd.setTextColor(YELLOW); M5.Lcd.setTextSize(2); M5.Lcd.setCursor(40, 0); M5.Lcd.println( Neopixel example ); M5.Lcd.setTextColor(WHITE); M5.Lcd.setCursor(0, 25); M5.Lcd.println( Display rainbow effect ); // Neopixel initialization FastLED.addLeds WS2811,Neopixel_PIN,GRB \\ (leds, NUM_LEDS).setCorrection(TypicalLEDStrip); FastLED.setBrightness(10); xTaskCreatePinnedToCore(FastLEDshowTask, \\ FastLEDshowTask , 2048, NULL, 2, NULL, 1); } void loop(){ } void FastLEDshowESP32(){ if (userTaskHandle == 0){ userTaskHandle = xTaskGetCurrentTaskHandle(); xTaskNotifyGive(FastLEDshowTaskHandle); const TickType_t xMaxBlockTime = pdMS_TO_TICKS( 200 ); ulTaskNotifyTake(pdTRUE, xMaxBlockTime); userTaskHandle = 0; } } void FastLEDshowTask(void *pvParameters){ for(;;){ fill_rainbow(leds, NUM_LEDS, gHue, 7);// rainbow effect FastLED.show();// must be executed for neopixel becoming effective EVERY_N_MILLISECONDS( 20 ) { gHue++; } } } 2. UIFlow To get the complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/neopixel/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/neopixel/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/neopixel/learn/#1-arduino-ide","text":"To get complete code, please click here \u3002 /* Install FastLED library first. */ #include M5Stack.h #include FastLED.h #define Neopixel_PIN 21 #define NUM_LEDS 30 CRGB leds[NUM_LEDS]; uint8_t gHue = 0; static TaskHandle_t FastLEDshowTaskHandle = 0; static TaskHandle_t userTaskHandle = 0; void setup(){ Serial.begin(115200); M5.begin(); M5.Lcd.clear(BLACK); M5.Lcd.setTextColor(YELLOW); M5.Lcd.setTextSize(2); M5.Lcd.setCursor(40, 0); M5.Lcd.println( Neopixel example ); M5.Lcd.setTextColor(WHITE); M5.Lcd.setCursor(0, 25); M5.Lcd.println( Display rainbow effect ); // Neopixel initialization FastLED.addLeds WS2811,Neopixel_PIN,GRB \\ (leds, NUM_LEDS).setCorrection(TypicalLEDStrip); FastLED.setBrightness(10); xTaskCreatePinnedToCore(FastLEDshowTask, \\ FastLEDshowTask , 2048, NULL, 2, NULL, 1); } void loop(){ } void FastLEDshowESP32(){ if (userTaskHandle == 0){ userTaskHandle = xTaskGetCurrentTaskHandle(); xTaskNotifyGive(FastLEDshowTaskHandle); const TickType_t xMaxBlockTime = pdMS_TO_TICKS( 200 ); ulTaskNotifyTake(pdTRUE, xMaxBlockTime); userTaskHandle = 0; } } void FastLEDshowTask(void *pvParameters){ for(;;){ fill_rainbow(leds, NUM_LEDS, gHue, 7);// rainbow effect FastLED.show();// must be executed for neopixel becoming effective EVERY_N_MILLISECONDS( 20 ) { gHue++; } } }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/neopixel/learn/#2-uiflow","text":"To get the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/neopixel/more-information/","text":"MORE INFORMATION PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND NEOPIXEL Unit / Signal Pin 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/neopixel/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/neopixel/more-information/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND NEOPIXEL Unit / Signal Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/pir/description/","text":"DESCRIPTION PIR is used to measure infrared (IR) light radiating from objects in its field of view. PIR sensors are commonly called simply \"PIR\", or sometimes \"PID\", for \"passive infrared detector\". The term passive refers to the fact that PIR devices do not radiate energy for detection purposes. They work entirely by detecting infrared radiation emitted by or reflected from objects. This Unit communicates with the M5Core via the GROVE B. Notice: This Unit has 2s delay time. Product Features Distance: 150cm Delay time: 2s Sensing range: 100\u00b0 Quiescent current: 60uA Operating temperature: -20 - 80 \u00b0C Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego installation holes Kit includes 1x PIR unit 1x GROVE Cable Application Human body Induction Lamp Security Product Automatic Induction Appliance Settings","title":"Description"},{"location":"tutorials/M5Stack/unit/pir/description/#description","text":"PIR is used to measure infrared (IR) light radiating from objects in its field of view. PIR sensors are commonly called simply \"PIR\", or sometimes \"PID\", for \"passive infrared detector\". The term passive refers to the fact that PIR devices do not radiate energy for detection purposes. They work entirely by detecting infrared radiation emitted by or reflected from objects. This Unit communicates with the M5Core via the GROVE B. Notice: This Unit has 2s delay time.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/pir/description/#product-features","text":"Distance: 150cm Delay time: 2s Sensing range: 100\u00b0 Quiescent current: 60uA Operating temperature: -20 - 80 \u00b0C Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego installation holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/pir/description/#kit-includes","text":"1x PIR unit 1x GROVE Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/pir/description/#application","text":"Human body Induction Lamp Security Product Automatic Induction Appliance Settings","title":"Application"},{"location":"tutorials/M5Stack/unit/pir/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/unit/pir/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/pir/learn/","text":"LEARN Example 1. Arduino IDE The code below is incomplete. To get complete code, please click here . #include M5Stack.h // initialization M5.begin(); pinMode(36, INPUT);// set pir sensor pin as input // read data int value = digitalRead(36);// read the pin(0: not detectd 1: detected) M5.update(); 2. UIFlow To get complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/pir/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/pir/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/pir/learn/#1-arduino-ide","text":"The code below is incomplete. To get complete code, please click here . #include M5Stack.h // initialization M5.begin(); pinMode(36, INPUT);// set pir sensor pin as input // read data int value = digitalRead(36);// read the pin(0: not detectd 1: detected) M5.update();","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/pir/learn/#2-uiflow","text":"To get complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/pir/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core(GROVE B) GPIO36 GPIO26 5V GND PIR Unit Sensor Pin / 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/pir/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/pir/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/pir/more-information/#pinmap","text":"M5Core(GROVE B) GPIO36 GPIO26 5V GND PIR Unit Sensor Pin / 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/proto/description/","text":"DESCRIPTION PROTO is a Unit size of universal prototyping board. You can have the total freedom to make your own project as you want it, with prototyping perboards that allows laying out customized circult to interact with the M5 core GROVE Port. Product Features Hole Size: 0.039\" 1mm (CNC Drilled) Hole Pitch: 0.1 in - (2.54 mm) Entire Hole Quantity: 70 Holes Two Lego-compatible holes Kit includes 1x PROTO unit 1x GROVE Cable","title":"Description"},{"location":"tutorials/M5Stack/unit/proto/description/#description","text":"PROTO is a Unit size of universal prototyping board. You can have the total freedom to make your own project as you want it, with prototyping perboards that allows laying out customized circult to interact with the M5 core GROVE Port.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/proto/description/#product-features","text":"Hole Size: 0.039\" 1mm (CNC Drilled) Hole Pitch: 0.1 in - (2.54 mm) Entire Hole Quantity: 70 Holes Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/proto/description/#kit-includes","text":"1x PROTO unit 1x GROVE Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/proto/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/unit/proto/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/proto/learn/","text":"LEARN","title":"Learn"},{"location":"tutorials/M5Stack/unit/proto/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/proto/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core(GROVE B) GPIO36 GPIO26 5V GND PROTO Unit GPIO36 GPIO26 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/proto/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/proto/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/proto/more-information/#pinmap","text":"M5Core(GROVE B) GPIO36 GPIO26 5V GND PROTO Unit GPIO36 GPIO26 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/relay/description/","text":"DESCRIPTION RELAY , as its namesake, is a M5Unit that implenments a Relay functions. Relay can be used as an electrically operated switch, uses an electromagnet to mechanically operate a switch,to where it is necessary to control a large power load circuit by a separate low-power signal, like a digital signal output from a mircoprocessor. Up to 30V DC and 220V AC. There are 3 pins named: ON, OFF, COM. You can program to make COM connect to ON or OFF, just by high and low out put of a digital GPIO. Product Features Single-BUS control Up to 3A @ 30 V DC or 220 V AC Software Development Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes Kit includes 1x RELAY Unit 1x Grove Cable 1x 3.96 soket Application Remote control of high-power appliances, such as refrigerators, Air Conditioners, TVs, etc.","title":"Description"},{"location":"tutorials/M5Stack/unit/relay/description/#description","text":"RELAY , as its namesake, is a M5Unit that implenments a Relay functions. Relay can be used as an electrically operated switch, uses an electromagnet to mechanically operate a switch,to where it is necessary to control a large power load circuit by a separate low-power signal, like a digital signal output from a mircoprocessor. Up to 30V DC and 220V AC. There are 3 pins named: ON, OFF, COM. You can program to make COM connect to ON or OFF, just by high and low out put of a digital GPIO.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/relay/description/#product-features","text":"Single-BUS control Up to 3A @ 30 V DC or 220 V AC Software Development Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/relay/description/#kit-includes","text":"1x RELAY Unit 1x Grove Cable 1x 3.96 soket","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/relay/description/#application","text":"Remote control of high-power appliances, such as refrigerators, Air Conditioners, TVs, etc.","title":"Application"},{"location":"tutorials/M5Stack/unit/relay/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/unit/relay/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/relay/learn/","text":"LEARN Example 1. Arduino IDE The code below is incomplete. To get complete code, please click here . #include M5Stack.h void setup() { M5.begin(); M5.Lcd.clear(BLACK); M5.Lcd.setTextFont(4); M5.Lcd.setTextColor(YELLOW, BLACK); //disable the speak noise dacWrite(25, 0); pinMode(26, OUTPUT);// RELAY Pin setting } void loop(void) { digitalWrite(26, HIGH);// RELAY Unit work delay(500); digitalWrite(26, LOW);// RELAY Unit stop work delay(500); } 2. UIFlow To get complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/relay/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/relay/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/relay/learn/#1-arduino-ide","text":"The code below is incomplete. To get complete code, please click here . #include M5Stack.h void setup() { M5.begin(); M5.Lcd.clear(BLACK); M5.Lcd.setTextFont(4); M5.Lcd.setTextColor(YELLOW, BLACK); //disable the speak noise dacWrite(25, 0); pinMode(26, OUTPUT);// RELAY Pin setting } void loop(void) { digitalWrite(26, HIGH);// RELAY Unit work delay(500); digitalWrite(26, LOW);// RELAY Unit stop work delay(500); }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/relay/learn/#2-uiflow","text":"To get complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/relay/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core(GROVE B) GPIO36 GPIO26 5V GND RELAY Unit / RELAY Controlling Pin 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/relay/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/relay/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/relay/more-information/#pinmap","text":"M5Core(GROVE B) GPIO36 GPIO26 5V GND RELAY Unit / RELAY Controlling Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/rfid/description/","text":"DESCRIPTION RFID has an RFID chip MFRC522 inside. The MFRC522 operates in the 13.56MHz frequency band and uses the modulation and demodulation principle to interact with the proximity RF card. This unit can realize the function of the card reading and writing device, to identify and record multiple card information, to encode and authority a RF card. It is able tp establish applications such as access control system, punching system, warehouse goods storage and community vehicle access registration. Connect this Unit to GROVE PORTA on M5Core, IIC adress is 0x28. Product Features Operating frequency: 13.56 MHz I2C data rate: Fast mode: up to 400 Kbit/s; High-speed mode: up to 3400 Kbit/s RC522 Transceiver Buffer: 64 bytes Supported protocol: ISO14443A, MIFARE and NTAG Operate temperature: -20\u2103-85\u2103 How long data be saved for: 10 years Reading and writing distance: 8 cm Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego installation holes Kit includes 1x RFID unit 1x GROVE Cable Application Smart home access control system Vehicle management Smart transportation Smart bookshelf","title":"Description"},{"location":"tutorials/M5Stack/unit/rfid/description/#description","text":"RFID has an RFID chip MFRC522 inside. The MFRC522 operates in the 13.56MHz frequency band and uses the modulation and demodulation principle to interact with the proximity RF card. This unit can realize the function of the card reading and writing device, to identify and record multiple card information, to encode and authority a RF card. It is able tp establish applications such as access control system, punching system, warehouse goods storage and community vehicle access registration. Connect this Unit to GROVE PORTA on M5Core, IIC adress is 0x28.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/rfid/description/#product-features","text":"Operating frequency: 13.56 MHz I2C data rate: Fast mode: up to 400 Kbit/s; High-speed mode: up to 3400 Kbit/s RC522 Transceiver Buffer: 64 bytes Supported protocol: ISO14443A, MIFARE and NTAG Operate temperature: -20\u2103-85\u2103 How long data be saved for: 10 years Reading and writing distance: 8 cm Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego installation holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/rfid/description/#kit-includes","text":"1x RFID unit 1x GROVE Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/rfid/description/#application","text":"Smart home access control system Vehicle management Smart transportation Smart bookshelf","title":"Application"},{"location":"tutorials/M5Stack/unit/rfid/documents/","text":"DOCUMENTS Datasheet - MFRC522","title":"Documents"},{"location":"tutorials/M5Stack/unit/rfid/documents/#documents","text":"Datasheet - MFRC522","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/rfid/learn/","text":"LEARN Example 1. Arduino IDE The code below is incomplete. To get complete code, please click here . After programming the RFID.ino, the IC card or the mobile phone NFC, close to the unit, moves back and forth around the unit, and the UID of the IC card or the RFID chip in the mobile phone will be printed on the screen of the M5Core. /* RFID.ino */ #include Wire.h #include MFRC522_I2C.h #include M5Stack.h // 0x28 is i2c address on SDA. Check your address with i2cscanner if not match. MFRC522 mfrc522(0x28); // Create MFRC522 instance. // initialization M5.begin(); Serial.begin(115200); Wire.begin(); /* Init MFRC522 */ mfrc522.PCD_Init(); /* Show details of PCD - MFRC522 Card Reader details */ ShowReaderDetails(); // get the uid of available card mfrc522.PICC_IsNewCardPresent();// scan for a new card mfrc522.PICC_ReadCardSerial();// read data // a new card is selected. The UID and SAK is saved at mfrc522.uid structor. for (byte i = 0; i mfrc522.uid.size; i++) { Serial.print(mfrc522.uid.uidByte[i] 0x10 ? 0 : ); Serial.print(mfrc522.uid.uidByte[i], HEX); } // other function void ShowReaderDetails() { /* Get the MFRC522 software version */ byte v = mfrc522.PCD_ReadRegister(mfrc522.VersionReg); if (v == 0x91) Serial.print(F( = v1.0 )); else if (v == 0x92) Serial.print(F( = v2.0 )); else Serial.print(F( (unknown) )); } 2. UIFlow To get complete code, please click here . After opening and burning this example using UIFlow , place the proximity card on the Unit surface and the screen displays \u201cTrue\u201d and the UID number of the card.","title":"Learn"},{"location":"tutorials/M5Stack/unit/rfid/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/rfid/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/rfid/learn/#1-arduino-ide","text":"The code below is incomplete. To get complete code, please click here . After programming the RFID.ino, the IC card or the mobile phone NFC, close to the unit, moves back and forth around the unit, and the UID of the IC card or the RFID chip in the mobile phone will be printed on the screen of the M5Core. /* RFID.ino */ #include Wire.h #include MFRC522_I2C.h #include M5Stack.h // 0x28 is i2c address on SDA. Check your address with i2cscanner if not match. MFRC522 mfrc522(0x28); // Create MFRC522 instance. // initialization M5.begin(); Serial.begin(115200); Wire.begin(); /* Init MFRC522 */ mfrc522.PCD_Init(); /* Show details of PCD - MFRC522 Card Reader details */ ShowReaderDetails(); // get the uid of available card mfrc522.PICC_IsNewCardPresent();// scan for a new card mfrc522.PICC_ReadCardSerial();// read data // a new card is selected. The UID and SAK is saved at mfrc522.uid structor. for (byte i = 0; i mfrc522.uid.size; i++) { Serial.print(mfrc522.uid.uidByte[i] 0x10 ? 0 : ); Serial.print(mfrc522.uid.uidByte[i], HEX); } // other function void ShowReaderDetails() { /* Get the MFRC522 software version */ byte v = mfrc522.PCD_ReadRegister(mfrc522.VersionReg); if (v == 0x91) Serial.print(F( = v1.0 )); else if (v == 0x92) Serial.print(F( = v2.0 )); else Serial.print(F( (unknown) )); }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/rfid/learn/#2-uiflow","text":"To get complete code, please click here . After opening and burning this example using UIFlow , place the proximity card on the Unit surface and the screen displays \u201cTrue\u201d and the UID number of the card.","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/rfid/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core ( GROVE A ) GPIO22 GPIO21 5V GND RFID Unit SCL SDA 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/rfid/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/rfid/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/rfid/more-information/#pinmap","text":"M5Core ( GROVE A ) GPIO22 GPIO21 5V GND RFID Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/rgb/description/","text":"DESCRIPTION RGB is LED Unit include 3 individual LEDs. It is also one of the Unit from M5GO Kit. Each one can display anycolor based on RGB value. One feature of this Unit is extension, which means you can have mutiple of them wired together. This is a very useful piece on STEM class, students can program it to realize some of cool applications, for example a traffic light. Product Features Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes Kit includes 1x RGB Unit 1x Grove Cable","title":"Description"},{"location":"tutorials/M5Stack/unit/rgb/description/#description","text":"RGB is LED Unit include 3 individual LEDs. It is also one of the Unit from M5GO Kit. Each one can display anycolor based on RGB value. One feature of this Unit is extension, which means you can have mutiple of them wired together. This is a very useful piece on STEM class, students can program it to realize some of cool applications, for example a traffic light.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/rgb/description/#product-features","text":"Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/rgb/description/#kit-includes","text":"1x RGB Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/rgb/documents/","text":"DOCUMENTS","title":"Documents"},{"location":"tutorials/M5Stack/unit/rgb/documents/#documents","text":"","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/rgb/learn/","text":"LEARN Example 1. Arduino IDE The code below is incomplete. To get complete code, please click here . /* Install the AdaFruit NeoPixel library first */ #include Adafruit_NeoPixel.h #define RGB_PIN 26 #define NUMPIXELS 3 // new a object Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB+NEO_KHZ800); int delayval = 150;// delay for half a second // initialization pixels.begin(); // This initializes the NeoPixel library. // display rgb pixels.setPixelColor(0, pixels.Color(100,0,0));//parameter = (rgb index, color) pixels.setPixelColor(1, pixels.Color(0,100,0)); pixels.setPixelColor(2, pixels.Color(0,0,100)); pixels.show(); // This sends the updated pixel color to the hardware. 2. UIFlow To get complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/rgb/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/rgb/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/rgb/learn/#1-arduino-ide","text":"The code below is incomplete. To get complete code, please click here . /* Install the AdaFruit NeoPixel library first */ #include Adafruit_NeoPixel.h #define RGB_PIN 26 #define NUMPIXELS 3 // new a object Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB+NEO_KHZ800); int delayval = 150;// delay for half a second // initialization pixels.begin(); // This initializes the NeoPixel library. // display rgb pixels.setPixelColor(0, pixels.Color(100,0,0));//parameter = (rgb index, color) pixels.setPixelColor(1, pixels.Color(0,100,0)); pixels.setPixelColor(2, pixels.Color(0,0,100)); pixels.show(); // This sends the updated pixel color to the hardware.","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/rgb/learn/#2-uiflow","text":"To get complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/rgb/more-information/","text":"MORE INFORMATION PinMap M5Core(GROVE B) GPIO36 GPIO26 5V GND RGB Unit / Signal Pin 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/rgb/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/rgb/more-information/#pinmap","text":"M5Core(GROVE B) GPIO36 GPIO26 5V GND RGB Unit / Signal Pin 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/rs485/description/","text":"DESCRIPTION RS485 is a TTL to RS485 convertor. RS485 is a standard defining the electrical characteristics of drivers and receivers for use in serial communications systems, widely used in industrial field. multipoint systems are supported. used for converting TTL level to RS485 level. If the device to be controlled only can communicate with other device through RS485, you can connect this device with M5Core through this unit. In this case, you could easily control a RS485 device with UIFlow . Product Features Built in MAX485/SP485EEN DC in 12/24 V Program Platform: Arduino, UIFlow(Blockly,Pyhton) Two Lego-compatible holes Kit includes 1x RS485 Unit 1x Grove Cable","title":"Description"},{"location":"tutorials/M5Stack/unit/rs485/description/#description","text":"RS485 is a TTL to RS485 convertor. RS485 is a standard defining the electrical characteristics of drivers and receivers for use in serial communications systems, widely used in industrial field. multipoint systems are supported. used for converting TTL level to RS485 level. If the device to be controlled only can communicate with other device through RS485, you can connect this device with M5Core through this unit. In this case, you could easily control a RS485 device with UIFlow .","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/rs485/description/#product-features","text":"Built in MAX485/SP485EEN DC in 12/24 V Program Platform: Arduino, UIFlow(Blockly,Pyhton) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/rs485/description/#kit-includes","text":"1x RS485 Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/rs485/documents/","text":"DOCUMENTS Datasheet - MAX485 - SP485EEN","title":"Documents"},{"location":"tutorials/M5Stack/unit/rs485/documents/#documents","text":"Datasheet - MAX485 - SP485EEN","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/rs485/learn/","text":"LEARN","title":"Learn"},{"location":"tutorials/M5Stack/unit/rs485/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/rs485/more-information/","text":"MORE INFORMATION PinMap M5Core(GROVE C) U2RXD(GPIO16) U2TXD(GPIO17) 5V GND RS485 Unit RS485 TXD RS485 RXD 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/rs485/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/rs485/more-information/#pinmap","text":"M5Core(GROVE C) U2RXD(GPIO16) U2TXD(GPIO17) 5V GND RS485 Unit RS485 TXD RS485 RXD 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/thermal/description/","text":"DESCRIPTION THERMAL is a thermal imager Unit contains a thermopile sensors named MLX90640 . It can be used to measure the surface temperature of an object and form a thermographic image by a temperature gradient composed of different surface temperatures. The image resolution is 32 x 24 . The MLX90640 Infrared (IR) sensor array combines high resolution and reliable operation in harsh environments, providing a cost-effective alternative to more expensive high-end thermal imaging cameras. Unlike the case of a microbolometer, the sensor does not require frequent recalibration, ensuring continuous monitoring and reducing system cost. The field of view (FoV) option includes a standard 55\u00b0 x 35\u00b0 version and a wide angle version of 110\u00b0 x 75\u00b0 for distances up to 7m. This Unit is 110\u00b0\u00d775\u00b0 FoV , also known as the BAA package. The Unit communicates with the M5Core through the Grove A interface, IIC address is 0x33 Product Features Operating Voltage: 3V ~ 3.6V Current Consumption: 23mA Field of View: 55\u00b0x35\u00b0 Measurement Range: -40\u00b0C ~ 300\u00b0C Resolution: \u00b11.5\u00b0C Refresh Rate: 0.5Hz-64Hz Operating temperature: -40\u00b0C ~ 85\u00b0C Two Lego-compatible holes Kit includes 1x THERMAL Unit 1x Grove Cable Application High precision non-contact temperature measurements Intrusion / Movement detection Visual IR thermometers","title":"Description"},{"location":"tutorials/M5Stack/unit/thermal/description/#description","text":"THERMAL is a thermal imager Unit contains a thermopile sensors named MLX90640 . It can be used to measure the surface temperature of an object and form a thermographic image by a temperature gradient composed of different surface temperatures. The image resolution is 32 x 24 . The MLX90640 Infrared (IR) sensor array combines high resolution and reliable operation in harsh environments, providing a cost-effective alternative to more expensive high-end thermal imaging cameras. Unlike the case of a microbolometer, the sensor does not require frequent recalibration, ensuring continuous monitoring and reducing system cost. The field of view (FoV) option includes a standard 55\u00b0 x 35\u00b0 version and a wide angle version of 110\u00b0 x 75\u00b0 for distances up to 7m. This Unit is 110\u00b0\u00d775\u00b0 FoV , also known as the BAA package. The Unit communicates with the M5Core through the Grove A interface, IIC address is 0x33","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/thermal/description/#product-features","text":"Operating Voltage: 3V ~ 3.6V Current Consumption: 23mA Field of View: 55\u00b0x35\u00b0 Measurement Range: -40\u00b0C ~ 300\u00b0C Resolution: \u00b11.5\u00b0C Refresh Rate: 0.5Hz-64Hz Operating temperature: -40\u00b0C ~ 85\u00b0C Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/thermal/description/#kit-includes","text":"1x THERMAL Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/thermal/description/#application","text":"High precision non-contact temperature measurements Intrusion / Movement detection Visual IR thermometers","title":"Application"},{"location":"tutorials/M5Stack/unit/thermal/documents/","text":"DOCUMENTS Datasheet - MLX90640","title":"Documents"},{"location":"tutorials/M5Stack/unit/thermal/documents/#documents","text":"Datasheet - MLX90640","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/thermal/learn/","text":"LEARN Example Arduino IDE The code below is incomplete. To get complete code, please click here \u3002 /* MLX90640.ino */ #include M5Stack.h #include Wire.h #include MLX90640_API.h #include MLX90640_I2C_Driver.h // declaration uint16_t eeMLX90640[832];//32 * 24 = 768 int SetRefreshRate; // initialization /* load system parameter */ MLX90640_DumpEE(MLX90640_address, eeMLX90640); /* load extraction parameter */ MLX90640_ExtractParameters(eeMLX90640, mlx90640); SetRefreshRate = MLX90640_SetRefreshRate(0x33, 0x05); M5.Lcd.fillScreen(TFT_BLACK); infodisplay(); // display heat map M5.update(); infodisplay(); interpolate_image(reversePixels,ROWS,COLS,dest_2d,\\ INTERPOLATED_ROWS,INTERPOLATED_COLS);","title":"Learn"},{"location":"tutorials/M5Stack/unit/thermal/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/thermal/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/thermal/learn/#arduino-ide","text":"The code below is incomplete. To get complete code, please click here \u3002 /* MLX90640.ino */ #include M5Stack.h #include Wire.h #include MLX90640_API.h #include MLX90640_I2C_Driver.h // declaration uint16_t eeMLX90640[832];//32 * 24 = 768 int SetRefreshRate; // initialization /* load system parameter */ MLX90640_DumpEE(MLX90640_address, eeMLX90640); /* load extraction parameter */ MLX90640_ExtractParameters(eeMLX90640, mlx90640); SetRefreshRate = MLX90640_SetRefreshRate(0x33, 0x05); M5.Lcd.fillScreen(TFT_BLACK); infodisplay(); // display heat map M5.update(); infodisplay(); interpolate_image(reversePixels,ROWS,COLS,dest_2d,\\ INTERPOLATED_ROWS,INTERPOLATED_COLS);","title":"Arduino IDE"},{"location":"tutorials/M5Stack/unit/thermal/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core (GROVE A) GPIO22 GPIO21 5V GND THERMAL Unit SCL SDA 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/thermal/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/thermal/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/thermal/more-information/#pinmap","text":"M5Core (GROVE A) GPIO22 GPIO21 5V GND THERMAL Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/tof/description/","text":"DESCRIPTION TOF that employs time-of-flight techniques to resolve distance between the emit point and the reach point of a subject, measuring the round trip time of an artificial light signal provided by a laser. This unit integrated a distance measuring sensor VL53L0x providing accurate distance measurement whatever the target reflectance, unlike conventional technologies. It can measure absolute distances up to 2m in less than 30ms. This unit comunicates with M5Core via I2C(0x29). Product Features High precision Measure absolute distances up to 2m The wavelength of laser: 940nm Program Platform: Arduino, UIFlo(Blockly, Python) Two Lego-compatible holes Kit includes 1x ToF Unit 1x Grove Cable Application 1D gesture recognition Laser Ranging 3D structured light imaging\uff083D sensing\uff09 Camera assist (ultra fast autofocus and depth of field)","title":"Description"},{"location":"tutorials/M5Stack/unit/tof/description/#description","text":"TOF that employs time-of-flight techniques to resolve distance between the emit point and the reach point of a subject, measuring the round trip time of an artificial light signal provided by a laser. This unit integrated a distance measuring sensor VL53L0x providing accurate distance measurement whatever the target reflectance, unlike conventional technologies. It can measure absolute distances up to 2m in less than 30ms. This unit comunicates with M5Core via I2C(0x29).","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/tof/description/#product-features","text":"High precision Measure absolute distances up to 2m The wavelength of laser: 940nm Program Platform: Arduino, UIFlo(Blockly, Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/tof/description/#kit-includes","text":"1x ToF Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/tof/description/#application","text":"1D gesture recognition Laser Ranging 3D structured light imaging\uff083D sensing\uff09 Camera assist (ultra fast autofocus and depth of field)","title":"Application"},{"location":"tutorials/M5Stack/unit/tof/documents/","text":"DOCUMENTS Datasheet - VL53L0X","title":"Documents"},{"location":"tutorials/M5Stack/unit/tof/documents/#documents","text":"Datasheet - VL53L0X","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/tof/learn/","text":"LEARN Example 1. Arduino IDE The below code is incomplete(just for usage). If you want the complete code, please click here . #include M5Stack.h #include Wire.h #define ToF_ADDR 0x29//the iic address of tof #define SYSRANGE_START 0x00 #define RESULT_RANGE_STATUS 0x14 #define ToF_ADDR 0x29 //the IIC address of ToF // declaration uint16_t dist=0; // initialization M5.begin(); Wire.begin();// join i2c bus (address optional for master) // read data write_byte_data_at(VL53L0X_REG_SYSRANGE_START, 0x01); read_block_data_at(VL53L0X_REG_RESULT_RANGE_STATUS, 12);//read 12 bytes once // get distance dist = makeuint16(gbuf[11], gbuf[10]);//split distance data to variable dist 2. UIFlow If you want the complete code, please click here .","title":"Learn"},{"location":"tutorials/M5Stack/unit/tof/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/tof/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/tof/learn/#1-arduino-ide","text":"The below code is incomplete(just for usage). If you want the complete code, please click here . #include M5Stack.h #include Wire.h #define ToF_ADDR 0x29//the iic address of tof #define SYSRANGE_START 0x00 #define RESULT_RANGE_STATUS 0x14 #define ToF_ADDR 0x29 //the IIC address of ToF // declaration uint16_t dist=0; // initialization M5.begin(); Wire.begin();// join i2c bus (address optional for master) // read data write_byte_data_at(VL53L0X_REG_SYSRANGE_START, 0x01); read_block_data_at(VL53L0X_REG_RESULT_RANGE_STATUS, 12);//read 12 bytes once // get distance dist = makeuint16(gbuf[11], gbuf[10]);//split distance data to variable dist","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/tof/learn/#2-uiflow","text":"If you want the complete code, please click here .","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/tof/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND TOF Unit SCL SDA 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/tof/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/tof/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/tof/more-information/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND TOF Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/trace/description/","text":"DESCRIPTION TRACE is mainly consist of 4 sets of IR, 1x infrared emitting and 1x infrared receiver for each set. The infrared LEDs should be placed towards and close to the ground where having black tracing lines and white background (or vice versa) layouts. The IR transmitter keep emitting, at the mean time infrared ray would be absorbed by different color of objects. Black can absorb more ray than other color, so the infrared receiver (infrared sensitive phototransistor) would receive less which makes the resistance value of the phototransistor would vary with different object color. Then we assign an AD convertor tp capture the data. This Unit communicates with the M5Core via GROVE PORTA I2C(0x5A). Product Features operation range: The reflecting surface is less than 11mm from the photoelectric surface Program Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes Kit includes 1x TRACE Unit 1x Grove Cable Application Self-tracing robot","title":"Description"},{"location":"tutorials/M5Stack/unit/trace/description/#description","text":"TRACE is mainly consist of 4 sets of IR, 1x infrared emitting and 1x infrared receiver for each set. The infrared LEDs should be placed towards and close to the ground where having black tracing lines and white background (or vice versa) layouts. The IR transmitter keep emitting, at the mean time infrared ray would be absorbed by different color of objects. Black can absorb more ray than other color, so the infrared receiver (infrared sensitive phototransistor) would receive less which makes the resistance value of the phototransistor would vary with different object color. Then we assign an AD convertor tp capture the data. This Unit communicates with the M5Core via GROVE PORTA I2C(0x5A).","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/trace/description/#product-features","text":"operation range: The reflecting surface is less than 11mm from the photoelectric surface Program Platform: Arduino, UIFlow(Blockly,Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/trace/description/#kit-includes","text":"1x TRACE Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/trace/description/#application","text":"Self-tracing robot","title":"Application"},{"location":"tutorials/M5Stack/unit/trace/documents/","text":"DOCUMENTS TRACE Firmeare","title":"Documents"},{"location":"tutorials/M5Stack/unit/trace/documents/#documents","text":"TRACE Firmeare","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/trace/learn/","text":"LEARN Example 1. Arduino IDE The code below is incomplete. To get complete code, please click here \u3002 #include M5Stack.h #include Wire.h #define TRACE_ADDR 0x5a // declaration #define VALUE_SPLIT uint8_t value; int SensorArray[4] = {0}; // initialization m5.begin(); Serial.begin(115200); Wire.begin(); // read data Wire.beginTransmission(TRACE_ADDR); Wire.write(0x00); Wire.endTransmission(); Wire.requestFrom(TRACE_ADDR,1); while(Wire.available()){ value = Wire.read(); } SensorArray[3] = (value 0x08) 3; SensorArray[2] = (value 0x04) 2; SensorArray[1] = (value 0x02) 1; SensorArray[0] = (value 0x01) 0; 2. UIFlow To get complete code, please click here \u3002","title":"Learn"},{"location":"tutorials/M5Stack/unit/trace/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/trace/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/trace/learn/#1-arduino-ide","text":"The code below is incomplete. To get complete code, please click here \u3002 #include M5Stack.h #include Wire.h #define TRACE_ADDR 0x5a // declaration #define VALUE_SPLIT uint8_t value; int SensorArray[4] = {0}; // initialization m5.begin(); Serial.begin(115200); Wire.begin(); // read data Wire.beginTransmission(TRACE_ADDR); Wire.write(0x00); Wire.endTransmission(); Wire.requestFrom(TRACE_ADDR,1); while(Wire.available()){ value = Wire.read(); } SensorArray[3] = (value 0x08) 3; SensorArray[2] = (value 0x04) 2; SensorArray[1] = (value 0x02) 1; SensorArray[0] = (value 0x01) 0;","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/trace/learn/#2-uiflow","text":"To get complete code, please click here \u3002","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/trace/more-information/","text":"MORE INFORMATION Schematic PinMap M5Core(GROVE A) GPIO22 GPIO21 5V GND TRACE Unit SCL SDA 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/trace/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/trace/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/trace/more-information/#pinmap","text":"M5Core(GROVE A) GPIO22 GPIO21 5V GND TRACE Unit SCL SDA 5V GND","title":"PinMap"},{"location":"tutorials/M5Stack/unit/weight/description/","text":"DESCRIPTION WEIGHT intergrates an 24 bits A/D chip HX711 that is specifically designed for electronic weighing device. The input multiplexer selects either Channel A or B differential input to the low-noise programmable gain amplifier (PGA). Channel A can be programmed with a gain of 128 or 64, corresponding to a full-scale differential input voltage of \u00b120mV or \u00b140mV respectively, when a 5V supply is connected to AVDD analog power supply pin. Channel B has a fixed gain of 32. There is no programming needed for the internal registers. All controls to the HX711 are through the pins. In the test, we have this Unit channel A to connect a pressure sensor. Then use M5Core screen to display the weight data. Product Features Two selectable differential input channels On-chip active low noise PGA with selectable gain of 32, 64 and 128 On-chip power supply regulator for load-cell and ADC analog power supply On-chip oscillator requiring no external component with optional external crystal On-chip power-on-reset Simple digital control and serial interface: pin-driven controls, no programming needed Selectable 10SPS or 80SPS output data rate Simultaneous 50 and 60Hz supply rejection Current consumption including on-chip analog power supply regulator: normal operation 1.5mA, power down 1uA Operation supply voltage range: 2.6 ~ 5.5V Operation temperature range: -40 ~ +85\u2103 16 pin SOP-16 package Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes Kit includes 1x WEIGHT Unit 1x Grove Cable Application Micro weight meter Kitchen Scale","title":"Description"},{"location":"tutorials/M5Stack/unit/weight/description/#description","text":"WEIGHT intergrates an 24 bits A/D chip HX711 that is specifically designed for electronic weighing device. The input multiplexer selects either Channel A or B differential input to the low-noise programmable gain amplifier (PGA). Channel A can be programmed with a gain of 128 or 64, corresponding to a full-scale differential input voltage of \u00b120mV or \u00b140mV respectively, when a 5V supply is connected to AVDD analog power supply pin. Channel B has a fixed gain of 32. There is no programming needed for the internal registers. All controls to the HX711 are through the pins. In the test, we have this Unit channel A to connect a pressure sensor. Then use M5Core screen to display the weight data.","title":"DESCRIPTION"},{"location":"tutorials/M5Stack/unit/weight/description/#product-features","text":"Two selectable differential input channels On-chip active low noise PGA with selectable gain of 32, 64 and 128 On-chip power supply regulator for load-cell and ADC analog power supply On-chip oscillator requiring no external component with optional external crystal On-chip power-on-reset Simple digital control and serial interface: pin-driven controls, no programming needed Selectable 10SPS or 80SPS output data rate Simultaneous 50 and 60Hz supply rejection Current consumption including on-chip analog power supply regulator: normal operation 1.5mA, power down 1uA Operation supply voltage range: 2.6 ~ 5.5V Operation temperature range: -40 ~ +85\u2103 16 pin SOP-16 package Program Platform: Arduino, UIFlow(Blockly, Python) Two Lego-compatible holes","title":"Product Features"},{"location":"tutorials/M5Stack/unit/weight/description/#kit-includes","text":"1x WEIGHT Unit 1x Grove Cable","title":"Kit includes"},{"location":"tutorials/M5Stack/unit/weight/description/#application","text":"Micro weight meter Kitchen Scale","title":"Application"},{"location":"tutorials/M5Stack/unit/weight/documents/","text":"DOCUMENTS Datasheet - HX711","title":"Documents"},{"location":"tutorials/M5Stack/unit/weight/documents/#documents","text":"Datasheet - HX711","title":"DOCUMENTS"},{"location":"tutorials/M5Stack/unit/weight/learn/","text":"LEARN Example 1. Arduino IDE We used a pressure sensor(10kg) in this experiment. (Unit: gram) To get complete code, please click here \u3002 /* This Unit connects to GRVOE B on M5Core. */ #include M5Stack.h #include hx711.h HX711 scale(36, 26);// GROVE B void setup() { M5.begin(); M5.Lcd.clear(BLACK); M5.Lcd.setTextSize(2); M5.Lcd.setTextColor(YELLOW); M5.Lcd.setCursor(50, 10); M5.Lcd.print( UNIT_WEIGHT EXAMPLE\\n ); M5.Lcd.setCursor(15, 50); M5.Lcd.print( Connect Unit to GROVE B ); Serial.begin(115200); scale.setOffset(125184); scale.setScale(67.4); M5.Lcd.setCursor(0, 90); M5.Lcd.print( The weight: ); } void loop(){ // Serial.println(scale.averageValue()); float weight; weight = ((float)((int)((scale.getGram()+0.005)*100)))/100; // sprintf( weight, %0.2f , scale.getGram()); Serial.print( The weight: ); Serial.print(weight); M5.Lcd.fillRect(150, 90, 100, 20, BLACK); M5.Lcd.setCursor(150, 90); M5.Lcd.print(weight); Serial.println( g ); delay(100); } 2. UIFlow To get complete code, please click here \u3002","title":"Learn"},{"location":"tutorials/M5Stack/unit/weight/learn/#learn","text":"","title":"LEARN"},{"location":"tutorials/M5Stack/unit/weight/learn/#example","text":"","title":"Example"},{"location":"tutorials/M5Stack/unit/weight/learn/#1-arduino-ide","text":"We used a pressure sensor(10kg) in this experiment. (Unit: gram) To get complete code, please click here \u3002 /* This Unit connects to GRVOE B on M5Core. */ #include M5Stack.h #include hx711.h HX711 scale(36, 26);// GROVE B void setup() { M5.begin(); M5.Lcd.clear(BLACK); M5.Lcd.setTextSize(2); M5.Lcd.setTextColor(YELLOW); M5.Lcd.setCursor(50, 10); M5.Lcd.print( UNIT_WEIGHT EXAMPLE\\n ); M5.Lcd.setCursor(15, 50); M5.Lcd.print( Connect Unit to GROVE B ); Serial.begin(115200); scale.setOffset(125184); scale.setScale(67.4); M5.Lcd.setCursor(0, 90); M5.Lcd.print( The weight: ); } void loop(){ // Serial.println(scale.averageValue()); float weight; weight = ((float)((int)((scale.getGram()+0.005)*100)))/100; // sprintf( weight, %0.2f , scale.getGram()); Serial.print( The weight: ); Serial.print(weight); M5.Lcd.fillRect(150, 90, 100, 20, BLACK); M5.Lcd.setCursor(150, 90); M5.Lcd.print(weight); Serial.println( g ); delay(100); }","title":"1. Arduino IDE"},{"location":"tutorials/M5Stack/unit/weight/learn/#2-uiflow","text":"To get complete code, please click here \u3002","title":"2. UIFlow"},{"location":"tutorials/M5Stack/unit/weight/more-information/","text":"MORE INFORMATION Schematic Pinmap If WEIGHT was connected to GROVE A M5Core(GROVE A) GPIO22 GPIO21 5V GND WEIGHT Unit DATA Pin (DAT) CLOCK Pin (CLK) 5V GND If WEIGHT was connected to GROVE B M5Core(GROVE B) GPIO36 GPIO26 5V GND WEIGHT Unit DATA Pin (DAT) CLOCK Pin (CLK) 5V GND If WEIGHT was connected to GROVE C M5Core(GROVE C) GPIO16 GPIO17 5V GND WEIGHT Unit DATA Pin (DAT) CLOCK Pin (CLK) 5V GND","title":"More information"},{"location":"tutorials/M5Stack/unit/weight/more-information/#more-information","text":"","title":"MORE INFORMATION"},{"location":"tutorials/M5Stack/unit/weight/more-information/#schematic","text":"","title":"Schematic"},{"location":"tutorials/M5Stack/unit/weight/more-information/#pinmap","text":"If WEIGHT was connected to GROVE A M5Core(GROVE A) GPIO22 GPIO21 5V GND WEIGHT Unit DATA Pin (DAT) CLOCK Pin (CLK) 5V GND If WEIGHT was connected to GROVE B M5Core(GROVE B) GPIO36 GPIO26 5V GND WEIGHT Unit DATA Pin (DAT) CLOCK Pin (CLK) 5V GND If WEIGHT was connected to GROVE C M5Core(GROVE C) GPIO16 GPIO17 5V GND WEIGHT Unit DATA Pin (DAT) CLOCK Pin (CLK) 5V GND","title":"Pinmap"},{"location":"tutorials/MQTT-Services/MQTT_Bridge_setup/","text":"","title":"MQTT Bridge setup"},{"location":"tutorials/MQTT-Services/brokers/","text":"Shiftr MQTT Broker Shftr.io has a html api, with webhooks, it is a little hard to setup, but works with IFTTT (with a little effort). Shiftr.io BeeBotte.com another site that offers an api, with webhooks, setup is unknown at this point, looks ok to setup, has some example code for the esp8266. beebotte.com","title":"Brokers"},{"location":"tutorials/MQTT-Services/brokers/#shiftr-mqtt-broker","text":"Shftr.io has a html api, with webhooks, it is a little hard to setup, but works with IFTTT (with a little effort). Shiftr.io","title":"Shiftr MQTT Broker"},{"location":"tutorials/MQTT-Services/brokers/#beebottecom","text":"another site that offers an api, with webhooks, setup is unknown at this point, looks ok to setup, has some example code for the esp8266. beebotte.com","title":"BeeBotte.com"},{"location":"tutorials/OnionWiki/","text":"Onion Wiki See our new Onion Docs site for the latest Omega documentation! The Wiki is in the process of being revamped to better serve the community! Welcome to the Onion Wiki where you can find all the necessary info to learn about and to build with your Onion Omega! Omega Get Started Guide Omega Hardware Technical Details Omega Pin-Out Diagrams Omega Tutorials - Discover everything you can do with the Omega Omega Projects - See what can be built with the Omega get inspired! Onion Documentation Includes: Firmware Change-log Hardware Documentation Technical Drawings Documentation for Onion Software Libraries Contribute to the Wiki You can help make the Wiki better! Submit a Pull Request to the Onion Wiki GitHub Repo and we'll review your content for submission. Happy Hacking!","title":"Onion Wiki"},{"location":"tutorials/OnionWiki/#onion-wiki","text":"See our new Onion Docs site for the latest Omega documentation! The Wiki is in the process of being revamped to better serve the community! Welcome to the Onion Wiki where you can find all the necessary info to learn about and to build with your Onion Omega! Omega Get Started Guide Omega Hardware Technical Details Omega Pin-Out Diagrams Omega Tutorials - Discover everything you can do with the Omega Omega Projects - See what can be built with the Omega get inspired! Onion Documentation Includes: Firmware Change-log Hardware Documentation Technical Drawings Documentation for Onion Software Libraries","title":"Onion Wiki"},{"location":"tutorials/OnionWiki/#contribute-to-the-wiki","text":"You can help make the Wiki better! Submit a Pull Request to the Onion Wiki GitHub Repo and we'll review your content for submission.","title":"Contribute to the Wiki"},{"location":"tutorials/OnionWiki/#happy-hacking","text":"","title":"Happy Hacking!"},{"location":"tutorials/OnionWiki/Get-Started-Omega2-Prototypes/","text":"Get Started with the Onion Omega2 [[ TOC ]] The wiki is moving! This article can be found in the Onion Docs already, and will be updated there. Preparing the Hardware Step 1 : Unpack the Omega and Dock from the boxes. Step 2 : Connect the Omega to the Dock. Ensure the Omega's pins are fully plugged into the socket on the Dock Step 3 : Connect the Omega to your computer through USB. For best results, use a cable that is two feet long or less. Step 4 : Turn on the Omega using the switch. Step 5 : When the amber LED has been on for about a minute, your Omega will have booted. We're working on making this step more intuitive, stay tuned! Use the Setup Wizard to Get Started Step 1 : Your computer may need some additional programs to access the Omega through a browser: * If you are using Windows, install Apple's Bonjour Service * If you are using OS X, you're all set to go * If you are using Linux, the Zeroconf services should already be installed and you will be good to go Step 1.5 : Your Omega2 Prototype will have a note of some sort indicating the Omega's name. The Omega name will be Omega-ABCD where ABCD are four hexadecimal characters. For reference, the one from the photos is named Omega-296A . Step 2 : Connect to the Omega\u2019s Access Point, it's named the same as your Omega. The default password is 12345678 Step 3 : Open your favourite browser and navigate to http://omega-ABCD.local/ where ABCD are the same characters from the network name above. Alternatively, you can also browse to http://192.168.3.1 You have now arrived at the Setup Wizard: Login with the following information: username: root password: onioneer Follow the wizard to complete the setup of the Omega, by the end of it, your Omega will be updated with the latest firmware and connected to a WiFi network of your choosing. Step 3.5 : When you've reached the last page of the wizard, and the Omega's LED turns off, toggle the switch to off, chill for a few seconds, and then toggle it back to on. Step 4 : Start using your fresh Omega, check out the Tutorials section or the Project guides for ideas on what to do next!","title":"Get Started with the Onion Omega2"},{"location":"tutorials/OnionWiki/Get-Started-Omega2-Prototypes/#get-started-with-the-onion-omega2","text":"[[ TOC ]] The wiki is moving! This article can be found in the Onion Docs already, and will be updated there.","title":"Get Started with the Onion Omega2"},{"location":"tutorials/OnionWiki/Get-Started-Omega2-Prototypes/#preparing-the-hardware","text":"Step 1 : Unpack the Omega and Dock from the boxes. Step 2 : Connect the Omega to the Dock. Ensure the Omega's pins are fully plugged into the socket on the Dock Step 3 : Connect the Omega to your computer through USB. For best results, use a cable that is two feet long or less. Step 4 : Turn on the Omega using the switch. Step 5 : When the amber LED has been on for about a minute, your Omega will have booted. We're working on making this step more intuitive, stay tuned!","title":"Preparing the Hardware"},{"location":"tutorials/OnionWiki/Get-Started-Omega2-Prototypes/#use-the-setup-wizard-to-get-started","text":"Step 1 : Your computer may need some additional programs to access the Omega through a browser: * If you are using Windows, install Apple's Bonjour Service * If you are using OS X, you're all set to go * If you are using Linux, the Zeroconf services should already be installed and you will be good to go Step 1.5 : Your Omega2 Prototype will have a note of some sort indicating the Omega's name. The Omega name will be Omega-ABCD where ABCD are four hexadecimal characters. For reference, the one from the photos is named Omega-296A . Step 2 : Connect to the Omega\u2019s Access Point, it's named the same as your Omega. The default password is 12345678 Step 3 : Open your favourite browser and navigate to http://omega-ABCD.local/ where ABCD are the same characters from the network name above. Alternatively, you can also browse to http://192.168.3.1 You have now arrived at the Setup Wizard: Login with the following information: username: root password: onioneer Follow the wizard to complete the setup of the Omega, by the end of it, your Omega will be updated with the latest firmware and connected to a WiFi network of your choosing. Step 3.5 : When you've reached the last page of the wizard, and the Omega's LED turns off, toggle the switch to off, chill for a few seconds, and then toggle it back to on. Step 4 : Start using your fresh Omega, check out the Tutorials section or the Project guides for ideas on what to do next!","title":"Use the Setup Wizard to Get Started"},{"location":"tutorials/OnionWiki/Get-Started/","text":"Get Started with the Onion Omega [[ TOC ]] The wiki is moving! This article can be found in the Onion Docs already, and will be updated there. The setup for the Omega2 is the same as for the Omega, so don't worry about missing or extra steps! Preparing the Hardware Step 1 : Unpack the Omega and Dock from the boxes. Step 2 : Connect the Omega to the Dock. Step 3 : Connect the Omega to your computer through USB. For best results, use a cable that is two feet long or less. Step 4 : Turn on the Omega using the switch. Step 5 : Wait for the amber LED to stop blinking, indicating that the Omega has booted up. Setting up using GUI Step 1 : Your computer may need some additional programs to access the Omega through a browser: * If you are using Windows, install Apple's Bonjour Service * If you are using OS X, you're all set to go * If you are using Linux, the Zeroconf services should already be installed and you will be good to go Step 2 : Connect to the Omega\u2019s Access Point. Step 3 : Use Chrome or Opera and navigate to http://omega-ABCD.local where ABCD are the same characters from the network name above. Some users have experienced issues using Firefox and Safari. Alternatively, you can also browse to http://192.168.3.1 . You have now arrived at the Setup Wizard. Login with the following information: username: root password: onioneer Follow the wizard to complete the setup of the Omega. Following the wizard will connect your Omega to a wifi network of your choice, and will update to the latest firmware. Step 4 : Start using your fresh Omega, check out the Tutorials section or the Project guides for ideas on what to do next! Setting up using Command Line \u2013 OSX Step 1 : Download and install the Silicon Labs CP2102 driver for OS X . Step 2 : Run ls /dev/tty.* to see if the USB-to-Serial device can be detected. If the driver is successfully installed, you should be able to see a device with a name similar to /dev/tty.SLAB_USBtoUART . Step 3 : Run screen /dev/tty.SLAB_USBtoUART 115200 to connect to the Omega\u2019s serial terminal using the screen utility. We recommend taking a peek at this tutorial to get an idea of how the screen utility works Step 4 : Run wifisetup in the serial terminal, and follow the prompt to connect the Omega to your Wi-Fi network. Step 5 : Run oupgrade in the serial terminal, this will update the Omega to the latest firmware. The firmware update will take a few minutes, the process will be complete when the Omega reboots. Warning: Do not disconnect the Omega from wifi or power during this process! Step 6 : Enjoy! Check out the Tutorials section or the Project guides for ideas on what to do next! Setting up using Command Line \u2013 Windows Step 1 : Download and install the Silicon Labs CP2102 driver for Windows . Step 2 : Run Computer Management (Start Run\u2026 Enter \u201cComputer Management\u201d and press ENTER ), look for Silicon Labs CP210x USB to UART Bridge under Ports (COM LPT), and take note of the COM number in bracket. Step 3 : Download and install Putty . Step 4 : Open up PuTTY, select Serial for Connection type, enter the COM number noted down in Step 2 as Serial line, and enter 115200 for the speed. Step 5 : Click on the Open button to connect to the Omega via the serial terminal. Step 6 : Run wifisetup in the serial terminal, and follow the prompt to connect the Omega to your Wi-Fi network. Step 7 : Run oupgrade in the serial terminal, this will update the Omega to the latest firmware. The firmware update will take a few minutes, the process will be complete when the Omega reboots. Warning: Do not disconnect the Omega from wifi or power during this process! Step 8 : Enjoy! Check out the Tutorials section or the Project guides for ideas on what to do next! Setting up using Command Line \u2013 Linux Step 1 : Check if the serial drivers are already installed. Some modern Linux Distros already have the required serial drivers installed. Run modinfo cp210x on the command line, if it outputs several lines of information, the driver is already installed and you can skip ahead to Step 4 . If the output is something along the lines of modinfo: ERROR: Module cp210x not found. the driver will need to be installed. Continue to Step 2 . Step 2 : Download and install the Silicon Labs CP2102 driver source files. For Linux kernel 3.x.x and higher : [[https://www.silabs.com/Support%20Documents/Software/Linux_3.x.x_VCP_Driver_Source.zip]]. For Linux kernel 2.6.x : [[https://www.silabs.com/Support%20Documents/Software/Linux_3.x.x_VCP_Driver_Source.zip]]. Step 3 : Build and install the driver. For Ubuntu/Debian : Unzip the archive. cd into the unzipped directory. Compile the driver with make . sudo cp cp210x.ko /lib/modules/ kernel-version /kernel/drivers/usb/serial/ sudo insmod /lib/modules/ kernel-version /kernel/drivers/usb/serial/usbserial.ko sudo insmod cp210x.ko sudo chmod 666 /dev/ttyUSB0 sudo usermod -a -G dialout $USER For RedHat/CentOS : sudo yum update kernel* //need to update the kernel first otherwise your header n't match sudo yum install kernel-devel kernel-headers //get the devel and header packages sudo reboot //your build link should be fixed after your system come back Unzip the archive. cd into the unzipped directory. Compile the driver with make . sudo cp cp210x.ko /lib/modules/ kernel-version /kernel/drivers/usb/serial sudo insmod /lib/modules/ kernel-version /kernel/drivers/usb/serial/usbserial.ko sudo insmod cp210x.ko sudo chmod 666 /dev/ttyUSB0 sudo usermod -a -G dialout $USER Step 4 : Let's install screen , a command line utility that will allow connecting to the Omega's serial terminal. For Ubuntu/Debian : sudo apt-get update sudo apt-get upgrade sudo apt-get install screen For RedHat/CentOS : sudo yum update sudo yum install screen We recommend taking a peek at this tutorial to get an idea of how the screen utility works Step 5 : Run ls /dev/ttyUSB* to see if the USB-to-Serial device can be detected. If the driver is successfully installed, you should be able to see a device with a name similar to /dev/ttyUSB0 . Step 6 : Run sudo screen /dev/ttyUSB0 115200 to connect to the Omega\u2019s serial terminal using screen. If the screen remains blank, hit enter again to get to the command prompt. Step 7 : Run wifisetup in the serial terminal, and follow the prompt to connect the Omega to your Wi-Fi network. Step 8 : Run oupgrade in the serial terminal, this will update the Omega to the latest firmware. The firmware update will take a few minutes, the process will be complete when the Omega reboots. Warning: Do not disconnect the Omega from wifi or power during this process! Step 9 : Enjoy! Check out the Tutorials section or the Project guides for ideas on what to do next!","title":"Get Started with the Onion Omega"},{"location":"tutorials/OnionWiki/Get-Started/#get-started-with-the-onion-omega","text":"[[ TOC ]] The wiki is moving! This article can be found in the Onion Docs already, and will be updated there. The setup for the Omega2 is the same as for the Omega, so don't worry about missing or extra steps!","title":"Get Started with the Onion Omega"},{"location":"tutorials/OnionWiki/Get-Started/#preparing-the-hardware","text":"Step 1 : Unpack the Omega and Dock from the boxes. Step 2 : Connect the Omega to the Dock. Step 3 : Connect the Omega to your computer through USB. For best results, use a cable that is two feet long or less. Step 4 : Turn on the Omega using the switch. Step 5 : Wait for the amber LED to stop blinking, indicating that the Omega has booted up.","title":"Preparing the Hardware"},{"location":"tutorials/OnionWiki/Get-Started/#setting-up-using-gui","text":"Step 1 : Your computer may need some additional programs to access the Omega through a browser: * If you are using Windows, install Apple's Bonjour Service * If you are using OS X, you're all set to go * If you are using Linux, the Zeroconf services should already be installed and you will be good to go Step 2 : Connect to the Omega\u2019s Access Point. Step 3 : Use Chrome or Opera and navigate to http://omega-ABCD.local where ABCD are the same characters from the network name above. Some users have experienced issues using Firefox and Safari. Alternatively, you can also browse to http://192.168.3.1 . You have now arrived at the Setup Wizard. Login with the following information: username: root password: onioneer Follow the wizard to complete the setup of the Omega. Following the wizard will connect your Omega to a wifi network of your choice, and will update to the latest firmware. Step 4 : Start using your fresh Omega, check out the Tutorials section or the Project guides for ideas on what to do next!","title":"Setting up using GUI"},{"location":"tutorials/OnionWiki/Get-Started/#setting-up-using-command-line-osx","text":"Step 1 : Download and install the Silicon Labs CP2102 driver for OS X . Step 2 : Run ls /dev/tty.* to see if the USB-to-Serial device can be detected. If the driver is successfully installed, you should be able to see a device with a name similar to /dev/tty.SLAB_USBtoUART . Step 3 : Run screen /dev/tty.SLAB_USBtoUART 115200 to connect to the Omega\u2019s serial terminal using the screen utility. We recommend taking a peek at this tutorial to get an idea of how the screen utility works Step 4 : Run wifisetup in the serial terminal, and follow the prompt to connect the Omega to your Wi-Fi network. Step 5 : Run oupgrade in the serial terminal, this will update the Omega to the latest firmware. The firmware update will take a few minutes, the process will be complete when the Omega reboots. Warning: Do not disconnect the Omega from wifi or power during this process! Step 6 : Enjoy! Check out the Tutorials section or the Project guides for ideas on what to do next!","title":"Setting up using Command Line \u2013 OSX"},{"location":"tutorials/OnionWiki/Get-Started/#setting-up-using-command-line-windows","text":"Step 1 : Download and install the Silicon Labs CP2102 driver for Windows . Step 2 : Run Computer Management (Start Run\u2026 Enter \u201cComputer Management\u201d and press ENTER ), look for Silicon Labs CP210x USB to UART Bridge under Ports (COM LPT), and take note of the COM number in bracket. Step 3 : Download and install Putty . Step 4 : Open up PuTTY, select Serial for Connection type, enter the COM number noted down in Step 2 as Serial line, and enter 115200 for the speed. Step 5 : Click on the Open button to connect to the Omega via the serial terminal. Step 6 : Run wifisetup in the serial terminal, and follow the prompt to connect the Omega to your Wi-Fi network. Step 7 : Run oupgrade in the serial terminal, this will update the Omega to the latest firmware. The firmware update will take a few minutes, the process will be complete when the Omega reboots. Warning: Do not disconnect the Omega from wifi or power during this process! Step 8 : Enjoy! Check out the Tutorials section or the Project guides for ideas on what to do next!","title":"Setting up using Command Line \u2013 Windows"},{"location":"tutorials/OnionWiki/Get-Started/#setting-up-using-command-line-linux","text":"Step 1 : Check if the serial drivers are already installed. Some modern Linux Distros already have the required serial drivers installed. Run modinfo cp210x on the command line, if it outputs several lines of information, the driver is already installed and you can skip ahead to Step 4 . If the output is something along the lines of modinfo: ERROR: Module cp210x not found. the driver will need to be installed. Continue to Step 2 . Step 2 : Download and install the Silicon Labs CP2102 driver source files. For Linux kernel 3.x.x and higher : [[https://www.silabs.com/Support%20Documents/Software/Linux_3.x.x_VCP_Driver_Source.zip]]. For Linux kernel 2.6.x : [[https://www.silabs.com/Support%20Documents/Software/Linux_3.x.x_VCP_Driver_Source.zip]]. Step 3 : Build and install the driver. For Ubuntu/Debian : Unzip the archive. cd into the unzipped directory. Compile the driver with make . sudo cp cp210x.ko /lib/modules/ kernel-version /kernel/drivers/usb/serial/ sudo insmod /lib/modules/ kernel-version /kernel/drivers/usb/serial/usbserial.ko sudo insmod cp210x.ko sudo chmod 666 /dev/ttyUSB0 sudo usermod -a -G dialout $USER For RedHat/CentOS : sudo yum update kernel* //need to update the kernel first otherwise your header n't match sudo yum install kernel-devel kernel-headers //get the devel and header packages sudo reboot //your build link should be fixed after your system come back Unzip the archive. cd into the unzipped directory. Compile the driver with make . sudo cp cp210x.ko /lib/modules/ kernel-version /kernel/drivers/usb/serial sudo insmod /lib/modules/ kernel-version /kernel/drivers/usb/serial/usbserial.ko sudo insmod cp210x.ko sudo chmod 666 /dev/ttyUSB0 sudo usermod -a -G dialout $USER Step 4 : Let's install screen , a command line utility that will allow connecting to the Omega's serial terminal. For Ubuntu/Debian : sudo apt-get update sudo apt-get upgrade sudo apt-get install screen For RedHat/CentOS : sudo yum update sudo yum install screen We recommend taking a peek at this tutorial to get an idea of how the screen utility works Step 5 : Run ls /dev/ttyUSB* to see if the USB-to-Serial device can be detected. If the driver is successfully installed, you should be able to see a device with a name similar to /dev/ttyUSB0 . Step 6 : Run sudo screen /dev/ttyUSB0 115200 to connect to the Omega\u2019s serial terminal using screen. If the screen remains blank, hit enter again to get to the command prompt. Step 7 : Run wifisetup in the serial terminal, and follow the prompt to connect the Omega to your Wi-Fi network. Step 8 : Run oupgrade in the serial terminal, this will update the Omega to the latest firmware. The firmware update will take a few minutes, the process will be complete when the Omega reboots. Warning: Do not disconnect the Omega from wifi or power during this process! Step 9 : Enjoy! Check out the Tutorials section or the Project guides for ideas on what to do next!","title":"Setting up using Command Line \u2013 Linux"},{"location":"tutorials/OnionWiki/Home/","text":"Onion Wiki Welcome to the Onion Wiki where you can find all the necessary info to learn about and to build with your Onion Omega! Omega Get Started Guide Omega Hardware Technical Details Omega Pin-Out Diagrams Omega Tutorials - Discover everything you can do with the Omega Omega Projects - See what can be built with the Omega get inspired! Onion Documentation Includes: Firmware Change-log Hardware Documentation Technical Drawings Documentation for Onion Software Libraries Contribute to the Wiki You can help make the Wiki better! Submit a Pull Request to the Onion Wiki GitHub Repo and we'll review your content for submission. Happy Hacking!","title":"Onion Wiki"},{"location":"tutorials/OnionWiki/Home/#onion-wiki","text":"Welcome to the Onion Wiki where you can find all the necessary info to learn about and to build with your Onion Omega! Omega Get Started Guide Omega Hardware Technical Details Omega Pin-Out Diagrams Omega Tutorials - Discover everything you can do with the Omega Omega Projects - See what can be built with the Omega get inspired! Onion Documentation Includes: Firmware Change-log Hardware Documentation Technical Drawings Documentation for Onion Software Libraries","title":"Onion Wiki"},{"location":"tutorials/OnionWiki/Home/#contribute-to-the-wiki","text":"You can help make the Wiki better! Submit a Pull Request to the Onion Wiki GitHub Repo and we'll review your content for submission.","title":"Contribute to the Wiki"},{"location":"tutorials/OnionWiki/Home/#happy-hacking","text":"","title":"Happy Hacking!"},{"location":"tutorials/OnionWiki/Documentation/Contents/","text":"Documentation Wiki The Documentation portion of the Onion Wiki contains information released by Onion on anything technical related to the Omega. This can include anything from information about the latest firmware, to basic information regarding the hardware, to libraries created for Omega expansions. [[ TOC ]] Firmware Change-log The wiki is moving! These articles can be found in the Onion Docs already, and will be updated there. A detailed rundown of changes in each firmware version: * Firmware Change-log Hardware Documentation Omega A run-down of the Omega's technical specs and features, as well as an introduction to the Reset Button, the GPIOs, and connectivity interfaces * Omega Hardware Pin-out Diagrams for the Omega and Expansion Dock: * Pin-Outs Electrical Schematics Electrical schematics for the Omega, Docks, and Expansions: Omega Expansion Dock Mini Dock Arduino Dock Relay Expansion Servo Expansion OLED Expansion Ethernet Expansion Technical Drawings Engineering drawings outlining the dimensions of the Omega and Expansions: * Omega * Expansion Dock * Mini Dock * Arduino Dock * Relay Expansion * Servo Expansion * Ethernet Expansion * OLED Expansion Onion Library Documentation The wiki is moving! The following articles can be found in the Onion Docs already, and will be updated there. (* - denotes articles we still need to move as of the time this was updated) Documentation of the use of any Libraries written by the Onion team: C Communication Protocol Libraries I2C C Library SPI C Library Python Communication Protocol Libraries I2C Python Library SPI Python Library GPIO Python Module C Libraries for Omega Expansions PWM Expansion Relay Expansion OLED Expansion Python Modules for Omega Expansions PWM Expansion Relay Expansion OLED Expansion Node.JS Modules for Omega Expansions * PWM Expansion Relay Expansion OLED Expansion Arduino Dock Libraries * Controlling Neopixels: C Library and Python Module","title":"Documentation Wiki"},{"location":"tutorials/OnionWiki/Documentation/Contents/#documentation-wiki","text":"The Documentation portion of the Onion Wiki contains information released by Onion on anything technical related to the Omega. This can include anything from information about the latest firmware, to basic information regarding the hardware, to libraries created for Omega expansions. [[ TOC ]]","title":"Documentation Wiki"},{"location":"tutorials/OnionWiki/Documentation/Contents/#firmware-change-log","text":"The wiki is moving! These articles can be found in the Onion Docs already, and will be updated there. A detailed rundown of changes in each firmware version: * Firmware Change-log","title":"Firmware Change-log"},{"location":"tutorials/OnionWiki/Documentation/Contents/#hardware-documentation","text":"","title":"Hardware Documentation"},{"location":"tutorials/OnionWiki/Documentation/Contents/#omega","text":"A run-down of the Omega's technical specs and features, as well as an introduction to the Reset Button, the GPIOs, and connectivity interfaces * Omega Hardware Pin-out Diagrams for the Omega and Expansion Dock: * Pin-Outs","title":"Omega"},{"location":"tutorials/OnionWiki/Documentation/Contents/#electrical-schematics","text":"Electrical schematics for the Omega, Docks, and Expansions: Omega Expansion Dock Mini Dock Arduino Dock Relay Expansion Servo Expansion OLED Expansion Ethernet Expansion","title":"Electrical Schematics"},{"location":"tutorials/OnionWiki/Documentation/Contents/#technical-drawings","text":"Engineering drawings outlining the dimensions of the Omega and Expansions: * Omega * Expansion Dock * Mini Dock * Arduino Dock * Relay Expansion * Servo Expansion * Ethernet Expansion * OLED Expansion","title":"Technical Drawings"},{"location":"tutorials/OnionWiki/Documentation/Contents/#onion-library-documentation","text":"The wiki is moving! The following articles can be found in the Onion Docs already, and will be updated there. (* - denotes articles we still need to move as of the time this was updated) Documentation of the use of any Libraries written by the Onion team: C Communication Protocol Libraries I2C C Library SPI C Library Python Communication Protocol Libraries I2C Python Library SPI Python Library GPIO Python Module C Libraries for Omega Expansions PWM Expansion Relay Expansion OLED Expansion Python Modules for Omega Expansions PWM Expansion Relay Expansion OLED Expansion Node.JS Modules for Omega Expansions * PWM Expansion Relay Expansion OLED Expansion Arduino Dock Libraries * Controlling Neopixels: C Library and Python Module","title":"Onion Library Documentation"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/","text":"Omega Firmware Changelog Log of all changes made to the Onion Omega OpenWRT Firmware [[ TOC ]] Version Syntax The Omega Firmware will be in the following format: A.B.C bXYZ The individual parts correspond to the following: * A is the ULTRA version * B is the Major version * C is the Minor version * XYZ is the build number For example: 0.0.6 b264 The build number will continuously increment over the course of development. Versions Definining the differences in each version change 0.1.4 Repo Fix Release. Fix for issue where Onion Repo Keys were not being installed by default, Omega users could not install Onion packages Created new release so all users get the fix! 0.1.3 Brin J2 Release. Updates to Device Client architecture, now supports additional setup modes and compatibility with latest Cloud services Updates to I2C Expansion Drivers: additional control added for Relay Expansion 0.1.2 Brin J1 Release. Firmware updates for Onion Cloud App Store Added onion-helper ubus service Updates to I2C Expansion Drivers 0.1.1 Brin M1 Release. Firmware updates for stable Onion Cloud support! Stable device client Support for GPS Expansion Onion sh library fix: no longer creating blank log files 0.1.0 Brin A2 Release. Firmware includes support for the Onion Cloud! Console Updates: * Settings App now includes Cloud Settings Tab, used to register the device with the Cloud, and then to view the cloud registration info * OLED App can now save converted image files to the Omega 0.0.8 Ando A1 Release. Added the following features to the firmware: * Bluetooth audio support using Onion customized packages * Network Manager that will automatically try to connect to recognized networks * Fix for Node.JS and NPM where HTML requests were erroneously resolving to IPv6 Console Updates: * Added Programming Calculator app * Added Webcam App * Overhauled WiFi settings apps 0.0.7 Modern Node Release. Added kernel changes to support NodeJs v4.3.1 Updates to Onion Drivers 0.0.6 Ando J1 Console Release. Added Resistor Calculator app. Implemented universal notification system. Added error notification to I2C app to indicate Expansion cannot be found. Settings app update: added loading icon to wifi setup (sta and ap), added download progress bar to firmware upgrade, added Omega LED blinking before Factory Reset 0.0.5 Ando N2 Console Release. Added apps for the PWM, Relay, and OLED Expansions, expanded the GPIO Control App. Added taskbar for apps. 0.0.4 Early November release of the Console. This series of releases is code-named Ando. Contains bug fixes, extends functionality of existing apps, added GPIO control app. 0.0.3 First release of the Console 0.0.2 Post production firmware 0.0.1 Initial firmware sent to be flashed at the factory Build Notes Defining the changes in each build. Note that if a number is missing, that build failed the deployment process. b330 Jul 8, 2016 Firmware 0.1.4 Release Fixed issue where keys for Onion Package Repo were not being installed by default b329 Jul 6, 2016 Finalized power-dock application for Power Dock release b328 Jun 24, 2016 Firmware 0.1.3 Release Updated device-client architecture to support additional setup modes and compatibility with Cloud services b327, b326 Jun 13, 2016 Updated I2C Exp Driver relay expansion w/ cli usage instructions b325 Jun 10, 2016 Firmware 0.1.2 Release Console Updates: * Fixed dropdown issue in GPIO and OLED apps Firmware Updates: * Added onion-helper, a c-based ubus service to facilitate better cloud interaction * Updated I2C Expansion Drivers, specifically the Relay * Extended to use all GPIOs available on MCP chip * Can now read relay state * Updates to ubus service to allow reading relay state * Removed power-dock testing application from firmware b324 May 31, 2016 Added power-dock application to firmware (for testing purposes) b323 May 31, 2016 I2C Expansion Driver version upped to 0.3 relay-exp app can now: Control all 8 MCP chip GPIOs Accept full I2C device address from the command line b322, b321 May 29, 2016 Library management script update: changed structure of output b320, b317, b316 May 24, 2016 Added hooks for build server and library management b315 May 20, 2016 Added I2C Expansion Node modules b314, b313 May 18, 2016 Added rpcsys ubus service package to firmware Updated onion-helper ubus service download function Better error handling Ability to run download in background b312 May 17, 2016 Updates to onion-helper ubus service b311, b310 May 12, 2016 Adding Transmission Console App to onion repo b309 May 9, 2016 Adding onion-helper c-based ubus service as a package b308 April 29, 2016 Firmware 0.1.1 Release Console Updates * Now at Brin M1 codename * Settings App will no longer be cached b307 April 28, 2016 device-client version upped to 0.5 Push out updates that fix connection hang in the event of a network outage b306 April 20, 2016 updates to the sh library to fix bug where blank tmp files kept getting created updates to fast-gpio to fix blank tmp files bug added ubus service to launch processes in the background b304 April 15, 2016 device-client version upped to 0.4 Push out the updates that fix the curl and threading memory leaks Updates to firmware database access scripts to decrease verbosity b303 April 13, 2016 Build Server related: Updated firmware database access scripts to match new firmware database web API b302 April 11, 2016 Added ogps to the onion packages repo. b301 April 10, 2016 * Added script to use with buildroot automated compilation: Checks compile exit codes and retries up to 2 additional times, returns last compile exit code b300 April 8, 2016 Version 0.1.0 Firmware Added support for the Onion Cloud Updated to latest version of the Console Settings App: Added Cloud Settings tab OLED App can now save converted images to the Omega b299 April 4, 2016 New wdb40 version: fixed issue with connecting to SSIDs with spaces b297 April 4, 2016 Added tmux back into the firmware New device-client version for repo: fixed device ID and secret location b296 April 2, 2016 Version 0.0.8 Firmware Updated to latest version of Console and WDB40 Console: * Added Calculator and Webcam Apps * Overhauled the WiFi Settings Apps WDB40: * Updated usage instructions b295 April 2, 2016 Removed deprecated ubus-intf package (functionality replaced by onion-ubus gpio method, saving space) Replaced wifisetup and wifisaint packages with wdb40 network manager Updated onion-ubus with new wdb40 install paths b294 April 2, 2016 Added Onion customized bluez and pulseaudio packages to Onion Repo Modified deployment script to correctly upload images and packages b293 Mar 31, 2016 Added kmod-input-uinput package into the build. b290, b289 Mar 30, 2016 Kernel config update now done by appending to config file from script (instead of overwriting), increased build stability Added uClibc toolchain patch that makes web requests default to IPv4 (Required for NodeJS to properly get HTML) Updated onion-ubus: modified and fixed gpio method b288 Mar 19, 2016 Added Onion GPIO Python module package to Onion Repo b283 Mar 9, 2016 Fix for failing build (caused by having some new options missing in the kernel config) b282 Mar 7, 2016 Updates to the Onion SPI library * better handling of device registration * usage printout is nicer b281 Mar 5, 2016 Added NodeJS v4.3.1 as a package Along with associated kernel changes Updates to Onion SPI library arduino-dock, avrdude, and tmux packages are no longer included in the build b278 Feb 23, 2016 Now building onion I2C python library as an optional module (in onion repo) Added Onion spi library, command line spi tool, and python module as modules in repo b277 Feb 22, 2016 I2C Expansions Software Updates * Extended oled library functionality * functions for: text/image column addressing, writing a single byte to the screen, setting cursor by row and pixel * Implemented Python object for the i2c library * Updated all c-python modules with better error checking: * checks for correct arguments * checks for successful C function calls b275 Jan 27, 2016 Added whois command to Busybox b271 Jan 25, 2016 Updates to firmware database access scripts b270 Jan 25, 2016 Added kmod-w1-slave-therm kernel package for One-Wire temperature sensor family. Updated PATH variable to match new OpenWRT default. b269 Jan 21, 2016 Added kmod-dma-buf package to resolve build issue b267 Jan 20, 2016 Added one-wire kernel modules: * kmod-w1 * kmod-w1-gpio-custom * kmod-w1-master-gpio b266 Added gpio-test package to Onion Package Repo b265 Enabled GPIO Edge irq patch Kernel Modules added: * kmod-bluetooth * kmod-gpio-irq - enable interrupts from gpio b264 Ando J1 Console Release Upgrading to version 0.0.6 Console Updates: * Added Resistor Calculator App * Implemented universal notification system * Added error notification to I2C expansion apps if expansion cannot be found * Cosmetic updates to Settings app, making it more user friendly Firmware Update: * ~~Added an additional patch for GPIO Edge irq~~ * Removed GPIO Edge irq patches b262 Added support for GPIO Edge irq b260 Added usb audio card kernel modules ( kmod-usb-audio and kmod-sound-core ) b259 oupgrade update: * added ca-certificates packages to base build * oupgrade script now points to https version of repo info file, various code clean-up * onion sh lib: added function to wget a file from a url b258 i2c library update: implemented writeBuffer function that takes an address and a data buffer, and then a private writeBuffer function that creates a buffer with the i2c register address at element 0, and the data in the rest of the elements, then uses this to perform the i2c write i2c-exp cli apps: changed verbosity option to be cumulative neopixel tool: updated to use new i2c library writeBuffer function fixed setBuffer class function: now returns valid EXIT_SUCCESS/EXIT_FAILURE b256, b255 python package update: added base packages to setup OmegaExpansion and OmegaArduinoDock Python Packages b254 neopixel-tool fix: set pixel can now accept hex codes with 0x prefix b252 oled-exp fix: diagonal scrolling no longer leaves out the bottom row b251, b250, b249 Neopixel Class: * added brightness control to c++ class (added to cli app, c-lib, python module, and python example) * added overloaded Init function that sets pin, length of strip, and performs init * fixes for dynamic memory clean-up b247 Added utilities and libraries for controlling Neopixels with the Arduino Dock b245 oled-exp driver fix: resolved issue with column addressing for text and images, all images should display correctly now b244 - b241 Invalid builds resolving build server + strider deployment issues b240, b239 Added i2c-exp python libraries as packages b238, b237, b236, b235 oled-exp changes * fix for oledDraw: now reset the column addressing to 0-127 so images are displayed correctly * changed name of contrasting setting function to oledSetBrightness * fix: correctly set the cursor for columns (setcursor function now sets column addressing to 0-125 since changing the column addressing resets the column cursor pointer) b234 Added g=grep alias to profile Updated pwm-exp usage printout to include oscillator sleep functionality b233 Console Bug Fix: permission denied error did not result in relogin b232 Ando N2 Console Release Upgrading to version 0.0.5 Console Updates: * Added apps for the PWM, Relay, and OLED Expansions * Extended the GPIO Control App to include the Expansion Dock as well * Added a taskbar to easily switch between apps b231 Pre Console Release Test Build #2 Fixes: * Base system * Typo fix for ll alias * Onion Repo Key: now installs with correct name and as a signed signature file b230 Pre Console Release Test Build Added functionality: * Onion UBUS Service * added i2c-scan functionality: get a list of addresses of all connected I2C slaves * I2C Expansions * pwm-exp * Implemented ability to set oscillator to sleep (disable all pwm signals) * Added check to see if oscillator is running, if not, start it up (automatic initialization, running with -i at the beginning is no longer necessary) * oled-exp * Developed driver for all oled exp functionality * init, clear, turn display on/off, invert display, dim the display, set the cursor, writing a message, scrolling (horizontal and diagonal), displaying an image * ubus integration for all three apps (pwm-exp, relay-exp, oled-exp) * created static libraries of the driver code for all three expansions (pwm, relay, oled) * SH Library * json argument parser: added better parsing, now wraps values with double quotes if they have certain special characters * Packages * Added Onion specific keys for signing Onion packages * Compiled NodeJs v0.10.5, available as a package in Onion Repo * Base System * Will now preserve /root during a sysupgrade (firmware update) * Enabled access to the Onion Package Repo (opkg feed setup) * Added automatic ll alias * Deploy * Sign Onion Repo packages with Onion key * Deploy all packages to the Onion Repo b229 Integration of i2c-exp-drivers into ubus via rpcd b228 Package repo keys feed now uses the keys from the Buildroot (this) Repo b227 Resolved conflict with OpenWRT NodeJS package, fixes for packages signature generation b225 Moved keys to buildroot repo. Changed scripts to push new signature of Packages file. b223 Added nodejs package, deploy also pushes Onion packages to the repo b222 Added signature keys for Onion Package Repo b221 Arduino Dock update: added placeholder lua sketch that is used by Arduino IDE when flashing i2c library: updated read function to return a buffer array, meant to increase compatibility as a library debug library: added an onion debug library, implements print statements with a severity level for now i2c-exp-drivers: updated to reflect i2c lib changes and debug lib addition ads1x15 driver: updated to reflect i2c lib changes and debug lib addition b220 Added arduino-dock package: all utilities required for use of Arduino Dock b219 Console GPIO App fix b217 Added avrdude programmer and its' dependencies to build b216 Added kmod-hid, kmod-usb-hid, and kmod-usb-printer modules to build. b214 New console release. Incrementing version number. b213 Added sftp server module b212 updates to i2c lib, fixed issue with write/read function status return added driver for ads1x15 chip as built-in module added modules kmod-video-uvc and mjpg-streamer for use with USB webcams b211 fast-gpio: implemented print verbosity control, along with json output support onion ubus: added fast-gpio support (pwm times-out) b209 i2c library: headers and static library files are now properly installed and can be used by other packages added app to use ADS1X15 ADC+PGA chip b208 i2c library: implemented output verbosity and some code clean-up sh lib: added clean-up of empty log files added chpasswd utility to busybox b207 i2c lib: expanded to perform multi-byte i2c read and write operations b206, b205 relay-exp tool now supports different dip-switch settings to change I2C address, added better error checking b204 Changes to i2c expansions: * changed the repo name * clean-up of pwm-exp print outs * exposed i2c and mcp23008 libraries b203, b202 Added login utility for busybox Changed shellinabox to launch busybox login utility b199 Fix for shellinabox default PATH variable b198, b197 Added relay-exp application driver for the Relay expansion Added i2c-tools as built-in module b196 Infra update: automatically updates the firmware db when a new image is released b193 New version of pwm-exp: * fix for setting pwm frequency * command line arguments can now be float * supports only doing pwm init from command line * added input mode where pulse width and period can be used * added error checking for i2c reads b192, b191 Added support for ext2/3/4 filesystems b190 New version of fast-gpio: now disables running pwm if set or set-direction commands are used b189, b188 Added Onion Console, removed setup wizard. Incremented to version 0.0.3 b187 Removed Pwm Expansion test script b186, b185 Temporary: added test script for pwm expansion b184 Changed shellinabox default css b183, b182 Added Onion PWM Expansion Driver b181 Updated shellinabox daemon management again: enabled auto-start b180 Added i2c-tools package as a module b179, b178 Login banner and shellinabox changes 179: Updated shellinabox package to pull from Onion repo, fixed issue with build setup script 178: Changed login banner, changes to shellinabox daemon management (no longer auto-starts or auto-respawns) b177 Onion sh lib updates for use with the Console b176 Added GPS expansion usb drivers b175 Added several usb-serial drivers b174, b173, b172 Fixes for fast-gpio * b174: added ability to set and read direction of pins b171 Added libugpio and gpioctl packages to the build b170 Following changes: * oupgrade: added build number to text-based check * wifisetup: added option to specify Omega's IP addr when setting up AP network * added fast-gpio * added onion-sh-lib, only used by fast-gpio for now b169 Added fix for opkg sources b168 Added omega-led service to onion-ubus Enables ubus control of the LED built-in to the Omega b167, b166 Updates to oupgrade and onion-ubus * oupgrade: JSON output update: Now outputs build numbers for device and repo, and build_mismatch boolean (if the device and repo are the same version, checks the build numbers) * Added dir-list to onion ubus service: returns an array of all directories within a specified directory b165, b164, b163 Added shellinabox to the build. Shellinabox provides an AJAX interface to the command line shell. b159 Updated to Version 0.0.2","title":"Omega Firmware Changelog"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#omega-firmware-changelog","text":"Log of all changes made to the Onion Omega OpenWRT Firmware [[ TOC ]]","title":"Omega Firmware Changelog"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#version-syntax","text":"The Omega Firmware will be in the following format: A.B.C bXYZ The individual parts correspond to the following: * A is the ULTRA version * B is the Major version * C is the Minor version * XYZ is the build number For example: 0.0.6 b264 The build number will continuously increment over the course of development.","title":"Version Syntax"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#versions","text":"Definining the differences in each version change","title":"Versions"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#014","text":"Repo Fix Release. Fix for issue where Onion Repo Keys were not being installed by default, Omega users could not install Onion packages Created new release so all users get the fix!","title":"0.1.4"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#013","text":"Brin J2 Release. Updates to Device Client architecture, now supports additional setup modes and compatibility with latest Cloud services Updates to I2C Expansion Drivers: additional control added for Relay Expansion","title":"0.1.3"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#012","text":"Brin J1 Release. Firmware updates for Onion Cloud App Store Added onion-helper ubus service Updates to I2C Expansion Drivers","title":"0.1.2"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#011","text":"Brin M1 Release. Firmware updates for stable Onion Cloud support! Stable device client Support for GPS Expansion Onion sh library fix: no longer creating blank log files","title":"0.1.1"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#010","text":"Brin A2 Release. Firmware includes support for the Onion Cloud! Console Updates: * Settings App now includes Cloud Settings Tab, used to register the device with the Cloud, and then to view the cloud registration info * OLED App can now save converted image files to the Omega","title":"0.1.0"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#008","text":"Ando A1 Release. Added the following features to the firmware: * Bluetooth audio support using Onion customized packages * Network Manager that will automatically try to connect to recognized networks * Fix for Node.JS and NPM where HTML requests were erroneously resolving to IPv6 Console Updates: * Added Programming Calculator app * Added Webcam App * Overhauled WiFi settings apps","title":"0.0.8"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#007","text":"Modern Node Release. Added kernel changes to support NodeJs v4.3.1 Updates to Onion Drivers","title":"0.0.7"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#006","text":"Ando J1 Console Release. Added Resistor Calculator app. Implemented universal notification system. Added error notification to I2C app to indicate Expansion cannot be found. Settings app update: added loading icon to wifi setup (sta and ap), added download progress bar to firmware upgrade, added Omega LED blinking before Factory Reset","title":"0.0.6"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#005","text":"Ando N2 Console Release. Added apps for the PWM, Relay, and OLED Expansions, expanded the GPIO Control App. Added taskbar for apps.","title":"0.0.5"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#004","text":"Early November release of the Console. This series of releases is code-named Ando. Contains bug fixes, extends functionality of existing apps, added GPIO control app.","title":"0.0.4"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#003","text":"First release of the Console","title":"0.0.3"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#002","text":"Post production firmware","title":"0.0.2"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#001","text":"Initial firmware sent to be flashed at the factory","title":"0.0.1"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#build-notes","text":"Defining the changes in each build. Note that if a number is missing, that build failed the deployment process.","title":"Build Notes"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b330","text":"Jul 8, 2016 Firmware 0.1.4 Release Fixed issue where keys for Onion Package Repo were not being installed by default","title":"b330"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b329","text":"Jul 6, 2016 Finalized power-dock application for Power Dock release","title":"b329"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b328","text":"Jun 24, 2016 Firmware 0.1.3 Release Updated device-client architecture to support additional setup modes and compatibility with Cloud services","title":"b328"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b327-b326","text":"Jun 13, 2016 Updated I2C Exp Driver relay expansion w/ cli usage instructions","title":"b327, b326"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b325","text":"Jun 10, 2016 Firmware 0.1.2 Release Console Updates: * Fixed dropdown issue in GPIO and OLED apps Firmware Updates: * Added onion-helper, a c-based ubus service to facilitate better cloud interaction * Updated I2C Expansion Drivers, specifically the Relay * Extended to use all GPIOs available on MCP chip * Can now read relay state * Updates to ubus service to allow reading relay state * Removed power-dock testing application from firmware","title":"b325"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b324","text":"May 31, 2016 Added power-dock application to firmware (for testing purposes)","title":"b324"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b323","text":"May 31, 2016 I2C Expansion Driver version upped to 0.3 relay-exp app can now: Control all 8 MCP chip GPIOs Accept full I2C device address from the command line","title":"b323"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b322-b321","text":"May 29, 2016 Library management script update: changed structure of output","title":"b322, b321"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b320-b317-b316","text":"May 24, 2016 Added hooks for build server and library management","title":"b320, b317, b316"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b315","text":"May 20, 2016 Added I2C Expansion Node modules","title":"b315"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b314-b313","text":"May 18, 2016 Added rpcsys ubus service package to firmware Updated onion-helper ubus service download function Better error handling Ability to run download in background","title":"b314, b313"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b312","text":"May 17, 2016 Updates to onion-helper ubus service","title":"b312"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b311-b310","text":"May 12, 2016 Adding Transmission Console App to onion repo","title":"b311, b310"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b309","text":"May 9, 2016 Adding onion-helper c-based ubus service as a package","title":"b309"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b308","text":"April 29, 2016 Firmware 0.1.1 Release Console Updates * Now at Brin M1 codename * Settings App will no longer be cached","title":"b308"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b307","text":"April 28, 2016 device-client version upped to 0.5 Push out updates that fix connection hang in the event of a network outage","title":"b307"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b306","text":"April 20, 2016 updates to the sh library to fix bug where blank tmp files kept getting created updates to fast-gpio to fix blank tmp files bug added ubus service to launch processes in the background","title":"b306"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b304","text":"April 15, 2016 device-client version upped to 0.4 Push out the updates that fix the curl and threading memory leaks Updates to firmware database access scripts to decrease verbosity","title":"b304"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b303","text":"April 13, 2016 Build Server related: Updated firmware database access scripts to match new firmware database web API","title":"b303"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b302","text":"April 11, 2016 Added ogps to the onion packages repo.","title":"b302"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b301","text":"April 10, 2016 * Added script to use with buildroot automated compilation: Checks compile exit codes and retries up to 2 additional times, returns last compile exit code","title":"b301"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b300","text":"April 8, 2016 Version 0.1.0 Firmware Added support for the Onion Cloud Updated to latest version of the Console Settings App: Added Cloud Settings tab OLED App can now save converted images to the Omega","title":"b300"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b299","text":"April 4, 2016 New wdb40 version: fixed issue with connecting to SSIDs with spaces","title":"b299"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b297","text":"April 4, 2016 Added tmux back into the firmware New device-client version for repo: fixed device ID and secret location","title":"b297"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b296","text":"April 2, 2016 Version 0.0.8 Firmware Updated to latest version of Console and WDB40 Console: * Added Calculator and Webcam Apps * Overhauled the WiFi Settings Apps WDB40: * Updated usage instructions","title":"b296"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b295","text":"April 2, 2016 Removed deprecated ubus-intf package (functionality replaced by onion-ubus gpio method, saving space) Replaced wifisetup and wifisaint packages with wdb40 network manager Updated onion-ubus with new wdb40 install paths","title":"b295"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b294","text":"April 2, 2016 Added Onion customized bluez and pulseaudio packages to Onion Repo Modified deployment script to correctly upload images and packages","title":"b294"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b293","text":"Mar 31, 2016 Added kmod-input-uinput package into the build.","title":"b293"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b290-b289","text":"Mar 30, 2016 Kernel config update now done by appending to config file from script (instead of overwriting), increased build stability Added uClibc toolchain patch that makes web requests default to IPv4 (Required for NodeJS to properly get HTML) Updated onion-ubus: modified and fixed gpio method","title":"b290, b289"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b288","text":"Mar 19, 2016 Added Onion GPIO Python module package to Onion Repo","title":"b288"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b283","text":"Mar 9, 2016 Fix for failing build (caused by having some new options missing in the kernel config)","title":"b283"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b282","text":"Mar 7, 2016 Updates to the Onion SPI library * better handling of device registration * usage printout is nicer","title":"b282"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b281","text":"Mar 5, 2016 Added NodeJS v4.3.1 as a package Along with associated kernel changes Updates to Onion SPI library arduino-dock, avrdude, and tmux packages are no longer included in the build","title":"b281"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b278","text":"Feb 23, 2016 Now building onion I2C python library as an optional module (in onion repo) Added Onion spi library, command line spi tool, and python module as modules in repo","title":"b278"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b277","text":"Feb 22, 2016 I2C Expansions Software Updates * Extended oled library functionality * functions for: text/image column addressing, writing a single byte to the screen, setting cursor by row and pixel * Implemented Python object for the i2c library * Updated all c-python modules with better error checking: * checks for correct arguments * checks for successful C function calls","title":"b277"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b275","text":"Jan 27, 2016 Added whois command to Busybox","title":"b275"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b271","text":"Jan 25, 2016 Updates to firmware database access scripts","title":"b271"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b270","text":"Jan 25, 2016 Added kmod-w1-slave-therm kernel package for One-Wire temperature sensor family. Updated PATH variable to match new OpenWRT default.","title":"b270"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b269","text":"Jan 21, 2016 Added kmod-dma-buf package to resolve build issue","title":"b269"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b267","text":"Jan 20, 2016 Added one-wire kernel modules: * kmod-w1 * kmod-w1-gpio-custom * kmod-w1-master-gpio","title":"b267"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b266","text":"Added gpio-test package to Onion Package Repo","title":"b266"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b265","text":"Enabled GPIO Edge irq patch Kernel Modules added: * kmod-bluetooth * kmod-gpio-irq - enable interrupts from gpio","title":"b265"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b264","text":"Ando J1 Console Release Upgrading to version 0.0.6 Console Updates: * Added Resistor Calculator App * Implemented universal notification system * Added error notification to I2C expansion apps if expansion cannot be found * Cosmetic updates to Settings app, making it more user friendly Firmware Update: * ~~Added an additional patch for GPIO Edge irq~~ * Removed GPIO Edge irq patches","title":"b264"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b262","text":"Added support for GPIO Edge irq","title":"b262"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b260","text":"Added usb audio card kernel modules ( kmod-usb-audio and kmod-sound-core )","title":"b260"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b259","text":"oupgrade update: * added ca-certificates packages to base build * oupgrade script now points to https version of repo info file, various code clean-up * onion sh lib: added function to wget a file from a url","title":"b259"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b258","text":"i2c library update: implemented writeBuffer function that takes an address and a data buffer, and then a private writeBuffer function that creates a buffer with the i2c register address at element 0, and the data in the rest of the elements, then uses this to perform the i2c write i2c-exp cli apps: changed verbosity option to be cumulative neopixel tool: updated to use new i2c library writeBuffer function fixed setBuffer class function: now returns valid EXIT_SUCCESS/EXIT_FAILURE","title":"b258"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b256-b255","text":"python package update: added base packages to setup OmegaExpansion and OmegaArduinoDock Python Packages","title":"b256, b255"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b254","text":"neopixel-tool fix: set pixel can now accept hex codes with 0x prefix","title":"b254"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b252","text":"oled-exp fix: diagonal scrolling no longer leaves out the bottom row","title":"b252"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b251-b250-b249","text":"Neopixel Class: * added brightness control to c++ class (added to cli app, c-lib, python module, and python example) * added overloaded Init function that sets pin, length of strip, and performs init * fixes for dynamic memory clean-up","title":"b251, b250, b249"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b247","text":"Added utilities and libraries for controlling Neopixels with the Arduino Dock","title":"b247"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b245","text":"oled-exp driver fix: resolved issue with column addressing for text and images, all images should display correctly now","title":"b245"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b244-b241","text":"Invalid builds resolving build server + strider deployment issues","title":"b244 - b241"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b240-b239","text":"Added i2c-exp python libraries as packages","title":"b240, b239"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b238-b237-b236-b235","text":"oled-exp changes * fix for oledDraw: now reset the column addressing to 0-127 so images are displayed correctly * changed name of contrasting setting function to oledSetBrightness * fix: correctly set the cursor for columns (setcursor function now sets column addressing to 0-125 since changing the column addressing resets the column cursor pointer)","title":"b238, b237, b236, b235"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b234","text":"Added g=grep alias to profile Updated pwm-exp usage printout to include oscillator sleep functionality","title":"b234"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b233","text":"Console Bug Fix: permission denied error did not result in relogin","title":"b233"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b232","text":"Ando N2 Console Release Upgrading to version 0.0.5 Console Updates: * Added apps for the PWM, Relay, and OLED Expansions * Extended the GPIO Control App to include the Expansion Dock as well * Added a taskbar to easily switch between apps","title":"b232"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b231","text":"Pre Console Release Test Build #2 Fixes: * Base system * Typo fix for ll alias * Onion Repo Key: now installs with correct name and as a signed signature file","title":"b231"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b230","text":"Pre Console Release Test Build Added functionality: * Onion UBUS Service * added i2c-scan functionality: get a list of addresses of all connected I2C slaves * I2C Expansions * pwm-exp * Implemented ability to set oscillator to sleep (disable all pwm signals) * Added check to see if oscillator is running, if not, start it up (automatic initialization, running with -i at the beginning is no longer necessary) * oled-exp * Developed driver for all oled exp functionality * init, clear, turn display on/off, invert display, dim the display, set the cursor, writing a message, scrolling (horizontal and diagonal), displaying an image * ubus integration for all three apps (pwm-exp, relay-exp, oled-exp) * created static libraries of the driver code for all three expansions (pwm, relay, oled) * SH Library * json argument parser: added better parsing, now wraps values with double quotes if they have certain special characters * Packages * Added Onion specific keys for signing Onion packages * Compiled NodeJs v0.10.5, available as a package in Onion Repo * Base System * Will now preserve /root during a sysupgrade (firmware update) * Enabled access to the Onion Package Repo (opkg feed setup) * Added automatic ll alias * Deploy * Sign Onion Repo packages with Onion key * Deploy all packages to the Onion Repo","title":"b230"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b229","text":"Integration of i2c-exp-drivers into ubus via rpcd","title":"b229"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b228","text":"Package repo keys feed now uses the keys from the Buildroot (this) Repo","title":"b228"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b227","text":"Resolved conflict with OpenWRT NodeJS package, fixes for packages signature generation","title":"b227"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b225","text":"Moved keys to buildroot repo. Changed scripts to push new signature of Packages file.","title":"b225"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b223","text":"Added nodejs package, deploy also pushes Onion packages to the repo","title":"b223"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b222","text":"Added signature keys for Onion Package Repo","title":"b222"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b221","text":"Arduino Dock update: added placeholder lua sketch that is used by Arduino IDE when flashing i2c library: updated read function to return a buffer array, meant to increase compatibility as a library debug library: added an onion debug library, implements print statements with a severity level for now i2c-exp-drivers: updated to reflect i2c lib changes and debug lib addition ads1x15 driver: updated to reflect i2c lib changes and debug lib addition","title":"b221"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b220","text":"Added arduino-dock package: all utilities required for use of Arduino Dock","title":"b220"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b219","text":"Console GPIO App fix","title":"b219"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b217","text":"Added avrdude programmer and its' dependencies to build","title":"b217"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b216","text":"Added kmod-hid, kmod-usb-hid, and kmod-usb-printer modules to build.","title":"b216"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b214","text":"New console release. Incrementing version number.","title":"b214"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b213","text":"Added sftp server module","title":"b213"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b212","text":"updates to i2c lib, fixed issue with write/read function status return added driver for ads1x15 chip as built-in module added modules kmod-video-uvc and mjpg-streamer for use with USB webcams","title":"b212"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b211","text":"fast-gpio: implemented print verbosity control, along with json output support onion ubus: added fast-gpio support (pwm times-out)","title":"b211"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b209","text":"i2c library: headers and static library files are now properly installed and can be used by other packages added app to use ADS1X15 ADC+PGA chip","title":"b209"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b208","text":"i2c library: implemented output verbosity and some code clean-up sh lib: added clean-up of empty log files added chpasswd utility to busybox","title":"b208"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b207","text":"i2c lib: expanded to perform multi-byte i2c read and write operations","title":"b207"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b206-b205","text":"relay-exp tool now supports different dip-switch settings to change I2C address, added better error checking","title":"b206, b205"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b204","text":"Changes to i2c expansions: * changed the repo name * clean-up of pwm-exp print outs * exposed i2c and mcp23008 libraries","title":"b204"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b203-b202","text":"Added login utility for busybox Changed shellinabox to launch busybox login utility","title":"b203, b202"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b199","text":"Fix for shellinabox default PATH variable","title":"b199"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b198-b197","text":"Added relay-exp application driver for the Relay expansion Added i2c-tools as built-in module","title":"b198, b197"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b196","text":"Infra update: automatically updates the firmware db when a new image is released","title":"b196"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b193","text":"New version of pwm-exp: * fix for setting pwm frequency * command line arguments can now be float * supports only doing pwm init from command line * added input mode where pulse width and period can be used * added error checking for i2c reads","title":"b193"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b192-b191","text":"Added support for ext2/3/4 filesystems","title":"b192, b191"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b190","text":"New version of fast-gpio: now disables running pwm if set or set-direction commands are used","title":"b190"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b189-b188","text":"Added Onion Console, removed setup wizard. Incremented to version 0.0.3","title":"b189, b188"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b187","text":"Removed Pwm Expansion test script","title":"b187"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b186-b185","text":"Temporary: added test script for pwm expansion","title":"b186, b185"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b184","text":"Changed shellinabox default css","title":"b184"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b183-b182","text":"Added Onion PWM Expansion Driver","title":"b183, b182"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b181","text":"Updated shellinabox daemon management again: enabled auto-start","title":"b181"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b180","text":"Added i2c-tools package as a module","title":"b180"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b179-b178","text":"Login banner and shellinabox changes 179: Updated shellinabox package to pull from Onion repo, fixed issue with build setup script 178: Changed login banner, changes to shellinabox daemon management (no longer auto-starts or auto-respawns)","title":"b179, b178"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b177","text":"Onion sh lib updates for use with the Console","title":"b177"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b176","text":"Added GPS expansion usb drivers","title":"b176"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b175","text":"Added several usb-serial drivers","title":"b175"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b174-b173-b172","text":"Fixes for fast-gpio * b174: added ability to set and read direction of pins","title":"b174, b173, b172"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b171","text":"Added libugpio and gpioctl packages to the build","title":"b171"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b170","text":"Following changes: * oupgrade: added build number to text-based check * wifisetup: added option to specify Omega's IP addr when setting up AP network * added fast-gpio * added onion-sh-lib, only used by fast-gpio for now","title":"b170"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b169","text":"Added fix for opkg sources","title":"b169"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b168","text":"Added omega-led service to onion-ubus Enables ubus control of the LED built-in to the Omega","title":"b168"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b167-b166","text":"Updates to oupgrade and onion-ubus * oupgrade: JSON output update: Now outputs build numbers for device and repo, and build_mismatch boolean (if the device and repo are the same version, checks the build numbers) * Added dir-list to onion ubus service: returns an array of all directories within a specified directory","title":"b167, b166"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b165-b164-b163","text":"Added shellinabox to the build. Shellinabox provides an AJAX interface to the command line shell.","title":"b165, b164, b163"},{"location":"tutorials/OnionWiki/Documentation/Firmware-Changelog/#b159","text":"Updated to Version 0.0.2","title":"b159"},{"location":"tutorials/OnionWiki/Documentation/Cloud/Steup-Omega-for-the-Onion-Cloud/","text":"Setup Omega for the Onion Cloud What is the Onion Cloud? The Onion Cloud is an online service that maps an IoT device (in our case the Omega) to the Web as a set of RESTful APIs. These APIs are no different from the Restful APIs of typical Web services such as Facebook or Twitter, and they allow these IoT devices to be accessed remotely via standard API calls. Now, you can get physical devices to interact with your software, other Web services, or to get the devices to interact with each other. Method 1: Setup using the Console Step 1: Upgrade the Omega to the Newest Firmware The first step is to perform an upgrade of the Omega firmware. This installs all the required packages to communicate with the Onion Cloud, and also ensures that these packages have all the latest bug fixes and security patches. First, make sure that your Omega is connected to the Internet. Then, to perform the upgrade, log into the Linux commandline using the Terminal app on the Console, and run the following command: oupgrade -l The Omega will download the newest firmware and start the firmware upgrade. Please DO NOT roboot or uplug the Omega when the upgrade is taking place, doing so will risk bricking the device. Step 2: Log into the Onion Cloud Once the firmware upgrade has completed, open up a new window on your browser and navigate to https://cloud.onion.io . Login with your Onion Account (the same login you use for the Community and the Store). Once you are logged in, click on the Device Manager app. This will be the app that you will be using to manage all your devices as well as devices that other people have shared with you. Step 3: Create a New Device on the Onion Cloud In the Device Manager app, click on the New Device button on the toolbar. A window will pop up and prompt you for the Name and Description of your device, then press Create Device . Step 4: Generate the Setup Code You should see you device being added under a table called My Devices . Now click on the device that you have just created to enter the detailed view. Click on the Setup Code button on the toolbar, a window will pop up and a display an one-time setup code. Highlight the code and copy it to your clipboard. Step 5: Setup the Omega Finally, return to the console on the Omega you want to connect to the Onion Cloud, and open the Settings app. To the left, you should see a tab called Cloud , click on it and enter the setup code you have just copied and click on Save . And that's it! Your Omega is now connected to the Onion Cloud! For more information on how to use the Onion Cloud, please take a look at the tutorial here. Method 2: Setup using the Command Line Step 1: Upgrade the Omega to the Newest Firmware The first step is to perform an upgrade of the Omega firmware. This installs all the required packages to communicate with the Onion Cloud, and also ensures that these packages have all the latest bug fixes and security patches. First, make sure that your Omega is connected to the Internet. Then, to perform the upgrade, log into the Linux commandline via ssh or the serial terminal, and run the following command: oupgrade -l The Omega will download the newest firmware and start the firmware upgrade. Please DO NOT roboot or uplug the Omega when the upgrade is taking place, doing so will risk bricking the device. Step 2: Log into the Onion Cloud Once the firmware upgrade has completed, open up a new window on your browser and navigate to https://cloud.onion.io . Login with your Onion Account (the same login you use for the Community and the Store). Once you are logged in, click on the Device Manager app. This will be the app that you will be using to manage all your devices as well as devices that other people have shared with you. Step 3: Create a New Device on the Onion Cloud In the Device Manager app, click on the New Device button on the toolbar. A window will pop up and prompt you for the Name and Description of your device, then press Create Device . Step 4: Generate the Setup Code You should see you device being added under a table called My Devices . Now click on the device that you have just created to enter the detailed view. Click on the Setup Code button on the toolbar, a window will pop up and a display an one-time setup code. Highlight the code and copy it to your clipboard. Step 5: Setup the Omega Finally, return to the Linux commandline on the Omega you want to connect to the Onion Cloud, and run the following command: onion-cloud setup setup code where setup code is the code that you just copied from the Onion Cloud. And that's it! Your Omega is now connected to the Onion Cloud! Currently, we are still working on creating the documentation for the Onion Cloud. For now, you can remote control your Omega with the Device Explorer app. More tutorials and documentation will be made available soon. Happy Hacking!","title":"Setup Omega for the Onion Cloud"},{"location":"tutorials/OnionWiki/Documentation/Cloud/Steup-Omega-for-the-Onion-Cloud/#setup-omega-for-the-onion-cloud","text":"","title":"Setup Omega for the Onion Cloud"},{"location":"tutorials/OnionWiki/Documentation/Cloud/Steup-Omega-for-the-Onion-Cloud/#what-is-the-onion-cloud","text":"The Onion Cloud is an online service that maps an IoT device (in our case the Omega) to the Web as a set of RESTful APIs. These APIs are no different from the Restful APIs of typical Web services such as Facebook or Twitter, and they allow these IoT devices to be accessed remotely via standard API calls. Now, you can get physical devices to interact with your software, other Web services, or to get the devices to interact with each other.","title":"What is the Onion Cloud?"},{"location":"tutorials/OnionWiki/Documentation/Cloud/Steup-Omega-for-the-Onion-Cloud/#method-1-setup-using-the-console","text":"","title":"Method 1: Setup using the Console"},{"location":"tutorials/OnionWiki/Documentation/Cloud/Steup-Omega-for-the-Onion-Cloud/#step-1-upgrade-the-omega-to-the-newest-firmware","text":"The first step is to perform an upgrade of the Omega firmware. This installs all the required packages to communicate with the Onion Cloud, and also ensures that these packages have all the latest bug fixes and security patches. First, make sure that your Omega is connected to the Internet. Then, to perform the upgrade, log into the Linux commandline using the Terminal app on the Console, and run the following command: oupgrade -l The Omega will download the newest firmware and start the firmware upgrade. Please DO NOT roboot or uplug the Omega when the upgrade is taking place, doing so will risk bricking the device.","title":"Step 1: Upgrade the Omega to the Newest Firmware"},{"location":"tutorials/OnionWiki/Documentation/Cloud/Steup-Omega-for-the-Onion-Cloud/#step-2-log-into-the-onion-cloud","text":"Once the firmware upgrade has completed, open up a new window on your browser and navigate to https://cloud.onion.io . Login with your Onion Account (the same login you use for the Community and the Store). Once you are logged in, click on the Device Manager app. This will be the app that you will be using to manage all your devices as well as devices that other people have shared with you.","title":"Step 2: Log into the Onion Cloud"},{"location":"tutorials/OnionWiki/Documentation/Cloud/Steup-Omega-for-the-Onion-Cloud/#step-3-create-a-new-device-on-the-onion-cloud","text":"In the Device Manager app, click on the New Device button on the toolbar. A window will pop up and prompt you for the Name and Description of your device, then press Create Device .","title":"Step 3: Create a New Device on the Onion Cloud"},{"location":"tutorials/OnionWiki/Documentation/Cloud/Steup-Omega-for-the-Onion-Cloud/#step-4-generate-the-setup-code","text":"You should see you device being added under a table called My Devices . Now click on the device that you have just created to enter the detailed view. Click on the Setup Code button on the toolbar, a window will pop up and a display an one-time setup code. Highlight the code and copy it to your clipboard.","title":"Step 4: Generate the Setup Code"},{"location":"tutorials/OnionWiki/Documentation/Cloud/Steup-Omega-for-the-Onion-Cloud/#step-5-setup-the-omega","text":"Finally, return to the console on the Omega you want to connect to the Onion Cloud, and open the Settings app. To the left, you should see a tab called Cloud , click on it and enter the setup code you have just copied and click on Save . And that's it! Your Omega is now connected to the Onion Cloud! For more information on how to use the Onion Cloud, please take a look at the tutorial here.","title":"Step 5: Setup the Omega"},{"location":"tutorials/OnionWiki/Documentation/Cloud/Steup-Omega-for-the-Onion-Cloud/#method-2-setup-using-the-command-line","text":"","title":"Method 2: Setup using the Command Line"},{"location":"tutorials/OnionWiki/Documentation/Cloud/Steup-Omega-for-the-Onion-Cloud/#step-1-upgrade-the-omega-to-the-newest-firmware_1","text":"The first step is to perform an upgrade of the Omega firmware. This installs all the required packages to communicate with the Onion Cloud, and also ensures that these packages have all the latest bug fixes and security patches. First, make sure that your Omega is connected to the Internet. Then, to perform the upgrade, log into the Linux commandline via ssh or the serial terminal, and run the following command: oupgrade -l The Omega will download the newest firmware and start the firmware upgrade. Please DO NOT roboot or uplug the Omega when the upgrade is taking place, doing so will risk bricking the device.","title":"Step 1: Upgrade the Omega to the Newest Firmware"},{"location":"tutorials/OnionWiki/Documentation/Cloud/Steup-Omega-for-the-Onion-Cloud/#step-2-log-into-the-onion-cloud_1","text":"Once the firmware upgrade has completed, open up a new window on your browser and navigate to https://cloud.onion.io . Login with your Onion Account (the same login you use for the Community and the Store). Once you are logged in, click on the Device Manager app. This will be the app that you will be using to manage all your devices as well as devices that other people have shared with you.","title":"Step 2: Log into the Onion Cloud"},{"location":"tutorials/OnionWiki/Documentation/Cloud/Steup-Omega-for-the-Onion-Cloud/#step-3-create-a-new-device-on-the-onion-cloud_1","text":"In the Device Manager app, click on the New Device button on the toolbar. A window will pop up and prompt you for the Name and Description of your device, then press Create Device .","title":"Step 3: Create a New Device on the Onion Cloud"},{"location":"tutorials/OnionWiki/Documentation/Cloud/Steup-Omega-for-the-Onion-Cloud/#step-4-generate-the-setup-code_1","text":"You should see you device being added under a table called My Devices . Now click on the device that you have just created to enter the detailed view. Click on the Setup Code button on the toolbar, a window will pop up and a display an one-time setup code. Highlight the code and copy it to your clipboard.","title":"Step 4: Generate the Setup Code"},{"location":"tutorials/OnionWiki/Documentation/Cloud/Steup-Omega-for-the-Onion-Cloud/#step-5-setup-the-omega_1","text":"Finally, return to the Linux commandline on the Omega you want to connect to the Onion Cloud, and run the following command: onion-cloud setup setup code where setup code is the code that you just copied from the Onion Cloud. And that's it! Your Omega is now connected to the Onion Cloud! Currently, we are still working on creating the documentation for the Onion Cloud. For now, you can remote control your Omega with the Device Explorer app. More tutorials and documentation will be made available soon. Happy Hacking!","title":"Step 5: Setup the Omega"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/","text":"Omega Hardware The Onion Omega is a hardware development platform with built-in WiFi and a full Linux Operating System. The Omega has 18 digital GPIOs, support for I2C, SPI, and USB2.0, among other things. [[ TOC ]] Technical Specifications The Omega's Brain The Omega's brain and central nervous system are provided by the Qualcomm Atheros AR9331 SoC. With the SoC and on-board components, the Omega has the following: * 400 MHz MIPS 24Kc Big-Endian Processor * 64MB of DDR2 RAM running at 400 MHz * 16MB of on-board flash storage * Support for USB 2.0 * Support for Ethernet at 100 Mbps * 802.11b/g/ WiFi at 150 Mbps Connectivity The Omega also has the following: * 18 digital GPIOs * A single Serial UART * Support for SPI * Support for I2S Power The Docks receive 5V through the Micro-USB connector. The Docks also have regulators to provide the Omega with a constant 3.3V. Through observation, we've found the following current draw on the Omega: Dock Idle Current Draw Load Current Draw Peak Current Draw Expansion Dock 120 mA 150 mA 180 mA Mini Dock 170 mA 200 mA 220 mA Arduino Dock 110 mA 140 mA 180 mA Note that measurements above meant as guidelines, they are observational in nature and have not been rigiously confirmed. SoC Datasheet The AR9331 Datasheet has all of the technical specifications your heart might desire. The Hardware The Omega Docks are powered through the Micro-USB connector. Use a micro-USB cable (same cable used to charge Andriod phones) to connect your Omega to a computer or a wall charger. Reset Button A Reset Button can be found on the Expansion Dock and Mini Dock: For reference, the Reset Button is connected to Omega's GPIO11. GPIO11 is the Omega's Active-High Soft Reset input. Reboot Momentarily pressing the reset button and letting go will initiate a reboot of the Omega OS. Factory Restore Pressing and holding the reset button for 10 seconds and releasing will trigger a factory restore. Warning: This will reset your Omega to the default filesystem of the last firmware update, this will delete ALL of your data! Omega LED The Omega has an on-board LED that indicates it's status. By default, the LED will flash while the Omega is booting, and will turn solid once the boot sequnce is complete. It will remain solid as long as the Omega is powered on. Controlling the LED The LED is connected to Omega's GPIO27, however, fine-grain control of the LED is available through the Linux sysfs interface: /sys/class/leds/onion\\:amber\\:system/ Check Available Modes To read the available modes, run the following in the command line: root@Omega-0100:~# cat /sys/class/leds/onion\\:amber\\:system/trigger none timer [default-on] netdev transient gpio heartbeat morse oneshot usbdev The currently selected mode will be surrounded with square brackets. Changing the Mode To change the mode, run the following command: echo MODE /sys/class/leds/onion\\:amber\\:system/trigger Where MODE is one of the options seen above. GPIOs The Omega has 18 digital GPIOs, running at 3.3V. The pinout is as follows: Two pins are designated for hardware I2C and one for software reset of the Omega. Expansion Dock Pinout The Expansion Dock has a 30 pin header that breaks out a variety of the Omega's pins: Electrical Characteristics The best electrical characteristics we could find and test: Characteristic Min Max Output High Voltage (V) 2.44 --- Output Low Voltage (V) --- 0.1 Input High Voltage (V) 0.7 5 (tested) Input Low Voltage (V) 0.3 --- Maximum drive: 24 mA Pullup/Pulldown resistance: 200 k\u03a9 I2C The Omega supports hardware I2C using two GPIOs: I2C GPIO SCL - Clock 20 SDA - Data 21 The I2C interface can be accessed in the Linux filesystem through /dev/i2c-0 USB The Omega, like all computers, supports USB devices. The Expansion Dock, Mini Dock, and Arduino Dock all have USB Host connectors. A large variety of devices are supported out of the box, including webcams, keyboards, flash drives, hard drives, etc. UART The Omega has a two wire Serial UART bus, with a TX and RX pin. On the Expansion Dock and Mini Dock, there is a USB-to-Serial chip that allows the Omega's serial terminal to be accessed on your computer through a USB cable. On the Arduino Dock, the Serial port is connected to the on-board ATmega microcontroller. Thereby the serial terminal is not available when using the Arduino Dock. The Linux interface is /dev/ttyATH0 and the default baudrate is 115200.","title":"Omega Hardware"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/#omega-hardware","text":"The Onion Omega is a hardware development platform with built-in WiFi and a full Linux Operating System. The Omega has 18 digital GPIOs, support for I2C, SPI, and USB2.0, among other things. [[ TOC ]]","title":"Omega Hardware"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/#technical-specifications","text":"","title":"Technical Specifications"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/#the-omegas-brain","text":"The Omega's brain and central nervous system are provided by the Qualcomm Atheros AR9331 SoC. With the SoC and on-board components, the Omega has the following: * 400 MHz MIPS 24Kc Big-Endian Processor * 64MB of DDR2 RAM running at 400 MHz * 16MB of on-board flash storage * Support for USB 2.0 * Support for Ethernet at 100 Mbps * 802.11b/g/ WiFi at 150 Mbps","title":"The Omega's Brain"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/#connectivity","text":"The Omega also has the following: * 18 digital GPIOs * A single Serial UART * Support for SPI * Support for I2S","title":"Connectivity"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/#power","text":"The Docks receive 5V through the Micro-USB connector. The Docks also have regulators to provide the Omega with a constant 3.3V. Through observation, we've found the following current draw on the Omega: Dock Idle Current Draw Load Current Draw Peak Current Draw Expansion Dock 120 mA 150 mA 180 mA Mini Dock 170 mA 200 mA 220 mA Arduino Dock 110 mA 140 mA 180 mA Note that measurements above meant as guidelines, they are observational in nature and have not been rigiously confirmed.","title":"Power"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/#soc-datasheet","text":"The AR9331 Datasheet has all of the technical specifications your heart might desire.","title":"SoC Datasheet"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/#the-hardware","text":"The Omega Docks are powered through the Micro-USB connector. Use a micro-USB cable (same cable used to charge Andriod phones) to connect your Omega to a computer or a wall charger.","title":"The Hardware"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/#reset-button","text":"A Reset Button can be found on the Expansion Dock and Mini Dock: For reference, the Reset Button is connected to Omega's GPIO11. GPIO11 is the Omega's Active-High Soft Reset input.","title":"Reset Button"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/#reboot","text":"Momentarily pressing the reset button and letting go will initiate a reboot of the Omega OS.","title":"Reboot"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/#factory-restore","text":"Pressing and holding the reset button for 10 seconds and releasing will trigger a factory restore. Warning: This will reset your Omega to the default filesystem of the last firmware update, this will delete ALL of your data!","title":"Factory Restore"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/#omega-led","text":"The Omega has an on-board LED that indicates it's status. By default, the LED will flash while the Omega is booting, and will turn solid once the boot sequnce is complete. It will remain solid as long as the Omega is powered on.","title":"Omega LED"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/#controlling-the-led","text":"The LED is connected to Omega's GPIO27, however, fine-grain control of the LED is available through the Linux sysfs interface: /sys/class/leds/onion\\:amber\\:system/ Check Available Modes To read the available modes, run the following in the command line: root@Omega-0100:~# cat /sys/class/leds/onion\\:amber\\:system/trigger none timer [default-on] netdev transient gpio heartbeat morse oneshot usbdev The currently selected mode will be surrounded with square brackets. Changing the Mode To change the mode, run the following command: echo MODE /sys/class/leds/onion\\:amber\\:system/trigger Where MODE is one of the options seen above.","title":"Controlling the LED"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/#gpios","text":"The Omega has 18 digital GPIOs, running at 3.3V. The pinout is as follows: Two pins are designated for hardware I2C and one for software reset of the Omega.","title":"GPIOs"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/#expansion-dock-pinout","text":"The Expansion Dock has a 30 pin header that breaks out a variety of the Omega's pins:","title":"Expansion Dock Pinout"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/#electrical-characteristics","text":"The best electrical characteristics we could find and test: Characteristic Min Max Output High Voltage (V) 2.44 --- Output Low Voltage (V) --- 0.1 Input High Voltage (V) 0.7 5 (tested) Input Low Voltage (V) 0.3 --- Maximum drive: 24 mA Pullup/Pulldown resistance: 200 k\u03a9","title":"Electrical Characteristics"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/#i2c","text":"The Omega supports hardware I2C using two GPIOs: I2C GPIO SCL - Clock 20 SDA - Data 21 The I2C interface can be accessed in the Linux filesystem through /dev/i2c-0","title":"I2C"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/#usb","text":"The Omega, like all computers, supports USB devices. The Expansion Dock, Mini Dock, and Arduino Dock all have USB Host connectors. A large variety of devices are supported out of the box, including webcams, keyboards, flash drives, hard drives, etc.","title":"USB"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Omega-Hardware/#uart","text":"The Omega has a two wire Serial UART bus, with a TX and RX pin. On the Expansion Dock and Mini Dock, there is a USB-to-Serial chip that allows the Omega's serial terminal to be accessed on your computer through a USB cable. On the Arduino Dock, the Serial port is connected to the on-board ATmega microcontroller. Thereby the serial terminal is not available when using the Arduino Dock. The Linux interface is /dev/ttyATH0 and the default baudrate is 115200.","title":"UART"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Pinout-Diagram/","text":"Omega and Expansion Pinouts [[ TOC ]] Omega Pinout Diagram Expansion Dock Pinout Diagram","title":"Omega and Expansion Pinouts"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Pinout-Diagram/#omega-and-expansion-pinouts","text":"[[ TOC ]]","title":"Omega and Expansion Pinouts"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Pinout-Diagram/#omega-pinout-diagram","text":"","title":"Omega Pinout Diagram"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Pinout-Diagram/#expansion-dock-pinout-diagram","text":"","title":"Expansion Dock Pinout Diagram"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Technical-Drawings/Omega-and-Expansions-Technical/","text":"Omega and Expansions Technical Drawings [[ TOC ]] Omega Technical Drawing Click to download the PDF Omega Technical Drawing Expansion Dock Drawing Click to download the PDF Expansion Dock Technical Drawing Mini Dock Drawing Click to download the PDF Mini Dock Technical Drawing Arduino Dock Click to download the PDF Arduino Dock Technical Drawing Relay Expansion Click to download the PDF Relay Expansion Technical Drawing Servo Expansion Click to download the PDF Servo Expansion Technical Drawing Ethernet Expansion Click to download the PDF Ethernet Expansion Technical Drawing","title":"Omega and Expansions Technical Drawings"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Technical-Drawings/Omega-and-Expansions-Technical/#omega-and-expansions-technical-drawings","text":"[[ TOC ]]","title":"Omega and Expansions Technical Drawings"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Technical-Drawings/Omega-and-Expansions-Technical/#omega-technical-drawing","text":"Click to download the PDF Omega Technical Drawing","title":"Omega Technical Drawing"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Technical-Drawings/Omega-and-Expansions-Technical/#expansion-dock-drawing","text":"Click to download the PDF Expansion Dock Technical Drawing","title":"Expansion Dock Drawing"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Technical-Drawings/Omega-and-Expansions-Technical/#mini-dock-drawing","text":"Click to download the PDF Mini Dock Technical Drawing","title":"Mini Dock Drawing"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Technical-Drawings/Omega-and-Expansions-Technical/#arduino-dock","text":"Click to download the PDF Arduino Dock Technical Drawing","title":"Arduino Dock"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Technical-Drawings/Omega-and-Expansions-Technical/#relay-expansion","text":"Click to download the PDF Relay Expansion Technical Drawing","title":"Relay Expansion"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Technical-Drawings/Omega-and-Expansions-Technical/#servo-expansion","text":"Click to download the PDF Servo Expansion Technical Drawing","title":"Servo Expansion"},{"location":"tutorials/OnionWiki/Documentation/Hardware/Technical-Drawings/Omega-and-Expansions-Technical/#ethernet-expansion","text":"Click to download the PDF Ethernet Expansion Technical Drawing","title":"Ethernet Expansion"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/","text":"Arduino Dock Neopixel Library The Omega + Arduino Dock can be used to control Neopixels, with the Omega sending the commands and colour codes, and the Arduino Dock acting as a communication channel. The Onion Arduino Dock Neopixel C C++ library, libonionneopixel provides functions to interact with the Neopixels. Also available is a module for use in Python called neopixel that is part of the OmegaArduinoDock package. [[ TOC ]] Programming Flow The first action that must be performed is always the initialization of the Arduino Dock for controlling Neopixels. This entails setting which Arduino Dock pin will be used as data output, setting the number of Neopixels, and running the initalization function. Afterwards, the colours of the Neopixels can be changed at will. The colour changes will be queued up, and a function to show the queued up changes must be run for the changes to take effect on the actual Neopixels. After each power-cycle, the chip that controls the Relay Expansion must be programmed with an initialization sequence. After the initialization, the relays can be turned on and off at will. The C C++ Library The dynamic C C++ library, libonionneopixel provides a C++ class and C functions that wrap around this class. Installing the Library The library can be installed by running the following commands: opkg update opkg install libonionneopixel Note that it will automatically be installed when the neopixel-tool utility is installed. Return Values All functions follow the same pattern with return values: If the function operation is successful, the return value will be EXIT_SUCCESS which is a macro defined as 0 in cstdlib.h. If the function operation is not successful, the function will return EXIT_FAILURE which is defined as 1 . A few reasons why the function might not be successful: * The specified device address cannot be found on the I2C bus (the Expansion is not plugged in) * The system I2C interface is currently in use elsewhere An error message will be printed that will give more information on the reason behind the failure. The C++ Library The C++ library is implemented around an onionNeopixel class. It provides public class functions to perform all of the actions specified in the Programming Flow section . Using the C++ Library Header File To add the Onion Neopixel Library to your program, include the header file in your code: #include neopixel.h Library for Linker In your project's makefile, you will need to add the following dynamic libraries to the linker command: -lonionneopixel The dynamic libraries are stored in /usr/lib on the Omega. Class Functions The onionNeopixel class contains all of the routines required to control Neopixels using the Arduino Dock. The Constructor The constructor for the onionNeopixel class will initialize all class variables. It also has an optional argument that sets the I2C device address of the Arduino Dock. By default this address is 0x08 and if you have made no changes to the Onion Arduino Library, there is no need to include this argument. Examples To initialize an onionNeopixel object called neopixelObj : onionNeopixel* neopixelObj = new onionNeopixel(); To initialize an onionNeopixel object called npixel where the Arduino Dock's I2C address is 0x09: onionNeopixel* npixel = new onionNeopixel(0x09); Set the Arduino Dock Pin This class function sets the Arduino Dock pin that will act as the data port for the Neopixels: int SetPin (int input); Examples To set the pin to 6 for an npixel object: status = npixel- SetPin(6); Set the Number of Neopixels This class function programs the total number of Neopixels that are connected to the Arduino Dock pin: int SetLength (int input); Examples For an npixel object, set that it controls 64 neopixels: status = npixel- SetLength(64); Initialize the Arduino Dock and Neopixels This function will perform an initialization on the Arduino Dock and afterwards, the Neopixels will be ready to use: int Init (); Note that the SetPin and SetLength functions must be called prior to the Init function is called. Examples For an npixel object, initialize the Arduino Dock for neopixels: status = npixel- Init(); Initialize the Arduino Dock and Neopixels in a Single Step This function will perform the functions of SetPin , SetLength , and Init in a single function call: int Init (int pin, int length); It is an overloaded function so it has the same name as the initialization function above. It provides a simplification Examples For an npixel object, initialize the Arduino Dock to use pin 5 and control 32 neopixels: status = npixel- Init(5, 32); Set the Maximum Pixel Brightness This class function will set the maximum brightness of a pixel by defining a maximum for the colour components: int SetBrightness (int input); The brightness change will not take effect on the physical Neopixels until the ShowPixels function function is called. Arguments The input argument sets the the maximum colour intensity for all colour components. The range is 0 to 255 . Examples For an npixel object, set the brightness to the maximum: status = npixel- SetBrightness(255); For an npixel object, set the brightness to half the maximum and have it take effect right away: status = npixel- SetBrightness(127); status |= npixel- ShowPixels(); For an npixel object, set the brightness to a quarter of the maximum: status = npixel- SetBrightness(63); Set the Colour of a Pixel This class function will queue up a change in the colour intensity of a single pixel: int SetPixel (int pixelId, int red, int green, int blue); The pixels colours changes setup with this function will not be shown on the physical Neopixels until the ShowPixels function function is called. Arguments The pixelId argument defines which pixel in the Neopixel array is to be controlled, with the first pixel in the strip being pixel 0. Note that this pixel id should be less than the total number of pixels. The red , green , and blue arguments are the colour intensity values for the respective colour. Neopixels are 8-bits per colour component, so the values can range from 0 to 255 . Experiment with a colour wheel to find the primary colour intensities for your desired colours. Examples For an npixel object, set the first pixel to white: status = npixel- SetPixel(0, 0xff, 0xff, 0xff); For an npixel object, set the 18th pixel to purple: status = npixel- SetPixel(18, 0xcc, 0x00, 0x99); For an npixel object, set the 64th pixel to orange: status = npixel- SetPixel(63, 0xff, 0x8c, 0x1a); Set the Colour of many Pixels This class function will queue the change of the colour intensity for many pixels using a buffer of colour components: int SetBuffer (int *buf, int size); The first pixel in the buffer will be displayed on pixel 0 of the physical Neopixels. The pixels colours setup with this function will not be shown on the physical Neopixels until the ShowPixels function function is called. Arguments The buf argument is an array that should hold colour component triplets for however many pixels are desired: buf Element Pixel Colour Component buf[0] 0 Red buf[1] 0 Green buf[2] 0 Blue buf[3] 1 Red buf[4] 1 Green buf[5] 1 Blue ... ... ... buf[n*3] n Red buf[n*3+1] n Green buf[n*3+2] n Blue The size argument represents the number of elements in the buf array, so it should be the number of pixels multiplied by three colour components. Examples For an npixel object, set 3 pixels to brown: int colours[9] = {0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00}; status = npixel- SetBuffer(colours, 9); For an npixel object, set 12 pixels to lime: int length = 12*3; int *buffer = new int[length]; for (int i = 0; i length; i += 3) { buffer[i] = 0xcc; buffer[i+1] = 0xff; buffer[i+2] = 0x33; } status = npixel- SetBuffer(buffer, length); Show All Queued Colour Changes This class function will send a command to the Arduino Dock to display all queued colour and/or brightness changes on the physical Neopixels: int ShowPixels (); Examples For an npixel object, show all queued colour changes: status = npixel- ShowPixels(); Example Code Example code that uses the onionNeopixel class can be found in the source code for the neopixel-tool command line utility . Please take a look at the neopixel-tool GitHub repo . The files of interest are: * include/main.h * src/main.cpp The C Library The C library is a series of C functions that provide wrappers to the C++ onionNeopixel class. It provides the same functionality as the C++ class but in code that can be used in C. Using the C Library Header File To add the Onion Neopixel Library to your program, include the header file in your code: #include neopixel_Cwrapper.h Library for Linker In your project's makefile, you will need to add the following dynamic libraries to the linker command: -lonionneopixel The dynamic libraries are stored in /usr/lib on the Omega. Library Functions The following functions implement all of the routines required to control Neopixels using the Arduino Dock. Initialize the Arduino Dock and Neopixels This function will perform the following: * Set the Arduino Dock pin that will act as the data port for the Neopixels * Set the total number of Neopixels * Run the initalization sequence int neopixelInit (int devAddr, int pin, int length); Arguments The devAddr argument provides the I2C device address of the Arduino Dock. By default this address is 0x08 and if you have made no changes to the Onion Arduino Library, the NEOPIXEL_I2C_DEVICE_ADDR macro can be used. The pin argument defines the Arduino Dock pin. And the length argument defines the number of Neopixels. Examples Initialize the Arduino Dock to use pin 9 and control 12 neopixels: status = neopixelInit (NEOPIXEL_I2C_DEVICE_ADDR, 9, 12); Initialize the Arduino Dock to use pin 10 and control 128 neopixels: status = neopixelInit (NEOPIXEL_I2C_DEVICE_ADDR, 10, 128); Set the Maximum Pixel Brightness This function will set the maximum brightness of a pixel by defining a maximum for the colour components: int neopixelSetBrightness (int brightness); The brightness change will not take effect on the physical Neopixels until the neopixelShowPixels function function is called. Arguments The brightness argument sets the the maximum colour intensity for all colour components. The range is 0 to 255 . Examples Set the brightness to the maximum: status = neopixelSetBrightness(255); Set the brightness to half the maximum and have it take effect right away: status = neopixelSetBrightness(127); status |= neopixelShowPixels(); Set the brightness to a quarter of the maximum: status = neopixelSetBrightness(63); Set the Colour of a Pixel This function will queue up a change in the colour intensity of a single pixel: int neopixelSetPixel (int pixelId, int red, int green, int blue); The changes to the pixel will not show up on the physical Neopixels until the neopixelShowPixels function function is called. Arguments The pixelId argument defines which pixel in the Neopixel array is to be controlled, with the first pixel in the strip being pixel 0. Note that this pixel id should be less than the total number of pixels. The red , green , and blue arguments are the colour intensity values for the respective colour. Neopixels are 8-bits per colour component, so the values can range from 0 to 255 . Experiment with a colour wheel to find the primary colour intensities for your desired colours. Examples Set the first pixel to white: status = neopixelSetPixel(0, 0xff, 0xff, 0xff); Set the 18th pixel to purple: status = neopixelSetPixel(18, 0xcc, 0x00, 0x99); Set the 64th pixel to orange: status = neopixelSetPixel(63, 0xff, 0x8c, 0x1a); Set the Colour of many Pixels This function will queue the change of the colour intensity for many pixels using a buffer of colour components: int neopixelSetBuffer (int *buf, int size); The first pixel in the buffer will be displayed on pixel 0 of the physical Neopixels. The changes to the pixels will not show up on the physical Neopixels until the neopixelShowPixels function function is called. Arguments The buf argument is an array that should hold colour component triplets for however many pixels are desired: buf Element Pixel Colour Component buf[0] 0 Red buf[1] 0 Green buf[2] 0 Blue buf[3] 1 Red buf[4] 1 Green buf[5] 1 Blue ... ... ... buf[n*3] n Red buf[n*3+1] n Green buf[n*3+2] n Blue The size argument represents the number of elements in the buf array, so it should be the number of pixels multiplied by three colour components. Examples Set 3 pixels to brown: int colours[9] = {0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00}; status = neopixelSetBuffer(colours, 9); Set 12 pixels to lime: int length = 12*3; int *buffer = new int[length]; for (int i = 0; i length; i += 3) { buffer[i] = 0xcc; buffer[i+1] = 0xff; buffer[i+2] = 0x33; } status = neopixelSetBuffer(buffer, length); Show All Queued Colour Changes This function will send a command to the Arduino Dock to display all queued colour changes on the physical Neopixels: int neopixelShowPixels (); Examples Show all queued colour changes: status = neopixelShowPixels(); Clean-Up Since the C functions are a wrapper around the C++ class, at the end of your program, it's required to run a function to clean-up any dynamically allocated memory. void neopixelFree (); Examples Perform the clean-up: neopixelFree(); The Python Module The Python module neopixel in the OmegaArduinoDock package provides a class, OnionNeopixel to control Neopixels. It's essentially a wrapper of the C++ library so the functions are very similar. Installing the Module The library can be installed by running the following commands: opkg update opkg install pyNeopixel python-light Return Values All functions follow the same pattern with return values: If the function operation is successful, the return value will be 0 . If the function operation is not successful, the function will return 1 . Using the Module To add the Onion Neopixel Module to your Python program, include the following in your code: from OmegaArduinoDock import neopixel The Python Class The Python class, OnionNeopixel is very similar to the C++ class; it provides public class functions to perform all of the actions specified in the Programming Flow section . The Constructor The constructor for the OnionNeopixel class will perform the following: * initialize all class variables * Set the Arduino Dock pin that will act as the data port for the Neopixels * Set the total number of Neopixels * Run the initalization sequence It also has an optional argument that sets the I2C device address of the Arduino Dock. By default this address is 0x08 and if you have made no changes to the Onion Arduino Library, there is no need to include this argument. Examples To initialize an OnionNeopixel object called npixel : npixel = neopixel.OnionNeopixel(6, 64) To initialize an onionNeopixel object called npixel where the Arduino Dock's I2C address is 0x09: npixel = neopixel.OnionNeopixel(6, 64, 0x09) Set the Maximum Pixel Brightness This function will set the maximum brightness of a pixel by defining a maximum for the colour components: setBrightness (int brightness); The brightness change will not take effect on the physical Neopixels until the showPixels() function function is called. Arguments The brightness argument sets the the maximum colour intensity for all colour components. The range is 0 to 255 . Examples For an npixel object, set the brightness to the maximum: status = npixel.setBrightness(255); For an npixel object, set the brightness to half the maximum and have it take effect right away: status = npixel.setBrightness(127); status = npixel.showPixels(); For an npixel object, set the brightness to a quarter of the maximum: status = npixel.setBrightness(63); Set the Colour of a Pixel This function will queue up a change in the colour intensity of a single pixel: setPixel (pixelId, red, green, blue) Note the changes will not take effect on the physical Neopixels until the showPixels() function is called. Arguments The pixelId argument defines which pixel in the Neopixel array is to be controlled, with the first pixel in the strip being pixel 0. Note that this pixel id should be less than the total number of pixels. The red , green , and blue arguments are the colour intensity values for the respective colour. Neopixels are 8-bits per colour component, so the values can range from 0 to 255 . Experiment with a colour wheel to find the primary colour intensities for your desired colours. Examples For an npixel object, set the first pixel to white: status = npixel.setPixel(0, 0xff, 0xff, 0xff); For an npixel object, set the 18th pixel to purple: status = npixel.setPixel(18, 0xcc, 0x00, 0x99); For an npixel object, set the 64th pixel to orange: status = npixel.setPixel(63, 0xff, 0x8c, 0x1a); Set the Colour of many Pixels This function will queue the change of the colour intensity for many pixels using a python list of colour components: setBuffer (pyBuf) The first pixel in the buffer will be displayed on pixel 0 of the physical Neopixels. Note the changes will not take effect on the physical Neopixels until the showPixels() function is called. Arguments The pyBuf argument is a Python list that should hold colour component triplets for however many pixels are desired: buf Element Pixel Colour Component buf[0] 0 Red buf[1] 0 Green buf[2] 0 Blue buf[3] 1 Red buf[4] 1 Green buf[5] 1 Blue ... ... ... buf[n*3] n Red buf[n*3+1] n Green buf[n*3+2] n Blue Examples Set 3 pixels to brown for an npixel object: buf = [0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00] status = npixel.setBuffer(buf) Show All Queued Colour Changes This function will send a command to the Arduino Dock to display all queued colour changes on the physical Neopixels: showPixels() Examples Show all queued colour changes for an npixel object: status = npixel.showPixels(); Example Code Example code that uses the OnionNeopixel Python class can be found for download here. This is a Python program that shows a single colour on an entire Neopixel strip or array. It slowly loops between seven different colours, with 25 intermediate steps between the colour changes, creating a smooth transition effect.","title":"Arduino Dock Neopixel Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#arduino-dock-neopixel-library","text":"The Omega + Arduino Dock can be used to control Neopixels, with the Omega sending the commands and colour codes, and the Arduino Dock acting as a communication channel. The Onion Arduino Dock Neopixel C C++ library, libonionneopixel provides functions to interact with the Neopixels. Also available is a module for use in Python called neopixel that is part of the OmegaArduinoDock package. [[ TOC ]]","title":"Arduino Dock Neopixel Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#programming-flow","text":"The first action that must be performed is always the initialization of the Arduino Dock for controlling Neopixels. This entails setting which Arduino Dock pin will be used as data output, setting the number of Neopixels, and running the initalization function. Afterwards, the colours of the Neopixels can be changed at will. The colour changes will be queued up, and a function to show the queued up changes must be run for the changes to take effect on the actual Neopixels. After each power-cycle, the chip that controls the Relay Expansion must be programmed with an initialization sequence. After the initialization, the relays can be turned on and off at will.","title":"Programming Flow"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#the-c-c-library","text":"The dynamic C C++ library, libonionneopixel provides a C++ class and C functions that wrap around this class.","title":"The C &amp; C++ Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#installing-the-library","text":"The library can be installed by running the following commands: opkg update opkg install libonionneopixel Note that it will automatically be installed when the neopixel-tool utility is installed.","title":"Installing the Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#return-values","text":"All functions follow the same pattern with return values: If the function operation is successful, the return value will be EXIT_SUCCESS which is a macro defined as 0 in cstdlib.h. If the function operation is not successful, the function will return EXIT_FAILURE which is defined as 1 . A few reasons why the function might not be successful: * The specified device address cannot be found on the I2C bus (the Expansion is not plugged in) * The system I2C interface is currently in use elsewhere An error message will be printed that will give more information on the reason behind the failure.","title":"Return Values"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#the-c-library","text":"The C++ library is implemented around an onionNeopixel class. It provides public class functions to perform all of the actions specified in the Programming Flow section .","title":"The C++ Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#using-the-c-library","text":"Header File To add the Onion Neopixel Library to your program, include the header file in your code: #include neopixel.h Library for Linker In your project's makefile, you will need to add the following dynamic libraries to the linker command: -lonionneopixel The dynamic libraries are stored in /usr/lib on the Omega.","title":"Using the C++ Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#class-functions","text":"The onionNeopixel class contains all of the routines required to control Neopixels using the Arduino Dock.","title":"Class Functions"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#the-constructor","text":"The constructor for the onionNeopixel class will initialize all class variables. It also has an optional argument that sets the I2C device address of the Arduino Dock. By default this address is 0x08 and if you have made no changes to the Onion Arduino Library, there is no need to include this argument. Examples To initialize an onionNeopixel object called neopixelObj : onionNeopixel* neopixelObj = new onionNeopixel(); To initialize an onionNeopixel object called npixel where the Arduino Dock's I2C address is 0x09: onionNeopixel* npixel = new onionNeopixel(0x09);","title":"The Constructor"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#set-the-arduino-dock-pin","text":"This class function sets the Arduino Dock pin that will act as the data port for the Neopixels: int SetPin (int input); Examples To set the pin to 6 for an npixel object: status = npixel- SetPin(6);","title":"Set the Arduino Dock Pin"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#set-the-number-of-neopixels","text":"This class function programs the total number of Neopixels that are connected to the Arduino Dock pin: int SetLength (int input); Examples For an npixel object, set that it controls 64 neopixels: status = npixel- SetLength(64);","title":"Set the Number of Neopixels"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#initialize-the-arduino-dock-and-neopixels","text":"This function will perform an initialization on the Arduino Dock and afterwards, the Neopixels will be ready to use: int Init (); Note that the SetPin and SetLength functions must be called prior to the Init function is called. Examples For an npixel object, initialize the Arduino Dock for neopixels: status = npixel- Init();","title":"Initialize the Arduino Dock and Neopixels"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#initialize-the-arduino-dock-and-neopixels-in-a-single-step","text":"This function will perform the functions of SetPin , SetLength , and Init in a single function call: int Init (int pin, int length); It is an overloaded function so it has the same name as the initialization function above. It provides a simplification Examples For an npixel object, initialize the Arduino Dock to use pin 5 and control 32 neopixels: status = npixel- Init(5, 32);","title":"Initialize the Arduino Dock and Neopixels in a Single Step"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#set-the-maximum-pixel-brightness","text":"This class function will set the maximum brightness of a pixel by defining a maximum for the colour components: int SetBrightness (int input); The brightness change will not take effect on the physical Neopixels until the ShowPixels function function is called. Arguments The input argument sets the the maximum colour intensity for all colour components. The range is 0 to 255 . Examples For an npixel object, set the brightness to the maximum: status = npixel- SetBrightness(255); For an npixel object, set the brightness to half the maximum and have it take effect right away: status = npixel- SetBrightness(127); status |= npixel- ShowPixels(); For an npixel object, set the brightness to a quarter of the maximum: status = npixel- SetBrightness(63);","title":"Set the Maximum Pixel Brightness"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#set-the-colour-of-a-pixel","text":"This class function will queue up a change in the colour intensity of a single pixel: int SetPixel (int pixelId, int red, int green, int blue); The pixels colours changes setup with this function will not be shown on the physical Neopixels until the ShowPixels function function is called. Arguments The pixelId argument defines which pixel in the Neopixel array is to be controlled, with the first pixel in the strip being pixel 0. Note that this pixel id should be less than the total number of pixels. The red , green , and blue arguments are the colour intensity values for the respective colour. Neopixels are 8-bits per colour component, so the values can range from 0 to 255 . Experiment with a colour wheel to find the primary colour intensities for your desired colours. Examples For an npixel object, set the first pixel to white: status = npixel- SetPixel(0, 0xff, 0xff, 0xff); For an npixel object, set the 18th pixel to purple: status = npixel- SetPixel(18, 0xcc, 0x00, 0x99); For an npixel object, set the 64th pixel to orange: status = npixel- SetPixel(63, 0xff, 0x8c, 0x1a);","title":"Set the Colour of a Pixel"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#set-the-colour-of-many-pixels","text":"This class function will queue the change of the colour intensity for many pixels using a buffer of colour components: int SetBuffer (int *buf, int size); The first pixel in the buffer will be displayed on pixel 0 of the physical Neopixels. The pixels colours setup with this function will not be shown on the physical Neopixels until the ShowPixels function function is called. Arguments The buf argument is an array that should hold colour component triplets for however many pixels are desired: buf Element Pixel Colour Component buf[0] 0 Red buf[1] 0 Green buf[2] 0 Blue buf[3] 1 Red buf[4] 1 Green buf[5] 1 Blue ... ... ... buf[n*3] n Red buf[n*3+1] n Green buf[n*3+2] n Blue The size argument represents the number of elements in the buf array, so it should be the number of pixels multiplied by three colour components. Examples For an npixel object, set 3 pixels to brown: int colours[9] = {0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00}; status = npixel- SetBuffer(colours, 9); For an npixel object, set 12 pixels to lime: int length = 12*3; int *buffer = new int[length]; for (int i = 0; i length; i += 3) { buffer[i] = 0xcc; buffer[i+1] = 0xff; buffer[i+2] = 0x33; } status = npixel- SetBuffer(buffer, length);","title":"Set the Colour of many Pixels"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#show-all-queued-colour-changes","text":"This class function will send a command to the Arduino Dock to display all queued colour and/or brightness changes on the physical Neopixels: int ShowPixels (); Examples For an npixel object, show all queued colour changes: status = npixel- ShowPixels();","title":"Show All Queued Colour Changes"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#example-code","text":"Example code that uses the onionNeopixel class can be found in the source code for the neopixel-tool command line utility . Please take a look at the neopixel-tool GitHub repo . The files of interest are: * include/main.h * src/main.cpp","title":"Example Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#the-c-library_1","text":"The C library is a series of C functions that provide wrappers to the C++ onionNeopixel class. It provides the same functionality as the C++ class but in code that can be used in C.","title":"The C Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#using-the-c-library_1","text":"Header File To add the Onion Neopixel Library to your program, include the header file in your code: #include neopixel_Cwrapper.h Library for Linker In your project's makefile, you will need to add the following dynamic libraries to the linker command: -lonionneopixel The dynamic libraries are stored in /usr/lib on the Omega.","title":"Using the C Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#library-functions","text":"The following functions implement all of the routines required to control Neopixels using the Arduino Dock.","title":"Library Functions"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#initialize-the-arduino-dock-and-neopixels_1","text":"This function will perform the following: * Set the Arduino Dock pin that will act as the data port for the Neopixels * Set the total number of Neopixels * Run the initalization sequence int neopixelInit (int devAddr, int pin, int length); Arguments The devAddr argument provides the I2C device address of the Arduino Dock. By default this address is 0x08 and if you have made no changes to the Onion Arduino Library, the NEOPIXEL_I2C_DEVICE_ADDR macro can be used. The pin argument defines the Arduino Dock pin. And the length argument defines the number of Neopixels. Examples Initialize the Arduino Dock to use pin 9 and control 12 neopixels: status = neopixelInit (NEOPIXEL_I2C_DEVICE_ADDR, 9, 12); Initialize the Arduino Dock to use pin 10 and control 128 neopixels: status = neopixelInit (NEOPIXEL_I2C_DEVICE_ADDR, 10, 128);","title":"Initialize the Arduino Dock and Neopixels"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#set-the-maximum-pixel-brightness_1","text":"This function will set the maximum brightness of a pixel by defining a maximum for the colour components: int neopixelSetBrightness (int brightness); The brightness change will not take effect on the physical Neopixels until the neopixelShowPixels function function is called. Arguments The brightness argument sets the the maximum colour intensity for all colour components. The range is 0 to 255 . Examples Set the brightness to the maximum: status = neopixelSetBrightness(255); Set the brightness to half the maximum and have it take effect right away: status = neopixelSetBrightness(127); status |= neopixelShowPixels(); Set the brightness to a quarter of the maximum: status = neopixelSetBrightness(63);","title":"Set the Maximum Pixel Brightness"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#set-the-colour-of-a-pixel_1","text":"This function will queue up a change in the colour intensity of a single pixel: int neopixelSetPixel (int pixelId, int red, int green, int blue); The changes to the pixel will not show up on the physical Neopixels until the neopixelShowPixels function function is called. Arguments The pixelId argument defines which pixel in the Neopixel array is to be controlled, with the first pixel in the strip being pixel 0. Note that this pixel id should be less than the total number of pixels. The red , green , and blue arguments are the colour intensity values for the respective colour. Neopixels are 8-bits per colour component, so the values can range from 0 to 255 . Experiment with a colour wheel to find the primary colour intensities for your desired colours. Examples Set the first pixel to white: status = neopixelSetPixel(0, 0xff, 0xff, 0xff); Set the 18th pixel to purple: status = neopixelSetPixel(18, 0xcc, 0x00, 0x99); Set the 64th pixel to orange: status = neopixelSetPixel(63, 0xff, 0x8c, 0x1a);","title":"Set the Colour of a Pixel"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#set-the-colour-of-many-pixels_1","text":"This function will queue the change of the colour intensity for many pixels using a buffer of colour components: int neopixelSetBuffer (int *buf, int size); The first pixel in the buffer will be displayed on pixel 0 of the physical Neopixels. The changes to the pixels will not show up on the physical Neopixels until the neopixelShowPixels function function is called. Arguments The buf argument is an array that should hold colour component triplets for however many pixels are desired: buf Element Pixel Colour Component buf[0] 0 Red buf[1] 0 Green buf[2] 0 Blue buf[3] 1 Red buf[4] 1 Green buf[5] 1 Blue ... ... ... buf[n*3] n Red buf[n*3+1] n Green buf[n*3+2] n Blue The size argument represents the number of elements in the buf array, so it should be the number of pixels multiplied by three colour components. Examples Set 3 pixels to brown: int colours[9] = {0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00}; status = neopixelSetBuffer(colours, 9); Set 12 pixels to lime: int length = 12*3; int *buffer = new int[length]; for (int i = 0; i length; i += 3) { buffer[i] = 0xcc; buffer[i+1] = 0xff; buffer[i+2] = 0x33; } status = neopixelSetBuffer(buffer, length);","title":"Set the Colour of many Pixels"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#show-all-queued-colour-changes_1","text":"This function will send a command to the Arduino Dock to display all queued colour changes on the physical Neopixels: int neopixelShowPixels (); Examples Show all queued colour changes: status = neopixelShowPixels();","title":"Show All Queued Colour Changes"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#clean-up","text":"Since the C functions are a wrapper around the C++ class, at the end of your program, it's required to run a function to clean-up any dynamically allocated memory. void neopixelFree (); Examples Perform the clean-up: neopixelFree();","title":"Clean-Up"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#the-python-module","text":"The Python module neopixel in the OmegaArduinoDock package provides a class, OnionNeopixel to control Neopixels. It's essentially a wrapper of the C++ library so the functions are very similar.","title":"The Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#installing-the-module","text":"The library can be installed by running the following commands: opkg update opkg install pyNeopixel python-light","title":"Installing the Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#return-values_1","text":"All functions follow the same pattern with return values: If the function operation is successful, the return value will be 0 . If the function operation is not successful, the function will return 1 .","title":"Return Values"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#using-the-module","text":"To add the Onion Neopixel Module to your Python program, include the following in your code: from OmegaArduinoDock import neopixel","title":"Using the Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#the-python-class","text":"The Python class, OnionNeopixel is very similar to the C++ class; it provides public class functions to perform all of the actions specified in the Programming Flow section .","title":"The Python Class"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#the-constructor_1","text":"The constructor for the OnionNeopixel class will perform the following: * initialize all class variables * Set the Arduino Dock pin that will act as the data port for the Neopixels * Set the total number of Neopixels * Run the initalization sequence It also has an optional argument that sets the I2C device address of the Arduino Dock. By default this address is 0x08 and if you have made no changes to the Onion Arduino Library, there is no need to include this argument. Examples To initialize an OnionNeopixel object called npixel : npixel = neopixel.OnionNeopixel(6, 64) To initialize an onionNeopixel object called npixel where the Arduino Dock's I2C address is 0x09: npixel = neopixel.OnionNeopixel(6, 64, 0x09)","title":"The Constructor"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#set-the-maximum-pixel-brightness_2","text":"This function will set the maximum brightness of a pixel by defining a maximum for the colour components: setBrightness (int brightness); The brightness change will not take effect on the physical Neopixels until the showPixels() function function is called. Arguments The brightness argument sets the the maximum colour intensity for all colour components. The range is 0 to 255 . Examples For an npixel object, set the brightness to the maximum: status = npixel.setBrightness(255); For an npixel object, set the brightness to half the maximum and have it take effect right away: status = npixel.setBrightness(127); status = npixel.showPixels(); For an npixel object, set the brightness to a quarter of the maximum: status = npixel.setBrightness(63);","title":"Set the Maximum Pixel Brightness"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#set-the-colour-of-a-pixel_2","text":"This function will queue up a change in the colour intensity of a single pixel: setPixel (pixelId, red, green, blue) Note the changes will not take effect on the physical Neopixels until the showPixels() function is called. Arguments The pixelId argument defines which pixel in the Neopixel array is to be controlled, with the first pixel in the strip being pixel 0. Note that this pixel id should be less than the total number of pixels. The red , green , and blue arguments are the colour intensity values for the respective colour. Neopixels are 8-bits per colour component, so the values can range from 0 to 255 . Experiment with a colour wheel to find the primary colour intensities for your desired colours. Examples For an npixel object, set the first pixel to white: status = npixel.setPixel(0, 0xff, 0xff, 0xff); For an npixel object, set the 18th pixel to purple: status = npixel.setPixel(18, 0xcc, 0x00, 0x99); For an npixel object, set the 64th pixel to orange: status = npixel.setPixel(63, 0xff, 0x8c, 0x1a);","title":"Set the Colour of a Pixel"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#set-the-colour-of-many-pixels_2","text":"This function will queue the change of the colour intensity for many pixels using a python list of colour components: setBuffer (pyBuf) The first pixel in the buffer will be displayed on pixel 0 of the physical Neopixels. Note the changes will not take effect on the physical Neopixels until the showPixels() function is called. Arguments The pyBuf argument is a Python list that should hold colour component triplets for however many pixels are desired: buf Element Pixel Colour Component buf[0] 0 Red buf[1] 0 Green buf[2] 0 Blue buf[3] 1 Red buf[4] 1 Green buf[5] 1 Blue ... ... ... buf[n*3] n Red buf[n*3+1] n Green buf[n*3+2] n Blue Examples Set 3 pixels to brown for an npixel object: buf = [0x99, 0x66, 0x00, 0x99, 0x66, 0x00, 0x99, 0x66, 0x00] status = npixel.setBuffer(buf)","title":"Set the Colour of many Pixels"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#show-all-queued-colour-changes_2","text":"This function will send a command to the Arduino Dock to display all queued colour changes on the physical Neopixels: showPixels() Examples Show all queued colour changes for an npixel object: status = npixel.showPixels();","title":"Show All Queued Colour Changes"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Arduino-Dock-Neopixel-Library/#example-code_1","text":"Example code that uses the OnionNeopixel Python class can be found for download here. This is a Python program that shows a single colour on an entire Neopixel strip or array. It slowly loops between seven different colours, with 25 intermediate steps between the colour changes, creating a smooth transition effect.","title":"Example Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Full_PWM_Node_Doc/","text":"PWM Expansion Node Addon The Onion Servo (PWM) Node Addon, pwm-node-addon is a wrapper around the libonionpwmexp dynamic C library that provides functions to setup the servo Expansion and generate PWM signals. [[ TOC ]] Programming Flow After each power-cycle, the chip that controls the PWM Expansion must be programmed with an initialization sequence to enable the on-board oscillator so that PWM signals can be generated. After the initialization, the other functions can be used to generate PWM signals on specific channels or to change the PWM signal frequency. Additionally, it is possible to disable to the oscillator, disabling the generation of all PWM signals at once. Before generating new PWM signals, the initialization sequence must be run again. Channels The PWM Expansion has 16 channels that can generate distinct PWM signals. Note that they will all be running on the same frequency. PWM Signal Refresher Pulse Width Modulated signals can be described with duty cycle percentages and frequencies/periods: The duty cycle indicates what percentage of time a signal is on or high voltage. The frequency determines the overall period of the pulse. For a more detailed explanation, see the guide on using the Servo Expansion . The Node Addon The pwm-exp-addon exposes a series of methods that perform all of the actions specified in the Programming Flow section. Install the Addon Install the addon on your Omega: opkg update opkg install pwm-exp-node NodeJS will need to be installed for Node programs to actually run: opkg install nodejs Importing the addon into your Node Script To use the addon within your script you have to import it into your node program as you would a module: var oledAddon = require( ./pwm-node-addon ); Example Code Example code that uses the pwm-exp-node addon can be found here in the i2c-exp-node-addons Onion GitHub Repo. Return Values All of the functions will either return a 0 indicating success or 1 indicating failure. Calling Methods Methods are called in the following format. pwmAddon.method(); Replace method with your funcion of interest. Available Methods Refer to the table below for a list and brief description of available pwm methods. Method Inputs Description driverInit() none Initialize the pwm expansion for use checkInit() none Check to see if the expansion is initialized setupDriver(int driverNum, float duty, float delay ) 0-15 or -1, 0-100, 0-100 Generates the specified pwm signal on the specified channel setFrequency(float freq) 24-1526 Sets the frequency for the oscillator chip disableChip() none Disables the oscillator chip and stops all pwm signals Usage Initialization Function This function programs the initialization sequence on the Servo Expansion, after this step is completed, the functions to generate PWM signals or change the signal frequency can be used with success: pwmAddon.driverInit(); Check for Initialization This function performs several reads to determine if the Servo Expansion has been initialized and the oscillator is running: pwmAddon.checkInit(); Examples Let's check if the oscillator is initialized. Generate a PWM Signal Here we go! Use this function to generate a PWM signal on a specified channel: pwmAddon.setupDriver(int driverNum, float duty, float delay); Arguments The driverNum argument is detemines on which channel to generate the PWM signal. The accepted values are: Value Meaning 0-15 Matches the label on the Servo Expansion -1 Generates the same signal on all channels The duty argument specifies duty cycle percentage for the PWM signal. Accepted values are 0 to 100. Decimal values are allowed. The delay argument specifies the percentage delay before the PWM signal goes high. Accepted values are 0 to 100 with decimal values being allowed. In normal use with servos this should be set to 0. Examples Set channel 0 to a PWM signal with a 50% duty cycle: pwmAddon.setupDriver(0,50,0); Generate a 3.55% duty cycle PWM signal with a 45% delay on channel 7: pwmAddon.setupDriver(7, 3.55f, 45); Set channel 0 to a PWM signal with a 50% duty cycle: pwmAddon.setupDriver(15, 100, 0); Set channel 8 to always off: pwmAddon.setupDriver(8, 0, 0); Set all channels to a 15.65% duty cycle PWM signal: pwmAddon.setupDriver(-1, 15.65f, 0.0f); Set PWM Signal Frequency The oscillator can be reprogrammed to generate a variety of different frequencies: pwmAddon.setFrequency(float freq); This will change the frequency of the PWM signals generated on all of the channels. The oscillator can generate frequencies between 24 Hz and 1526 Hz, the default value is 50 Hz. Arguments The freq argument is a floating point number that specifies the frequency. The function will accept any input but the programmed frequency will be clamped between 24 Hz and 1526 Hz. Examples Change the frequency to 60 Hz and generate a 40% duty cycle signal on channel 14: pwmAddon.setFrequency(60); pwmAddon.setupDriver(14,40,0); Generate a signal on channel 13, change the frequency to 105.45 Hz, and generate a new signal on channel 13: pwmAddon.setupDriver(13,99,0); pwmAddon.setFrequency(105.45); pwmAddon.setupDriver(13,82,0); Disabling the Oscillator The oscillator can also be disabled, automatically stopping all PWM signal generation: pwmAddon.disableChip(); This might be useful for disabling PWM signal-driven devices while not powering off the Omega. The initialization function will have to be run before new PWM signals can be generated.","title":"**PWM Expansion Node Addon**"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Full_PWM_Node_Doc/#pwm-expansion-node-addon","text":"The Onion Servo (PWM) Node Addon, pwm-node-addon is a wrapper around the libonionpwmexp dynamic C library that provides functions to setup the servo Expansion and generate PWM signals. [[ TOC ]]","title":"PWM Expansion Node Addon"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Full_PWM_Node_Doc/#programming-flow","text":"After each power-cycle, the chip that controls the PWM Expansion must be programmed with an initialization sequence to enable the on-board oscillator so that PWM signals can be generated. After the initialization, the other functions can be used to generate PWM signals on specific channels or to change the PWM signal frequency. Additionally, it is possible to disable to the oscillator, disabling the generation of all PWM signals at once. Before generating new PWM signals, the initialization sequence must be run again.","title":"Programming Flow"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Full_PWM_Node_Doc/#channels","text":"The PWM Expansion has 16 channels that can generate distinct PWM signals. Note that they will all be running on the same frequency.","title":"Channels"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Full_PWM_Node_Doc/#pwm-signal-refresher","text":"Pulse Width Modulated signals can be described with duty cycle percentages and frequencies/periods: The duty cycle indicates what percentage of time a signal is on or high voltage. The frequency determines the overall period of the pulse. For a more detailed explanation, see the guide on using the Servo Expansion .","title":"PWM Signal Refresher"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Full_PWM_Node_Doc/#the-node-addon","text":"The pwm-exp-addon exposes a series of methods that perform all of the actions specified in the Programming Flow section.","title":"The Node Addon"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Full_PWM_Node_Doc/#install-the-addon","text":"Install the addon on your Omega: opkg update opkg install pwm-exp-node NodeJS will need to be installed for Node programs to actually run: opkg install nodejs","title":"Install the Addon"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Full_PWM_Node_Doc/#importing-the-addon-into-your-node-script","text":"To use the addon within your script you have to import it into your node program as you would a module: var oledAddon = require( ./pwm-node-addon );","title":"Importing the addon into your Node Script"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Full_PWM_Node_Doc/#example-code","text":"Example code that uses the pwm-exp-node addon can be found here in the i2c-exp-node-addons Onion GitHub Repo.","title":"Example Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Full_PWM_Node_Doc/#return-values","text":"All of the functions will either return a 0 indicating success or 1 indicating failure.","title":"Return Values"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Full_PWM_Node_Doc/#calling-methods","text":"Methods are called in the following format. pwmAddon.method(); Replace method with your funcion of interest.","title":"Calling Methods"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Full_PWM_Node_Doc/#available-methods","text":"Refer to the table below for a list and brief description of available pwm methods. Method Inputs Description driverInit() none Initialize the pwm expansion for use checkInit() none Check to see if the expansion is initialized setupDriver(int driverNum, float duty, float delay ) 0-15 or -1, 0-100, 0-100 Generates the specified pwm signal on the specified channel setFrequency(float freq) 24-1526 Sets the frequency for the oscillator chip disableChip() none Disables the oscillator chip and stops all pwm signals","title":"Available Methods"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Full_PWM_Node_Doc/#usage","text":"","title":"Usage"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Full_PWM_Node_Doc/#initialization-function","text":"This function programs the initialization sequence on the Servo Expansion, after this step is completed, the functions to generate PWM signals or change the signal frequency can be used with success: pwmAddon.driverInit();","title":"Initialization Function"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Full_PWM_Node_Doc/#check-for-initialization","text":"This function performs several reads to determine if the Servo Expansion has been initialized and the oscillator is running: pwmAddon.checkInit(); Examples Let's check if the oscillator is initialized.","title":"Check for Initialization"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Full_PWM_Node_Doc/#generate-a-pwm-signal","text":"Here we go! Use this function to generate a PWM signal on a specified channel: pwmAddon.setupDriver(int driverNum, float duty, float delay); Arguments The driverNum argument is detemines on which channel to generate the PWM signal. The accepted values are: Value Meaning 0-15 Matches the label on the Servo Expansion -1 Generates the same signal on all channels The duty argument specifies duty cycle percentage for the PWM signal. Accepted values are 0 to 100. Decimal values are allowed. The delay argument specifies the percentage delay before the PWM signal goes high. Accepted values are 0 to 100 with decimal values being allowed. In normal use with servos this should be set to 0. Examples Set channel 0 to a PWM signal with a 50% duty cycle: pwmAddon.setupDriver(0,50,0); Generate a 3.55% duty cycle PWM signal with a 45% delay on channel 7: pwmAddon.setupDriver(7, 3.55f, 45); Set channel 0 to a PWM signal with a 50% duty cycle: pwmAddon.setupDriver(15, 100, 0); Set channel 8 to always off: pwmAddon.setupDriver(8, 0, 0); Set all channels to a 15.65% duty cycle PWM signal: pwmAddon.setupDriver(-1, 15.65f, 0.0f);","title":"Generate a PWM Signal"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Full_PWM_Node_Doc/#set-pwm-signal-frequency","text":"The oscillator can be reprogrammed to generate a variety of different frequencies: pwmAddon.setFrequency(float freq); This will change the frequency of the PWM signals generated on all of the channels. The oscillator can generate frequencies between 24 Hz and 1526 Hz, the default value is 50 Hz. Arguments The freq argument is a floating point number that specifies the frequency. The function will accept any input but the programmed frequency will be clamped between 24 Hz and 1526 Hz. Examples Change the frequency to 60 Hz and generate a 40% duty cycle signal on channel 14: pwmAddon.setFrequency(60); pwmAddon.setupDriver(14,40,0); Generate a signal on channel 13, change the frequency to 105.45 Hz, and generate a new signal on channel 13: pwmAddon.setupDriver(13,99,0); pwmAddon.setFrequency(105.45); pwmAddon.setupDriver(13,82,0);","title":"Set PWM Signal Frequency"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Full_PWM_Node_Doc/#disabling-the-oscillator","text":"The oscillator can also be disabled, automatically stopping all PWM signal generation: pwmAddon.disableChip(); This might be useful for disabling PWM signal-driven devices while not powering off the Omega. The initialization function will have to be run before new PWM signals can be generated.","title":"Disabling the Oscillator"},{"location":"tutorials/OnionWiki/Documentation/Libraries/GPIO-Python-Module/","text":"Onion GPIO Python Module The onionGpio Python module provides a Python object, OnionGpio that allows programs to control the Omega's GPIOs. The module uses the sysfs GPIO interface that is part of the Linux operating system. [[ TOC ]] Programming Flow Once the OnionGpio object is initialized, the class methods can be used to: * Set the GPIO to the input or output direction * Read the value of the GPIO (for both the input and output directions) * Set the value of the GPIO (only in the output direction) Using the Python Module Installing the Module To install the Python module, run the following commands: opkg update opkg install python-light pyOnionGpio This will install the module to /usr/lib/python2.7/ Note: this only has to be done once. Using the Module To add the Onion GPIO Module to your Python program, include the following in your code: import onionGpio Example Code Several examples of how the OnionGpio object is used can be found in the examples in the onion-gpio-sysfs repo. This directory contains all of the code seen below as well as some additional examples. The main example is the gpio-test.py script , it sets GPIO14 to be an input and reads the value, it then changes the GPIO direction to output, reads the current value, sets the value to 1, and reads the value again. Functions Each of the main functions implemented in this module are described below. Constructor The object needs to be initialized before it can be used, hence, the constructor: gpioObject = onionGpio.OnionGpio(gpioNumber) After this call, the object can be used freely. Arguments The gpioNumber argument is an integer that indicates the GPIO that is to be controlled by this object. Example To initialize an OnionGpio object to control GPIO14: gpio14 = onionGpio.OnionGpio(14) GPIO Direction The GPIOs on the Omega can be set to the input or output direction. When in the input direction, external signals can be connected to the GPIO and the digital value can be read. When in the output direction, the digital value the GPIO is driving can be programmed. Reading the Current Direction In some instances, it will be useful to find out the current direction of the GPIO: direction = gpioObject.getDirection() Return Value The function will return the following: * in if the Input direction is selected * out if the Output direction is selected Setting the Direction The direction of the GPIO can be set to input : status = gpioObject.setInputDirection() Or output : status = gpioObject.setOutputDirection(defaultValue) Return Value The function will return the following: * 0 if the operation is successful * -1 if the operation is NOT successful Arguments The setOutputDirection() function has an optional integer argument that, when defined, will set the initial value of the GPIO to ensure glitch-free operation. If the optional argument is not set, the GPIO will just be set to output and the initial value will most likely be LOW. However, glitch-free operation cannot be guaranteed. Examples Set your GPIO to input: status = gpio14.setInputDirection() Set the GPIO to output: status = gpio14.setOutputDirection() Set the GPIO to output with LOW (0) as the initial value: status = gpio14.setOutputDirection(0) Set the GPIO to output with HIGH (1) as the initial value: status = gpio14.setOutputDirection(1) GPIO Value The good part, finally! Now we will be reading and setting a GPIO's value. Reading the Value Reading the current value of the GPIO: value = gpioObject.getValue() Note that the value of the GPIO can be read in both Input and Output mode. The difference is that in input mode, the GPIO can be driven high or low based on external signals, and that is the value that will be read. In output mode, the value that will be read is what the GPIO is currently outputting. Return Value The function will return the current value of the GPIO: either 0 or 1 Examples Set the GPIO to input and then read and print the value every second: import time import onionGpio gpioNum = 7 gpioObj = onionGpio.OnionGpio(gpioNum) # set to input status = gpioObj.setInputDirection() # read and print the value once a second loop = 1 while loop == 1: value = gpioObj.getValue() print 'GPIO%d input value: %d'%(gpioNum, int(value)) time.sleep(1) This code can be found in the onion-gpio-sysfs repo example directory , it's named read-input-loop.py Set the GPIO to output, read the initial value: import onionGpio gpioNum = 6 gpioObj = onionGpio.OnionGpio(gpioNum) # set to input status = gpioObj.setOutputDirection() print 'GPIO%d set to output,'%(gpioNum), # read the value value = gpioObj.getValue() print ' initial value: %d'%(int(value)) This code can be found in the onion-gpio-sysfs repo example directory , it's called read-output.py Setting the Value And what we've all been waiting for, setting the value of a GPIO: status = gpioObject.setValue(value) Note that this will only work the the GPIO is programmed to the Output direction! Arguments The value argument is the value to set the GPIO. Set it to 0 to make the GPIO output a digital 0 (LOW), or set to 1 to output a digital 1 (HIGH). Return Value The function will return the following: * 0 if the operation is successful * -1 if the operation is NOT successful Example Set a GPIO to output, and alternate the output between LOW and HIGH every 5 seconds: import time import onionGpio gpioNum = 1 gpioObj = onionGpio.OnionGpio(gpioNum) # set to output status = gpioObj.setOutputDirection(0) # alternate the value loop = 1 value = 0 while loop == 1: # reverse the value if value == 0: value = 1 else: value = 0 # set the new value status = gpioObj.setValue(value) print 'GPIO%d set to: %d'%(gpioNum, value) time.sleep(5) This code can be found in the onion-gpio-sysfs repo example directory , it's called set-high-low-loop.py","title":"Onion GPIO Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/GPIO-Python-Module/#onion-gpio-python-module","text":"The onionGpio Python module provides a Python object, OnionGpio that allows programs to control the Omega's GPIOs. The module uses the sysfs GPIO interface that is part of the Linux operating system. [[ TOC ]]","title":"Onion GPIO Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/GPIO-Python-Module/#programming-flow","text":"Once the OnionGpio object is initialized, the class methods can be used to: * Set the GPIO to the input or output direction * Read the value of the GPIO (for both the input and output directions) * Set the value of the GPIO (only in the output direction)","title":"Programming Flow"},{"location":"tutorials/OnionWiki/Documentation/Libraries/GPIO-Python-Module/#using-the-python-module","text":"Installing the Module To install the Python module, run the following commands: opkg update opkg install python-light pyOnionGpio This will install the module to /usr/lib/python2.7/ Note: this only has to be done once. Using the Module To add the Onion GPIO Module to your Python program, include the following in your code: import onionGpio","title":"Using the Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/GPIO-Python-Module/#example-code","text":"Several examples of how the OnionGpio object is used can be found in the examples in the onion-gpio-sysfs repo. This directory contains all of the code seen below as well as some additional examples. The main example is the gpio-test.py script , it sets GPIO14 to be an input and reads the value, it then changes the GPIO direction to output, reads the current value, sets the value to 1, and reads the value again.","title":"Example Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/GPIO-Python-Module/#functions","text":"Each of the main functions implemented in this module are described below.","title":"Functions"},{"location":"tutorials/OnionWiki/Documentation/Libraries/GPIO-Python-Module/#constructor","text":"The object needs to be initialized before it can be used, hence, the constructor: gpioObject = onionGpio.OnionGpio(gpioNumber) After this call, the object can be used freely. Arguments The gpioNumber argument is an integer that indicates the GPIO that is to be controlled by this object. Example To initialize an OnionGpio object to control GPIO14: gpio14 = onionGpio.OnionGpio(14)","title":"Constructor"},{"location":"tutorials/OnionWiki/Documentation/Libraries/GPIO-Python-Module/#gpio-direction","text":"The GPIOs on the Omega can be set to the input or output direction. When in the input direction, external signals can be connected to the GPIO and the digital value can be read. When in the output direction, the digital value the GPIO is driving can be programmed.","title":"GPIO Direction"},{"location":"tutorials/OnionWiki/Documentation/Libraries/GPIO-Python-Module/#reading-the-current-direction","text":"In some instances, it will be useful to find out the current direction of the GPIO: direction = gpioObject.getDirection() Return Value The function will return the following: * in if the Input direction is selected * out if the Output direction is selected","title":"Reading the Current Direction"},{"location":"tutorials/OnionWiki/Documentation/Libraries/GPIO-Python-Module/#setting-the-direction","text":"The direction of the GPIO can be set to input : status = gpioObject.setInputDirection() Or output : status = gpioObject.setOutputDirection(defaultValue) Return Value The function will return the following: * 0 if the operation is successful * -1 if the operation is NOT successful Arguments The setOutputDirection() function has an optional integer argument that, when defined, will set the initial value of the GPIO to ensure glitch-free operation. If the optional argument is not set, the GPIO will just be set to output and the initial value will most likely be LOW. However, glitch-free operation cannot be guaranteed. Examples Set your GPIO to input: status = gpio14.setInputDirection() Set the GPIO to output: status = gpio14.setOutputDirection() Set the GPIO to output with LOW (0) as the initial value: status = gpio14.setOutputDirection(0) Set the GPIO to output with HIGH (1) as the initial value: status = gpio14.setOutputDirection(1)","title":"Setting the Direction"},{"location":"tutorials/OnionWiki/Documentation/Libraries/GPIO-Python-Module/#gpio-value","text":"The good part, finally! Now we will be reading and setting a GPIO's value.","title":"GPIO Value"},{"location":"tutorials/OnionWiki/Documentation/Libraries/GPIO-Python-Module/#reading-the-value","text":"Reading the current value of the GPIO: value = gpioObject.getValue() Note that the value of the GPIO can be read in both Input and Output mode. The difference is that in input mode, the GPIO can be driven high or low based on external signals, and that is the value that will be read. In output mode, the value that will be read is what the GPIO is currently outputting. Return Value The function will return the current value of the GPIO: either 0 or 1 Examples Set the GPIO to input and then read and print the value every second: import time import onionGpio gpioNum = 7 gpioObj = onionGpio.OnionGpio(gpioNum) # set to input status = gpioObj.setInputDirection() # read and print the value once a second loop = 1 while loop == 1: value = gpioObj.getValue() print 'GPIO%d input value: %d'%(gpioNum, int(value)) time.sleep(1) This code can be found in the onion-gpio-sysfs repo example directory , it's named read-input-loop.py Set the GPIO to output, read the initial value: import onionGpio gpioNum = 6 gpioObj = onionGpio.OnionGpio(gpioNum) # set to input status = gpioObj.setOutputDirection() print 'GPIO%d set to output,'%(gpioNum), # read the value value = gpioObj.getValue() print ' initial value: %d'%(int(value)) This code can be found in the onion-gpio-sysfs repo example directory , it's called read-output.py","title":"Reading the Value"},{"location":"tutorials/OnionWiki/Documentation/Libraries/GPIO-Python-Module/#setting-the-value","text":"And what we've all been waiting for, setting the value of a GPIO: status = gpioObject.setValue(value) Note that this will only work the the GPIO is programmed to the Output direction! Arguments The value argument is the value to set the GPIO. Set it to 0 to make the GPIO output a digital 0 (LOW), or set to 1 to output a digital 1 (HIGH). Return Value The function will return the following: * 0 if the operation is successful * -1 if the operation is NOT successful Example Set a GPIO to output, and alternate the output between LOW and HIGH every 5 seconds: import time import onionGpio gpioNum = 1 gpioObj = onionGpio.OnionGpio(gpioNum) # set to output status = gpioObj.setOutputDirection(0) # alternate the value loop = 1 value = 0 while loop == 1: # reverse the value if value == 0: value = 1 else: value = 0 # set the new value status = gpioObj.setValue(value) print 'GPIO%d set to: %d'%(gpioNum, value) time.sleep(5) This code can be found in the onion-gpio-sysfs repo example directory , it's called set-high-low-loop.py","title":"Setting the Value"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-C-Library/","text":"I2C C Library The Onion I2C Library, libonioni2c is a dynamic C library that provides functions to easily read from and write to devices communicating with the Omega via I2C. The library can be used in C and C++ programs. Also available is a Python module that implements an I2C object using functions from the C library. The module is called onionI2C and is part of the OmegaExpansion package. [[ TOC ]] Linux and I2C I2C devices are usually controlled by a kernel driver, however, it is also possible to access devices through an adapter in the Linux filesystem. The adapter can be found at /dev/i2c-X , where X is the adapter number which can range from 0 to 255. On the Omega, /dev/i2c-0 is available by default. This allows users to interact with I2C slaves from the Linux environment. The Onion I2C library uses the /dev/i2c-0 adapter, and implements read and write functions I2C devices. The C Library The libonioni2c C library is a series of functions that implement I2C communication through the Linux device interface. Source Code The source code can be found in the Onion i2c-exp-driver GitHub Repo . Programming Flow Each of the read and write functions have been written to be self-contained, so one function call will complete the desired action. Using the Library Header File To add the Onion I2C Library to your C/C++ program, include the header file in your C code: #include onion-i2c.h Library for Linker In your project's makefile, you will need to add the following dynamic libraries to the linker command: -loniondebug -lonioni2c The dynamic libraries are stored in /usr/lib on the Omega. Example An example of how the libonioni2c library is used can be found in the GitHub Repo for the drivers for the PWM, Relay, and OLED Expansions . Specifically, a variety of functions are used in the PWM Expansion source code . Functions Each of the main functions implemented in this library are described below. Function Flow All of the functions follow the same general pattern: * Get a file descriptor to the I2C adapter * Inform the adapter which device to communicate with * Perform the function's main operation (read, write to the I2C adapter) * Release the I2C adapter device handle * Return the function status Return Values All functions follow the same pattern with return values: If the function operation is successful, the return value will be EXIT_SUCCESS which is a macro defined as 0 in cstdlib.h. If the function operation is not successful, the function will return EXIT_FAILURE which is defined as 1 . A few reasons why the function might not be successful: * The specified device address cannot be found on the I2C bus * The system I2C interface is currently in use elsewhere An error message will be printed that will give more information on the reason behind the failure. Read Functions Functions that perform reads from devices on the I2C bus Function: i2c_readByte The i2c_readByte function will read one byte from a register address on a specified device on the I2C bus. The function is declared as follows: int i2c_readByte (int devNum, int devAddr, int addr, int *val); Arguments Argument Explanation devNum Omega I2C adapter number devAddr I2C device address addr Device register to access *val Returns: read value The adapter number on the Omega should always be 0 since it will use /dev/i2c-0 to interface with I2C devices. The I2C device address is unique to each type of device and can be found in the device datasheet. The datasheet will also define register addresses to read specific data. Finally, the val argument is passed by reference, and after the function runs will contain the single byte that was read. Examples To read a byte from the 0x01 register from an I2C device with address of 0x5a (the Servo Expansion): int status, rdByte; status = i2c_write(0, 0x5a, 0x01, rdByte); Function: i2c_read The i2c_read function will read a specified number of bytes from a register address on a device on the I2C bus. The function is declared as follows: int i2c_read (int devNum, int devAddr, int addr, uint8_t *buffer, int numBytes); Arguments Argument Explanation devNum Omega I2C adapter number devAddr I2C device address addr Device register to access *buffer Pointer that will contain the bytes read numBytes Number of bytes to read The adapter number on the Omega should always be 0 since it will use /dev/i2c-0 to interface with I2C devices. The I2C device address is unique to each type of device and can be found in the device datasheet. The datasheet will also define register addresses to read specific data. The numBytes argument specifies how many bytes to read from a specific address on the I2C device. The *buffer argument is a unsigned 8-bit integer pointer that will contain all of the bytes read from the device once the function returns Note that when using a pointer for the buffer argument, it must be allocated before being passed into the function, and it must be allocated with at least the number specified by numBytes . When using an array for the buffer, it must be declared with at least the number of elements specified by the numBytes argument. C Examples To read 4 bytes from address 0x00 on a device with an address of 0x48, using a pointer for the buffer: int status; uint8_t *buffer = malloc(4 * sizeof *buffer); status = i2c_read(0, 0x48, 0x00, buffer, 4); To read 2 bytes from address 0x10 on a device with an address of 0x48, using an array for the buffer: int status; uint8_t buffer[32]; status = i2c_read(0, 0x48, 0x10, buffer, 2); C++ Examples To read 2 bytes from address 0x00 on a device with an address of 0x48, using a pointer for the buffer: int status; uint8_t *buffer = new uint8_t[16]; status = i2c_read(0, 0x48, 0x00, buffer, 2); Write Functions Functions that perform writes to devices on the I2C bus. Function: i2c_writeBuffer The i2c_writeBuffer function will write a specified number of bytes from a previously populated pointer or array to a register address on an I2C device. The function is declared as follows: int i2c_writeBuffer (int devNum, int devAddr, int addr, uint8_t *buffer, int size); Arguments Argument Explanation devNum Omega I2C adapter number devAddr I2C device address addr Device register to access *buffer Bytes to be written to the device size Number of bytes to be written The adapter number on the Omega should always be 0 since it will use /dev/i2c-0 to interface with I2C devices. The I2C device address is unique to each type of device and can be found in the device datasheet. The datasheet will also define register addresses to read specific data. The size argument is the number of bytes to write from the buffer pointer. The *buffer argument is a unsigned 8-bit integer pointer that contains all of the bytes to be written to the specified address on the I2C device. Note that buffer[0] will be written first, and then buffer[1] , and so on. When using a pointer for the buffer argument, it must be allocated and populated before being passed into the function, and it must be allocated with at least the number specified by size . When using an array for the buffer, it must be declared with at least the number of elements specified by the numBytes argument. Examples Write 2 bytes to the 0x02 register address on an I2C device with an address of 0x08, using an array for the buffer argument : int status; uint8_t buffer[32]; // populate the buffer buffer[0] = 0xde; buffer[1] = 0xad; status = i2c_writeBuffer(0, 0x08, 0x01, buffer, 2); Write 3 bytes to the 0x05 register address on the same device as above using an array for the buffer argument: int status; uint8_t buffer[3] = {0xbe, 0xef, 0x80}; status = i2c_writeBuffer(0, 0x08, 0x05, buffer, 3); Write 4 bytes to the 0x54 register address on an I2C device with an address of 0x30, *using a pointer for the buffer argument: int status; uint8_t *buffer = malloc(4 * sizeof *buffer); // populate the buffer buffer[0] = 0xb6; buffer[1] = 0xd1; buffer[2] = 0xe3; buffer[3] = 0xff; status = i2c_writeBuffer(0, 0x30, 0x54, buffer, 4); Function: i2c_writeBytes The i2c_writeBytes function will write a specified number of bytes from an integer variable to an address on an I2C device. Sometimes it's a little quicker to pass in an integer rather than create a buffer like the i2c_writeBuffer function above requires. Note that the Least Significant Byte (LSB) of the integer will be written first and that the maximum number of bytes is 4 (since an int holds 32 bits on the Omega). The function is declared as follows: int i2c_writeBytes (int devNum, int devAddr, int addr, int val, int numBytes); Arguments Argument Explanation devNum Omega I2C adapter number devAddr I2C device address addr Device register to access val Integer to be written numBytes Number of bytes to be written The adapter number on the Omega should always be 0 since it will use /dev/i2c-0 to interface with I2C devices. The I2C device address is unique to each type of device and can be found in the device datasheet. The datasheet will also define register addresses to read specific data. The numBytes argument is the number of bytes to write from the integer. The val argument is an integer variable that should be preprogrammed with a value to be written. Note that the bytes of the integer will be written in the following order, assuming that 4 bytes are being written: * val[7:0] * val[15:8] * val[23:16] * val[31:14] Examples Write a byte to the 0x02 register address on an I2C device with an address of 0x08: int status; int val = 0x04; status = i2c_writeBytes(0, 0x08, 0x01, val, 1); Write 2 bytes to the 0x05 register address on the same device as above: int status; int val = 0x1304; // write 0x04 and then 0x13 to the 0x01 address status = i2c_writeBytes(0, 0x08, 0x01, val, 2); Write 3 bytes to the 0x54 register address on an I2C device with an address of 0x30: int status; int val = 0xfe082324; // write 0x24, then 0x23, and then 0x08 to the 0x54 address status = i2c_writeBytes(0, 0x30, 0x54, val, 3); Write 4 bytes to the 0x00 register address on an I2C device with an address of 0x30: int status; int val = 0x27f8e460; // write 0x60, then 0xe4, then 0xf8, and then 0x27 to the 0x00 address status = i2c_writeBytes(0, 0x30, 0x00, val, 4);","title":"I2C C Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-C-Library/#i2c-c-library","text":"The Onion I2C Library, libonioni2c is a dynamic C library that provides functions to easily read from and write to devices communicating with the Omega via I2C. The library can be used in C and C++ programs. Also available is a Python module that implements an I2C object using functions from the C library. The module is called onionI2C and is part of the OmegaExpansion package. [[ TOC ]]","title":"I2C C Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-C-Library/#linux-and-i2c","text":"I2C devices are usually controlled by a kernel driver, however, it is also possible to access devices through an adapter in the Linux filesystem. The adapter can be found at /dev/i2c-X , where X is the adapter number which can range from 0 to 255. On the Omega, /dev/i2c-0 is available by default. This allows users to interact with I2C slaves from the Linux environment. The Onion I2C library uses the /dev/i2c-0 adapter, and implements read and write functions I2C devices.","title":"Linux and I2C"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-C-Library/#the-c-library","text":"The libonioni2c C library is a series of functions that implement I2C communication through the Linux device interface.","title":"The C Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-C-Library/#source-code","text":"The source code can be found in the Onion i2c-exp-driver GitHub Repo .","title":"Source Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-C-Library/#programming-flow","text":"Each of the read and write functions have been written to be self-contained, so one function call will complete the desired action.","title":"Programming Flow"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-C-Library/#using-the-library","text":"Header File To add the Onion I2C Library to your C/C++ program, include the header file in your C code: #include onion-i2c.h Library for Linker In your project's makefile, you will need to add the following dynamic libraries to the linker command: -loniondebug -lonioni2c The dynamic libraries are stored in /usr/lib on the Omega.","title":"Using the Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-C-Library/#example","text":"An example of how the libonioni2c library is used can be found in the GitHub Repo for the drivers for the PWM, Relay, and OLED Expansions . Specifically, a variety of functions are used in the PWM Expansion source code .","title":"Example"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-C-Library/#functions","text":"Each of the main functions implemented in this library are described below.","title":"Functions"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-C-Library/#function-flow","text":"All of the functions follow the same general pattern: * Get a file descriptor to the I2C adapter * Inform the adapter which device to communicate with * Perform the function's main operation (read, write to the I2C adapter) * Release the I2C adapter device handle * Return the function status","title":"Function Flow"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-C-Library/#return-values","text":"All functions follow the same pattern with return values: If the function operation is successful, the return value will be EXIT_SUCCESS which is a macro defined as 0 in cstdlib.h. If the function operation is not successful, the function will return EXIT_FAILURE which is defined as 1 . A few reasons why the function might not be successful: * The specified device address cannot be found on the I2C bus * The system I2C interface is currently in use elsewhere An error message will be printed that will give more information on the reason behind the failure.","title":"Return Values"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-C-Library/#read-functions","text":"Functions that perform reads from devices on the I2C bus","title":"Read Functions"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-C-Library/#function-i2c_readbyte","text":"The i2c_readByte function will read one byte from a register address on a specified device on the I2C bus. The function is declared as follows: int i2c_readByte (int devNum, int devAddr, int addr, int *val); Arguments Argument Explanation devNum Omega I2C adapter number devAddr I2C device address addr Device register to access *val Returns: read value The adapter number on the Omega should always be 0 since it will use /dev/i2c-0 to interface with I2C devices. The I2C device address is unique to each type of device and can be found in the device datasheet. The datasheet will also define register addresses to read specific data. Finally, the val argument is passed by reference, and after the function runs will contain the single byte that was read. Examples To read a byte from the 0x01 register from an I2C device with address of 0x5a (the Servo Expansion): int status, rdByte; status = i2c_write(0, 0x5a, 0x01, rdByte);","title":"Function: i2c_readByte"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-C-Library/#function-i2c_read","text":"The i2c_read function will read a specified number of bytes from a register address on a device on the I2C bus. The function is declared as follows: int i2c_read (int devNum, int devAddr, int addr, uint8_t *buffer, int numBytes); Arguments Argument Explanation devNum Omega I2C adapter number devAddr I2C device address addr Device register to access *buffer Pointer that will contain the bytes read numBytes Number of bytes to read The adapter number on the Omega should always be 0 since it will use /dev/i2c-0 to interface with I2C devices. The I2C device address is unique to each type of device and can be found in the device datasheet. The datasheet will also define register addresses to read specific data. The numBytes argument specifies how many bytes to read from a specific address on the I2C device. The *buffer argument is a unsigned 8-bit integer pointer that will contain all of the bytes read from the device once the function returns Note that when using a pointer for the buffer argument, it must be allocated before being passed into the function, and it must be allocated with at least the number specified by numBytes . When using an array for the buffer, it must be declared with at least the number of elements specified by the numBytes argument. C Examples To read 4 bytes from address 0x00 on a device with an address of 0x48, using a pointer for the buffer: int status; uint8_t *buffer = malloc(4 * sizeof *buffer); status = i2c_read(0, 0x48, 0x00, buffer, 4); To read 2 bytes from address 0x10 on a device with an address of 0x48, using an array for the buffer: int status; uint8_t buffer[32]; status = i2c_read(0, 0x48, 0x10, buffer, 2); C++ Examples To read 2 bytes from address 0x00 on a device with an address of 0x48, using a pointer for the buffer: int status; uint8_t *buffer = new uint8_t[16]; status = i2c_read(0, 0x48, 0x00, buffer, 2);","title":"Function: i2c_read"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-C-Library/#write-functions","text":"Functions that perform writes to devices on the I2C bus.","title":"Write Functions"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-C-Library/#function-i2c_writebuffer","text":"The i2c_writeBuffer function will write a specified number of bytes from a previously populated pointer or array to a register address on an I2C device. The function is declared as follows: int i2c_writeBuffer (int devNum, int devAddr, int addr, uint8_t *buffer, int size); Arguments Argument Explanation devNum Omega I2C adapter number devAddr I2C device address addr Device register to access *buffer Bytes to be written to the device size Number of bytes to be written The adapter number on the Omega should always be 0 since it will use /dev/i2c-0 to interface with I2C devices. The I2C device address is unique to each type of device and can be found in the device datasheet. The datasheet will also define register addresses to read specific data. The size argument is the number of bytes to write from the buffer pointer. The *buffer argument is a unsigned 8-bit integer pointer that contains all of the bytes to be written to the specified address on the I2C device. Note that buffer[0] will be written first, and then buffer[1] , and so on. When using a pointer for the buffer argument, it must be allocated and populated before being passed into the function, and it must be allocated with at least the number specified by size . When using an array for the buffer, it must be declared with at least the number of elements specified by the numBytes argument. Examples Write 2 bytes to the 0x02 register address on an I2C device with an address of 0x08, using an array for the buffer argument : int status; uint8_t buffer[32]; // populate the buffer buffer[0] = 0xde; buffer[1] = 0xad; status = i2c_writeBuffer(0, 0x08, 0x01, buffer, 2); Write 3 bytes to the 0x05 register address on the same device as above using an array for the buffer argument: int status; uint8_t buffer[3] = {0xbe, 0xef, 0x80}; status = i2c_writeBuffer(0, 0x08, 0x05, buffer, 3); Write 4 bytes to the 0x54 register address on an I2C device with an address of 0x30, *using a pointer for the buffer argument: int status; uint8_t *buffer = malloc(4 * sizeof *buffer); // populate the buffer buffer[0] = 0xb6; buffer[1] = 0xd1; buffer[2] = 0xe3; buffer[3] = 0xff; status = i2c_writeBuffer(0, 0x30, 0x54, buffer, 4);","title":"Function: i2c_writeBuffer"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-C-Library/#function-i2c_writebytes","text":"The i2c_writeBytes function will write a specified number of bytes from an integer variable to an address on an I2C device. Sometimes it's a little quicker to pass in an integer rather than create a buffer like the i2c_writeBuffer function above requires. Note that the Least Significant Byte (LSB) of the integer will be written first and that the maximum number of bytes is 4 (since an int holds 32 bits on the Omega). The function is declared as follows: int i2c_writeBytes (int devNum, int devAddr, int addr, int val, int numBytes); Arguments Argument Explanation devNum Omega I2C adapter number devAddr I2C device address addr Device register to access val Integer to be written numBytes Number of bytes to be written The adapter number on the Omega should always be 0 since it will use /dev/i2c-0 to interface with I2C devices. The I2C device address is unique to each type of device and can be found in the device datasheet. The datasheet will also define register addresses to read specific data. The numBytes argument is the number of bytes to write from the integer. The val argument is an integer variable that should be preprogrammed with a value to be written. Note that the bytes of the integer will be written in the following order, assuming that 4 bytes are being written: * val[7:0] * val[15:8] * val[23:16] * val[31:14] Examples Write a byte to the 0x02 register address on an I2C device with an address of 0x08: int status; int val = 0x04; status = i2c_writeBytes(0, 0x08, 0x01, val, 1); Write 2 bytes to the 0x05 register address on the same device as above: int status; int val = 0x1304; // write 0x04 and then 0x13 to the 0x01 address status = i2c_writeBytes(0, 0x08, 0x01, val, 2); Write 3 bytes to the 0x54 register address on an I2C device with an address of 0x30: int status; int val = 0xfe082324; // write 0x24, then 0x23, and then 0x08 to the 0x54 address status = i2c_writeBytes(0, 0x30, 0x54, val, 3); Write 4 bytes to the 0x00 register address on an I2C device with an address of 0x30: int status; int val = 0x27f8e460; // write 0x60, then 0xe4, then 0xf8, and then 0x27 to the 0x00 address status = i2c_writeBytes(0, 0x30, 0x00, val, 4);","title":"Function: i2c_writeBytes"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-Python-Module/","text":"I2C Python Library The Onion I2C Library, libonioni2c is a dynamic C library that provides functions to easily read from and write to devices communicating with the Omega via I2C. The library can be used in C and C++ programs. Also available is a Python module that implements an I2C object using functions from the C library. The module is called onionI2C and is part of the OmegaExpansion package. [[ TOC ]] Linux and I2C I2C devices are usually controlled by a kernel driver, however, it is also possible to access devices through an adapter in the Linux filesystem. The adapter can be found at /dev/i2c-X , where X is the adapter number which can range from 0 to 255. On the Omega, /dev/i2c-0 is available by default. This allows users to interact with I2C slaves from the Linux environment. The Onion I2C library uses the /dev/i2c-0 adapter, and implements read and write functions I2C devices. The Python Module The onionI2C Python module in the OmegaExpansion package provides a Python object that serves as a wrapper around the C library functions. The usage is slightly different since the Python module is object oriented and the C library is just a set of functions. Source Code The source code can be found in the Onion i2c-exp-driver GitHub Repo . Programming Flow Once the I2C object is initialized, the read and write functions can be called freely using the object. Using the Python Module Installing the Module To install the Python module, run the following commands: opkg update opkg install python-light pyOnionI2C This will install the module to /usr/lib/python2.7/OmegaExpansion/ Note: this only has to be done once. Using the Module To add the Onion I2C Module to your Python program, include the following in your code: from OmegaExpansion import onionI2C Example An example of how the onionI2C library is used can be found in the i2c-exp-driver repo. The example code programs the Relay Expansion directly. Functions Each of the main functions implemented in this module are described below. Initialization The object needs to be initialized before it can be used for reading and writing: i2c = onionI2C.OnionI2C() After this call, the object can be used for reading and writing. Arguments The constructor has an optional argument that defines the I2C device adapter number. This corresponds to the X in /dev/i2c-X . If no argument is supplied, the adapter will be set to /dev/i2c-0 . This is the only default adapter on the Omega and should suit most use cases. If your use case requires a different adapter, add an integer argument to the constructor call. Reading from an I2C Slave Reading Bytes This function reads a specified number of bytes from a specific device on the I2C bus, and returns them in a list: valList = i2c.readBytes(devAddr, addr, size) Arguments The devAddr argument defines the I2C slave device address. The addr argument defines the address on the device from which to read. The number of bytes to be read should be placed in the size argument. Examples Read 4 bytes from address 0x00 on a device with an address of 0x48 : rdBytes = i2c.readBytes(0x48, 0x00, 4) Read a byte from address 0x24 on a device with an address of 0x27 : byteList = i2c.readBytes(0x27, 0x24, 1) Note that even though only a single byte is being read, the variable byteList will be in the form of a list. Writing to an I2C Slave All writing functions share the same schema for return values: * For a successful write, 0 will be returned * An unsuccessful write will return 1 Write a Single Byte This function will write a single byte to a specific device on the I2C bus: status = i2c.writeByte(devAddr, addr, value) Arguments The devAddr argument defines the I2C slave device address. The addr argument defines the address on the device that will be written to. The value argument is the single byte to be written. Examples Write 0xef to address 0xf1 on a device with an address of 0x11 : status = i2c.writeByte(0x11, 0xf1, 0xef) Write 0xbe to address 0xaa on a device with an address of 0x33 : status = i2c.writeByte(0x33, 0xaa, 0xbe) Write a List of Bytes This function will write a list of bytes to an address on a specific device on the I2C bus: status = i2c.writeBytes(devAddr, addr, values) Arguments The devAddr argument defines the I2C slave device address. The addr argument defines the address on the device that will be written to. The values argument is the list of bytes to be written. Examples Write 0xde, 0xad, 0xbe, 0xef to address 0x1a on a device with an address of 0x66 : bytes = [0xde, 0xad, 0xbe, 0xef] status = i2c.writeBytes(0x66, 0x1a, bytes) Write 0xbe to address 0xaa on a device with an address of 0x33 : status = i2c.writeBytes(0x33, 0xaa, [0xbe]) Write 0x01, 0x03, 0x05 to address 0x55 on a device with an address of 0x24 : status = i2c.writeBytes(0x24, 0x55, [0x01, 0x03, 0x05]) Write a List of Bytes without Specifying an Address This function will write a list of bytes to a specific device on the I2C bus: status = i2c.write(devAddr, values) It can be used when no specific on address on the device needs to be specified. Arguments The devAddr argument defines the I2C slave device address. The values argument is the list of bytes to be written. Examples Write 0xde, 0xad, 0xbe, 0xef to a device with an address of 0x67 : bytes = [0xde, 0xad, 0xbe, 0xef] status = i2c.write(0x67, bytes) Write 0xaa, 0xbe to a device with an address of 0x34 : status = i2c.write(0x34, [0xaa, 0xbe]) Write 0x01, 0x03, 0x05, 0x02, 0x04, 0x06, 0xaa to a device with an address of 0x13 : bytes = [0x01, 0x03, 0x05, 0x02, 0x04, 0x06, 0xaa] status = i2c.write(0x13, bytes)","title":"I2C Python Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-Python-Module/#i2c-python-library","text":"The Onion I2C Library, libonioni2c is a dynamic C library that provides functions to easily read from and write to devices communicating with the Omega via I2C. The library can be used in C and C++ programs. Also available is a Python module that implements an I2C object using functions from the C library. The module is called onionI2C and is part of the OmegaExpansion package. [[ TOC ]]","title":"I2C Python Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-Python-Module/#linux-and-i2c","text":"I2C devices are usually controlled by a kernel driver, however, it is also possible to access devices through an adapter in the Linux filesystem. The adapter can be found at /dev/i2c-X , where X is the adapter number which can range from 0 to 255. On the Omega, /dev/i2c-0 is available by default. This allows users to interact with I2C slaves from the Linux environment. The Onion I2C library uses the /dev/i2c-0 adapter, and implements read and write functions I2C devices.","title":"Linux and I2C"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-Python-Module/#the-python-module","text":"The onionI2C Python module in the OmegaExpansion package provides a Python object that serves as a wrapper around the C library functions. The usage is slightly different since the Python module is object oriented and the C library is just a set of functions.","title":"The Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-Python-Module/#source-code","text":"The source code can be found in the Onion i2c-exp-driver GitHub Repo .","title":"Source Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-Python-Module/#programming-flow","text":"Once the I2C object is initialized, the read and write functions can be called freely using the object.","title":"Programming Flow"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-Python-Module/#using-the-python-module","text":"Installing the Module To install the Python module, run the following commands: opkg update opkg install python-light pyOnionI2C This will install the module to /usr/lib/python2.7/OmegaExpansion/ Note: this only has to be done once. Using the Module To add the Onion I2C Module to your Python program, include the following in your code: from OmegaExpansion import onionI2C","title":"Using the Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-Python-Module/#example","text":"An example of how the onionI2C library is used can be found in the i2c-exp-driver repo. The example code programs the Relay Expansion directly.","title":"Example"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-Python-Module/#functions","text":"Each of the main functions implemented in this module are described below.","title":"Functions"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-Python-Module/#initialization","text":"The object needs to be initialized before it can be used for reading and writing: i2c = onionI2C.OnionI2C() After this call, the object can be used for reading and writing. Arguments The constructor has an optional argument that defines the I2C device adapter number. This corresponds to the X in /dev/i2c-X . If no argument is supplied, the adapter will be set to /dev/i2c-0 . This is the only default adapter on the Omega and should suit most use cases. If your use case requires a different adapter, add an integer argument to the constructor call.","title":"Initialization"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-Python-Module/#reading-from-an-i2c-slave","text":"","title":"Reading from an I2C Slave"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-Python-Module/#reading-bytes","text":"This function reads a specified number of bytes from a specific device on the I2C bus, and returns them in a list: valList = i2c.readBytes(devAddr, addr, size) Arguments The devAddr argument defines the I2C slave device address. The addr argument defines the address on the device from which to read. The number of bytes to be read should be placed in the size argument. Examples Read 4 bytes from address 0x00 on a device with an address of 0x48 : rdBytes = i2c.readBytes(0x48, 0x00, 4) Read a byte from address 0x24 on a device with an address of 0x27 : byteList = i2c.readBytes(0x27, 0x24, 1) Note that even though only a single byte is being read, the variable byteList will be in the form of a list.","title":"Reading Bytes"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-Python-Module/#writing-to-an-i2c-slave","text":"All writing functions share the same schema for return values: * For a successful write, 0 will be returned * An unsuccessful write will return 1","title":"Writing to an I2C Slave"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-Python-Module/#write-a-single-byte","text":"This function will write a single byte to a specific device on the I2C bus: status = i2c.writeByte(devAddr, addr, value) Arguments The devAddr argument defines the I2C slave device address. The addr argument defines the address on the device that will be written to. The value argument is the single byte to be written. Examples Write 0xef to address 0xf1 on a device with an address of 0x11 : status = i2c.writeByte(0x11, 0xf1, 0xef) Write 0xbe to address 0xaa on a device with an address of 0x33 : status = i2c.writeByte(0x33, 0xaa, 0xbe)","title":"Write a Single Byte"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-Python-Module/#write-a-list-of-bytes","text":"This function will write a list of bytes to an address on a specific device on the I2C bus: status = i2c.writeBytes(devAddr, addr, values) Arguments The devAddr argument defines the I2C slave device address. The addr argument defines the address on the device that will be written to. The values argument is the list of bytes to be written. Examples Write 0xde, 0xad, 0xbe, 0xef to address 0x1a on a device with an address of 0x66 : bytes = [0xde, 0xad, 0xbe, 0xef] status = i2c.writeBytes(0x66, 0x1a, bytes) Write 0xbe to address 0xaa on a device with an address of 0x33 : status = i2c.writeBytes(0x33, 0xaa, [0xbe]) Write 0x01, 0x03, 0x05 to address 0x55 on a device with an address of 0x24 : status = i2c.writeBytes(0x24, 0x55, [0x01, 0x03, 0x05])","title":"Write a List of Bytes"},{"location":"tutorials/OnionWiki/Documentation/Libraries/I2C-Python-Module/#write-a-list-of-bytes-without-specifying-an-address","text":"This function will write a list of bytes to a specific device on the I2C bus: status = i2c.write(devAddr, values) It can be used when no specific on address on the device needs to be specified. Arguments The devAddr argument defines the I2C slave device address. The values argument is the list of bytes to be written. Examples Write 0xde, 0xad, 0xbe, 0xef to a device with an address of 0x67 : bytes = [0xde, 0xad, 0xbe, 0xef] status = i2c.write(0x67, bytes) Write 0xaa, 0xbe to a device with an address of 0x34 : status = i2c.write(0x34, [0xaa, 0xbe]) Write 0x01, 0x03, 0x05, 0x02, 0x04, 0x06, 0xaa to a device with an address of 0x13 : bytes = [0x01, 0x03, 0x05, 0x02, 0x04, 0x06, 0xaa] status = i2c.write(0x13, bytes)","title":"Write a List of Bytes without Specifying an Address"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/","text":"OLED Expansion Library The Onion OLED Expansion library, libonionoledexp is a dynamic C library that provides functions to setup and perform various actions on the OLED display: writing text, displaying images, and adjusting various settings. The library can be used in C and C++ programs. This library is also available as a module for use in Python . The module is called oledExp and is part of the OmegaExpansion package. [[ TOC ]] Programming Flow After each power-cycle, the chip that controls the OLED Expansion must be programmed with an initialization sequence to setup the display and enable it to receive additional commands. After the initialization, the other functions can be used to ajdust various screen settings or display text or images. Understanding the Display The screen has a resolution of 128x64 pixels. It is addressable by 128 vertical columns and 8 horizontal pages: Each page consists of 8 horizontal pixel rows. When a byte is written to the display, the Least Significant Byte (LSB) corresponds to the top-most pixel of the page in the current column. The Most Significant Byte (MSB) corresponds to the bottom-most pixel of the page in the current column. So writing 0x0f would produce the top 4 pixels being coloured in, and the bottom 4 being left blank. The display keeps a cursor pointer in memory that indicates the current page and column being addressed. The cursor will automatically be incremented after each byte is written, the cursor can also be moved by the user through functions discussed below. The C Library The libonionoledexp C library is a series of functions that perform all of the actions specified in the Programming Flow section . Source Code The source code can be found in the Onion i2c-exp-driver GitHub Repo . Using the C Library Header File To add the Onion OLED Expansion Library to your program, include the header file in your code: #include oled-exp.h Library for Linker In your project's makefile, you will need to add the following dynamic libraries to the linker command: -loniondebug -lonioni2c -lonionoledexp The dynamic libraries are stored in /usr/lib on the Omega. Example Code The Onion OLED Expansion C library is used in the implementation of the oled-exp command line tool. . The source code can be found here , on the i2c-exp-driver Onion GitHub Repo. Return Values All functions follow the same pattern with return values: If the function operation is successful, the return value will be EXIT_SUCCESS which is a macro defined as 0 in cstdlib.h. If the function operation is not successful, the function will return EXIT_FAILURE which is defined as 1 . A few reasons why the function might not be successful: * The specified device address cannot be found on the I2C bus (the Expansion is not plugged in) * The system I2C interface is currently in use elsewhere An error message will be printed that will give more information on the reason behind the failure. Initialization Function This function programs the initialization sequence on the OLED Expansion, after this step is completed, the other various OLED functions can be used with success: int oledDriverInit (); Examples Initialize the OLED Expansion: int status = oledDriverInit(); Functions to Adjust Settings There is a series of functions that adjust various settings on the OLED Display. The adjustable settings are: * Screen on/off * Colour inversion * Setting screen brightness * Setting the memory mode * Defining the width of each page * Setting the cursor position Turn the Screen On and Off The screen can be turned on and off while still preserving the displayed contents: int oledSetDisplayPower (int bPowerOn); Note: turning on a screen that is already on, or turning off a screen that is already off will have no effect. Arguments The bPowerOn argument is detemines whether to turn the display on or off Value Meaning 0 Turn the screen off 1 Turn the screen on Examples Turn the screen off: int status; status = oledSetDisplayPower(0); Turn the screen on: status = oledSetDisplayPower(1); Invert Display Colours The screen driver has the ability to invert the display colours, meaning that black becomes white and vice versa: int oledSetDisplayMode (int bInvert); Arguments The bInvert argument is detemines whether to invert the colours or not Value Meaning 0 Normal colour settings 1 Inverted colour settings Examples Invert the colours: int status; status = oledSetDisplayMode(1); Return the colours to normal: status = oledSetDisplayMode(0); Set the Display Brightness The brightness of the display can be adjusted in a granularity of 256 steps: int oledSetBrightness (int brightness); The default brightness after initialization is 207. Arguments The brightness argument is detemines the display brightness with a range of 0 to 255 , with 255 being the brightest setting and 0 being the dimmest. Examples Set to maximum brightness: int status; status = oledSetBrightness(255); Set to lowest possible brightness: status = oledSetBrightness(0); Set to middle brightness: status = oledSetBrightness(127); Dim the display This function implements a 'dim' and a 'normal' setting for the display: int oledSetDim (int dim); While the brightness adjustment function described just above implements the same feature, this function simplifies the procedure with two very disctinct settings. Arguments The dim argument is detemines whether to enable the dim setting Value Meaning 0 Normal brightness: 207 1 Dimmed screen: 0 Examples Dim the display: int status; status = oledSetDim(1); Set the display to normal brightness: status = oledSetDim(0); Set Memory Mode Implements the ability to select the display's memory mode: int oledSetMemoryMode (int mode); The memory mode affects how the cursor is automatically advanced when the display memory is written to with text or images. Horizontal Addressing Mode After each write, the column cursor advances horizontally to the right along the page, once the end of the page is reached, the page cursor is advanced onto the next page. Vertical Addressing Mode After each write, the page cursor advances vertically downward through the pages, once the last page is reached, the column cursor is advanced to the next pixel column Page Addressing Mode The column cursor advances horizontally to the right along each page, once the end of the page is reached, the column cursor wraps around to column 0 and the page cursor remains the same. By default, Horizontal Addressing is used. Arguments The mode argument detemines which memory mode is active, it is recommended to use the eOledExpMemoryMode enumerated type: Memory Mode Input Horizontal Addressing Mode OLED_EXP_MEM_HORIZONTAL_ADDR_MODE Vertical Addressing Mode OLED_EXP_MEM_VERTICAL_ADDR_MODE Page Addressing Mode OLED_EXP_MEM_PAGE_ADDR_MODE Examples Set to page addressing mode: int status; status = oledSetMemoryMode(OLED_EXP_MEM_PAGE_ADDR_MODE); Set Column Addressing This function is used to define where each page starts and ends horizontally: int oledSetColumnAddressing (int startPixel, int endPixel); Changing the start and end pixels changes the width of each page. By default, the column addressing is set from 0 to pixel 127. This means that each page has 128 usable columns, once the cursor reaches the last column, the display knows this page is filled. For example, when writing text, the oledWrite function will set the columns to run from 0 to 125 in order for the characters to display properly. Since each character is 6 columns, 21 full characters can be displayed on a single line, the end pixel is set to 125 so that the 22nd character gets placed on the next line instead. Note: the column cursor is not preserved after a column addressing change. Arguments The startPixel argument sets the starting column for each page. The endPixel argument sets the end column for each page. Both arguments must be between 0 and 127 and startPixel must be less than endPixel. Examples Set the column addressing to display text: int status; status = oledSetColumnAddressing(0, OLED_EXP_CHAR_COLUMN_PIXELS-1); Set the column addressing to the full display width status = oledSetColumnAddressing(0, OLED_EXP_WIDTH-1); Set each column to start halfway across and to end three quarters of the way across the display: status = oledSetColumnAddressing(63, 95); Set Columns for Text A function exists to define the column addressing specifically for text: int oledSetTextColumns (); It sets the start pixel to 0 and the end pixel to 125. This allows for 21 text characters per line. This function should be run before setting the cursor for writing text. Set Columns for Images Also, a function exists to define the column addressing to cover the entire screen: int oledSetImageColumns (); It sets the start pixel to 0 and the end pixel to 127. This enables the use of the entire screen real estate. Set Cursor Position Any data written to the screen gets written to the current position of the cursor. This position can be adjusted. Two methods exist: * Specifying the page row and character column * Specifying the page row and pixel column Set Cursor Position by Character Column This function is used to position the cursor on a specific page and character column. After this call, the next bytes written to the screen will be displayed at the new position of the cursor: int oledSetCursor (int row, int column); Note: since the column cursor is not preserved after a column addressing change, the column addressing needs be set to 0-125 using the oledSetTextColumns() function to properly display text before the cursor position is programmed. Arguments The row argument sets the page for the cursor, so the range is 0 to 7 The column argument sets the character column position of the cursor, the range is 0 to 20 Examples Set the cursor to the start of the last page: int status; status = oledSetCursor(7, 0); Set the cursor to the middle of the 4th row: status = oledSetCursor(3, 10); Set the cursor to the starting position at the top-left status = oledSetCursor(0, 0); Write 'hello' at the top left of the screen, and then write 'hi there' on the middle of the 7th row: status = oledSetCursor(0, 0); status |= oledWrite( hello ); status |= oledSetCursor(6, 10); status |= oledWrite( hi there ); Set Cursor Position by Pixel This function is used to position the cursor on a specific page and pixel row. This gives more fine grain control than setting by character column. After this call, the next bytes written to the screen will be displayed at the new position of the cursor: int oledSetCursorByPixel (int row, int pixel); It allows for cursor positions that are not aligned with the 21 possible character columns. Arguments The row argument sets the page for the cursor, so the range is 0 to 7 The pixel argument sets the horizontal pixel position of the cursor, the range is 0 to 127 Examples Set the cursor to the start of the last page: int status; status = oledSetCursorByPixel(7, 0); Set the cursor to the middle of the 4th row: status = oledSetCursorByPixel(3, 63); Set the cursor to the bottom-left status = oledSetCursorByPixel(7, 0); Write 'hello' at the top left of the screen, and then write 'hi there' on the middle of the 7th row: status = oledSetCursorByPixel(0, 0); status |= oledWrite( hello ); status |= oledSetCursorByPixel(6, 63); status |= oledWrite( hi there ); Clear the Screen To clear the screen and move the cursor to the starting position at the top-left of the screen: int oledClear (); Writing Text to the Display Listed below are the functions that write bytes, characters, strings, or images to the display. Write a Single Byte Write a single byte, eight vertical pixels, to the current position of the cursor: int oledWriteByte (int byte); Arguments The byte argument holds the eight bits that will be written to the screen. The Least Significant Bit (LSB) in the byte corresponds to the top-most pixel in the column, the Most Significant Bit (MSB) corresponds to the bottom-most pixel in the column. After the byte is set, the cursor will automatically move to the next page column. Examples Draw the following pattern: int status; status = oledWriteByte(0x01); // 0x01 = 0b 0000 0001 status |= oledWriteByte(0x03); // 0x03 = 0b 0000 0011 status |= oledWriteByte(0x07); // 0x07 = 0b 0000 0111 status |= oledWriteByte(0x0f); // 0x0f = 0b 0000 1111 status |= oledWriteByte(0x3f); // 0x3f = 0b 0011 1111 Write a Single Character Write a single character to the current position of the cursor: int oledWriteChar (char c); Arguments The c argument is the character that is to be written to the screen. Make sure to check the asciiTable dynamic array found in oled-exp.h , it defines the bitmap pattern of each allowed character. Any characters not found in the table will be ignored. Examples Write an 'O' int status; status = oledWriteChar('O'); Write an open bracket, an x, then a close bracket: status = oledWriteChar('('); status |= oledWriteChar('x'); status |= oledWriteChar(')'); Write a String Write an entire string of characters, starting at the current position of the cursor: int oledWrite (char *msg); Underneath, this uses the oledWriteChar function to display characters and also implements newline functionality. The newline functionality is implemented by using a global variable to keep track where the cursor is in each row (I know... shameful...). Once the characters '\\' and 'n' are detected, the oledWrite function will print spaces to the display until it reaches the end of the current page and the cursor increments its position to the next page. Note: the column addressing will be set to 0-125 to properly display text during this call, at the end of the function it will be reset back to 0-127. Arguments The msg argument is the string to be written to the display. Any characters not found in the asciiTable array will be ignored. Examples Write 'Onion Omega': int status; status = oledWrite( Onion Omega ); Write 'Onion Omega', then 'Inventing the Future' on the next line, and then 'Today' two lines below: status = oledWrite( Onion Omega\\nInventing the Future\\n\\nToday ); Drawing Images on the Display The OLED Screen can also be used to display images. The Console can be used to convert existing images into a format that is compatible with the OLED Expansion and save the output to an Omega. Functions in the C library can read the image data and display it on the OLED Expansion. Alternatively, a buffer can be created programatically and displayed on the OLED. Creating Image Files The Console OLED App can be used to create OLED Expansion compatible image files. Navigate to the Image tab of the OLED App: Once an image has been selected, a button and form will appear that allow you to save the OLED image file to your Omega: After the image name and location are selected, click the Save to Omega button. OLED Image File Details The OLED image files store the image data as 1024 bytes represented in hexadecimal. Each byte represents eight vertical pixels, with the first 128 bytes representing the columns in Page 0, the following 128 bytes representing the columns in Page 1, and so on. If this is unclear, see the Understanding the Display Section for details on how the display is addressed. Displaying Images from a File Read Image Data First, the data from the file needs to be loaded into a buffer: int oledReadLcdFile (char* file, uint8_t *buffer); Arguments The file argument is the path to the OLED image file. The buffer argument is a pointer to the memory that will hold the image data. It needs to be able to hold 1024 bytes (1 byte for each column in a page). Write Image Data to the Display Then, write the data from the buffer to the display: int oledDraw (uint8_t *buffer, int bytes); Arguments The buffer argument is the pointer to memory that holds the image data. The bytes is the number of bytes to be written. This will usually be 1024 bytes, this can be represented with macros: OLED_EXP_WIDTH*OLED_EXP_HEIGHT/8 . Example Read an image file located at /root/image.lcd and draw it on the OLED display: int status; uint8_t *buffer = malloc(OLED_EXP_WIDTH*OLED_EXP_HEIGHT/8 * sizeof *buffer); // allocate memory for the buffer // read data from file status = oledReadLcdFile(param, buffer); // draw on display if (status == EXIT_SUCCESS) { status = oledDraw(buffer, OLED_EXP_WIDTH*OLED_EXP_HEIGHT/8); } It is also possible to programmatically fill a buffer and then draw it on the OLED display: int i, status; uint8_t data; uint8_t *buffer = malloc(OLED_EXP_WIDTH*OLED_EXP_HEIGHT/8 * sizeof *buffer); // allocate memory for the buffer // programatically fill the buffer data = 0; for (i = 0; i OLED_EXP_WIDTH*OLED_EXP_HEIGHT/8; i++) { buffer[i] = data; // increment the data for the next column if (data == 0xff) { data = 0; // reset to 0 } else { data++; // increment by 1 } } // draw on display status = oledDraw(buffer, OLED_EXP_WIDTH*OLED_EXP_HEIGHT/8); Scrolling the Display Contents The OLED can scroll the contents of the screen horizontally or upwards at a 45 degree angle. The displayed content will wrap around when it reaches the edge of the display. Horizontal Scrolling Scroll all or part of the screen horizontally: int oledScroll (int direction, int scrollSpeed, int startPage, int stopPage); Arguments The direction argument indicates whether to scroll to the left or right: direction Value Scrolling Direction 0 Left 1 Right The scrollSpeed argument determines the number of \"frames\" between each scroll step, it is recommended to use the eOledExpScrollSpeed enumerated type: * OLED_EXP_SCROLL_SPEED_5_FRAMES * OLED_EXP_SCROLL_SPEED_64_FRAMES * OLED_EXP_SCROLL_SPEED_128_FRAMES * OLED_EXP_SCROLL_SPEED_256_FRAMES * OLED_EXP_SCROLL_SPEED_3_FRAMES * OLED_EXP_SCROLL_SPEED_4_FRAMES * OLED_EXP_SCROLL_SPEED_25_FRAMES * OLED_EXP_SCROLL_SPEED_2_FRAMES The startPage argument defines at which page to start scrolling, and stopPage defines at which page to start the scroll. The range for both is 0 to 7 , and startPage must be less than stopPage. Examples Scroll the entire screen to the left: int status; status = oledScroll (0, OLED_EXP_SCROLL_SPEED_5_FRAMES, 0, OLED_EXP_CHAR_ROWS-1); Quickly scroll the bottom half of the screen to the right: int status; status = oledScroll (1, OLED_EXP_SCROLL_SPEED_2_FRAMES, 4, OLED_EXP_CHAR_ROWS-1); Slowly scroll pages 1 to 5: int status; status = oledScroll (1, OLED_EXP_SCROLL_SPEED_25_FRAMES, 1, 5); Diagonal Scrolling Scroll all or part of the screen diagonally upwards: int oledScrollDiagonal (int direction, int scrollSpeed, int fixedRows, int scrollRows, int verticalOffset, int startPage, int stopPage); Arguments The direction argument indicates whether to scroll upwards to the left or right: direction Value Scrolling Direction 0 Upwards and Left 1 Upwards and Right The scrollSpeed argument determines the number of \"frames\" between each scroll step, it is recommended to use the eOledExpScrollSpeed enumerated type: * OLED_EXP_SCROLL_SPEED_5_FRAMES * OLED_EXP_SCROLL_SPEED_64_FRAMES * OLED_EXP_SCROLL_SPEED_128_FRAMES * OLED_EXP_SCROLL_SPEED_256_FRAMES * OLED_EXP_SCROLL_SPEED_3_FRAMES * OLED_EXP_SCROLL_SPEED_4_FRAMES * OLED_EXP_SCROLL_SPEED_25_FRAMES * OLED_EXP_SCROLL_SPEED_2_FRAMES The fixedRows argument defines the amount of pixel rows, starting from the top, will not have vertical scrolling. The range is 0 to 63 . The scrollRows argument defines the amount of pixel rows, starting from the top, that will have vertical scrolling. The verticalOffset argument defines the number of vertical rows to scroll by each frame. The startPage argument defines at which page to start scrolling, and stopPage defines at which page to start the scroll. The range for both is 0 to 7 , and startPage must be less than stopPage. Examples Scroll the entire screen upwards to the left: int status; status = oledScrollDiagonal ( 0, OLED_EXP_SCROLL_SPEED_4_FRAMES, 0, OLED_EXP_HEIGHT-1, 1, 0, OLED_EXP_CHAR_ROWS-1 ); Slowly Scroll the entire screen upwards to the right: int status; status = oledScrollDiagonal ( 1, OLED_EXP_SCROLL_SPEED_64_FRAMES, 0, OLED_EXP_HEIGHT-1, 1, 0, OLED_EXP_CHAR_ROWS-1 ); Scroll the entire screen to the left, but only the bottom half upwards: int status; status = oledScrollDiagonal ( 0, OLED_EXP_SCROLL_SPEED_3_FRAMES, OLED_EXP_HEIGHT/2-1, OLED_EXP_HEIGHT-1, 1, 0, OLED_EXP_CHAR_ROWS-1 ); Scroll pages 3 to 7 to the right, but only pages 4 to 7 upwards: int status; status = oledScrollDiagonal ( 1, OLED_EXP_SCROLL_SPEED_5_FRAMES, OLED_EXP_HEIGHT/2-1, OLED_EXP_HEIGHT-1, 1, 3, OLED_EXP_CHAR_ROWS-1 ); Stop Scrolling Disables all active scrolling: int oledScrollStop (); Examples Scroll the entire screen to the left, then stop it: int status; status = oledScroll (0, OLED_EXP_SCROLL_SPEED_5_FRAMES, 0, OLED_EXP_CHAR_ROWS-1); status |= oledScrollStop ();","title":"OLED Expansion Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#oled-expansion-library","text":"The Onion OLED Expansion library, libonionoledexp is a dynamic C library that provides functions to setup and perform various actions on the OLED display: writing text, displaying images, and adjusting various settings. The library can be used in C and C++ programs. This library is also available as a module for use in Python . The module is called oledExp and is part of the OmegaExpansion package. [[ TOC ]]","title":"OLED Expansion Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#programming-flow","text":"After each power-cycle, the chip that controls the OLED Expansion must be programmed with an initialization sequence to setup the display and enable it to receive additional commands. After the initialization, the other functions can be used to ajdust various screen settings or display text or images.","title":"Programming Flow"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#understanding-the-display","text":"The screen has a resolution of 128x64 pixels. It is addressable by 128 vertical columns and 8 horizontal pages: Each page consists of 8 horizontal pixel rows. When a byte is written to the display, the Least Significant Byte (LSB) corresponds to the top-most pixel of the page in the current column. The Most Significant Byte (MSB) corresponds to the bottom-most pixel of the page in the current column. So writing 0x0f would produce the top 4 pixels being coloured in, and the bottom 4 being left blank. The display keeps a cursor pointer in memory that indicates the current page and column being addressed. The cursor will automatically be incremented after each byte is written, the cursor can also be moved by the user through functions discussed below.","title":"Understanding the Display"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#the-c-library","text":"The libonionoledexp C library is a series of functions that perform all of the actions specified in the Programming Flow section .","title":"The C Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#source-code","text":"The source code can be found in the Onion i2c-exp-driver GitHub Repo .","title":"Source Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#using-the-c-library","text":"Header File To add the Onion OLED Expansion Library to your program, include the header file in your code: #include oled-exp.h Library for Linker In your project's makefile, you will need to add the following dynamic libraries to the linker command: -loniondebug -lonioni2c -lonionoledexp The dynamic libraries are stored in /usr/lib on the Omega.","title":"Using the C Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#example-code","text":"The Onion OLED Expansion C library is used in the implementation of the oled-exp command line tool. . The source code can be found here , on the i2c-exp-driver Onion GitHub Repo.","title":"Example Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#return-values","text":"All functions follow the same pattern with return values: If the function operation is successful, the return value will be EXIT_SUCCESS which is a macro defined as 0 in cstdlib.h. If the function operation is not successful, the function will return EXIT_FAILURE which is defined as 1 . A few reasons why the function might not be successful: * The specified device address cannot be found on the I2C bus (the Expansion is not plugged in) * The system I2C interface is currently in use elsewhere An error message will be printed that will give more information on the reason behind the failure.","title":"Return Values"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#initialization-function","text":"This function programs the initialization sequence on the OLED Expansion, after this step is completed, the other various OLED functions can be used with success: int oledDriverInit (); Examples Initialize the OLED Expansion: int status = oledDriverInit();","title":"Initialization Function"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#functions-to-adjust-settings","text":"There is a series of functions that adjust various settings on the OLED Display. The adjustable settings are: * Screen on/off * Colour inversion * Setting screen brightness * Setting the memory mode * Defining the width of each page * Setting the cursor position","title":"Functions to Adjust Settings"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#turn-the-screen-on-and-off","text":"The screen can be turned on and off while still preserving the displayed contents: int oledSetDisplayPower (int bPowerOn); Note: turning on a screen that is already on, or turning off a screen that is already off will have no effect. Arguments The bPowerOn argument is detemines whether to turn the display on or off Value Meaning 0 Turn the screen off 1 Turn the screen on Examples Turn the screen off: int status; status = oledSetDisplayPower(0); Turn the screen on: status = oledSetDisplayPower(1);","title":"Turn the Screen On and Off"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#invert-display-colours","text":"The screen driver has the ability to invert the display colours, meaning that black becomes white and vice versa: int oledSetDisplayMode (int bInvert); Arguments The bInvert argument is detemines whether to invert the colours or not Value Meaning 0 Normal colour settings 1 Inverted colour settings Examples Invert the colours: int status; status = oledSetDisplayMode(1); Return the colours to normal: status = oledSetDisplayMode(0);","title":"Invert Display Colours"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#set-the-display-brightness","text":"The brightness of the display can be adjusted in a granularity of 256 steps: int oledSetBrightness (int brightness); The default brightness after initialization is 207. Arguments The brightness argument is detemines the display brightness with a range of 0 to 255 , with 255 being the brightest setting and 0 being the dimmest. Examples Set to maximum brightness: int status; status = oledSetBrightness(255); Set to lowest possible brightness: status = oledSetBrightness(0); Set to middle brightness: status = oledSetBrightness(127);","title":"Set the Display Brightness"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#dim-the-display","text":"This function implements a 'dim' and a 'normal' setting for the display: int oledSetDim (int dim); While the brightness adjustment function described just above implements the same feature, this function simplifies the procedure with two very disctinct settings. Arguments The dim argument is detemines whether to enable the dim setting Value Meaning 0 Normal brightness: 207 1 Dimmed screen: 0 Examples Dim the display: int status; status = oledSetDim(1); Set the display to normal brightness: status = oledSetDim(0);","title":"Dim the display"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#set-memory-mode","text":"Implements the ability to select the display's memory mode: int oledSetMemoryMode (int mode); The memory mode affects how the cursor is automatically advanced when the display memory is written to with text or images. Horizontal Addressing Mode After each write, the column cursor advances horizontally to the right along the page, once the end of the page is reached, the page cursor is advanced onto the next page. Vertical Addressing Mode After each write, the page cursor advances vertically downward through the pages, once the last page is reached, the column cursor is advanced to the next pixel column Page Addressing Mode The column cursor advances horizontally to the right along each page, once the end of the page is reached, the column cursor wraps around to column 0 and the page cursor remains the same. By default, Horizontal Addressing is used. Arguments The mode argument detemines which memory mode is active, it is recommended to use the eOledExpMemoryMode enumerated type: Memory Mode Input Horizontal Addressing Mode OLED_EXP_MEM_HORIZONTAL_ADDR_MODE Vertical Addressing Mode OLED_EXP_MEM_VERTICAL_ADDR_MODE Page Addressing Mode OLED_EXP_MEM_PAGE_ADDR_MODE Examples Set to page addressing mode: int status; status = oledSetMemoryMode(OLED_EXP_MEM_PAGE_ADDR_MODE);","title":"Set Memory Mode"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#set-column-addressing","text":"This function is used to define where each page starts and ends horizontally: int oledSetColumnAddressing (int startPixel, int endPixel); Changing the start and end pixels changes the width of each page. By default, the column addressing is set from 0 to pixel 127. This means that each page has 128 usable columns, once the cursor reaches the last column, the display knows this page is filled. For example, when writing text, the oledWrite function will set the columns to run from 0 to 125 in order for the characters to display properly. Since each character is 6 columns, 21 full characters can be displayed on a single line, the end pixel is set to 125 so that the 22nd character gets placed on the next line instead. Note: the column cursor is not preserved after a column addressing change. Arguments The startPixel argument sets the starting column for each page. The endPixel argument sets the end column for each page. Both arguments must be between 0 and 127 and startPixel must be less than endPixel. Examples Set the column addressing to display text: int status; status = oledSetColumnAddressing(0, OLED_EXP_CHAR_COLUMN_PIXELS-1); Set the column addressing to the full display width status = oledSetColumnAddressing(0, OLED_EXP_WIDTH-1); Set each column to start halfway across and to end three quarters of the way across the display: status = oledSetColumnAddressing(63, 95);","title":"Set Column Addressing"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#set-columns-for-text","text":"A function exists to define the column addressing specifically for text: int oledSetTextColumns (); It sets the start pixel to 0 and the end pixel to 125. This allows for 21 text characters per line. This function should be run before setting the cursor for writing text.","title":"Set Columns for Text"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#set-columns-for-images","text":"Also, a function exists to define the column addressing to cover the entire screen: int oledSetImageColumns (); It sets the start pixel to 0 and the end pixel to 127. This enables the use of the entire screen real estate.","title":"Set Columns for Images"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#set-cursor-position","text":"Any data written to the screen gets written to the current position of the cursor. This position can be adjusted. Two methods exist: * Specifying the page row and character column * Specifying the page row and pixel column","title":"Set Cursor Position"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#set-cursor-position-by-character-column","text":"This function is used to position the cursor on a specific page and character column. After this call, the next bytes written to the screen will be displayed at the new position of the cursor: int oledSetCursor (int row, int column); Note: since the column cursor is not preserved after a column addressing change, the column addressing needs be set to 0-125 using the oledSetTextColumns() function to properly display text before the cursor position is programmed. Arguments The row argument sets the page for the cursor, so the range is 0 to 7 The column argument sets the character column position of the cursor, the range is 0 to 20 Examples Set the cursor to the start of the last page: int status; status = oledSetCursor(7, 0); Set the cursor to the middle of the 4th row: status = oledSetCursor(3, 10); Set the cursor to the starting position at the top-left status = oledSetCursor(0, 0); Write 'hello' at the top left of the screen, and then write 'hi there' on the middle of the 7th row: status = oledSetCursor(0, 0); status |= oledWrite( hello ); status |= oledSetCursor(6, 10); status |= oledWrite( hi there );","title":"Set Cursor Position by Character Column"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#set-cursor-position-by-pixel","text":"This function is used to position the cursor on a specific page and pixel row. This gives more fine grain control than setting by character column. After this call, the next bytes written to the screen will be displayed at the new position of the cursor: int oledSetCursorByPixel (int row, int pixel); It allows for cursor positions that are not aligned with the 21 possible character columns. Arguments The row argument sets the page for the cursor, so the range is 0 to 7 The pixel argument sets the horizontal pixel position of the cursor, the range is 0 to 127 Examples Set the cursor to the start of the last page: int status; status = oledSetCursorByPixel(7, 0); Set the cursor to the middle of the 4th row: status = oledSetCursorByPixel(3, 63); Set the cursor to the bottom-left status = oledSetCursorByPixel(7, 0); Write 'hello' at the top left of the screen, and then write 'hi there' on the middle of the 7th row: status = oledSetCursorByPixel(0, 0); status |= oledWrite( hello ); status |= oledSetCursorByPixel(6, 63); status |= oledWrite( hi there );","title":"Set Cursor Position by Pixel"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#clear-the-screen","text":"To clear the screen and move the cursor to the starting position at the top-left of the screen: int oledClear ();","title":"Clear the Screen"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#writing-text-to-the-display","text":"Listed below are the functions that write bytes, characters, strings, or images to the display.","title":"Writing Text to the Display"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#write-a-single-byte","text":"Write a single byte, eight vertical pixels, to the current position of the cursor: int oledWriteByte (int byte); Arguments The byte argument holds the eight bits that will be written to the screen. The Least Significant Bit (LSB) in the byte corresponds to the top-most pixel in the column, the Most Significant Bit (MSB) corresponds to the bottom-most pixel in the column. After the byte is set, the cursor will automatically move to the next page column. Examples Draw the following pattern: int status; status = oledWriteByte(0x01); // 0x01 = 0b 0000 0001 status |= oledWriteByte(0x03); // 0x03 = 0b 0000 0011 status |= oledWriteByte(0x07); // 0x07 = 0b 0000 0111 status |= oledWriteByte(0x0f); // 0x0f = 0b 0000 1111 status |= oledWriteByte(0x3f); // 0x3f = 0b 0011 1111","title":"Write a Single Byte"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#write-a-single-character","text":"Write a single character to the current position of the cursor: int oledWriteChar (char c); Arguments The c argument is the character that is to be written to the screen. Make sure to check the asciiTable dynamic array found in oled-exp.h , it defines the bitmap pattern of each allowed character. Any characters not found in the table will be ignored. Examples Write an 'O' int status; status = oledWriteChar('O'); Write an open bracket, an x, then a close bracket: status = oledWriteChar('('); status |= oledWriteChar('x'); status |= oledWriteChar(')');","title":"Write a Single Character"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#write-a-string","text":"Write an entire string of characters, starting at the current position of the cursor: int oledWrite (char *msg); Underneath, this uses the oledWriteChar function to display characters and also implements newline functionality. The newline functionality is implemented by using a global variable to keep track where the cursor is in each row (I know... shameful...). Once the characters '\\' and 'n' are detected, the oledWrite function will print spaces to the display until it reaches the end of the current page and the cursor increments its position to the next page. Note: the column addressing will be set to 0-125 to properly display text during this call, at the end of the function it will be reset back to 0-127. Arguments The msg argument is the string to be written to the display. Any characters not found in the asciiTable array will be ignored. Examples Write 'Onion Omega': int status; status = oledWrite( Onion Omega ); Write 'Onion Omega', then 'Inventing the Future' on the next line, and then 'Today' two lines below: status = oledWrite( Onion Omega\\nInventing the Future\\n\\nToday );","title":"Write a String"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#drawing-images-on-the-display","text":"The OLED Screen can also be used to display images. The Console can be used to convert existing images into a format that is compatible with the OLED Expansion and save the output to an Omega. Functions in the C library can read the image data and display it on the OLED Expansion. Alternatively, a buffer can be created programatically and displayed on the OLED.","title":"Drawing Images on the Display"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#creating-image-files","text":"The Console OLED App can be used to create OLED Expansion compatible image files. Navigate to the Image tab of the OLED App: Once an image has been selected, a button and form will appear that allow you to save the OLED image file to your Omega: After the image name and location are selected, click the Save to Omega button.","title":"Creating Image Files"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#oled-image-file-details","text":"The OLED image files store the image data as 1024 bytes represented in hexadecimal. Each byte represents eight vertical pixels, with the first 128 bytes representing the columns in Page 0, the following 128 bytes representing the columns in Page 1, and so on. If this is unclear, see the Understanding the Display Section for details on how the display is addressed.","title":"OLED Image File Details"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#displaying-images-from-a-file","text":"","title":"Displaying Images from a File"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#read-image-data","text":"First, the data from the file needs to be loaded into a buffer: int oledReadLcdFile (char* file, uint8_t *buffer); Arguments The file argument is the path to the OLED image file. The buffer argument is a pointer to the memory that will hold the image data. It needs to be able to hold 1024 bytes (1 byte for each column in a page).","title":"Read Image Data"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#write-image-data-to-the-display","text":"Then, write the data from the buffer to the display: int oledDraw (uint8_t *buffer, int bytes); Arguments The buffer argument is the pointer to memory that holds the image data. The bytes is the number of bytes to be written. This will usually be 1024 bytes, this can be represented with macros: OLED_EXP_WIDTH*OLED_EXP_HEIGHT/8 . Example Read an image file located at /root/image.lcd and draw it on the OLED display: int status; uint8_t *buffer = malloc(OLED_EXP_WIDTH*OLED_EXP_HEIGHT/8 * sizeof *buffer); // allocate memory for the buffer // read data from file status = oledReadLcdFile(param, buffer); // draw on display if (status == EXIT_SUCCESS) { status = oledDraw(buffer, OLED_EXP_WIDTH*OLED_EXP_HEIGHT/8); } It is also possible to programmatically fill a buffer and then draw it on the OLED display: int i, status; uint8_t data; uint8_t *buffer = malloc(OLED_EXP_WIDTH*OLED_EXP_HEIGHT/8 * sizeof *buffer); // allocate memory for the buffer // programatically fill the buffer data = 0; for (i = 0; i OLED_EXP_WIDTH*OLED_EXP_HEIGHT/8; i++) { buffer[i] = data; // increment the data for the next column if (data == 0xff) { data = 0; // reset to 0 } else { data++; // increment by 1 } } // draw on display status = oledDraw(buffer, OLED_EXP_WIDTH*OLED_EXP_HEIGHT/8);","title":"Write Image Data to the Display"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#scrolling-the-display-contents","text":"The OLED can scroll the contents of the screen horizontally or upwards at a 45 degree angle. The displayed content will wrap around when it reaches the edge of the display.","title":"Scrolling the Display Contents"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#horizontal-scrolling","text":"Scroll all or part of the screen horizontally: int oledScroll (int direction, int scrollSpeed, int startPage, int stopPage); Arguments The direction argument indicates whether to scroll to the left or right: direction Value Scrolling Direction 0 Left 1 Right The scrollSpeed argument determines the number of \"frames\" between each scroll step, it is recommended to use the eOledExpScrollSpeed enumerated type: * OLED_EXP_SCROLL_SPEED_5_FRAMES * OLED_EXP_SCROLL_SPEED_64_FRAMES * OLED_EXP_SCROLL_SPEED_128_FRAMES * OLED_EXP_SCROLL_SPEED_256_FRAMES * OLED_EXP_SCROLL_SPEED_3_FRAMES * OLED_EXP_SCROLL_SPEED_4_FRAMES * OLED_EXP_SCROLL_SPEED_25_FRAMES * OLED_EXP_SCROLL_SPEED_2_FRAMES The startPage argument defines at which page to start scrolling, and stopPage defines at which page to start the scroll. The range for both is 0 to 7 , and startPage must be less than stopPage. Examples Scroll the entire screen to the left: int status; status = oledScroll (0, OLED_EXP_SCROLL_SPEED_5_FRAMES, 0, OLED_EXP_CHAR_ROWS-1); Quickly scroll the bottom half of the screen to the right: int status; status = oledScroll (1, OLED_EXP_SCROLL_SPEED_2_FRAMES, 4, OLED_EXP_CHAR_ROWS-1); Slowly scroll pages 1 to 5: int status; status = oledScroll (1, OLED_EXP_SCROLL_SPEED_25_FRAMES, 1, 5);","title":"Horizontal Scrolling"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#diagonal-scrolling","text":"Scroll all or part of the screen diagonally upwards: int oledScrollDiagonal (int direction, int scrollSpeed, int fixedRows, int scrollRows, int verticalOffset, int startPage, int stopPage); Arguments The direction argument indicates whether to scroll upwards to the left or right: direction Value Scrolling Direction 0 Upwards and Left 1 Upwards and Right The scrollSpeed argument determines the number of \"frames\" between each scroll step, it is recommended to use the eOledExpScrollSpeed enumerated type: * OLED_EXP_SCROLL_SPEED_5_FRAMES * OLED_EXP_SCROLL_SPEED_64_FRAMES * OLED_EXP_SCROLL_SPEED_128_FRAMES * OLED_EXP_SCROLL_SPEED_256_FRAMES * OLED_EXP_SCROLL_SPEED_3_FRAMES * OLED_EXP_SCROLL_SPEED_4_FRAMES * OLED_EXP_SCROLL_SPEED_25_FRAMES * OLED_EXP_SCROLL_SPEED_2_FRAMES The fixedRows argument defines the amount of pixel rows, starting from the top, will not have vertical scrolling. The range is 0 to 63 . The scrollRows argument defines the amount of pixel rows, starting from the top, that will have vertical scrolling. The verticalOffset argument defines the number of vertical rows to scroll by each frame. The startPage argument defines at which page to start scrolling, and stopPage defines at which page to start the scroll. The range for both is 0 to 7 , and startPage must be less than stopPage. Examples Scroll the entire screen upwards to the left: int status; status = oledScrollDiagonal ( 0, OLED_EXP_SCROLL_SPEED_4_FRAMES, 0, OLED_EXP_HEIGHT-1, 1, 0, OLED_EXP_CHAR_ROWS-1 ); Slowly Scroll the entire screen upwards to the right: int status; status = oledScrollDiagonal ( 1, OLED_EXP_SCROLL_SPEED_64_FRAMES, 0, OLED_EXP_HEIGHT-1, 1, 0, OLED_EXP_CHAR_ROWS-1 ); Scroll the entire screen to the left, but only the bottom half upwards: int status; status = oledScrollDiagonal ( 0, OLED_EXP_SCROLL_SPEED_3_FRAMES, OLED_EXP_HEIGHT/2-1, OLED_EXP_HEIGHT-1, 1, 0, OLED_EXP_CHAR_ROWS-1 ); Scroll pages 3 to 7 to the right, but only pages 4 to 7 upwards: int status; status = oledScrollDiagonal ( 1, OLED_EXP_SCROLL_SPEED_5_FRAMES, OLED_EXP_HEIGHT/2-1, OLED_EXP_HEIGHT-1, 1, 3, OLED_EXP_CHAR_ROWS-1 );","title":"Diagonal Scrolling"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-C-Library/#stop-scrolling","text":"Disables all active scrolling: int oledScrollStop (); Examples Scroll the entire screen to the left, then stop it: int status; status = oledScroll (0, OLED_EXP_SCROLL_SPEED_5_FRAMES, 0, OLED_EXP_CHAR_ROWS-1); status |= oledScrollStop ();","title":"Stop Scrolling"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/","text":"OLED Expansion for Node.js As a part of our efforts to add expansion support to node.js, we have added control of the OLED expansion by way of node.js addon. To use the display within your node.js programs, all you have to do is import the OLED addon in the same way as a module and call methods to control the display. The addon is a wrapper around the OLED C library. The library's documentation can be found here , many of the node functions follow the same input-output structure as the C library. [[ TOC ]] Programming Flow After each power-cycle, the chip that controls the OLED Expansion must be programmed with an initialization sequence to setup the display and enable it to receive additional commands. After the initialization, the other functions can be used to adjust vaious screen settings or display text or images. Understanding the Display The screen has a resolution of 128x64 pixels. It is addressable by 128 vertical columns and 8 horizontal pages: Each page consists of 8 horizontal pixel rows. When a byte is written to the display, the Least Significant Byte (LSB) corresponds to the top-most pixel of the page in the current column. The Most Significant Byte (MSB) corresponds to the bottom-most pixel of the page in the current column. So writing 0x0f would produce the top 4 pixels being coloured in, and the bottom 4 being left blank. The display keeps a cursor pointer in memory that indicates the current page and column being addressed. The cursor will automatically be incremented after each byte is written, the cursor can also be moved by the user through functions discussed below. The Node Addon The OLED Expansion addon exposes a series of methods that perform all of the actions specified in the Programming Flow section. Install the Addon Install the addon on your Omega: opkg update opkg install oled-exp-node NodeJS will need to be installed for Node programs to actually run: opkg install nodejs Importing the addon into your Node Script To use the addon within your script you have to import it into your node program as you would a module. Use the following command in your node script. var oledAddon = require( /usr/bin/oled-exp-addon ); Example Code Example code that uses the oled-exp-node addon can be found here in the i2c-exp-node-addons Onion GitHub Repo. Return Values All of the functions will either return a 0 indicating success or 1 indicating failure. Calling Methods Methods are called in the following format. oledAddon.method(); Replace method with your funcion of interest. Available Methods Refer to the table below for a list and brief description of available OLED methods. Method Inputs Description init() none Initializes the display. Must be called once before using display clear() none Clears the Display of all contents. setDisplayPower(int) 1,0 Turns the screen on or off. Preserves screen content setDisplayMode(int) 1,0 Inverts the color settings. setBrightness(int) 0-255 Adjust display brightness by inputting value from 0(dimmest)-255(brightest), 207 by default. setDim(int) 1,0 Similar to the setBrightness method where 0:Normal brightness 207 and 1:Dimmed Screen 0 setMemoryMode(int) 0,1,2 Implements the ability to select the display's memory mode, ie, how the cursor is automatically advanced when the display memory is written to with text or images. 0=Horizontal Addressing Mode, 1=Vertical Addressing Mode, 2=Page Addressing Mode setCursor(int row, int column) 0-7,0-20 Position the cursor on a specific page and character column. setCursorByPixel(int row, int pixel) 0-7,0-127 This function positions the cursor on a specific page and pixel row setColumnAddressing(int startPixel, int endPixel) 0-127,0-127 Used to determine where each page starts and ends horizontally setTextColumns() none Defines the column addressing specifically for text. Sets the start pixel to 0 and end pixel to 125. This allows for 21 text characters per line. This function should be run before setting the cursor for writing text. setImageColumns() none This function defines the column addressing to cover the entire screen. It sets the start pixel to 0 and end pixel to 127. writeChar(char \"A\") single character in a string input Writes a single character to the current position of the cursor. Any unrecognized characters will be ignored, for a list of acceptable characters refer to asciiTable in oled-exp.h write(msg) string \"HelloWorld\" Write an entire string of characters, starting at the current positon of the cursor writeByte(int byte) 0x00 - 0xFF Write a single byte, eight vertical pixels, to the current position of the cursor. scroll(int direction, int scrollSpeed, int startPage, int stopPage) * Scroll the contents of the screen horizontally or upwards at a 45 degree angle. The displayed contents will wrap around when it reaches the edge of the display. scrollDiagonal( int direction, int scrollSpeed, int fixedRows, int scrollRows, int verticalOffset, int startPage, int stopPage) ** Scroll all or part of the screen diagonally upwards scrollStop() none Disables all active scrolling readLcdFile(\"path\") \"Path to LCD File\" Displays lcd image file on the screen Usage Initialization This function programs the initilization sequence on the OLED Expansion, after this step is completed, the various OLED functions can be used with success: oledAddon.init(); Functions to Adjust Settings There is a series of functions that adjust various settings on the OLED Display. The adjustable settings are: Screen on/off Color inversion Setting screen brightness Setting the memory mode Defining the width of each page Setting the cursor position Turn Display Off/On The screen cab be turned on and off while still preserving the displayed contents.Note: turning on a screen that is already on, or turning off a screen that is already off will have no effect. oledAddon.setDisplayPower(int bPowerON); Arguments The bPowerOn argument determines whether to turn the display on or off. Value Meaning 0 Turn the screen off 1 Turn the screen on Examples Turn the screen off with: oledAddon.setDisplayPower(0); Turn the screen on with: oledAddon.setDisplayPower(1); Invert Display Color The screen driver has the ability to invert the display colors, meaning that black becomes white and vice versa. To invert the colors: oledAddon.setDisplayMode(int bInvert); Arguments The bInvert argument determines whether to inver the colors or not. Value Meaning 0 Normal color settings 1 Inverted color settings Examples To invert the colors: oledAddon.setDisplayMode(1); To revert back to the normal colors: oledAddon.setDisplayMode(0); Set the Display Brightness The brightness of the display can be adjusted in a granularity of 256 steps. The default brightness after initialization is 207. oledAddon.setBrightness(int brightness); Arguments The brightness argument determines the brightness with a range of 0-255, with 255 being the brightest setting and 0 being the dimmest. Examples So to set the maximum brightness: oledAddon.setBrightness(255); To set the lowest brightness: oledAddon.setBrightness(0); And to set the middle brightness: oledAddon.setBrightness(127); Dim the Display This function implements a 'dim' and a 'normal' setting for the display: oledAddon.setDim(int dim); While the brightness adjustment function described just above impleents the same feature, this function simplifies the procedure with two distinct settings. Arguments The dim argument determines whether to enable the dim setting Value Meaning 0 Normal Brightness: 207 1 Dimmed Screen:0 Examples Dim the Display: oledAddon.setDim(1); Set the Display to normal brightness: oledAddon.setDim(0); Set Memory Mode Implements the ability to select the display's memory mode: oledAddon.setMemoryMode(int mode); The memory mode affects how the cursor is automatically advanced when the display memory is written with text or images. Horizontal Addressing Mode After each write, the column cursor advances horizontally to the right along the page, once the end of the page is reached, the page cursor is advanced onto the next page. Vertical Addressing Mode After each write, the page cursor advances vertically downward through the pages, once the last page is reached, the column cursor is advanced to the next pixel column. Page Addressing Mode The column cursor advances horizontally to the right along each page, once the end of the page is reached, the column cursor wraps around to column 0 and the page cursor remains the same. By default, Horizontal Addressing is used. Arguments The mode argument determines which memory mode is active. Memory Mode Input Horizontal Addressing Mode 0 Vertical Addressing Mode 1 Page Addressing Mode 2 Examples Set to the page addressing mode: oledAddon.setMemoryMode(2); Set Column Addressing This function is used to define where each page starts and ends horizontally: oledAddon.setColumnAddressing(int startPixel, int endPixel); Changing the start and end pixels changes the width of each page. By default, the column addressing is set from 0 to pixel 127. This means that each page has 128 usable columns, once the cursor reaches the last column, the display knows this page is filled. For example, when writing text, the oledWrite function will set the columns to run from 0 to 125 in order for the characters to display properly. Since each character is 6 columns, 21 full characters can be displayed on a single line, the end pixel is set to 125 so that the 22nd character gets placed on the next line instead. Note: the column cursor is not preserved after a column addressing change. Arguments The startPixel argument sets the starting column for each page. The endPixel argument sets the end column for each page. Both arguments must be between the 0-127 and the startPixel must be less than endPixel. Examples Set the column addressing display text: oledAddon.setColumnAddressing(0,127); Set the column addressing to the full display width: oledAddon.setColumnAddressing(0,63); Set each column to start halfway across an to enf three quartes of the way accross the display: oledAddon.setColumnAddressing(63,95); Set Columns for Text A function exists to define the column addressing specifically for text: oledAddon.setTextColumns(); It sets the start pixel to 0 and the end pixel to 125. This allows for the 21 text characters per line This function should be run, before setting the cursor for writing text. Set Columns for Images Also, a function exists to define the column addressing to cover the entire screen: oledAddon.setImageColumns(); It sets the start pixel to 0 and te end pixel to 127. This enables the use of the entire screen. Set Cursor Position Any data written to the screen gets writting to the current position of the cursor. This position can be adjusted. Two methods exist: Specifying the page row and character column Specifying the page row and pixel column Set Cursor Position by Character Column This function is used to position the cursor on a specific page and character column. After this call, the next bytes written to the screen will be displayed at the new position of the cursor: oledAddon.setCursor(int row, int column); Note: since the column cursor is not preserved after a column addressing change, the column addressing needs be set to 0-125 using the oledSetTextColumns() function to properly display text before the cursor position is programmed. Arguments The row argument sets the page for the cursor, so the range is 0 to 7. The column argument sets the character column position of the cursor, the range is 0 to 20. Examples Set the cursor to the start of the last page: oledAddon.setCursor(7,0); Set the cursor to the middle of the 4th row: oledAddon.setCursor(3,10); Set the cursor to the starting position at the top-left: oledAddon.setCursor(0,0); Set Cursor Position by Pixel This function is used to position the cursor on a specific page and pixel row. This gives more fine grain control than setting by character column. After this call, the next bytes written to the screen will be displayed at the new position of the cursor: oledAddon.setCursorByPixel(int row, int pixel); It allows for cursor positions that are not aligned with the 21 possible character columns. Arguments The row argument sets the page for the cursor, so the range is 0-7 The pixel argument sets the horizontal pixel position of the cursor, the range is 0 to 127 Examples Set the cursor to the start of the last page: oledAddon.setCursorByPixel(7,0); Set the cursor to the middle of the 4th row: oledAddon.setCursorByPixel(3,63); Set the cursor to the bottom-left oledAddon.setCursorByPixel(7,0); Clearing the Display To clear the screen and move the cursor to the starting position at the top-left of the screen: oledAddon.clear(); Writing Text to The Display Listed below are the functions that write bytes, characters, strings, or images to the display. Write a Single Byte Write a single byte, eight vertical pixels, to the current position of the cursor: oledAddon.oledWriteByte(int byte); Arguments The byte argument holds the eight bits that will be written to the screen. The Least Significant Bit (LSB) in the byte corresponds to the top-most pixel in the column, the Most Significant Bit (MSB) corresponds to the bottom-most pixel in the column. After the byte is set, the cursor will automatically move to the next page column. Examples Draw the following pattern: oledAddon.writeByte(0x3f); Write a Single Character Write a single character to the current position of the cursor: oledAddon.writeChar(character); Arguments The character argument is the character that is to be written to the screen. Make sure to check the asciiTable dynamic array found in oled-exp.h, it defines the bitmap pattern of each allowed character. Any characters not found in the table will be ignored. Examples Write an 'O' oledAddon.writeChar('O'); Write a String Write an entire string of characters, starting at the current position of the cursor: oledAddon.write(msg); Underneath, this uses the writeChar function to display characters and also implements newline functionality. The newline functionality is implemented by using a global variable to keep track where the cursor is in each row (I know... shameful...). Once the characters '\\' and 'n' are detected, the write function will print spaces to the display until it reaches the end of the current page and the cursor increments its position to the next page. Note: the column addressing will be set to 0-125 to properly display text during this call, at the end of the function it will be reset back to 0-127. Arguments The msg argument is the string to be written to the display. Any characters not found in the asciiTable array will be ignored. Examples Write 'Onion Omega': oledAddon.write('Onion Omega'); Write 'Onion Omega', then 'Inventing the Future' on the next line, and then 'Today' two lines below: oledAddon.write( Onion Omega\\nInventing the Future\\n\\nToday ); Scrolling the Display Contents The OLED can scroll the contents of the screen horizontally or upwards at a 45 degree angle. The displayed content will wrap around when it reaches the edge of the display. Horizontal Scrolling Scroll the contents of the screen horizontally or upwards at a 45 degree angle. Contents will wrap around after reaching edge of display oledAddon.scroll(int direction, int scrollSpeed, int startPage, int stopPage); Arguments Direction Indicates whether to scroll left or right. Value Scrolling Direction 0 Left 1 Right scrollSpeed Determines the number of frames between each scroll step. Value Scroll Speed 0 5 Frames 1 64 Frames 2 128 Frames 3 256 Frames 4 3 Frames 5 4 Frames 6 25 Frames 7 2 Frames startPage and stopPage Thes two arguments define which page to start and stop scrolling at respectively. Both can have values between 0-7, however startPage must be less than stopPage . Example Let's scroll the entire screen to the left oledAddon.scroll(0,0,0,7); Diagonal Scrolling Scroll all or part of the screen diagonally upwards: scrollDiagonal(int direction, int scrollSpeed, int fixedRows, int scrollRows, int verticalOffset, int startPage, int stopPage); Arguments Direction Indicates whether to scroll up-left or up-right. Value Scrolling Direction 0 Upwards and Left 1 Upwards and Right scrollSpeed Determines the number of frames between each scroll step. Value Scroll Speed 0 5 Frames 1 64 Frames 2 128 Frames 3 256 Frames 4 3 Frames 5 4 Frames 6 25 Frames 7 2 Frames fixedRows Defines the amount of pixel rows, starting from the top, that will not have vertical scrolling. Can take a range from 0-63. scrollRows Defines the amount of pixel rows, starting from the top, that will have vertical scrolling. Can take a range from 0-63. verticalOffset Defines the number of vertical rows to scroll by each frame. startPage and stopPage Thes two arguments define which page to start and stop scrolling at respectively. Both can have values between 0-7, however startPage must be less than stopPage . Examples Let's scroll the entire screen upwards to the left. oledAddon.scrollDiagonal(0,5,0,127,1,0,7); Stop Scrolling Disables all active scrolling oledAddon.scrollStop(); Further Reading If you are unsure of how the display works. We recommend you take a look at the documentation for the Dynamic C library for the OLED Expansion, which can be found here . The node functions are a direct mapping to the functions available from the C library.","title":"OLED Expansion Node Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#oled-expansion-for-nodejs","text":"As a part of our efforts to add expansion support to node.js, we have added control of the OLED expansion by way of node.js addon. To use the display within your node.js programs, all you have to do is import the OLED addon in the same way as a module and call methods to control the display. The addon is a wrapper around the OLED C library. The library's documentation can be found here , many of the node functions follow the same input-output structure as the C library. [[ TOC ]]","title":"OLED Expansion for Node.js"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#programming-flow","text":"After each power-cycle, the chip that controls the OLED Expansion must be programmed with an initialization sequence to setup the display and enable it to receive additional commands. After the initialization, the other functions can be used to adjust vaious screen settings or display text or images.","title":"Programming Flow"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#understanding-the-display","text":"The screen has a resolution of 128x64 pixels. It is addressable by 128 vertical columns and 8 horizontal pages: Each page consists of 8 horizontal pixel rows. When a byte is written to the display, the Least Significant Byte (LSB) corresponds to the top-most pixel of the page in the current column. The Most Significant Byte (MSB) corresponds to the bottom-most pixel of the page in the current column. So writing 0x0f would produce the top 4 pixels being coloured in, and the bottom 4 being left blank. The display keeps a cursor pointer in memory that indicates the current page and column being addressed. The cursor will automatically be incremented after each byte is written, the cursor can also be moved by the user through functions discussed below.","title":"Understanding the Display"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#the-node-addon","text":"The OLED Expansion addon exposes a series of methods that perform all of the actions specified in the Programming Flow section.","title":"The Node Addon"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#install-the-addon","text":"Install the addon on your Omega: opkg update opkg install oled-exp-node NodeJS will need to be installed for Node programs to actually run: opkg install nodejs","title":"Install the Addon"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#importing-the-addon-into-your-node-script","text":"To use the addon within your script you have to import it into your node program as you would a module. Use the following command in your node script. var oledAddon = require( /usr/bin/oled-exp-addon );","title":"Importing the addon into your Node Script"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#example-code","text":"Example code that uses the oled-exp-node addon can be found here in the i2c-exp-node-addons Onion GitHub Repo.","title":"Example Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#return-values","text":"All of the functions will either return a 0 indicating success or 1 indicating failure.","title":"Return Values"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#calling-methods","text":"Methods are called in the following format. oledAddon.method(); Replace method with your funcion of interest.","title":"Calling Methods"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#available-methods","text":"Refer to the table below for a list and brief description of available OLED methods. Method Inputs Description init() none Initializes the display. Must be called once before using display clear() none Clears the Display of all contents. setDisplayPower(int) 1,0 Turns the screen on or off. Preserves screen content setDisplayMode(int) 1,0 Inverts the color settings. setBrightness(int) 0-255 Adjust display brightness by inputting value from 0(dimmest)-255(brightest), 207 by default. setDim(int) 1,0 Similar to the setBrightness method where 0:Normal brightness 207 and 1:Dimmed Screen 0 setMemoryMode(int) 0,1,2 Implements the ability to select the display's memory mode, ie, how the cursor is automatically advanced when the display memory is written to with text or images. 0=Horizontal Addressing Mode, 1=Vertical Addressing Mode, 2=Page Addressing Mode setCursor(int row, int column) 0-7,0-20 Position the cursor on a specific page and character column. setCursorByPixel(int row, int pixel) 0-7,0-127 This function positions the cursor on a specific page and pixel row setColumnAddressing(int startPixel, int endPixel) 0-127,0-127 Used to determine where each page starts and ends horizontally setTextColumns() none Defines the column addressing specifically for text. Sets the start pixel to 0 and end pixel to 125. This allows for 21 text characters per line. This function should be run before setting the cursor for writing text. setImageColumns() none This function defines the column addressing to cover the entire screen. It sets the start pixel to 0 and end pixel to 127. writeChar(char \"A\") single character in a string input Writes a single character to the current position of the cursor. Any unrecognized characters will be ignored, for a list of acceptable characters refer to asciiTable in oled-exp.h write(msg) string \"HelloWorld\" Write an entire string of characters, starting at the current positon of the cursor writeByte(int byte) 0x00 - 0xFF Write a single byte, eight vertical pixels, to the current position of the cursor. scroll(int direction, int scrollSpeed, int startPage, int stopPage) * Scroll the contents of the screen horizontally or upwards at a 45 degree angle. The displayed contents will wrap around when it reaches the edge of the display. scrollDiagonal( int direction, int scrollSpeed, int fixedRows, int scrollRows, int verticalOffset, int startPage, int stopPage) ** Scroll all or part of the screen diagonally upwards scrollStop() none Disables all active scrolling readLcdFile(\"path\") \"Path to LCD File\" Displays lcd image file on the screen","title":"Available Methods"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#usage","text":"","title":"Usage"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#initialization","text":"This function programs the initilization sequence on the OLED Expansion, after this step is completed, the various OLED functions can be used with success: oledAddon.init();","title":"Initialization"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#functions-to-adjust-settings","text":"There is a series of functions that adjust various settings on the OLED Display. The adjustable settings are: Screen on/off Color inversion Setting screen brightness Setting the memory mode Defining the width of each page Setting the cursor position","title":"Functions to Adjust Settings"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#turn-display-offon","text":"The screen cab be turned on and off while still preserving the displayed contents.Note: turning on a screen that is already on, or turning off a screen that is already off will have no effect. oledAddon.setDisplayPower(int bPowerON); Arguments The bPowerOn argument determines whether to turn the display on or off. Value Meaning 0 Turn the screen off 1 Turn the screen on Examples Turn the screen off with: oledAddon.setDisplayPower(0); Turn the screen on with: oledAddon.setDisplayPower(1);","title":"Turn Display Off/On"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#invert-display-color","text":"The screen driver has the ability to invert the display colors, meaning that black becomes white and vice versa. To invert the colors: oledAddon.setDisplayMode(int bInvert); Arguments The bInvert argument determines whether to inver the colors or not. Value Meaning 0 Normal color settings 1 Inverted color settings Examples To invert the colors: oledAddon.setDisplayMode(1); To revert back to the normal colors: oledAddon.setDisplayMode(0);","title":"Invert Display Color"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#set-the-display-brightness","text":"The brightness of the display can be adjusted in a granularity of 256 steps. The default brightness after initialization is 207. oledAddon.setBrightness(int brightness); Arguments The brightness argument determines the brightness with a range of 0-255, with 255 being the brightest setting and 0 being the dimmest. Examples So to set the maximum brightness: oledAddon.setBrightness(255); To set the lowest brightness: oledAddon.setBrightness(0); And to set the middle brightness: oledAddon.setBrightness(127);","title":"Set the Display Brightness"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#dim-the-display","text":"This function implements a 'dim' and a 'normal' setting for the display: oledAddon.setDim(int dim); While the brightness adjustment function described just above impleents the same feature, this function simplifies the procedure with two distinct settings. Arguments The dim argument determines whether to enable the dim setting Value Meaning 0 Normal Brightness: 207 1 Dimmed Screen:0 Examples Dim the Display: oledAddon.setDim(1); Set the Display to normal brightness: oledAddon.setDim(0);","title":"Dim the Display"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#set-memory-mode","text":"Implements the ability to select the display's memory mode: oledAddon.setMemoryMode(int mode); The memory mode affects how the cursor is automatically advanced when the display memory is written with text or images. Horizontal Addressing Mode After each write, the column cursor advances horizontally to the right along the page, once the end of the page is reached, the page cursor is advanced onto the next page. Vertical Addressing Mode After each write, the page cursor advances vertically downward through the pages, once the last page is reached, the column cursor is advanced to the next pixel column. Page Addressing Mode The column cursor advances horizontally to the right along each page, once the end of the page is reached, the column cursor wraps around to column 0 and the page cursor remains the same. By default, Horizontal Addressing is used. Arguments The mode argument determines which memory mode is active. Memory Mode Input Horizontal Addressing Mode 0 Vertical Addressing Mode 1 Page Addressing Mode 2 Examples Set to the page addressing mode: oledAddon.setMemoryMode(2);","title":"Set Memory Mode"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#set-column-addressing","text":"This function is used to define where each page starts and ends horizontally: oledAddon.setColumnAddressing(int startPixel, int endPixel); Changing the start and end pixels changes the width of each page. By default, the column addressing is set from 0 to pixel 127. This means that each page has 128 usable columns, once the cursor reaches the last column, the display knows this page is filled. For example, when writing text, the oledWrite function will set the columns to run from 0 to 125 in order for the characters to display properly. Since each character is 6 columns, 21 full characters can be displayed on a single line, the end pixel is set to 125 so that the 22nd character gets placed on the next line instead. Note: the column cursor is not preserved after a column addressing change. Arguments The startPixel argument sets the starting column for each page. The endPixel argument sets the end column for each page. Both arguments must be between the 0-127 and the startPixel must be less than endPixel. Examples Set the column addressing display text: oledAddon.setColumnAddressing(0,127); Set the column addressing to the full display width: oledAddon.setColumnAddressing(0,63); Set each column to start halfway across an to enf three quartes of the way accross the display: oledAddon.setColumnAddressing(63,95);","title":"Set Column Addressing"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#set-columns-for-text","text":"A function exists to define the column addressing specifically for text: oledAddon.setTextColumns(); It sets the start pixel to 0 and the end pixel to 125. This allows for the 21 text characters per line This function should be run, before setting the cursor for writing text.","title":"Set Columns for Text"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#set-columns-for-images","text":"Also, a function exists to define the column addressing to cover the entire screen: oledAddon.setImageColumns(); It sets the start pixel to 0 and te end pixel to 127. This enables the use of the entire screen.","title":"Set Columns for Images"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#set-cursor-position","text":"Any data written to the screen gets writting to the current position of the cursor. This position can be adjusted. Two methods exist: Specifying the page row and character column Specifying the page row and pixel column","title":"Set Cursor Position"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#set-cursor-position-by-character-column","text":"This function is used to position the cursor on a specific page and character column. After this call, the next bytes written to the screen will be displayed at the new position of the cursor: oledAddon.setCursor(int row, int column); Note: since the column cursor is not preserved after a column addressing change, the column addressing needs be set to 0-125 using the oledSetTextColumns() function to properly display text before the cursor position is programmed. Arguments The row argument sets the page for the cursor, so the range is 0 to 7. The column argument sets the character column position of the cursor, the range is 0 to 20. Examples Set the cursor to the start of the last page: oledAddon.setCursor(7,0); Set the cursor to the middle of the 4th row: oledAddon.setCursor(3,10); Set the cursor to the starting position at the top-left: oledAddon.setCursor(0,0);","title":"Set Cursor Position by Character Column"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#set-cursor-position-by-pixel","text":"This function is used to position the cursor on a specific page and pixel row. This gives more fine grain control than setting by character column. After this call, the next bytes written to the screen will be displayed at the new position of the cursor: oledAddon.setCursorByPixel(int row, int pixel); It allows for cursor positions that are not aligned with the 21 possible character columns. Arguments The row argument sets the page for the cursor, so the range is 0-7 The pixel argument sets the horizontal pixel position of the cursor, the range is 0 to 127 Examples Set the cursor to the start of the last page: oledAddon.setCursorByPixel(7,0); Set the cursor to the middle of the 4th row: oledAddon.setCursorByPixel(3,63); Set the cursor to the bottom-left oledAddon.setCursorByPixel(7,0);","title":"Set Cursor Position by Pixel"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#clearing-the-display","text":"To clear the screen and move the cursor to the starting position at the top-left of the screen: oledAddon.clear();","title":"Clearing the Display"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#writing-text-to-the-display","text":"Listed below are the functions that write bytes, characters, strings, or images to the display.","title":"Writing Text to The Display"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#write-a-single-byte","text":"Write a single byte, eight vertical pixels, to the current position of the cursor: oledAddon.oledWriteByte(int byte); Arguments The byte argument holds the eight bits that will be written to the screen. The Least Significant Bit (LSB) in the byte corresponds to the top-most pixel in the column, the Most Significant Bit (MSB) corresponds to the bottom-most pixel in the column. After the byte is set, the cursor will automatically move to the next page column. Examples Draw the following pattern: oledAddon.writeByte(0x3f);","title":"Write a Single Byte"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#write-a-single-character","text":"Write a single character to the current position of the cursor: oledAddon.writeChar(character); Arguments The character argument is the character that is to be written to the screen. Make sure to check the asciiTable dynamic array found in oled-exp.h, it defines the bitmap pattern of each allowed character. Any characters not found in the table will be ignored. Examples Write an 'O' oledAddon.writeChar('O');","title":"Write a Single Character"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#write-a-string","text":"Write an entire string of characters, starting at the current position of the cursor: oledAddon.write(msg); Underneath, this uses the writeChar function to display characters and also implements newline functionality. The newline functionality is implemented by using a global variable to keep track where the cursor is in each row (I know... shameful...). Once the characters '\\' and 'n' are detected, the write function will print spaces to the display until it reaches the end of the current page and the cursor increments its position to the next page. Note: the column addressing will be set to 0-125 to properly display text during this call, at the end of the function it will be reset back to 0-127. Arguments The msg argument is the string to be written to the display. Any characters not found in the asciiTable array will be ignored. Examples Write 'Onion Omega': oledAddon.write('Onion Omega'); Write 'Onion Omega', then 'Inventing the Future' on the next line, and then 'Today' two lines below: oledAddon.write( Onion Omega\\nInventing the Future\\n\\nToday );","title":"Write a String"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#scrolling-the-display-contents","text":"The OLED can scroll the contents of the screen horizontally or upwards at a 45 degree angle. The displayed content will wrap around when it reaches the edge of the display.","title":"Scrolling the Display Contents"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#horizontal-scrolling","text":"Scroll the contents of the screen horizontally or upwards at a 45 degree angle. Contents will wrap around after reaching edge of display oledAddon.scroll(int direction, int scrollSpeed, int startPage, int stopPage);","title":"Horizontal Scrolling"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#arguments","text":"Direction Indicates whether to scroll left or right. Value Scrolling Direction 0 Left 1 Right scrollSpeed Determines the number of frames between each scroll step. Value Scroll Speed 0 5 Frames 1 64 Frames 2 128 Frames 3 256 Frames 4 3 Frames 5 4 Frames 6 25 Frames 7 2 Frames startPage and stopPage Thes two arguments define which page to start and stop scrolling at respectively. Both can have values between 0-7, however startPage must be less than stopPage . Example Let's scroll the entire screen to the left oledAddon.scroll(0,0,0,7);","title":"Arguments"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#diagonal-scrolling","text":"Scroll all or part of the screen diagonally upwards: scrollDiagonal(int direction, int scrollSpeed, int fixedRows, int scrollRows, int verticalOffset, int startPage, int stopPage);","title":"Diagonal Scrolling"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#arguments_1","text":"Direction Indicates whether to scroll up-left or up-right. Value Scrolling Direction 0 Upwards and Left 1 Upwards and Right scrollSpeed Determines the number of frames between each scroll step. Value Scroll Speed 0 5 Frames 1 64 Frames 2 128 Frames 3 256 Frames 4 3 Frames 5 4 Frames 6 25 Frames 7 2 Frames fixedRows Defines the amount of pixel rows, starting from the top, that will not have vertical scrolling. Can take a range from 0-63. scrollRows Defines the amount of pixel rows, starting from the top, that will have vertical scrolling. Can take a range from 0-63. verticalOffset Defines the number of vertical rows to scroll by each frame. startPage and stopPage Thes two arguments define which page to start and stop scrolling at respectively. Both can have values between 0-7, however startPage must be less than stopPage . Examples Let's scroll the entire screen upwards to the left. oledAddon.scrollDiagonal(0,5,0,127,1,0,7);","title":"Arguments"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#stop-scrolling","text":"Disables all active scrolling oledAddon.scrollStop();","title":"Stop Scrolling"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Node-Module/#further-reading","text":"If you are unsure of how the display works. We recommend you take a look at the documentation for the Dynamic C library for the OLED Expansion, which can be found here . The node functions are a direct mapping to the functions available from the C library.","title":"Further Reading"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/","text":"OLED Expansion Python Module The Onion OLED Expansion Python module, oledExp is based on the C OLED Expansion Library . Using this module, you will be able to control the OLED Expansion from within your Python program. [[ TOC ]] Programming Flow After each power-cycle, the chip that controls the OLED Expansion must be programmed with an initialization sequence to setup the display and enable it to receive additional commands. After the initialization, the other functions can be used to ajdust various screen settings or display text or images. Understanding the Display The screen has a resolution of 128x64 pixels. It is addressable by 128 vertical columns and 8 horizontal pages: Each page consists of 8 horizontal pixel rows. When a byte is written to the display, the Least Significant Byte (LSB) corresponds to the top-most pixel of the page in the current column. The Most Significant Byte (MSB) corresponds to the bottom-most pixel of the page in the current column. So writing 0x0f would produce the top 4 pixels being coloured in, and the bottom 4 being left blank. The display keeps a cursor pointer in memory that indicates the current page and column being addressed. The cursor will automatically be incremented after each byte is written, the cursor can also be moved by the user through functions discussed below. The Python Module The oledExp Python module in the OmegaExpansion package provides a wrapper around the C library functions. The functions are largely the same as their C counterparts, including the arguments and return values. Any differences from the C library will be explicitly mentioned below. Source Code The source code can be found in the Onion i2c-exp-driver GitHub Repo . Using the Python Module Installing the Module To install the Python module, run the following commands: opkg update opkg install python-light pyOledExp This will install the module to /usr/lib/python2.7/OmegaExpansion/ Note: this only has to be done once. Using the Module To add the Onion OLED Expansion Module to your Python program, include the following in your code: from OmegaExpansion import oledExp The functions are largely the same as their C counterparts, including the arguments and return values. Any differences from the C library will be explicitly mentioned below. One major drawback is that none of the defines found in C are currently implemented in the Python module. Example Code Example code that uses the oledExp module can be found here , in the i2c-exp-driver Onion GitHub Repo. Return Values All functions follow the same pattern with return values: If the function operation is successful, the return value will be 0 . If the function operation is not successful, the function will return 1 . Initialization Function Perform the initialization sequence on the OLED Expansion, after this step is completed, the other various OLED functions can be used with success: oledExp.driverInit() Examples Initialize the OLED Display: status = oledExp.driverInit(); Functions to Adjust Settings There is a series of functions that adjust various settings on the OLED Display. The adjustable settings are: * Screen on/off * Colour inversion * Setting screen brightness * Setting the memory mode * Defining the width of each page * Setting the cursor position Turn the Screen On and Off The screen can be turned on and off while still preserving the displayed contents: oledExp.setDisplayPower(bPowerOn) Note: turning on a screen that is already on, or turning off a screen that is already off will have no effect. Arguments The bPowerOn argument is detemines whether to turn the display on or off Value Meaning 0 Turn the screen off 1 Turn the screen on Examples Turn the screen off: status = oledExp.setDisplayPower(0) Turn the screen on: status = oledExp.setDisplayPower(1) Invert Display Colours The screen driver has the ability to invert the display colours, meaning that black becomes white and vice versa: oledExp.setDisplayMode(bInvert) Arguments The bInvert argument is detemines whether to invert the colours or not Value Meaning 0 Normal colour settings 1 Inverted colour settings Examples Invert the colours: status = oledExp.setDisplayMode(1) Return the colours to normal: status = oledExp.setDisplayMode(0) Set the Display Brightness The brightness of the display can be adjusted in a granularity of 256 steps: oledExp.setBrightness(brightness) The default brightness after initialization is 207. Arguments The brightness argument is detemines the display brightness with a range of 0 to 255 , with 255 being the brightest setting and 0 being the dimmest. Examples Set to maximum brightness: status = oledExp.setBrightness(255) Set to lowest possible brightness: status = oledExp.setBrightness(0) Set to middle brightness: status = oledExp.setBrightness(127) Dim the display This function implements a 'dim' and a 'normal' setting for the display: oledExp.setDim(dim) While the brightness adjustment function described just above implements the same feature, this function simplifies the procedure with two very disctinct settings. Arguments The dim argument is detemines whether to enable the dim setting Value Meaning 0 Normal brightness: 207 1 Dimmed screen: 0 Examples Dim the display: status = oledExp.setDim(1) Set the display to normal brightness: status = oledExp.setDim(0) Set Memory Mode Implements the ability to select the display's memory mode: oledExp.setMemoryMode(mode) The memory mode affects how the cursor is automatically advanced when the display memory is written to with text or images. Horizontal Addressing Mode After each write, the column cursor advances horizontally to the right along the page, once the end of the page is reached, the page cursor is advanced onto the next page. Vertical Addressing Mode After each write, the page cursor advances vertically downward through the pages, once the last page is reached, the column cursor is advanced to the next pixel column Page Addressing Mode The column cursor advances horizontally to the right along each page, once the end of the page is reached, the column cursor wraps around to column 0 and the page cursor remains the same. By default, Horizontal Addressing is used. Arguments The mode argument detemines which memory mode is active. Unfortunately, the C defines do not carry over to Python, follow this table for selecting the desired mode: Memory Mode mode Argument Horizontal Addressing Mode 0 Vertical Addressing Mode 1 Page Addressing Mode 2 Examples Set to page addressing mode: status = oledExp.setMemoryMode(2) Set to horizontal addressing mode: status = oledExp.setMemoryMode(0) Set Column Addressing This function is used to define where each page starts and ends horizontally: oledExp.setColumnAddressing(startPixel, endPixel) Changing the start and end pixels changes the width of each page. By default, the column addressing is set from 0 to pixel 127. This means that each page has 128 usable columns, once the cursor reaches the last column, the display knows this page is filled. For example, when writing text, the oledWrite function will set the columns to run from 0 to 125 in order for the characters to display properly. Since each character is 6 columns, 21 full characters can be displayed on a single line, the end pixel is set to 125 so that the 22nd character gets placed on the next line instead. Note: the column cursor is not preserved after a column addressing change. Arguments The startPixel argument sets the starting column for each page. The endPixel argument sets the end column for each page. Both arguments must be between 0 and 127 and startPixel must be less than endPixel. Again, the C defines do not carry over to Python, regular numbers will have to be used for the start and end pixel arguments. Examples Set the column addressing to display text: status = oledExp.setColumnAddressing(0, 126-1) Set the column addressing to the full display width status = oledExp.setColumnAddressing(0, 128-1) Set each column to start halfway across and to end three quarters of the way across the display: status = oledExp.setColumnAddressing(63, 95) Set Columns for Text This function defines the column addressing specifically for text: oledExp.setTextColumns() It sets the start pixel to 0 and the end pixel to 125. This allows for 21 text characters per line. This function should be run before setting the cursor for writing text. Set Columns for Images Alternatively, this function defines the column addressing to cover the entire screen: oledExp.setImageColumns() It sets the start pixel to 0 and the end pixel to 127. This enables the use of the entire screen real estate. Set Cursor Position Any data written to the screen gets written to the current position of the cursor. This position can be adjusted. Two methods exist: * Specifying the page row and character column * Specifying the page row and pixel column Set Cursor Position by Character Column This function is used to position the cursor on a specific page and character column. After this call, the next bytes written to the screen will be displayed at the new position of the cursor: oledExp.setCursor(row, column) Note: since the column cursor is not preserved after a column addressing change, the column addressing needs be set to 0-125 to using the oledExp.setTextColumns() function to properly display text before the cursor position is programmed. Arguments The row argument sets the page for the cursor, so the range is 0 to 7 The column argument sets the character column position of the cursor, the range is 0 to 20 Examples Set the cursor to the start of the last page: status = oledExp.setCursor(7, 0) Set the cursor to the middle of the 4th row: status = oledExp.setCursor(3, 10) Set the cursor to the starting position at the top-right status = oledExp.setCursor(0, 0) Write 'hello' at the top left of the screen, and then write 'hi there' on the middle of the 7th row: status = oledExp.setCursor(0, 0) status |= oledExp.write( hello ) status |= oledExp.setCursor(6, 10) status |= oledExp.write( hi there ) Set Cursor Position by Pixel This function is used to position the cursor on a specific page and pixel row. This gives more fine grain control than setting by character column. After this call, the next bytes written to the screen will be displayed at the new position of the cursor: oledExp.setCursorByPixel(row, pixel) It allows for cursor positions that are not aligned with the 21 possible character columns. Arguments The row argument sets the page for the cursor, so the range is 0 to 7 The pixel argument sets the horizontal pixel position of the cursor, the range is 0 to 127 Examples Set the cursor to the start of the last page: status = oledExp.setCursorByPixel(7, 0) Set the cursor to the middle of the 4th row: status = oledExp.setCursorByPixel(3, 63) Set the cursor to the bottom-left status = oledExp.setCursorByPixel(7, 0) Write 'hello' at the top left of the screen, and then write 'hi there' on the middle of the 7th row: oledExp.setCursorByPixel(0, 0) oledExp.write( hello ) oledExp.setCursorByPixel(6, 63) oledExp.write( hi there ) Clear the Screen To clear the screen and move the cursor to the starting position at the top-left of the screen: oledExp.clear() Writing Text to the Display Listed below are the functions that write bytes, characters, strings, or images to the display. Write a Single Byte Write a single byte, eight vertical pixels, to the current position of the cursor: oledExp.writeByte(byte) Arguments The byte argument is the eight bits that will be written to the screen. The Least Significant Bit (LSB) in the byte corresponds to the top-most pixel in the column, the Most Significant Bit (MSB) corresponds to the bottom-most pixel in the column. After the byte is set, the cursor will automatically move to the next page column. Examples Draw the following pattern: status = oledExp.writeByte(0x01) # 0x01 = 0b 0000 0001 status |= oledExp.writeByte(0x03) # 0x03 = 0b 0000 0011 status |= oledExp.writeByte(0x07) # 0x07 = 0b 0000 0111 status |= oledExp.writeByte(0x0f) # 0x0f = 0b 0000 1111 status |= oledExp.writeByte(0x3f) # 0x3f = 0b 0011 1111 Write a Single Character Write a single character to the current position of the cursor: oledExp.writeChar(c) Arguments The c argument is the character that is to be written to the screen. Make sure to check the asciiTable dynamic array found in oled-exp.h , it defines the bitmap pattern of each allowed character. Any characters not found in the table will be ignored. Examples Write an 'O' status = oledExp.writeChar('O') Write an open bracket, an x, then a close bracket: status = oledExp.writeChar('(') status |= oledExp.writeChar('x') status |= oledExp.writeChar(')') Write a String Write an entire string of characters, starting at the current position of the cursor: oledExp.write(msg) Underneath, this uses the oledWriteChar function to display characters and also implements newline functionality. The newline functionality is implemented by using a global variable to keep track where the cursor is in each row (I know... shameful...). Once the characters '\\' and 'n' are detected, the oledWrite function will print spaces to the display until it reaches the end of the current page and the cursor increments its position to the next page. Note: the column addressing will be set to 0-125 to properly display text during this call, at the end of the function it will be reset back to 0-127. Arguments The msg argument is the string to be written to the display. Any characters not found in the asciiTable array will be ignored. Examples Write 'Onion Omega': status = oledExp.write( Onion Omega ); Write 'Python rules!', then 'Especially on', and then 'the Omega' two lines below: status = oledExp.write( Python rules!\\nEspecially on\\n\\nthe Omega ) Drawing Images on the Display The OLED Screen can also be used to display images. The Console can be used to convert existing images into a format that is compatible with the OLED Expansion and save the output to an Omega. Functions in the Python module can read the image data and display it on the OLED Expansion. Creating Image Files The Console OLED App can be used to create OLED Expansion compatible image files. Navigate to the Image tab of the OLED App: Once an image has been selected, a button and form will appear that allow you to save the OLED image file to your Omega: After the image name and location are selected, click the Save to Omega button. OLED Image File Details The OLED image files store the image data as 1024 bytes represented in hexadecimal. Each byte represents eight vertical pixels, with the first 128 bytes representing the columns in Page 0, the following 128 bytes representing the columns in Page 1, and so on. If this is unclear, see the Understanding the Display Section for details on how the display is addressed. Displaying Images from a File Read the image data from a file and display on the OLED screen: status = oledExp.drawFromFile(file) Arguments The file argument is the path to the OLED image file. Examples Read an image file located at /root/image.lcd and draw it on the OLED display: status = oledExp.drawFromFile( /root/image.lcd ) Scrolling the Display Contents The OLED can scroll the contents of the screen horizontally or upwards at a 45 degree angle. The displayed content will wrap around when it reaches the edge of the display. Horizontal Scrolling Scroll all or part of the screen horizontally: oledExp.scroll(direction, scrollSpeed, startPage, stopPage) Arguments The direction argument indicates whether to scroll to the left or right: direction Value Scrolling Direction 0 Left 1 Right The scrollSpeed argument determines the number of \"frames\" between each scroll step: Scroll Speed scrollSpeed Argument OLED_EXP_SCROLL_SPEED_5_FRAMES 0 OLED_EXP_SCROLL_SPEED_64_FRAMES 1 OLED_EXP_SCROLL_SPEED_128_FRAMES 2 OLED_EXP_SCROLL_SPEED_256_FRAMES 3 OLED_EXP_SCROLL_SPEED_3_FRAMES 4 OLED_EXP_SCROLL_SPEED_4_FRAMES 5 OLED_EXP_SCROLL_SPEED_25_FRAMES 6 OLED_EXP_SCROLL_SPEED_2_FRAMES 7 The startPage argument defines at which page to start scrolling, and stopPage defines at which page to start the scroll. The range for both is 0 to 7 , and startPage must be less than stopPage. Examples Scroll the entire screen to the left: status = oledExp.scroll (0, 0, 0, 8-1) Quickly scroll the bottom half of the screen to the right: status = oledExp.scroll (1, 7, 4, 8-1) Slowly scroll pages 1 to 5: status = oledExp.scroll (1, 6, 1, 5) Diagonal Scrolling Scroll all or part of the screen diagonally upwards: oledExp.scrollDiagonal(direction, scrollSpeed, fixedRows, scrollRows, verticalOffset, startPage, stopPage) Arguments The direction argument indicates whether to scroll upwards to the left or right: direction Value Scrolling Direction 0 Upwards and Left 1 Upwards and Right The scrollSpeed argument determines the number of \"frames\" between each scroll step: Scroll Speed scrollSpeed Argument OLED_EXP_SCROLL_SPEED_5_FRAMES 0 OLED_EXP_SCROLL_SPEED_64_FRAMES 1 OLED_EXP_SCROLL_SPEED_128_FRAMES 2 OLED_EXP_SCROLL_SPEED_256_FRAMES 3 OLED_EXP_SCROLL_SPEED_3_FRAMES 4 OLED_EXP_SCROLL_SPEED_4_FRAMES 5 OLED_EXP_SCROLL_SPEED_25_FRAMES 6 OLED_EXP_SCROLL_SPEED_2_FRAMES 7 The fixedRows argument defines the amount of pixel rows, starting from the top, will not have vertical scrolling. The range is 0 to 63 . The scrollRows argument defines the amount of pixel rows, starting from the top, that will have vertical scrolling. The verticalOffset argument defines the number of vertical rows to scroll by each frame. The startPage argument defines at which page to start scrolling, and stopPage defines at which page to start the scroll. The range for both is 0 to 7 , and startPage must be less than stopPage. Examples Scroll the entire screen upwards to the left: status = oledExp.scrollDiagonal ( 0, 5, 0, 128-1, 1, 0, 8-1 ) Slowly Scroll the entire screen upwards to the right: status = oledExp.scrollDiagonal ( 1, 1, 0, 128-1, 1, 0, 8-1 ) Stop Scrolling Disables all active scrolling: oledExp.scrollStop() Examples Scroll the entire screen to the left, then stop it: status = oledExp.scroll (0, 0, 0, 7) status |= oledExp.scrollStop(0)","title":"OLED Expansion Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#oled-expansion-python-module","text":"The Onion OLED Expansion Python module, oledExp is based on the C OLED Expansion Library . Using this module, you will be able to control the OLED Expansion from within your Python program. [[ TOC ]]","title":"OLED Expansion Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#programming-flow","text":"After each power-cycle, the chip that controls the OLED Expansion must be programmed with an initialization sequence to setup the display and enable it to receive additional commands. After the initialization, the other functions can be used to ajdust various screen settings or display text or images.","title":"Programming Flow"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#understanding-the-display","text":"The screen has a resolution of 128x64 pixels. It is addressable by 128 vertical columns and 8 horizontal pages: Each page consists of 8 horizontal pixel rows. When a byte is written to the display, the Least Significant Byte (LSB) corresponds to the top-most pixel of the page in the current column. The Most Significant Byte (MSB) corresponds to the bottom-most pixel of the page in the current column. So writing 0x0f would produce the top 4 pixels being coloured in, and the bottom 4 being left blank. The display keeps a cursor pointer in memory that indicates the current page and column being addressed. The cursor will automatically be incremented after each byte is written, the cursor can also be moved by the user through functions discussed below.","title":"Understanding the Display"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#the-python-module","text":"The oledExp Python module in the OmegaExpansion package provides a wrapper around the C library functions. The functions are largely the same as their C counterparts, including the arguments and return values. Any differences from the C library will be explicitly mentioned below.","title":"The Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#source-code","text":"The source code can be found in the Onion i2c-exp-driver GitHub Repo .","title":"Source Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#using-the-python-module","text":"Installing the Module To install the Python module, run the following commands: opkg update opkg install python-light pyOledExp This will install the module to /usr/lib/python2.7/OmegaExpansion/ Note: this only has to be done once. Using the Module To add the Onion OLED Expansion Module to your Python program, include the following in your code: from OmegaExpansion import oledExp The functions are largely the same as their C counterparts, including the arguments and return values. Any differences from the C library will be explicitly mentioned below. One major drawback is that none of the defines found in C are currently implemented in the Python module.","title":"Using the Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#example-code","text":"Example code that uses the oledExp module can be found here , in the i2c-exp-driver Onion GitHub Repo.","title":"Example Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#return-values","text":"All functions follow the same pattern with return values: If the function operation is successful, the return value will be 0 . If the function operation is not successful, the function will return 1 .","title":"Return Values"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#initialization-function","text":"Perform the initialization sequence on the OLED Expansion, after this step is completed, the other various OLED functions can be used with success: oledExp.driverInit() Examples Initialize the OLED Display: status = oledExp.driverInit();","title":"Initialization Function"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#functions-to-adjust-settings","text":"There is a series of functions that adjust various settings on the OLED Display. The adjustable settings are: * Screen on/off * Colour inversion * Setting screen brightness * Setting the memory mode * Defining the width of each page * Setting the cursor position","title":"Functions to Adjust Settings"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#turn-the-screen-on-and-off","text":"The screen can be turned on and off while still preserving the displayed contents: oledExp.setDisplayPower(bPowerOn) Note: turning on a screen that is already on, or turning off a screen that is already off will have no effect. Arguments The bPowerOn argument is detemines whether to turn the display on or off Value Meaning 0 Turn the screen off 1 Turn the screen on Examples Turn the screen off: status = oledExp.setDisplayPower(0) Turn the screen on: status = oledExp.setDisplayPower(1)","title":"Turn the Screen On and Off"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#invert-display-colours","text":"The screen driver has the ability to invert the display colours, meaning that black becomes white and vice versa: oledExp.setDisplayMode(bInvert) Arguments The bInvert argument is detemines whether to invert the colours or not Value Meaning 0 Normal colour settings 1 Inverted colour settings Examples Invert the colours: status = oledExp.setDisplayMode(1) Return the colours to normal: status = oledExp.setDisplayMode(0)","title":"Invert Display Colours"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#set-the-display-brightness","text":"The brightness of the display can be adjusted in a granularity of 256 steps: oledExp.setBrightness(brightness) The default brightness after initialization is 207. Arguments The brightness argument is detemines the display brightness with a range of 0 to 255 , with 255 being the brightest setting and 0 being the dimmest. Examples Set to maximum brightness: status = oledExp.setBrightness(255) Set to lowest possible brightness: status = oledExp.setBrightness(0) Set to middle brightness: status = oledExp.setBrightness(127)","title":"Set the Display Brightness"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#dim-the-display","text":"This function implements a 'dim' and a 'normal' setting for the display: oledExp.setDim(dim) While the brightness adjustment function described just above implements the same feature, this function simplifies the procedure with two very disctinct settings. Arguments The dim argument is detemines whether to enable the dim setting Value Meaning 0 Normal brightness: 207 1 Dimmed screen: 0 Examples Dim the display: status = oledExp.setDim(1) Set the display to normal brightness: status = oledExp.setDim(0)","title":"Dim the display"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#set-memory-mode","text":"Implements the ability to select the display's memory mode: oledExp.setMemoryMode(mode) The memory mode affects how the cursor is automatically advanced when the display memory is written to with text or images. Horizontal Addressing Mode After each write, the column cursor advances horizontally to the right along the page, once the end of the page is reached, the page cursor is advanced onto the next page. Vertical Addressing Mode After each write, the page cursor advances vertically downward through the pages, once the last page is reached, the column cursor is advanced to the next pixel column Page Addressing Mode The column cursor advances horizontally to the right along each page, once the end of the page is reached, the column cursor wraps around to column 0 and the page cursor remains the same. By default, Horizontal Addressing is used. Arguments The mode argument detemines which memory mode is active. Unfortunately, the C defines do not carry over to Python, follow this table for selecting the desired mode: Memory Mode mode Argument Horizontal Addressing Mode 0 Vertical Addressing Mode 1 Page Addressing Mode 2 Examples Set to page addressing mode: status = oledExp.setMemoryMode(2) Set to horizontal addressing mode: status = oledExp.setMemoryMode(0)","title":"Set Memory Mode"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#set-column-addressing","text":"This function is used to define where each page starts and ends horizontally: oledExp.setColumnAddressing(startPixel, endPixel) Changing the start and end pixels changes the width of each page. By default, the column addressing is set from 0 to pixel 127. This means that each page has 128 usable columns, once the cursor reaches the last column, the display knows this page is filled. For example, when writing text, the oledWrite function will set the columns to run from 0 to 125 in order for the characters to display properly. Since each character is 6 columns, 21 full characters can be displayed on a single line, the end pixel is set to 125 so that the 22nd character gets placed on the next line instead. Note: the column cursor is not preserved after a column addressing change. Arguments The startPixel argument sets the starting column for each page. The endPixel argument sets the end column for each page. Both arguments must be between 0 and 127 and startPixel must be less than endPixel. Again, the C defines do not carry over to Python, regular numbers will have to be used for the start and end pixel arguments. Examples Set the column addressing to display text: status = oledExp.setColumnAddressing(0, 126-1) Set the column addressing to the full display width status = oledExp.setColumnAddressing(0, 128-1) Set each column to start halfway across and to end three quarters of the way across the display: status = oledExp.setColumnAddressing(63, 95)","title":"Set Column Addressing"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#set-columns-for-text","text":"This function defines the column addressing specifically for text: oledExp.setTextColumns() It sets the start pixel to 0 and the end pixel to 125. This allows for 21 text characters per line. This function should be run before setting the cursor for writing text.","title":"Set Columns for Text"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#set-columns-for-images","text":"Alternatively, this function defines the column addressing to cover the entire screen: oledExp.setImageColumns() It sets the start pixel to 0 and the end pixel to 127. This enables the use of the entire screen real estate.","title":"Set Columns for Images"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#set-cursor-position","text":"Any data written to the screen gets written to the current position of the cursor. This position can be adjusted. Two methods exist: * Specifying the page row and character column * Specifying the page row and pixel column","title":"Set Cursor Position"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#set-cursor-position-by-character-column","text":"This function is used to position the cursor on a specific page and character column. After this call, the next bytes written to the screen will be displayed at the new position of the cursor: oledExp.setCursor(row, column) Note: since the column cursor is not preserved after a column addressing change, the column addressing needs be set to 0-125 to using the oledExp.setTextColumns() function to properly display text before the cursor position is programmed. Arguments The row argument sets the page for the cursor, so the range is 0 to 7 The column argument sets the character column position of the cursor, the range is 0 to 20 Examples Set the cursor to the start of the last page: status = oledExp.setCursor(7, 0) Set the cursor to the middle of the 4th row: status = oledExp.setCursor(3, 10) Set the cursor to the starting position at the top-right status = oledExp.setCursor(0, 0) Write 'hello' at the top left of the screen, and then write 'hi there' on the middle of the 7th row: status = oledExp.setCursor(0, 0) status |= oledExp.write( hello ) status |= oledExp.setCursor(6, 10) status |= oledExp.write( hi there )","title":"Set Cursor Position by Character Column"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#set-cursor-position-by-pixel","text":"This function is used to position the cursor on a specific page and pixel row. This gives more fine grain control than setting by character column. After this call, the next bytes written to the screen will be displayed at the new position of the cursor: oledExp.setCursorByPixel(row, pixel) It allows for cursor positions that are not aligned with the 21 possible character columns. Arguments The row argument sets the page for the cursor, so the range is 0 to 7 The pixel argument sets the horizontal pixel position of the cursor, the range is 0 to 127 Examples Set the cursor to the start of the last page: status = oledExp.setCursorByPixel(7, 0) Set the cursor to the middle of the 4th row: status = oledExp.setCursorByPixel(3, 63) Set the cursor to the bottom-left status = oledExp.setCursorByPixel(7, 0) Write 'hello' at the top left of the screen, and then write 'hi there' on the middle of the 7th row: oledExp.setCursorByPixel(0, 0) oledExp.write( hello ) oledExp.setCursorByPixel(6, 63) oledExp.write( hi there )","title":"Set Cursor Position by Pixel"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#clear-the-screen","text":"To clear the screen and move the cursor to the starting position at the top-left of the screen: oledExp.clear()","title":"Clear the Screen"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#writing-text-to-the-display","text":"Listed below are the functions that write bytes, characters, strings, or images to the display.","title":"Writing Text to the Display"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#write-a-single-byte","text":"Write a single byte, eight vertical pixels, to the current position of the cursor: oledExp.writeByte(byte) Arguments The byte argument is the eight bits that will be written to the screen. The Least Significant Bit (LSB) in the byte corresponds to the top-most pixel in the column, the Most Significant Bit (MSB) corresponds to the bottom-most pixel in the column. After the byte is set, the cursor will automatically move to the next page column. Examples Draw the following pattern: status = oledExp.writeByte(0x01) # 0x01 = 0b 0000 0001 status |= oledExp.writeByte(0x03) # 0x03 = 0b 0000 0011 status |= oledExp.writeByte(0x07) # 0x07 = 0b 0000 0111 status |= oledExp.writeByte(0x0f) # 0x0f = 0b 0000 1111 status |= oledExp.writeByte(0x3f) # 0x3f = 0b 0011 1111","title":"Write a Single Byte"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#write-a-single-character","text":"Write a single character to the current position of the cursor: oledExp.writeChar(c) Arguments The c argument is the character that is to be written to the screen. Make sure to check the asciiTable dynamic array found in oled-exp.h , it defines the bitmap pattern of each allowed character. Any characters not found in the table will be ignored. Examples Write an 'O' status = oledExp.writeChar('O') Write an open bracket, an x, then a close bracket: status = oledExp.writeChar('(') status |= oledExp.writeChar('x') status |= oledExp.writeChar(')')","title":"Write a Single Character"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#write-a-string","text":"Write an entire string of characters, starting at the current position of the cursor: oledExp.write(msg) Underneath, this uses the oledWriteChar function to display characters and also implements newline functionality. The newline functionality is implemented by using a global variable to keep track where the cursor is in each row (I know... shameful...). Once the characters '\\' and 'n' are detected, the oledWrite function will print spaces to the display until it reaches the end of the current page and the cursor increments its position to the next page. Note: the column addressing will be set to 0-125 to properly display text during this call, at the end of the function it will be reset back to 0-127. Arguments The msg argument is the string to be written to the display. Any characters not found in the asciiTable array will be ignored. Examples Write 'Onion Omega': status = oledExp.write( Onion Omega ); Write 'Python rules!', then 'Especially on', and then 'the Omega' two lines below: status = oledExp.write( Python rules!\\nEspecially on\\n\\nthe Omega )","title":"Write a String"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#drawing-images-on-the-display","text":"The OLED Screen can also be used to display images. The Console can be used to convert existing images into a format that is compatible with the OLED Expansion and save the output to an Omega. Functions in the Python module can read the image data and display it on the OLED Expansion.","title":"Drawing Images on the Display"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#creating-image-files","text":"The Console OLED App can be used to create OLED Expansion compatible image files. Navigate to the Image tab of the OLED App: Once an image has been selected, a button and form will appear that allow you to save the OLED image file to your Omega: After the image name and location are selected, click the Save to Omega button.","title":"Creating Image Files"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#oled-image-file-details","text":"The OLED image files store the image data as 1024 bytes represented in hexadecimal. Each byte represents eight vertical pixels, with the first 128 bytes representing the columns in Page 0, the following 128 bytes representing the columns in Page 1, and so on. If this is unclear, see the Understanding the Display Section for details on how the display is addressed.","title":"OLED Image File Details"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#displaying-images-from-a-file","text":"Read the image data from a file and display on the OLED screen: status = oledExp.drawFromFile(file) Arguments The file argument is the path to the OLED image file. Examples Read an image file located at /root/image.lcd and draw it on the OLED display: status = oledExp.drawFromFile( /root/image.lcd )","title":"Displaying Images from a File"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#scrolling-the-display-contents","text":"The OLED can scroll the contents of the screen horizontally or upwards at a 45 degree angle. The displayed content will wrap around when it reaches the edge of the display.","title":"Scrolling the Display Contents"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#horizontal-scrolling","text":"Scroll all or part of the screen horizontally: oledExp.scroll(direction, scrollSpeed, startPage, stopPage) Arguments The direction argument indicates whether to scroll to the left or right: direction Value Scrolling Direction 0 Left 1 Right The scrollSpeed argument determines the number of \"frames\" between each scroll step: Scroll Speed scrollSpeed Argument OLED_EXP_SCROLL_SPEED_5_FRAMES 0 OLED_EXP_SCROLL_SPEED_64_FRAMES 1 OLED_EXP_SCROLL_SPEED_128_FRAMES 2 OLED_EXP_SCROLL_SPEED_256_FRAMES 3 OLED_EXP_SCROLL_SPEED_3_FRAMES 4 OLED_EXP_SCROLL_SPEED_4_FRAMES 5 OLED_EXP_SCROLL_SPEED_25_FRAMES 6 OLED_EXP_SCROLL_SPEED_2_FRAMES 7 The startPage argument defines at which page to start scrolling, and stopPage defines at which page to start the scroll. The range for both is 0 to 7 , and startPage must be less than stopPage. Examples Scroll the entire screen to the left: status = oledExp.scroll (0, 0, 0, 8-1) Quickly scroll the bottom half of the screen to the right: status = oledExp.scroll (1, 7, 4, 8-1) Slowly scroll pages 1 to 5: status = oledExp.scroll (1, 6, 1, 5)","title":"Horizontal Scrolling"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#diagonal-scrolling","text":"Scroll all or part of the screen diagonally upwards: oledExp.scrollDiagonal(direction, scrollSpeed, fixedRows, scrollRows, verticalOffset, startPage, stopPage) Arguments The direction argument indicates whether to scroll upwards to the left or right: direction Value Scrolling Direction 0 Upwards and Left 1 Upwards and Right The scrollSpeed argument determines the number of \"frames\" between each scroll step: Scroll Speed scrollSpeed Argument OLED_EXP_SCROLL_SPEED_5_FRAMES 0 OLED_EXP_SCROLL_SPEED_64_FRAMES 1 OLED_EXP_SCROLL_SPEED_128_FRAMES 2 OLED_EXP_SCROLL_SPEED_256_FRAMES 3 OLED_EXP_SCROLL_SPEED_3_FRAMES 4 OLED_EXP_SCROLL_SPEED_4_FRAMES 5 OLED_EXP_SCROLL_SPEED_25_FRAMES 6 OLED_EXP_SCROLL_SPEED_2_FRAMES 7 The fixedRows argument defines the amount of pixel rows, starting from the top, will not have vertical scrolling. The range is 0 to 63 . The scrollRows argument defines the amount of pixel rows, starting from the top, that will have vertical scrolling. The verticalOffset argument defines the number of vertical rows to scroll by each frame. The startPage argument defines at which page to start scrolling, and stopPage defines at which page to start the scroll. The range for both is 0 to 7 , and startPage must be less than stopPage. Examples Scroll the entire screen upwards to the left: status = oledExp.scrollDiagonal ( 0, 5, 0, 128-1, 1, 0, 8-1 ) Slowly Scroll the entire screen upwards to the right: status = oledExp.scrollDiagonal ( 1, 1, 0, 128-1, 1, 0, 8-1 )","title":"Diagonal Scrolling"},{"location":"tutorials/OnionWiki/Documentation/Libraries/OLED-Expansion-Python-Module/#stop-scrolling","text":"Disables all active scrolling: oledExp.scrollStop() Examples Scroll the entire screen to the left, then stop it: status = oledExp.scroll (0, 0, 0, 7) status |= oledExp.scrollStop(0)","title":"Stop Scrolling"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-C-Library/","text":"PWM Expansion Library The Onion Servo (PWM) Expansion library, libonionpwmexp is a dynamic C library that provides functions to setup the Servo Expansion and generate PWM signals. The library can be used in C and C++ programs. This library is also available as a module for use in Python . The module is called pwmExp and is part of the OmegaExpansion package. [[ TOC ]] Programming Flow After each power-cycle, the chip that controls the PWM Expansion must be programmed with an initialization sequence to enable the on-board oscillator so that PWM signals can be generated. After the initialization, the other functions can be used to generate PWM signals on specific channels or to change the PWM signal frequency. Additionally, it is possible to disable to the oscillator, disabling the generation of all PWM signals at once. Before generating new PWM signals, the initialization sequence must be run again. Channels The PWM Expansion has 16 channels that can generate distinct PWM signals. Note that they will all be running on the same frequency. PWM Signal Refresher Pulse Width Modulated signals can be described with duty cycle percentages and frequencies/periods: The duty cycle indicates what percentage of time a signal is on or high voltage. The frequency determines the overall period of the pulse. For a more detailed explanation, see the guide on using the Servo Expansion. The C Library The libonionpwmexp C library is a series of functions that perform all of the actions specified in the Programming Flow section . Source Code The source code can be found in the Onion i2c-exp-driver GitHub Repo . Using the C Library Header File To add the Onion PWM Expansion Library to your program, include the header file in your code: #include pwm-exp.h Library for Linker In your project's makefile, you will need to add the following dynamic libraries to the linker command: -loniondebug -lonioni2c -lonionpwmexp The dynamic libraries are stored in /usr/lib on the Omega. Example Code The libonionpwmexp library is used in the implementation of the pwm-exp command line tool. . The source code can be found here , on the i2c-exp-driver Onion GitHub Repo. Return Values All functions follow the same pattern with return values: If the function operation is successful, the return value will be EXIT_SUCCESS which is a macro defined as 0 in cstdlib.h. If the function operation is not successful, the function will return EXIT_FAILURE which is defined as 1 . A few reasons why the function might not be successful: * The specified device address cannot be found on the I2C bus (the Expansion is not plugged in) * The system I2C interface is currently in use elsewhere An error message will be printed that will give more information on the reason behind the failure. Functions Each of the main functions implemented in this module are described below. Initialization Function This function programs the initialization sequence on the Servo Expansion, after this step is completed, the functions to generate PWM signals or change the signal frequency can be used with success: int pwmDriverInit (); The oscillator will be setup to generate PWM signals at 50 Hz, the default for most servos. Examples Initialize the PWM Expansion: int status = pwmDriverInit(); Check for Initialization This function performs several reads to determine if the Servo Expansion has been initialized and the oscillator is running. int pwmCheckInit (int *bInitialized); It can be used to check if calling the Initialization function is required. Arguments The bInitialized argument is to be passed by reference and once the function executes, it will contain a value that corresponds whether or not the Expansion is currently in the initialized state. The value follows the table below: Initialization Status bInitialized Not Initialized 0 Initialized 1 Example Check if a Servo Expansion is initialized: int status, bInit; status = pwmCheckInit( bInit); if (bInit == 0) { printf( The Servo Expansion needs to be initialized\\n ); } else { printf( The Servo Expansion is up and running!\\n ); } Generate a PWM Signal Here we go! Use this function to generate a PWM signal on a specified channel: int pwmSetupDriver (int driverNum, float duty, float delay); Arguments The driverNum argument is detemines on which channel to generate the PWM signal. The accepted values are: Value Meaning 0 to 15 Matches the label on the Servo Expansion -1 Generates the same signal on all channels The duty argument specifies duty cycle percentage for the PWM signal. Accepted values are 0 to 100 . Decimal values are allowed. The delay argument specifies the percentage delay before the PWM signal goes high. Accepted values are 0 to 100 with decimal values being allowed. In normal use with servos this should be set to 0. Examples Set channel 0 to a PWM signal with a 50% duty cycle: int status; status = pwmSetupDriver(0, 50, 0.0f); Generate a 3.55% duty cycle PWM signal with a 45% delay on channel 7: int status; status = pwmSetupDriver(7, 3.55f, 45); Set channel 15 to always on: int status; status = pwmSetupDriver(15, 100, 0); Set channel 8 to always off: int status; status = pwmSetupDriver(8, 0, 0); Set all channels to a 15.65% duty cycle PWM signal: int status; status = pwmSetupDriver(-1, 15.65f, 0.0f); Set PWM Signal Frequency The oscillator can be reprogrammed to generate a variety of different frequencies: int pwmSetFrequency (float freq); This will change the frequency of the PWM signals generated on all of the channels. The oscillator can generate frequencies between 24 Hz and 1526 Hz, the default value is 50 Hz. Arguments The freq argument is a floating point number that specifies the frequency. The function will accept any input but the programmed frequency will be clamped between 24 Hz and 1526 Hz. Examples Change the frequency to 60 Hz and generate a 40% duty cycle signal on channel 14: int status = pwmSetFrequency (60.0f); status = pwmSetupDriver (14, 40, 0); Generate a signal on channel 13, change the frequency to 105.45 Hz, and generate a new signal on channel 13: int status = pwmSetupDriver (13, 99, 0); status = pwmSetFrequency (105.45f); status = pwmSetupDriver (13, 82, 0); Disabling the Oscillator The oscillator can also be disabled, automatically stopping all PWM signal generation: int pwmDisableChip (); This might be useful for disabling PWM signal-driven devices while not powering off the Omega. The initialization function will have to be run before new PWM signals can be generated.","title":"PWM Expansion Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-C-Library/#pwm-expansion-library","text":"The Onion Servo (PWM) Expansion library, libonionpwmexp is a dynamic C library that provides functions to setup the Servo Expansion and generate PWM signals. The library can be used in C and C++ programs. This library is also available as a module for use in Python . The module is called pwmExp and is part of the OmegaExpansion package. [[ TOC ]]","title":"PWM Expansion Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-C-Library/#programming-flow","text":"After each power-cycle, the chip that controls the PWM Expansion must be programmed with an initialization sequence to enable the on-board oscillator so that PWM signals can be generated. After the initialization, the other functions can be used to generate PWM signals on specific channels or to change the PWM signal frequency. Additionally, it is possible to disable to the oscillator, disabling the generation of all PWM signals at once. Before generating new PWM signals, the initialization sequence must be run again.","title":"Programming Flow"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-C-Library/#channels","text":"The PWM Expansion has 16 channels that can generate distinct PWM signals. Note that they will all be running on the same frequency.","title":"Channels"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-C-Library/#pwm-signal-refresher","text":"Pulse Width Modulated signals can be described with duty cycle percentages and frequencies/periods: The duty cycle indicates what percentage of time a signal is on or high voltage. The frequency determines the overall period of the pulse. For a more detailed explanation, see the guide on using the Servo Expansion.","title":"PWM Signal Refresher"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-C-Library/#the-c-library","text":"The libonionpwmexp C library is a series of functions that perform all of the actions specified in the Programming Flow section .","title":"The C Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-C-Library/#source-code","text":"The source code can be found in the Onion i2c-exp-driver GitHub Repo .","title":"Source Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-C-Library/#using-the-c-library","text":"Header File To add the Onion PWM Expansion Library to your program, include the header file in your code: #include pwm-exp.h Library for Linker In your project's makefile, you will need to add the following dynamic libraries to the linker command: -loniondebug -lonioni2c -lonionpwmexp The dynamic libraries are stored in /usr/lib on the Omega.","title":"Using the C Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-C-Library/#example-code","text":"The libonionpwmexp library is used in the implementation of the pwm-exp command line tool. . The source code can be found here , on the i2c-exp-driver Onion GitHub Repo.","title":"Example Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-C-Library/#return-values","text":"All functions follow the same pattern with return values: If the function operation is successful, the return value will be EXIT_SUCCESS which is a macro defined as 0 in cstdlib.h. If the function operation is not successful, the function will return EXIT_FAILURE which is defined as 1 . A few reasons why the function might not be successful: * The specified device address cannot be found on the I2C bus (the Expansion is not plugged in) * The system I2C interface is currently in use elsewhere An error message will be printed that will give more information on the reason behind the failure.","title":"Return Values"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-C-Library/#functions","text":"Each of the main functions implemented in this module are described below.","title":"Functions"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-C-Library/#initialization-function","text":"This function programs the initialization sequence on the Servo Expansion, after this step is completed, the functions to generate PWM signals or change the signal frequency can be used with success: int pwmDriverInit (); The oscillator will be setup to generate PWM signals at 50 Hz, the default for most servos. Examples Initialize the PWM Expansion: int status = pwmDriverInit();","title":"Initialization Function"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-C-Library/#check-for-initialization","text":"This function performs several reads to determine if the Servo Expansion has been initialized and the oscillator is running. int pwmCheckInit (int *bInitialized); It can be used to check if calling the Initialization function is required. Arguments The bInitialized argument is to be passed by reference and once the function executes, it will contain a value that corresponds whether or not the Expansion is currently in the initialized state. The value follows the table below: Initialization Status bInitialized Not Initialized 0 Initialized 1 Example Check if a Servo Expansion is initialized: int status, bInit; status = pwmCheckInit( bInit); if (bInit == 0) { printf( The Servo Expansion needs to be initialized\\n ); } else { printf( The Servo Expansion is up and running!\\n ); }","title":"Check for Initialization"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-C-Library/#generate-a-pwm-signal","text":"Here we go! Use this function to generate a PWM signal on a specified channel: int pwmSetupDriver (int driverNum, float duty, float delay); Arguments The driverNum argument is detemines on which channel to generate the PWM signal. The accepted values are: Value Meaning 0 to 15 Matches the label on the Servo Expansion -1 Generates the same signal on all channels The duty argument specifies duty cycle percentage for the PWM signal. Accepted values are 0 to 100 . Decimal values are allowed. The delay argument specifies the percentage delay before the PWM signal goes high. Accepted values are 0 to 100 with decimal values being allowed. In normal use with servos this should be set to 0. Examples Set channel 0 to a PWM signal with a 50% duty cycle: int status; status = pwmSetupDriver(0, 50, 0.0f); Generate a 3.55% duty cycle PWM signal with a 45% delay on channel 7: int status; status = pwmSetupDriver(7, 3.55f, 45); Set channel 15 to always on: int status; status = pwmSetupDriver(15, 100, 0); Set channel 8 to always off: int status; status = pwmSetupDriver(8, 0, 0); Set all channels to a 15.65% duty cycle PWM signal: int status; status = pwmSetupDriver(-1, 15.65f, 0.0f);","title":"Generate a PWM Signal"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-C-Library/#set-pwm-signal-frequency","text":"The oscillator can be reprogrammed to generate a variety of different frequencies: int pwmSetFrequency (float freq); This will change the frequency of the PWM signals generated on all of the channels. The oscillator can generate frequencies between 24 Hz and 1526 Hz, the default value is 50 Hz. Arguments The freq argument is a floating point number that specifies the frequency. The function will accept any input but the programmed frequency will be clamped between 24 Hz and 1526 Hz. Examples Change the frequency to 60 Hz and generate a 40% duty cycle signal on channel 14: int status = pwmSetFrequency (60.0f); status = pwmSetupDriver (14, 40, 0); Generate a signal on channel 13, change the frequency to 105.45 Hz, and generate a new signal on channel 13: int status = pwmSetupDriver (13, 99, 0); status = pwmSetFrequency (105.45f); status = pwmSetupDriver (13, 82, 0);","title":"Set PWM Signal Frequency"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-C-Library/#disabling-the-oscillator","text":"The oscillator can also be disabled, automatically stopping all PWM signal generation: int pwmDisableChip (); This might be useful for disabling PWM signal-driven devices while not powering off the Omega. The initialization function will have to be run before new PWM signals can be generated.","title":"Disabling the Oscillator"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Node-Module/","text":"PWM Expansion Node Addon The Onion Servo (PWM) Node Addon, pwm-node-addon is a wrapper around the libonionpwmexp dynamic C library that provides functions to setup the servo Expansion and generate PWM signals. [[ TOC ]] Programming Flow After each power-cycle, the chip that controls the PWM Expansion must be programmed with an initialization sequence to enable the on-board oscillator so that PWM signals can be generated. After the initialization, the other functions can be used to generate PWM signals on specific channels or to change the PWM signal frequency. Additionally, it is possible to disable to the oscillator, disabling the generation of all PWM signals at once. Before generating new PWM signals, the initialization sequence must be run again. Channels The PWM Expansion has 16 channels that can generate distinct PWM signals. Note that they will all be running on the same frequency. PWM Signal Refresher Pulse Width Modulated signals can be described with duty cycle percentages and frequencies/periods: The duty cycle indicates what percentage of time a signal is on or high voltage. The frequency determines the overall period of the pulse. For a more detailed explanation, see the guide on using the Servo Expansion . The Node Addon The pwm-exp-addon exposes a series of methods that perform all of the actions specified in the Programming Flow section. Install the Addon Install the addon on your Omega: opkg update opkg install pwm-exp-node NodeJS will need to be installed for Node programs to actually run: opkg install nodejs Importing the addon into your Node Script To use the addon within your script you have to import it into your node program as you would a module: var oledAddon = require( /usr/bin/pwm-node-addon ); Example Code Example code that uses the pwm-exp-node addon can be found here in the i2c-exp-node-addons Onion GitHub Repo. Return Values All of the functions will either return a 0 indicating success or 1 indicating failure. Calling Methods Methods are called in the following format. pwmAddon.method(); Replace method with your funcion of interest. Available Methods Refer to the table below for a list and brief description of available pwm methods. Method Inputs Description driverInit() none Initialize the pwm expansion for use setupDriver(int driverNum, float duty, float delay ) 0-15 or -1, 0-100, 0-100 Generates the specified pwm signal on the specified channel setFrequency(float freq) 24-1526 Sets the frequency for the oscillator chip disableChip() none Disables the oscillator chip and stops all pwm signals Usage Initialization Function This function programs the initialization sequence on the Servo Expansion, after this step is completed, the functions to generate PWM signals or change the signal frequency can be used with success: pwmAddon.driverInit(); Generate a PWM Signal Here we go! Use this function to generate a PWM signal on a specified channel: pwmAddon.setupDriver(int driverNum, float duty, float delay); Arguments The driverNum argument is detemines on which channel to generate the PWM signal. The accepted values are: Value Meaning 0-15 Matches the label on the Servo Expansion -1 Generates the same signal on all channels The duty argument specifies duty cycle percentage for the PWM signal. Accepted values are 0 to 100. Decimal values are allowed. The delay argument specifies the percentage delay before the PWM signal goes high. Accepted values are 0 to 100 with decimal values being allowed. In normal use with servos this should be set to 0. Examples Set channel 0 to a PWM signal with a 50% duty cycle: pwmAddon.setupDriver(0,50,0); Generate a 3.55% duty cycle PWM signal with a 45% delay on channel 7: pwmAddon.setupDriver(7, 3.55f, 45); Set channel 0 to a PWM signal with a 50% duty cycle: pwmAddon.setupDriver(15, 100, 0); Set channel 8 to always off: pwmAddon.setupDriver(8, 0, 0); Set all channels to a 15.65% duty cycle PWM signal: pwmAddon.setupDriver(-1, 15.65f, 0.0f); Set PWM Signal Frequency The oscillator can be reprogrammed to generate a variety of different frequencies: pwmAddon.setFrequency(float freq); This will change the frequency of the PWM signals generated on all of the channels. The oscillator can generate frequencies between 24 Hz and 1526 Hz, the default value is 50 Hz. Arguments The freq argument is a floating point number that specifies the frequency. The function will accept any input but the programmed frequency will be clamped between 24 Hz and 1526 Hz. Examples Change the frequency to 60 Hz and generate a 40% duty cycle signal on channel 14: pwmAddon.setFrequency(60); pwmAddon.setupDriver(14,40,0); Generate a signal on channel 13, change the frequency to 105.45 Hz, and generate a new signal on channel 13: pwmAddon.setupDriver(13,99,0); pwmAddon.setFrequency(105.45); pwmAddon.setupDriver(13,82,0); Disabling the Oscillator The oscillator can also be disabled, automatically stopping all PWM signal generation: pwmAddon.disableChip(); This might be useful for disabling PWM signal-driven devices while not powering off the Omega. The initialization function will have to be run before new PWM signals can be generated.","title":"**PWM Expansion Node Addon**"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Node-Module/#pwm-expansion-node-addon","text":"The Onion Servo (PWM) Node Addon, pwm-node-addon is a wrapper around the libonionpwmexp dynamic C library that provides functions to setup the servo Expansion and generate PWM signals. [[ TOC ]]","title":"PWM Expansion Node Addon"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Node-Module/#programming-flow","text":"After each power-cycle, the chip that controls the PWM Expansion must be programmed with an initialization sequence to enable the on-board oscillator so that PWM signals can be generated. After the initialization, the other functions can be used to generate PWM signals on specific channels or to change the PWM signal frequency. Additionally, it is possible to disable to the oscillator, disabling the generation of all PWM signals at once. Before generating new PWM signals, the initialization sequence must be run again.","title":"Programming Flow"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Node-Module/#channels","text":"The PWM Expansion has 16 channels that can generate distinct PWM signals. Note that they will all be running on the same frequency.","title":"Channels"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Node-Module/#pwm-signal-refresher","text":"Pulse Width Modulated signals can be described with duty cycle percentages and frequencies/periods: The duty cycle indicates what percentage of time a signal is on or high voltage. The frequency determines the overall period of the pulse. For a more detailed explanation, see the guide on using the Servo Expansion .","title":"PWM Signal Refresher"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Node-Module/#the-node-addon","text":"The pwm-exp-addon exposes a series of methods that perform all of the actions specified in the Programming Flow section.","title":"The Node Addon"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Node-Module/#install-the-addon","text":"Install the addon on your Omega: opkg update opkg install pwm-exp-node NodeJS will need to be installed for Node programs to actually run: opkg install nodejs","title":"Install the Addon"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Node-Module/#importing-the-addon-into-your-node-script","text":"To use the addon within your script you have to import it into your node program as you would a module: var oledAddon = require( /usr/bin/pwm-node-addon );","title":"Importing the addon into your Node Script"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Node-Module/#example-code","text":"Example code that uses the pwm-exp-node addon can be found here in the i2c-exp-node-addons Onion GitHub Repo.","title":"Example Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Node-Module/#return-values","text":"All of the functions will either return a 0 indicating success or 1 indicating failure.","title":"Return Values"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Node-Module/#calling-methods","text":"Methods are called in the following format. pwmAddon.method(); Replace method with your funcion of interest.","title":"Calling Methods"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Node-Module/#available-methods","text":"Refer to the table below for a list and brief description of available pwm methods. Method Inputs Description driverInit() none Initialize the pwm expansion for use setupDriver(int driverNum, float duty, float delay ) 0-15 or -1, 0-100, 0-100 Generates the specified pwm signal on the specified channel setFrequency(float freq) 24-1526 Sets the frequency for the oscillator chip disableChip() none Disables the oscillator chip and stops all pwm signals","title":"Available Methods"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Node-Module/#usage","text":"","title":"Usage"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Node-Module/#initialization-function","text":"This function programs the initialization sequence on the Servo Expansion, after this step is completed, the functions to generate PWM signals or change the signal frequency can be used with success: pwmAddon.driverInit();","title":"Initialization Function"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Node-Module/#generate-a-pwm-signal","text":"Here we go! Use this function to generate a PWM signal on a specified channel: pwmAddon.setupDriver(int driverNum, float duty, float delay); Arguments The driverNum argument is detemines on which channel to generate the PWM signal. The accepted values are: Value Meaning 0-15 Matches the label on the Servo Expansion -1 Generates the same signal on all channels The duty argument specifies duty cycle percentage for the PWM signal. Accepted values are 0 to 100. Decimal values are allowed. The delay argument specifies the percentage delay before the PWM signal goes high. Accepted values are 0 to 100 with decimal values being allowed. In normal use with servos this should be set to 0. Examples Set channel 0 to a PWM signal with a 50% duty cycle: pwmAddon.setupDriver(0,50,0); Generate a 3.55% duty cycle PWM signal with a 45% delay on channel 7: pwmAddon.setupDriver(7, 3.55f, 45); Set channel 0 to a PWM signal with a 50% duty cycle: pwmAddon.setupDriver(15, 100, 0); Set channel 8 to always off: pwmAddon.setupDriver(8, 0, 0); Set all channels to a 15.65% duty cycle PWM signal: pwmAddon.setupDriver(-1, 15.65f, 0.0f);","title":"Generate a PWM Signal"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Node-Module/#set-pwm-signal-frequency","text":"The oscillator can be reprogrammed to generate a variety of different frequencies: pwmAddon.setFrequency(float freq); This will change the frequency of the PWM signals generated on all of the channels. The oscillator can generate frequencies between 24 Hz and 1526 Hz, the default value is 50 Hz. Arguments The freq argument is a floating point number that specifies the frequency. The function will accept any input but the programmed frequency will be clamped between 24 Hz and 1526 Hz. Examples Change the frequency to 60 Hz and generate a 40% duty cycle signal on channel 14: pwmAddon.setFrequency(60); pwmAddon.setupDriver(14,40,0); Generate a signal on channel 13, change the frequency to 105.45 Hz, and generate a new signal on channel 13: pwmAddon.setupDriver(13,99,0); pwmAddon.setFrequency(105.45); pwmAddon.setupDriver(13,82,0);","title":"Set PWM Signal Frequency"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Node-Module/#disabling-the-oscillator","text":"The oscillator can also be disabled, automatically stopping all PWM signal generation: pwmAddon.disableChip(); This might be useful for disabling PWM signal-driven devices while not powering off the Omega. The initialization function will have to be run before new PWM signals can be generated.","title":"Disabling the Oscillator"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Python-Module/","text":"PWM Expansion Python Module The Onion PWM Expansion Python module, pwmExp is based on the C PWM Expansion Library . Using this module, you will be able to control the PWM Expansion from within your Python program. [[ TOC ]] Programming Flow After each power-cycle, the chip that controls the PWM Expansion must be programmed with an initialization sequence to enable the on-board oscillator so that PWM signals can be generated. After the initialization, the other functions can be used to generate PWM signals on specific channels or to change the PWM signal frequency. Additionally, it is possible to disable to the oscillator, disabling the generation of all PWM signals at once. Before generating new PWM signals, the initialization sequence must be run again. Channels The PWM Expansion has 16 channels that can generate distinct PWM signals. Note that they will all be running on the same frequency. PWM Signal Refresher Pulse Width Modulated signals can be described with duty cycle percentages and frequencies/periods: The duty cycle indicates what percentage of time a signal is on or high voltage. The frequency determines the overall period of the pulse. For a more detailed explanation, see the guide on using the Servo Expansion. The Python Module The pwmExp Python module in the OmegaExpansion package provides a wrapper around the C library functions. The functions are largely the same as their C counterparts, including the arguments and return values. Any differences from the C library will be explicitly mentioned below. Source Code The source code can be found in the Onion i2c-exp-driver GitHub Repo . Using the Python Module Installing the Module To install the Python module, run the following commands: opkg update opkg install python-light pyPwmExp This will install the module to /usr/lib/python2.7/OmegaExpansion/ Note: this only has to be done once. Using the Module To add the Onion PWM Expansion Module to your Python program, include the following in your code: from OmegaExpansion import pwmExp Example Code Example code that uses the pwmExp module can be found here , in the i2c-exp-driver Onion GitHub Repo. Return Values All functions follow the same pattern with return values: If the function operation is successful, the return value will be 0 . If the function operation is not successful, the function will return 1 . Functions Each of the main functions implemented in this module are described below. Initialization Function This function programs the initialization sequence on the Servo Expansion, after this step is completed, the functions to generate PWM signals or change the signal frequency can be used with success: pwmExp.driverInit() Examples Initialize the PWM Expansion: status = pwmExp.driverInit(); Check for Initialization This function performs several reads to determine if the Servo Expansion has been initialized and the oscillator is running: pwmExp.checkInit() The return value of the function indicates the Initialization Status: Return Value Initialization Status 0 Not Initialized 1 Initialized Example Check if the PWM Expansion is initialized: bInit = pwmExp.checkInit() if (bInit == 0): print 'The Servo Expansion needs to be initialized\\n' else: print 'The Servo Expansion is up and running!' } Generate a PWM Signal This function is used to generate a PWM singal on a specified channel: pwmExp.setupDriver(channel, duty, delay) Arguments The channel argument determines on which channel to generate the PWM signal. * 0 to 15 will select a specific channel * -1 will generate the same signal on all channels The duty argument specifies duty cycle percentage for the PWM signal. Accepted values are 0 to 100 . Decimal values are allowed. The delay argument specifies the percentage delay before the PWM signal goes high. Accepted values are 0 to 100 with decimal values being allowed. In normal use with servos this should be set to 0. Example Set channel 7 to 6.55% duty cycle: status = pwmExp.setupDriver(7, 6.55, 0) Set channel 14 to always on: status = pwmExp.setupDriver(14, 100, 0) Set all channels to 66.66% duty with a 9% delay: status = pwmExp.setupDriver(-1, 66.66, 9) Set PWM Signal Frequency The oscillator can be reprogrammed to generate a variety of different frequencies: pwmExp.setFrequency(frequency) This will change the frequency of the PWM signals generated on all of the channels. The oscillator can generate frequencies between 24 Hz and 1526 Hz, the default value is 50 Hz. Arguments The freq argument is a floating point number that specifies the frequency. The function will accept any input but the programmed frequency will be clamped between 24 Hz and 1526 Hz. Example Change the frequency to 60 Hz: status = pwmExp.setFrequency(60) Change the frequency to 92.23 Hz: status = pwmExp.setFrequency(92.23) Disabling the Oscillator The oscillator can also be disabled, automatically stopping all PWM signal generation: pwmExp.disableChip() This might be useful for disabling PWM signal-driven devices while not powering off the Omega. The initialization function will have to be run before new PWM signals can be generated. Example Disable the oscillator: status = pwmExp.disableChip()","title":"PWM Expansion Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Python-Module/#pwm-expansion-python-module","text":"The Onion PWM Expansion Python module, pwmExp is based on the C PWM Expansion Library . Using this module, you will be able to control the PWM Expansion from within your Python program. [[ TOC ]]","title":"PWM Expansion Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Python-Module/#programming-flow","text":"After each power-cycle, the chip that controls the PWM Expansion must be programmed with an initialization sequence to enable the on-board oscillator so that PWM signals can be generated. After the initialization, the other functions can be used to generate PWM signals on specific channels or to change the PWM signal frequency. Additionally, it is possible to disable to the oscillator, disabling the generation of all PWM signals at once. Before generating new PWM signals, the initialization sequence must be run again.","title":"Programming Flow"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Python-Module/#channels","text":"The PWM Expansion has 16 channels that can generate distinct PWM signals. Note that they will all be running on the same frequency.","title":"Channels"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Python-Module/#pwm-signal-refresher","text":"Pulse Width Modulated signals can be described with duty cycle percentages and frequencies/periods: The duty cycle indicates what percentage of time a signal is on or high voltage. The frequency determines the overall period of the pulse. For a more detailed explanation, see the guide on using the Servo Expansion.","title":"PWM Signal Refresher"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Python-Module/#the-python-module","text":"The pwmExp Python module in the OmegaExpansion package provides a wrapper around the C library functions. The functions are largely the same as their C counterparts, including the arguments and return values. Any differences from the C library will be explicitly mentioned below.","title":"The Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Python-Module/#source-code","text":"The source code can be found in the Onion i2c-exp-driver GitHub Repo .","title":"Source Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Python-Module/#using-the-python-module","text":"Installing the Module To install the Python module, run the following commands: opkg update opkg install python-light pyPwmExp This will install the module to /usr/lib/python2.7/OmegaExpansion/ Note: this only has to be done once. Using the Module To add the Onion PWM Expansion Module to your Python program, include the following in your code: from OmegaExpansion import pwmExp","title":"Using the Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Python-Module/#example-code","text":"Example code that uses the pwmExp module can be found here , in the i2c-exp-driver Onion GitHub Repo.","title":"Example Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Python-Module/#return-values","text":"All functions follow the same pattern with return values: If the function operation is successful, the return value will be 0 . If the function operation is not successful, the function will return 1 .","title":"Return Values"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Python-Module/#functions","text":"Each of the main functions implemented in this module are described below.","title":"Functions"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Python-Module/#initialization-function","text":"This function programs the initialization sequence on the Servo Expansion, after this step is completed, the functions to generate PWM signals or change the signal frequency can be used with success: pwmExp.driverInit() Examples Initialize the PWM Expansion: status = pwmExp.driverInit();","title":"Initialization Function"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Python-Module/#check-for-initialization","text":"This function performs several reads to determine if the Servo Expansion has been initialized and the oscillator is running: pwmExp.checkInit() The return value of the function indicates the Initialization Status: Return Value Initialization Status 0 Not Initialized 1 Initialized Example Check if the PWM Expansion is initialized: bInit = pwmExp.checkInit() if (bInit == 0): print 'The Servo Expansion needs to be initialized\\n' else: print 'The Servo Expansion is up and running!' }","title":"Check for Initialization"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Python-Module/#generate-a-pwm-signal","text":"This function is used to generate a PWM singal on a specified channel: pwmExp.setupDriver(channel, duty, delay) Arguments The channel argument determines on which channel to generate the PWM signal. * 0 to 15 will select a specific channel * -1 will generate the same signal on all channels The duty argument specifies duty cycle percentage for the PWM signal. Accepted values are 0 to 100 . Decimal values are allowed. The delay argument specifies the percentage delay before the PWM signal goes high. Accepted values are 0 to 100 with decimal values being allowed. In normal use with servos this should be set to 0. Example Set channel 7 to 6.55% duty cycle: status = pwmExp.setupDriver(7, 6.55, 0) Set channel 14 to always on: status = pwmExp.setupDriver(14, 100, 0) Set all channels to 66.66% duty with a 9% delay: status = pwmExp.setupDriver(-1, 66.66, 9)","title":"Generate a PWM Signal"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Python-Module/#set-pwm-signal-frequency","text":"The oscillator can be reprogrammed to generate a variety of different frequencies: pwmExp.setFrequency(frequency) This will change the frequency of the PWM signals generated on all of the channels. The oscillator can generate frequencies between 24 Hz and 1526 Hz, the default value is 50 Hz. Arguments The freq argument is a floating point number that specifies the frequency. The function will accept any input but the programmed frequency will be clamped between 24 Hz and 1526 Hz. Example Change the frequency to 60 Hz: status = pwmExp.setFrequency(60) Change the frequency to 92.23 Hz: status = pwmExp.setFrequency(92.23)","title":"Set PWM Signal Frequency"},{"location":"tutorials/OnionWiki/Documentation/Libraries/PWM-Expansion-Python-Module/#disabling-the-oscillator","text":"The oscillator can also be disabled, automatically stopping all PWM signal generation: pwmExp.disableChip() This might be useful for disabling PWM signal-driven devices while not powering off the Omega. The initialization function will have to be run before new PWM signals can be generated. Example Disable the oscillator: status = pwmExp.disableChip()","title":"Disabling the Oscillator"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-C-Library/","text":"Relay Expansion Library The Onion Relay Expansion library, libonionrelayexp is a dynamic C library that provides functions to setup, read, and change the state of the relays on the Relay Expansion. The library can be used in C and C++ programs. This library is also available as a module for use in Python . The module is called relayExp and is part of the OmegaExpansion package. [[ TOC ]] Programming Flow After each power-cycle, the chip that controls the Relay Expansion must be programmed with an initialization sequence. After the initialization, the relays can be turned on and off at will. I2C Device Address The Relay Expansion is the only expansion that has a configurable I2C device address. This was done so that up to eight Relay Expansions can be stacked on a single Omega, giving the user the ability to control 16 relay modules independently. The base device address is 0x20 , the dip switches control the offset added to the base address: * The 'Off' position for each switch is when the toggle is close to the numbers on the switch, or away from the relay modules. * The 'On' position is when the toggle is away from the numbers on the switch, or closer to the relay modules. The table below defines the relationship: Switch 1 Switch 2 Switch 3 I2C Device Address Off Off Off 0x27 Off Off On 0x26 Off On Off 0x25 Off On On 0x24 On Off Off 0x23 On Off On 0x22 On On Off 0x21 On On On 0x20 All of the functions in this library will require an address argument that specifies the offset to add to the base address of 0x20 The C Library The libonionrelayexp C library is a series of functions that perform all of the actions specified in the Programming Flow section . Source Code The source code can be found in the Onion i2c-exp-driver GitHub Repo . Using the C Library Header File To add the Onion Relay Expansion Library to your program, include the header file in your code: #include relay-exp.h Library for Linker In your project's makefile, you will need to add the following dynamic libraries to the linker command: -loniondebug -lonioni2c -lonionmcp23008 -lonionrelayexp The dynamic libraries are stored in /usr/lib on the Omega. Example Code The Onion Relay Expansion C library is used in the implementation of the relay-exp command line tool. . The source code can be found here , on the i2c-exp-driver Onion GitHub Repo. Return Values All functions follow the same pattern with return values: If the function operation is successful, the return value will be EXIT_SUCCESS which is a macro defined as 0 in cstdlib.h. If the function operation is not successful, the function will return EXIT_FAILURE which is defined as 1 . A few reasons why the function might not be successful: * The specified device address cannot be found on the I2C bus (the Expansion is not plugged in) * The system I2C interface is currently in use elsewhere An error message will be printed that will give more information on the reason behind the failure. Types This library has only one enumerated type defined and it is meant to easily define which relay module on the device is to be used. The enumerated type is defined as follows: typedef enum e_RelayDriverChannels { RELAY_EXP_CHANNEL0 = 0, RELAY_EXP_CHANNEL1, RELAY_EXP_NUM_CHANNELS, } ePwmDriverAddr; Functions Each of the main functions implemented in this library are described below. Initialization Function This function programs the initialization sequence on the Relay Expansion, after this step is completed, the functions to set the relay states can be used with success: int relayDriverInit (int addr); Arguments The addr argument is described above in the I2C Device Address section . Examples Initialize a Relay Expansion with all switches set to 0, meaning the I2C device address will be 0x27: int status = relayDriverInit(7); Initialize with switches set to on-off-on (device address: 0x22): int status = relayDriverInit(2); Initialize with switches set to on-on-off (device address: 0x24): int status = relayDriverInit(4); Check for Initialization This function performs several reads to determine if the Relay Expansion requires the initialization sequence to be programmed before the relay states can be changed. int relayCheckInit (int addr, int *bInitialized); Arguments The addr argument is described above in the I2C Device Address section . The bInitialized argument is to be passed by reference and once the function executes, it will contain a value that corresponds whether or not the Expansion is currently in the initialized state. The value follows the table below: Initialization Status bInitialized Not Initialized 0 Initialized 1 Example Check if a Relay Expansion (with all switches set to On) is initialized: int status, bInit; status = relayCheckInit(0, bInit); if (bInit == 0) { printf( The Relay Expansion needs to be initialized\\n ); } else { printf( The Relay Expansion is good to go!\\n ); } Set Relay State Finally the fun stuff! Use this function to change the state of the relay: int relaySetChannel (int addr, int channel, int state); Arguments The addr argument is described above in the I2C Device Address section . The channel argument selects the relay in question. See the diagram above for info on which channel corresponds to which relay. The state argument allows the user to select if the relay will be turned on or off: * 0 turn the relay OFF * 1 turn the relay ON Example Turn Relay0 on and Relay1 off (all switches are Off) status = relaySetChannel (7, 0, 1); status |= relaySetChannel (7, 1, 0); Set State for both Relays In the event that both relays need to be turned on or off at the same time: int relaySetAllChannels (int addr, int state); This is performed with a single register write so both relays should react at the same time. Arguments The addr argument is described above in the I2C Device Address section . The state argument allows the user to select if the relays will be turned on or off: * 0 turn the relays OFF * 1 turn the relays ON Example All switches are in Off position, turn both relays on, then turn Relay0 off, then send a command to turn both off: status = relaySetAllChannels (7, 1); status |= relaySetChannel (7, 0, 0); status |= relaySetAllChannels (7, 0); Read Relay State Use this function to read the state of a specific relay: int relayReadChannel (int addr, int channel, int *state); Arguments The addr argument is described above in the I2C Device Address section . The channel argument selects the relay in question. See the diagram above for info on which channel corresponds to which relay. The bInitialized argument is to be passed by reference and once the function executes, it will contain a value that corresponds whether or not the Expansion is currently in the initialized state. The value follows the table below: The state argument is to be passed by reference and once the function executes, it will containt the state of the relay in question: * 0 indicating the relay is OFF * 1 indicating the relay is ON Example Read the state of Relay 0 with all switches in Off position: int state, status; int channel = 0; status = relayReadChannel(7, channel, state); if (status == EXIT_SUCCESS) { if (state == 0) { printf( Relay%d is OFF! , channel); } else { printf( Relay%d is ON! , channel); } }","title":"Relay Expansion Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-C-Library/#relay-expansion-library","text":"The Onion Relay Expansion library, libonionrelayexp is a dynamic C library that provides functions to setup, read, and change the state of the relays on the Relay Expansion. The library can be used in C and C++ programs. This library is also available as a module for use in Python . The module is called relayExp and is part of the OmegaExpansion package. [[ TOC ]]","title":"Relay Expansion Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-C-Library/#programming-flow","text":"After each power-cycle, the chip that controls the Relay Expansion must be programmed with an initialization sequence. After the initialization, the relays can be turned on and off at will.","title":"Programming Flow"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-C-Library/#i2c-device-address","text":"The Relay Expansion is the only expansion that has a configurable I2C device address. This was done so that up to eight Relay Expansions can be stacked on a single Omega, giving the user the ability to control 16 relay modules independently. The base device address is 0x20 , the dip switches control the offset added to the base address: * The 'Off' position for each switch is when the toggle is close to the numbers on the switch, or away from the relay modules. * The 'On' position is when the toggle is away from the numbers on the switch, or closer to the relay modules. The table below defines the relationship: Switch 1 Switch 2 Switch 3 I2C Device Address Off Off Off 0x27 Off Off On 0x26 Off On Off 0x25 Off On On 0x24 On Off Off 0x23 On Off On 0x22 On On Off 0x21 On On On 0x20 All of the functions in this library will require an address argument that specifies the offset to add to the base address of 0x20","title":"I2C Device Address"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-C-Library/#the-c-library","text":"The libonionrelayexp C library is a series of functions that perform all of the actions specified in the Programming Flow section .","title":"The C Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-C-Library/#source-code","text":"The source code can be found in the Onion i2c-exp-driver GitHub Repo .","title":"Source Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-C-Library/#using-the-c-library","text":"Header File To add the Onion Relay Expansion Library to your program, include the header file in your code: #include relay-exp.h Library for Linker In your project's makefile, you will need to add the following dynamic libraries to the linker command: -loniondebug -lonioni2c -lonionmcp23008 -lonionrelayexp The dynamic libraries are stored in /usr/lib on the Omega.","title":"Using the C Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-C-Library/#example-code","text":"The Onion Relay Expansion C library is used in the implementation of the relay-exp command line tool. . The source code can be found here , on the i2c-exp-driver Onion GitHub Repo.","title":"Example Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-C-Library/#return-values","text":"All functions follow the same pattern with return values: If the function operation is successful, the return value will be EXIT_SUCCESS which is a macro defined as 0 in cstdlib.h. If the function operation is not successful, the function will return EXIT_FAILURE which is defined as 1 . A few reasons why the function might not be successful: * The specified device address cannot be found on the I2C bus (the Expansion is not plugged in) * The system I2C interface is currently in use elsewhere An error message will be printed that will give more information on the reason behind the failure.","title":"Return Values"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-C-Library/#types","text":"This library has only one enumerated type defined and it is meant to easily define which relay module on the device is to be used. The enumerated type is defined as follows: typedef enum e_RelayDriverChannels { RELAY_EXP_CHANNEL0 = 0, RELAY_EXP_CHANNEL1, RELAY_EXP_NUM_CHANNELS, } ePwmDriverAddr;","title":"Types"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-C-Library/#functions","text":"Each of the main functions implemented in this library are described below.","title":"Functions"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-C-Library/#initialization-function","text":"This function programs the initialization sequence on the Relay Expansion, after this step is completed, the functions to set the relay states can be used with success: int relayDriverInit (int addr); Arguments The addr argument is described above in the I2C Device Address section . Examples Initialize a Relay Expansion with all switches set to 0, meaning the I2C device address will be 0x27: int status = relayDriverInit(7); Initialize with switches set to on-off-on (device address: 0x22): int status = relayDriverInit(2); Initialize with switches set to on-on-off (device address: 0x24): int status = relayDriverInit(4);","title":"Initialization Function"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-C-Library/#check-for-initialization","text":"This function performs several reads to determine if the Relay Expansion requires the initialization sequence to be programmed before the relay states can be changed. int relayCheckInit (int addr, int *bInitialized); Arguments The addr argument is described above in the I2C Device Address section . The bInitialized argument is to be passed by reference and once the function executes, it will contain a value that corresponds whether or not the Expansion is currently in the initialized state. The value follows the table below: Initialization Status bInitialized Not Initialized 0 Initialized 1 Example Check if a Relay Expansion (with all switches set to On) is initialized: int status, bInit; status = relayCheckInit(0, bInit); if (bInit == 0) { printf( The Relay Expansion needs to be initialized\\n ); } else { printf( The Relay Expansion is good to go!\\n ); }","title":"Check for Initialization"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-C-Library/#set-relay-state","text":"Finally the fun stuff! Use this function to change the state of the relay: int relaySetChannel (int addr, int channel, int state); Arguments The addr argument is described above in the I2C Device Address section . The channel argument selects the relay in question. See the diagram above for info on which channel corresponds to which relay. The state argument allows the user to select if the relay will be turned on or off: * 0 turn the relay OFF * 1 turn the relay ON Example Turn Relay0 on and Relay1 off (all switches are Off) status = relaySetChannel (7, 0, 1); status |= relaySetChannel (7, 1, 0);","title":"Set Relay State"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-C-Library/#set-state-for-both-relays","text":"In the event that both relays need to be turned on or off at the same time: int relaySetAllChannels (int addr, int state); This is performed with a single register write so both relays should react at the same time. Arguments The addr argument is described above in the I2C Device Address section . The state argument allows the user to select if the relays will be turned on or off: * 0 turn the relays OFF * 1 turn the relays ON Example All switches are in Off position, turn both relays on, then turn Relay0 off, then send a command to turn both off: status = relaySetAllChannels (7, 1); status |= relaySetChannel (7, 0, 0); status |= relaySetAllChannels (7, 0);","title":"Set State for both Relays"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-C-Library/#read-relay-state","text":"Use this function to read the state of a specific relay: int relayReadChannel (int addr, int channel, int *state); Arguments The addr argument is described above in the I2C Device Address section . The channel argument selects the relay in question. See the diagram above for info on which channel corresponds to which relay. The bInitialized argument is to be passed by reference and once the function executes, it will contain a value that corresponds whether or not the Expansion is currently in the initialized state. The value follows the table below: The state argument is to be passed by reference and once the function executes, it will containt the state of the relay in question: * 0 indicating the relay is OFF * 1 indicating the relay is ON Example Read the state of Relay 0 with all switches in Off position: int state, status; int channel = 0; status = relayReadChannel(7, channel, state); if (status == EXIT_SUCCESS) { if (state == 0) { printf( Relay%d is OFF! , channel); } else { printf( Relay%d is ON! , channel); } }","title":"Read Relay State"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Node-Module/","text":"Relay Expansion Node Addon The Onion Relay Node Addon, relay-node-addon is a wrapper around the libonionrelayexp dynmic C library that provides functions to setup and control the relay expansion. The same library is available for use in C and Python programs. [[ TOC ]] Programming Flow After each power-cycle, the chip that controls the Relay Expansion must be programmed with an initialization sequence. After the initialization, the relays can be turned on and off at will. I2C Device Address The Relay Expansion is the only expansion that has a configurable I2C device address. This was done so that up to eight Relay Expansions can be stacked on a single Omega, giving the user the ability to control 16 relay modules independently. The base device address is 0x20, the dip switches control the offset added to the base address: The 'Off' position for each switch is when the toggle is close to the numbers on the switch, or away from the relay modules. The 'On' position is when the toggle is away from the numbers on the switch, or closer to the relay modules. The table below defines the relationship: Switch 1 Switch 2 Switch 3 I2C Device Address Off Off Off 0x27 Off Off On 0x26 Off On Off 0x25 Off On On 0x24 On Off Off 0x23 On Off On 0x22 On On Off 0x21 On On On 0x20 All of the functions in this library will require an address argument that specifies the offset to add to the base address of 0x20. Relay Module Select Each relay expansion has two channel which can be called using binary values. The Node Addon The relay-exp-addon exposes a series of methods that perform all of the actions specified in the Programming Flow section. Install the Addon Install the addon on your Omega: opkg update opkg install relay-exp-node NodeJS will need to be installed for Node programs to actually run: opkg install nodejs Importing the addon into your Node Script To use the addon within your script you have to import it into your node program as you would a module: var relayAddon = require( /usr/bin/relay-node-addon ); Example Code Example code that uses the relay-exp-node addon can be found here in the i2c-exp-node-addons Onion GitHub Repo. Return Values All of the functions will either return a 0 indicating success or 1 indicating failure. Calling Methods Methods are called in the following format. relayAddon.method(); Replace method with your funcion of interest. Available Methods Refer to the table below for a list and brief description of available relay methods. Methods Inputs Description init(int addr) 0-7 Initializes the selected relay expansion (0-7), relay states can be set after initialization. checkInit(int addr) 0-7 Checks initialization state of selected relay expansion. setChannel(int addr, int channel, int state) 0-7,0-1,0-1 Sets the selected channel on the selected relay to the specified states. setAllChannels(int addr, int state) 0-7,0-1 Sets all channels on the selected relay expansion to the specified state. Usage Each of the main functions implemented inthis library are described below. Initialization Function This function programs the initialization sequence on the Relay Expansion, after this step is completed, the functions to set the relay states can be used with success: relayAddon.init(int addr); Arguments The addr argument is described above in the I2C Device Address section. Examples Initialize a Relay Expansion with all switches set to 0, meaning the I2C device address will be 0x27: relayAddon.init(7); Initialize with switches set to on-off-on (device address: 0x22): relayAddon.init(2); Initialize with switches set to on-on-off (device address: 0x24): relayAddon.init(4); Check for Initialization This function performs several reads to determine if the Relay Expansion requires the initialization sequence to be programmed before the relay states can be changed. relayAddon.checkInit(int addr); Arguments The addr argument is described above in the I2C Device Address section. Example Check if a Relay Expansion(with all switches set to On) is initialized: relayAddon.checkInit(0); Set Relay State Finally the fun stuff! Use this function to change the sate of the relay: relayAddon.setChannel(int addr, int channel, int state); Arguments The addr argument is described above in the I2C Device Address section. The channel argument selects the relay channel in question. The state argument allows the user to select if the relay will be turned on or off: * 0 turn the relay OFF * 1 turn the relay ON Example Let's turn Relay0 on and Relay1 off (all switches Off) relayAddon.setChannel(7,0,1); relayAddon.setChannel(7,1,0); Set State for both Relays In the event that both relays need to be turned on or off at the same time: relayAddon.setAllChannels(int addr, int state); This is performed with a single register write so both relays should react at the same time. Arguments The addr argument is described above in the I2C Device Address section. The state argument allows the user to select if the relays will be turned on or off: * 0 turn the relays OFF * 1 turn the relays ON Example All switches are in Off position, turn both relays on, then turn Relay 0 off, the send a command to turn both off: relayAddon.setAllChannels(7,1); relayAddon.setChannel(7,0,0); relayAddon.setAllChannels(7,0);","title":"**Relay Expansion Node Addon**"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Node-Module/#relay-expansion-node-addon","text":"The Onion Relay Node Addon, relay-node-addon is a wrapper around the libonionrelayexp dynmic C library that provides functions to setup and control the relay expansion. The same library is available for use in C and Python programs. [[ TOC ]]","title":"Relay Expansion Node Addon"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Node-Module/#programming-flow","text":"After each power-cycle, the chip that controls the Relay Expansion must be programmed with an initialization sequence. After the initialization, the relays can be turned on and off at will.","title":"Programming Flow"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Node-Module/#i2c-device-address","text":"The Relay Expansion is the only expansion that has a configurable I2C device address. This was done so that up to eight Relay Expansions can be stacked on a single Omega, giving the user the ability to control 16 relay modules independently. The base device address is 0x20, the dip switches control the offset added to the base address: The 'Off' position for each switch is when the toggle is close to the numbers on the switch, or away from the relay modules. The 'On' position is when the toggle is away from the numbers on the switch, or closer to the relay modules. The table below defines the relationship: Switch 1 Switch 2 Switch 3 I2C Device Address Off Off Off 0x27 Off Off On 0x26 Off On Off 0x25 Off On On 0x24 On Off Off 0x23 On Off On 0x22 On On Off 0x21 On On On 0x20 All of the functions in this library will require an address argument that specifies the offset to add to the base address of 0x20.","title":"I2C Device Address"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Node-Module/#relay-module-select","text":"Each relay expansion has two channel which can be called using binary values.","title":"Relay Module Select"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Node-Module/#the-node-addon","text":"The relay-exp-addon exposes a series of methods that perform all of the actions specified in the Programming Flow section.","title":"The Node Addon"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Node-Module/#install-the-addon","text":"Install the addon on your Omega: opkg update opkg install relay-exp-node NodeJS will need to be installed for Node programs to actually run: opkg install nodejs","title":"Install the Addon"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Node-Module/#importing-the-addon-into-your-node-script","text":"To use the addon within your script you have to import it into your node program as you would a module: var relayAddon = require( /usr/bin/relay-node-addon );","title":"Importing the addon into your Node Script"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Node-Module/#example-code","text":"Example code that uses the relay-exp-node addon can be found here in the i2c-exp-node-addons Onion GitHub Repo.","title":"Example Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Node-Module/#return-values","text":"All of the functions will either return a 0 indicating success or 1 indicating failure.","title":"Return Values"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Node-Module/#calling-methods","text":"Methods are called in the following format. relayAddon.method(); Replace method with your funcion of interest.","title":"Calling Methods"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Node-Module/#available-methods","text":"Refer to the table below for a list and brief description of available relay methods. Methods Inputs Description init(int addr) 0-7 Initializes the selected relay expansion (0-7), relay states can be set after initialization. checkInit(int addr) 0-7 Checks initialization state of selected relay expansion. setChannel(int addr, int channel, int state) 0-7,0-1,0-1 Sets the selected channel on the selected relay to the specified states. setAllChannels(int addr, int state) 0-7,0-1 Sets all channels on the selected relay expansion to the specified state.","title":"Available Methods"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Node-Module/#usage","text":"Each of the main functions implemented inthis library are described below.","title":"Usage"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Node-Module/#initialization-function","text":"This function programs the initialization sequence on the Relay Expansion, after this step is completed, the functions to set the relay states can be used with success: relayAddon.init(int addr); Arguments The addr argument is described above in the I2C Device Address section. Examples Initialize a Relay Expansion with all switches set to 0, meaning the I2C device address will be 0x27: relayAddon.init(7); Initialize with switches set to on-off-on (device address: 0x22): relayAddon.init(2); Initialize with switches set to on-on-off (device address: 0x24): relayAddon.init(4);","title":"Initialization Function"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Node-Module/#check-for-initialization","text":"This function performs several reads to determine if the Relay Expansion requires the initialization sequence to be programmed before the relay states can be changed. relayAddon.checkInit(int addr); Arguments The addr argument is described above in the I2C Device Address section. Example Check if a Relay Expansion(with all switches set to On) is initialized: relayAddon.checkInit(0);","title":"Check for Initialization"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Node-Module/#set-relay-state","text":"Finally the fun stuff! Use this function to change the sate of the relay: relayAddon.setChannel(int addr, int channel, int state); Arguments The addr argument is described above in the I2C Device Address section. The channel argument selects the relay channel in question. The state argument allows the user to select if the relay will be turned on or off: * 0 turn the relay OFF * 1 turn the relay ON Example Let's turn Relay0 on and Relay1 off (all switches Off) relayAddon.setChannel(7,0,1); relayAddon.setChannel(7,1,0);","title":"Set Relay State"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Node-Module/#set-state-for-both-relays","text":"In the event that both relays need to be turned on or off at the same time: relayAddon.setAllChannels(int addr, int state); This is performed with a single register write so both relays should react at the same time. Arguments The addr argument is described above in the I2C Device Address section. The state argument allows the user to select if the relays will be turned on or off: * 0 turn the relays OFF * 1 turn the relays ON Example All switches are in Off position, turn both relays on, then turn Relay 0 off, the send a command to turn both off: relayAddon.setAllChannels(7,1); relayAddon.setChannel(7,0,0); relayAddon.setAllChannels(7,0);","title":"Set State for both Relays"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Python-Module/","text":"Relay Expansion Python Module The Onion PWM Expansion Python module, relayExp is based on the C Relay Expansion Library . Using this module, you will be able to control the Relay Expansion from within your Python program. [[ TOC ]] Programming Flow After each power-cycle, the chip that controls the Relay Expansion must be programmed with an initialization sequence. After the initialization, the relays can be turned on and off at will. I2C Device Address The Relay Expansion is the only expansion that has a configurable I2C device address. This was done so that up to eight Relay Expansions can be stacked on a single Omega, giving the user the ability to control 16 relay modules independently. The base device address is 0x20 , the dip switches control the offset added to the base address: * The 'Off' position for each switch is when the toggle is close to the numbers on the switch, or away from the relay modules. * The 'On' position is when the toggle is away from the numbers on the switch, or closer to the relay modules. The table below defines the relationship: Switch 1 Switch 2 Switch 3 I2C Device Address Off Off Off 0x27 Off Off On 0x26 Off On Off 0x25 Off On On 0x24 On Off Off 0x23 On Off On 0x22 On On Off 0x21 On On On 0x20 All of the functions in this library will require an address argument that specifies the offset to add to the base address of 0x20 The Python Module The relayExp Python Module in the OmegaExpansion package provides a wrapper around the C library functions. The functions are largely the same as their C counterparts, including the arguments and return values. Any differences from the C library will be explicitly mentioned below. Source Code The source code can be found in the Onion i2c-exp-driver GitHub Repo . Using the Python Module Installing the Module To install the Python module, run the following commands: opkg update opkg install python-light pyRelayExp This will install the module to /usr/lib/python2.7/OmegaExpansion/ Note: this only has to be done once. Using the Module To add the Onion Relay Expansion Module to your Python program, include the following in your code: from OmegaExpansion import relayExp The functions are largely the same as their C counterparts, including the arguments and return values. Any differences from the C library will be explicitly mentioned below. Example Code Example code that uses the relayExp module can be found here , in the i2c-exp-driver Onion GitHub Repo. The Channels The Relay Expansion has two channels, the image below describes how they are enumerated: Return Values All functions follow the same pattern with return values: If the function operation is successful, the return value will be 0 . If the function operation is not successful, the function will return 1 . Functions Each of the main functions implemented in this module are described below. Initialization Function To perform the initialization sequence on the Relay Expansion: relayExp.driverInit(addr) After this step is completed, the functions to set the relay states can be used with success. Arguments The addr argument is described above in the I2C Device Address section . Examples Initialize a Relay Expansion with all switches set to 0, meaning the I2C device address will be 0x27: status = relayExp.driverInit(7) Initialize with switches set to on-on-off (device address: 0x24): status = relayExp.driverInit(4) Check for Initialization Performs several reads to determine if the Relay Expansion requires the initialization sequence to be programmed before the relay states can be changed: relayExp.checkInit(addr) The return value of the function indicates the Initialization Status: Return Value Initialization Status 0 Not Initialized 1 Initialized Arguments The addr argument is described above in the I2C Device Address section . Example Check if a Relay Expansion (with switches set to Off-On-On) is initialized: bInit = relayExp.checkInit(1) if (bInit == 0): print 'The Relay Expansion needs to be initialized' else: print 'The Relay Expansion is good to go!' } Set Relay State Use this function to change the state of the relay: relayExp.setChannel(addr, channel, state) Arguments The addr argument is described above in the I2C Device Address section . The channel argument selects the relay in question. See the diagram above for info on which channel corresponds to which relay. The state argument allows the user to select if the relay will be turned on or off: * 0 turn the relay OFF * 1 turn the relay ON Example Set channel 0 to On (all switches are On): status = relayExp.setChannel(0, 0, 1) Set State for both Relays In the event that both relays need to be turned on or off at the same time: relayExp.setAllChannels(addr, state) This is performed with a single register write so both relays should react at the same time. Arguments The addr argument is described above in the I2C Device Address section . The state argument allows the user to select if the relays will be turned on or off: * 0 turn the relays OFF * 1 turn the relays ON Example Turn both channels off (all switches are On): status = relayExp.setAllChannels(0, 0) Turn both channels on (all switches are On): status = relayExp.setAllChannels(0, 1) Read Relay State Use this function to read the state of a specific relay: state = relayExp.readChannel(addr, channel) Arguments The addr argument is described above in the I2C Device Address section . The channel argument selects the relay in question. See the diagram above for info on which channel corresponds to which relay. Return Value The return value indicates the state of the relay channel in question: * 0 indicating the relay is OFF * 1 indicating the relay is ON Example Read the state of channel 0 (all switches are Off): value = relayExp.readChannel(0, 0) if value == 1: print 'Relay 0 is ON!' else: print 'Relay 0 is OFF'","title":"Relay Expansion Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Python-Module/#relay-expansion-python-module","text":"The Onion PWM Expansion Python module, relayExp is based on the C Relay Expansion Library . Using this module, you will be able to control the Relay Expansion from within your Python program. [[ TOC ]]","title":"Relay Expansion Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Python-Module/#programming-flow","text":"After each power-cycle, the chip that controls the Relay Expansion must be programmed with an initialization sequence. After the initialization, the relays can be turned on and off at will.","title":"Programming Flow"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Python-Module/#i2c-device-address","text":"The Relay Expansion is the only expansion that has a configurable I2C device address. This was done so that up to eight Relay Expansions can be stacked on a single Omega, giving the user the ability to control 16 relay modules independently. The base device address is 0x20 , the dip switches control the offset added to the base address: * The 'Off' position for each switch is when the toggle is close to the numbers on the switch, or away from the relay modules. * The 'On' position is when the toggle is away from the numbers on the switch, or closer to the relay modules. The table below defines the relationship: Switch 1 Switch 2 Switch 3 I2C Device Address Off Off Off 0x27 Off Off On 0x26 Off On Off 0x25 Off On On 0x24 On Off Off 0x23 On Off On 0x22 On On Off 0x21 On On On 0x20 All of the functions in this library will require an address argument that specifies the offset to add to the base address of 0x20","title":"I2C Device Address"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Python-Module/#the-python-module","text":"The relayExp Python Module in the OmegaExpansion package provides a wrapper around the C library functions. The functions are largely the same as their C counterparts, including the arguments and return values. Any differences from the C library will be explicitly mentioned below.","title":"The Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Python-Module/#source-code","text":"The source code can be found in the Onion i2c-exp-driver GitHub Repo .","title":"Source Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Python-Module/#using-the-python-module","text":"Installing the Module To install the Python module, run the following commands: opkg update opkg install python-light pyRelayExp This will install the module to /usr/lib/python2.7/OmegaExpansion/ Note: this only has to be done once. Using the Module To add the Onion Relay Expansion Module to your Python program, include the following in your code: from OmegaExpansion import relayExp The functions are largely the same as their C counterparts, including the arguments and return values. Any differences from the C library will be explicitly mentioned below.","title":"Using the Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Python-Module/#example-code","text":"Example code that uses the relayExp module can be found here , in the i2c-exp-driver Onion GitHub Repo.","title":"Example Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Python-Module/#the-channels","text":"The Relay Expansion has two channels, the image below describes how they are enumerated:","title":"The Channels"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Python-Module/#return-values","text":"All functions follow the same pattern with return values: If the function operation is successful, the return value will be 0 . If the function operation is not successful, the function will return 1 .","title":"Return Values"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Python-Module/#functions","text":"Each of the main functions implemented in this module are described below.","title":"Functions"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Python-Module/#initialization-function","text":"To perform the initialization sequence on the Relay Expansion: relayExp.driverInit(addr) After this step is completed, the functions to set the relay states can be used with success. Arguments The addr argument is described above in the I2C Device Address section . Examples Initialize a Relay Expansion with all switches set to 0, meaning the I2C device address will be 0x27: status = relayExp.driverInit(7) Initialize with switches set to on-on-off (device address: 0x24): status = relayExp.driverInit(4)","title":"Initialization Function"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Python-Module/#check-for-initialization","text":"Performs several reads to determine if the Relay Expansion requires the initialization sequence to be programmed before the relay states can be changed: relayExp.checkInit(addr) The return value of the function indicates the Initialization Status: Return Value Initialization Status 0 Not Initialized 1 Initialized Arguments The addr argument is described above in the I2C Device Address section . Example Check if a Relay Expansion (with switches set to Off-On-On) is initialized: bInit = relayExp.checkInit(1) if (bInit == 0): print 'The Relay Expansion needs to be initialized' else: print 'The Relay Expansion is good to go!' }","title":"Check for Initialization"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Python-Module/#set-relay-state","text":"Use this function to change the state of the relay: relayExp.setChannel(addr, channel, state) Arguments The addr argument is described above in the I2C Device Address section . The channel argument selects the relay in question. See the diagram above for info on which channel corresponds to which relay. The state argument allows the user to select if the relay will be turned on or off: * 0 turn the relay OFF * 1 turn the relay ON Example Set channel 0 to On (all switches are On): status = relayExp.setChannel(0, 0, 1)","title":"Set Relay State"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Python-Module/#set-state-for-both-relays","text":"In the event that both relays need to be turned on or off at the same time: relayExp.setAllChannels(addr, state) This is performed with a single register write so both relays should react at the same time. Arguments The addr argument is described above in the I2C Device Address section . The state argument allows the user to select if the relays will be turned on or off: * 0 turn the relays OFF * 1 turn the relays ON Example Turn both channels off (all switches are On): status = relayExp.setAllChannels(0, 0) Turn both channels on (all switches are On): status = relayExp.setAllChannels(0, 1)","title":"Set State for both Relays"},{"location":"tutorials/OnionWiki/Documentation/Libraries/Relay-Expansion-Python-Module/#read-relay-state","text":"Use this function to read the state of a specific relay: state = relayExp.readChannel(addr, channel) Arguments The addr argument is described above in the I2C Device Address section . The channel argument selects the relay in question. See the diagram above for info on which channel corresponds to which relay. Return Value The return value indicates the state of the relay channel in question: * 0 indicating the relay is OFF * 1 indicating the relay is ON Example Read the state of channel 0 (all switches are Off): value = relayExp.readChannel(0, 0) if value == 1: print 'Relay 0 is ON!' else: print 'Relay 0 is OFF'","title":"Read Relay State"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/","text":"SPI C Library The Onion SPI Library, libonionspi is a dynamic C library that provides functions to easily read from and write to devices communicating with the Omega over the GPIOs via the SPI protocol. The library can be used in C and C++ programs. Also available is a Python module, called onionSpi , that implements an SPI object using functions from the C Library. [[ TOC ]] The SPI Protocol The Serial Peripheral Interface (SPI) is a four-wire synchronous communication protocol, largely used to connect microprocessors or microcontrollers to sensors, memory, and other peripherals. The four signals are: SPI Signal Meaning SCK System Clock MOSI Master Out, Slave In - Data sent from the Master to the Slave MISO Master In, Slave Out - Data sent from the Slave to the Master CS/SS Chip Select/Slave Select The fact that it is a synchronous data bus means that one of the lines is a clock, used to synchronize the bits being sent on the data lines. The protocol is based on the Master-Slave architecture, so the Master will generate the System Clock and the Slave Select signals. In systems with multiple slaves, there will be multiple Slave Select signals. For more details on SPI, check out the Wikipedia article . Linux and SPI Linux systems usually control SPI devices through kernel drivers. However, it is also possible to generate the SPI protocol by bit-banging on connecte GPIOs. Bit-banging SPI is done through an adapter usually found at /dev/spidevX.Y where X is the device number and Y is the bus number. The Omega does not have an SPI bit-banging adapter setup by default, but this can be done by using the insmod command to insert a module into the kernel. The libonionspi library takes care of this for you so you don't have to deal with the intricacies. The C Library The libonionspi C library is a series of functions that implement SPI communication through the Linux device interface. Source Code The source code can be found in the Onion spi-gpio-driver GitHub Repo . Programming Flow Any program using the libonionspi library must first initialize the spiParams structure since it is used by all of the other library functions. Then, the spiParams structure members should be modified to suit the requirements of the use case. For example, the desired bus number and device ID should be programmed. Transactions will not work if the SPI adapter is not registered with the system, there are functions to check if an adapter is registered, and if not, to register the adapter. There is also a setup function to set additional parameters on the adapter. After the above is complete, the functions to transfer data using the SPI protocol can be used freely Using the Library Header File To add the Onion SPI Library to your C/C++ program, include the header file in your C code: #include onion-spi.h Library for Linker In your project's makefile, you will need to add the following dynamic libraries to the linker command: -loniondebug -lonionspi The dynamic libraries are stored in /usr/lib on the Omega. Example An example of how the libonionspi library is used can be found in the C implementation of the command line SPI tool. Additional example code can be found in the sections below. Return Values All functions follow the same pattern with return values: If the function operation is successful, the return value will be EXIT_SUCCESS which is a macro defined as 0 in cstdlib.h. If the function operation is not successful, the function will return EXIT_FAILURE which is defined as 1 . Any deviations from this rule will be specified below. Parameter Structure The spiParams structure is the central location that stores all of the data required by the library functions: struct spiParams { // bus number and device id int busNum; int deviceId; int speedInHz; // system clock frequency int delayInUs; // delay after last bit transferred before optionall deselecting the device before the next transfer int bitsPerWord; // how many bits are in a transfered word int mode; // SPI mode: can be 0 to 3 (0 is the most common) int modeBits; // additional SPI setup // Omega GPIO definitions int sckGpio; int mosiGpio; int misoGpio; int csGpio; }; SPI Mode Bits Additional SPI options can be setup on the interface by adding specific bits to the modeBits member of the structure. Macros exist to define which bits need to be set. The following macros are available: * SPI_3WIRE * Use three-wire implementation of SPI where the MOSI and MISO lines are shared on a single GPIO. * SPI_NO_CS * Modify the protocol to not generate a Chip-Select line. * SPI_CS_HIGH * Modify the protocol for an active-high Chip-Select line. * SPI_LSB_FIRST * Modify the protocol to transmit bytes LSB to MSB. * SPI_LOOP * Enable loopback mode where the slave is configured to transmit the received bytes. This can be achieved with a single master by wiring the MISO and MOSI lines together. To enable any one of the options, perform a bitwise or operation with the modeBits structure member: params.modeBits |= SPI_CS_HIGH; params.modeBits |= SPI_LSB_FIRST; Then run the spiSetupDevice() function to set the options in the adapter device. More information on this function in the sections below. Setup Functions The following functions serve to initialize the spiParams structure and do any SPI adapter setup required to actually perform transfers. Initialize the Parameter Structure: spiParamInit() There is a function to initialize the spiParams structure with acceptable default values: void spiParamInit (struct spiParams *params); The default settings: SPI Setting Programmed Default speedInHz 100000 Hz (100 kHz) delayInUs 0 bitsPerWord 0 (Corresponds to 8 bits per word) mode SPI Mode 0 Sets the SPI lines to the following GPIOs: SPI Signal Omega Gpio SCK 6 MOSI 18 MISO 1 CS/SS 7 Arguments The params argument should be the structure you want to initialize passed by reference. Check if SPI Device is Mapped: spiCheckDevice() Performs a check to see if an SPI device with the specified bus number and device ID is mapped: int spiCheckDevice (int busNum, int devId, int printSeverity); Return Value If the SPI device adapter is found, the function returns EXIT_SUCCESS , a macro mapped to 0 If the SPI device adapter is not found , the function returns EXIT_SUCCESS Arguments The busNum and devId specify the bus number and device ID of the adapter, respectively. The print severity refers to the Onion Debug Library verbosity level. For now set to ONION_SEVERITY_DEBUG_EXTRA for no additional messages printed. More info on this to come. Examples To check if a device on bus 1 with device ID 2 is registered, and print out a message based on the result: int status; status = spiCheckDevice(1, 2, ONION_SEVERITY_DEBUG_EXTRA); if (status == EXIT_SUCCESS) { printf( SPI Device is mapped.\\n ); } else { printf( WARNING: SPI Device NOT mapped!\\n ); } Register SPI Device: spiRegisterDevice() This function will register an SPI device with the bus number, device ID, and other SPI parameters as specified in the parameter structure: int spiRegisterDevice (struct spiParams *params); It will first check if a device with the specified bus number and device ID is already registered. If it is, it will just return EXIT_SUCCESS . If not, it will attempt to register the SPI device adapter by inserting an SPI-gpio module into the kernel. If this operation is successful, the function will return EXIT_SUCCESS , if not, EXIT_FAILURE is returned. The function uses the following information to register the device: * The bus number * The device ID * SPI mode * The SPI speed * The GPIO for the SCK line * The GPIO for the MOSI line * The GPIO for the MISO line * The GPIO for the CS line Example A short example showing how to register an SPI device adapter: int status; struct spiParams params; // initialize the SPI parameters spiParamInit( params); // set the desired bus number and device id params.busNum = 0; params.devId = 1; // change the CS line to use GPIO23 params.csGpio = 23; // register the device status = spiRegisterDevice( params); Setup SPI Device: spiSetupDevice() This function will setup additional SPI parameters on the device adapter int spiSetupDevice (struct spiParams *params); It will setup the following SPI parameters: * The maximum speed of the link * The number of bits per word * Additional mode information, see section on additional mode information above Communication Functions Once a device adapter is registered, the functions below can be used to read from and write data to the device via SPI. Transferring Data: spiTransfer() This is the function that implements all data transfers using the SPI protocol: int spiTransfer (struct spiParams *params, uint8_t *txBuffer, uint8_t *rxBuffer, int bytes); Arguments The params spiParams structure holds all of the relevant SPI information. The txBuffer argument will hold the data to be transferred via SPI. The rxBuffer argument will be populated by data received during the SPI transfer. And finally, the bytes argument indicates the number of bytes being transferred. Note that the txBuffer and rxBuffer need to be allocated to at least this size. Example Code: Reading a Byte The following example code uses the SPI protocol to read a byte of data from a specific address on an SPI device: void SpiReadValue(int addr) { int status, size; uint8_t *txBuffer; uint8_t *rxBuffer; struct spiParams params; // initialize the SPI parameters and set the bus number and device ID spiParamInit( params); params.busNum = 0; params.deviceId = 1; // set the transmission size and allocate memory for the buffers size = 1; txBuffer = (uint8_t*)malloc(sizeof(uint8_t) * size); rxBuffer = (uint8_t*)malloc(sizeof(uint8_t) * size); // assign the register address to the transmission buffer *txBuffer = (uint8_t)addr; // invoke the SPI transfer status = spiTransfer( params, txBuffer, rxBuffer, size); // rxBuffer now contains the data read through the SPI interface printf( SPI Read from addr 0x%02x: 0x%02x\\n , addr, *rxBuffer); // clean-up free(txBuffer); free(rxBuffer); } During the SPI transfer, the SPI Master (the Omega) will send the contents of the transmission buffer, in this case, the address from which to read. The slave device will respond with a value that corresponds to the register address, this value will be populated into the receive buffer. In this case, the size variable refers to the number of bytes to be read from the SPI device. Before this function will work, the SPI device adapter needs to be registered, check out the section above . Some devices require specific bit-wise operations on the address to indicate a read operation. Most common are: * A bitwise shift to the left * Setting a specific bit to 1 to indicate a read Refer to the datasheet of your device for specifics. Example Code: Writing a Value This example uses the SPI protocol to write a byte of data to a specific address on an SPI device: void SpiWriteValue(int addr, int value) { int status, size; uint8_t *txBuffer; uint8_t *rxBuffer; struct spiParams params; // initialize the SPI parameters and set the bus number and device ID spiParamInit( params); params.busNum = 0; params.deviceId = 1; // set the transmission size and allocate memory for the buffers size = 2; txBuffer = (uint8_t*)malloc(sizeof(uint8_t) * size); rxBuffer = (uint8_t*)malloc(sizeof(uint8_t) * size); // assign the register address and data to be written to the transmission buffer txBuffer[0] = (uint8_t)addr; txBuffer[1] = (uint8_t)value; // invoke the SPI transfer status = spiTransfer( params, txBuffer, rxBuffer, size); // data has been written // any response is now in rxBuffer (usually don't get a response from a write operation so it should be empty) printf( SPI Write to addr 0x%02x: 0x%02x\\n , txBuffer[0], txBuffer[1] ); // clean-up free(txBuffer); free(rxBuffer); } In this case, the SPI Master will first send the register address where the write is to be performed, and then the value to be written. Usually the SPI Slave will not send a response, however, the spiTransfer() function still requires a buffer to be passed in order to work properly. Example Code: Writing Several Values Some devices allow/require the user to write a stream of data with no address, this can be accomplished using the spiTransfer() function as well: void SpiWriteValues(int addr, int* data, int size) { int status; uint8_t *txBuffer; uint8_t *rxBuffer; struct spiParams params; // initialize the SPI parameters and set the bus number and device ID spiParamInit( params); params.busNum = 0; params.deviceId = 1; // allocate memory for the buffers based on input data size txBuffer = (uint8_t*)malloc(sizeof(uint8_t) * size); rxBuffer = (uint8_t*)malloc(sizeof(uint8_t) * size); // fill the transmission buffer with the data for (i = 0; i size; i++) { txBuffer[i] = (uint8_t)data[i]; } // invoke the SPI transfer status = spiTransfer( params, txBuffer, rxBuffer, size); // data has been written // any response is now in rxBuffer (usually don't get a response from a write operation so it should be empty) printf( SPI: wrote a %d bytes of data to device\\n , size ); // clean-up free(txBuffer); free(rxBuffer); } Additional Functions The spiTransfer() is all that's required to perform reads and writes using SPI. However, two additional functions are provided to perform reads and writes. Internally, they both use the spiTransfer() function, but they provide a slightly simpler interface. Reading Data: spiRead() This function can be used to perform a register read: int spiRead(struct spiParams *params, int addr, uint8_t *rdBuffer, int bytes); It can read a specified number of bytes from a specified address. The limitation is that the address can only be a single byte. Use spiTransfer() if your use-case requires more than 8-bits for the address. Arguments The params spiParams structure holds all of the relevant SPI information. The addr argument is the 8-bit address from which to read. The rdBuffer argument will be populated by data received during the SPI transfer. And finally, the bytes argument indicates the number of bytes being read. Note that the rdBuffer needs to be allocated to at least this size. Example Code The following function will read two bytes from the specified address, the data will be stored in rdBuffer : void SpiReadValue2(int addr) { int status, size; uint8_t *rdBuffer; struct spiParams params; // initialize the SPI parameters and set the bus number and device ID spiParamInit( params); params.busNum = 0; params.deviceId = 1; // set the transmission size and allocate memory for the buffers size = 2; rdBuffer = (uint8_t*)malloc(sizeof(uint8_t) * size); // invoke the SPI read status = spiRead( params, addr, rdBuffer, size); // rdBuffer now contains the data read through the SPI interface printf( SPI Read from addr 0x%02x: 0x%02x, 0x%02x\\n , addr, rdBuffer[0], rdBuffer[1]); // clean-up free(rdBuffer); } In essence, this simplifies the use of the spiTransfer() for read scenarios. Note that this function has not been tested as thoroughly as the spiTransfer() function. Reading Data: spiWrite() This function can be used to perform a register write: int spiWrite(struct spiParams *params, int addr, uint8_t *wrBuffer, int bytes); It will write a specified number of bytes to a specified address. The limitation is that the address can only be a single byte. Use spiTransfer() if your use-case requires more than 8-bits for the address. Arguments The params spiParams structure holds all of the relevant SPI information. The addr argument is the 8-bit address on which to perform the write The wrBuffer argument holds the data to be transmitted during the SPI transfer. And finally, the bytes argument indicates the number of bytes being written. Note that the wdBuffer needs to be allocated to at least this size. Example Code The following code will write a byte to the specified address, the data will be stored in rdBuffer : void SpiWriteValue2(int addr, int value) { int status, size; uint8_t *wrBuffer; struct spiParams params; // initialize the SPI parameters and set the bus number and device ID spiParamInit( params); params.busNum = 0; params.deviceId = 1; // set the transmission size and allocate memory for the buffers size = 1; wrBuffer = (uint8_t*)malloc(sizeof(uint8_t) * size); // put the value to be written in the wrBuffer *wrBuffer = (uint8_t)value; // invoke the SPI read status = spiWrite( params, addr, wrBuffer, size); // data in wrBuffer has been written to the SPI device printf( SPI Write to addr 0x%02x: 0x%02x\\n , addr, *wrBuffer ); // clean-up free(wrBuffer); } This function simplifies the use of spiTransfer() for scenarios where SPI is used to write to a register. Note that this function has not been tested as thoroughly as the spiTransfer() function.","title":"SPI C Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#spi-c-library","text":"The Onion SPI Library, libonionspi is a dynamic C library that provides functions to easily read from and write to devices communicating with the Omega over the GPIOs via the SPI protocol. The library can be used in C and C++ programs. Also available is a Python module, called onionSpi , that implements an SPI object using functions from the C Library. [[ TOC ]]","title":"SPI C Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#the-spi-protocol","text":"The Serial Peripheral Interface (SPI) is a four-wire synchronous communication protocol, largely used to connect microprocessors or microcontrollers to sensors, memory, and other peripherals. The four signals are: SPI Signal Meaning SCK System Clock MOSI Master Out, Slave In - Data sent from the Master to the Slave MISO Master In, Slave Out - Data sent from the Slave to the Master CS/SS Chip Select/Slave Select The fact that it is a synchronous data bus means that one of the lines is a clock, used to synchronize the bits being sent on the data lines. The protocol is based on the Master-Slave architecture, so the Master will generate the System Clock and the Slave Select signals. In systems with multiple slaves, there will be multiple Slave Select signals. For more details on SPI, check out the Wikipedia article .","title":"The SPI Protocol"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#linux-and-spi","text":"Linux systems usually control SPI devices through kernel drivers. However, it is also possible to generate the SPI protocol by bit-banging on connecte GPIOs. Bit-banging SPI is done through an adapter usually found at /dev/spidevX.Y where X is the device number and Y is the bus number. The Omega does not have an SPI bit-banging adapter setup by default, but this can be done by using the insmod command to insert a module into the kernel. The libonionspi library takes care of this for you so you don't have to deal with the intricacies.","title":"Linux and SPI"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#the-c-library","text":"The libonionspi C library is a series of functions that implement SPI communication through the Linux device interface.","title":"The C Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#source-code","text":"The source code can be found in the Onion spi-gpio-driver GitHub Repo .","title":"Source Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#programming-flow","text":"Any program using the libonionspi library must first initialize the spiParams structure since it is used by all of the other library functions. Then, the spiParams structure members should be modified to suit the requirements of the use case. For example, the desired bus number and device ID should be programmed. Transactions will not work if the SPI adapter is not registered with the system, there are functions to check if an adapter is registered, and if not, to register the adapter. There is also a setup function to set additional parameters on the adapter. After the above is complete, the functions to transfer data using the SPI protocol can be used freely","title":"Programming Flow"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#using-the-library","text":"Header File To add the Onion SPI Library to your C/C++ program, include the header file in your C code: #include onion-spi.h Library for Linker In your project's makefile, you will need to add the following dynamic libraries to the linker command: -loniondebug -lonionspi The dynamic libraries are stored in /usr/lib on the Omega.","title":"Using the Library"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#example","text":"An example of how the libonionspi library is used can be found in the C implementation of the command line SPI tool. Additional example code can be found in the sections below.","title":"Example"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#return-values","text":"All functions follow the same pattern with return values: If the function operation is successful, the return value will be EXIT_SUCCESS which is a macro defined as 0 in cstdlib.h. If the function operation is not successful, the function will return EXIT_FAILURE which is defined as 1 . Any deviations from this rule will be specified below.","title":"Return Values"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#parameter-structure","text":"The spiParams structure is the central location that stores all of the data required by the library functions: struct spiParams { // bus number and device id int busNum; int deviceId; int speedInHz; // system clock frequency int delayInUs; // delay after last bit transferred before optionall deselecting the device before the next transfer int bitsPerWord; // how many bits are in a transfered word int mode; // SPI mode: can be 0 to 3 (0 is the most common) int modeBits; // additional SPI setup // Omega GPIO definitions int sckGpio; int mosiGpio; int misoGpio; int csGpio; };","title":"Parameter Structure"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#spi-mode-bits","text":"Additional SPI options can be setup on the interface by adding specific bits to the modeBits member of the structure. Macros exist to define which bits need to be set. The following macros are available: * SPI_3WIRE * Use three-wire implementation of SPI where the MOSI and MISO lines are shared on a single GPIO. * SPI_NO_CS * Modify the protocol to not generate a Chip-Select line. * SPI_CS_HIGH * Modify the protocol for an active-high Chip-Select line. * SPI_LSB_FIRST * Modify the protocol to transmit bytes LSB to MSB. * SPI_LOOP * Enable loopback mode where the slave is configured to transmit the received bytes. This can be achieved with a single master by wiring the MISO and MOSI lines together. To enable any one of the options, perform a bitwise or operation with the modeBits structure member: params.modeBits |= SPI_CS_HIGH; params.modeBits |= SPI_LSB_FIRST; Then run the spiSetupDevice() function to set the options in the adapter device. More information on this function in the sections below.","title":"SPI Mode Bits"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#setup-functions","text":"The following functions serve to initialize the spiParams structure and do any SPI adapter setup required to actually perform transfers.","title":"Setup Functions"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#initialize-the-parameter-structure-spiparaminit","text":"There is a function to initialize the spiParams structure with acceptable default values: void spiParamInit (struct spiParams *params); The default settings: SPI Setting Programmed Default speedInHz 100000 Hz (100 kHz) delayInUs 0 bitsPerWord 0 (Corresponds to 8 bits per word) mode SPI Mode 0 Sets the SPI lines to the following GPIOs: SPI Signal Omega Gpio SCK 6 MOSI 18 MISO 1 CS/SS 7 Arguments The params argument should be the structure you want to initialize passed by reference.","title":"Initialize the Parameter Structure: spiParamInit()"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#check-if-spi-device-is-mapped-spicheckdevice","text":"Performs a check to see if an SPI device with the specified bus number and device ID is mapped: int spiCheckDevice (int busNum, int devId, int printSeverity); Return Value If the SPI device adapter is found, the function returns EXIT_SUCCESS , a macro mapped to 0 If the SPI device adapter is not found , the function returns EXIT_SUCCESS Arguments The busNum and devId specify the bus number and device ID of the adapter, respectively. The print severity refers to the Onion Debug Library verbosity level. For now set to ONION_SEVERITY_DEBUG_EXTRA for no additional messages printed. More info on this to come. Examples To check if a device on bus 1 with device ID 2 is registered, and print out a message based on the result: int status; status = spiCheckDevice(1, 2, ONION_SEVERITY_DEBUG_EXTRA); if (status == EXIT_SUCCESS) { printf( SPI Device is mapped.\\n ); } else { printf( WARNING: SPI Device NOT mapped!\\n ); }","title":"Check if SPI Device is Mapped: spiCheckDevice()"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#register-spi-device-spiregisterdevice","text":"This function will register an SPI device with the bus number, device ID, and other SPI parameters as specified in the parameter structure: int spiRegisterDevice (struct spiParams *params); It will first check if a device with the specified bus number and device ID is already registered. If it is, it will just return EXIT_SUCCESS . If not, it will attempt to register the SPI device adapter by inserting an SPI-gpio module into the kernel. If this operation is successful, the function will return EXIT_SUCCESS , if not, EXIT_FAILURE is returned. The function uses the following information to register the device: * The bus number * The device ID * SPI mode * The SPI speed * The GPIO for the SCK line * The GPIO for the MOSI line * The GPIO for the MISO line * The GPIO for the CS line Example A short example showing how to register an SPI device adapter: int status; struct spiParams params; // initialize the SPI parameters spiParamInit( params); // set the desired bus number and device id params.busNum = 0; params.devId = 1; // change the CS line to use GPIO23 params.csGpio = 23; // register the device status = spiRegisterDevice( params);","title":"Register SPI Device: spiRegisterDevice()"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#setup-spi-device-spisetupdevice","text":"This function will setup additional SPI parameters on the device adapter int spiSetupDevice (struct spiParams *params); It will setup the following SPI parameters: * The maximum speed of the link * The number of bits per word * Additional mode information, see section on additional mode information above","title":"Setup SPI Device: spiSetupDevice()"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#communication-functions","text":"Once a device adapter is registered, the functions below can be used to read from and write data to the device via SPI.","title":"Communication Functions"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#transferring-data-spitransfer","text":"This is the function that implements all data transfers using the SPI protocol: int spiTransfer (struct spiParams *params, uint8_t *txBuffer, uint8_t *rxBuffer, int bytes); Arguments The params spiParams structure holds all of the relevant SPI information. The txBuffer argument will hold the data to be transferred via SPI. The rxBuffer argument will be populated by data received during the SPI transfer. And finally, the bytes argument indicates the number of bytes being transferred. Note that the txBuffer and rxBuffer need to be allocated to at least this size.","title":"Transferring Data: spiTransfer()"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#example-code-reading-a-byte","text":"The following example code uses the SPI protocol to read a byte of data from a specific address on an SPI device: void SpiReadValue(int addr) { int status, size; uint8_t *txBuffer; uint8_t *rxBuffer; struct spiParams params; // initialize the SPI parameters and set the bus number and device ID spiParamInit( params); params.busNum = 0; params.deviceId = 1; // set the transmission size and allocate memory for the buffers size = 1; txBuffer = (uint8_t*)malloc(sizeof(uint8_t) * size); rxBuffer = (uint8_t*)malloc(sizeof(uint8_t) * size); // assign the register address to the transmission buffer *txBuffer = (uint8_t)addr; // invoke the SPI transfer status = spiTransfer( params, txBuffer, rxBuffer, size); // rxBuffer now contains the data read through the SPI interface printf( SPI Read from addr 0x%02x: 0x%02x\\n , addr, *rxBuffer); // clean-up free(txBuffer); free(rxBuffer); } During the SPI transfer, the SPI Master (the Omega) will send the contents of the transmission buffer, in this case, the address from which to read. The slave device will respond with a value that corresponds to the register address, this value will be populated into the receive buffer. In this case, the size variable refers to the number of bytes to be read from the SPI device. Before this function will work, the SPI device adapter needs to be registered, check out the section above . Some devices require specific bit-wise operations on the address to indicate a read operation. Most common are: * A bitwise shift to the left * Setting a specific bit to 1 to indicate a read Refer to the datasheet of your device for specifics.","title":"Example Code: Reading a Byte"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#example-code-writing-a-value","text":"This example uses the SPI protocol to write a byte of data to a specific address on an SPI device: void SpiWriteValue(int addr, int value) { int status, size; uint8_t *txBuffer; uint8_t *rxBuffer; struct spiParams params; // initialize the SPI parameters and set the bus number and device ID spiParamInit( params); params.busNum = 0; params.deviceId = 1; // set the transmission size and allocate memory for the buffers size = 2; txBuffer = (uint8_t*)malloc(sizeof(uint8_t) * size); rxBuffer = (uint8_t*)malloc(sizeof(uint8_t) * size); // assign the register address and data to be written to the transmission buffer txBuffer[0] = (uint8_t)addr; txBuffer[1] = (uint8_t)value; // invoke the SPI transfer status = spiTransfer( params, txBuffer, rxBuffer, size); // data has been written // any response is now in rxBuffer (usually don't get a response from a write operation so it should be empty) printf( SPI Write to addr 0x%02x: 0x%02x\\n , txBuffer[0], txBuffer[1] ); // clean-up free(txBuffer); free(rxBuffer); } In this case, the SPI Master will first send the register address where the write is to be performed, and then the value to be written. Usually the SPI Slave will not send a response, however, the spiTransfer() function still requires a buffer to be passed in order to work properly.","title":"Example Code: Writing a Value"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#example-code-writing-several-values","text":"Some devices allow/require the user to write a stream of data with no address, this can be accomplished using the spiTransfer() function as well: void SpiWriteValues(int addr, int* data, int size) { int status; uint8_t *txBuffer; uint8_t *rxBuffer; struct spiParams params; // initialize the SPI parameters and set the bus number and device ID spiParamInit( params); params.busNum = 0; params.deviceId = 1; // allocate memory for the buffers based on input data size txBuffer = (uint8_t*)malloc(sizeof(uint8_t) * size); rxBuffer = (uint8_t*)malloc(sizeof(uint8_t) * size); // fill the transmission buffer with the data for (i = 0; i size; i++) { txBuffer[i] = (uint8_t)data[i]; } // invoke the SPI transfer status = spiTransfer( params, txBuffer, rxBuffer, size); // data has been written // any response is now in rxBuffer (usually don't get a response from a write operation so it should be empty) printf( SPI: wrote a %d bytes of data to device\\n , size ); // clean-up free(txBuffer); free(rxBuffer); }","title":"Example Code: Writing Several Values"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#additional-functions","text":"The spiTransfer() is all that's required to perform reads and writes using SPI. However, two additional functions are provided to perform reads and writes. Internally, they both use the spiTransfer() function, but they provide a slightly simpler interface.","title":"Additional Functions"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#reading-data-spiread","text":"This function can be used to perform a register read: int spiRead(struct spiParams *params, int addr, uint8_t *rdBuffer, int bytes); It can read a specified number of bytes from a specified address. The limitation is that the address can only be a single byte. Use spiTransfer() if your use-case requires more than 8-bits for the address. Arguments The params spiParams structure holds all of the relevant SPI information. The addr argument is the 8-bit address from which to read. The rdBuffer argument will be populated by data received during the SPI transfer. And finally, the bytes argument indicates the number of bytes being read. Note that the rdBuffer needs to be allocated to at least this size.","title":"Reading Data: spiRead()"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#example-code","text":"The following function will read two bytes from the specified address, the data will be stored in rdBuffer : void SpiReadValue2(int addr) { int status, size; uint8_t *rdBuffer; struct spiParams params; // initialize the SPI parameters and set the bus number and device ID spiParamInit( params); params.busNum = 0; params.deviceId = 1; // set the transmission size and allocate memory for the buffers size = 2; rdBuffer = (uint8_t*)malloc(sizeof(uint8_t) * size); // invoke the SPI read status = spiRead( params, addr, rdBuffer, size); // rdBuffer now contains the data read through the SPI interface printf( SPI Read from addr 0x%02x: 0x%02x, 0x%02x\\n , addr, rdBuffer[0], rdBuffer[1]); // clean-up free(rdBuffer); } In essence, this simplifies the use of the spiTransfer() for read scenarios. Note that this function has not been tested as thoroughly as the spiTransfer() function.","title":"Example Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#reading-data-spiwrite","text":"This function can be used to perform a register write: int spiWrite(struct spiParams *params, int addr, uint8_t *wrBuffer, int bytes); It will write a specified number of bytes to a specified address. The limitation is that the address can only be a single byte. Use spiTransfer() if your use-case requires more than 8-bits for the address. Arguments The params spiParams structure holds all of the relevant SPI information. The addr argument is the 8-bit address on which to perform the write The wrBuffer argument holds the data to be transmitted during the SPI transfer. And finally, the bytes argument indicates the number of bytes being written. Note that the wdBuffer needs to be allocated to at least this size.","title":"Reading Data: spiWrite()"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-C-Library/#example-code_1","text":"The following code will write a byte to the specified address, the data will be stored in rdBuffer : void SpiWriteValue2(int addr, int value) { int status, size; uint8_t *wrBuffer; struct spiParams params; // initialize the SPI parameters and set the bus number and device ID spiParamInit( params); params.busNum = 0; params.deviceId = 1; // set the transmission size and allocate memory for the buffers size = 1; wrBuffer = (uint8_t*)malloc(sizeof(uint8_t) * size); // put the value to be written in the wrBuffer *wrBuffer = (uint8_t)value; // invoke the SPI read status = spiWrite( params, addr, wrBuffer, size); // data in wrBuffer has been written to the SPI device printf( SPI Write to addr 0x%02x: 0x%02x\\n , addr, *wrBuffer ); // clean-up free(wrBuffer); } This function simplifies the use of spiTransfer() for scenarios where SPI is used to write to a register. Note that this function has not been tested as thoroughly as the spiTransfer() function.","title":"Example Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/","text":"SPI Library for Python The Onion SPI Library, libonionspi is a dynamic C library that provides functions to easily read from and write to devices communicating with the Omega over the GPIOs via the SPI protocol. The library can be used in C and C++ programs. Also available is a Python module, called onionSpi , that implements an SPI object using functions from the C Library. [[ TOC ]] The SPI Protocol The Serial Peripheral Interface (SPI) is a four-wire synchronous communication protocol, largely used to connect microprocessors or microcontrollers to sensors, memory, and other peripherals. The four signals are: SPI Signal Meaning SCK System Clock MOSI Master Out, Slave In - Data sent from the Master to the Slave MISO Master In, Slave Out - Data sent from the Slave to the Master CS/SS Chip Select/Slave Select The fact that it is a synchronous data bus means that one of the lines is a clock, used to synchronize the bits being sent on the data lines. The protocol is based on the Master-Slave architecture, so the Master will generate the System Clock and the Slave Select signals. In systems with multiple slaves, there will be multiple Slave Select signals. For more details on SPI, check out the Wikipedia article . Linux and SPI Linux systems usually control SPI devices through kernel drivers. However, it is also possible to generate the SPI protocol by bit-banging on connecte GPIOs. Bit-banging SPI is done through an adapter usually found at /dev/spidevX.Y where X is the device number and Y is the bus number. The Omega does not have an SPI bit-banging adapter setup by default, but this can be done by using the insmod command to insert a module into the kernel. The libonionspi library takes care of this for you so you don't have to deal with the intricacies. The Python Module The onionSpi Python module provides a Python object, OnionSpi , that serves as a wrapper around the C library functions. The usage is slightly different since the Python module is object oriented and the C library is just a set of functions. Source Code The source code can be found in the Onion spi-gpio-driver GitHub Repo . Programming Flow The Python module revolves around the OnionSpi object; once it is initialized with the bus number and device ID that the desired SPI adapter uses, the rest of the class functions can be used to register the adapater, setup the adapter's SPI options, and most importantly, make data transfers! Once the object is initialized, the recommended flow is as follows: * Check that the device adapter is registered * If not, register the device adapter with the system * Set any additional SPI parameters and setup the adapter with them * Perform any SPI transfers as required. The details of the specific functions to perform these actions are outlined below. Using the Python Module Installing the Module To install the Python module, run the following commands: opkg update opkg install python-light pyOnionSpi This will install the module to /usr/lib/python2.7/OmegaExpansion/ Note: this only has to be done once. Using the Module To add the Onion SPI Module to your Python program, include the following in your code: import onionSpi Example An example of how the OnionSpi object is used can be found in the spi-gpio-driver repo. Initialization of the Object The object needs to be initialized before it can be used for reading and writing: spi = onionSpi.OnionSpi(busNumber, deviceId) Arguments The constructor requires the bus number and device ID of the SPI device adapter that is to be used. These numbers correspond to the device adapter itself: /dev/spidevX.Y where X is the device number and Y is the bus number. Object Member Variables The OnionSpi object has several member variables that are used to define specific SPI parameters and settings. The can be accessed and modified directly using the object. The member variables are as follows: Object Member Meaning bus The device adapter bus number device The device adapter device ID speed Maximum transmission clock speed in Hz delay Delay in us after last bit transferred before optionall deselecting the device before the next transfer bitsPerWord Number of bits in a transmitted word mode SPI mode: can be 0 to 3 (Mode 0 is the most common) modeBits Additional SPI operating parameters sck GPIO for SPI SCK signal mosi GPIO for SPI MOSI signal miso GPIO for SPI MISO signal cs GPIO for SPI CS signal The modeBits parameter may be a little difficult to work with so the following member variables were added: Object Member Meaning threewire Three-wire SPI: MOSI and MISO lines are shared on a single GPIO lsbfirst Modify the protocol to transmit bytes LSB to MSB loop Enable loopback mode noCs Modify the protocol to not generate a Chip-Select line csHigh Modify the protocol for an active-high Chip-Select line Changing any of these parameters will modify the modeBits member as well. Default Values When the object is first initialized, all of the member variables are initialized to legitimate values: SPI Setting Programmed Default speed 100000 Hz (100 kHz) delay 0 bitsPerWord 0 (Corresponds to 8 bits per word) mode SPI Mode 0 Sets the SPI lines to the following GPIOs: SPI Signal Omega Gpio SCK 6 MOSI 18 MISO 1 CS/SS 7 Examples Creating an SPI object, modifying some of the parameters, and then printing parameters: spi = onionSpi.OnionSpi(0, 1) spi.cs = 20 spi.sck = 19 spi.csHigh = 1 spi.speed = 400000 print 'SPI CS GPIO: %d'%(spi.cs) print 'SPI SCK GPIO: %d'%(spi.sck) print 'SPI MISO GPIO: %d'%(spi.miso) print 'SPI MOSI GPIO: %d'%(spi.mosi) print 'SPI Speed: %d Hz (%d kHz)'%(spi.speed, spi.speed/1000) print 'Mode Bits: 0x%x, CS-High: %d'%(spi.modeBits, spi.csHigh) Setup Functions The following functions are used to register the SPI device adapter and setup any SPI protocol options as required. Check if Device is Registered To check if a device adapter with the bus number and device ID that were specified in the object constructor is already registered with the system: return = spi.checkDevice() Return Values The function will return 0 if the device adapter is already mapped. The return value will be 1 if the device adapter is NOT mapped/ Register Device This function will register an SPI device with the bus number, device ID, and other SPI parameters as specified in the object variable members: return = spi.registerDevice() It will first check if a device with the specified bus number and device ID is already registered. If it is, it will just return 0 . If not, it will attempt to register the SPI device adapter by inserting an SPI-gpio module into the kernel. If this operation is successful, the function will return 0 , if not, 1 is returned. The function uses the following information to register the device: * The bus number * The device ID * SPI mode * The SPI speed * The GPIO for the SCK line * The GPIO for the MOSI line * The GPIO for the MISO line * The GPIO for the CS line Example A short example showing how to register an SPI device adapter: spi = onionSpi.OnionSpi(0, 1) # modify any SPI settings as required spi.cs = 20 spi.speed = 400000 # register the device spi.registerDevice() Setup SPI Device This function will setup additional SPI parameters on the device adapter return = spi.setupDevice() It will setup the following SPI parameters: * The maximum speed of the link * The number of bits per word * Additional mode information, see section on additional mode information above Conclusion Once a device is registered, data can be read from and written to the device via SPI. Reading Function This function reads a specified number of bytes from a specified address on an SPI device: values = spi.readBytes(addr, size) The read bytes are returned in the form of a list, even if there is only one byte. Arguments The addr argument specifies from which address on the SPI device to read. The size argument specifies the number of bytes to read. Examples Read a byte from address 0x33: rdVal = spi.readBytes(0x33, 1) # rdVal[0] now contains the byte that was read Read three byres from address 0x00: rdVal = spi.readBytes(0x00, 3) # the rdVal list now contains the three bytes that were read Writing Functions The OnionSpi class has two functions that can be used to write data via SPI: * One that requires an address and a list of bytes to write * One that just sends a list of bytes to write Write Bytes This function will write a list of bytes to a specified address on an SPI device return = spi.writeBytes(addr, values) Arguments The addr argument specifies to which address on the SPI device to write. The values argument is a list of values to be written. Even if there is only a single byte, it should be in list form. Examples Write 0x23 to address 0x91: ret = spi.writeBytes(0x91, [0x23]) Write 0x23, 0x33, 0x07 to address 0x96: vals = [0x23, 0x33, 0x07] ret = spi.writeBytes(0x96, vals) Write Bytes without an Address This function will just write a list of bytes to an SPI device (without specifying an address): return = spi.write(values) Arguments The values argument is a list of values to be written. Even if there is only a single byte, it should be in list form. Examples Write 0x08, 0x34, 0x02, 0x07: ret = spi.write([0x08, 0x34, 0x02, 0x07]) Write 0x00, 0x1C, 0x07, 0x12, 0x37, 0x32, 0x29, 0x2D: vals = [0x00, 0x1C, 0x07, 0x12, 0x37, 0x32, 0x29, 0x2D] ret = spi.write(vals) Write 0x11: ret = spi.write([0x11])","title":"SPI Library for Python"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#spi-library-for-python","text":"The Onion SPI Library, libonionspi is a dynamic C library that provides functions to easily read from and write to devices communicating with the Omega over the GPIOs via the SPI protocol. The library can be used in C and C++ programs. Also available is a Python module, called onionSpi , that implements an SPI object using functions from the C Library. [[ TOC ]]","title":"SPI Library for Python"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#the-spi-protocol","text":"The Serial Peripheral Interface (SPI) is a four-wire synchronous communication protocol, largely used to connect microprocessors or microcontrollers to sensors, memory, and other peripherals. The four signals are: SPI Signal Meaning SCK System Clock MOSI Master Out, Slave In - Data sent from the Master to the Slave MISO Master In, Slave Out - Data sent from the Slave to the Master CS/SS Chip Select/Slave Select The fact that it is a synchronous data bus means that one of the lines is a clock, used to synchronize the bits being sent on the data lines. The protocol is based on the Master-Slave architecture, so the Master will generate the System Clock and the Slave Select signals. In systems with multiple slaves, there will be multiple Slave Select signals. For more details on SPI, check out the Wikipedia article .","title":"The SPI Protocol"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#linux-and-spi","text":"Linux systems usually control SPI devices through kernel drivers. However, it is also possible to generate the SPI protocol by bit-banging on connecte GPIOs. Bit-banging SPI is done through an adapter usually found at /dev/spidevX.Y where X is the device number and Y is the bus number. The Omega does not have an SPI bit-banging adapter setup by default, but this can be done by using the insmod command to insert a module into the kernel. The libonionspi library takes care of this for you so you don't have to deal with the intricacies.","title":"Linux and SPI"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#the-python-module","text":"The onionSpi Python module provides a Python object, OnionSpi , that serves as a wrapper around the C library functions. The usage is slightly different since the Python module is object oriented and the C library is just a set of functions.","title":"The Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#source-code","text":"The source code can be found in the Onion spi-gpio-driver GitHub Repo .","title":"Source Code"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#programming-flow","text":"The Python module revolves around the OnionSpi object; once it is initialized with the bus number and device ID that the desired SPI adapter uses, the rest of the class functions can be used to register the adapater, setup the adapter's SPI options, and most importantly, make data transfers! Once the object is initialized, the recommended flow is as follows: * Check that the device adapter is registered * If not, register the device adapter with the system * Set any additional SPI parameters and setup the adapter with them * Perform any SPI transfers as required. The details of the specific functions to perform these actions are outlined below.","title":"Programming Flow"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#using-the-python-module","text":"Installing the Module To install the Python module, run the following commands: opkg update opkg install python-light pyOnionSpi This will install the module to /usr/lib/python2.7/OmegaExpansion/ Note: this only has to be done once. Using the Module To add the Onion SPI Module to your Python program, include the following in your code: import onionSpi","title":"Using the Python Module"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#example","text":"An example of how the OnionSpi object is used can be found in the spi-gpio-driver repo.","title":"Example"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#initialization-of-the-object","text":"The object needs to be initialized before it can be used for reading and writing: spi = onionSpi.OnionSpi(busNumber, deviceId) Arguments The constructor requires the bus number and device ID of the SPI device adapter that is to be used. These numbers correspond to the device adapter itself: /dev/spidevX.Y where X is the device number and Y is the bus number.","title":"Initialization of the Object"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#object-member-variables","text":"The OnionSpi object has several member variables that are used to define specific SPI parameters and settings. The can be accessed and modified directly using the object. The member variables are as follows: Object Member Meaning bus The device adapter bus number device The device adapter device ID speed Maximum transmission clock speed in Hz delay Delay in us after last bit transferred before optionall deselecting the device before the next transfer bitsPerWord Number of bits in a transmitted word mode SPI mode: can be 0 to 3 (Mode 0 is the most common) modeBits Additional SPI operating parameters sck GPIO for SPI SCK signal mosi GPIO for SPI MOSI signal miso GPIO for SPI MISO signal cs GPIO for SPI CS signal The modeBits parameter may be a little difficult to work with so the following member variables were added: Object Member Meaning threewire Three-wire SPI: MOSI and MISO lines are shared on a single GPIO lsbfirst Modify the protocol to transmit bytes LSB to MSB loop Enable loopback mode noCs Modify the protocol to not generate a Chip-Select line csHigh Modify the protocol for an active-high Chip-Select line Changing any of these parameters will modify the modeBits member as well.","title":"Object Member Variables"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#default-values","text":"When the object is first initialized, all of the member variables are initialized to legitimate values: SPI Setting Programmed Default speed 100000 Hz (100 kHz) delay 0 bitsPerWord 0 (Corresponds to 8 bits per word) mode SPI Mode 0 Sets the SPI lines to the following GPIOs: SPI Signal Omega Gpio SCK 6 MOSI 18 MISO 1 CS/SS 7","title":"Default Values"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#examples","text":"Creating an SPI object, modifying some of the parameters, and then printing parameters: spi = onionSpi.OnionSpi(0, 1) spi.cs = 20 spi.sck = 19 spi.csHigh = 1 spi.speed = 400000 print 'SPI CS GPIO: %d'%(spi.cs) print 'SPI SCK GPIO: %d'%(spi.sck) print 'SPI MISO GPIO: %d'%(spi.miso) print 'SPI MOSI GPIO: %d'%(spi.mosi) print 'SPI Speed: %d Hz (%d kHz)'%(spi.speed, spi.speed/1000) print 'Mode Bits: 0x%x, CS-High: %d'%(spi.modeBits, spi.csHigh)","title":"Examples"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#setup-functions","text":"The following functions are used to register the SPI device adapter and setup any SPI protocol options as required.","title":"Setup Functions"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#check-if-device-is-registered","text":"To check if a device adapter with the bus number and device ID that were specified in the object constructor is already registered with the system: return = spi.checkDevice() Return Values The function will return 0 if the device adapter is already mapped. The return value will be 1 if the device adapter is NOT mapped/","title":"Check if Device is Registered"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#register-device","text":"This function will register an SPI device with the bus number, device ID, and other SPI parameters as specified in the object variable members: return = spi.registerDevice() It will first check if a device with the specified bus number and device ID is already registered. If it is, it will just return 0 . If not, it will attempt to register the SPI device adapter by inserting an SPI-gpio module into the kernel. If this operation is successful, the function will return 0 , if not, 1 is returned. The function uses the following information to register the device: * The bus number * The device ID * SPI mode * The SPI speed * The GPIO for the SCK line * The GPIO for the MOSI line * The GPIO for the MISO line * The GPIO for the CS line Example A short example showing how to register an SPI device adapter: spi = onionSpi.OnionSpi(0, 1) # modify any SPI settings as required spi.cs = 20 spi.speed = 400000 # register the device spi.registerDevice()","title":"Register Device"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#setup-spi-device","text":"This function will setup additional SPI parameters on the device adapter return = spi.setupDevice() It will setup the following SPI parameters: * The maximum speed of the link * The number of bits per word * Additional mode information, see section on additional mode information above","title":"Setup SPI Device"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#conclusion","text":"Once a device is registered, data can be read from and written to the device via SPI.","title":"Conclusion"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#reading-function","text":"This function reads a specified number of bytes from a specified address on an SPI device: values = spi.readBytes(addr, size) The read bytes are returned in the form of a list, even if there is only one byte. Arguments The addr argument specifies from which address on the SPI device to read. The size argument specifies the number of bytes to read. Examples Read a byte from address 0x33: rdVal = spi.readBytes(0x33, 1) # rdVal[0] now contains the byte that was read Read three byres from address 0x00: rdVal = spi.readBytes(0x00, 3) # the rdVal list now contains the three bytes that were read","title":"Reading Function"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#writing-functions","text":"The OnionSpi class has two functions that can be used to write data via SPI: * One that requires an address and a list of bytes to write * One that just sends a list of bytes to write","title":"Writing Functions"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#write-bytes","text":"This function will write a list of bytes to a specified address on an SPI device return = spi.writeBytes(addr, values) Arguments The addr argument specifies to which address on the SPI device to write. The values argument is a list of values to be written. Even if there is only a single byte, it should be in list form. Examples Write 0x23 to address 0x91: ret = spi.writeBytes(0x91, [0x23]) Write 0x23, 0x33, 0x07 to address 0x96: vals = [0x23, 0x33, 0x07] ret = spi.writeBytes(0x96, vals)","title":"Write Bytes"},{"location":"tutorials/OnionWiki/Documentation/Libraries/SPI-Python-Module/#write-bytes-without-an-address","text":"This function will just write a list of bytes to an SPI device (without specifying an address): return = spi.write(values) Arguments The values argument is a list of values to be written. Even if there is only a single byte, it should be in list form. Examples Write 0x08, 0x34, 0x02, 0x07: ret = spi.write([0x08, 0x34, 0x02, 0x07]) Write 0x00, 0x1C, 0x07, 0x12, 0x37, 0x32, 0x29, 0x2D: vals = [0x00, 0x1C, 0x07, 0x12, 0x37, 0x32, 0x29, 0x2D] ret = spi.write(vals) Write 0x11: ret = spi.write([0x11])","title":"Write Bytes without an Address"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/","text":"BitTorrent Client on the Omega As you probably already know, BitTorrent is a popular peer-to-peer file sharing protocol, with a variety of content available on the internet ready to be downloaded. Given the Omega's built-in networking capabilities and ability to use USB devices, we thought it would be only proper to show how the Omega can be setup for file-sharing using BitTorrent, specifically, the Transmission BitTorrent client. This guide will walk you through the entire process required to setup Transmission on the Omega. First we'll use a USB Drive to expand the Omega's storage and memory, then we'll install the Transmission client as well as a Onion Console App so that you can control your downloads using the Omega's Console. To finish it all off, we'll wirelessly share the Omega's downloads folder on your local network. Disclaimer: Onion does not condone illegal downloading, only download content that is legally distributable! Onion is not responsible for any reprecussions due to downloading copyrighted or illegal content. [[ TOC ]] Overview Tutorial Difficulty: Intermediate Time Required: 30 minutes Required Materials: * The Omega * Any Dock * A USB Storage Device Useful Experience: * Installing packages with opkg * Using BitTorrent * Using Transmission * Using the Console What is BitTorrent? BitTorrent is a peer-to-peer file sharing communication protocol that is very well suited to distribute large amounts of data over the internet. The BitTorrent protocol essentially uses the data downloaded by each user as a source for that data to other users. In effect, users simultaneously upload to download from other users that are downloading the same data. This distributed form of downloading greatly outperforms the traditional paradigm where all users download the data from a single source, especially when it comes to transfering large files to many users. Essentially, the BitTorrent Protocol is a scalable way for many users to download and share files and data. It is because of this scalability that it has become one of the most popular file sharing methods available on the internet, used to share a variety of different content. For more information on the BitTorrent Protocol, take a look at the BitTorrent Wikipedia article . Setup the Omega to use the Transmission BitTorrent Client Let's dive right in! We'll start by setting up a USB storage device to store data as well as extend the amount of memory available to the Omega, then we'll move on to installing and configuring the Transmission BitTorrent Client. We'll also install a Console App to easily access the Transmission web interface, and finally, setup Samba to enable easy access to our downloaded content on the local network. Step 1: Setup USB Storage and Automounting We'll need USB storage since most content will not fit on the Omega's built-in storage. Plug in a USB drive that is at least a few gigabytes and make sure it's mounted. Follow the steps outlined in the USB Storage tutorial to setup automatic mounting so that your Omega will be ready to torrent as soon as it boots. For the purposes of this tutorial, let's assume the USB device was mounted to /mnt/sda1 . Step 2: Expand the Omega's Memory with a Swap File Downloading torrents is hard work for the Omega. Since we're already using USB storage, let's use some of that storage capacity to increase the amount of memory available to the Omega with a Swap File. Check out the Swap File article for instructions on how to extend the memory. Step 3: Install Transmission We'll need a client to download files via BitTorrent; Transmission works well on OpenWRT so let's install the daemon as well as the web interface packages: opkg update opkg install transmission-daemon transmission-web Step 4: Configuring Transmission We'll now configure Transmission to best suit our purposes. Transmission's configuration file can be found at /etc/config/transmission , so we can use UCI to easily change the configuration options. If you're unfamiliar with UCI, check out the UCI tutorial . Let's make sure that Transmission is enabled and set a logical location for Transmission's own configuration directory: uci set transmission.@transmission[0].enabled='1' uci set transmission.@transmission[0].config_dir='/etc/transmission' Since the Omega's flash storage definitely isn't big enough to hold downloaded content, set the download and incomplete download locations to directories on the mounted USB drive: uci set transmission.@transmission[0].download_dir='/mnt/sda1/download' uci set transmission.@transmission[0].incomplete_dir='/mnt/sda1/download/incomplete' Then create these directories with the mkdir command. Commit the changes to the configuration file uci commit transmission Step 5: Enable the Transmission Daemon Now that Transmission has been configured, let's enable the daemon so that it starts automatically when the Omega boots: /etc/init.d/transmission enable And let's actually launch the daemon: /etc/init.d/transmission start Step 6: Install the Console App The Transmission web interface will be running on port 9091 of your Omega, but wouldn't it be nice if this were accessible from the Console? Luckily, it can be! Let's install a Console App that will display the Transmission web interface: opkg update opkg install transmission-console-app If you're interested, all of the code for the Transmission Console App can be found in Onion's transmission-console-app repo on GitHub . Step 7: Configure Access to the Web Interface The Transmission Web Interface needs to be told which IP addresses are allowed access via a whitelist. We'll first check the current entries in the whitelist: root@Omega-267F:~# uci show transmission.@transmission[0].rpc_whitelist transmission.cfg025f8f.rpc_whitelist='127.0.0.1,192.168.1.*' Make sure to note the current entries, we'll want to preserve them. Allow Access to Users Connected to the Omega's AP Any users connected to the Omega's AP should be able to access the Transmission App, so lets add that now. By default, the Omega's AP network will assign addresses in the 192.168.3.* space, but that's configurable so let's check: root@Omega-267F:~# uci show network.wlan.ipaddr network.wlan.ipaddr='192.168.8.1' In this case, the address range was changed to 192.168.8.* . Let's add this address range to the whitelist: uci set transmission.@transmission[0].rpc_whitelist='127.0.0.1,192.168.1.*,192.168.8.*' uci commit transmission Restart the Transmission daemon with /etc/init.d/transmission restart for the changes to take effect. Allow Access to Users on an Existing WiFi Network In the most common case, your Omega will be connected to an existing WiFi network at your home or office, so we should allow access to any users on that network as well. We will need to find the range of IP Addresses that your router assigns to devices on the network. We can do this by checking the Omega's IP Adrress, follow the steps outlined in this tutorial , and make note of the IP Address. Alternatively, you can check the IP Address of any device on your network to achieve the same effect. The procedure is simple but different depending on the type of device you are using, try googling 'Find IP address on your device '. Most routers are setup to assign IP addresses in the 192.168.1.* range which is whitelisted by default. If that's the case, you can skip the rest of this step! If not, we will need to add to the whitelist, making sure to preserve the previous entries. For the purposes of this tutorial, let's say your Omega's IP address is 192.168.23.99 so we will be whitelisting addresses in the 192.168.23.* range: uci set transmission.@transmission[0].rpc_whitelist='127.0.0.1,192.168.1.*,192.168.8.*., 192.168.23.*' uci commit transmission Restart the Transmission daemon with /etc/init.d/transmission restart for the changes to take effect. Not Recommended: Disabling the Whitelist If you've tried the instructions above and still can't access the web interface, it is possible to completely disable the whitelist and allow users from any IP to access your Transmission web interface. We definitely do not recommend doing this but you can use it in a bind: uci set transmission.@transmission[0].rpc_whitelist_enabled='false' uci commit transmission Then restart the Transmission daemon with /etc/init.d/transmission restart for the changes to take effect. Step 8: Setup Samba Sharing of the USB Drive We'll want an easy way to access our downloaded content without having to actively log on to the Omega. Using Samba, we can make our downloads directory available on our local network. Check out the Samba article for instructions on how to setup a network share. Step 9: Torrent Away! Thanks to the Omega, you're now all setup with an easy way to use BitTorrent, have fun! Using Transmission on the Omega After everything is installed and configured, you're all set to download using BitTorrent. Remember, Onion recommends using your powers for good, so make sure the content you're downloading is legally distributable! Use a browser to navigate to your Omega's Console, you should see your newly installed Transmission App: The Transmission App will show the web interface for controlling the Transmission client: Click the button to select a Torrent file. You can point to the URL of the Torrent file which you wish to use, or you can upload a Torrent file. We find it easiest to just point to a Torrent URL. Note that the destination folder matches the default destination folder we configured in Step 4 . For this example, we will be downloading an image of the Linux distro Ubuntu , so we entered the following URL: http://releases.ubuntu.com/16.04/ubuntu-16.04-desktop-i386.iso.torrent?_ga=1.190678248.214845118.1462917625 Once the download starts, we can keep track of the progress: And we will be able to see when the download is complete: Recommended Torrent Sources At Onion HQ, we often use the Omega to download images of new Linux Distros to test out. We also recommend checking out this list of legal and free Torrent sources since we don't condone illegal downloads :) Related Tutorials A list of all the tutorials used in this project: * Using USB Storage * Extending available memory using a Swap File * Using UCI to change configuration options * Finding the Omega's IP Address * Sharing directories on your local network with Samba article","title":"BitTorrent Client on the Omega"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#bittorrent-client-on-the-omega","text":"As you probably already know, BitTorrent is a popular peer-to-peer file sharing protocol, with a variety of content available on the internet ready to be downloaded. Given the Omega's built-in networking capabilities and ability to use USB devices, we thought it would be only proper to show how the Omega can be setup for file-sharing using BitTorrent, specifically, the Transmission BitTorrent client. This guide will walk you through the entire process required to setup Transmission on the Omega. First we'll use a USB Drive to expand the Omega's storage and memory, then we'll install the Transmission client as well as a Onion Console App so that you can control your downloads using the Omega's Console. To finish it all off, we'll wirelessly share the Omega's downloads folder on your local network. Disclaimer: Onion does not condone illegal downloading, only download content that is legally distributable! Onion is not responsible for any reprecussions due to downloading copyrighted or illegal content. [[ TOC ]]","title":"BitTorrent Client on the Omega"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#overview","text":"Tutorial Difficulty: Intermediate Time Required: 30 minutes Required Materials: * The Omega * Any Dock * A USB Storage Device Useful Experience: * Installing packages with opkg * Using BitTorrent * Using Transmission * Using the Console","title":"Overview"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#what-is-bittorrent","text":"BitTorrent is a peer-to-peer file sharing communication protocol that is very well suited to distribute large amounts of data over the internet. The BitTorrent protocol essentially uses the data downloaded by each user as a source for that data to other users. In effect, users simultaneously upload to download from other users that are downloading the same data. This distributed form of downloading greatly outperforms the traditional paradigm where all users download the data from a single source, especially when it comes to transfering large files to many users. Essentially, the BitTorrent Protocol is a scalable way for many users to download and share files and data. It is because of this scalability that it has become one of the most popular file sharing methods available on the internet, used to share a variety of different content. For more information on the BitTorrent Protocol, take a look at the BitTorrent Wikipedia article .","title":"What is BitTorrent?"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#setup-the-omega-to-use-the-transmission-bittorrent-client","text":"Let's dive right in! We'll start by setting up a USB storage device to store data as well as extend the amount of memory available to the Omega, then we'll move on to installing and configuring the Transmission BitTorrent Client. We'll also install a Console App to easily access the Transmission web interface, and finally, setup Samba to enable easy access to our downloaded content on the local network.","title":"Setup the Omega to use the Transmission BitTorrent Client"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#step-1-setup-usb-storage-and-automounting","text":"We'll need USB storage since most content will not fit on the Omega's built-in storage. Plug in a USB drive that is at least a few gigabytes and make sure it's mounted. Follow the steps outlined in the USB Storage tutorial to setup automatic mounting so that your Omega will be ready to torrent as soon as it boots. For the purposes of this tutorial, let's assume the USB device was mounted to /mnt/sda1 .","title":"Step 1: Setup USB Storage and Automounting"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#step-2-expand-the-omegas-memory-with-a-swap-file","text":"Downloading torrents is hard work for the Omega. Since we're already using USB storage, let's use some of that storage capacity to increase the amount of memory available to the Omega with a Swap File. Check out the Swap File article for instructions on how to extend the memory.","title":"Step 2: Expand the Omega's Memory with a Swap File"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#step-3-install-transmission","text":"We'll need a client to download files via BitTorrent; Transmission works well on OpenWRT so let's install the daemon as well as the web interface packages: opkg update opkg install transmission-daemon transmission-web","title":"Step 3: Install Transmission"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#step-4-configuring-transmission","text":"We'll now configure Transmission to best suit our purposes. Transmission's configuration file can be found at /etc/config/transmission , so we can use UCI to easily change the configuration options. If you're unfamiliar with UCI, check out the UCI tutorial . Let's make sure that Transmission is enabled and set a logical location for Transmission's own configuration directory: uci set transmission.@transmission[0].enabled='1' uci set transmission.@transmission[0].config_dir='/etc/transmission' Since the Omega's flash storage definitely isn't big enough to hold downloaded content, set the download and incomplete download locations to directories on the mounted USB drive: uci set transmission.@transmission[0].download_dir='/mnt/sda1/download' uci set transmission.@transmission[0].incomplete_dir='/mnt/sda1/download/incomplete' Then create these directories with the mkdir command. Commit the changes to the configuration file uci commit transmission","title":"Step 4: Configuring Transmission"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#step-5-enable-the-transmission-daemon","text":"Now that Transmission has been configured, let's enable the daemon so that it starts automatically when the Omega boots: /etc/init.d/transmission enable And let's actually launch the daemon: /etc/init.d/transmission start","title":"Step 5: Enable the Transmission Daemon"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#step-6-install-the-console-app","text":"The Transmission web interface will be running on port 9091 of your Omega, but wouldn't it be nice if this were accessible from the Console? Luckily, it can be! Let's install a Console App that will display the Transmission web interface: opkg update opkg install transmission-console-app If you're interested, all of the code for the Transmission Console App can be found in Onion's transmission-console-app repo on GitHub .","title":"Step 6: Install the Console App"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#step-7-configure-access-to-the-web-interface","text":"The Transmission Web Interface needs to be told which IP addresses are allowed access via a whitelist. We'll first check the current entries in the whitelist: root@Omega-267F:~# uci show transmission.@transmission[0].rpc_whitelist transmission.cfg025f8f.rpc_whitelist='127.0.0.1,192.168.1.*' Make sure to note the current entries, we'll want to preserve them.","title":"Step 7: Configure Access to the Web Interface"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#allow-access-to-users-connected-to-the-omegas-ap","text":"Any users connected to the Omega's AP should be able to access the Transmission App, so lets add that now. By default, the Omega's AP network will assign addresses in the 192.168.3.* space, but that's configurable so let's check: root@Omega-267F:~# uci show network.wlan.ipaddr network.wlan.ipaddr='192.168.8.1' In this case, the address range was changed to 192.168.8.* . Let's add this address range to the whitelist: uci set transmission.@transmission[0].rpc_whitelist='127.0.0.1,192.168.1.*,192.168.8.*' uci commit transmission Restart the Transmission daemon with /etc/init.d/transmission restart for the changes to take effect.","title":"Allow Access to Users Connected to the Omega's AP"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#allow-access-to-users-on-an-existing-wifi-network","text":"In the most common case, your Omega will be connected to an existing WiFi network at your home or office, so we should allow access to any users on that network as well. We will need to find the range of IP Addresses that your router assigns to devices on the network. We can do this by checking the Omega's IP Adrress, follow the steps outlined in this tutorial , and make note of the IP Address. Alternatively, you can check the IP Address of any device on your network to achieve the same effect. The procedure is simple but different depending on the type of device you are using, try googling 'Find IP address on your device '. Most routers are setup to assign IP addresses in the 192.168.1.* range which is whitelisted by default. If that's the case, you can skip the rest of this step! If not, we will need to add to the whitelist, making sure to preserve the previous entries. For the purposes of this tutorial, let's say your Omega's IP address is 192.168.23.99 so we will be whitelisting addresses in the 192.168.23.* range: uci set transmission.@transmission[0].rpc_whitelist='127.0.0.1,192.168.1.*,192.168.8.*., 192.168.23.*' uci commit transmission Restart the Transmission daemon with /etc/init.d/transmission restart for the changes to take effect.","title":"Allow Access to Users on an Existing WiFi Network"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#not-recommended-disabling-the-whitelist","text":"If you've tried the instructions above and still can't access the web interface, it is possible to completely disable the whitelist and allow users from any IP to access your Transmission web interface. We definitely do not recommend doing this but you can use it in a bind: uci set transmission.@transmission[0].rpc_whitelist_enabled='false' uci commit transmission Then restart the Transmission daemon with /etc/init.d/transmission restart for the changes to take effect.","title":"Not Recommended: Disabling the Whitelist"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#step-8-setup-samba-sharing-of-the-usb-drive","text":"We'll want an easy way to access our downloaded content without having to actively log on to the Omega. Using Samba, we can make our downloads directory available on our local network. Check out the Samba article for instructions on how to setup a network share.","title":"Step 8: Setup Samba Sharing of the USB Drive"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#step-9-torrent-away","text":"Thanks to the Omega, you're now all setup with an easy way to use BitTorrent, have fun!","title":"Step 9: Torrent Away!"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#using-transmission-on-the-omega","text":"After everything is installed and configured, you're all set to download using BitTorrent. Remember, Onion recommends using your powers for good, so make sure the content you're downloading is legally distributable! Use a browser to navigate to your Omega's Console, you should see your newly installed Transmission App: The Transmission App will show the web interface for controlling the Transmission client: Click the button to select a Torrent file. You can point to the URL of the Torrent file which you wish to use, or you can upload a Torrent file. We find it easiest to just point to a Torrent URL. Note that the destination folder matches the default destination folder we configured in Step 4 . For this example, we will be downloading an image of the Linux distro Ubuntu , so we entered the following URL: http://releases.ubuntu.com/16.04/ubuntu-16.04-desktop-i386.iso.torrent?_ga=1.190678248.214845118.1462917625 Once the download starts, we can keep track of the progress: And we will be able to see when the download is complete:","title":"Using Transmission on the Omega"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#recommended-torrent-sources","text":"At Onion HQ, we often use the Omega to download images of new Linux Distros to test out. We also recommend checking out this list of legal and free Torrent sources since we don't condone illegal downloads :)","title":"Recommended Torrent Sources"},{"location":"tutorials/OnionWiki/Projects/Bit-Torrent-Client/#related-tutorials","text":"A list of all the tutorials used in this project: * Using USB Storage * Extending available memory using a Swap File * Using UCI to change configuration options * Finding the Omega's IP Address * Sharing directories on your local network with Samba article","title":"Related Tutorials"},{"location":"tutorials/OnionWiki/Projects/Contents/","text":"Projects Wiki The Projects Wiki contains guides on building and creating projects using the Omega. Each guide includes step-by-step instructions on putting together any required hardware, software and configuration setup, and any code that might be required. [[ TOC ]] The Projects A listing of the available project guides: Internet Projects Using the Omega as an Internet Connected Lock BitTorrent Client on the Omega The OLED Expansion Homemade Stock Ticker using the OLED Expansion Displaying QR Codes on the OLED Expansion Streaming Music Using Airplay Streaming Music using Airplay: * Basic Setup * More Advanced Setup * Put Airplay into Practice Using Bluetooth Streaming Music Using Bluetooth Bluetooth Audio on Omega Using IFTTT with the Omega and Onion Cloud Control the Omega using IFTTT and Onion Cloud","title":"Projects Wiki"},{"location":"tutorials/OnionWiki/Projects/Contents/#projects-wiki","text":"The Projects Wiki contains guides on building and creating projects using the Omega. Each guide includes step-by-step instructions on putting together any required hardware, software and configuration setup, and any code that might be required. [[ TOC ]]","title":"Projects Wiki"},{"location":"tutorials/OnionWiki/Projects/Contents/#the-projects","text":"A listing of the available project guides:","title":"The Projects"},{"location":"tutorials/OnionWiki/Projects/Contents/#internet-projects","text":"Using the Omega as an Internet Connected Lock BitTorrent Client on the Omega","title":"Internet Projects"},{"location":"tutorials/OnionWiki/Projects/Contents/#the-oled-expansion","text":"Homemade Stock Ticker using the OLED Expansion Displaying QR Codes on the OLED Expansion","title":"The OLED Expansion"},{"location":"tutorials/OnionWiki/Projects/Contents/#streaming-music","text":"","title":"Streaming Music"},{"location":"tutorials/OnionWiki/Projects/Contents/#using-airplay","text":"Streaming Music using Airplay: * Basic Setup * More Advanced Setup * Put Airplay into Practice","title":"Using Airplay"},{"location":"tutorials/OnionWiki/Projects/Contents/#using-bluetooth","text":"Streaming Music Using Bluetooth Bluetooth Audio on Omega","title":"Using Bluetooth"},{"location":"tutorials/OnionWiki/Projects/Contents/#using-ifttt-with-the-omega-and-onion-cloud","text":"Control the Omega using IFTTT and Onion Cloud","title":"Using IFTTT with the Omega and Onion Cloud"},{"location":"tutorials/OnionWiki/Projects/Homemade_Stock_Ticker/","text":"Homemade Stock Ticker The main goal of this project is to demonstrate the Omega's capabilities in a practical webscraping application. We will be making a stock ticker using our Omega to retrieve prices and the OLED Expansion to display them. We will be using python to do our webscraping as it provides us with a convenient set of tools to retrieve and parse web data as well as a shell script to print our stock information onto the OLED display. [[ TOC ]] Overview Tutorial Difficulty: Beginner Time Required: 15 minutes Required Materials: The Omega The Expansion Dock OLED Expansions Useful Experience: Using the OLED Expansion Using Python Using Shell Scripts Scheduling with Cron Background Info Stock Tickers are used display the most recent selling price for a stock on the market. Historically, they have been the most fundamental tool used by \"wall streeters\" for tracking performance. There are plethora of free stock ticker services for your computer, phone, tablet ...etc. However, we will provide you with the back bone to make a highly customizable stock ticker on a dedicated mini-computer (Omega) and display(OLED Exp) in under 15 min! The Actual Process Pre-requisite: If you haven't already follow the get started guide to setup your Omega. Step 1: Connect your Omega, Expansion Dock, and OLED Expansion Firstly, connect your OMEGA and your OLED Expansion to your Expansion Dock. Refer to the picture below. Step 2: Setup Wifi You will need to setup wifi so that we can install python and fetch stock data from google. Go ahead and enter the wifisetup command into your omega. wifisetup Follow the instructions and give the Omega access to your wifi network. Step 3: Update and Install Python We will need to install the full version of Python so that we have access to some libraries necessary for webscraping. If you have already installed python skip to the next step. To do this simply enter, opkg update opkg install python You may or may not need to clear some space on your Omega for the installation. If you are doing this right out of the box, you should be fine. Step 4: Create our Python and Shell scripts Navigate to your \"/\" directory. Create your shell script file by executing the following command. cat stock.sh You will be prompted to enter the contents of the file. Copy the following code into the file. #!/bin/sh oled-exp -c echo $1 /root/ticker.txt VAR=$(python ./stock_script.py) oled-exp -i oled-exp write $VAR You can save and exit the command by entering CTRL + D. Firstly, we add the the shell to our path so that we can run the file as an executeable. We then clear the display using oled-exp -c . We write the ticker of interest to the following file /root/ticker.txt . Next we run our python script and store the output to our string variable, VAR. Then we initialize the display and write the value of VAR, which is our ticker and price. Now lets do the same with our python script. cat stock_script.py #!/usr/bin/env python import urllib import json myfile = open('/root/ticker.txt', 'r') rg=myfile.read() site= http://www.google.com/finance/info?q= +rg jfile=urllib.urlopen(site) jsfile=jfile.read() jsfile=jsfile.replace( \\n , ) jsfile=jsfile.replace( / , ) jsfile=jsfile.replace( ] , ) jsfile=jsfile.replace( [ , ) a=json.loads(jsfile) ticker=a['t'] price=a['l_fix'] info=ticker+ : +price print info To start we added python to our environment so that it is executable from the command line or a shell script. Next we imported urllib and json libraries, these will allows us to webscrape information and parse the data for our desired information respectively. Next we open the file that stores our desired ticker and store it as a string variable. Then we append that to our URL. Then we will generate the URL and open the file from the web, urllib.urllopen(site) . We will store it as a string using jfile.read() . Next we will clean it up using the replace functions so that it can be parsed by the json library. We use the json.load(jsfile) to create a dictionary. Then we retrieve the values of interest using the keys for ticker and price. We append the two and spit the output to our shell script. Step 5: Change Permissions Make both files we just created executable by entering this: chmod +x stock.sh stock_script.py Step 6: Execute Script Now let's see how Apple is doing. ./stock.sh AAPL Using the Project Parts of this project can and are encouraged to be used in other projects. Going Further To take the project one step further, let's create a stream by having the Omega run the same script once every minute. To do this we will use the cron tool. cron allows us to schedule jobs(commands/programs/script) for execution at a fixed time. First lets schedule our sript to run every minute. To do this, enter the command: crontab -e You will be taken to the vi-editor of the scheduling file which can be found in /etc/crontabs/root. Add the following line to your file and make sure to end the file with an empty line or #. */1 * * * * /stock.sh AAPL You can save and quit the editor by entering ZZ. Using this project as a template, we can go even further with webscraping projects. Maybe build a new headline streamer or an upto date weather tracker. Related Tutorials If you enjoyed this project, you should check this out OLED-QR-Code-Generator .","title":"Homemade Stock Ticker"},{"location":"tutorials/OnionWiki/Projects/Homemade_Stock_Ticker/#homemade-stock-ticker","text":"The main goal of this project is to demonstrate the Omega's capabilities in a practical webscraping application. We will be making a stock ticker using our Omega to retrieve prices and the OLED Expansion to display them. We will be using python to do our webscraping as it provides us with a convenient set of tools to retrieve and parse web data as well as a shell script to print our stock information onto the OLED display. [[ TOC ]]","title":"Homemade Stock Ticker"},{"location":"tutorials/OnionWiki/Projects/Homemade_Stock_Ticker/#overview","text":"Tutorial Difficulty: Beginner Time Required: 15 minutes Required Materials: The Omega The Expansion Dock OLED Expansions Useful Experience: Using the OLED Expansion Using Python Using Shell Scripts Scheduling with Cron","title":"Overview"},{"location":"tutorials/OnionWiki/Projects/Homemade_Stock_Ticker/#background-info","text":"Stock Tickers are used display the most recent selling price for a stock on the market. Historically, they have been the most fundamental tool used by \"wall streeters\" for tracking performance. There are plethora of free stock ticker services for your computer, phone, tablet ...etc. However, we will provide you with the back bone to make a highly customizable stock ticker on a dedicated mini-computer (Omega) and display(OLED Exp) in under 15 min!","title":"Background Info"},{"location":"tutorials/OnionWiki/Projects/Homemade_Stock_Ticker/#the-actual-process","text":"Pre-requisite: If you haven't already follow the get started guide to setup your Omega.","title":"The Actual Process"},{"location":"tutorials/OnionWiki/Projects/Homemade_Stock_Ticker/#step-1-connect-your-omega-expansion-dock-and-oled-expansion","text":"Firstly, connect your OMEGA and your OLED Expansion to your Expansion Dock. Refer to the picture below.","title":"Step 1: Connect your Omega, Expansion Dock, and OLED Expansion"},{"location":"tutorials/OnionWiki/Projects/Homemade_Stock_Ticker/#step-2-setup-wifi","text":"You will need to setup wifi so that we can install python and fetch stock data from google. Go ahead and enter the wifisetup command into your omega. wifisetup Follow the instructions and give the Omega access to your wifi network.","title":"Step 2: Setup Wifi"},{"location":"tutorials/OnionWiki/Projects/Homemade_Stock_Ticker/#step-3-update-and-install-python","text":"We will need to install the full version of Python so that we have access to some libraries necessary for webscraping. If you have already installed python skip to the next step. To do this simply enter, opkg update opkg install python You may or may not need to clear some space on your Omega for the installation. If you are doing this right out of the box, you should be fine.","title":"Step 3: Update and Install Python"},{"location":"tutorials/OnionWiki/Projects/Homemade_Stock_Ticker/#step-4-create-our-python-and-shell-scripts","text":"Navigate to your \"/\" directory. Create your shell script file by executing the following command. cat stock.sh You will be prompted to enter the contents of the file. Copy the following code into the file. #!/bin/sh oled-exp -c echo $1 /root/ticker.txt VAR=$(python ./stock_script.py) oled-exp -i oled-exp write $VAR You can save and exit the command by entering CTRL + D. Firstly, we add the the shell to our path so that we can run the file as an executeable. We then clear the display using oled-exp -c . We write the ticker of interest to the following file /root/ticker.txt . Next we run our python script and store the output to our string variable, VAR. Then we initialize the display and write the value of VAR, which is our ticker and price. Now lets do the same with our python script. cat stock_script.py #!/usr/bin/env python import urllib import json myfile = open('/root/ticker.txt', 'r') rg=myfile.read() site= http://www.google.com/finance/info?q= +rg jfile=urllib.urlopen(site) jsfile=jfile.read() jsfile=jsfile.replace( \\n , ) jsfile=jsfile.replace( / , ) jsfile=jsfile.replace( ] , ) jsfile=jsfile.replace( [ , ) a=json.loads(jsfile) ticker=a['t'] price=a['l_fix'] info=ticker+ : +price print info To start we added python to our environment so that it is executable from the command line or a shell script. Next we imported urllib and json libraries, these will allows us to webscrape information and parse the data for our desired information respectively. Next we open the file that stores our desired ticker and store it as a string variable. Then we append that to our URL. Then we will generate the URL and open the file from the web, urllib.urllopen(site) . We will store it as a string using jfile.read() . Next we will clean it up using the replace functions so that it can be parsed by the json library. We use the json.load(jsfile) to create a dictionary. Then we retrieve the values of interest using the keys for ticker and price. We append the two and spit the output to our shell script.","title":"Step 4: Create our Python and Shell scripts"},{"location":"tutorials/OnionWiki/Projects/Homemade_Stock_Ticker/#step-5-change-permissions","text":"Make both files we just created executable by entering this: chmod +x stock.sh stock_script.py","title":"Step 5: Change Permissions"},{"location":"tutorials/OnionWiki/Projects/Homemade_Stock_Ticker/#step-6-execute-script","text":"Now let's see how Apple is doing. ./stock.sh AAPL","title":"Step 6: Execute Script"},{"location":"tutorials/OnionWiki/Projects/Homemade_Stock_Ticker/#using-the-project","text":"Parts of this project can and are encouraged to be used in other projects.","title":"Using the Project"},{"location":"tutorials/OnionWiki/Projects/Homemade_Stock_Ticker/#going-further","text":"To take the project one step further, let's create a stream by having the Omega run the same script once every minute. To do this we will use the cron tool. cron allows us to schedule jobs(commands/programs/script) for execution at a fixed time. First lets schedule our sript to run every minute. To do this, enter the command: crontab -e You will be taken to the vi-editor of the scheduling file which can be found in /etc/crontabs/root. Add the following line to your file and make sure to end the file with an empty line or #. */1 * * * * /stock.sh AAPL You can save and quit the editor by entering ZZ. Using this project as a template, we can go even further with webscraping projects. Maybe build a new headline streamer or an upto date weather tracker.","title":"Going Further"},{"location":"tutorials/OnionWiki/Projects/Homemade_Stock_Ticker/#related-tutorials","text":"If you enjoyed this project, you should check this out OLED-QR-Code-Generator .","title":"Related Tutorials"},{"location":"tutorials/OnionWiki/Projects/IFTTT+Omega/","text":"The Onion + IFTTT Experience In this tutorial/mini-project, we will show you how to do some very cool things using IFTTT, the Omega and the Onion Cloud. Specifically, we will use the IFTTT DO App on a SmartPhone to send the date and GPS information from your phone to be printed remotely on your Omega's OLED Expansion. This tutorial will give you a taste of the Onion Cloud and its capabilities. Let's get into it. [[ TOC ]] Overview Tutorial Difficulty : Beginner Time Required: 20 minutes Required Materials : * The Omega * The Expansion Dock * The Oled Expansion * Android/iOS device Useful Experience : * Using the Onion Cloud(not necessary) * Knowledge of Ubus Commands(not necessary) Background Info What is IFTTT IFTTT stands for \"if this, then that\", which is a web service that allows users to create custom tasks, which are called \"recipes\", that can set up user's own conditional statement (e.g. if I receive a new email on my gmail account, then forward it to another account). The conditional statement could be as simple as if a button is pressed, or as complex as you want. There is also \"DO button\" app in APPstore or Google Play store,which allows the recipe to be triggered by pressing a button on the app. We will be using te \"DO\" app in our tutorial. In the next section, I will explain what will be going on behind the scenes. Theory Introduction The theory of using IFTTT to control our Omega is, when one event is triggered, a request is sent to the Onion Cloud via the Maker Channel. The Onion Cloud will then send a command to your local Omega to execute a ubus function. We have built in Ubus functions to control the Omega's expansion which is what we are using in this tutorial. If you would like to learn more about ubus or would like to create your own function, check out our ubus tutorial series ! The recipes are created through \"channels\", which are different web services, for example, Gmail. We are in the process of creating an Onion channel, but in the meantime, we can still use IFTTT through the DIY \"Maker\" Channel. Step 1: Setting Up The Omega With The Cloud Create Onion Account and Register a Device If you haven't already, you will need to create an Onion Account on the Onion Website . If you are completely new to the Onion Cloud, click the button on the bottom left to take a tour of the Cloud. Use the Device Manager to register your Omega with the Cloud. Again, use the tour button if you're unsure how anything works! Now that you have a Cloud connected Omega, make a note of it's Device ID since we will be using it later. Next we will need to get an API Key. Get Your API Key API Keys are authentication credentials that are tied to your account and allow other programs to use the Onion Cloud APIs. Click on the Key Manager App on the Cloud to create a API Key to use with IFTTT. Make note of the Key since we will be using it later. Step 2: Setting Up IFTTT Make An Account With IFTTT. Go to the IFTTT site and make an account. In the next step we will be making the recipe. Download DO Button App and Setup Up the \"Recipe\" Download and open the DO Button App by IFTTT on your phone. Navigate to the My Recipes section and click the add button. I have included a series of screen shots to guide you through the steps on your phone. Once you have selected the Maker Channel, you will be prompted to connect to the maker channel. Once you have reached the final screen, choose a title for the recipe. I have made mine \"omega test\". For the URL field, just put google.com for now and choose the POST for the Method. For \"Content type\" select \"applications/JSON\", scroll to the bottom and click add. We will now continue to modify the recipe on the desktop. Step 3: Creating an IFTTT Recipe. In this step you will need to log back into the IFTTT website and open up the Onion Cloud. In this step you will modify the URL you entered in step 2 with one that is generated by the onion cloud and that points to your device and tells it to do something. Click on My Recipes, click on DO tab and then on the recipe you created on your phone and you will be able to modify the recipe. Get URL and Body Info From the Onion Cloud Login into the Onion Cloud, then click on the Device Explorer App on the dashboard: Your Device should have a Device ID and be connected to the cloud: Click on the device and then the following tabs on the left i2c_exp and then oled-exp . You should reach the following screen: Side Note: We have just selected the ubus command to control the Oled Display via the Onion Cloud. You can select another tab to issue a different command to the Omega. Using the steps below as a baseline, you can easily control any of the expansions or other Omega functionality using steps similar to those below. Back to the tutorial: In the command field enter: set In the option field enter: i In the params field enter: { write : } Take a look at the i2c-exp-driver Read Me for details on controling the Servo, Relay, and OLED Expansions using ubus commands. The section under the curl command is what you will use to fill in the URL and body fields in the IFTTT recipe. The link at the end will be the URL to the Onion API and the JSON text before it is the body. The URL will have the following form: https://api.onion.io/v1/devices/ device-id /i2c_exp/oled-exp?key= API-key You will need to replace and with your device ID and API key which you took note of earlier. Enter this into the URL Field. Next, simply copy the JSON text inside the single quotes as is into the body field. Now let's add some ingredients, ie date and GPS coordinates. To do this place the cursor in between the empty quotation marks following write : And click on the button beside the field. Select \"OccuredAt\" from the dropdown menu and click \"Add Ingredient\". Repeat the process selecting latitude and longtitude. You will also need to add a space between the last two curly closed brackets. Once you are done, your screen should look something like this and you can hit Update. Step 4: Try It Out! First make sure the GPS on your on phone is turned on. Open up the DO app, press the button and watch the OLED Display. Using the Project Using this project, you can use the Onion Cloud to control your remote Omega very easily. Using IFTTT, you can trigger commands either automatically or from your smartphone via the DO button App. The Onion Cloud can send commands to any connected Omega to execute ubus functions. Therefore, this tutorial can be used as a framework to do other things remotely on your Omega; maybe control a door lock or light switch from your phone, or automatically start an action when you enter a specific area of your city. The world is your playground with the Omega and IFTTT. Related Tutorials ubus tutorial","title":"The Onion + IFTTT Experience"},{"location":"tutorials/OnionWiki/Projects/IFTTT+Omega/#the-onion-ifttt-experience","text":"In this tutorial/mini-project, we will show you how to do some very cool things using IFTTT, the Omega and the Onion Cloud. Specifically, we will use the IFTTT DO App on a SmartPhone to send the date and GPS information from your phone to be printed remotely on your Omega's OLED Expansion. This tutorial will give you a taste of the Onion Cloud and its capabilities. Let's get into it. [[ TOC ]]","title":"The Onion + IFTTT Experience"},{"location":"tutorials/OnionWiki/Projects/IFTTT+Omega/#overview","text":"Tutorial Difficulty : Beginner Time Required: 20 minutes Required Materials : * The Omega * The Expansion Dock * The Oled Expansion * Android/iOS device Useful Experience : * Using the Onion Cloud(not necessary) * Knowledge of Ubus Commands(not necessary)","title":"Overview"},{"location":"tutorials/OnionWiki/Projects/IFTTT+Omega/#background-info","text":"","title":"Background Info"},{"location":"tutorials/OnionWiki/Projects/IFTTT+Omega/#what-is-ifttt","text":"IFTTT stands for \"if this, then that\", which is a web service that allows users to create custom tasks, which are called \"recipes\", that can set up user's own conditional statement (e.g. if I receive a new email on my gmail account, then forward it to another account). The conditional statement could be as simple as if a button is pressed, or as complex as you want. There is also \"DO button\" app in APPstore or Google Play store,which allows the recipe to be triggered by pressing a button on the app. We will be using te \"DO\" app in our tutorial. In the next section, I will explain what will be going on behind the scenes.","title":"What is IFTTT"},{"location":"tutorials/OnionWiki/Projects/IFTTT+Omega/#theory-introduction","text":"The theory of using IFTTT to control our Omega is, when one event is triggered, a request is sent to the Onion Cloud via the Maker Channel. The Onion Cloud will then send a command to your local Omega to execute a ubus function. We have built in Ubus functions to control the Omega's expansion which is what we are using in this tutorial. If you would like to learn more about ubus or would like to create your own function, check out our ubus tutorial series ! The recipes are created through \"channels\", which are different web services, for example, Gmail. We are in the process of creating an Onion channel, but in the meantime, we can still use IFTTT through the DIY \"Maker\" Channel.","title":"Theory &amp; Introduction"},{"location":"tutorials/OnionWiki/Projects/IFTTT+Omega/#step-1-setting-up-the-omega-with-the-cloud","text":"","title":"Step 1: Setting Up The Omega With The Cloud"},{"location":"tutorials/OnionWiki/Projects/IFTTT+Omega/#create-onion-account-and-register-a-device","text":"If you haven't already, you will need to create an Onion Account on the Onion Website . If you are completely new to the Onion Cloud, click the button on the bottom left to take a tour of the Cloud. Use the Device Manager to register your Omega with the Cloud. Again, use the tour button if you're unsure how anything works! Now that you have a Cloud connected Omega, make a note of it's Device ID since we will be using it later. Next we will need to get an API Key.","title":"Create Onion Account and Register a Device"},{"location":"tutorials/OnionWiki/Projects/IFTTT+Omega/#get-your-api-key","text":"API Keys are authentication credentials that are tied to your account and allow other programs to use the Onion Cloud APIs. Click on the Key Manager App on the Cloud to create a API Key to use with IFTTT. Make note of the Key since we will be using it later.","title":"Get Your API Key"},{"location":"tutorials/OnionWiki/Projects/IFTTT+Omega/#step-2-setting-up-ifttt","text":"","title":"Step 2: Setting Up IFTTT"},{"location":"tutorials/OnionWiki/Projects/IFTTT+Omega/#make-an-account-with-ifttt","text":"Go to the IFTTT site and make an account. In the next step we will be making the recipe.","title":"Make An Account With IFTTT."},{"location":"tutorials/OnionWiki/Projects/IFTTT+Omega/#download-do-button-app-and-setup-up-the-recipe","text":"Download and open the DO Button App by IFTTT on your phone. Navigate to the My Recipes section and click the add button. I have included a series of screen shots to guide you through the steps on your phone. Once you have selected the Maker Channel, you will be prompted to connect to the maker channel. Once you have reached the final screen, choose a title for the recipe. I have made mine \"omega test\". For the URL field, just put google.com for now and choose the POST for the Method. For \"Content type\" select \"applications/JSON\", scroll to the bottom and click add. We will now continue to modify the recipe on the desktop.","title":"Download DO Button App and Setup Up the \"Recipe\""},{"location":"tutorials/OnionWiki/Projects/IFTTT+Omega/#step-3-creating-an-ifttt-recipe","text":"In this step you will need to log back into the IFTTT website and open up the Onion Cloud. In this step you will modify the URL you entered in step 2 with one that is generated by the onion cloud and that points to your device and tells it to do something. Click on My Recipes, click on DO tab and then on the recipe you created on your phone and you will be able to modify the recipe.","title":"Step 3: Creating an IFTTT Recipe."},{"location":"tutorials/OnionWiki/Projects/IFTTT+Omega/#get-url-and-body-info-from-the-onion-cloud","text":"Login into the Onion Cloud, then click on the Device Explorer App on the dashboard: Your Device should have a Device ID and be connected to the cloud: Click on the device and then the following tabs on the left i2c_exp and then oled-exp . You should reach the following screen: Side Note: We have just selected the ubus command to control the Oled Display via the Onion Cloud. You can select another tab to issue a different command to the Omega. Using the steps below as a baseline, you can easily control any of the expansions or other Omega functionality using steps similar to those below. Back to the tutorial: In the command field enter: set In the option field enter: i In the params field enter: { write : } Take a look at the i2c-exp-driver Read Me for details on controling the Servo, Relay, and OLED Expansions using ubus commands. The section under the curl command is what you will use to fill in the URL and body fields in the IFTTT recipe. The link at the end will be the URL to the Onion API and the JSON text before it is the body. The URL will have the following form: https://api.onion.io/v1/devices/ device-id /i2c_exp/oled-exp?key= API-key You will need to replace and with your device ID and API key which you took note of earlier. Enter this into the URL Field. Next, simply copy the JSON text inside the single quotes as is into the body field. Now let's add some ingredients, ie date and GPS coordinates. To do this place the cursor in between the empty quotation marks following write : And click on the button beside the field. Select \"OccuredAt\" from the dropdown menu and click \"Add Ingredient\". Repeat the process selecting latitude and longtitude. You will also need to add a space between the last two curly closed brackets. Once you are done, your screen should look something like this and you can hit Update.","title":"Get URL and Body Info From the Onion Cloud"},{"location":"tutorials/OnionWiki/Projects/IFTTT+Omega/#step-4-try-it-out","text":"First make sure the GPS on your on phone is turned on. Open up the DO app, press the button and watch the OLED Display.","title":"Step 4: Try It Out!"},{"location":"tutorials/OnionWiki/Projects/IFTTT+Omega/#using-the-project","text":"Using this project, you can use the Onion Cloud to control your remote Omega very easily. Using IFTTT, you can trigger commands either automatically or from your smartphone via the DO button App. The Onion Cloud can send commands to any connected Omega to execute ubus functions. Therefore, this tutorial can be used as a framework to do other things remotely on your Omega; maybe control a door lock or light switch from your phone, or automatically start an action when you enter a specific area of your city. The world is your playground with the Omega and IFTTT.","title":"Using the Project"},{"location":"tutorials/OnionWiki/Projects/IFTTT+Omega/#related-tutorials","text":"ubus tutorial","title":"Related Tutorials"},{"location":"tutorials/OnionWiki/Projects/OLED-QR-Code-Generator/","text":"Generating QR Codes to Display on the OLED Expansion QR Codes are essentially two dimensional barcodes that can easily be scanned with any camera and a little bit of processing power. The average smartphone will make short work of any QR code it comes across. In this tutorial, we'll go through how you can use Python to encode text into a QR Code and display it on your OLED Expansion. [[ TOC ]] Overview Tutorial Difficulty: Beginner Time Required: 10 minutes Required Materials: * The Omega * The Expansion Dock * OLED Expansions Useful Experience: * Using the OLED Expansion * Using Python What are QR Codes? As mentioned earlier, QR codes (Quick Response Code) are essentially two-dimensional (or matrix) barcodes. They're an evolution of the ordinary barcode in every sense of the word: the data storage capacity is much larger, they can be processed and read by almost any imaging device, and error correction is built-in so even partial codes can be scanned. The QR code data encoding algorithm defines a number of 'versions' that increase in size and store increasing amounts of data. The version (size) of a generated QR code depends on the amount of data to be encoded. Increasing the error correction level will decrease the storage capacity due to redundancy pixels being added. QR Codes can be used in the same way as traditional barcodes, but with the advantages they have over barcodes, there's a variety of clever ways they can be used: * Linking to websites * Contact information * Advertising * Payment systems * Authentication and identification To learn more about QR codes, visit the Wikipedia article , it's jam-packed with all sorts of information. The Fun Part Ok, here we go! First we'll install some required packages to make everything run smoothly, and then we'll grab the code for this tutorial from GitHub. All of the code can be found on this GitHub Repo: https://github.com/OnionIoT/oledQrCodeGenerator Step 1: Installing Required Packages We will need to have support for git, Python, and the Onion OLED Expansion Python Module : opkg update opkg install git git-http python-light python-codecs pyOledExp Step 2: Downloading the Code Now we need to download the Python code that actually does all the work: cd /root git clone https://github.com/OnionIoT/oledQrCodeGenerator.git Step 3: Running the Code Finally, we get to make some QR codes! Navigate into the repo directory: cd oledQrCodeGenerator And run the program, the argument to the script is the text that will be encoded in the QR code pattern: root@Omega-18C2:~/oledQrCodeGenerator# python main.py 'Wow, my first QR Code' Encoding 21 characters Generated QR Code: 31x31 pixels Doubled QR Code size: 62x62 Initializing display Setting display mode to inverted Writing buffer data to display This will encode the data and display the resulting QR code on the OLED Expansion: Program Details Behind the scenes, the Python code does the following: * Encodes the input text into a matrix representing the QR Code * The size of the QR code is based on the amount of input text * Converts the QR code matrix into data that can be displayed on the OLED * Displays the resulting image on the OLED display * Performs display initialization * Inverts the display colours * Displays the generated image file An additional feature was added for easier scanning: if the QR code is small (less than half the height of the OLED display), the image will be doubled in size so that each QR code pixel shows up as four pixels on the OLED display. The default generated QR code will be a Version 3 code with the Low error correction setting and a one-pixel border, creating a code that is 31x31 pixels. If the amount of text to be encoded cannot fit in a Version 3 code, the program will select the next version that will fit the amount of data to be encoded. Step 4: Using the code as a Python Module (Optional) The oledQrCodeGenerator code can also be imported as a module into your own Python projects! The dispQrCode() function will perform the same actions described above. Example Code A small example showing how to use this module: import oledQrCodeGenerator print 'Now using the oledQrCodeGenerator' oledQrCodeGenerator.dispQrCode('Hello!') print 'All done!' Note that your Python script will have to be in the same directory as oledQrCodeGenerator in order for it to work properly. Reading QR Codes It's no fun to just display QR codes and not be able to read them, right? Don't worry, your smartphone is perfectly capable of reading the code from the OLED: * On Android, we've used the QR Code Reader and QR Barcode Scanner apps successfully * On iOS, we've had success with the QR Reader App For QR codes that encode a lot of text, your phone might take a little while longer to scan the code. Trial and error works best in this scenario: try moving your phone to different distances and angles from the OLED. Happy hacking! Acknowledgements The code in the qrcode directory is a stripped-down version of lincolnloop's python-qrcode repo: https://github.com/lincolnloop/python-qrcode The rest of the code is home grown by the Onion team :)","title":"Generating QR Codes to Display on the OLED Expansion"},{"location":"tutorials/OnionWiki/Projects/OLED-QR-Code-Generator/#generating-qr-codes-to-display-on-the-oled-expansion","text":"QR Codes are essentially two dimensional barcodes that can easily be scanned with any camera and a little bit of processing power. The average smartphone will make short work of any QR code it comes across. In this tutorial, we'll go through how you can use Python to encode text into a QR Code and display it on your OLED Expansion. [[ TOC ]]","title":"Generating QR Codes to Display on the OLED Expansion"},{"location":"tutorials/OnionWiki/Projects/OLED-QR-Code-Generator/#overview","text":"Tutorial Difficulty: Beginner Time Required: 10 minutes Required Materials: * The Omega * The Expansion Dock * OLED Expansions Useful Experience: * Using the OLED Expansion * Using Python","title":"Overview"},{"location":"tutorials/OnionWiki/Projects/OLED-QR-Code-Generator/#what-are-qr-codes","text":"As mentioned earlier, QR codes (Quick Response Code) are essentially two-dimensional (or matrix) barcodes. They're an evolution of the ordinary barcode in every sense of the word: the data storage capacity is much larger, they can be processed and read by almost any imaging device, and error correction is built-in so even partial codes can be scanned. The QR code data encoding algorithm defines a number of 'versions' that increase in size and store increasing amounts of data. The version (size) of a generated QR code depends on the amount of data to be encoded. Increasing the error correction level will decrease the storage capacity due to redundancy pixels being added. QR Codes can be used in the same way as traditional barcodes, but with the advantages they have over barcodes, there's a variety of clever ways they can be used: * Linking to websites * Contact information * Advertising * Payment systems * Authentication and identification To learn more about QR codes, visit the Wikipedia article , it's jam-packed with all sorts of information.","title":"What are QR Codes?"},{"location":"tutorials/OnionWiki/Projects/OLED-QR-Code-Generator/#the-fun-part","text":"Ok, here we go! First we'll install some required packages to make everything run smoothly, and then we'll grab the code for this tutorial from GitHub. All of the code can be found on this GitHub Repo: https://github.com/OnionIoT/oledQrCodeGenerator","title":"The Fun Part"},{"location":"tutorials/OnionWiki/Projects/OLED-QR-Code-Generator/#step-1-installing-required-packages","text":"We will need to have support for git, Python, and the Onion OLED Expansion Python Module : opkg update opkg install git git-http python-light python-codecs pyOledExp","title":"Step 1: Installing Required Packages"},{"location":"tutorials/OnionWiki/Projects/OLED-QR-Code-Generator/#step-2-downloading-the-code","text":"Now we need to download the Python code that actually does all the work: cd /root git clone https://github.com/OnionIoT/oledQrCodeGenerator.git","title":"Step 2: Downloading the Code"},{"location":"tutorials/OnionWiki/Projects/OLED-QR-Code-Generator/#step-3-running-the-code","text":"Finally, we get to make some QR codes! Navigate into the repo directory: cd oledQrCodeGenerator And run the program, the argument to the script is the text that will be encoded in the QR code pattern: root@Omega-18C2:~/oledQrCodeGenerator# python main.py 'Wow, my first QR Code' Encoding 21 characters Generated QR Code: 31x31 pixels Doubled QR Code size: 62x62 Initializing display Setting display mode to inverted Writing buffer data to display This will encode the data and display the resulting QR code on the OLED Expansion:","title":"Step 3: Running the Code"},{"location":"tutorials/OnionWiki/Projects/OLED-QR-Code-Generator/#program-details","text":"Behind the scenes, the Python code does the following: * Encodes the input text into a matrix representing the QR Code * The size of the QR code is based on the amount of input text * Converts the QR code matrix into data that can be displayed on the OLED * Displays the resulting image on the OLED display * Performs display initialization * Inverts the display colours * Displays the generated image file An additional feature was added for easier scanning: if the QR code is small (less than half the height of the OLED display), the image will be doubled in size so that each QR code pixel shows up as four pixels on the OLED display. The default generated QR code will be a Version 3 code with the Low error correction setting and a one-pixel border, creating a code that is 31x31 pixels. If the amount of text to be encoded cannot fit in a Version 3 code, the program will select the next version that will fit the amount of data to be encoded.","title":"Program Details"},{"location":"tutorials/OnionWiki/Projects/OLED-QR-Code-Generator/#step-4-using-the-code-as-a-python-module-optional","text":"The oledQrCodeGenerator code can also be imported as a module into your own Python projects! The dispQrCode() function will perform the same actions described above. Example Code A small example showing how to use this module: import oledQrCodeGenerator print 'Now using the oledQrCodeGenerator' oledQrCodeGenerator.dispQrCode('Hello!') print 'All done!' Note that your Python script will have to be in the same directory as oledQrCodeGenerator in order for it to work properly.","title":"Step 4: Using the code as a Python Module (Optional)"},{"location":"tutorials/OnionWiki/Projects/OLED-QR-Code-Generator/#reading-qr-codes","text":"It's no fun to just display QR codes and not be able to read them, right? Don't worry, your smartphone is perfectly capable of reading the code from the OLED: * On Android, we've used the QR Code Reader and QR Barcode Scanner apps successfully * On iOS, we've had success with the QR Reader App For QR codes that encode a lot of text, your phone might take a little while longer to scan the code. Trial and error works best in this scenario: try moving your phone to different distances and angles from the OLED. Happy hacking!","title":"Reading QR Codes"},{"location":"tutorials/OnionWiki/Projects/OLED-QR-Code-Generator/#acknowledgements","text":"The code in the qrcode directory is a stripped-down version of lincolnloop's python-qrcode repo: https://github.com/lincolnloop/python-qrcode The rest of the code is home grown by the Onion team :)","title":"Acknowledgements"},{"location":"tutorials/OnionWiki/Projects/Project-Tutorial-Template/","text":"Project Title Intro on the topic of the project. So a small blurb on what the main goal and why it would be useful. Include a relevant image: A brief sentence describing exactly what this tutorial will walk the user through: * The goal of the tutorial: What they will accomplish by completing this tutorial * What programming language, framework, or sofware the tutorial will use * What hardware will be used For example: In this tutorial, we'll go through how you can use Python to encode text into a QR Code and display it on your OLED Expansion. Note, any text that's in italics, replace it with your own text and remove the italics!! [[ TOC ]] Overview Tutorial Difficulty: Beginner|Intermediate|Advanced Time Required: 10 minutes Required Materials: * Any hardware/components the tutorial requires * The Omega * The Expansion Dock * OLED Expansions Useful Experience: * Something to give any idea of what to expect * Using the OLED Expansion * Using Python Background Info Give an explanation and background info on the main topic of the project. So if your project is about QR codes, explain what they are, how they work, and why they are useful. Include a link to a Wikipedia article or some other article that goes into more detail. The Actual Process Give a brief description of what we're going to do on a technical level: Ok, here we go! First we'll install some required packages to make everything run smoothly, and then we'll grab the code for this tutorial from GitHub. Make sure to mention any repos All of the code can be found on this GitHub Repo: https://github.com/OnionIoT/oledQrCodeGenerator Step 1: Step Title Each step should accomplish a small milestone in the overall process. And each step should be numbered. The first step will usually be using opkg to install some packages. Step 2: Step Title Next step... Sub-step Title If it makes sense to break down a step into sub-steps (or provide additional details on a particular action), go for it. Step 3: Step Title As many steps as it takes to explain the tutorial. Sub-step Title If the tutorial uses some custom code written by you, make sure you do a run-down of the structure of the code. Point-form is probably the best way to get your message across. Step N: Step Title On the last step, make sure to give an example: * if the project is code-based, run it on an Omega and paste the output (including the command used to run it!) * if the project is not code-based but provides some functionality, include a picture, gif, and/or video of it working Using the Project After the steps to setup and get the project running are done, write a short blurb on how it is meant to be used: For software based projects, talk about when the software would be used. For projects that create physical things, show how they are used Anything additional the user might have to do, like use a phone to interact with the project, etc This is also a good place to include images, gifs, and/or videos. Going Further A small outline of what could be done next and maybe a pointer on how to do it (ex: writing more code, installing certain software, adding to the hardware, etc) If the project can be re-used or implemented as a part of a larger project, make sure to mention it. For example, your project is software-based, maybe explain how the code can be used by other programs (including a Python module, using a C library, that kinda thing). Related Tutorials Include links to any related tutorials or projects. Acknowledgements A place to shoutout anybody or anything that might have helped with this project: * If the project is code-based and you've used code from somebody's repo, give them a small shoutout here. * If any one person/site/blog really helped you figure this out give them a shoutout here","title":"Project Title"},{"location":"tutorials/OnionWiki/Projects/Project-Tutorial-Template/#project-title","text":"Intro on the topic of the project. So a small blurb on what the main goal and why it would be useful. Include a relevant image: A brief sentence describing exactly what this tutorial will walk the user through: * The goal of the tutorial: What they will accomplish by completing this tutorial * What programming language, framework, or sofware the tutorial will use * What hardware will be used For example: In this tutorial, we'll go through how you can use Python to encode text into a QR Code and display it on your OLED Expansion. Note, any text that's in italics, replace it with your own text and remove the italics!! [[ TOC ]]","title":"Project Title"},{"location":"tutorials/OnionWiki/Projects/Project-Tutorial-Template/#overview","text":"Tutorial Difficulty: Beginner|Intermediate|Advanced Time Required: 10 minutes Required Materials: * Any hardware/components the tutorial requires * The Omega * The Expansion Dock * OLED Expansions Useful Experience: * Something to give any idea of what to expect * Using the OLED Expansion * Using Python","title":"Overview"},{"location":"tutorials/OnionWiki/Projects/Project-Tutorial-Template/#background-info","text":"Give an explanation and background info on the main topic of the project. So if your project is about QR codes, explain what they are, how they work, and why they are useful. Include a link to a Wikipedia article or some other article that goes into more detail.","title":"Background Info"},{"location":"tutorials/OnionWiki/Projects/Project-Tutorial-Template/#the-actual-process","text":"Give a brief description of what we're going to do on a technical level: Ok, here we go! First we'll install some required packages to make everything run smoothly, and then we'll grab the code for this tutorial from GitHub. Make sure to mention any repos All of the code can be found on this GitHub Repo: https://github.com/OnionIoT/oledQrCodeGenerator","title":"The Actual Process"},{"location":"tutorials/OnionWiki/Projects/Project-Tutorial-Template/#step-1-step-title","text":"Each step should accomplish a small milestone in the overall process. And each step should be numbered. The first step will usually be using opkg to install some packages.","title":"Step 1: Step Title"},{"location":"tutorials/OnionWiki/Projects/Project-Tutorial-Template/#step-2-step-title","text":"Next step...","title":"Step 2: Step Title"},{"location":"tutorials/OnionWiki/Projects/Project-Tutorial-Template/#sub-step-title","text":"If it makes sense to break down a step into sub-steps (or provide additional details on a particular action), go for it.","title":"Sub-step Title"},{"location":"tutorials/OnionWiki/Projects/Project-Tutorial-Template/#step-3-step-title","text":"As many steps as it takes to explain the tutorial.","title":"Step 3: Step Title"},{"location":"tutorials/OnionWiki/Projects/Project-Tutorial-Template/#sub-step-title_1","text":"If the tutorial uses some custom code written by you, make sure you do a run-down of the structure of the code. Point-form is probably the best way to get your message across.","title":"Sub-step Title"},{"location":"tutorials/OnionWiki/Projects/Project-Tutorial-Template/#step-n-step-title","text":"On the last step, make sure to give an example: * if the project is code-based, run it on an Omega and paste the output (including the command used to run it!) * if the project is not code-based but provides some functionality, include a picture, gif, and/or video of it working","title":"Step N: Step Title"},{"location":"tutorials/OnionWiki/Projects/Project-Tutorial-Template/#using-the-project","text":"After the steps to setup and get the project running are done, write a short blurb on how it is meant to be used: For software based projects, talk about when the software would be used. For projects that create physical things, show how they are used Anything additional the user might have to do, like use a phone to interact with the project, etc This is also a good place to include images, gifs, and/or videos.","title":"Using the Project"},{"location":"tutorials/OnionWiki/Projects/Project-Tutorial-Template/#going-further","text":"A small outline of what could be done next and maybe a pointer on how to do it (ex: writing more code, installing certain software, adding to the hardware, etc) If the project can be re-used or implemented as a part of a larger project, make sure to mention it. For example, your project is software-based, maybe explain how the code can be used by other programs (including a Python module, using a C library, that kinda thing).","title":"Going Further"},{"location":"tutorials/OnionWiki/Projects/Project-Tutorial-Template/#related-tutorials","text":"Include links to any related tutorials or projects.","title":"Related Tutorials"},{"location":"tutorials/OnionWiki/Projects/Project-Tutorial-Template/#acknowledgements","text":"A place to shoutout anybody or anything that might have helped with this project: * If the project is code-based and you've used code from somebody's repo, give them a small shoutout here. * If any one person/site/blog really helped you figure this out give them a shoutout here","title":"Acknowledgements"},{"location":"tutorials/OnionWiki/Projects/Using-Omega-As-Remote-Lock/","text":"Creating a WiFi-controlled Automatic Door Lock This guide will show you how to use the Omega to build an WiFi-controlled automatic lock for any door with a single cylinder deadbolt. We will be taking a regular deadbolt like this: And making it wirelessly controllable using the Omega: This guide will show you how to setup the physical mechanism to lock unlock the deadbolt, and the software required to control the mechanism wirelessly. [[ TOC ]] Overview Tutorial Difficulty: Intermediate Time Required: 15-20 minutes Required Materials: * The Omega * The Expansion Dock * The Servo Expansion * A Servo Motor * A Casing to attach the motor to the deadbolt * A MicroUSB Power supply Useful Experience: * Using the Servo Expansion * Using Shell Scripts * Using JavaScript * Familiarity with the Omega Background Info A servomotor is a device that will position itself at a specific angular position based on a pulse-width modulated signal. The Onion Servo Expansion was specifically created to control servomotors. Using this combination, we will be able to turn a deadbolt lock at will. The Actual Process We are going to prepare the servo, accessories, and hardware. After that, we will configure the commands to activate the servo and then create an app that makes use of the command. All of the code can be found on this GitHub repo: https://github.com/OnionIoT/smart-lock/tree/master/tutorial Step 1: The Servo Motor These motors turn using PWM signals. Our servo expansion has a pwm-exp function that can be used to generate these pulses. Most deadbolts lock and unlock at 90 degrees so modifications are not usually necessary. If your lock has to turn more than 180 degrees, you may want to modify your motor for continuous rotation . Step 2: The Motor Casing You will need a way to attach your motor to your door and turn the lock. You can make a casing for the motor that can attach to your door and hold the motor in place. A small piece of plastic in the shape of the lock's bar should be attached to the motor. An easy way to obtain these is to 3D print them. These are the models we are using. Step 3: Storing lock state using UCI OpenWRT is installed on the omega so you are able to use UCI to store configurations on the omega. So, we will use this to store the status of the lock. If your lock needs to turn more than 180 degrees, this would prevent the motor from applying a force on already locked/unlocked doors. Step 4: Controlling your servo through ubus We will use the ubus to run commands from the app. For more information about the ubus, please take a look at our ubus tutorial series . To setup a new ubus service: first navigate to /usr/libexec/rpcd/ and then we can use a template to build the ubus service. If you modified your servomotor, the sleep integer may have to be adjusted based on how much it is required to turn. Otherwise, you do not need conditional statements. The script we have basically runs the motor on channel 8 for 'sleep' seconds and set the state of the lock. If you are using UCI, you may want to add a function to force the motor to a position in case the lock status is incorrect. This may happen if someone uses a key to unlock a door so the status is still locked. Our ubus service code can be found in the GitHub repo . Step 5: Adding ubus Permissions In order to run ubus commands outside of the terminal, you must first include the functions in the ubus permissions file. Navigate to /usr/share/rpcd/acl.d/ In onion-console.json, add your ubus functions under read:ubus: and write:ubus: Step 6: Create an app Having an app to request functions is a lot easier and has a better UI than the terminal. There is an app template at /www/apps/ which you can use to build an app. Copy the onion-template folder and give it an app name. Edit the app.json and icon.png files to register it. Set the icon value to \u201ctrue\u201d for your app to show up on the console. Our example code for the app is located on GitHub. We are using the Polymer framework to create an HTML element. You may look in the files of other apps to see how your code should be organized. This is what the UI looks like. You are now finished. Attach your motor to your door and test it. Don't forget to reboot your omega! Using the Project Simply press the buttons on your app to tell the servo to lock or unlock your door. Going Further You may want to connect your app to the web so it can be used even when you're not within range of the WiFi network to which the Omega is connected.","title":"Creating a WiFi-controlled Automatic Door Lock"},{"location":"tutorials/OnionWiki/Projects/Using-Omega-As-Remote-Lock/#creating-a-wifi-controlled-automatic-door-lock","text":"This guide will show you how to use the Omega to build an WiFi-controlled automatic lock for any door with a single cylinder deadbolt. We will be taking a regular deadbolt like this: And making it wirelessly controllable using the Omega: This guide will show you how to setup the physical mechanism to lock unlock the deadbolt, and the software required to control the mechanism wirelessly. [[ TOC ]]","title":"Creating a WiFi-controlled Automatic Door Lock"},{"location":"tutorials/OnionWiki/Projects/Using-Omega-As-Remote-Lock/#overview","text":"Tutorial Difficulty: Intermediate Time Required: 15-20 minutes Required Materials: * The Omega * The Expansion Dock * The Servo Expansion * A Servo Motor * A Casing to attach the motor to the deadbolt * A MicroUSB Power supply Useful Experience: * Using the Servo Expansion * Using Shell Scripts * Using JavaScript * Familiarity with the Omega","title":"Overview"},{"location":"tutorials/OnionWiki/Projects/Using-Omega-As-Remote-Lock/#background-info","text":"A servomotor is a device that will position itself at a specific angular position based on a pulse-width modulated signal. The Onion Servo Expansion was specifically created to control servomotors. Using this combination, we will be able to turn a deadbolt lock at will.","title":"Background Info"},{"location":"tutorials/OnionWiki/Projects/Using-Omega-As-Remote-Lock/#the-actual-process","text":"We are going to prepare the servo, accessories, and hardware. After that, we will configure the commands to activate the servo and then create an app that makes use of the command. All of the code can be found on this GitHub repo: https://github.com/OnionIoT/smart-lock/tree/master/tutorial","title":"The Actual Process"},{"location":"tutorials/OnionWiki/Projects/Using-Omega-As-Remote-Lock/#step-1-the-servo-motor","text":"These motors turn using PWM signals. Our servo expansion has a pwm-exp function that can be used to generate these pulses. Most deadbolts lock and unlock at 90 degrees so modifications are not usually necessary. If your lock has to turn more than 180 degrees, you may want to modify your motor for continuous rotation .","title":"Step 1: The Servo Motor"},{"location":"tutorials/OnionWiki/Projects/Using-Omega-As-Remote-Lock/#step-2-the-motor-casing","text":"You will need a way to attach your motor to your door and turn the lock. You can make a casing for the motor that can attach to your door and hold the motor in place. A small piece of plastic in the shape of the lock's bar should be attached to the motor. An easy way to obtain these is to 3D print them. These are the models we are using.","title":"Step 2: The Motor Casing"},{"location":"tutorials/OnionWiki/Projects/Using-Omega-As-Remote-Lock/#step-3-storing-lock-state-using-uci","text":"OpenWRT is installed on the omega so you are able to use UCI to store configurations on the omega. So, we will use this to store the status of the lock. If your lock needs to turn more than 180 degrees, this would prevent the motor from applying a force on already locked/unlocked doors.","title":"Step 3: Storing lock state using UCI"},{"location":"tutorials/OnionWiki/Projects/Using-Omega-As-Remote-Lock/#step-4-controlling-your-servo-through-ubus","text":"We will use the ubus to run commands from the app. For more information about the ubus, please take a look at our ubus tutorial series . To setup a new ubus service: first navigate to /usr/libexec/rpcd/ and then we can use a template to build the ubus service. If you modified your servomotor, the sleep integer may have to be adjusted based on how much it is required to turn. Otherwise, you do not need conditional statements. The script we have basically runs the motor on channel 8 for 'sleep' seconds and set the state of the lock. If you are using UCI, you may want to add a function to force the motor to a position in case the lock status is incorrect. This may happen if someone uses a key to unlock a door so the status is still locked. Our ubus service code can be found in the GitHub repo .","title":"Step 4: Controlling your servo through ubus"},{"location":"tutorials/OnionWiki/Projects/Using-Omega-As-Remote-Lock/#step-5-adding-ubus-permissions","text":"In order to run ubus commands outside of the terminal, you must first include the functions in the ubus permissions file. Navigate to /usr/share/rpcd/acl.d/ In onion-console.json, add your ubus functions under read:ubus: and write:ubus:","title":"Step 5: Adding ubus Permissions"},{"location":"tutorials/OnionWiki/Projects/Using-Omega-As-Remote-Lock/#step-6-create-an-app","text":"Having an app to request functions is a lot easier and has a better UI than the terminal. There is an app template at /www/apps/ which you can use to build an app. Copy the onion-template folder and give it an app name. Edit the app.json and icon.png files to register it. Set the icon value to \u201ctrue\u201d for your app to show up on the console. Our example code for the app is located on GitHub. We are using the Polymer framework to create an HTML element. You may look in the files of other apps to see how your code should be organized. This is what the UI looks like. You are now finished. Attach your motor to your door and test it. Don't forget to reboot your omega!","title":"Step 6: Create an app"},{"location":"tutorials/OnionWiki/Projects/Using-Omega-As-Remote-Lock/#using-the-project","text":"Simply press the buttons on your app to tell the servo to lock or unlock your door.","title":"Using the Project"},{"location":"tutorials/OnionWiki/Projects/Using-Omega-As-Remote-Lock/#going-further","text":"You may want to connect your app to the web so it can be used even when you're not within range of the WiFi network to which the Omega is connected.","title":"Going Further"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/1.Installing-ShairportSync/","text":"Streaming Music with Airplay In this tutorial, we will go through how to make Omega as a airplay player. [[ TOC ]] Overview Tutorial Difficulty: Beginner Time Required: 10 minutes Required Materials: * a USB cable (not showing up on the picture) * The Omega * a mini dock or expansion dock * a USB audio sound card * a normal music output device (i.e. speakers, earphones). Connect all the components as following: Background Info What is Airplay Airplay is a wireless streaming protocol used by Apple Inc that allows users to stream mainly audio and video between different devices. This tutorial shows how to enable Omega with Airplay function so that users could stream audio from other devices (e.g. phones, tablets) and output from Omega. Install Shairport-Sync onto Omega To enable Airplay, we are basically installing an opensorce software Shairport-Sync onto Omega. This software makes devices able to play music through Airplay. Step 1: Uninstall avahi-nodbus-daemon To install Shairport-Sync, we need to install avahi-dbus-daemon first, but there is already avahi-nodbus-daemon on Omega, so we need to uninstall it. $ opkg remove avahi-nodbus-daemon --force-depends Step 2: Download avahi-dbus-daemon from openWRT and Install We can get avahi-dbus-daemon from openWRT download page , openWRT is an open source platform, and there are a lot of packages avaliable.Or we can use opkg method, but whichever method we are using, we need to update the package first. $ opkg update $ opkg install avahi-dbus-daemon --force-overwrite Step 3: Download Shairport-Sync and Install If you would like to install the newest version of Shairport-Sync (it keeps updating) and you know how to build binary package, you can download it from the above website. Else, we can download an already made binary package from openWRT download page (version 2.1.15) or from a contributor on github (version 2.6.0) (Please visit Advanced Settings for more information about later version). For Shairport-Sync (version 2.4.0) or later, it enables users to set password for Airplay, to remote control from Omega, to track the audio, and more fantastic features! openWRT package: $ opkg install shairport-sync Step 4: Reboot Omega and Run it! $ reboot For version 2.1.15, it seems when we are trying to run it, it outputs an error message: $ shairport-sync start up could not bind any listen sockets! However, it does not really matter. Even though you are not running it, as long as the Omega is started up, the Airplay option is showing on the phone and you can stream music now! (If you want learn more features or advanced functions about Shairport-Sync, please visit Advanced Settings .) Basic Configuration The configuration file for version 2.1.15 is quite different from vesion 2.6. For this tutorial, I am just going to show the very basic of the version 2.1.15 configuration file. If you would like to learn more about version 2.6 or later configuration file, please visit Advanced Settings . The configuration file for version 2.1.15 is under the following path: /etc/config/shairport-sync. Now you can custom your shairport-sync as you want. For example, if you want to change your Airplay name showing on the devices, you can uncomment it first and change it. (!! Caution: There is a bug for the display of Airplay on iPhone, when you changed the device name and reboot, the previous name might show up on your device, just ignore it. ) How to Use Airplay Just in case if you do not know how to use Airplay on iPhone or Android, we are providing a simple tutorial for you. iPhone users Due to Airplay is developed by Apple Inc, it is really convenient for iPhone users to use the airplay function. Step 1. Make sure there is any of the Airplay devices under the same wifi connection, or make sure you are running shairport-sync on Omega. Step 2. Open the control center on your iPhone. Tap on Airplay button and choose the device that you want to play music on. (If there is no Airplay button, that means there is no Airplay device available.) Android Users For Android users, it is not complicated to use Airplay at all. All you need to do is to download an app from Google Play. There are various of Airplay apps avaliable, and what is showing below is one of them named \"AllConnect\". Step 1. Download \"AllConnect\" from Google Play. It is a free software, so you do not need to worry about paying any extra. Make sure there is any of the Airplay devices under the same wifi connection, or make sure you are running shairport-sync on Omega. Step 2. Open \"AllConnect\". Tap on the little TV token on the top, and choose the device that you want to play music on. (If the music drops off, you can try turn off \"wifi optimization\" option under Settings - Wlan - Advanced wi-fi) Acknowledgements shairport sync -git hub","title":"Streaming Music with Airplay"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/1.Installing-ShairportSync/#streaming-music-with-airplay","text":"In this tutorial, we will go through how to make Omega as a airplay player. [[ TOC ]]","title":"Streaming Music with Airplay"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/1.Installing-ShairportSync/#overview","text":"Tutorial Difficulty: Beginner Time Required: 10 minutes Required Materials: * a USB cable (not showing up on the picture) * The Omega * a mini dock or expansion dock * a USB audio sound card * a normal music output device (i.e. speakers, earphones). Connect all the components as following:","title":"Overview"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/1.Installing-ShairportSync/#background-info","text":"","title":"Background Info"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/1.Installing-ShairportSync/#what-is-airplay","text":"Airplay is a wireless streaming protocol used by Apple Inc that allows users to stream mainly audio and video between different devices. This tutorial shows how to enable Omega with Airplay function so that users could stream audio from other devices (e.g. phones, tablets) and output from Omega.","title":"What is Airplay"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/1.Installing-ShairportSync/#install-shairport-sync-onto-omega","text":"To enable Airplay, we are basically installing an opensorce software Shairport-Sync onto Omega. This software makes devices able to play music through Airplay.","title":"Install Shairport-Sync onto Omega"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/1.Installing-ShairportSync/#step-1-uninstall-avahi-nodbus-daemon","text":"To install Shairport-Sync, we need to install avahi-dbus-daemon first, but there is already avahi-nodbus-daemon on Omega, so we need to uninstall it. $ opkg remove avahi-nodbus-daemon --force-depends","title":"Step 1: Uninstall avahi-nodbus-daemon"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/1.Installing-ShairportSync/#step-2-download-avahi-dbus-daemon-from-openwrt-and-install","text":"We can get avahi-dbus-daemon from openWRT download page , openWRT is an open source platform, and there are a lot of packages avaliable.Or we can use opkg method, but whichever method we are using, we need to update the package first. $ opkg update $ opkg install avahi-dbus-daemon --force-overwrite","title":"Step 2: Download avahi-dbus-daemon from openWRT and Install"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/1.Installing-ShairportSync/#step-3-download-shairport-sync-and-install","text":"If you would like to install the newest version of Shairport-Sync (it keeps updating) and you know how to build binary package, you can download it from the above website. Else, we can download an already made binary package from openWRT download page (version 2.1.15) or from a contributor on github (version 2.6.0) (Please visit Advanced Settings for more information about later version). For Shairport-Sync (version 2.4.0) or later, it enables users to set password for Airplay, to remote control from Omega, to track the audio, and more fantastic features! openWRT package: $ opkg install shairport-sync","title":"Step 3: Download Shairport-Sync and Install"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/1.Installing-ShairportSync/#step-4-reboot-omega-and-run-it","text":"$ reboot For version 2.1.15, it seems when we are trying to run it, it outputs an error message: $ shairport-sync start up could not bind any listen sockets! However, it does not really matter. Even though you are not running it, as long as the Omega is started up, the Airplay option is showing on the phone and you can stream music now! (If you want learn more features or advanced functions about Shairport-Sync, please visit Advanced Settings .)","title":"Step 4: Reboot Omega and Run it!"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/1.Installing-ShairportSync/#basic-configuration","text":"The configuration file for version 2.1.15 is quite different from vesion 2.6. For this tutorial, I am just going to show the very basic of the version 2.1.15 configuration file. If you would like to learn more about version 2.6 or later configuration file, please visit Advanced Settings . The configuration file for version 2.1.15 is under the following path: /etc/config/shairport-sync. Now you can custom your shairport-sync as you want. For example, if you want to change your Airplay name showing on the devices, you can uncomment it first and change it. (!! Caution: There is a bug for the display of Airplay on iPhone, when you changed the device name and reboot, the previous name might show up on your device, just ignore it. )","title":"Basic Configuration"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/1.Installing-ShairportSync/#how-to-use-airplay","text":"Just in case if you do not know how to use Airplay on iPhone or Android, we are providing a simple tutorial for you.","title":"How to Use Airplay"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/1.Installing-ShairportSync/#iphone-users","text":"Due to Airplay is developed by Apple Inc, it is really convenient for iPhone users to use the airplay function. Step 1. Make sure there is any of the Airplay devices under the same wifi connection, or make sure you are running shairport-sync on Omega. Step 2. Open the control center on your iPhone. Tap on Airplay button and choose the device that you want to play music on. (If there is no Airplay button, that means there is no Airplay device available.)","title":"iPhone users"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/1.Installing-ShairportSync/#android-users","text":"For Android users, it is not complicated to use Airplay at all. All you need to do is to download an app from Google Play. There are various of Airplay apps avaliable, and what is showing below is one of them named \"AllConnect\". Step 1. Download \"AllConnect\" from Google Play. It is a free software, so you do not need to worry about paying any extra. Make sure there is any of the Airplay devices under the same wifi connection, or make sure you are running shairport-sync on Omega. Step 2. Open \"AllConnect\". Tap on the little TV token on the top, and choose the device that you want to play music on. (If the music drops off, you can try turn off \"wifi optimization\" option under Settings - Wlan - Advanced wi-fi)","title":"Android Users"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/1.Installing-ShairportSync/#acknowledgements","text":"shairport sync -git hub","title":"Acknowledgements"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/2.Advanced-Settings/","text":"Advanced Settings This tutorial is going to take you to further updateing your shairport sync. [[ TOC ]] Shairport-Sync Update To enable Shairport-Sync with some more advanced features, we need to install Shairport-Sync after version 2.4.0. If you know how to build package, you can visit Shairport-Sync](https://github.com/mikebrady/shairport-sync) for the newest version, else, there is an already made package from a contributor on github (version 2.6.0). You can check your Shairport-Sync version by running the following command: $ shairport-sync -V probonopd (github) package: $ wget https://github.com/probonopd/shairport-sync-for-openwrt/releases/download/20160119/shairport-sync-openssl_2.6-1_ar71xx.ipk $ opkg install shairport-sync-openssl_2.6-1_ar71xx.ipk $ reboot $ shairport-sync start up If you would like to get some more detailed information, you can enable verbose mode by typing -v , -vv , or -vvv upon how detailed information you need. Configuration File For Shairport-Sync 2.6, the configuration file is quite different from version 2.1.15. If you would like to custom it, you can find the configuration file by typing the following command: $ vi /etc/shairport-sync.conf Now, you can custom your Airplay by changing the conent: Setting Password (!! Caution: After testing, it seems Android devices are not capable for password and the following features, only IOS devices could perfectly run it. ) You can easily find there is a password option in the configuration file, if you would like to protect your device, just uncomment it and set it to whatever you like! Enable Shairport-Sync with metadata I am going to show you some of the advanced features of Shairport-Sync, but the first thing you need to do is to enable the metadata. To enable metadata, you just simply need to change the following: Now, it is time to display something advanced.","title":"Advanced Settings"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/2.Advanced-Settings/#advanced-settings","text":"This tutorial is going to take you to further updateing your shairport sync. [[ TOC ]]","title":"Advanced Settings"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/2.Advanced-Settings/#shairport-sync-update","text":"To enable Shairport-Sync with some more advanced features, we need to install Shairport-Sync after version 2.4.0. If you know how to build package, you can visit Shairport-Sync](https://github.com/mikebrady/shairport-sync) for the newest version, else, there is an already made package from a contributor on github (version 2.6.0). You can check your Shairport-Sync version by running the following command: $ shairport-sync -V probonopd (github) package: $ wget https://github.com/probonopd/shairport-sync-for-openwrt/releases/download/20160119/shairport-sync-openssl_2.6-1_ar71xx.ipk $ opkg install shairport-sync-openssl_2.6-1_ar71xx.ipk $ reboot $ shairport-sync start up If you would like to get some more detailed information, you can enable verbose mode by typing -v , -vv , or -vvv upon how detailed information you need.","title":"Shairport-Sync Update"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/2.Advanced-Settings/#configuration-file","text":"For Shairport-Sync 2.6, the configuration file is quite different from version 2.1.15. If you would like to custom it, you can find the configuration file by typing the following command: $ vi /etc/shairport-sync.conf Now, you can custom your Airplay by changing the conent:","title":"Configuration File"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/2.Advanced-Settings/#setting-password","text":"(!! Caution: After testing, it seems Android devices are not capable for password and the following features, only IOS devices could perfectly run it. ) You can easily find there is a password option in the configuration file, if you would like to protect your device, just uncomment it and set it to whatever you like!","title":"Setting Password"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/2.Advanced-Settings/#enable-shairport-sync-with-metadata","text":"I am going to show you some of the advanced features of Shairport-Sync, but the first thing you need to do is to enable the metadata. To enable metadata, you just simply need to change the following: Now, it is time to display something advanced.","title":"Enable Shairport-Sync with metadata"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/3.Put-Airplay-into-Practice/","text":"Put Airplay into Practice This tutorial will go through how you can make other audio devices able to play music remotely by embedding Omega into it. [[ TOC ]] Overview Tutorial Difficulty: Intermediate Time Required: 1 hour or more (depends on devices) Required Materials: * an alarm clock (or any devices you would like to play music on) * an Omega * a screw driver * a soldering station * electric wire * a voltmeter * a USB soundcard * a USB cable (better long enough) Useful Experience: * Electrical stuff Background Info As showed in previous tutorial, we can enable Omega with Airplay function. Now, I am going to put it into practice. This is an alarm clock, but it can play music through speakers or headphone from CD or AM/FM. I am going to hack the FM radio signal and put our Airplay music signal in. Step 1: Take the alarm clock apart To hack FM signal, we need to touch the motherboard inside first. On this step, we are mostly doing some physical work, so I am not going to state much on it. Take the bottom part apart Take the CD drive apart This is when CD drive is on This is how it looks like without CD drive. This is the motherboard, it is where we are going to do some modifying. I am going to do the following steps without taking farther more. If you feel that it is not convenient to do following steps, you can take anything that blocks you to do it. Step 2: Find FM Signal Path Since we have already seen the motherboard, now we are able to find the FM signal path. This step requires certain electronic knowledge, so plase make sure you know what you are doing before doing it. Different devices have different setups, so try to find your own audio signal path that you want to hack. This procedure will take some time, but after that, it will be all fine! On the picture below, I have alredy marked all the components related. Because I am going to hack the FM only, so I focus more on the switch. If you would like disable all of its original functions, you could hack the amplifier directly. Because I am trying to hack the soundcard on the next step, the signal being received is audio signal. That is also one of the reason why I am going to hack on the swtich. From the swtich, all signals are seperated and then go directly to amplifier and come out from speaker, so I am going to replace FM audio signal by Airplay audio signal. After test, I finally find out that this pin is for FM only. When swtich to FM, it will be connected to other pins, so I going to put the audio signal through this pin only. Step 3: Hack the Sound Card From this step, we start to do some soldering. If you don't know how to do it, please find some videos on Youtube or other websites before you actually start. Remember, safety first (Unless you want some barbeque for dinner)! This sound card is really simple: on the left, there lies a headphone jack, the other one is for microphone. From the bottom to top, it is left, right, and ground respectively. The audio signals are coming out from left and right so What I am doing is to put a wire connected to both left and right, I would call it \"audio wire\". Then I am going to put another wire connected to ground and call it \"ground wire\", and soldering the wires on sound card. Well, on this picture, I only did soldering on left, but I did the same thing on right when doing further. Step 4: Hack FM Audio Signal before you are trying to hack whatever audio signal, please make sure you would not ruin your device before you do it. Next, soldering the audio wire on where the FM audio signals go into the swtich, and soldering the ground wire on alarm clock's ground wire. Here is the switch. This picture does not look exactly the same as the next one, as I said, I did some further soldering on the right. Then cut the trace connecting FM and the pin, so that FM signals will not interface with Airplay audio signals. Put them back together. Drill a hole and let the USB cable get through. We are done! Using the Project This is how we put Omega Airplay into practice, now, you are able to play music through an alarm clock! However, we need to connect Omega to a power source outside, that is why I said the USB cable should be long enough. If you know how to put a power USB socket inside an alarm clock or whatever your device is, that would be perfect, just do it!","title":"Put Airplay into Practice"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/3.Put-Airplay-into-Practice/#put-airplay-into-practice","text":"This tutorial will go through how you can make other audio devices able to play music remotely by embedding Omega into it. [[ TOC ]]","title":"Put Airplay into Practice"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/3.Put-Airplay-into-Practice/#overview","text":"Tutorial Difficulty: Intermediate Time Required: 1 hour or more (depends on devices) Required Materials: * an alarm clock (or any devices you would like to play music on) * an Omega * a screw driver * a soldering station * electric wire * a voltmeter * a USB soundcard * a USB cable (better long enough) Useful Experience: * Electrical stuff","title":"Overview"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/3.Put-Airplay-into-Practice/#background-info","text":"As showed in previous tutorial, we can enable Omega with Airplay function. Now, I am going to put it into practice. This is an alarm clock, but it can play music through speakers or headphone from CD or AM/FM. I am going to hack the FM radio signal and put our Airplay music signal in.","title":"Background Info"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/3.Put-Airplay-into-Practice/#step-1-take-the-alarm-clock-apart","text":"To hack FM signal, we need to touch the motherboard inside first. On this step, we are mostly doing some physical work, so I am not going to state much on it. Take the bottom part apart Take the CD drive apart This is when CD drive is on This is how it looks like without CD drive. This is the motherboard, it is where we are going to do some modifying. I am going to do the following steps without taking farther more. If you feel that it is not convenient to do following steps, you can take anything that blocks you to do it.","title":"Step 1: Take the alarm clock apart"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/3.Put-Airplay-into-Practice/#step-2-find-fm-signal-path","text":"Since we have already seen the motherboard, now we are able to find the FM signal path. This step requires certain electronic knowledge, so plase make sure you know what you are doing before doing it. Different devices have different setups, so try to find your own audio signal path that you want to hack. This procedure will take some time, but after that, it will be all fine! On the picture below, I have alredy marked all the components related. Because I am going to hack the FM only, so I focus more on the switch. If you would like disable all of its original functions, you could hack the amplifier directly. Because I am trying to hack the soundcard on the next step, the signal being received is audio signal. That is also one of the reason why I am going to hack on the swtich. From the swtich, all signals are seperated and then go directly to amplifier and come out from speaker, so I am going to replace FM audio signal by Airplay audio signal. After test, I finally find out that this pin is for FM only. When swtich to FM, it will be connected to other pins, so I going to put the audio signal through this pin only.","title":"Step 2: Find FM Signal Path"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/3.Put-Airplay-into-Practice/#step-3-hack-the-sound-card","text":"From this step, we start to do some soldering. If you don't know how to do it, please find some videos on Youtube or other websites before you actually start. Remember, safety first (Unless you want some barbeque for dinner)! This sound card is really simple: on the left, there lies a headphone jack, the other one is for microphone. From the bottom to top, it is left, right, and ground respectively. The audio signals are coming out from left and right so What I am doing is to put a wire connected to both left and right, I would call it \"audio wire\". Then I am going to put another wire connected to ground and call it \"ground wire\", and soldering the wires on sound card. Well, on this picture, I only did soldering on left, but I did the same thing on right when doing further.","title":"Step 3: Hack the Sound Card"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/3.Put-Airplay-into-Practice/#step-4-hack-fm-audio-signal","text":"before you are trying to hack whatever audio signal, please make sure you would not ruin your device before you do it. Next, soldering the audio wire on where the FM audio signals go into the swtich, and soldering the ground wire on alarm clock's ground wire. Here is the switch. This picture does not look exactly the same as the next one, as I said, I did some further soldering on the right. Then cut the trace connecting FM and the pin, so that FM signals will not interface with Airplay audio signals. Put them back together. Drill a hole and let the USB cable get through. We are done!","title":"Step 4: Hack FM Audio Signal"},{"location":"tutorials/OnionWiki/Projects/How-To-Stream-music-Using-Airplay/3.Put-Airplay-into-Practice/#using-the-project","text":"This is how we put Omega Airplay into practice, now, you are able to play music through an alarm clock! However, we need to connect Omega to a power source outside, that is why I said the USB cable should be long enough. If you know how to put a power USB socket inside an alarm clock or whatever your device is, that would be perfect, just do it!","title":"Using the Project"},{"location":"tutorials/OnionWiki/Tutorials/Adding-Public-Key-to-Omega/","text":"Adding your Public Key to the Omega [[ TOC ]] What is a Public Key A public key is one part of a cryptographic algorithm that is used to secure digital communications. On the Omega specifically, a public key can be setup so that you don't have to type your password for everytime you use SSH or an SSH-based service (rsync, scp, sftp, etc) . For more, information on public and private keys, check out the Wikipedia article on this subject , it goes into a lot of detail Setup Steps Find or Generate your Public Key. Find an Existing Key If you have a key already generated on a Unix based system, it should be in ~/.ssh/id_pub.rsa Optionally Generate a Key If not, follow these guides for OS X , Windows , and Linux . Copy the contents of the key to your clipboard Add your public key to the Omega Create the following file: /etc/dropbear/authorized_keys Copy and paste your public key into this file. Now your computer will be able to SSH with the Omega without a password!","title":"Adding your Public Key to the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Adding-Public-Key-to-Omega/#adding-your-public-key-to-the-omega","text":"[[ TOC ]]","title":"Adding your Public Key to the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Adding-Public-Key-to-Omega/#what-is-a-public-key","text":"A public key is one part of a cryptographic algorithm that is used to secure digital communications. On the Omega specifically, a public key can be setup so that you don't have to type your password for everytime you use SSH or an SSH-based service (rsync, scp, sftp, etc) . For more, information on public and private keys, check out the Wikipedia article on this subject , it goes into a lot of detail","title":"What is a Public Key"},{"location":"tutorials/OnionWiki/Tutorials/Adding-Public-Key-to-Omega/#setup-steps","text":"","title":"Setup Steps"},{"location":"tutorials/OnionWiki/Tutorials/Adding-Public-Key-to-Omega/#find-or-generate-your-public-key","text":"Find an Existing Key If you have a key already generated on a Unix based system, it should be in ~/.ssh/id_pub.rsa Optionally Generate a Key If not, follow these guides for OS X , Windows , and Linux . Copy the contents of the key to your clipboard","title":"Find or Generate your Public Key."},{"location":"tutorials/OnionWiki/Tutorials/Adding-Public-Key-to-Omega/#add-your-public-key-to-the-omega","text":"Create the following file: /etc/dropbear/authorized_keys Copy and paste your public key into this file. Now your computer will be able to SSH with the Omega without a password!","title":"Add your public key to the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Blinking-Morse-Code-on-LED/","text":"How to Blink Morse Code On the Omega LED Here's a little fun one! You can use the LED on the Omega to send messages in Morse code. To start, you'll need to install the mod-ledtrig-morse package: opkg update opkg install mod-ledtrig-morse Once this is done, a kernel module that can translate text to Morse code and blink the LEDs is automatically installed. But you still need to tell the kernel which LED you want to blink. The kernel exposes a lot of hardware status and configuration options through a virtual filesystem under /sys . (I.e. the files under /sys aren't actually files, but they look and act like files to make it very easy to access them from the command line and in scripts or programs.) To tell the kernel that we are going to use the new Morse code module, set the LED trigger condition for the Onion system LED to morse by using the echo command to write the setting into the virtual file: echo morse /sys/class/leds/onion\\:amber\\:system/trigger You can verify that it worked by using cat to look at the virtual file: root@Omega-12D9:~# cat /sys/class/leds/onion\\:amber\\:system/trigger none timer default-on netdev transient gpio heartbeat [morse] oneshot usbdev phy0rx phy0tx phy0assoc phy0radio phy0tpt You can see that morse is selected because it's in brackets. The other text in that file shows the other available options that this particular bit of the kernel can be set to. Anyway, now we have everything set up! We just need to tell the kernel what message to blink on the LED. Conveniently, once the morse option is selected, the kernel creates a new virtual file for that called (unsurprisingly enough) message . We can use echo again to put text there: echo Hello, Onion /sys/class/leds/onion\\:amber\\:system/message Now watch your LED! If it's too fast or too slow, you can change the speed with the delay file that also gets created. E.g. root@Omega-12D9:~# cat /sys/devices/platform/leds-gpio/leds/onion\\:amber\\:system/delay 50 That's pretty fast! Let's slow it down a bit so that people like me who aren't experts can read it: root@Omega-12D9:~# echo 100 /sys/devices/platform/leds-gpio/leds/onion\\:amber\\:system/delay The message will keep looping forever or until you change it. To stop it, you can either clear the message entirely: echo /sys/class/leds/onion\\:amber\\:system/message or change the LED trigger to something else: echo default-on /sys/class/leds/onion\\:amber\\:system/trigger Feel free to try some of the other options as well! Remember that you can view the available options by using cat as mentioned above. (The heartbeat option is fun too.) There are many more settings status files available for other devices in /sys and it can be a great way to learn about working with hardware under Linux. Credit Thanks to Fader for writing this awesome tutorial!","title":"How to Blink Morse Code On the Omega LED"},{"location":"tutorials/OnionWiki/Tutorials/Blinking-Morse-Code-on-LED/#how-to-blink-morse-code-on-the-omega-led","text":"Here's a little fun one! You can use the LED on the Omega to send messages in Morse code. To start, you'll need to install the mod-ledtrig-morse package: opkg update opkg install mod-ledtrig-morse Once this is done, a kernel module that can translate text to Morse code and blink the LEDs is automatically installed. But you still need to tell the kernel which LED you want to blink. The kernel exposes a lot of hardware status and configuration options through a virtual filesystem under /sys . (I.e. the files under /sys aren't actually files, but they look and act like files to make it very easy to access them from the command line and in scripts or programs.) To tell the kernel that we are going to use the new Morse code module, set the LED trigger condition for the Onion system LED to morse by using the echo command to write the setting into the virtual file: echo morse /sys/class/leds/onion\\:amber\\:system/trigger You can verify that it worked by using cat to look at the virtual file: root@Omega-12D9:~# cat /sys/class/leds/onion\\:amber\\:system/trigger none timer default-on netdev transient gpio heartbeat [morse] oneshot usbdev phy0rx phy0tx phy0assoc phy0radio phy0tpt You can see that morse is selected because it's in brackets. The other text in that file shows the other available options that this particular bit of the kernel can be set to. Anyway, now we have everything set up! We just need to tell the kernel what message to blink on the LED. Conveniently, once the morse option is selected, the kernel creates a new virtual file for that called (unsurprisingly enough) message . We can use echo again to put text there: echo Hello, Onion /sys/class/leds/onion\\:amber\\:system/message Now watch your LED! If it's too fast or too slow, you can change the speed with the delay file that also gets created. E.g. root@Omega-12D9:~# cat /sys/devices/platform/leds-gpio/leds/onion\\:amber\\:system/delay 50 That's pretty fast! Let's slow it down a bit so that people like me who aren't experts can read it: root@Omega-12D9:~# echo 100 /sys/devices/platform/leds-gpio/leds/onion\\:amber\\:system/delay The message will keep looping forever or until you change it. To stop it, you can either clear the message entirely: echo /sys/class/leds/onion\\:amber\\:system/message or change the LED trigger to something else: echo default-on /sys/class/leds/onion\\:amber\\:system/trigger Feel free to try some of the other options as well! Remember that you can view the available options by using cat as mentioned above. (The heartbeat option is fun too.) There are many more settings status files available for other devices in /sys and it can be a great way to learn about working with hardware under Linux.","title":"How to Blink Morse Code On the Omega LED"},{"location":"tutorials/OnionWiki/Tutorials/Blinking-Morse-Code-on-LED/#credit","text":"Thanks to Fader for writing this awesome tutorial!","title":"Credit"},{"location":"tutorials/OnionWiki/Tutorials/Bluetooth-Streaming-Audio/","text":"Bluetooth Audio with Onion BLE In this project we will turning our Omega into an bluetooth audio sink. This tutorial will allow you to retrofit your old speakers into bluetooth controlled speakers. The main goal of this project is to expose the Onion community to the bluetooth capabilities on OpenWRT. In this tutorial, we will learn how to use the BlueZ package to establish a connection with a remote bluetooth device and the PulseAudio package to source the audio to a USB soundcard. [[ TOC ]] Tutorial Difficulty: Intermediate Time Required: 25 minutes Required Materials: * The Omega * The Expansion Dock * Onion BLE * USB Hub * USB Audio Soundcard * Speakers or Headphones (Something to test the audio with) Useful Experience: * Using BlueZ * Using PulseAudio Background Info In short, Bluetooth LE allows us to transfer information to devices at distances upto 100m apart from each other. The communication consists of two parts, the pairing process and the connection process. The former is to \"introduce\" the devices to each other and the latter is what allows data transfer. The applications for bluetooth are ubiquitous including remote Audio/Video Control, Audio Source/Sink, Serial Communications, File Transfer ... etc. The application is defined by the \"profile\" that is hosted by the device. In our case we are using the BLE as a Audio Source/Sink, so we will only concern ourselves with the 'A2DP' profile. For a more thorough introduction to Bluetooth, refer to the wikipedia page . The Actual Process In a nutshell, we will be connecting our hardware, installing the necessary packages, connecting our bluetooth device(Android Smartphone) and setting up an audio playback. Let's get started! Step 1: Hardware and Omega Setup Connect your USB soundcard and Onion BLE to the USB Hub and connect the USB hub to the Omega's USB port. We have to use a USB hub, because the omega's expansion only has one USB port and we need to two. Also we will be programming the omega through a serial terminal and will connect the Omega to our computer using a MicroUSB cable. Your hardware setup should look like this. Also, note that I have not connected the speakers to the soundcard. After you are done this, enter to the Omega's command line. In this tutorial, we will be using a serial terminal but you can connect as you see fit. Make sure you are running the latest version of the Omega's firmware(Ver 8 or later), if you need to upgrade you can use the following command. oupgrade Warning! Make sure you have backed up important data on your Omega during this process. Step 2: Installing Packages Here is the list of packages we will be using: obluez-libs obluez-utils opulseaudio-daemon pulseaudio-profiles pulseaudio-tools alsa-lib alsa-utils Before we start installing any packages, we need to run the following command. opkg update Then run the following command to install the packages: opkg install obluez-libs obluez-utils opulseaudio-daemon pulseaudio-profiles pulseaudio-tools alsa-lib alsa-utils You will find that a lot of other dependencies will be installed as well. You should see a screen like this. Fear not if you have the chown/chmod errors, they will not affect us. Step 3: Setting up the PulseAudio Daemon After installation, we need to startup the PulseAudio daemon so that it runs in the background. Credits to the PulseAudio tutorial on the OpenWRT wiki for this section. To do this simply enter the following commands. udevd --daemon chmod 0777 /dev/snd/* mkdir -p /var/lib/pulse pulseaudio --system --disallow-exit --no-cpu-limit The last command tends to create an assortment of warnings and errors. PulseAudio is somewhat unpredictable in this regard. If you have trouble, we recommend rebooting and restarting the process. If your problems persists, make a post in the community blog. As long as PulseAudio daemonizes we are happy. We can check this by running the ps command. ps As you can see, PulseAudio is running for us. Now we can setup our bluetooth devices. Step 4: Remote Bluetooth Device Setup The bluetooth device setup is relatively simple. To make sure your dongle is connected properly run the command. hciconfig -a and to turn on the dongle run the following commands. hciconfig hci0 up hciconfig hci0 sspmode enable hciconfig hci0 piscan At this point your donlge should be blinking a blue light. Now to actually connect to a device we have to use bluetoothctl. Enter the command: bluetoothctl You will enter into the bluetoothctl menu and your dongle will be listed as a controller. Run the following commands to make the dongle discoverable/pairable and allow it to discover other devices. agent on discoverable on pairable on scan on At this point make sure phone or other remote device's bluetooth is on and discoverable. Once your device is located, pair with it using the following command. pair XX:XX:XX:XX:XX:XX At this point you will be prompted to enter a PIN on the command line which you will then have to re-enter on you remote device for verification. Once you are done this, you may or may not be connected to the remote device. After this you should, we need to trust the remote device so that the remote device can initiate the connection. To do this, enter the command: trust XX:XX:XX:XX:XX:XX Try initiating the connection from your device and it should work. You should see a screen like so. The remote device should be registered as an input device. You can now quit the bluetooth menu with the command: quit Also, your phone should recognize the OnionBLE as a media audio device. Step 5: Audio Playback with PulseAudio Now you can check to make sure your device is still connected by running this command. hcitool con Your device should be listed, if you see nothing. Try initiating the connection again from the remote device. If that doesn't work go back to the previous step. To get the audio to play, we will be using the pactl utility. To see our audio sources run the command: pactl list sources Your device should show up as a source. For me it is source # 2. We should do the same for the audio sinks, to confirm that our USB sound card is listed as a sink. pactl list sinks Now for the moment we've all be waiting for. Connect your speakers or headphones, MAKE SURE THE VOLUME IS LOW. Run the command below, replacing the source/sink names as listed in the previous two commands. pactl load-module module-loopback source=bluez_source.XX_XX_XX_XX_XX_XX sink= Sink Name rate=44100 adjust_time=0 If you see a number in the command line, it means its working. You should be hearing music right now. We should mention that when testing with the iphone, we established connection however only heard noise. Perhaps someone within the community can figure out the compatibility issue. You can control the volume using pactl. pactl set-sink-volume 1 -25% Using the Project The onion modified packages for pulseaudio and bluez5 are encouraged to be used for other projects as users see fit. We encourage users to use this project as a baseline for other bluetooth projects. This is our first bluetooth project and will likely be adding more in the near future. Going Further We encourage the Onion and OpenWRT community to experiment and release tutorials on their experience with Bluetooth. We've included a short list of interesting topics: Audio Compatibility with Iphone Automated Pairing/Connection Process(Perhaps a script to handle bluetoothctl and PulseAudio) File Transfer using obex Serial Communication rfcomm Related Tutorials OpenWRT Bluetooth Audio OpenWRT USB Bluetooth OpenWRT pulseaudio Acknowledgements Thanks to the OpenWRT community.","title":"Bluetooth Audio with Onion BLE"},{"location":"tutorials/OnionWiki/Tutorials/Bluetooth-Streaming-Audio/#bluetooth-audio-with-onion-ble","text":"In this project we will turning our Omega into an bluetooth audio sink. This tutorial will allow you to retrofit your old speakers into bluetooth controlled speakers. The main goal of this project is to expose the Onion community to the bluetooth capabilities on OpenWRT. In this tutorial, we will learn how to use the BlueZ package to establish a connection with a remote bluetooth device and the PulseAudio package to source the audio to a USB soundcard. [[ TOC ]] Tutorial Difficulty: Intermediate Time Required: 25 minutes Required Materials: * The Omega * The Expansion Dock * Onion BLE * USB Hub * USB Audio Soundcard * Speakers or Headphones (Something to test the audio with) Useful Experience: * Using BlueZ * Using PulseAudio","title":"Bluetooth Audio with Onion BLE"},{"location":"tutorials/OnionWiki/Tutorials/Bluetooth-Streaming-Audio/#background-info","text":"In short, Bluetooth LE allows us to transfer information to devices at distances upto 100m apart from each other. The communication consists of two parts, the pairing process and the connection process. The former is to \"introduce\" the devices to each other and the latter is what allows data transfer. The applications for bluetooth are ubiquitous including remote Audio/Video Control, Audio Source/Sink, Serial Communications, File Transfer ... etc. The application is defined by the \"profile\" that is hosted by the device. In our case we are using the BLE as a Audio Source/Sink, so we will only concern ourselves with the 'A2DP' profile. For a more thorough introduction to Bluetooth, refer to the wikipedia page .","title":"Background Info"},{"location":"tutorials/OnionWiki/Tutorials/Bluetooth-Streaming-Audio/#the-actual-process","text":"In a nutshell, we will be connecting our hardware, installing the necessary packages, connecting our bluetooth device(Android Smartphone) and setting up an audio playback. Let's get started!","title":"The Actual Process"},{"location":"tutorials/OnionWiki/Tutorials/Bluetooth-Streaming-Audio/#step-1-hardware-and-omega-setup","text":"Connect your USB soundcard and Onion BLE to the USB Hub and connect the USB hub to the Omega's USB port. We have to use a USB hub, because the omega's expansion only has one USB port and we need to two. Also we will be programming the omega through a serial terminal and will connect the Omega to our computer using a MicroUSB cable. Your hardware setup should look like this. Also, note that I have not connected the speakers to the soundcard. After you are done this, enter to the Omega's command line. In this tutorial, we will be using a serial terminal but you can connect as you see fit. Make sure you are running the latest version of the Omega's firmware(Ver 8 or later), if you need to upgrade you can use the following command. oupgrade Warning! Make sure you have backed up important data on your Omega during this process.","title":"Step 1: Hardware and Omega Setup"},{"location":"tutorials/OnionWiki/Tutorials/Bluetooth-Streaming-Audio/#step-2-installing-packages","text":"Here is the list of packages we will be using: obluez-libs obluez-utils opulseaudio-daemon pulseaudio-profiles pulseaudio-tools alsa-lib alsa-utils Before we start installing any packages, we need to run the following command. opkg update Then run the following command to install the packages: opkg install obluez-libs obluez-utils opulseaudio-daemon pulseaudio-profiles pulseaudio-tools alsa-lib alsa-utils You will find that a lot of other dependencies will be installed as well. You should see a screen like this. Fear not if you have the chown/chmod errors, they will not affect us.","title":"Step 2: Installing Packages"},{"location":"tutorials/OnionWiki/Tutorials/Bluetooth-Streaming-Audio/#step-3-setting-up-the-pulseaudio-daemon","text":"After installation, we need to startup the PulseAudio daemon so that it runs in the background. Credits to the PulseAudio tutorial on the OpenWRT wiki for this section. To do this simply enter the following commands. udevd --daemon chmod 0777 /dev/snd/* mkdir -p /var/lib/pulse pulseaudio --system --disallow-exit --no-cpu-limit The last command tends to create an assortment of warnings and errors. PulseAudio is somewhat unpredictable in this regard. If you have trouble, we recommend rebooting and restarting the process. If your problems persists, make a post in the community blog. As long as PulseAudio daemonizes we are happy. We can check this by running the ps command. ps As you can see, PulseAudio is running for us. Now we can setup our bluetooth devices.","title":"Step 3: Setting up the PulseAudio Daemon"},{"location":"tutorials/OnionWiki/Tutorials/Bluetooth-Streaming-Audio/#step-4-remote-bluetooth-device-setup","text":"The bluetooth device setup is relatively simple. To make sure your dongle is connected properly run the command. hciconfig -a and to turn on the dongle run the following commands. hciconfig hci0 up hciconfig hci0 sspmode enable hciconfig hci0 piscan At this point your donlge should be blinking a blue light. Now to actually connect to a device we have to use bluetoothctl. Enter the command: bluetoothctl You will enter into the bluetoothctl menu and your dongle will be listed as a controller. Run the following commands to make the dongle discoverable/pairable and allow it to discover other devices. agent on discoverable on pairable on scan on At this point make sure phone or other remote device's bluetooth is on and discoverable. Once your device is located, pair with it using the following command. pair XX:XX:XX:XX:XX:XX At this point you will be prompted to enter a PIN on the command line which you will then have to re-enter on you remote device for verification. Once you are done this, you may or may not be connected to the remote device. After this you should, we need to trust the remote device so that the remote device can initiate the connection. To do this, enter the command: trust XX:XX:XX:XX:XX:XX Try initiating the connection from your device and it should work. You should see a screen like so. The remote device should be registered as an input device. You can now quit the bluetooth menu with the command: quit Also, your phone should recognize the OnionBLE as a media audio device.","title":"Step 4: Remote Bluetooth Device Setup"},{"location":"tutorials/OnionWiki/Tutorials/Bluetooth-Streaming-Audio/#step-5-audio-playback-with-pulseaudio","text":"Now you can check to make sure your device is still connected by running this command. hcitool con Your device should be listed, if you see nothing. Try initiating the connection again from the remote device. If that doesn't work go back to the previous step. To get the audio to play, we will be using the pactl utility. To see our audio sources run the command: pactl list sources Your device should show up as a source. For me it is source # 2. We should do the same for the audio sinks, to confirm that our USB sound card is listed as a sink. pactl list sinks Now for the moment we've all be waiting for. Connect your speakers or headphones, MAKE SURE THE VOLUME IS LOW. Run the command below, replacing the source/sink names as listed in the previous two commands. pactl load-module module-loopback source=bluez_source.XX_XX_XX_XX_XX_XX sink= Sink Name rate=44100 adjust_time=0 If you see a number in the command line, it means its working. You should be hearing music right now. We should mention that when testing with the iphone, we established connection however only heard noise. Perhaps someone within the community can figure out the compatibility issue. You can control the volume using pactl. pactl set-sink-volume 1 -25%","title":"Step 5: Audio Playback with PulseAudio"},{"location":"tutorials/OnionWiki/Tutorials/Bluetooth-Streaming-Audio/#using-the-project","text":"The onion modified packages for pulseaudio and bluez5 are encouraged to be used for other projects as users see fit. We encourage users to use this project as a baseline for other bluetooth projects. This is our first bluetooth project and will likely be adding more in the near future.","title":"Using the Project"},{"location":"tutorials/OnionWiki/Tutorials/Bluetooth-Streaming-Audio/#going-further","text":"We encourage the Onion and OpenWRT community to experiment and release tutorials on their experience with Bluetooth. We've included a short list of interesting topics: Audio Compatibility with Iphone Automated Pairing/Connection Process(Perhaps a script to handle bluetoothctl and PulseAudio) File Transfer using obex Serial Communication rfcomm","title":"Going Further"},{"location":"tutorials/OnionWiki/Tutorials/Bluetooth-Streaming-Audio/#related-tutorials","text":"OpenWRT Bluetooth Audio OpenWRT USB Bluetooth OpenWRT pulseaudio","title":"Related Tutorials"},{"location":"tutorials/OnionWiki/Tutorials/Bluetooth-Streaming-Audio/#acknowledgements","text":"Thanks to the OpenWRT community.","title":"Acknowledgements"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-Omega-to-Wifi-Hotspot-that-Requres-Login/","text":"Connecting the Omega to Wi-Fi Hotspot that Requires Login In order to connect to some Wi-Fi hostspots in certain hotels or restaurants, you will need to first connect to the Wi-Fi and login via your browser before you can access the Internet. Since the Omega does not have a browser, you will need to use your computer or smartphone to login for the Omega. To connect the Omega to one of these Wi-Fi hotspots, following the following instruction: 1. Enable the Access Point (AP) on the Omega Access Point on the Omega should be enabled by default. If it isn't already enabled, you will need to connect to the Omega via the [[serial terminal|Tutorials/Connecting-to-Omega-via-Serial-Terminal]]. Then, to enable the Access Point, you will need to edit /etc/config/wireless . Uncomment or add the following lines to the file: config wifi-iface option device 'radio0' option network 'wlan' option mode 'ap' option ssid 'Omega AP' option encryption 'psk2' option key 'onioneer' Then, to restart the Wi-Fi service with the new configuration: wifi Your Access Point should be turned on at this point. 2. Connect the Omega to the Wifi router Next, you will need to connect the Omega to the Wi-Fi hotspot of the hotel/restaurants you are in. To do this, you will use the wifisetup command: root@Omega-0104:/# wifisetup Onion Omega Wifi Setup Select from the following: 1) Scan for Wifi networks 2) Type network info q) Exit Selection: Just follow the instruction to scan the Wi-Fi network and connect to it. 3. Use Your Computer/Smartphone to Login for the Omega At this point, your Omega is connected to the Wi-Fi hotspot for the hotel/restaurant, as well as serving its own access point, and the Omega is setup to relay information back and forth between these two Wi-Fi interfaces. This means that you can connect your computer/smartphone to the AP of your Omega, and be able to access data from the Wi-Fi hotspot. If you open up a browser and browse to any website, you should be redirected to a page asking you to login, as if you are connected to the Wi-Fi hotspot directly. You simply need to login to the network with your computer, and your Omega should be able to access the Internet as well.","title":"Connecting the Omega to Wi-Fi Hotspot that Requires Login"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-Omega-to-Wifi-Hotspot-that-Requres-Login/#connecting-the-omega-to-wi-fi-hotspot-that-requires-login","text":"In order to connect to some Wi-Fi hostspots in certain hotels or restaurants, you will need to first connect to the Wi-Fi and login via your browser before you can access the Internet. Since the Omega does not have a browser, you will need to use your computer or smartphone to login for the Omega. To connect the Omega to one of these Wi-Fi hotspots, following the following instruction:","title":"Connecting the Omega to Wi-Fi Hotspot that Requires Login"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-Omega-to-Wifi-Hotspot-that-Requres-Login/#1-enable-the-access-point-ap-on-the-omega","text":"Access Point on the Omega should be enabled by default. If it isn't already enabled, you will need to connect to the Omega via the [[serial terminal|Tutorials/Connecting-to-Omega-via-Serial-Terminal]]. Then, to enable the Access Point, you will need to edit /etc/config/wireless . Uncomment or add the following lines to the file: config wifi-iface option device 'radio0' option network 'wlan' option mode 'ap' option ssid 'Omega AP' option encryption 'psk2' option key 'onioneer' Then, to restart the Wi-Fi service with the new configuration: wifi Your Access Point should be turned on at this point.","title":"1. Enable the Access Point (AP) on the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-Omega-to-Wifi-Hotspot-that-Requres-Login/#2-connect-the-omega-to-the-wifi-router","text":"Next, you will need to connect the Omega to the Wi-Fi hotspot of the hotel/restaurants you are in. To do this, you will use the wifisetup command: root@Omega-0104:/# wifisetup Onion Omega Wifi Setup Select from the following: 1) Scan for Wifi networks 2) Type network info q) Exit Selection: Just follow the instruction to scan the Wi-Fi network and connect to it.","title":"2. Connect the Omega to the Wifi router"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-Omega-to-Wifi-Hotspot-that-Requres-Login/#3-use-your-computersmartphone-to-login-for-the-omega","text":"At this point, your Omega is connected to the Wi-Fi hotspot for the hotel/restaurant, as well as serving its own access point, and the Omega is setup to relay information back and forth between these two Wi-Fi interfaces. This means that you can connect your computer/smartphone to the AP of your Omega, and be able to access data from the Wi-Fi hotspot. If you open up a browser and browse to any website, you should be redirected to a page asking you to login, as if you are connected to the Wi-Fi hotspot directly. You simply need to login to the network with your computer, and your Omega should be able to access the Internet as well.","title":"3. Use Your Computer/Smartphone to Login for the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-to-Enterprise-Secured-Wifi/","text":"Connecting to School Wifi (MSCHAPv2 Auth Type) In this tutorial, we are going through how to connect to WPA/WPA2 Enterprise-secured WiFi that requires a username and a password along with the WiFi password. In most universities, the school wifi has both username and password (i.e. MSCHAPv2 Auth Type), if you are a student or in a place with a log-in system to connect to internet, this tutorial is going to help you out with your fantastic Omega. [[ TOC ]] Overview Tutorial Difficulty: Intermediate Time Required: 5 minutes Required Materials: * The Omega * The Expansion Dock and Ethernet Expansion(optional) Useful Experience: * Openwrt networking Background Info As we know, Omega has built-in wifi, which is very convinent in most cases. However, enterprise-secured wifi networks are not supported right out of the box. In this tutorial, we will connect go through the steps required to connect so you can explore the internet! The Actual Process First of all, you need to connect to another WiFi network since we will be updating some software. You can alternatively use an Ethernet Expansion to access the internet, up to you. The wpad-mini program, which is installed in your omega by default, cannot handle enterprise WiFi authentication, so you need to upgrade it to wpad , which is more powerful. To do this, you need to connect to internet. Step 1: Install the wpad Package As I mentioned, connect to internet first, and then run the following command: $ opkg update $ opkg remove wpad-mini $ opkg install wpad Step 2: Determine the Authentication Type I am assuming you are capable of connecting to the Enterprise secured WiFi through another device, a laptop, for example. You can then easily find what type of authentication the newtork uses: As the picture above, I am using Linux to find the security type, you can do it in Windows as well. So from the picture you can tell the WiFi for University of Waterloo is WPA/WPA2 Mixed Enterprise, and the EAP Type is Protected EAP(peap). In case your network doesn't match the one above, check the OpenWRT networking documentation to find settings that match your network. Step 3: Configure Your Wireless Networks First use wifisetup to add the network to your list of networks. Run vi /etc/config/wireless and go to the very bottom of the file and you will see the entry corresponding to your wifi network: config wifi-iface option device 'radio0' option mode 'sta' option network 'wwan' option ssid 'eduroam' option key ' your password ' option disabled '0' Now, modify this entry with the information corresponding to the network type according to the OpenWRT wiki page mentioned above. config wifi-iface option device 'radio0' option mode 'sta' option network 'wwan' option eap_type 'peap' option ssid 'eduroam' option encryption 'wpa-mixed' option auth 'MSCHAPv2' option identity ' your user name ' option password ' your password ' option disabled '0' The order doesn't matter, as long as all of the options are defined. Step 4: Restart the Service Let's restart the network service by running /etc/init.d/network restart . You should now be connected to the network. If this does not work, try rebooting your Omega. If you still cannot connect to the network, go back and double-check your settings. Otherwise, enjoy your super-secured WiFi connection on your Omega!","title":"Connecting to School Wifi (MSCHAPv2 Auth Type)"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-to-Enterprise-Secured-Wifi/#connecting-to-school-wifi-mschapv2-auth-type","text":"In this tutorial, we are going through how to connect to WPA/WPA2 Enterprise-secured WiFi that requires a username and a password along with the WiFi password. In most universities, the school wifi has both username and password (i.e. MSCHAPv2 Auth Type), if you are a student or in a place with a log-in system to connect to internet, this tutorial is going to help you out with your fantastic Omega. [[ TOC ]]","title":"Connecting to School Wifi (MSCHAPv2 Auth Type)"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-to-Enterprise-Secured-Wifi/#overview","text":"Tutorial Difficulty: Intermediate Time Required: 5 minutes Required Materials: * The Omega * The Expansion Dock and Ethernet Expansion(optional) Useful Experience: * Openwrt networking","title":"Overview"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-to-Enterprise-Secured-Wifi/#background-info","text":"As we know, Omega has built-in wifi, which is very convinent in most cases. However, enterprise-secured wifi networks are not supported right out of the box. In this tutorial, we will connect go through the steps required to connect so you can explore the internet!","title":"Background Info"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-to-Enterprise-Secured-Wifi/#the-actual-process","text":"First of all, you need to connect to another WiFi network since we will be updating some software. You can alternatively use an Ethernet Expansion to access the internet, up to you. The wpad-mini program, which is installed in your omega by default, cannot handle enterprise WiFi authentication, so you need to upgrade it to wpad , which is more powerful. To do this, you need to connect to internet.","title":"The Actual Process"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-to-Enterprise-Secured-Wifi/#step-1-install-the-wpad-package","text":"As I mentioned, connect to internet first, and then run the following command: $ opkg update $ opkg remove wpad-mini $ opkg install wpad","title":"Step 1: Install the wpad Package"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-to-Enterprise-Secured-Wifi/#step-2-determine-the-authentication-type","text":"I am assuming you are capable of connecting to the Enterprise secured WiFi through another device, a laptop, for example. You can then easily find what type of authentication the newtork uses: As the picture above, I am using Linux to find the security type, you can do it in Windows as well. So from the picture you can tell the WiFi for University of Waterloo is WPA/WPA2 Mixed Enterprise, and the EAP Type is Protected EAP(peap). In case your network doesn't match the one above, check the OpenWRT networking documentation to find settings that match your network.","title":"Step 2: Determine the Authentication Type"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-to-Enterprise-Secured-Wifi/#step-3-configure-your-wireless-networks","text":"First use wifisetup to add the network to your list of networks. Run vi /etc/config/wireless and go to the very bottom of the file and you will see the entry corresponding to your wifi network: config wifi-iface option device 'radio0' option mode 'sta' option network 'wwan' option ssid 'eduroam' option key ' your password ' option disabled '0' Now, modify this entry with the information corresponding to the network type according to the OpenWRT wiki page mentioned above. config wifi-iface option device 'radio0' option mode 'sta' option network 'wwan' option eap_type 'peap' option ssid 'eduroam' option encryption 'wpa-mixed' option auth 'MSCHAPv2' option identity ' your user name ' option password ' your password ' option disabled '0' The order doesn't matter, as long as all of the options are defined.","title":"Step 3: Configure Your Wireless Networks"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-to-Enterprise-Secured-Wifi/#step-4-restart-the-service","text":"Let's restart the network service by running /etc/init.d/network restart . You should now be connected to the network. If this does not work, try rebooting your Omega. If you still cannot connect to the network, go back and double-check your settings. Otherwise, enjoy your super-secured WiFi connection on your Omega!","title":"Step 4: Restart the Service"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-to-Omega-via-SSH/","text":"Connect to the Omega via SSH The Omega can be accessed with a [[serial terminal|Tutorials/Connecting-to-Omega-via-Serial-Terminal]] when it is plugged into your computer. You can also use SSH to connect to the Omega as long as it's on and your computer is on the same Wi-Fi network. SSH is cool because it allows you to connect to your Omega wirelessly! If your computer is on the same wifi network as the Omega, the Omega will be accessible via the omega-ABCD.local address. Where ABCD is 4 hex characters that are unique to each Omega and can be seen on the Omega's default AP name or on the Omega command line (seen through a serial connection). OSX Linux (Or other *NIX operating system) Step 1 : Open the Terminal app Step 2 : Run the following command: $ ssh root@omega-ABCD.local When prompted, enter the password By default, the password is: onioneer And you're in Windows Step 1 : Download and install Putty from [[http://the.earth.li/~sgtatham/putty/latest/x86/putty-0.65-installer.exe]]. Step 2 : Configure an SSH connection to omega-ABCD.local on port 22 : Step 3 : Click Open, enter the credentials. By default, the credentials are: Username : root Password : onioneer And you're connected.","title":"Connect to the Omega via SSH"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-to-Omega-via-SSH/#connect-to-the-omega-via-ssh","text":"The Omega can be accessed with a [[serial terminal|Tutorials/Connecting-to-Omega-via-Serial-Terminal]] when it is plugged into your computer. You can also use SSH to connect to the Omega as long as it's on and your computer is on the same Wi-Fi network. SSH is cool because it allows you to connect to your Omega wirelessly! If your computer is on the same wifi network as the Omega, the Omega will be accessible via the omega-ABCD.local address. Where ABCD is 4 hex characters that are unique to each Omega and can be seen on the Omega's default AP name or on the Omega command line (seen through a serial connection).","title":"Connect to the Omega via SSH"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-to-Omega-via-SSH/#osx-linux-or-other-nix-operating-system","text":"Step 1 : Open the Terminal app Step 2 : Run the following command: $ ssh root@omega-ABCD.local When prompted, enter the password By default, the password is: onioneer And you're in","title":"OSX &amp; Linux (Or other *NIX operating system)"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-to-Omega-via-SSH/#windows","text":"Step 1 : Download and install Putty from [[http://the.earth.li/~sgtatham/putty/latest/x86/putty-0.65-installer.exe]]. Step 2 : Configure an SSH connection to omega-ABCD.local on port 22 : Step 3 : Click Open, enter the credentials. By default, the credentials are: Username : root Password : onioneer And you're connected.","title":"Windows"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-to-Omega-via-Serial-Terminal/","text":"Connect to the Omega via Serial Terminal [[ TOC ]] OSX Step 1 : Download and install the Silicon Labs CP2102 driver from [[https://www.silabs.com/Support%20Documents/Software/Mac_OSX_VCP_Driver.zip]]. Step 2 : Run ls /dev/tty.* to see if the USB-to-Serial device can be detected. If the driver is successfully installed, you should be able to see a device with a name similar to /dev/tty.SLAB_USBtoUART . Step 3 : Run screen /dev/tty.SLAB_USBtoUART 115200 to connect to the Omega\u2019s serial terminal using screen. Press ENTER to activate the command prompt. Windows Step 1 : Download and install the Silicon Labs CP2102 driver from [[https://www.silabs.com/Support%20Documents/Software/CP210x_VCP_Windows.zip]]. Step 2 : Run Computer Management (Start Run\u2026 Enter \u201cComputer Management\u201d and press ENTER ), look for Silicon Labs CP210x USB to UART Bridge under Ports (COM LPT), and take note of the COM number in bracket. Step 3 : Download and install Putty from [[http://the.earth.li/~sgtatham/putty/latest/x86/putty-0.65-installer.exe]]. Step 4 : Open up PuTTY, select Serial for Connection type, enter the COM number noted down in Step 2 as Serial line, and enter 115200 for the speed. Step 5 : Click on the Open button to connect to the Omega via the serial terminal. Once connected, press ENTER to activate the command prompt. Linux Step 1 : Download and install the Silicon Labs CP2102 driver source files. For Linux kernel 3.x.x and higher : [[https://www.silabs.com/Support%20Documents/Software/Linux_3.x.x_VCP_Driver_Source.zip]]. For Linux kernel 2.6.x : [[https://www.silabs.com/Support%20Documents/Software/Linux_3.x.x_VCP_Driver_Source.zip]]. Step 2 : Build and install the driver. For Ubuntu/Debian : Unzip the archive. cd into the unzipped directory. Compile the driver with make . $ sudo cp cp210x.ko to /lib/modules/ kernel-version /kernel/drivers/usb/serial/ kernel-version $ sudo insmod /lib/modules/ kernel-version /kernel/drivers/usb/serial/usbserial.ko $ sudo insmod cp210x.ko $ sudo chmod 666 /dev/ttyUSB0 For RedHat/CentOS : $ sudo yum update kernel* //need to update the kernel first otherwise your header won't match $ sudo yum install kernel-devel kernel-headers //get the devel and header packages $ sudo reboot //your build link should be fixed after your system come back Unzip the archive. cd into the unzipped directory. Compile the driver with make . $ sudo cp cp210x.ko to /lib/modules/ kernel-version /kernel/drivers/usb/serial $ sudo insmod /lib/modules/ kernel-version /kernel/drivers/usb/serial/usbserial.ko $ sudo insmod cp210x.ko $ sudo chmod 666 /dev/ttyUSB0 Step 3 : Run ls /dev/ttyUSB* to see if the USB-to-Serial device can be detected. If the driver is successfully installed, you should be able to see a device with a name similar to /dev/ttyUSB0 . Step 4 : Run screen /dev/ttyUSB0 115200 to connect to the Omega\u2019s serial terminal using screen. Press ENTER to activate the command prompt.","title":"Connect to the Omega via Serial Terminal"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-to-Omega-via-Serial-Terminal/#connect-to-the-omega-via-serial-terminal","text":"[[ TOC ]]","title":"Connect to the Omega via Serial Terminal"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-to-Omega-via-Serial-Terminal/#osx","text":"Step 1 : Download and install the Silicon Labs CP2102 driver from [[https://www.silabs.com/Support%20Documents/Software/Mac_OSX_VCP_Driver.zip]]. Step 2 : Run ls /dev/tty.* to see if the USB-to-Serial device can be detected. If the driver is successfully installed, you should be able to see a device with a name similar to /dev/tty.SLAB_USBtoUART . Step 3 : Run screen /dev/tty.SLAB_USBtoUART 115200 to connect to the Omega\u2019s serial terminal using screen. Press ENTER to activate the command prompt.","title":"OSX"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-to-Omega-via-Serial-Terminal/#windows","text":"Step 1 : Download and install the Silicon Labs CP2102 driver from [[https://www.silabs.com/Support%20Documents/Software/CP210x_VCP_Windows.zip]]. Step 2 : Run Computer Management (Start Run\u2026 Enter \u201cComputer Management\u201d and press ENTER ), look for Silicon Labs CP210x USB to UART Bridge under Ports (COM LPT), and take note of the COM number in bracket. Step 3 : Download and install Putty from [[http://the.earth.li/~sgtatham/putty/latest/x86/putty-0.65-installer.exe]]. Step 4 : Open up PuTTY, select Serial for Connection type, enter the COM number noted down in Step 2 as Serial line, and enter 115200 for the speed. Step 5 : Click on the Open button to connect to the Omega via the serial terminal. Once connected, press ENTER to activate the command prompt.","title":"Windows"},{"location":"tutorials/OnionWiki/Tutorials/Connecting-to-Omega-via-Serial-Terminal/#linux","text":"Step 1 : Download and install the Silicon Labs CP2102 driver source files. For Linux kernel 3.x.x and higher : [[https://www.silabs.com/Support%20Documents/Software/Linux_3.x.x_VCP_Driver_Source.zip]]. For Linux kernel 2.6.x : [[https://www.silabs.com/Support%20Documents/Software/Linux_3.x.x_VCP_Driver_Source.zip]]. Step 2 : Build and install the driver. For Ubuntu/Debian : Unzip the archive. cd into the unzipped directory. Compile the driver with make . $ sudo cp cp210x.ko to /lib/modules/ kernel-version /kernel/drivers/usb/serial/ kernel-version $ sudo insmod /lib/modules/ kernel-version /kernel/drivers/usb/serial/usbserial.ko $ sudo insmod cp210x.ko $ sudo chmod 666 /dev/ttyUSB0 For RedHat/CentOS : $ sudo yum update kernel* //need to update the kernel first otherwise your header won't match $ sudo yum install kernel-devel kernel-headers //get the devel and header packages $ sudo reboot //your build link should be fixed after your system come back Unzip the archive. cd into the unzipped directory. Compile the driver with make . $ sudo cp cp210x.ko to /lib/modules/ kernel-version /kernel/drivers/usb/serial $ sudo insmod /lib/modules/ kernel-version /kernel/drivers/usb/serial/usbserial.ko $ sudo insmod cp210x.ko $ sudo chmod 666 /dev/ttyUSB0 Step 3 : Run ls /dev/ttyUSB* to see if the USB-to-Serial device can be detected. If the driver is successfully installed, you should be able to see a device with a name similar to /dev/ttyUSB0 . Step 4 : Run screen /dev/ttyUSB0 115200 to connect to the Omega\u2019s serial terminal using screen. Press ENTER to activate the command prompt.","title":"Linux"},{"location":"tutorials/OnionWiki/Tutorials/Contents/","text":"Tutorials Wiki The Tutorials Wiki contains guides on a variety of Omega topics, from the basics of Linux, to how to use the Omega Expansions, to using specific software or accomplishing a certain task. [[ TOC ]] Connecting to the Omega The wiki is moving! These articles can be found in the Onion Docs already, and will be updated there. Taking the first step, connecting to the Omega's command line: * Connecting to Omega via Serial Terminal * Connecting to Omega via SSH * Adding your Public key to the Omega Introduction to Linux This series of tutorials is meant to get you comfortable with using a Linux environment: Introduction to Linux The Command Line The File System Redirection Shell Scripting Ownership and Permissions Introduction to OpenWRT This mini-series is meant to introduce users to OpenWRT. OPKG Basics UBUS Basics Part 1 UBUS Basics Part 2 UBUS Basics Part 3 UCI Basics Updating the Omega Follow this guide to update the Omega's firmware: The wiki is moving! This article can be found in the Onion Docs already, and will be updated there. Omega Firmware Updates In case your Omega's firmware gets corrupted during installation, it is possible to reflash a fresh firmware: * Reflash Firmware using an Ethernet Expansion * Reflash Firmware by Improvising an Ethernet Connection Using the Docks and Expansions The wiki is moving! These articles can be found in the Onion Docs already, and will be updated there. (* - denotes articles that do not yet exist in the Onion Docs as of time of writing) The Omega's functionality can be greatly extended with the different available Docks and Expansions. The Omega itself has an LED onboard, it can be controlled to blink in a variety of patterns: * Blinking Morse Code on the Omega's LED The Expansion Dock The Expansion Dock provides a breakout for the Omega's GPIOs, allowing you to use the Expansions or simply drive the GPIOs. It also has an RGB LED that can be programmed to show different colours: How to use the GPIOs Creating PWM signals on the GPIOs Controlling the RGB LED The Power Dock The Power Dock also provides a breakout for the Omega's GPIOs, allowing you to use the Expansions or drive the GPIOs. However, the Power Dock can also be powered by just a battery, and has battery management to intelligently charge the connected battery: * How to use the Power Dock The Expansions The Expansions provide additional functionality and features to the Omega: How to use the Ethernet Expansion How to use the Relay Expansion How to use the Servo Expansion How to use the OLED Expansion How to use the GPS Expansion The Arduino Dock The Arduino Dock has an ATmega microcontroller and can be used just like an Arduino: Initial Setup Using the Arduino Dock Controlling Neopixels The Bluetooth Low Energy Expansion * The BLE Expansion can be used to add Bluetooth connectivity to the Omega: Streaming Bluetooth Audio on the Omega The Camera Kit * The Camera Kit includes a 720p webcam and a pan tilt servo mount. Assembly instructions are below: Camera Kit Assembly Tutorial The Omega and Connectivity The wiki is moving! These articles can be found in the Onion Docs already, and will be updated there. The Omega is very versatile when it comes to WiFi networks, the following guides illustrate some of that flexibility: Connecting to a WiFi Hotspot that requires a login Finding the Omega's IP address Connect to Enterpise-Secured Wifi that requires a username and password Sharing Directories on the Omega using Samba Using WinSCP for File Transfers The Omega and Networking Using the Omega as a Router Using the Omega as a WiFi Range Extender Using the Omega as a WiFi Ethernet Bridge Storage Space The Omega has 16MB of flash memory, this might be a little limiting in some cases. Plugging in a USB drive to the Omega's USB Host can help alleviate this issue: The wiki is moving! These articles can be found in the Onion Docs already, and will be updated there. Using USB Storage The Omega's RAM can also be extended using USB Storage (This article can be found here. ) It is also possible to run the Omega's OS from USB storage: * Using USB Storage as ROOTFS Using Software on the Omega Since the Omega runs a full Linux distribution, it is very flexible in the software that it can run. The following guides illustrate how to install and use different software: Using Git Python The wiki is moving! The Python articles can be found in the Onion Docs already, and will be updated there. Installing Python Sending Emails with Python A Python GPIO Example Controlling an I2C-based LCD Display with Python LAMP Stack Instaling the LAMP Stack on the Omega PHP Using PHP on the Omega Using PHP with PushBullet Using PHP with the DHT11/22 Sensors Fixing and Using the PHP Date Time Functions NodeJS Using NodeJS on the Omega We've added support for installing a few Node modules via opkg: * OnOff - GPIO control * Blynk Library Reading Sensor Data The Omega can be used with a variety of different communication protocols. I2C is supported out of the box, for others, additional work is required: Using SPI to communicate with peripherals Using 1Wire to read sensor data The Omega supports Ubidots, a third-party data visualization service: * The Omega and Ubidots Cross Compilation The Omega can run C and C++ programs, however, it does not host a C compiler, so these programs will have to be cross-compiled on another machine and then installed on your Omega: * Cross Compilation","title":"Tutorials Wiki"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#tutorials-wiki","text":"The Tutorials Wiki contains guides on a variety of Omega topics, from the basics of Linux, to how to use the Omega Expansions, to using specific software or accomplishing a certain task. [[ TOC ]]","title":"Tutorials Wiki"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#connecting-to-the-omega","text":"The wiki is moving! These articles can be found in the Onion Docs already, and will be updated there. Taking the first step, connecting to the Omega's command line: * Connecting to Omega via Serial Terminal * Connecting to Omega via SSH * Adding your Public key to the Omega","title":"Connecting to the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#introduction-to-linux","text":"This series of tutorials is meant to get you comfortable with using a Linux environment: Introduction to Linux The Command Line The File System Redirection Shell Scripting Ownership and Permissions","title":"Introduction to Linux"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#introduction-to-openwrt","text":"This mini-series is meant to introduce users to OpenWRT. OPKG Basics UBUS Basics Part 1 UBUS Basics Part 2 UBUS Basics Part 3 UCI Basics","title":"Introduction to OpenWRT"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#updating-the-omega","text":"Follow this guide to update the Omega's firmware: The wiki is moving! This article can be found in the Onion Docs already, and will be updated there. Omega Firmware Updates In case your Omega's firmware gets corrupted during installation, it is possible to reflash a fresh firmware: * Reflash Firmware using an Ethernet Expansion * Reflash Firmware by Improvising an Ethernet Connection","title":"Updating the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#using-the-docks-and-expansions","text":"The wiki is moving! These articles can be found in the Onion Docs already, and will be updated there. (* - denotes articles that do not yet exist in the Onion Docs as of time of writing) The Omega's functionality can be greatly extended with the different available Docks and Expansions. The Omega itself has an LED onboard, it can be controlled to blink in a variety of patterns: * Blinking Morse Code on the Omega's LED","title":"Using the Docks and Expansions"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#the-expansion-dock","text":"The Expansion Dock provides a breakout for the Omega's GPIOs, allowing you to use the Expansions or simply drive the GPIOs. It also has an RGB LED that can be programmed to show different colours: How to use the GPIOs Creating PWM signals on the GPIOs Controlling the RGB LED","title":"The Expansion Dock"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#the-power-dock","text":"The Power Dock also provides a breakout for the Omega's GPIOs, allowing you to use the Expansions or drive the GPIOs. However, the Power Dock can also be powered by just a battery, and has battery management to intelligently charge the connected battery: * How to use the Power Dock","title":"The Power Dock"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#the-expansions","text":"The Expansions provide additional functionality and features to the Omega: How to use the Ethernet Expansion How to use the Relay Expansion How to use the Servo Expansion How to use the OLED Expansion How to use the GPS Expansion","title":"The Expansions"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#the-arduino-dock","text":"The Arduino Dock has an ATmega microcontroller and can be used just like an Arduino: Initial Setup Using the Arduino Dock Controlling Neopixels","title":"The Arduino Dock"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#the-bluetooth-low-energy-expansion-42","text":"The BLE Expansion can be used to add Bluetooth connectivity to the Omega: Streaming Bluetooth Audio on the Omega","title":"The Bluetooth Low Energy Expansion *"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#the-camera-kit-42","text":"The Camera Kit includes a 720p webcam and a pan tilt servo mount. Assembly instructions are below: Camera Kit Assembly Tutorial","title":"The Camera Kit *"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#the-omega-and-connectivity","text":"The wiki is moving! These articles can be found in the Onion Docs already, and will be updated there. The Omega is very versatile when it comes to WiFi networks, the following guides illustrate some of that flexibility: Connecting to a WiFi Hotspot that requires a login Finding the Omega's IP address Connect to Enterpise-Secured Wifi that requires a username and password Sharing Directories on the Omega using Samba Using WinSCP for File Transfers","title":"The Omega and Connectivity"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#the-omega-and-networking","text":"Using the Omega as a Router Using the Omega as a WiFi Range Extender Using the Omega as a WiFi Ethernet Bridge","title":"The Omega and Networking"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#storage-space","text":"The Omega has 16MB of flash memory, this might be a little limiting in some cases. Plugging in a USB drive to the Omega's USB Host can help alleviate this issue: The wiki is moving! These articles can be found in the Onion Docs already, and will be updated there. Using USB Storage The Omega's RAM can also be extended using USB Storage (This article can be found here. ) It is also possible to run the Omega's OS from USB storage: * Using USB Storage as ROOTFS","title":"Storage Space"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#using-software-on-the-omega","text":"Since the Omega runs a full Linux distribution, it is very flexible in the software that it can run. The following guides illustrate how to install and use different software: Using Git","title":"Using Software on the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#python","text":"The wiki is moving! The Python articles can be found in the Onion Docs already, and will be updated there. Installing Python Sending Emails with Python A Python GPIO Example Controlling an I2C-based LCD Display with Python","title":"Python"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#lamp-stack","text":"Instaling the LAMP Stack on the Omega","title":"LAMP Stack"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#php","text":"Using PHP on the Omega Using PHP with PushBullet Using PHP with the DHT11/22 Sensors Fixing and Using the PHP Date Time Functions","title":"PHP"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#nodejs","text":"Using NodeJS on the Omega We've added support for installing a few Node modules via opkg: * OnOff - GPIO control * Blynk Library","title":"NodeJS"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#reading-sensor-data","text":"The Omega can be used with a variety of different communication protocols. I2C is supported out of the box, for others, additional work is required: Using SPI to communicate with peripherals Using 1Wire to read sensor data The Omega supports Ubidots, a third-party data visualization service: * The Omega and Ubidots","title":"Reading Sensor Data"},{"location":"tutorials/OnionWiki/Tutorials/Contents/#cross-compilation","text":"The Omega can run C and C++ programs, however, it does not host a C compiler, so these programs will have to be cross-compiled on another machine and then installed on your Omega: * Cross Compilation","title":"Cross Compilation"},{"location":"tutorials/OnionWiki/Tutorials/Controlling-RGB-LED/","text":"Controlling RGB LED on the Expansion Dock The Expansion Dock has an LED that is controlled by three GPIO pins: Pin 17 for the Red LED Pin 16 for the Green LED Pin 15 for the Blue LED Using the Console: The console is under development and is coming soon! Stay tuned! Using the Command Line: You can use the expled tool to specify the colour of the LED. It will use software PWM to drive the three LEDs. Usage: expled 6 digit hex value Where the first two digits represent the Red value, the next two represent the Green value, and the last two represent the blue value. Example: expled 0xf21133 This will set the Red to 0xf2 , the Green to 0x11 , and the Blue to 0x33 . The LED should now be pink-ish. Check out this site for more info on hex colours.","title":"Controlling RGB LED on the Expansion Dock"},{"location":"tutorials/OnionWiki/Tutorials/Controlling-RGB-LED/#controlling-rgb-led-on-the-expansion-dock","text":"The Expansion Dock has an LED that is controlled by three GPIO pins: Pin 17 for the Red LED Pin 16 for the Green LED Pin 15 for the Blue LED","title":"Controlling RGB LED on the Expansion Dock"},{"location":"tutorials/OnionWiki/Tutorials/Controlling-RGB-LED/#using-the-console","text":"The console is under development and is coming soon! Stay tuned!","title":"Using the Console:"},{"location":"tutorials/OnionWiki/Tutorials/Controlling-RGB-LED/#using-the-command-line","text":"You can use the expled tool to specify the colour of the LED. It will use software PWM to drive the three LEDs. Usage: expled 6 digit hex value Where the first two digits represent the Red value, the next two represent the Green value, and the last two represent the blue value. Example: expled 0xf21133 This will set the Red to 0xf2 , the Green to 0x11 , and the Blue to 0x33 . The LED should now be pink-ish. Check out this site for more info on hex colours.","title":"Using the Command Line:"},{"location":"tutorials/OnionWiki/Tutorials/Cross-Compile/","text":"Setting Up Cross-Compile Environment for Omega This tutorial will walk you through setting up the OpenWRT Cross-Compile environment on a Ubuntu Linux system. Step 1: Setup OpenWRT Buildroot Environment Install tools and library sources: $ apt-get install -y subversion build-essential libncurses5-dev zlib1g-dev gawk flex quilt git-core unzip libssl-dev Step 2: Get OpenWRT Source $ git clone git://git.openwrt.org/15.05/openwrt.git $ cd openwrt Step 3: Update Feeds Feeds are repositories of packages that can be added to the OpenWRT system. Feeds are configured in the feeds.conf.default file. Additional feeds can be added by editing this file. For example, to add the Onion packages, append the following line to the file: src-git onion https://github.com/OnionIoT/OpenWRT-Packages.git Save the feeds.conf.default file, and update the feeds: $ scripts/feeds update -a This will fetch all the repositories configured in the feeds.conf.default file. To install a package to the source we are about to compile, for example: $ scripts/feeds install python This downloads python to our source code tree, but doesn't compile the package by default. Step 4: Modify Image Files in the package/base-file/files directory will be overwritten to the compiled image at the end of the compilation process. To add custom files to the compiled image, create a files folder in the buildroot directory. Files in this directory will supersede the files in the package/base-file/files directory. Step 5: Select Packages As mentioned, packages installed are not selected by default when compiling the image, and will not appear in the final firmware. To select packages to be compiled into the image: $ make menuconfig Navigate with UP and DOWN keys. ENTER to enter into a category. To exit to previous menu press ESC twice. To toggle the selection state of packages press SPACE . First ensure the following: Target System is Atheros AR7xxx/AR9xxx Subtarget is Generic Target Profile is Onion Omega Target Images is squashfs Different markings on packages represent their selection state. are unselected; * are selected; M are selected to compile as modules (i.e. compiled as Opkg packages, but not included in the image by default); -*- are dependencies required by other package(s). Selection state can be toggled using SPACE , or N for unselected, Y for selected, and M for module. When package selection is finished, exit out of menuconfig by pressing ESC twice. When prompted whether to save changes, select Yes . Step 6a: Compile Image Start the compile process: $ make On multi-core systems, add the -j flag to take advantage of additional cores: $ make -jn where n is the number of cores ( nproc ) + 1. To enable verbose mode: $ make V=s Once the compile is complete, binaries are found in the bin/ar71xx directory. openwrt-ar71xx-generic-onion-omega-squashfs-factory.bin is the full image, and openwrt-ar71xx-generic-onion-omega-squashfs-sysupgrade.bin is the image for system upgrade. Compiled Opkg packages are found in the bin/ar71xx/packages directory. Step 6b: Compile Individual Packages Compiling the entire image can take a long time depending on the system. Luckily, individual packages can be compiled without needing to compile the whole image. First, we need to build the toolchain to compile and package the binaries (this is typically done by make automatically when building the image, and it only needs to be done once): $ make tools/install $ make toolchain/install Now you can compile the individual package: $ make package/ package name /compile where package name needs to be substituted for the package in question. Also note that if this package has dependencies, they must be compiled first using the same command. Finally, if you decide the newly compiled package should be installed into the image: $ make package/ package name /install will install it into the image that you have already created. Finally, if you wish to generate the index for the package: $ make package/index This is typically done automatically by make to keep an updated list of packages installed in the image. Step 7: Flash Image On the Omega, cd to /tmp : # cd /tmp This is done because /tmp is a RAM disk that has enough storage to download the image to be flashed. Download the image: # wget https://downloads.onion.io/openwrt-ar71xx-generic-onion-omega-squashfs-factory.bin Once the image is downloaded, start the flash process: # sysupgrade openwrt-ar71xx-generic-onion-omega-squashfs-factory.bin If you wish the system to try to preserve modified files in /etc directory, where most of the configuration is kept, add the -c flag: # sysupgrade -c openwrt-ar71xx-generic-onion-omega-squashfs-factory.bin If you wish to overwrite all configuration changes and restore the original image setting, add the -n flag: # sysupgrade -n openwrt-ar71xx-generic-onion-omega-squashfs-factory.bin","title":"Setting Up Cross-Compile Environment for Omega"},{"location":"tutorials/OnionWiki/Tutorials/Cross-Compile/#setting-up-cross-compile-environment-for-omega","text":"This tutorial will walk you through setting up the OpenWRT Cross-Compile environment on a Ubuntu Linux system.","title":"Setting Up Cross-Compile Environment for Omega"},{"location":"tutorials/OnionWiki/Tutorials/Cross-Compile/#step-1-setup-openwrt-buildroot-environment","text":"Install tools and library sources: $ apt-get install -y subversion build-essential libncurses5-dev zlib1g-dev gawk flex quilt git-core unzip libssl-dev","title":"Step 1: Setup OpenWRT Buildroot Environment"},{"location":"tutorials/OnionWiki/Tutorials/Cross-Compile/#step-2-get-openwrt-source","text":"$ git clone git://git.openwrt.org/15.05/openwrt.git $ cd openwrt","title":"Step 2: Get OpenWRT Source"},{"location":"tutorials/OnionWiki/Tutorials/Cross-Compile/#step-3-update-feeds","text":"Feeds are repositories of packages that can be added to the OpenWRT system. Feeds are configured in the feeds.conf.default file. Additional feeds can be added by editing this file. For example, to add the Onion packages, append the following line to the file: src-git onion https://github.com/OnionIoT/OpenWRT-Packages.git Save the feeds.conf.default file, and update the feeds: $ scripts/feeds update -a This will fetch all the repositories configured in the feeds.conf.default file. To install a package to the source we are about to compile, for example: $ scripts/feeds install python This downloads python to our source code tree, but doesn't compile the package by default.","title":"Step 3: Update Feeds"},{"location":"tutorials/OnionWiki/Tutorials/Cross-Compile/#step-4-modify-image","text":"Files in the package/base-file/files directory will be overwritten to the compiled image at the end of the compilation process. To add custom files to the compiled image, create a files folder in the buildroot directory. Files in this directory will supersede the files in the package/base-file/files directory.","title":"Step 4: Modify Image"},{"location":"tutorials/OnionWiki/Tutorials/Cross-Compile/#step-5-select-packages","text":"As mentioned, packages installed are not selected by default when compiling the image, and will not appear in the final firmware. To select packages to be compiled into the image: $ make menuconfig Navigate with UP and DOWN keys. ENTER to enter into a category. To exit to previous menu press ESC twice. To toggle the selection state of packages press SPACE . First ensure the following: Target System is Atheros AR7xxx/AR9xxx Subtarget is Generic Target Profile is Onion Omega Target Images is squashfs Different markings on packages represent their selection state. are unselected; * are selected; M are selected to compile as modules (i.e. compiled as Opkg packages, but not included in the image by default); -*- are dependencies required by other package(s). Selection state can be toggled using SPACE , or N for unselected, Y for selected, and M for module. When package selection is finished, exit out of menuconfig by pressing ESC twice. When prompted whether to save changes, select Yes .","title":"Step 5: Select Packages"},{"location":"tutorials/OnionWiki/Tutorials/Cross-Compile/#step-6a-compile-image","text":"Start the compile process: $ make On multi-core systems, add the -j flag to take advantage of additional cores: $ make -jn where n is the number of cores ( nproc ) + 1. To enable verbose mode: $ make V=s Once the compile is complete, binaries are found in the bin/ar71xx directory. openwrt-ar71xx-generic-onion-omega-squashfs-factory.bin is the full image, and openwrt-ar71xx-generic-onion-omega-squashfs-sysupgrade.bin is the image for system upgrade. Compiled Opkg packages are found in the bin/ar71xx/packages directory.","title":"Step 6a: Compile Image"},{"location":"tutorials/OnionWiki/Tutorials/Cross-Compile/#step-6b-compile-individual-packages","text":"Compiling the entire image can take a long time depending on the system. Luckily, individual packages can be compiled without needing to compile the whole image. First, we need to build the toolchain to compile and package the binaries (this is typically done by make automatically when building the image, and it only needs to be done once): $ make tools/install $ make toolchain/install Now you can compile the individual package: $ make package/ package name /compile where package name needs to be substituted for the package in question. Also note that if this package has dependencies, they must be compiled first using the same command. Finally, if you decide the newly compiled package should be installed into the image: $ make package/ package name /install will install it into the image that you have already created. Finally, if you wish to generate the index for the package: $ make package/index This is typically done automatically by make to keep an updated list of packages installed in the image.","title":"Step 6b: Compile Individual Packages"},{"location":"tutorials/OnionWiki/Tutorials/Cross-Compile/#step-7-flash-image","text":"On the Omega, cd to /tmp : # cd /tmp This is done because /tmp is a RAM disk that has enough storage to download the image to be flashed. Download the image: # wget https://downloads.onion.io/openwrt-ar71xx-generic-onion-omega-squashfs-factory.bin Once the image is downloaded, start the flash process: # sysupgrade openwrt-ar71xx-generic-onion-omega-squashfs-factory.bin If you wish the system to try to preserve modified files in /etc directory, where most of the configuration is kept, add the -c flag: # sysupgrade -c openwrt-ar71xx-generic-onion-omega-squashfs-factory.bin If you wish to overwrite all configuration changes and restore the original image setting, add the -n flag: # sysupgrade -n openwrt-ar71xx-generic-onion-omega-squashfs-factory.bin","title":"Step 7: Flash Image"},{"location":"tutorials/OnionWiki/Tutorials/Extending-RAM-with-a-swap-file/","text":"Extending the Omega's RAM with a Swap File on USB Storage While the Omega comes with a decent 64MB of RAM, you might find yourself in a situation where this is simply not enough! This tutorial will walk you through how you can use USB Storage and a Swap File to extend the amount of memory available to your Omega. [[ TOC ]] What is a Swap File? A Swap File is a special file on a hard drive or flash storage that is used by the operating system to store information not currently being used by the device's RAM. This allows the system and programs to use more memory than just by using the physically available RAM memory. Swap Files, therefore, implement virtual memory. This is also known as paging and is used in every modern desktop and mobile operating system to manage and optimize the use of memory. For more information, check out the Wikipedia article on Paging . The Setup Procedure Let's get to setting up our very own Swap File and extending the available memory on the Omega! Step 1: Install Required Packages First, we will install the swap-utils package that will allow us to create and use Swap Files: opkg update opkg install swap-utils Step 2: USB Storage Plug in a USB drive and make sure it's mounted. For best results, you will need to setup automatic mounting. See the USB Storage tutorial for details on the procedures. For the purposes of this tutorial, let's assume the USB device was mounted to /mnt/sda1 . Step 3: Create Swap File on the USB storage Now we need to create the file on the USB drive that will be used as the Swap file. We will be using the dd utility to help us create the file. The dd utility is meant to convert and copy files, it is very powerful so it can potentially be very destructive if used incorrectly, stay on your toes when using dd . The specific dd command we will be running will look like: dd if=/dev/zero of=/mnt/sda1/swap.page bs=1M count=256 This command will create a file on the USB drive that is 256MB with all of its bytes initialized to 0x00 . This is the file that will be used as the Swap File, so we will effectively be extending our RAM by 256MB. Let's go through each part of the command: * The if argument specifies the source of the data, in this case /dev/zero is a special system file that outputs as many 0x00 bytes as requested. * The of argument tells dd where to create the new file. In our scenario, the USB drive was mounted at /mnt/sda1 and we want to make a swap.page file on the top level of the drive. * The bs and count arguments will specify the size of the file that will be created: * The bs argument actually stands for Block Size, with a Block being the number of bytes that are read, written, or converted at one time. We are setting our Block size to 1 Million Bytes or 1 Megabyte (MB) * The count argument defines how many blocks are to be created. So we are creating 256 blocks that are 1MB each, therefore the file will be 256MB in total Step 4: Setup the Swap File Now that the Swap File has been created, we need to tell Linux to setup this file as a swap area: mkswap /mnt/sda1/swap.page Running the free command will show that nothing has changed yet: root@Omega-1302:~# free total used free shared buffers Mem: 61152 42528 18624 96 11648 -/+ buffers: 30880 30272 Swap: 0 0 0 Step 5: Activate the Swap File We're finally ready to activate the Swap File and actually expand our available memory: swapon /mnt/sda1/swap.page Now, when free is run again, we will see that the Swap row is populated: root@Omega-1302:~# free total used free shared buffers Mem: 61152 42644 18508 96 11648 -/+ buffers: 30996 30156 Swap: 262140 0 262140 The units of the numbers displayed by the free command are kilobytes. The total Swap size is 262140 kilobytes which is equivalent to 256MB, so we can confirm that the Swap File is active and being used as memory. Note: When the Omega is rebooted, the USB Swap Page will no longer be used. Step 5 will have to be repeated after every boot unless some automatic method for activating the Swap Page is created... Going Further So it's a little problematic that the Swap File needs to be activated manually after every boot, lets figure out how to automate this tedious little activity. Automatically Activating the Swap File The /etc/rc.local will be run automatically after every boot, so this is perfect for our purposes. Add the following to your /etc/rc.local file: # activate the swap file on an external USB drive SWAP_FILE= /mnt/sda1/swap.page if [ -e $SWAP_FILE ]; then swapon /mnt/sda1/swap.page fi Make sure this code is placed above the exit 0 line that already exists in the file! This will first check that the Swap File exists, and will then activate the Swap File. Note that this depends on the USB drive being automatically mounted during boot, see the USB Storage tutorial for details on how to accomplish automatic mounting. Try adding this code, reboot your Omega (with the USB drive still plugged in), and running free to confirm the Swap File is indeed being used. Summary Using a Swap File allows us to use other types of storage (USB, flash) to extend the amount of RAM available in our system. All modern desktop and mobile operating systems implement swap files in one way or another since storage is generally much cheaper than memory. This isn't exactly equivalent to adding more RAM since memory is much, much faster than storage, but for situations where memory usage becomes an issue, this method is incredibly useful. Happy hacking!","title":"Extending the Omega's RAM with a Swap File on USB Storage"},{"location":"tutorials/OnionWiki/Tutorials/Extending-RAM-with-a-swap-file/#extending-the-omegas-ram-with-a-swap-file-on-usb-storage","text":"While the Omega comes with a decent 64MB of RAM, you might find yourself in a situation where this is simply not enough! This tutorial will walk you through how you can use USB Storage and a Swap File to extend the amount of memory available to your Omega. [[ TOC ]]","title":"Extending the Omega's RAM with a Swap File on USB Storage"},{"location":"tutorials/OnionWiki/Tutorials/Extending-RAM-with-a-swap-file/#what-is-a-swap-file","text":"A Swap File is a special file on a hard drive or flash storage that is used by the operating system to store information not currently being used by the device's RAM. This allows the system and programs to use more memory than just by using the physically available RAM memory. Swap Files, therefore, implement virtual memory. This is also known as paging and is used in every modern desktop and mobile operating system to manage and optimize the use of memory. For more information, check out the Wikipedia article on Paging .","title":"What is a Swap File?"},{"location":"tutorials/OnionWiki/Tutorials/Extending-RAM-with-a-swap-file/#the-setup-procedure","text":"Let's get to setting up our very own Swap File and extending the available memory on the Omega!","title":"The Setup Procedure"},{"location":"tutorials/OnionWiki/Tutorials/Extending-RAM-with-a-swap-file/#step-1-install-required-packages","text":"First, we will install the swap-utils package that will allow us to create and use Swap Files: opkg update opkg install swap-utils","title":"Step 1: Install Required Packages"},{"location":"tutorials/OnionWiki/Tutorials/Extending-RAM-with-a-swap-file/#step-2-usb-storage","text":"Plug in a USB drive and make sure it's mounted. For best results, you will need to setup automatic mounting. See the USB Storage tutorial for details on the procedures. For the purposes of this tutorial, let's assume the USB device was mounted to /mnt/sda1 .","title":"Step 2: USB Storage"},{"location":"tutorials/OnionWiki/Tutorials/Extending-RAM-with-a-swap-file/#step-3-create-swap-file-on-the-usb-storage","text":"Now we need to create the file on the USB drive that will be used as the Swap file. We will be using the dd utility to help us create the file. The dd utility is meant to convert and copy files, it is very powerful so it can potentially be very destructive if used incorrectly, stay on your toes when using dd . The specific dd command we will be running will look like: dd if=/dev/zero of=/mnt/sda1/swap.page bs=1M count=256 This command will create a file on the USB drive that is 256MB with all of its bytes initialized to 0x00 . This is the file that will be used as the Swap File, so we will effectively be extending our RAM by 256MB. Let's go through each part of the command: * The if argument specifies the source of the data, in this case /dev/zero is a special system file that outputs as many 0x00 bytes as requested. * The of argument tells dd where to create the new file. In our scenario, the USB drive was mounted at /mnt/sda1 and we want to make a swap.page file on the top level of the drive. * The bs and count arguments will specify the size of the file that will be created: * The bs argument actually stands for Block Size, with a Block being the number of bytes that are read, written, or converted at one time. We are setting our Block size to 1 Million Bytes or 1 Megabyte (MB) * The count argument defines how many blocks are to be created. So we are creating 256 blocks that are 1MB each, therefore the file will be 256MB in total","title":"Step 3: Create Swap File on the USB storage"},{"location":"tutorials/OnionWiki/Tutorials/Extending-RAM-with-a-swap-file/#step-4-setup-the-swap-file","text":"Now that the Swap File has been created, we need to tell Linux to setup this file as a swap area: mkswap /mnt/sda1/swap.page Running the free command will show that nothing has changed yet: root@Omega-1302:~# free total used free shared buffers Mem: 61152 42528 18624 96 11648 -/+ buffers: 30880 30272 Swap: 0 0 0","title":"Step 4: Setup the Swap File"},{"location":"tutorials/OnionWiki/Tutorials/Extending-RAM-with-a-swap-file/#step-5-activate-the-swap-file","text":"We're finally ready to activate the Swap File and actually expand our available memory: swapon /mnt/sda1/swap.page Now, when free is run again, we will see that the Swap row is populated: root@Omega-1302:~# free total used free shared buffers Mem: 61152 42644 18508 96 11648 -/+ buffers: 30996 30156 Swap: 262140 0 262140 The units of the numbers displayed by the free command are kilobytes. The total Swap size is 262140 kilobytes which is equivalent to 256MB, so we can confirm that the Swap File is active and being used as memory. Note: When the Omega is rebooted, the USB Swap Page will no longer be used. Step 5 will have to be repeated after every boot unless some automatic method for activating the Swap Page is created...","title":"Step 5: Activate the Swap File"},{"location":"tutorials/OnionWiki/Tutorials/Extending-RAM-with-a-swap-file/#going-further","text":"So it's a little problematic that the Swap File needs to be activated manually after every boot, lets figure out how to automate this tedious little activity.","title":"Going Further"},{"location":"tutorials/OnionWiki/Tutorials/Extending-RAM-with-a-swap-file/#automatically-activating-the-swap-file","text":"The /etc/rc.local will be run automatically after every boot, so this is perfect for our purposes. Add the following to your /etc/rc.local file: # activate the swap file on an external USB drive SWAP_FILE= /mnt/sda1/swap.page if [ -e $SWAP_FILE ]; then swapon /mnt/sda1/swap.page fi Make sure this code is placed above the exit 0 line that already exists in the file! This will first check that the Swap File exists, and will then activate the Swap File. Note that this depends on the USB drive being automatically mounted during boot, see the USB Storage tutorial for details on how to accomplish automatic mounting. Try adding this code, reboot your Omega (with the USB drive still plugged in), and running free to confirm the Swap File is indeed being used.","title":"Automatically Activating the Swap File"},{"location":"tutorials/OnionWiki/Tutorials/Extending-RAM-with-a-swap-file/#summary","text":"Using a Swap File allows us to use other types of storage (USB, flash) to extend the amount of RAM available in our system. All modern desktop and mobile operating systems implement swap files in one way or another since storage is generally much cheaper than memory. This isn't exactly equivalent to adding more RAM since memory is much, much faster than storage, but for situations where memory usage becomes an issue, this method is incredibly useful. Happy hacking!","title":"Summary"},{"location":"tutorials/OnionWiki/Tutorials/Find-the-Omegas-IP-address/","text":"Finding the Omega's IP Address At one point or another, you will have to find the Omega's IP address, this quick tutorial will show you how! Running the Command Connect to the Omega's terminal and run the ifconfig command. The output will look something like: In the above scenario, the Omega is connected to a WiFi network and is hosting it's own AP network. The wlan0 section containts the information with regards to the connected WiFi network, and wlan0-1 is the information for the Omega's AP network. The inet addr field shows the IP address, in this case the IP address is 192.168.1.226 Happy Hacking!","title":"Finding the Omega's IP Address"},{"location":"tutorials/OnionWiki/Tutorials/Find-the-Omegas-IP-address/#finding-the-omegas-ip-address","text":"At one point or another, you will have to find the Omega's IP address, this quick tutorial will show you how!","title":"Finding the Omega's IP Address"},{"location":"tutorials/OnionWiki/Tutorials/Find-the-Omegas-IP-address/#running-the-command","text":"Connect to the Omega's terminal and run the ifconfig command. The output will look something like: In the above scenario, the Omega is connected to a WiFi network and is hosting it's own AP network. The wlan0 section containts the information with regards to the connected WiFi network, and wlan0-1 is the information for the Omega's AP network. The inet addr field shows the IP address, in this case the IP address is 192.168.1.226","title":"Running the Command"},{"location":"tutorials/OnionWiki/Tutorials/Find-the-Omegas-IP-address/#happy-hacking","text":"","title":"Happy Hacking!"},{"location":"tutorials/OnionWiki/Tutorials/How-To-Install-LAMP-Stack-on-the-Omega/","text":"How To Install Linux, Apache, MySQL, PHP (LAMP) Stack on the Omega LAMP stack is a group of open source software used to get web servers up and running. The acronym stands for Linux, Apache, MySQL and PHP. Since the Omega itself runs OpenWRT, which is a Linux operating system, the linux part is taken care of. Here's how we install the rest. Step 1. Expand your storage with USB Apache as other packages requires a lot of space so first thing You will have to do is to extend your storage with extroot. More information about how to do that can be found at [[Tutorials/Using-USB-Storage-as-Rootfs]]. Step 2. Setting Up Apache opkg update opkg install apache Then edit /etc/apache/httpd.conf : Find the line that starts with Listen and change it to: Listen ip You use to connect to Your console : port number other than 80 Also find the line that starts with ServerName and change it to: ServerName name for Your server : same port as in Listen Then you should find LogLevel debug , and change it into: LogLevel error Now we are ready to start the Apache server: apachectl start Your webserver can be accessed at: Onion Console IP adress : Your chosen port . Step 3. Setting Up PHP opkg install php5 php5-cgi php5-fastcgi Next, we will create a symbolic link to allow PHP to handle CGI requests: ln -s /usr/bin/php-cgi /usr/share/cgi-bin/ We will also need to tell Apache where to send all the CGI requests. To do this, we add the following lines to /etc/apache/httpd.conf : Directory /usr/share/cgi-bin AllowOverride None Options FollowSymLinks Order allow,deny Allow from all /Directory Directory /usr/bin AllowOverride None Options none Order allow,deny Allow from all /Directory Find the line ScriptAlias /cgi-bin/ \"/usr/share/cgi-bin\" and add ScriptAlias /php/ \"/usr/bin/\" after it: ScriptAlias /cgi-bin/ /usr/share/cgi-bin ScriptAlias /php/ /usr/bin/ Find IfModule mime_module section and add the following: AddType application/x-httpd-php .php Action application/x-httpd-php /php/php-cgi ' To change the Directory Index, find DirectoryIndex index.html , and change change it to the following: DirectoryIndex index.php index.html Next, open up /etc/php.ini and uncomment (or remove) the following lines: extension = gd.so extension = mbstring.so extension = pdo-mysql.so extension = pdo_sqlite.so extension = socket.so Also do not specify doc_root so change doc_root into doc_root = After that restart the Apache server to reload the changed configurations: apachectl restart Step 4. Setting Up MySQL opkg install mysql-server php5-mod-mysqli Create two folders for MySQL: mkdir -p /mnt/data/mysql mkdir -p /mnt/data/tmp Once you have installed MySQL, we should activate it with this command: mysql_install_db --force Next step is to create root user (when I installed mysql, table with users was empty, if that's also Your case use this steps). Execute: /usr/bin/mysqld --skip-grant-tables --skip-networking mysql -u root use mysql; FLUSH PRIVILEGES; INSERT into user (Host, User,Password) values ('localhost','root',' '); UPDATE user SET Password=PASSWORD('password you want') WHERE User='root'; update user set Select_priv='Y',Insert_priv='Y',Update_priv='Y',Delete_priv='Y',Create_priv='Y',Drop_priv='Y',Reload_priv='Y',Shutdown_priv='Y',Process_priv='Y',File_priv='Y',Grant_priv='Y',References_priv='Y',Index_priv='Y',Alter_priv='Y',Show_db_priv='Y',Super_priv='Y',Create_tmp_table_priv='Y',Lock_tables_priv='Y',Execute_priv='Y',Repl_slave_priv='Y',Repl_client_priv='Y',Create_view_priv='Y',Show_view_priv='Y',Create_routine_priv='Y',Alter_routine_priv='Y',Create_user_priv='Y' where user='root'; FLUSH PRIVILEGES; To start the MySQL server you should type: /etc/init.d/mysqld start And that's it :) Happy Hacking! Credits Thanks for Josip Mlakar for writing this awesome tutorial!","title":"How To Install Linux, Apache, MySQL, PHP (LAMP) Stack on the Omega"},{"location":"tutorials/OnionWiki/Tutorials/How-To-Install-LAMP-Stack-on-the-Omega/#how-to-install-linux-apache-mysql-php-lamp-stack-on-the-omega","text":"LAMP stack is a group of open source software used to get web servers up and running. The acronym stands for Linux, Apache, MySQL and PHP. Since the Omega itself runs OpenWRT, which is a Linux operating system, the linux part is taken care of. Here's how we install the rest.","title":"How To Install Linux, Apache, MySQL, PHP (LAMP) Stack on the Omega"},{"location":"tutorials/OnionWiki/Tutorials/How-To-Install-LAMP-Stack-on-the-Omega/#step-1-expand-your-storage-with-usb","text":"Apache as other packages requires a lot of space so first thing You will have to do is to extend your storage with extroot. More information about how to do that can be found at [[Tutorials/Using-USB-Storage-as-Rootfs]].","title":"Step 1. Expand your storage with USB"},{"location":"tutorials/OnionWiki/Tutorials/How-To-Install-LAMP-Stack-on-the-Omega/#step-2-setting-up-apache","text":"opkg update opkg install apache Then edit /etc/apache/httpd.conf : Find the line that starts with Listen and change it to: Listen ip You use to connect to Your console : port number other than 80 Also find the line that starts with ServerName and change it to: ServerName name for Your server : same port as in Listen Then you should find LogLevel debug , and change it into: LogLevel error Now we are ready to start the Apache server: apachectl start Your webserver can be accessed at: Onion Console IP adress : Your chosen port .","title":"Step 2. Setting Up Apache"},{"location":"tutorials/OnionWiki/Tutorials/How-To-Install-LAMP-Stack-on-the-Omega/#step-3-setting-up-php","text":"opkg install php5 php5-cgi php5-fastcgi Next, we will create a symbolic link to allow PHP to handle CGI requests: ln -s /usr/bin/php-cgi /usr/share/cgi-bin/ We will also need to tell Apache where to send all the CGI requests. To do this, we add the following lines to /etc/apache/httpd.conf : Directory /usr/share/cgi-bin AllowOverride None Options FollowSymLinks Order allow,deny Allow from all /Directory Directory /usr/bin AllowOverride None Options none Order allow,deny Allow from all /Directory Find the line ScriptAlias /cgi-bin/ \"/usr/share/cgi-bin\" and add ScriptAlias /php/ \"/usr/bin/\" after it: ScriptAlias /cgi-bin/ /usr/share/cgi-bin ScriptAlias /php/ /usr/bin/ Find IfModule mime_module section and add the following: AddType application/x-httpd-php .php Action application/x-httpd-php /php/php-cgi ' To change the Directory Index, find DirectoryIndex index.html , and change change it to the following: DirectoryIndex index.php index.html Next, open up /etc/php.ini and uncomment (or remove) the following lines: extension = gd.so extension = mbstring.so extension = pdo-mysql.so extension = pdo_sqlite.so extension = socket.so Also do not specify doc_root so change doc_root into doc_root = After that restart the Apache server to reload the changed configurations: apachectl restart","title":"Step 3. Setting Up PHP"},{"location":"tutorials/OnionWiki/Tutorials/How-To-Install-LAMP-Stack-on-the-Omega/#step-4-setting-up-mysql","text":"opkg install mysql-server php5-mod-mysqli Create two folders for MySQL: mkdir -p /mnt/data/mysql mkdir -p /mnt/data/tmp Once you have installed MySQL, we should activate it with this command: mysql_install_db --force Next step is to create root user (when I installed mysql, table with users was empty, if that's also Your case use this steps). Execute: /usr/bin/mysqld --skip-grant-tables --skip-networking mysql -u root use mysql; FLUSH PRIVILEGES; INSERT into user (Host, User,Password) values ('localhost','root',' '); UPDATE user SET Password=PASSWORD('password you want') WHERE User='root'; update user set Select_priv='Y',Insert_priv='Y',Update_priv='Y',Delete_priv='Y',Create_priv='Y',Drop_priv='Y',Reload_priv='Y',Shutdown_priv='Y',Process_priv='Y',File_priv='Y',Grant_priv='Y',References_priv='Y',Index_priv='Y',Alter_priv='Y',Show_db_priv='Y',Super_priv='Y',Create_tmp_table_priv='Y',Lock_tables_priv='Y',Execute_priv='Y',Repl_slave_priv='Y',Repl_client_priv='Y',Create_view_priv='Y',Show_view_priv='Y',Create_routine_priv='Y',Alter_routine_priv='Y',Create_user_priv='Y' where user='root'; FLUSH PRIVILEGES; To start the MySQL server you should type: /etc/init.d/mysqld start And that's it :) Happy Hacking!","title":"Step 4. Setting Up MySQL"},{"location":"tutorials/OnionWiki/Tutorials/How-To-Install-LAMP-Stack-on-the-Omega/#credits","text":"Thanks for Josip Mlakar for writing this awesome tutorial!","title":"Credits"},{"location":"tutorials/OnionWiki/Tutorials/Installing-NodeJS/","text":"Installing NodeJS The Omega supports NodeJS 4.3.1! Installation Connect to the Omega's terminal using either SSH or Serial. Run the following commands on the terminal: opkg update opkg install nodejs This will take about 8MB of space on the Omega. Due to the 16MB size of the Omega's flash storage, this installation will take up a sizeable chunk of the Omega's memory. We recommend running the Omega's OS from USB storage to have additional space for other programs and files. Installing npm The Omega also supports npm: opkg update opkg install npm The installation will take about 9MB of space. Since npm requires node to be installed, it cannot fit on the flash storage on the Omega. You must run the Omega's OS from USB storage in order to have enough space for this installation.","title":"Installing NodeJS"},{"location":"tutorials/OnionWiki/Tutorials/Installing-NodeJS/#installing-nodejs","text":"The Omega supports NodeJS 4.3.1!","title":"Installing NodeJS"},{"location":"tutorials/OnionWiki/Tutorials/Installing-NodeJS/#installation","text":"Connect to the Omega's terminal using either SSH or Serial. Run the following commands on the terminal: opkg update opkg install nodejs This will take about 8MB of space on the Omega. Due to the 16MB size of the Omega's flash storage, this installation will take up a sizeable chunk of the Omega's memory. We recommend running the Omega's OS from USB storage to have additional space for other programs and files.","title":"Installation"},{"location":"tutorials/OnionWiki/Tutorials/Installing-NodeJS/#installing-npm","text":"The Omega also supports npm: opkg update opkg install npm The installation will take about 9MB of space. Since npm requires node to be installed, it cannot fit on the flash storage on the Omega. You must run the Omega's OS from USB storage in order to have enough space for this installation.","title":"Installing npm"},{"location":"tutorials/OnionWiki/Tutorials/Installing-Python/","text":"Installing Python The Omega supports Python, we recommend installing the light version to save on space. [[ TOC ]] Steps to Install Connect to the Omega's terminal either using SSH or Serial. Run the following commands on the terminal: opkg update opkg install python-light This will take about 2MB of space on the Omega Python3 opkg update opkg install python3-light Then you have to run the right executable (python3). You can do a symbolic link to python so you just have to type python in the command line to run the interpreter. Full Installation The full installation of Python supports more modules out of the box but takes up more space on the Omega. To install the full version: opkg update opkg install python Python3 opkg update opkg install python3 Then you have to run the right executable (python3). You can do a symbolic link to python so you just have to type python in the command line to run the interpreter.","title":"Installing Python"},{"location":"tutorials/OnionWiki/Tutorials/Installing-Python/#installing-python","text":"The Omega supports Python, we recommend installing the light version to save on space. [[ TOC ]]","title":"Installing Python"},{"location":"tutorials/OnionWiki/Tutorials/Installing-Python/#steps-to-install","text":"Connect to the Omega's terminal either using SSH or Serial. Run the following commands on the terminal: opkg update opkg install python-light This will take about 2MB of space on the Omega","title":"Steps to Install"},{"location":"tutorials/OnionWiki/Tutorials/Installing-Python/#python3","text":"opkg update opkg install python3-light Then you have to run the right executable (python3). You can do a symbolic link to python so you just have to type python in the command line to run the interpreter.","title":"Python3"},{"location":"tutorials/OnionWiki/Tutorials/Installing-Python/#full-installation","text":"The full installation of Python supports more modules out of the box but takes up more space on the Omega. To install the full version: opkg update opkg install python","title":"Full Installation"},{"location":"tutorials/OnionWiki/Tutorials/Installing-Python/#python3_1","text":"opkg update opkg install python3 Then you have to run the right executable (python3). You can do a symbolic link to python so you just have to type python in the command line to run the interpreter.","title":"Python3"},{"location":"tutorials/OnionWiki/Tutorials/PHP-DHT11-DHT22-Sensor-Examples/","text":"Using DHT11/DHT22 Sensors with the Onion Omega In this tutorial you'll be reading the temperature humidity from a DHT sensor using both the console and also using PHP. Let's get started! Download install the files needed Firstly you'll need to download the files for the DHT library that has been compiled for the Omega, to do this in your console run these commands: opkg update opkg install wget cd /root wget https://community.onion.io/uploads/files/1450434316215-checkhumidity.tar.gz tar -zxvf 1450434316215-checkhumidity.tar.gz Now for us to be able to use the \"./checkHumidity\" command, we need to make the file executable, so to do this we run this command: chmod -R 755 /root/checkHumidity/bin/checkHumidity We now need to sort a few pins out now. Attaching the DHT sensor to the Omega DHT11 DHT22 have the same pin layouts, pin 1 is Vcc, pin 2 is the data pin and pin 4 is GND as shown in the image below: Connect pin 1 to 5V, connect pin 2 to any spare GPIO pin, in this example we'll be using 20 and connect pin 4 to GND. Note: 3.3V can give unrelaible results, use the 5V pin for Vcc Let's check the sensor! For this example I'm using GPIO pin 20 and a DHT11 sensor, if you used a different pin or a DHT22 sensor, change the values as appropriate. On your command line run the following: cd /root/checkHumidity/bin/ ./checkHumidity 20 DHT11 You'll now be presented back with the following result: root@Omega-NNNN:~/checkHumidity/bin# ./checkHumidity 20 DHT11 67.000000 22.000000 Note: If you see 255.00000 values here, check the wiring! Let's go one step further, let's make a basic PHP app to read the sensor For this example I'm assuming you already have PHP installed, if you don't follow this tutorial: Using PHP the Onion Omega This is easy as copy paste, let's go! On the command line run these commands: cd /www/php nano dht.php In the open window, paste in this code: ?php $result = get_dht_values(20, DHT11 ); // change the pin number and DHT type accordingly $message = $result[0]; $temp = $result[1]; $humidity = $result[2]; if( $message == success ) { // if successful, happy days let's spill the data out echo p The current temperature is b . $temp . deg;C /b and the humidity is . b . $humidity . % /b ; } else { echo Error: . $message; } function get_dht_values($pin, $dht_type) { if( ( $dht_type != DHT11 ) ( $dht_type != DHT11 ) ) { return array( Invalid DHT Type , 0, 0); } // Run the command using the exec() function, delivers the output in $output exec( /root/checkHumidity/bin/checkHumidity $pin $dht_type 2 1 , $output, $return); // -255 = bad if( $output[0] == -255.000000 ) { return array( Unable to read sensor, check the wiring, pin number! , 0, 0); } // must be all good, lets return the data $output[0] = number_format( (float)$output[0], 2, '.', '' ); // temp $output[1] = number_format( (float)$output[1], 2, '.', '' ); // hum return array( success , $output[0], $output[1] ); } Then press Ctrl + X to save and Y to confirm the save. Now go to your web browser and type in this URL, obviously changing the NNNN part to your Omega ID: http://omega-ABCD.local/php/dht.php All going well you'll see a message similar to this: The current temperature is 66.00\u00b0C and the humidity is . 23.00% Happy days. What next? Well thats up to you :) Turn your Omega into a mini weather station, hey why not post the data to https://thingspeak.com/ and keep track of your Omega over time?","title":"Using DHT11/DHT22 Sensors with the Onion Omega"},{"location":"tutorials/OnionWiki/Tutorials/PHP-DHT11-DHT22-Sensor-Examples/#using-dht11dht22-sensors-with-the-onion-omega","text":"In this tutorial you'll be reading the temperature humidity from a DHT sensor using both the console and also using PHP. Let's get started!","title":"Using DHT11/DHT22 Sensors with the Onion Omega"},{"location":"tutorials/OnionWiki/Tutorials/PHP-DHT11-DHT22-Sensor-Examples/#download-install-the-files-needed","text":"Firstly you'll need to download the files for the DHT library that has been compiled for the Omega, to do this in your console run these commands: opkg update opkg install wget cd /root wget https://community.onion.io/uploads/files/1450434316215-checkhumidity.tar.gz tar -zxvf 1450434316215-checkhumidity.tar.gz Now for us to be able to use the \"./checkHumidity\" command, we need to make the file executable, so to do this we run this command: chmod -R 755 /root/checkHumidity/bin/checkHumidity We now need to sort a few pins out now.","title":"Download &amp; install the files needed"},{"location":"tutorials/OnionWiki/Tutorials/PHP-DHT11-DHT22-Sensor-Examples/#attaching-the-dht-sensor-to-the-omega","text":"DHT11 DHT22 have the same pin layouts, pin 1 is Vcc, pin 2 is the data pin and pin 4 is GND as shown in the image below: Connect pin 1 to 5V, connect pin 2 to any spare GPIO pin, in this example we'll be using 20 and connect pin 4 to GND. Note: 3.3V can give unrelaible results, use the 5V pin for Vcc","title":"Attaching the DHT sensor to the Omega"},{"location":"tutorials/OnionWiki/Tutorials/PHP-DHT11-DHT22-Sensor-Examples/#lets-check-the-sensor","text":"For this example I'm using GPIO pin 20 and a DHT11 sensor, if you used a different pin or a DHT22 sensor, change the values as appropriate. On your command line run the following: cd /root/checkHumidity/bin/ ./checkHumidity 20 DHT11 You'll now be presented back with the following result: root@Omega-NNNN:~/checkHumidity/bin# ./checkHumidity 20 DHT11 67.000000 22.000000 Note: If you see 255.00000 values here, check the wiring!","title":"Let's check the sensor!"},{"location":"tutorials/OnionWiki/Tutorials/PHP-DHT11-DHT22-Sensor-Examples/#lets-go-one-step-further-lets-make-a-basic-php-app-to-read-the-sensor","text":"For this example I'm assuming you already have PHP installed, if you don't follow this tutorial: Using PHP the Onion Omega This is easy as copy paste, let's go! On the command line run these commands: cd /www/php nano dht.php In the open window, paste in this code: ?php $result = get_dht_values(20, DHT11 ); // change the pin number and DHT type accordingly $message = $result[0]; $temp = $result[1]; $humidity = $result[2]; if( $message == success ) { // if successful, happy days let's spill the data out echo p The current temperature is b . $temp . deg;C /b and the humidity is . b . $humidity . % /b ; } else { echo Error: . $message; } function get_dht_values($pin, $dht_type) { if( ( $dht_type != DHT11 ) ( $dht_type != DHT11 ) ) { return array( Invalid DHT Type , 0, 0); } // Run the command using the exec() function, delivers the output in $output exec( /root/checkHumidity/bin/checkHumidity $pin $dht_type 2 1 , $output, $return); // -255 = bad if( $output[0] == -255.000000 ) { return array( Unable to read sensor, check the wiring, pin number! , 0, 0); } // must be all good, lets return the data $output[0] = number_format( (float)$output[0], 2, '.', '' ); // temp $output[1] = number_format( (float)$output[1], 2, '.', '' ); // hum return array( success , $output[0], $output[1] ); } Then press Ctrl + X to save and Y to confirm the save. Now go to your web browser and type in this URL, obviously changing the NNNN part to your Omega ID: http://omega-ABCD.local/php/dht.php All going well you'll see a message similar to this: The current temperature is 66.00\u00b0C and the humidity is . 23.00% Happy days.","title":"Let's go one step further, let's make a basic PHP app to read the sensor"},{"location":"tutorials/OnionWiki/Tutorials/PHP-DHT11-DHT22-Sensor-Examples/#what-next","text":"Well thats up to you :) Turn your Omega into a mini weather station, hey why not post the data to https://thingspeak.com/ and keep track of your Omega over time?","title":"What next?"},{"location":"tutorials/OnionWiki/Tutorials/PHP-Date-Time-Functions/","text":"PHP Date Time Functions on the Onion Omega Maybe you too have just tried a date() function in PHP and received this error message: ```` Warning: date(): Invalid date.timezone value 'UTC', we selected the timezone 'UTC' for now. in /www/test.php on line 2 Fatal error: date(): Timezone database is corrupt - this should never happen! in /www/test.php on line 2 The good news is that it's very simple to resolve, what your Omega is missing is the timezone packages! ## How to add `zoneinfo` to your Onion Omega For this example I am assuming you wish to use a European timezone (London or Rome etc...) to find the others is easy and this is covered in the section below. Open a console to you Onion Omega and enter: ``` python opkg update opkg install zoneinfo-europe Now it's a dead simple case of updating your php.ini file(s) that are found in \"/etc\" with the line similar to this for London: [Date] date.timezone = Europe/London A quick copy paste line for the console to edit the default php.ini file is: nano /etc/php.ini Edit as desired and press Ctrl + X, then Y to save the file. You can confirm date/time functions are now working with this sample code: ?php echo date( d-M-Y ); No error messages = happy days! = happy hacking :) Finding the available timezones For the example above we set up the Omega to for \"Europe/London\", however you may not want that due to your location, so instead you'll need to install the zoneinfo for your desired location. To find out the package you require, run this command on your Omega's console: opkg update opkg list|grep zoneinfo You'll receive a list of packages similar to the ones below, back in the first example change the \"zoneinfo\" line to your desired zone: zoneinfo-africa - 2015d-1 - Zone Information (Africa) zoneinfo-asia - 2015d-1 - Zone Information (Asia) zoneinfo-atlantic - 2015d-1 - Zone Information (Atlantic) zoneinfo-australia-nz - 2015d-1 - Zone Information (Australia-NZ) zoneinfo-core - 2015d-1 - Zone Information (core) zoneinfo-europe - 2015d-1 - Zone Information (Europe) zoneinfo-india - 2015d-1 - Zone Information (India) zoneinfo-northamerica - 2015d-1 - Zone Information (NorthAmerica) zoneinfo-pacific - 2015d-1 - Zone Information (Pacific) zoneinfo-poles - 2015d-1 - Zone Information (Arctic, Antarctic) zoneinfo-simple - 2015d-1 - Zone Information (simple) zoneinfo-southamerica - 2015d-1 - Zone Information (SouthAmerica) Change the zone as desired and if you're still not sure which one you need, the \" List of Supported Timezones \" from the PHP manual will help. Special Thanks A note of special thanks to Manuel Baldassarri for replying to my query about this in the community forums . I looked everywhere trying to resolve this issue and it turned out it was simple. Thanks Manuel!","title":"PHP Date & Time Functions on the Onion Omega"},{"location":"tutorials/OnionWiki/Tutorials/PHP-Date-Time-Functions/#php-date-time-functions-on-the-onion-omega","text":"Maybe you too have just tried a date() function in PHP and received this error message: ```` Warning: date(): Invalid date.timezone value 'UTC', we selected the timezone 'UTC' for now. in /www/test.php on line 2 Fatal error: date(): Timezone database is corrupt - this should never happen! in /www/test.php on line 2 The good news is that it's very simple to resolve, what your Omega is missing is the timezone packages! ## How to add `zoneinfo` to your Onion Omega For this example I am assuming you wish to use a European timezone (London or Rome etc...) to find the others is easy and this is covered in the section below. Open a console to you Onion Omega and enter: ``` python opkg update opkg install zoneinfo-europe Now it's a dead simple case of updating your php.ini file(s) that are found in \"/etc\" with the line similar to this for London: [Date] date.timezone = Europe/London A quick copy paste line for the console to edit the default php.ini file is: nano /etc/php.ini Edit as desired and press Ctrl + X, then Y to save the file. You can confirm date/time functions are now working with this sample code: ?php echo date( d-M-Y ); No error messages = happy days! = happy hacking :)","title":"PHP Date &amp; Time Functions on the Onion Omega"},{"location":"tutorials/OnionWiki/Tutorials/PHP-Date-Time-Functions/#finding-the-available-timezones","text":"For the example above we set up the Omega to for \"Europe/London\", however you may not want that due to your location, so instead you'll need to install the zoneinfo for your desired location. To find out the package you require, run this command on your Omega's console: opkg update opkg list|grep zoneinfo You'll receive a list of packages similar to the ones below, back in the first example change the \"zoneinfo\" line to your desired zone: zoneinfo-africa - 2015d-1 - Zone Information (Africa) zoneinfo-asia - 2015d-1 - Zone Information (Asia) zoneinfo-atlantic - 2015d-1 - Zone Information (Atlantic) zoneinfo-australia-nz - 2015d-1 - Zone Information (Australia-NZ) zoneinfo-core - 2015d-1 - Zone Information (core) zoneinfo-europe - 2015d-1 - Zone Information (Europe) zoneinfo-india - 2015d-1 - Zone Information (India) zoneinfo-northamerica - 2015d-1 - Zone Information (NorthAmerica) zoneinfo-pacific - 2015d-1 - Zone Information (Pacific) zoneinfo-poles - 2015d-1 - Zone Information (Arctic, Antarctic) zoneinfo-simple - 2015d-1 - Zone Information (simple) zoneinfo-southamerica - 2015d-1 - Zone Information (SouthAmerica) Change the zone as desired and if you're still not sure which one you need, the \" List of Supported Timezones \" from the PHP manual will help.","title":"Finding the available timezones"},{"location":"tutorials/OnionWiki/Tutorials/PHP-Date-Time-Functions/#special-thanks","text":"A note of special thanks to Manuel Baldassarri for replying to my query about this in the community forums . I looked everywhere trying to resolve this issue and it turned out it was simple. Thanks Manuel!","title":"Special Thanks"},{"location":"tutorials/OnionWiki/Tutorials/PHP-GPIO-Example/","text":"Using PHP the Onion Omega The Onion Omega runs a webserver called uhttpd, this is capable of running PHP, happy days :) Hidden away in the forums fello onioneers have already worked on setting up basic examples of getting PHP to run also included basic proof-of-concept scripts. This tutorial walks you through the steps of getting these to work. All you need is a little imagination on how you can use abuse this with you Onion Omega. Here are some ideas to get your brain noodling: You could post updates to Thingspeak.com And push updates to PushBullet, so events appear across multiple devices such as a web browser, your iphone, ipad and/or droid Build a fully featured home automation system or security alarm that takes snapshots using a USB web camera Right let's get started If you can manage copy paste, you can do this . Let's get started First we need to install the required packages, to do this you can use the terminal, or ideally via SSH: opkg update opkg install php5 php5-cgi This installs the required PHP packages. Optionally you can also install the CLI version of PHP using the command below. This allows you to run PHP scripts from the commandline using \"php-cli scriptname.php\" opkg install php5-cli Next we need to edit the uhttpd file, you can do this by using this command: vi /etc/config/uhttpd Where you see the 'main' section of text like this: config uhttpd 'main' list listen_http '0.0.0.0:80' list listen_http '[::]:80' list listen_https '0.0.0.0:443' list listen_https '[::]:443' option redirect_https '1' option home '/www' option rfc1918_filter '1' option max_requests '3' option max_connections '100' option cert '/etc/uhttpd.crt' option key '/etc/uhttpd.key' option cgi_prefix '/cgi-bin' option script_timeout '60' option network_timeout '30' option http_keepalive '20' option tcp_keepalive '1' option ubus_prefix '/ubus' Add this to the last line of that block of text (there is another block of text after this, I've left that out for simplicity) list interpreter .php=/usr/bin/php-cgi option index_page 'index.php' Press 'ESC' on keyboard, and then ':wq' 'Enter' to save changes. Now we need to restart the web server, we do this by running this command: /etc/init.d/uhttpd restart And that's it, the uhttpd server is now capable of parsing PHP files. Test File Create a test file directory by executing the following command: mkdir /www/php cd /www/php vi index.php And paste this code into the file save: ?php echo hello world, I'm PHP running on my Onion Omega! ; ? Press 'ESC' on keyboard, and then ':wq' 'Enter' to save changes. Now open your web browser and go to http://omega-ABCD.local/php/ Note: If you receive a directory or file permissions issue, run the following command and try again. chmod -R 755 /www/php Let's Use the PHP Example from Git Hub And now to have a play make things work. First we need git, so we run the command: opkg update opkg install git git-http And now swapp directories and download the files: cd /www/php/ git clone https://github.com/ageeweb/php_onion Now in your web browser go to: http://omega-ABCD.local/php/php_onion/HowToUse.php Obviously shields are needed for the relay, but the RGB LED works fine with the expanded deck and your page will look like this: Notes Further Resources You can edit the php.ini file by running this command: vi /etc/php.ini There is another PHP helper you can use here https://github.com/ringmaster/GPIOHelperPHP You can read more about this in this community thread: https://community.onion.io/topic/39/simple-php-web-gpio-example-switching-leds/10 Using fast-gpio with PHP Onion Community member Chris McCaslin developed a PHP wrapper for the fast-gpio package. Let's Download the Library First download the library with wget from a GitHub Gist wget https://gist.githubusercontent.com/Immortal-/a18f58ac5c21ba27921b7626b5a8b06e/raw/df8e70665523c2a06b503954d10943560d5c189f/OmegaPHP.php Using the Library The following code shows how the library can be used: ?php require 'OmegaPHP.php'; //Require the library from the step above $gpio = new OmegaPHP(); //Turns pin 0 to On or HIGH or 1 $pin = (int)0; //This is just for my testing purposes You do not have to cast to an int. $gpio- SetPIN($pin,HIGH);// Set's the pin to 1 or HIGH $returned = $gpio- ReadPin($pin); print_r($returned); // Prints to screen: // 1 ?","title":"Using PHP & the Onion Omega"},{"location":"tutorials/OnionWiki/Tutorials/PHP-GPIO-Example/#using-php-the-onion-omega","text":"The Onion Omega runs a webserver called uhttpd, this is capable of running PHP, happy days :) Hidden away in the forums fello onioneers have already worked on setting up basic examples of getting PHP to run also included basic proof-of-concept scripts. This tutorial walks you through the steps of getting these to work. All you need is a little imagination on how you can use abuse this with you Onion Omega. Here are some ideas to get your brain noodling: You could post updates to Thingspeak.com And push updates to PushBullet, so events appear across multiple devices such as a web browser, your iphone, ipad and/or droid Build a fully featured home automation system or security alarm that takes snapshots using a USB web camera","title":"Using PHP &amp; the Onion Omega"},{"location":"tutorials/OnionWiki/Tutorials/PHP-GPIO-Example/#right-lets-get-started","text":"If you can manage copy paste, you can do this . Let's get started First we need to install the required packages, to do this you can use the terminal, or ideally via SSH: opkg update opkg install php5 php5-cgi This installs the required PHP packages. Optionally you can also install the CLI version of PHP using the command below. This allows you to run PHP scripts from the commandline using \"php-cli scriptname.php\" opkg install php5-cli Next we need to edit the uhttpd file, you can do this by using this command: vi /etc/config/uhttpd Where you see the 'main' section of text like this: config uhttpd 'main' list listen_http '0.0.0.0:80' list listen_http '[::]:80' list listen_https '0.0.0.0:443' list listen_https '[::]:443' option redirect_https '1' option home '/www' option rfc1918_filter '1' option max_requests '3' option max_connections '100' option cert '/etc/uhttpd.crt' option key '/etc/uhttpd.key' option cgi_prefix '/cgi-bin' option script_timeout '60' option network_timeout '30' option http_keepalive '20' option tcp_keepalive '1' option ubus_prefix '/ubus' Add this to the last line of that block of text (there is another block of text after this, I've left that out for simplicity) list interpreter .php=/usr/bin/php-cgi option index_page 'index.php' Press 'ESC' on keyboard, and then ':wq' 'Enter' to save changes. Now we need to restart the web server, we do this by running this command: /etc/init.d/uhttpd restart And that's it, the uhttpd server is now capable of parsing PHP files.","title":"Right let's get started"},{"location":"tutorials/OnionWiki/Tutorials/PHP-GPIO-Example/#test-file","text":"Create a test file directory by executing the following command: mkdir /www/php cd /www/php vi index.php And paste this code into the file save: ?php echo hello world, I'm PHP running on my Onion Omega! ; ? Press 'ESC' on keyboard, and then ':wq' 'Enter' to save changes. Now open your web browser and go to http://omega-ABCD.local/php/ Note: If you receive a directory or file permissions issue, run the following command and try again. chmod -R 755 /www/php","title":"Test File"},{"location":"tutorials/OnionWiki/Tutorials/PHP-GPIO-Example/#lets-use-the-php-example-from-git-hub","text":"And now to have a play make things work. First we need git, so we run the command: opkg update opkg install git git-http And now swapp directories and download the files: cd /www/php/ git clone https://github.com/ageeweb/php_onion Now in your web browser go to: http://omega-ABCD.local/php/php_onion/HowToUse.php Obviously shields are needed for the relay, but the RGB LED works fine with the expanded deck and your page will look like this:","title":"Let's Use the PHP Example from Git Hub"},{"location":"tutorials/OnionWiki/Tutorials/PHP-GPIO-Example/#notes-further-resources","text":"You can edit the php.ini file by running this command: vi /etc/php.ini There is another PHP helper you can use here https://github.com/ringmaster/GPIOHelperPHP You can read more about this in this community thread: https://community.onion.io/topic/39/simple-php-web-gpio-example-switching-leds/10","title":"Notes &amp; Further Resources"},{"location":"tutorials/OnionWiki/Tutorials/PHP-GPIO-Example/#using-fast-gpio-with-php","text":"Onion Community member Chris McCaslin developed a PHP wrapper for the fast-gpio package.","title":"Using fast-gpio with PHP"},{"location":"tutorials/OnionWiki/Tutorials/PHP-GPIO-Example/#lets-download-the-library","text":"First download the library with wget from a GitHub Gist wget https://gist.githubusercontent.com/Immortal-/a18f58ac5c21ba27921b7626b5a8b06e/raw/df8e70665523c2a06b503954d10943560d5c189f/OmegaPHP.php","title":"Let's Download the Library"},{"location":"tutorials/OnionWiki/Tutorials/PHP-GPIO-Example/#using-the-library","text":"The following code shows how the library can be used: ?php require 'OmegaPHP.php'; //Require the library from the step above $gpio = new OmegaPHP(); //Turns pin 0 to On or HIGH or 1 $pin = (int)0; //This is just for my testing purposes You do not have to cast to an int. $gpio- SetPIN($pin,HIGH);// Set's the pin to 1 or HIGH $returned = $gpio- ReadPin($pin); print_r($returned); // Prints to screen: // 1 ?","title":"Using the Library"},{"location":"tutorials/OnionWiki/Tutorials/PHP-PushBullet-Example/","text":"Onion Omega with PHP PushBullet Pushbullet is tool for receiving sending messages, files etc... across platforms. For example you can send a message aka \"note\" via your Onion Omega and then the note appears on all your connected devices, eg on your phone, iPad and even in your web browser. It's a bridge between them all! Possible Uses What you could do with this is really up to you, here are a couple of ideas: Someone at the door? Use a PIR sensor hooked up to the Onion Omega and when triggered you'll receive a notification on your devices The alarm has gone off, alerts are now everywhere, even if you're abroad Hook it up to IFTTT and create your own custom recipes Oh and someone at the door again? Push a file, which just so happens is a jpg image from a connected USB Webcam to all the devices and unlock the door via a message back or a custom app in the Onion Omega dashboard This simple example is using PHP, but you can easily do the same with any other programming language as it's just a POST request. Prerequisites You'll need a pushbullet account (which is free) and the app installed on one or more devices And you'll need a pushbullet API key, you can get this by going to https://www.pushbullet.com/#settings/account , under \"Access Tokens\" press \"Create Access Token\". Copy this key, you'll need it shortly. Installing PHP PHP cURL The process of installing PHP on your Onion Omega is covered in this tutorial: PHP-GPIO-Example However to be able to send curl requests, you'll need one additional library called \"php5-mod-curl\". You can install this by running these commands in your Onion Omega console: opkg update opkg install php5-mod-curl Now restart uhttpd by running: /etc/init.d/uhttpd restart Now go to your php folder and create a new file: cd /www/php nano pushbullet.php Then paste in the code below, changing your auth token you got from step 1: ?php $authToken = your auth token here!!! ; $curl = curl_init('https://api.pushbullet.com/v2/pushes'); curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); curl_setopt($curl, CURLOPT_POST, true); curl_setopt($curl, CURLOPT_HTTPHEADER, [ Authorization: Bearer $authToken ]); curl_setopt($curl, CURLOPT_POSTFIELDS, [ type = note , title = Pushbullet Notification , body = Howdy, this is a message sent from my from My Onion Omega! ] ); $response = curl_exec($curl); echo pre ; print_r($response); echo /pre ; Save the file by pressing \"Ctrl+X\", pressing \"y\" and then \"Enter\" Now open your web browser and go to http://omega-ABCD.local/php/pushbullet.php (chaging the url to your Onion Omega of course :) ) Ta da!! Where to go from here? The world is your oyster. How about trying one of the dedicated PHP libraries for Pushbullet to make development faster? https://github.com/ivkos/Pushbullet-for-PHP https://github.com/joetannenbaum/phpushbullet","title":"Onion Omega with PHP & PushBullet"},{"location":"tutorials/OnionWiki/Tutorials/PHP-PushBullet-Example/#onion-omega-with-php-pushbullet","text":"Pushbullet is tool for receiving sending messages, files etc... across platforms. For example you can send a message aka \"note\" via your Onion Omega and then the note appears on all your connected devices, eg on your phone, iPad and even in your web browser. It's a bridge between them all!","title":"Onion Omega with PHP &amp; PushBullet"},{"location":"tutorials/OnionWiki/Tutorials/PHP-PushBullet-Example/#possible-uses","text":"What you could do with this is really up to you, here are a couple of ideas: Someone at the door? Use a PIR sensor hooked up to the Onion Omega and when triggered you'll receive a notification on your devices The alarm has gone off, alerts are now everywhere, even if you're abroad Hook it up to IFTTT and create your own custom recipes Oh and someone at the door again? Push a file, which just so happens is a jpg image from a connected USB Webcam to all the devices and unlock the door via a message back or a custom app in the Onion Omega dashboard This simple example is using PHP, but you can easily do the same with any other programming language as it's just a POST request.","title":"Possible Uses"},{"location":"tutorials/OnionWiki/Tutorials/PHP-PushBullet-Example/#prerequisites","text":"You'll need a pushbullet account (which is free) and the app installed on one or more devices And you'll need a pushbullet API key, you can get this by going to https://www.pushbullet.com/#settings/account , under \"Access Tokens\" press \"Create Access Token\". Copy this key, you'll need it shortly.","title":"Prerequisites"},{"location":"tutorials/OnionWiki/Tutorials/PHP-PushBullet-Example/#installing-php-php-curl","text":"The process of installing PHP on your Onion Omega is covered in this tutorial: PHP-GPIO-Example However to be able to send curl requests, you'll need one additional library called \"php5-mod-curl\". You can install this by running these commands in your Onion Omega console: opkg update opkg install php5-mod-curl Now restart uhttpd by running: /etc/init.d/uhttpd restart Now go to your php folder and create a new file: cd /www/php nano pushbullet.php Then paste in the code below, changing your auth token you got from step 1: ?php $authToken = your auth token here!!! ; $curl = curl_init('https://api.pushbullet.com/v2/pushes'); curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); curl_setopt($curl, CURLOPT_POST, true); curl_setopt($curl, CURLOPT_HTTPHEADER, [ Authorization: Bearer $authToken ]); curl_setopt($curl, CURLOPT_POSTFIELDS, [ type = note , title = Pushbullet Notification , body = Howdy, this is a message sent from my from My Onion Omega! ] ); $response = curl_exec($curl); echo pre ; print_r($response); echo /pre ; Save the file by pressing \"Ctrl+X\", pressing \"y\" and then \"Enter\" Now open your web browser and go to http://omega-ABCD.local/php/pushbullet.php (chaging the url to your Onion Omega of course :) ) Ta da!!","title":"Installing PHP &amp; PHP cURL"},{"location":"tutorials/OnionWiki/Tutorials/PHP-PushBullet-Example/#where-to-go-from-here","text":"The world is your oyster. How about trying one of the dedicated PHP libraries for Pushbullet to make development faster? https://github.com/ivkos/Pushbullet-for-PHP https://github.com/joetannenbaum/phpushbullet","title":"Where to go from here?"},{"location":"tutorials/OnionWiki/Tutorials/Python-GPIO-LED-Example/","text":"Getting Started Example with the Onion Omega Python In this quick tutorial you'll learn how to control the in-built LED in the expansion dock using Python. Time required: 5 minutes Installation First you'll need to install python also git for this example. To do this run the following commands from the console opkg update opkg install python-light git git-http This will take a few moments, once complete let's grab the example code from GitHub by running these commands: cd /root git clone https://github.com/BravoPapa/OmegaGPIO Running the Example Excellent, let's now change directories and run the example python script. cd OmegaGPIO python gpio_demo.py The RGB LED on your expansion dock will now be rotating through red, green blue. Neat eh? Using the GPIO Functions Take a look at omega_gpio.py file to see the available functions that can be used in your own Python projects. Using a GPIO as Output Here is a small sample of code that sets GPIO13 to HIGH and then LOW 5 seconds later: import omega_gpio import time # initialize the pin gpioNum = 13 omega_gpio.initpin(gpioNum,'out') # set the pin to HIGH omega_gpio.setoutput(gpioNum, 1) # wait 5 seconds and set to LOW time.sleep(5) omega_gpio.setoutput(gpioNum, 0) # release the pin omega_gpio.closepin(gpioNum,'out') Using a GPIO as Input This sample of code shows how to read and print the input value of a GPIO every 5 seconds for a minute: import omega_gpio import time # initialize the pin gpioNum = 26 omega_gpio.initpin(gpioNum,'in') # perform 12 reads, each 5 seconds apart for i in range (0, 12): print 'GPIO%d value: %d'%(gpioNum, omega_gpio.readinput(gpioNum) ) time.sleep(5) # release the pin omega_gpio.closepin(gpioNum,'out') Further Reading A huge hat-tip to Brian Piersel for posting this example code in the community forums . And a thank you from Onion to Matthew Ogborne for writing this tutorial. More details on the Onion Omega GPIO Pins can be found here.","title":"Getting Started Example with the Onion Omega & Python"},{"location":"tutorials/OnionWiki/Tutorials/Python-GPIO-LED-Example/#getting-started-example-with-the-onion-omega-python","text":"In this quick tutorial you'll learn how to control the in-built LED in the expansion dock using Python. Time required: 5 minutes","title":"Getting Started Example with the Onion Omega &amp; Python"},{"location":"tutorials/OnionWiki/Tutorials/Python-GPIO-LED-Example/#installation","text":"First you'll need to install python also git for this example. To do this run the following commands from the console opkg update opkg install python-light git git-http This will take a few moments, once complete let's grab the example code from GitHub by running these commands: cd /root git clone https://github.com/BravoPapa/OmegaGPIO","title":"Installation"},{"location":"tutorials/OnionWiki/Tutorials/Python-GPIO-LED-Example/#running-the-example","text":"Excellent, let's now change directories and run the example python script. cd OmegaGPIO python gpio_demo.py The RGB LED on your expansion dock will now be rotating through red, green blue. Neat eh?","title":"Running the Example"},{"location":"tutorials/OnionWiki/Tutorials/Python-GPIO-LED-Example/#using-the-gpio-functions","text":"Take a look at omega_gpio.py file to see the available functions that can be used in your own Python projects.","title":"Using the GPIO Functions"},{"location":"tutorials/OnionWiki/Tutorials/Python-GPIO-LED-Example/#using-a-gpio-as-output","text":"Here is a small sample of code that sets GPIO13 to HIGH and then LOW 5 seconds later: import omega_gpio import time # initialize the pin gpioNum = 13 omega_gpio.initpin(gpioNum,'out') # set the pin to HIGH omega_gpio.setoutput(gpioNum, 1) # wait 5 seconds and set to LOW time.sleep(5) omega_gpio.setoutput(gpioNum, 0) # release the pin omega_gpio.closepin(gpioNum,'out')","title":"Using a GPIO as Output"},{"location":"tutorials/OnionWiki/Tutorials/Python-GPIO-LED-Example/#using-a-gpio-as-input","text":"This sample of code shows how to read and print the input value of a GPIO every 5 seconds for a minute: import omega_gpio import time # initialize the pin gpioNum = 26 omega_gpio.initpin(gpioNum,'in') # perform 12 reads, each 5 seconds apart for i in range (0, 12): print 'GPIO%d value: %d'%(gpioNum, omega_gpio.readinput(gpioNum) ) time.sleep(5) # release the pin omega_gpio.closepin(gpioNum,'out')","title":"Using a GPIO as Input"},{"location":"tutorials/OnionWiki/Tutorials/Python-GPIO-LED-Example/#further-reading","text":"A huge hat-tip to Brian Piersel for posting this example code in the community forums . And a thank you from Onion to Matthew Ogborne for writing this tutorial. More details on the Onion Omega GPIO Pins can be found here.","title":"Further Reading"},{"location":"tutorials/OnionWiki/Tutorials/Python-I2C-LCD-Display/","text":"LCD I2C Library This tutorial shows you how to control an I2C-based LCD Display with a custom library. Let's get started! The Setup Downloading Software We first need to install some software that this library requires: opkg update opkg install git git-http python-light pyOnionI2C Next, we will download the custom I2C LED library: cd /root git clone https://bitbucket.org/fires/fireonion_i2c_lcd Connecting the LCD Display Make the following connections: Omega Pin LCD Display Pin 5V 5V GND GND 20 SCL 21 SDA Running the LCD Library Code Navigate to the src directory: cd fireonion_i2c_lcd/src Run the command: python lcd.py Now you should see sample text on your LCD. You can edit lcd.py to change the displayed text. You can also import the whole library into your own python project! More More and latest info at : http://davidstein.cz/2016/03/13/onion-io-i2c-lcd-16x220x4-backpack-library/ To Do Add support to call this library from shell with arguments to make it more confortable use with other programming languages Test on 20x4 display. IF SOMEBODY GOT a 20x4 Display please test it and send feedback. Acknowledgements Thanks to Fires04 for writing this tutorial!","title":"LCD I2C Library"},{"location":"tutorials/OnionWiki/Tutorials/Python-I2C-LCD-Display/#lcd-i2c-library","text":"This tutorial shows you how to control an I2C-based LCD Display with a custom library. Let's get started!","title":"LCD I2C Library"},{"location":"tutorials/OnionWiki/Tutorials/Python-I2C-LCD-Display/#the-setup","text":"","title":"The Setup"},{"location":"tutorials/OnionWiki/Tutorials/Python-I2C-LCD-Display/#downloading-software","text":"We first need to install some software that this library requires: opkg update opkg install git git-http python-light pyOnionI2C Next, we will download the custom I2C LED library: cd /root git clone https://bitbucket.org/fires/fireonion_i2c_lcd","title":"Downloading Software"},{"location":"tutorials/OnionWiki/Tutorials/Python-I2C-LCD-Display/#connecting-the-lcd-display","text":"Make the following connections: Omega Pin LCD Display Pin 5V 5V GND GND 20 SCL 21 SDA","title":"Connecting the LCD Display"},{"location":"tutorials/OnionWiki/Tutorials/Python-I2C-LCD-Display/#running-the-lcd-library-code","text":"Navigate to the src directory: cd fireonion_i2c_lcd/src Run the command: python lcd.py Now you should see sample text on your LCD. You can edit lcd.py to change the displayed text. You can also import the whole library into your own python project!","title":"Running the LCD Library Code"},{"location":"tutorials/OnionWiki/Tutorials/Python-I2C-LCD-Display/#more","text":"More and latest info at : http://davidstein.cz/2016/03/13/onion-io-i2c-lcd-16x220x4-backpack-library/","title":"More"},{"location":"tutorials/OnionWiki/Tutorials/Python-I2C-LCD-Display/#to-do","text":"Add support to call this library from shell with arguments to make it more confortable use with other programming languages Test on 20x4 display. IF SOMEBODY GOT a 20x4 Display please test it and send feedback.","title":"To Do"},{"location":"tutorials/OnionWiki/Tutorials/Python-I2C-LCD-Display/#acknowledgements","text":"Thanks to Fires04 for writing this tutorial!","title":"Acknowledgements"},{"location":"tutorials/OnionWiki/Tutorials/Reading-1Wire-Sensor-Data/","text":"Reading 1-Wire Sensor Data with the Omega Tutorial written by Onion Community member Omega303 This tutorial is on how to set up the 1-Wire interface, connect sensors to GPIO pins and read sensor data with the Omega. The Omega can read sensor data via 1-Wire bus system connected to GPIO pins. Connecting Hardware 1-Wire sensors provide 3 connectors: Power Supply (3.3 V) GND (ground) DQ (data line) Read your sensors data sheet to identify the appropriate pins! Connect the sensors: Sensor Onion Omega Resistor 4.7 kOhm GND GND PowerSupply 3.3 V pin 1 DQ (data line) GPIO # pin 2 Where # can be any of the available GPIO pins [0, 1, 6, 7, 8, 12 ,13, 14, 18, 19, 23, 26] For the sake of this tutorial use GPIO 19 The dimension of the pullup resistor may defer depending on: the actual sensor (some may have built-in resistors) the number of sensors connected the length of the connection wire Setting up 1-Wire Bus System Steps to setup 1-Wire bus system: Ensure you are on Omega firmware b270 or higher Configure the GPIO pin connected to the data line of the sensor echo \"w1-gpio-custom bus0=0,19,0\" /etc/modules.d/55-w1-gpio-custom replace 19 with the GPIO pin # you want to use reboot your Omega Check if the following folder exists: /sys/devices/w1_bus_master1/28-000123456789/ Where 28-000123456789 is a unique id of your sensor and may look similar but not equally Read the Sensor Data Read raw sensor data cat /sys/devices/w1_bus_master1/28-000123456789/w1_slave prints something similar for a temperature sensor [DS18B20] 63 01 4b 46 7f ff 0c 10 d1 : crc=d1 YES 63 01 4b 46 7f ff 0c 10 d1 t=22187 Trimmed and formatted (for DS18B20) awk -F= '/t=/ {printf \"%.03f\\n\", $2/1000}' /sys/devices/w1_bus_master1/28-000123456789/w1_slave would return 22.187","title":"Reading 1-Wire Sensor Data with the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Reading-1Wire-Sensor-Data/#reading-1-wire-sensor-data-with-the-omega","text":"Tutorial written by Onion Community member Omega303 This tutorial is on how to set up the 1-Wire interface, connect sensors to GPIO pins and read sensor data with the Omega. The Omega can read sensor data via 1-Wire bus system connected to GPIO pins.","title":"Reading 1-Wire Sensor Data with the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Reading-1Wire-Sensor-Data/#connecting-hardware","text":"1-Wire sensors provide 3 connectors: Power Supply (3.3 V) GND (ground) DQ (data line) Read your sensors data sheet to identify the appropriate pins! Connect the sensors: Sensor Onion Omega Resistor 4.7 kOhm GND GND PowerSupply 3.3 V pin 1 DQ (data line) GPIO # pin 2 Where # can be any of the available GPIO pins [0, 1, 6, 7, 8, 12 ,13, 14, 18, 19, 23, 26] For the sake of this tutorial use GPIO 19 The dimension of the pullup resistor may defer depending on: the actual sensor (some may have built-in resistors) the number of sensors connected the length of the connection wire","title":"Connecting Hardware"},{"location":"tutorials/OnionWiki/Tutorials/Reading-1Wire-Sensor-Data/#setting-up-1-wire-bus-system","text":"Steps to setup 1-Wire bus system: Ensure you are on Omega firmware b270 or higher Configure the GPIO pin connected to the data line of the sensor echo \"w1-gpio-custom bus0=0,19,0\" /etc/modules.d/55-w1-gpio-custom replace 19 with the GPIO pin # you want to use reboot your Omega Check if the following folder exists: /sys/devices/w1_bus_master1/28-000123456789/ Where 28-000123456789 is a unique id of your sensor and may look similar but not equally","title":"Setting up 1-Wire Bus System"},{"location":"tutorials/OnionWiki/Tutorials/Reading-1Wire-Sensor-Data/#read-the-sensor-data","text":"Read raw sensor data cat /sys/devices/w1_bus_master1/28-000123456789/w1_slave prints something similar for a temperature sensor [DS18B20] 63 01 4b 46 7f ff 0c 10 d1 : crc=d1 YES 63 01 4b 46 7f ff 0c 10 d1 t=22187 Trimmed and formatted (for DS18B20) awk -F= '/t=/ {printf \"%.03f\\n\", $2/1000}' /sys/devices/w1_bus_master1/28-000123456789/w1_slave would return 22.187","title":"Read the Sensor Data"},{"location":"tutorials/OnionWiki/Tutorials/Reflash-The-Firmware-With-Ethernet-Expansion/","text":"De-Brick the Omega with Ethernet Expansion [[ TOC ]] Sometimes if you flash the wrong firmware onto the Omega or if you accidentally restarted the Omega when it is performing a firmware upgrade, it might go into kernel panic when you try to boot it up. In this case, the Omega is bricked, and since you cannot boot into it to perform a factory reset, you will need to manually re-flash the firmware with an ethernet expansion. Step 1. Download the Latest Firmware Download the latest version of the Omega firmware from http://repo.onion.io/omega/images. Newest firmware has the highest build number. Step 2. Connect the Ethernet Expansion to the Omega First, you will need to connect the Ethernet Dock to the Omega. Step 3. Connect the Omega to your Computer via Ethernet Then, you should connect the Omega to your computer with an ethernet cable. (I'm connecting the Omega to my computer through an USB-Ethernet adapter because my MacBook Air doesn't come with an ethernet jack). Step 4. Connect The Omega to the Serial Terminal You can find more information about how to connect the Omega to the serial terminal [[here|Tutorials/Connecting-to-Omega-via-Serial-Terminal]]. Step 5. Start the http server on uboot First make sure your Omega is turned off. Switch over to the serial terminal, and turn on the Omega. You should see the following lines scroll by: ********************************************* * U-Boot 1.1.4 (Sep 14 2015, 08:21:31) * ********************************************* AP121 (AR9331) U-Boot for Onion Omega DRAM: 64 MB DDR2 16-bit id read ox100000ff FLASH: 16MCLOCKS: 400/400/200/20 MHz (CPU/RAM/AHB/SPI) LED on during eth initialization... Hit any key to stop autobooting: 3 Quickly press any key to interrupt the normal boot sequence and boot into Omega's uboot. If the you missed the 3-second window to interrupt the boot sequence, simply turn the Omega off and try again. Once you boot into uboot, you should see a command prompt: Omega For a list of available commands available in uboot you can use the help command, but to flash the firmware, we will be turning on the http server with the httpd command: Omega httpd Ethernet mode (duplex/speed): 1/100 Mbps HTTP server is starting at IP: 192.168.1.1 HTTP server is ready! If you see the following output, it means that your Omega is not properly to your computer. Reconnect the ethernet cable and try again. Omega httpd Link down: eth0 Link down: eth1 Link down: eth0 Link down: eth1 Link down: eth0 Link down: eth1 Link down: eth0 Link down: eth1 Link down: eth0 Link down: eth1 Link down: eth0 Link down: eth1 Link down: eth0 Link down: eth1 Link down: eth0 Link down: eth1 Link down: eth0 Link down: eth1 Link down: eth0 Link down: eth1 ## Error: couldn't initialize eth (cable disconnected?)! Omega Step 6. Access the Re-Flash Interface Through Your Browser Point your browser to 192.168.1.1 . You should be presented with the following page: Step 7. Flash the Firmware! Click on the Choose File button and select the binary you downloaded from Step 1 and click on the Update! button to start the flashing the process. Once the firmware has been uploaded, you will see the following confirmation page: NOTE: Please note that at this point the firmware update has NOT completed yet! The Device will reboot automatically once the flash procedure is complete. Rebooting the Omega prematurely will brick the Omega again and you will need to re-flash the Omega again! Happy hacking!","title":"De-Brick the Omega with Ethernet Expansion"},{"location":"tutorials/OnionWiki/Tutorials/Reflash-The-Firmware-With-Ethernet-Expansion/#de-brick-the-omega-with-ethernet-expansion","text":"[[ TOC ]] Sometimes if you flash the wrong firmware onto the Omega or if you accidentally restarted the Omega when it is performing a firmware upgrade, it might go into kernel panic when you try to boot it up. In this case, the Omega is bricked, and since you cannot boot into it to perform a factory reset, you will need to manually re-flash the firmware with an ethernet expansion.","title":"De-Brick the Omega with Ethernet Expansion"},{"location":"tutorials/OnionWiki/Tutorials/Reflash-The-Firmware-With-Ethernet-Expansion/#step-1-download-the-latest-firmware","text":"Download the latest version of the Omega firmware from http://repo.onion.io/omega/images. Newest firmware has the highest build number.","title":"Step 1. Download the Latest Firmware"},{"location":"tutorials/OnionWiki/Tutorials/Reflash-The-Firmware-With-Ethernet-Expansion/#step-2-connect-the-ethernet-expansion-to-the-omega","text":"First, you will need to connect the Ethernet Dock to the Omega.","title":"Step 2. Connect the Ethernet Expansion to the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Reflash-The-Firmware-With-Ethernet-Expansion/#step-3-connect-the-omega-to-your-computer-via-ethernet","text":"Then, you should connect the Omega to your computer with an ethernet cable. (I'm connecting the Omega to my computer through an USB-Ethernet adapter because my MacBook Air doesn't come with an ethernet jack).","title":"Step 3. Connect the Omega to your Computer via Ethernet"},{"location":"tutorials/OnionWiki/Tutorials/Reflash-The-Firmware-With-Ethernet-Expansion/#step-4-connect-the-omega-to-the-serial-terminal","text":"You can find more information about how to connect the Omega to the serial terminal [[here|Tutorials/Connecting-to-Omega-via-Serial-Terminal]].","title":"Step 4. Connect The Omega to the Serial Terminal"},{"location":"tutorials/OnionWiki/Tutorials/Reflash-The-Firmware-With-Ethernet-Expansion/#step-5-start-the-http-server-on-uboot","text":"First make sure your Omega is turned off. Switch over to the serial terminal, and turn on the Omega. You should see the following lines scroll by: ********************************************* * U-Boot 1.1.4 (Sep 14 2015, 08:21:31) * ********************************************* AP121 (AR9331) U-Boot for Onion Omega DRAM: 64 MB DDR2 16-bit id read ox100000ff FLASH: 16MCLOCKS: 400/400/200/20 MHz (CPU/RAM/AHB/SPI) LED on during eth initialization... Hit any key to stop autobooting: 3 Quickly press any key to interrupt the normal boot sequence and boot into Omega's uboot. If the you missed the 3-second window to interrupt the boot sequence, simply turn the Omega off and try again. Once you boot into uboot, you should see a command prompt: Omega For a list of available commands available in uboot you can use the help command, but to flash the firmware, we will be turning on the http server with the httpd command: Omega httpd Ethernet mode (duplex/speed): 1/100 Mbps HTTP server is starting at IP: 192.168.1.1 HTTP server is ready! If you see the following output, it means that your Omega is not properly to your computer. Reconnect the ethernet cable and try again. Omega httpd Link down: eth0 Link down: eth1 Link down: eth0 Link down: eth1 Link down: eth0 Link down: eth1 Link down: eth0 Link down: eth1 Link down: eth0 Link down: eth1 Link down: eth0 Link down: eth1 Link down: eth0 Link down: eth1 Link down: eth0 Link down: eth1 Link down: eth0 Link down: eth1 Link down: eth0 Link down: eth1 ## Error: couldn't initialize eth (cable disconnected?)! Omega","title":"Step 5. Start the http server on uboot"},{"location":"tutorials/OnionWiki/Tutorials/Reflash-The-Firmware-With-Ethernet-Expansion/#step-6-access-the-re-flash-interface-through-your-browser","text":"Point your browser to 192.168.1.1 . You should be presented with the following page:","title":"Step 6. Access the Re-Flash Interface Through Your Browser"},{"location":"tutorials/OnionWiki/Tutorials/Reflash-The-Firmware-With-Ethernet-Expansion/#step-7-flash-the-firmware","text":"Click on the Choose File button and select the binary you downloaded from Step 1 and click on the Update! button to start the flashing the process. Once the firmware has been uploaded, you will see the following confirmation page: NOTE: Please note that at this point the firmware update has NOT completed yet! The Device will reboot automatically once the flash procedure is complete. Rebooting the Omega prematurely will brick the Omega again and you will need to re-flash the Omega again! Happy hacking!","title":"Step 7. Flash the Firmware!"},{"location":"tutorials/OnionWiki/Tutorials/Reflash-the-Firmware-with-Improvised-Ethernet/","text":"Reflashing a Bricked Omega with an Improvised Ethernet Connection When you brick your Omega, you will need to reflash your Omega through the uboot commandline interface. However, the re-flash precedure requires the use of an Ethernet Expansion. Fortunately, if you don't happen to have an ethernet expansion, you can build one yourself with a breadboard, some resistors and capacitors. [[ TOC ]] Required Materials A working Omega and Expansion Dock Technically any device with exposed Ethernet pins will work, for the purposes for this tutorial, we will be using an Omega The bricked Omega in an Expansion Dock 8x 100\u03a9* resistors 5x 0.1\u00b5F* capacitors Note: There is no exact requirement for the capacitors and resistors values, however the capacitors shouldn't be too big. (for example: 0.1\u00b5F and 100\u03a9 should work) The schematic The schematic below outlines the connections that will be made between the two Omegas: On a Breadboard This is how it looks on a breadboard: The process Here are the necessary steps after wiring the network connection: Boot the working Omega -- let's call it omega-good Connect the bricked Omega (omega-bricked) to a Linux PC with a USB cable (expansion switch still off) Connect to omega-bricked from the PC with screen /dev/ttyUSB0 115200 Turn on the power switch of the omega-bricked Expansion Dock and immediately hit enter in the screen session to get into uboot on omega-bricked printenv in uboot on omega-bricked shows that the ethernet IP is configured to be 192.168.1.1 Configure the ethernet connection of omega-good to use the static ip 192.168.1.100 : Modify the settings in /etc/config/network and restart the network using /etc/init.d/network restart Alternatively, run ifconfig eth0 192.168.1.100 up While in uboot in omega-bricked, verify with ping 192.168.1.100 that the network connection to omega-good works While in uboot in omega-bricked start httpd Use omega-good to create an SSH tunnel from the Linux PC to omega-bricked. Run ssh -L 8080:192.168.1.1:80 on omega-good, note that the SSH connection to omega-good is via WiFi). Open http://localhost:8080/ in a browser on the Linux PC. The SSH Tunnel redirects this to the httpd of omega-bricked you see the uboot httpd upgrade page in your browser. Download the latest version of the Omega firmware from http://repo.onion.io/omega/images . Newest firmware has the highest build number. Click on the Choose File button and select the binary you downloaded in the previous step and click on the Update! button to start the flashing process. Once the firmware has been uploaded, you will see the following confirmation page: Enjoy your de-bricked Omega! Acknowledgements Credits to Zheng Han and Johannes Zellner the images and content! Thank you to Chris McCaslin for making the nice wiki post and Lazar Demin for the edits :)","title":"Reflashing a Bricked Omega with an Improvised Ethernet Connection"},{"location":"tutorials/OnionWiki/Tutorials/Reflash-the-Firmware-with-Improvised-Ethernet/#reflashing-a-bricked-omega-with-an-improvised-ethernet-connection","text":"When you brick your Omega, you will need to reflash your Omega through the uboot commandline interface. However, the re-flash precedure requires the use of an Ethernet Expansion. Fortunately, if you don't happen to have an ethernet expansion, you can build one yourself with a breadboard, some resistors and capacitors. [[ TOC ]]","title":"Reflashing a Bricked Omega with an Improvised Ethernet Connection"},{"location":"tutorials/OnionWiki/Tutorials/Reflash-the-Firmware-with-Improvised-Ethernet/#required-materials","text":"A working Omega and Expansion Dock Technically any device with exposed Ethernet pins will work, for the purposes for this tutorial, we will be using an Omega The bricked Omega in an Expansion Dock 8x 100\u03a9* resistors 5x 0.1\u00b5F* capacitors Note: There is no exact requirement for the capacitors and resistors values, however the capacitors shouldn't be too big. (for example: 0.1\u00b5F and 100\u03a9 should work)","title":"Required Materials"},{"location":"tutorials/OnionWiki/Tutorials/Reflash-the-Firmware-with-Improvised-Ethernet/#the-schematic","text":"The schematic below outlines the connections that will be made between the two Omegas:","title":"The schematic"},{"location":"tutorials/OnionWiki/Tutorials/Reflash-the-Firmware-with-Improvised-Ethernet/#on-a-breadboard","text":"This is how it looks on a breadboard:","title":"On a Breadboard"},{"location":"tutorials/OnionWiki/Tutorials/Reflash-the-Firmware-with-Improvised-Ethernet/#the-process","text":"Here are the necessary steps after wiring the network connection: Boot the working Omega -- let's call it omega-good Connect the bricked Omega (omega-bricked) to a Linux PC with a USB cable (expansion switch still off) Connect to omega-bricked from the PC with screen /dev/ttyUSB0 115200 Turn on the power switch of the omega-bricked Expansion Dock and immediately hit enter in the screen session to get into uboot on omega-bricked printenv in uboot on omega-bricked shows that the ethernet IP is configured to be 192.168.1.1 Configure the ethernet connection of omega-good to use the static ip 192.168.1.100 : Modify the settings in /etc/config/network and restart the network using /etc/init.d/network restart Alternatively, run ifconfig eth0 192.168.1.100 up While in uboot in omega-bricked, verify with ping 192.168.1.100 that the network connection to omega-good works While in uboot in omega-bricked start httpd Use omega-good to create an SSH tunnel from the Linux PC to omega-bricked. Run ssh -L 8080:192.168.1.1:80 on omega-good, note that the SSH connection to omega-good is via WiFi). Open http://localhost:8080/ in a browser on the Linux PC. The SSH Tunnel redirects this to the httpd of omega-bricked you see the uboot httpd upgrade page in your browser. Download the latest version of the Omega firmware from http://repo.onion.io/omega/images . Newest firmware has the highest build number. Click on the Choose File button and select the binary you downloaded in the previous step and click on the Update! button to start the flashing process. Once the firmware has been uploaded, you will see the following confirmation page: Enjoy your de-bricked Omega!","title":"The process"},{"location":"tutorials/OnionWiki/Tutorials/Reflash-the-Firmware-with-Improvised-Ethernet/#acknowledgements","text":"Credits to Zheng Han and Johannes Zellner the images and content! Thank you to Chris McCaslin for making the nice wiki post and Lazar Demin for the edits :)","title":"Acknowledgements"},{"location":"tutorials/OnionWiki/Tutorials/Sending-Emails-With-Python/","text":"Sending Emails With the Omega using Python Since the Omega runs Linux, you can run an SMTP client on it and get it to send emails. For example, you can use this feature on connected hardware projects like a switch or a door bell, it can email you if there's any new activity. Step 1: Install mailsend opkg update opkg install mailsend Step 2: Send email with the command line with mailsend This step assumes that you have setup an SMTP server or have access to services such as Amazon's Simple Email Service (SES). mailsend -to recipient@email.com -from sender@email.com -ssl -port 465 -auth-login -smtp email-smtp.us-east-1.amazonaws.com -sub test +cc +bc -v -user smtp_username@smtp_server.com -pass \u201cp@ssw0rd\u201d -M Your message here Step 3: Sending Emails via Python Script Install Python opkg update opkg install python Write the script to send an email #!/usr/bin/python import smtplib sender = 'youruserid@yourhost.com' toaddrs = 'recipient@gmail.com' message = From: Onion Omega Onion@onionomega.com To: Recipient recipient@gmail.com Subject: SMTP e-mail test This is a test e-mail message. # Credentials password = 'yourpasswordhere' # The actual mail send server = smtplib.SMTP_SSL('email-smtp.us-east-1.amazonaws.com:465') # (\u2018Host:Port\u2019) server.login(sender,password) server.sendmail(sender, toaddrs, message) server.quit() print done Links: http://www.tutorialspoint.com/python/python_sending_email.htm Another example to send email using SSL via python http://stackoverflow.com/questions/24672079/send-email-using-smtp-ssl-port-465 Credit Thanks to Shamyl Mansoor for writing this awesome tutorial!","title":"Sending Emails With the Omega using Python"},{"location":"tutorials/OnionWiki/Tutorials/Sending-Emails-With-Python/#sending-emails-with-the-omega-using-python","text":"Since the Omega runs Linux, you can run an SMTP client on it and get it to send emails. For example, you can use this feature on connected hardware projects like a switch or a door bell, it can email you if there's any new activity.","title":"Sending Emails With the Omega using Python"},{"location":"tutorials/OnionWiki/Tutorials/Sending-Emails-With-Python/#step-1-install-mailsend","text":"opkg update opkg install mailsend","title":"Step 1: Install mailsend"},{"location":"tutorials/OnionWiki/Tutorials/Sending-Emails-With-Python/#step-2-send-email-with-the-command-line-with-mailsend","text":"This step assumes that you have setup an SMTP server or have access to services such as Amazon's Simple Email Service (SES). mailsend -to recipient@email.com -from sender@email.com -ssl -port 465 -auth-login -smtp email-smtp.us-east-1.amazonaws.com -sub test +cc +bc -v -user smtp_username@smtp_server.com -pass \u201cp@ssw0rd\u201d -M Your message here","title":"Step 2: Send email with the command line with mailsend"},{"location":"tutorials/OnionWiki/Tutorials/Sending-Emails-With-Python/#step-3-sending-emails-via-python-script","text":"","title":"Step 3: Sending Emails via Python Script"},{"location":"tutorials/OnionWiki/Tutorials/Sending-Emails-With-Python/#install-python","text":"opkg update opkg install python","title":"Install Python"},{"location":"tutorials/OnionWiki/Tutorials/Sending-Emails-With-Python/#write-the-script-to-send-an-email","text":"#!/usr/bin/python import smtplib sender = 'youruserid@yourhost.com' toaddrs = 'recipient@gmail.com' message = From: Onion Omega Onion@onionomega.com To: Recipient recipient@gmail.com Subject: SMTP e-mail test This is a test e-mail message. # Credentials password = 'yourpasswordhere' # The actual mail send server = smtplib.SMTP_SSL('email-smtp.us-east-1.amazonaws.com:465') # (\u2018Host:Port\u2019) server.login(sender,password) server.sendmail(sender, toaddrs, message) server.quit() print done","title":"Write the script to send an email"},{"location":"tutorials/OnionWiki/Tutorials/Sending-Emails-With-Python/#links","text":"http://www.tutorialspoint.com/python/python_sending_email.htm Another example to send email using SSL via python http://stackoverflow.com/questions/24672079/send-email-using-smtp-ssl-port-465","title":"Links:"},{"location":"tutorials/OnionWiki/Tutorials/Sending-Emails-With-Python/#credit","text":"Thanks to Shamyl Mansoor for writing this awesome tutorial!","title":"Credit"},{"location":"tutorials/OnionWiki/Tutorials/Sharing-with-Samba/","text":"Sharing Directories on the Omega with Samba Since the Omega has on-board WiFi, sharing files on the Omega with your local network is a breeze! We will be using the Samba Server to allow the Omega to host shared directories on your network. This tutorial will walk you through installing Samba, configuring it to share, and connecting to the shared directory from your computer. [[ TOC ]] What is Samba Samba is software that implements file and printer sharing on local networks. It is a re-implementation of the SMB (Server Message Block) network protocol, hence the name Samba. It runs on most Unix-based systems and even comes as a default on many. The beauty of Samba is that it is platform independant; Macs, Windows machines, and Linux boxes can all connect to Samba shared directories very easily. For more information, visit the Wikipedia Article or the Samba Organization website . Install Samba on the Omega First, we need to install the Samba Server on our Omega: opkg update opkg install samba36-server Note: This command may not work when the Samba version is updated. If it doesn't work, try the following: opkg list | grep samba The output will be something like: samba36-client - 3.6.25-5 - Samba 3.6 SMB/CIFS client samba36-server - 3.6.25-5 - The Samba software suite is a collection of programs that implements the SMB protocol for UNIX systems, allowing you to serve files and printers to Windows, NT, OS/2 and DOS clients. This protocol is sometimes also referred to as the LanManager or Netbios protocol. Then in your opkg install command, enter the listed sambaXY-server . Configuring our Shared Directories The main Samba configuration file can be found at /etc/config/samba . It can be configured with UCI but in this case we will be using vi to modify the file directly. By default it will have the following: config samba option 'name' 'OpenWrt' option 'workgroup' 'WORKGROUP' option 'description' 'OpenWrt' option 'homes' '0' When the setup is complete and samba is restarted, the /etc/samba/smb.conf file will be automatically regenerated and populated. If you're curious, you can check it out, but any changes you make will not take effect! Adding a Read-Only Share Let's share a directory from the Omega with the network. It'll be read-only and accessible without a password. Add the following to /etc/config/samba : config 'sambashare' option 'name' 'home-dir' option 'path' '/root' option 'guest_ok' 'yes' option 'create_mask' '0700' option 'dir_mask' '0700' option 'read_only' 'yes' The configuration above will allow guests to look at files in the /root directory. This specific network share will be called home-dir . For the change to take effect, restart Samba: /etc/init.d/samba restart Voila, your /root directory is now shared. Adding Another Read-Only Shared Directory There's no limit to how many directories can be shared with Samba. Let's say you have a USB drive plugged in and mounted at /mnt/sda1 and you want to share it as read-only, add the following to /etc/config/samba : config 'sambashare' option 'name' 'usb-share' option 'path' '/mnt/sda1' option 'guest_ok' 'yes' option 'create_mask' '0700' option 'dir_mask' '0700' option 'read_only' 'yes' Restart Samba with /etc/init.d/samba restart for the change to take effect. Now when you are setting up the Samba connection on your computer, you will have a choice between the home-dir and usb-share shares. Connecting to a Samba Share Now we'll connect to the Samba share with a computer. Using OS X On OS X, connecting to a Samba share can be done using Finder. Open a Finder window and hit Command+K. Alternatively, you can open the Go menu from the taskbar and click Connect to Server . Either way, it will open a window like this: In the Server Sddress, type smb://omega-ABCD.local where ABCD is the unique identifier of your Omega and click Connect , you will be greeted with a screen like this: After a little while, it will connect and prompt you for credentials. Since we've setup our Samba shares with guest_ok enabled, select Guest and click Connect : If you have multiple Samba shares configured, you will then be prompted to select the share that you would like to connect to: After than, it will just be like another directory on your computer: Disconnecting When you want to disconnect, find the shared directory under the Shared header in your sidebar, click the Eject icon to disconnect: Windows On Windows, we will be mapping a Samba Share as a Network Drive. Note: If you do not have Apple's Bonjour installed, you will have to use the Omega's IP address instead of the omega-ABCD.local name. Click the Start button and select Computer, then click Map a network drive on the top toolbar: In the window that opens, in the Folder form you'll need to enter the path to the Samba share. This includes the Omega's IP and the share name. For the purposes of this tutorial, lets say the Omega's IP is 192.168.1.226 . The syntax is: \\\\ Omega's IP \\ Share Name , so in our case it will be: \\\\192.168.1.226\\usb-share . Deselect Reconnect at Login and select Connect using different credentials and then click Finish : The next window will prompt you for a username and password. Since we've setup our Samba shares with guest_ok enabled, type Guest as the username and leave the password field blank: After a little while, it will connect and the share will be another drive on your computer: Disconnecting When you want to disconnect, find the mapped network drive on the sidebar, right-click it and select Disconnect : Summary Samba allows us to share directories on our Omega with the local network. This comes in handy if your Omega is connected to a USB hard-drive or collecting information that you would like to access from your computer at any time. Happy hacking!","title":"Sharing Directories on the Omega with Samba"},{"location":"tutorials/OnionWiki/Tutorials/Sharing-with-Samba/#sharing-directories-on-the-omega-with-samba","text":"Since the Omega has on-board WiFi, sharing files on the Omega with your local network is a breeze! We will be using the Samba Server to allow the Omega to host shared directories on your network. This tutorial will walk you through installing Samba, configuring it to share, and connecting to the shared directory from your computer. [[ TOC ]]","title":"Sharing Directories on the Omega with Samba"},{"location":"tutorials/OnionWiki/Tutorials/Sharing-with-Samba/#what-is-samba","text":"Samba is software that implements file and printer sharing on local networks. It is a re-implementation of the SMB (Server Message Block) network protocol, hence the name Samba. It runs on most Unix-based systems and even comes as a default on many. The beauty of Samba is that it is platform independant; Macs, Windows machines, and Linux boxes can all connect to Samba shared directories very easily. For more information, visit the Wikipedia Article or the Samba Organization website .","title":"What is Samba"},{"location":"tutorials/OnionWiki/Tutorials/Sharing-with-Samba/#install-samba-on-the-omega","text":"First, we need to install the Samba Server on our Omega: opkg update opkg install samba36-server Note: This command may not work when the Samba version is updated. If it doesn't work, try the following: opkg list | grep samba The output will be something like: samba36-client - 3.6.25-5 - Samba 3.6 SMB/CIFS client samba36-server - 3.6.25-5 - The Samba software suite is a collection of programs that implements the SMB protocol for UNIX systems, allowing you to serve files and printers to Windows, NT, OS/2 and DOS clients. This protocol is sometimes also referred to as the LanManager or Netbios protocol. Then in your opkg install command, enter the listed sambaXY-server .","title":"Install Samba on the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Sharing-with-Samba/#configuring-our-shared-directories","text":"The main Samba configuration file can be found at /etc/config/samba . It can be configured with UCI but in this case we will be using vi to modify the file directly. By default it will have the following: config samba option 'name' 'OpenWrt' option 'workgroup' 'WORKGROUP' option 'description' 'OpenWrt' option 'homes' '0' When the setup is complete and samba is restarted, the /etc/samba/smb.conf file will be automatically regenerated and populated. If you're curious, you can check it out, but any changes you make will not take effect!","title":"Configuring our Shared Directories"},{"location":"tutorials/OnionWiki/Tutorials/Sharing-with-Samba/#adding-a-read-only-share","text":"Let's share a directory from the Omega with the network. It'll be read-only and accessible without a password. Add the following to /etc/config/samba : config 'sambashare' option 'name' 'home-dir' option 'path' '/root' option 'guest_ok' 'yes' option 'create_mask' '0700' option 'dir_mask' '0700' option 'read_only' 'yes' The configuration above will allow guests to look at files in the /root directory. This specific network share will be called home-dir . For the change to take effect, restart Samba: /etc/init.d/samba restart Voila, your /root directory is now shared.","title":"Adding a Read-Only Share"},{"location":"tutorials/OnionWiki/Tutorials/Sharing-with-Samba/#adding-another-read-only-shared-directory","text":"There's no limit to how many directories can be shared with Samba. Let's say you have a USB drive plugged in and mounted at /mnt/sda1 and you want to share it as read-only, add the following to /etc/config/samba : config 'sambashare' option 'name' 'usb-share' option 'path' '/mnt/sda1' option 'guest_ok' 'yes' option 'create_mask' '0700' option 'dir_mask' '0700' option 'read_only' 'yes' Restart Samba with /etc/init.d/samba restart for the change to take effect. Now when you are setting up the Samba connection on your computer, you will have a choice between the home-dir and usb-share shares.","title":"Adding Another Read-Only Shared Directory"},{"location":"tutorials/OnionWiki/Tutorials/Sharing-with-Samba/#connecting-to-a-samba-share","text":"Now we'll connect to the Samba share with a computer.","title":"Connecting to a Samba Share"},{"location":"tutorials/OnionWiki/Tutorials/Sharing-with-Samba/#using-os-x","text":"On OS X, connecting to a Samba share can be done using Finder. Open a Finder window and hit Command+K. Alternatively, you can open the Go menu from the taskbar and click Connect to Server . Either way, it will open a window like this: In the Server Sddress, type smb://omega-ABCD.local where ABCD is the unique identifier of your Omega and click Connect , you will be greeted with a screen like this: After a little while, it will connect and prompt you for credentials. Since we've setup our Samba shares with guest_ok enabled, select Guest and click Connect : If you have multiple Samba shares configured, you will then be prompted to select the share that you would like to connect to: After than, it will just be like another directory on your computer: Disconnecting When you want to disconnect, find the shared directory under the Shared header in your sidebar, click the Eject icon to disconnect:","title":"Using OS X"},{"location":"tutorials/OnionWiki/Tutorials/Sharing-with-Samba/#windows","text":"On Windows, we will be mapping a Samba Share as a Network Drive. Note: If you do not have Apple's Bonjour installed, you will have to use the Omega's IP address instead of the omega-ABCD.local name. Click the Start button and select Computer, then click Map a network drive on the top toolbar: In the window that opens, in the Folder form you'll need to enter the path to the Samba share. This includes the Omega's IP and the share name. For the purposes of this tutorial, lets say the Omega's IP is 192.168.1.226 . The syntax is: \\\\ Omega's IP \\ Share Name , so in our case it will be: \\\\192.168.1.226\\usb-share . Deselect Reconnect at Login and select Connect using different credentials and then click Finish : The next window will prompt you for a username and password. Since we've setup our Samba shares with guest_ok enabled, type Guest as the username and leave the password field blank: After a little while, it will connect and the share will be another drive on your computer: Disconnecting When you want to disconnect, find the mapped network drive on the sidebar, right-click it and select Disconnect :","title":"Windows"},{"location":"tutorials/OnionWiki/Tutorials/Sharing-with-Samba/#summary","text":"Samba allows us to share directories on our Omega with the local network. This comes in handy if your Omega is connected to a USB hard-drive or collecting information that you would like to access from your computer at any time. Happy hacking!","title":"Summary"},{"location":"tutorials/OnionWiki/Tutorials/Updating-the-Omega/","text":"Updating the Firmware on the Omega The Onion team will be releasing firmware updates regularly to provide new features and to fix any issues. Omega Firmware Identification The firmware will be identified by a version code and a build number. The version code is in the format X.Y.Z The build number is an integer number For example: 0.0.2 b170 Important to Note Upgrading the firmware will delete/overwrite all of the files that are not in /etc or /usr We're comping up with way to update without nuking all the files, stay tuned! Updating with the Command Line: The firmware can be updated using the oupgrade tool. To check your device's version against the latest, do the following: oupgrade -check This will produce output like the following: Device Firmware Version: 0.0.2 b158 Checking latest version online... Repo Firmware Version: 0.0.2 b170 Comparing version numbers New build of current firmware available, upgrade is optional, rerun with '-force' option to upgrade If there is a new firmware version, run the following command to update: oupgrade If the latest firmware is the same version but there is a newer build number, the update is not mandatory. If you choose to update, run the following command: oupgrade -force The above commands will start the download of the new firmware from our servers, and will then initiate the update. DO NOT UNPLUG THE OMEGA DURING THE UPDATE ! Once the Omega has rebooted, the update has completed and your Omega is ready for fun! Updating with the Console: Open the Settings App, open the Update Restore pane, click the Upgrade button. This will start the the download of the new firmware from our servers, and will then initiate the update. DO NOT UNPLUG THE OMEGA DURING THE UPDATE ! Once the Omega has rebooted, the update has completed and your Omega is ready to go! Getting back to a Factory Image Omega We all love our Omegas and there are tons of things you can do with them. But because of the versatility you may find your self in a situation where you would like to start-over and get it to it's original out of the box state. To do this it takes an operational Omega. Credits to ChrisMcCaslin for contributing this section Step 1: Download the default firmware to your '/tmp/' directory (this is the Omega's RAM) using this command: cd /tmp wget http://repo.onion.io/omega/images/omega-v0.0.1-b156.bin Step 2: Install the factory firmware with the option to overwrite /etc/ sysupgrade -n /tmp/omega-v0.0.1-b156.bin Step 3: Now your Omega is on the factory firmware (0.0.1 b156). You will need to update your firmware to get all of the latest features made available by Onion!","title":"Updating the Firmware on the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Updating-the-Omega/#updating-the-firmware-on-the-omega","text":"The Onion team will be releasing firmware updates regularly to provide new features and to fix any issues.","title":"Updating the Firmware on the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Updating-the-Omega/#omega-firmware-identification","text":"The firmware will be identified by a version code and a build number. The version code is in the format X.Y.Z The build number is an integer number For example: 0.0.2 b170","title":"Omega Firmware Identification"},{"location":"tutorials/OnionWiki/Tutorials/Updating-the-Omega/#important-to-note","text":"Upgrading the firmware will delete/overwrite all of the files that are not in /etc or /usr We're comping up with way to update without nuking all the files, stay tuned!","title":"Important to Note"},{"location":"tutorials/OnionWiki/Tutorials/Updating-the-Omega/#updating-with-the-command-line","text":"The firmware can be updated using the oupgrade tool. To check your device's version against the latest, do the following: oupgrade -check This will produce output like the following: Device Firmware Version: 0.0.2 b158 Checking latest version online... Repo Firmware Version: 0.0.2 b170 Comparing version numbers New build of current firmware available, upgrade is optional, rerun with '-force' option to upgrade If there is a new firmware version, run the following command to update: oupgrade If the latest firmware is the same version but there is a newer build number, the update is not mandatory. If you choose to update, run the following command: oupgrade -force The above commands will start the download of the new firmware from our servers, and will then initiate the update. DO NOT UNPLUG THE OMEGA DURING THE UPDATE ! Once the Omega has rebooted, the update has completed and your Omega is ready for fun!","title":"Updating with the Command Line:"},{"location":"tutorials/OnionWiki/Tutorials/Updating-the-Omega/#updating-with-the-console","text":"Open the Settings App, open the Update Restore pane, click the Upgrade button. This will start the the download of the new firmware from our servers, and will then initiate the update. DO NOT UNPLUG THE OMEGA DURING THE UPDATE ! Once the Omega has rebooted, the update has completed and your Omega is ready to go!","title":"Updating with the Console:"},{"location":"tutorials/OnionWiki/Tutorials/Updating-the-Omega/#getting-back-to-a-factory-image-omega","text":"We all love our Omegas and there are tons of things you can do with them. But because of the versatility you may find your self in a situation where you would like to start-over and get it to it's original out of the box state. To do this it takes an operational Omega. Credits to ChrisMcCaslin for contributing this section","title":"Getting back to a Factory Image Omega"},{"location":"tutorials/OnionWiki/Tutorials/Updating-the-Omega/#step-1","text":"Download the default firmware to your '/tmp/' directory (this is the Omega's RAM) using this command: cd /tmp wget http://repo.onion.io/omega/images/omega-v0.0.1-b156.bin","title":"Step 1:"},{"location":"tutorials/OnionWiki/Tutorials/Updating-the-Omega/#step-2","text":"Install the factory firmware with the option to overwrite /etc/ sysupgrade -n /tmp/omega-v0.0.1-b156.bin","title":"Step 2:"},{"location":"tutorials/OnionWiki/Tutorials/Updating-the-Omega/#step-3","text":"Now your Omega is on the factory firmware (0.0.1 b156). You will need to update your firmware to get all of the latest features made available by Onion!","title":"Step 3:"},{"location":"tutorials/OnionWiki/Tutorials/Using-Git/","text":"Using Git [[ TOC ]] What is Git Git is a popular version control system that allows coders to track changes to their codebase, easily collaborate with others, and manage their project. Git is the version control system used by GitHub , the super popular online web-based repository hosting service. The team at Onion uses GitHub exclusively for all of our version control needs. Using Git on the Omega The Omega's operating system supports Git, allowing you to use the Omega like you would any other computer. Installing Git Installation of Git just requires a few packages: opkg update opkg install git git-http Using Git If you are completely new to git and GitHub, check out this short bootcamp series . There are a variety of tutorials available online for more info.","title":"Using Git"},{"location":"tutorials/OnionWiki/Tutorials/Using-Git/#using-git","text":"[[ TOC ]]","title":"Using Git"},{"location":"tutorials/OnionWiki/Tutorials/Using-Git/#what-is-git","text":"Git is a popular version control system that allows coders to track changes to their codebase, easily collaborate with others, and manage their project. Git is the version control system used by GitHub , the super popular online web-based repository hosting service. The team at Onion uses GitHub exclusively for all of our version control needs.","title":"What is Git"},{"location":"tutorials/OnionWiki/Tutorials/Using-Git/#using-git-on-the-omega","text":"The Omega's operating system supports Git, allowing you to use the Omega like you would any other computer.","title":"Using Git on the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Using-Git/#installing-git","text":"Installation of Git just requires a few packages: opkg update opkg install git git-http","title":"Installing Git"},{"location":"tutorials/OnionWiki/Tutorials/Using-Git/#using-git_1","text":"If you are completely new to git and GitHub, check out this short bootcamp series . There are a variety of tutorials available online for more info.","title":"Using Git"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-A-Router/","text":"Turning the Omega Into a WiFi Router Those of you familiar with OpenWRT will probably know that it was originally designed for use with routers, and only recently did it become a popular operating system for embedded devices in general. This tutorial will show you how to set up the Omega as a WiFi router. To do this, you will need: 1x Omega 1x Expansion Dock 1x Ethernet Expansion Step 1: Setup the Hardware First, connect the Omega to the Expansion Dock, and plug the Ethernet Expansion into the Expansion Dock. Then, connect the ethernet cable coming from your modem to the Ethernet Expansion, and connect the power to the Omega, as shown below: After you have connected everything, power on the Omega. Step 2: Disable wifisaint on the Omega Note that wifisaint was removed in Firmware v0.0.8, so this step is only required on firmwares prior to v0.0.8 wifisaint is a program that monitors the network settings on the Omega and tells it to connect to WiFi networks automatically. However, when you are using the Omega as a router, it doesn't need to be connected to any WiFi network because you will be connecting the Omega to your modem through an ethernet cable. So, we should disable wifisaint to prevent the Omega from continuously trying to connect to WiFi networks. To do this, you will be editing /etc/crontabs/root file, and commenting out the line that automatically runs wifisaint : Find the following line */10 * * * * /usr/bin/wifisaint and replace with # */10 * * * * /usr/bin/wifisaint Your Access Point should be turned on at this point. Step 3: Enable eth0 The Omega is primarily designed as a development board to prototype WiFi-enabled devices, so by default, we have turned off the ethernet interface eth0 in the firmware. In order to use the Omega as a router, you will need to re-enable this. To do this, you will need to open up the /etc/config/network file, and add the following line at the end of the file: config interface 'wan' option ifname 'eth0' option proto 'dhcp' option hostname 'OnionOmega' This will tell the Omega to turn on the eth0 interface and we will also be referring to this network as wan . Once you have saved and closed the file, run the following command to restart the network service to reload the new configuration: /etc/init.d/network restart Step 4: Configuring the WiFi Settings Next, you will need to open up the /etc/config/wireless file and configure two things. First, you should disable the WiFi network that the Omega is currently connected to. You can do this by deleting or commenting out a block that looks something like the following: config wifi-iface option device 'radio0' option mode 'sta' option network 'wwan' option ssid 'WiFi Network' option encryption 'psk2' option key 'TopSecret' option disabled '0' Next, you might want to configure the WiFi network that the Omega will be serving. You can do this by editing the following block: config wifi-iface option device 'radio0' option network 'wlan' option mode 'ap' option encryption 'psk2' option ssid 'OmegaRouter' option key 'RouterPassword' Within this block, you can change the SSID if your Omega, as well as the type of encryption you want to use for the router. Once you have finished customizing the WiFi network, simply save and close the file, and run the following command to restart the WiFi network: wifi Step 5: Enabling Packet Routing Next, you will need to configure the Omega to route packets from the ethernet interface ( eth0 ) to your WiFi interface ( wlan0 ). To do this, you will be editing the /etc/config/firewall file: find the the block that looks something like the following: config zone option name wan list network 'wwan' #list network 'wan6' option input ACCEPT option output ACCEPT option forward ACCEPT option masq 1 option mtu_fix 1 and add the following line: list network 'wan' What you will end up with is something like the following: config zone option name wan list network 'wwan' list network 'wan' #list network 'wan6' option input ACCEPT option output ACCEPT option forward ACCEPT option masq 1 option mtu_fix 1 What this tells the Omega to do is to add the wan network (which we defined in /etc/config/network file) to a firewall zone called wan . This zone has already been setup to route packets to another firewall zone called lan , which contains the wlan0 interface. Once you have saved and closed the file, run the following command to restart the firewall with the updated configuration: /etc/init.d/firewall restart Step 6: Using the Omega Router And we are done! To use the Omega Router, you simply need to connect your computer or your smartphone/tablet to the WiFi network that you configured in Step 4, and your devices should be able to access the Internet via the Omega :) Happy hacking!","title":"Turning the Omega Into a WiFi Router"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-A-Router/#turning-the-omega-into-a-wifi-router","text":"Those of you familiar with OpenWRT will probably know that it was originally designed for use with routers, and only recently did it become a popular operating system for embedded devices in general. This tutorial will show you how to set up the Omega as a WiFi router. To do this, you will need: 1x Omega 1x Expansion Dock 1x Ethernet Expansion","title":"Turning the Omega Into a WiFi Router"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-A-Router/#step-1-setup-the-hardware","text":"First, connect the Omega to the Expansion Dock, and plug the Ethernet Expansion into the Expansion Dock. Then, connect the ethernet cable coming from your modem to the Ethernet Expansion, and connect the power to the Omega, as shown below: After you have connected everything, power on the Omega.","title":"Step 1: Setup the Hardware"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-A-Router/#step-2-disable-wifisaint-on-the-omega","text":"Note that wifisaint was removed in Firmware v0.0.8, so this step is only required on firmwares prior to v0.0.8 wifisaint is a program that monitors the network settings on the Omega and tells it to connect to WiFi networks automatically. However, when you are using the Omega as a router, it doesn't need to be connected to any WiFi network because you will be connecting the Omega to your modem through an ethernet cable. So, we should disable wifisaint to prevent the Omega from continuously trying to connect to WiFi networks. To do this, you will be editing /etc/crontabs/root file, and commenting out the line that automatically runs wifisaint : Find the following line */10 * * * * /usr/bin/wifisaint and replace with # */10 * * * * /usr/bin/wifisaint Your Access Point should be turned on at this point.","title":"Step 2: Disable wifisaint on the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-A-Router/#step-3-enable-eth0","text":"The Omega is primarily designed as a development board to prototype WiFi-enabled devices, so by default, we have turned off the ethernet interface eth0 in the firmware. In order to use the Omega as a router, you will need to re-enable this. To do this, you will need to open up the /etc/config/network file, and add the following line at the end of the file: config interface 'wan' option ifname 'eth0' option proto 'dhcp' option hostname 'OnionOmega' This will tell the Omega to turn on the eth0 interface and we will also be referring to this network as wan . Once you have saved and closed the file, run the following command to restart the network service to reload the new configuration: /etc/init.d/network restart","title":"Step 3: Enable eth0"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-A-Router/#step-4-configuring-the-wifi-settings","text":"Next, you will need to open up the /etc/config/wireless file and configure two things. First, you should disable the WiFi network that the Omega is currently connected to. You can do this by deleting or commenting out a block that looks something like the following: config wifi-iface option device 'radio0' option mode 'sta' option network 'wwan' option ssid 'WiFi Network' option encryption 'psk2' option key 'TopSecret' option disabled '0' Next, you might want to configure the WiFi network that the Omega will be serving. You can do this by editing the following block: config wifi-iface option device 'radio0' option network 'wlan' option mode 'ap' option encryption 'psk2' option ssid 'OmegaRouter' option key 'RouterPassword' Within this block, you can change the SSID if your Omega, as well as the type of encryption you want to use for the router. Once you have finished customizing the WiFi network, simply save and close the file, and run the following command to restart the WiFi network: wifi","title":"Step 4: Configuring the WiFi Settings"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-A-Router/#step-5-enabling-packet-routing","text":"Next, you will need to configure the Omega to route packets from the ethernet interface ( eth0 ) to your WiFi interface ( wlan0 ). To do this, you will be editing the /etc/config/firewall file: find the the block that looks something like the following: config zone option name wan list network 'wwan' #list network 'wan6' option input ACCEPT option output ACCEPT option forward ACCEPT option masq 1 option mtu_fix 1 and add the following line: list network 'wan' What you will end up with is something like the following: config zone option name wan list network 'wwan' list network 'wan' #list network 'wan6' option input ACCEPT option output ACCEPT option forward ACCEPT option masq 1 option mtu_fix 1 What this tells the Omega to do is to add the wan network (which we defined in /etc/config/network file) to a firewall zone called wan . This zone has already been setup to route packets to another firewall zone called lan , which contains the wlan0 interface. Once you have saved and closed the file, run the following command to restart the firewall with the updated configuration: /etc/init.d/firewall restart","title":"Step 5: Enabling Packet Routing"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-A-Router/#step-6-using-the-omega-router","text":"And we are done! To use the Omega Router, you simply need to connect your computer or your smartphone/tablet to the WiFi network that you configured in Step 4, and your devices should be able to access the Internet via the Omega :) Happy hacking!","title":"Step 6: Using the Omega Router"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-Wifi-Ethernet-Bridge/","text":"Using the Omega as a WiFi Ethernet Bridge In this tutorial, we are going to go through how we can enable other devices to use the Omega's Ethernet Expansion to connect to an existing WiFi network. All we need to do to make it work is to do some configuration stuff, which is super easy. However, note that, once we enable the ethernet connection, the AP is interfered and disabled, so make sure that you really want to do this before you actually start. I will try to connect to my laptop instead of a switch in this tutorial, but it works in the same way. [[ TOC ]] Overview Tutorial Difficulty: Intermediate Time Required: 5 mins Required Materials: * Omega * Expansion Dock * Ethernet Dock * (Optional) Lan Switch Useful Experience: * Using Omega * Familiar with Openwrt firewall and network configuration * Familiar with networking The Actual Process What we are going to do is to first enable the Omega's ethernet connection, and then try to bridge the wireless internet connection with ethernet connection. There are several ways to do so, one of the ways is to modify the firewall configuration. Step 1: Connect Omega with WiFi This step is fairly easy, and there are a lot of tutorials tell us how to do so in different ways. Click here to view how to make it work. Step 2: Enable the Ethernet Connection in Omega There is an existing tutorial for this as well, click here to learn more. Basically what we need to do is to uncomment the following part licated at /etc/config/network : config interface 'lan' option ifname 'eth0' option type 'bridge' option proto 'static' option ipaddr '192.168.3.1' option netmask '255.255.255.0' option ip6assign '60' However, note that, in the tutorial, the option ipaddr is 192.168.4.1 , but our default ipaddr is 192.168.3.1 . If we used the x.x.4.1 ip address, the network is actually not working because it does not actually connect to our Omega. Hence, we are trying to use the default one. If you do take a look into the network file in /etc/config , you should find that besides the lan interface which we just uncommented, the wlan interface also has an option ipaddr with value 192.168.3.1 . This interface is to enable the AP function of Omeaga and this is how it is being interfered by doing so. If you want, you can just comment the wlan part out, it is not working anyway. After we did so, what we need to do next is to make the wwan interface (this is the part how Omega is able to access to wifi) connected to lan interface (this is the part we just uncommencted). If you want to learn more, go to Openwrt network configuration page . Step 3: Connect the Two Interfaces via Firewall Configuration There is another tutorial (as I said), click here . This tutorial is how to make Omega as a router. The theory is the same, all we need to do is to convert what is going on in the tutorial. The theory is that in the firewall configuration located at /etc/config/firewall , the zone wan is route packeting to zone lan . the list network option is what interface each zone can grant access to. By default, it is wwan network interface route packeting to wlan network interface, which means the internet accessed through wifi ( wwan ) is sending data ( route packeting ) to the access point ( wlan ), and that is how we can use Omega AP by default. If you still don't understand what I am talking about right now, don't worry, just follow what I am doing, it will work all fine. Once we understand what is going on, we can modify the file. What we are actually doing is to add a single line of configuration under zone lan . list network 'lan' list means access list, you can get the information through Openwrt Firewall configuration page . Now, the configuration looks like this: config zone option name lan list network 'wlan' list network 'lan' option input ACCEPT option output ACCEPT option forward ACCEPT Full example configuration files are available in their modified and \"ready\" state in this Github Gist here . Restart the network service by doing the following commands in this order, or simply rebooting the Omega: /etc/init.d/firewall restart /etc/init.d/network restart If using the commands above, wait until the command prompt reappears before it is ready. Step 4: Connect to Lan Switch via Ethernet Since we configured all the things, and restarted the service, now we should be able to connect with other devices via Ethernet. Make sure that your conection is set to Obtain IP address and DNS anddress Automatically . It should be set so by default. Using This Setup If you have a device that only can be connected via Ethernet and you only have WiFi avaliable, you could apply this tutorial to make it work! Or, you can extend Ethernet access to multiple cables using an Ethernet switch. Notes This will disable the Omega's WiFi AP. Related Tutorials Get started Using Ethernet Expansion Using Omega as a Router Acknowledgements Some more information can be found in our Onion Community thread here . Or you can visit the following websites to learn more: * Openwrt network configuration page * Openwrt Firewall configuration page","title":"Using the Omega as a WiFi Ethernet Bridge"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-Wifi-Ethernet-Bridge/#using-the-omega-as-a-wifi-ethernet-bridge","text":"In this tutorial, we are going to go through how we can enable other devices to use the Omega's Ethernet Expansion to connect to an existing WiFi network. All we need to do to make it work is to do some configuration stuff, which is super easy. However, note that, once we enable the ethernet connection, the AP is interfered and disabled, so make sure that you really want to do this before you actually start. I will try to connect to my laptop instead of a switch in this tutorial, but it works in the same way. [[ TOC ]]","title":"Using the Omega as a WiFi Ethernet Bridge"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-Wifi-Ethernet-Bridge/#overview","text":"Tutorial Difficulty: Intermediate Time Required: 5 mins Required Materials: * Omega * Expansion Dock * Ethernet Dock * (Optional) Lan Switch Useful Experience: * Using Omega * Familiar with Openwrt firewall and network configuration * Familiar with networking","title":"Overview"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-Wifi-Ethernet-Bridge/#the-actual-process","text":"What we are going to do is to first enable the Omega's ethernet connection, and then try to bridge the wireless internet connection with ethernet connection. There are several ways to do so, one of the ways is to modify the firewall configuration.","title":"The Actual Process"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-Wifi-Ethernet-Bridge/#step-1-connect-omega-with-wifi","text":"This step is fairly easy, and there are a lot of tutorials tell us how to do so in different ways. Click here to view how to make it work.","title":"Step 1: Connect Omega with WiFi"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-Wifi-Ethernet-Bridge/#step-2-enable-the-ethernet-connection-in-omega","text":"There is an existing tutorial for this as well, click here to learn more. Basically what we need to do is to uncomment the following part licated at /etc/config/network : config interface 'lan' option ifname 'eth0' option type 'bridge' option proto 'static' option ipaddr '192.168.3.1' option netmask '255.255.255.0' option ip6assign '60' However, note that, in the tutorial, the option ipaddr is 192.168.4.1 , but our default ipaddr is 192.168.3.1 . If we used the x.x.4.1 ip address, the network is actually not working because it does not actually connect to our Omega. Hence, we are trying to use the default one. If you do take a look into the network file in /etc/config , you should find that besides the lan interface which we just uncommented, the wlan interface also has an option ipaddr with value 192.168.3.1 . This interface is to enable the AP function of Omeaga and this is how it is being interfered by doing so. If you want, you can just comment the wlan part out, it is not working anyway. After we did so, what we need to do next is to make the wwan interface (this is the part how Omega is able to access to wifi) connected to lan interface (this is the part we just uncommencted). If you want to learn more, go to Openwrt network configuration page .","title":"Step 2: Enable the Ethernet Connection in Omega"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-Wifi-Ethernet-Bridge/#step-3-connect-the-two-interfaces-via-firewall-configuration","text":"There is another tutorial (as I said), click here . This tutorial is how to make Omega as a router. The theory is the same, all we need to do is to convert what is going on in the tutorial. The theory is that in the firewall configuration located at /etc/config/firewall , the zone wan is route packeting to zone lan . the list network option is what interface each zone can grant access to. By default, it is wwan network interface route packeting to wlan network interface, which means the internet accessed through wifi ( wwan ) is sending data ( route packeting ) to the access point ( wlan ), and that is how we can use Omega AP by default. If you still don't understand what I am talking about right now, don't worry, just follow what I am doing, it will work all fine. Once we understand what is going on, we can modify the file. What we are actually doing is to add a single line of configuration under zone lan . list network 'lan' list means access list, you can get the information through Openwrt Firewall configuration page . Now, the configuration looks like this: config zone option name lan list network 'wlan' list network 'lan' option input ACCEPT option output ACCEPT option forward ACCEPT Full example configuration files are available in their modified and \"ready\" state in this Github Gist here . Restart the network service by doing the following commands in this order, or simply rebooting the Omega: /etc/init.d/firewall restart /etc/init.d/network restart If using the commands above, wait until the command prompt reappears before it is ready.","title":"Step 3: Connect the Two Interfaces via Firewall Configuration"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-Wifi-Ethernet-Bridge/#step-4-connect-to-lan-switch-via-ethernet","text":"Since we configured all the things, and restarted the service, now we should be able to connect with other devices via Ethernet. Make sure that your conection is set to Obtain IP address and DNS anddress Automatically . It should be set so by default.","title":"Step 4: Connect to Lan Switch via Ethernet"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-Wifi-Ethernet-Bridge/#using-this-setup","text":"If you have a device that only can be connected via Ethernet and you only have WiFi avaliable, you could apply this tutorial to make it work! Or, you can extend Ethernet access to multiple cables using an Ethernet switch.","title":"Using This Setup"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-Wifi-Ethernet-Bridge/#notes","text":"This will disable the Omega's WiFi AP.","title":"Notes"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-Wifi-Ethernet-Bridge/#related-tutorials","text":"Get started Using Ethernet Expansion Using Omega as a Router","title":"Related Tutorials"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-Wifi-Ethernet-Bridge/#acknowledgements","text":"Some more information can be found in our Onion Community thread here . Or you can visit the following websites to learn more: * Openwrt network configuration page * Openwrt Firewall configuration page","title":"Acknowledgements"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-Wifi-Range-Extender/","text":"Turning the Omega into a Wi-Fi Range Extender Even though the Omega has only one physical Wi-Fi interface, you can create two virtual interfaces and have the Omega relay the packets back and forth between the two interfaces. This allows you to set up the Omega as a Wi-Fi range extender that relays the packets between your computer/smartphone and your router. This can be very helpful if your router has a short range and you are having a problem connecting to your router directly from certain rooms in the house. Let's get started! 1. Enable the Access Point (AP) on the Omega Access Point on the Omega should be enabled by default. If it isn't already enabled, you will need to connect to the Omega via the [[serial terminal|Tutorials/Connecting-to-Omega-via-Serial-Terminal]]. Then, to enable the Access Point, you will need to edit /etc/config/wireless . Uncomment or add the following lines to the file: config wifi-iface option device 'radio0' option network 'wlan' option mode 'ap' option ssid 'Omega AP' option encryption 'psk2' option key 'onioneer' Then, to restart the Wi-Fi service with the new configuration: wifi Your Access Point should be turned on at this point. 2. Connect the Omega to the router Next, you will need to connect the Omega to your router. To do this, you will use the wifisetup command: root@Omega-0104:/# wifisetup Onion Omega Wifi Setup Select from the following: 1) Scan for Wifi networks 2) Type network info q) Exit Selection: Just follow the instruction to scan the Wi-Fi network and connect to it. 3. Use Your Omega Wi-Fi Range Extender At this point, your Omega is connected to router as well as serving its own access point, and the Omega is setup to relay information back and forth between these two Wi-Fi interfaces. This means that you can connect your computer/smartphone to the AP of your Omega, and be able to access the data coming from the router. To use the Omega as the Wi-Fi range extender, you would typically place the Omega somewhere between your router and your computer/smartphone. Packets will travel from your router to the Omega, and from the Omega to your computer/smartphone instead of directly from the router to the Omega. Happy hacking!","title":"Turning the Omega into a Wi-Fi Range Extender"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-Wifi-Range-Extender/#turning-the-omega-into-a-wi-fi-range-extender","text":"Even though the Omega has only one physical Wi-Fi interface, you can create two virtual interfaces and have the Omega relay the packets back and forth between the two interfaces. This allows you to set up the Omega as a Wi-Fi range extender that relays the packets between your computer/smartphone and your router. This can be very helpful if your router has a short range and you are having a problem connecting to your router directly from certain rooms in the house. Let's get started!","title":"Turning the Omega into a Wi-Fi Range Extender"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-Wifi-Range-Extender/#1-enable-the-access-point-ap-on-the-omega","text":"Access Point on the Omega should be enabled by default. If it isn't already enabled, you will need to connect to the Omega via the [[serial terminal|Tutorials/Connecting-to-Omega-via-Serial-Terminal]]. Then, to enable the Access Point, you will need to edit /etc/config/wireless . Uncomment or add the following lines to the file: config wifi-iface option device 'radio0' option network 'wlan' option mode 'ap' option ssid 'Omega AP' option encryption 'psk2' option key 'onioneer' Then, to restart the Wi-Fi service with the new configuration: wifi Your Access Point should be turned on at this point.","title":"1. Enable the Access Point (AP) on the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-Wifi-Range-Extender/#2-connect-the-omega-to-the-router","text":"Next, you will need to connect the Omega to your router. To do this, you will use the wifisetup command: root@Omega-0104:/# wifisetup Onion Omega Wifi Setup Select from the following: 1) Scan for Wifi networks 2) Type network info q) Exit Selection: Just follow the instruction to scan the Wi-Fi network and connect to it.","title":"2. Connect the Omega to the router"},{"location":"tutorials/OnionWiki/Tutorials/Using-Omega-As-Wifi-Range-Extender/#3-use-your-omega-wi-fi-range-extender","text":"At this point, your Omega is connected to router as well as serving its own access point, and the Omega is setup to relay information back and forth between these two Wi-Fi interfaces. This means that you can connect your computer/smartphone to the AP of your Omega, and be able to access the data coming from the router. To use the Omega as the Wi-Fi range extender, you would typically place the Omega somewhere between your router and your computer/smartphone. Packets will travel from your router to the Omega, and from the Omega to your computer/smartphone instead of directly from the router to the Omega. Happy hacking!","title":"3. Use Your Omega Wi-Fi Range Extender"},{"location":"tutorials/OnionWiki/Tutorials/Using-PWM-on-Exp-Dock/","text":"Using PWM with the Expansion Dock Pulse Width Modulation (PWM) is possible with the Omega plus just the Expansion Dock. It is software-based PWM and although it isn't quite as accurate as hardware-based PWM, it allows you to do most of the things you need PWM to accomplish. Software PWM vs Hardware PWM Software PWM is implemented by a program that usually waits for a defined amount of time before toggling the GPIO output. This has the potential to be inaccurate since the CPU might be interrupted with other processes and tasks. Software PWM is generally good enough for dimming an LED but not for something requiring more accuracy, such as driving a servo. Hardware PWM is done by programming a micro-controller that will output cycle-accurate PWM signals. The Servo Expansion has a micro-controller that can be programmed to provide cycle-accurate PWM. PWM on the Expansion Dock If you require PWM using the expansion dock and don't need it to be 100% accurate, we've built a tool that can provide software-based PWM. Usage: fast-gpio pwm gpio freq in Hz duty (out of 100) Example: fast-gpio pwm 14 200 25 The command above will set GPIO 14 to do PWM at 200 Hz with a 25% duty cycle. This means that during the 5ms period (P = 1/f), 25% of the time the signal will be HIGH and LOW the remaining 75% of the time. This image provides a good illustration: Here are some examples of different duty cycles:","title":"Using PWM with the Expansion Dock"},{"location":"tutorials/OnionWiki/Tutorials/Using-PWM-on-Exp-Dock/#using-pwm-with-the-expansion-dock","text":"Pulse Width Modulation (PWM) is possible with the Omega plus just the Expansion Dock. It is software-based PWM and although it isn't quite as accurate as hardware-based PWM, it allows you to do most of the things you need PWM to accomplish.","title":"Using PWM with the Expansion Dock"},{"location":"tutorials/OnionWiki/Tutorials/Using-PWM-on-Exp-Dock/#software-pwm-vs-hardware-pwm","text":"Software PWM is implemented by a program that usually waits for a defined amount of time before toggling the GPIO output. This has the potential to be inaccurate since the CPU might be interrupted with other processes and tasks. Software PWM is generally good enough for dimming an LED but not for something requiring more accuracy, such as driving a servo. Hardware PWM is done by programming a micro-controller that will output cycle-accurate PWM signals. The Servo Expansion has a micro-controller that can be programmed to provide cycle-accurate PWM.","title":"Software PWM vs Hardware PWM"},{"location":"tutorials/OnionWiki/Tutorials/Using-PWM-on-Exp-Dock/#pwm-on-the-expansion-dock","text":"If you require PWM using the expansion dock and don't need it to be 100% accurate, we've built a tool that can provide software-based PWM. Usage: fast-gpio pwm gpio freq in Hz duty (out of 100) Example: fast-gpio pwm 14 200 25 The command above will set GPIO 14 to do PWM at 200 Hz with a 25% duty cycle. This means that during the 5ms period (P = 1/f), 25% of the time the signal will be HIGH and LOW the remaining 75% of the time. This image provides a good illustration: Here are some examples of different duty cycles:","title":"PWM on the Expansion Dock"},{"location":"tutorials/OnionWiki/Tutorials/Using-SPI/","text":"Using the GPIOs for SPI Communication The Omega supports running the SPI protocol through the GPIOs, making it handy to communicate with an SPI-enabled peripherals. To implement SPI communication, the Omega has a C library, a Python module, and a command-line tool. This article will focus on the command line program, spi-tool [[ TOC ]] What is SPI? The Serial Peripheral Interface (SPI) is a four-wire synchronous communication protocol, largely used to connect microprocessors or microcontrollers to sensors, memory, and other peripherals. The four signals are: SPI Signal Meaning SCK System Clock MOSI Master Out, Slave In - Data sent from the Master to the Slave MISO Master In, Slave Out - Data sent from the Slave to the Master CS/SS Chip Select/Slave Select The fact that it is a synchronous data bus means that one of the lines is a clock, used to synchronize the bits being sent on the data lines. The protocol is based on the Master-Slave architecture, so the Master will generate the System Clock and the Slave Select signals. In systems with multiple slaves, there will be multiple Slave Select signals. For more details on SPI, check out the Wikipedia article . The Command Line Tool The spi-tool command line utility allows the user to read and write single bytes from an SPI device. In order for an SPI device to be used, it must first be registered with the system. The utility can perform that action as well; giving the SPI device a bus number and device ID. This bus number and device ID must then be used again when transferring data with the SPI device. Installing the Tool The utility is not included by default in the Omega's firmware, to install it: opkg update opkg install spi-tool Try running spi-tool -h for a print-out of the tool's usage, or continue reading down below. Setup an SPI Device Since the SPI signals are sent through the GPIOs, the Omega's Operating System needs to be told which signals correspond to which GPIOs along with other SPI parameters. The spi-tool utility allows you to easily register an SPI device with the system: spi-tool -b bus number -d device ID [options] setup This device registration will persist until the Omega is powered down or rebooted. Arguments The bus number and device ID arguments are required every time. The values of these two parameters don't mean anything, they just serve as identifiers for the device. Options The following options are available, allowing you to change the SPI setup: --frequency Hz Set max SPI frequency --delay us Set delay after the last bit transfered before optionally deselecting the device before the next transfer. --bpw number Set number of bits per word --sck gpio Set GPIO for SPI SCK signal --mosi gpio Set GPIO for SPI MOSI signal --miso gpio Set GPIO for SPI MISO signal --cs gpio Set GPIO for SPI CS signal --3wire SI/SO signals shared --no-cs No chip select signal --cs-high Set chip select to active high --lsb Transmit Least Significant Bit first Defaults By default, if none of the options are changed, the following values will be used: Option Default Value speed 100000 Hz (100 kHz) delay 0 bitsPerWord 0 (Corresponds to 8 bits per word) mode SPI Mode 0 SCK GPIO GPIO6 MOSI GPIO GPIO18 MISO GPIO GPIO1 CS GPIO GPIO7 Examples Setup an SPI device with the default options to bus 0, with device ID 1: spi-tool -b 0 -d 1 setup Setup an SPI device, bus 1, device ID 2, with a max speed of 400 kHz and a GPIO13 selected for the SCK signals: spi-tool -b 1 -d 2 --speed 400000 --sck 13 setup Setup an SPI device, bus 2, device ID 3, with a max speed of 320 kHz, the CS signal active-high, and using a three-wire setup: spi-tool -b 2 -d 3 --speed 320000 --cs-high --3wire setup Read a Byte Finally, interacting with the SPI device! To read a single byte from a registered SPI device: spi-tool -b bus number -d device ID [options] read address This command will print the byte read from the specified address on the SPI device. Arguments and Options The bus number and device ID need to correspond to the values used to register the device! Additionally, any options used in the registration of the device need to be repeated in this command. The address argument indicates the address from which to read on the SPI device. Examples Read a byte from address 0x11 from device 1 on bus 0 (registered above): root@Omega-ABCD:~# spi-tool -b 0 -d 1 read 0x11 SPI Read from addr 0x11: 0x81 Read a byte from address 0x00 from device 2 on bus 1 (registered above): root@Omega-ABCD:~# spi-tool -b 1 -d 2 --speed 400000 --sck 13 read 0x00 SPI Read from addr 0x00: 0xf8 Read a byte from address 0xaf from device 3 on bus 2 (registered above): root@Omega-ABCD:~# spi-tool -b 2 -d 3 --speed 320000 --cs-high --3wire read 0xaf SPI Read from addr 0xaf: 0xbe Write a Byte Along with reading, you can also use spi-tool to write to the SPI device: spi-tool -b bus number -d device ID [options] write address value Arguments and Options The bus number and device ID need to correspond to the values used to register the device! Additionally, any options used in the registration of the device need to be repeated in this command. The address and value arguments indicate the address on the SPI device to be written, and the value to write, respectively. Examples Write 0x42 to address 0x12 to device 1 on bus 0 (registered above): root@Omega-ABCD:~# spi-tool -b 0 -d 1 write 0x12 0x42 SPI Write to addr 0x12: 0x42 Write 0xfa to address 0x09 on device 2 on bus 1 (registered above): root@Omega-ABCD:~# spi-tool -b 1 -d 2 --speed 400000 --sck 13 write 0x09 0xfa SPI Write to addr 0x09: 0xfa Write 0x01 to address 0xbf on device 3 on bus 2 (registered above): root@Omega-ABCD:~# spi-tool -b 2 -d 3 --speed 320000 --cs-high --3wire write 0xbf 0x01 SPI Write to addr 0xbf: 0x01 Moving Beyond the Command Line The spi-tool utility allows for some basic interaction with SPI devices using the command line. With interesting projects and use-cases, you will require additional interaction with the SPI device that might not be suited to the command line. Well, you're in luck! There is an Onion developed C library and Python module that gives you the flexibility to use SPI devices however you want!","title":"Using the GPIOs for SPI Communication"},{"location":"tutorials/OnionWiki/Tutorials/Using-SPI/#using-the-gpios-for-spi-communication","text":"The Omega supports running the SPI protocol through the GPIOs, making it handy to communicate with an SPI-enabled peripherals. To implement SPI communication, the Omega has a C library, a Python module, and a command-line tool. This article will focus on the command line program, spi-tool [[ TOC ]]","title":"Using the GPIOs for SPI Communication"},{"location":"tutorials/OnionWiki/Tutorials/Using-SPI/#what-is-spi","text":"The Serial Peripheral Interface (SPI) is a four-wire synchronous communication protocol, largely used to connect microprocessors or microcontrollers to sensors, memory, and other peripherals. The four signals are: SPI Signal Meaning SCK System Clock MOSI Master Out, Slave In - Data sent from the Master to the Slave MISO Master In, Slave Out - Data sent from the Slave to the Master CS/SS Chip Select/Slave Select The fact that it is a synchronous data bus means that one of the lines is a clock, used to synchronize the bits being sent on the data lines. The protocol is based on the Master-Slave architecture, so the Master will generate the System Clock and the Slave Select signals. In systems with multiple slaves, there will be multiple Slave Select signals. For more details on SPI, check out the Wikipedia article .","title":"What is SPI?"},{"location":"tutorials/OnionWiki/Tutorials/Using-SPI/#the-command-line-tool","text":"The spi-tool command line utility allows the user to read and write single bytes from an SPI device. In order for an SPI device to be used, it must first be registered with the system. The utility can perform that action as well; giving the SPI device a bus number and device ID. This bus number and device ID must then be used again when transferring data with the SPI device.","title":"The Command Line Tool"},{"location":"tutorials/OnionWiki/Tutorials/Using-SPI/#installing-the-tool","text":"The utility is not included by default in the Omega's firmware, to install it: opkg update opkg install spi-tool Try running spi-tool -h for a print-out of the tool's usage, or continue reading down below.","title":"Installing the Tool"},{"location":"tutorials/OnionWiki/Tutorials/Using-SPI/#setup-an-spi-device","text":"Since the SPI signals are sent through the GPIOs, the Omega's Operating System needs to be told which signals correspond to which GPIOs along with other SPI parameters. The spi-tool utility allows you to easily register an SPI device with the system: spi-tool -b bus number -d device ID [options] setup This device registration will persist until the Omega is powered down or rebooted. Arguments The bus number and device ID arguments are required every time. The values of these two parameters don't mean anything, they just serve as identifiers for the device. Options The following options are available, allowing you to change the SPI setup: --frequency Hz Set max SPI frequency --delay us Set delay after the last bit transfered before optionally deselecting the device before the next transfer. --bpw number Set number of bits per word --sck gpio Set GPIO for SPI SCK signal --mosi gpio Set GPIO for SPI MOSI signal --miso gpio Set GPIO for SPI MISO signal --cs gpio Set GPIO for SPI CS signal --3wire SI/SO signals shared --no-cs No chip select signal --cs-high Set chip select to active high --lsb Transmit Least Significant Bit first Defaults By default, if none of the options are changed, the following values will be used: Option Default Value speed 100000 Hz (100 kHz) delay 0 bitsPerWord 0 (Corresponds to 8 bits per word) mode SPI Mode 0 SCK GPIO GPIO6 MOSI GPIO GPIO18 MISO GPIO GPIO1 CS GPIO GPIO7 Examples Setup an SPI device with the default options to bus 0, with device ID 1: spi-tool -b 0 -d 1 setup Setup an SPI device, bus 1, device ID 2, with a max speed of 400 kHz and a GPIO13 selected for the SCK signals: spi-tool -b 1 -d 2 --speed 400000 --sck 13 setup Setup an SPI device, bus 2, device ID 3, with a max speed of 320 kHz, the CS signal active-high, and using a three-wire setup: spi-tool -b 2 -d 3 --speed 320000 --cs-high --3wire setup","title":"Setup an SPI Device"},{"location":"tutorials/OnionWiki/Tutorials/Using-SPI/#read-a-byte","text":"Finally, interacting with the SPI device! To read a single byte from a registered SPI device: spi-tool -b bus number -d device ID [options] read address This command will print the byte read from the specified address on the SPI device. Arguments and Options The bus number and device ID need to correspond to the values used to register the device! Additionally, any options used in the registration of the device need to be repeated in this command. The address argument indicates the address from which to read on the SPI device. Examples Read a byte from address 0x11 from device 1 on bus 0 (registered above): root@Omega-ABCD:~# spi-tool -b 0 -d 1 read 0x11 SPI Read from addr 0x11: 0x81 Read a byte from address 0x00 from device 2 on bus 1 (registered above): root@Omega-ABCD:~# spi-tool -b 1 -d 2 --speed 400000 --sck 13 read 0x00 SPI Read from addr 0x00: 0xf8 Read a byte from address 0xaf from device 3 on bus 2 (registered above): root@Omega-ABCD:~# spi-tool -b 2 -d 3 --speed 320000 --cs-high --3wire read 0xaf SPI Read from addr 0xaf: 0xbe","title":"Read a Byte"},{"location":"tutorials/OnionWiki/Tutorials/Using-SPI/#write-a-byte","text":"Along with reading, you can also use spi-tool to write to the SPI device: spi-tool -b bus number -d device ID [options] write address value Arguments and Options The bus number and device ID need to correspond to the values used to register the device! Additionally, any options used in the registration of the device need to be repeated in this command. The address and value arguments indicate the address on the SPI device to be written, and the value to write, respectively. Examples Write 0x42 to address 0x12 to device 1 on bus 0 (registered above): root@Omega-ABCD:~# spi-tool -b 0 -d 1 write 0x12 0x42 SPI Write to addr 0x12: 0x42 Write 0xfa to address 0x09 on device 2 on bus 1 (registered above): root@Omega-ABCD:~# spi-tool -b 1 -d 2 --speed 400000 --sck 13 write 0x09 0xfa SPI Write to addr 0x09: 0xfa Write 0x01 to address 0xbf on device 3 on bus 2 (registered above): root@Omega-ABCD:~# spi-tool -b 2 -d 3 --speed 320000 --cs-high --3wire write 0xbf 0x01 SPI Write to addr 0xbf: 0x01","title":"Write a Byte"},{"location":"tutorials/OnionWiki/Tutorials/Using-SPI/#moving-beyond-the-command-line","text":"The spi-tool utility allows for some basic interaction with SPI devices using the command line. With interesting projects and use-cases, you will require additional interaction with the SPI device that might not be suited to the command line. Well, you're in luck! There is an Onion developed C library and Python module that gives you the flexibility to use SPI devices however you want!","title":"Moving Beyond the Command Line"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage-as-Rootfs/","text":"Using USB Storage as Rootfs (extroot) This tutorial is on how to use the USB storage device as the rootfs. If you simply want to use the USB storage device to store files (i.e., you won't be installing anything to it), then read [[Tutorials/Using-USB-Storage]] . The Omega comes with 16MB of flash storage. While this is enough for the majority of hardware-related tasks, having extra storage space is always better. Even though you can plug in external USB storage devices to the Omega, but because application packages are typically designed to be installed in the root filesystem (rootfs), those of you who want to install larger opkg packages would still be limited by the 16MB flash size. Luckily, with extroot, you can mount your USB storage device to the rootfs. There are two approaches to this: * With pivot-overlay , you can mount your USB storage device to /overlay , which is the writable part of your filesystem that's merged with /rom (the read-only part of your filesystem) to generate / . * With pivot-root , you can mount your USB storage device to both /overlay and /rom , which essentially allows you to replace Omega's on-board flash with your USB storage device. [[ TOC ]] extroot with pivot-overlay Pivot-overlay is the recommended extroot implementation because it is easier to set up and future firmware upgrade will still be written to Omega's flash (instead of your USB storage device). Step 1. Prerequisites Using extroot requires the following packages, all of them should already be installed on the default Omega firmware. But just in case you are using your own firmware, here they are again: * block-mount * kmod-fs-[filesystem of choice] , typically kmod-fs-ext4 * kmod-usb-storage-extras Install the packages with opkg : opkg update opkg install block-mount kmod-fs-ext4 kmod-usb-storage-extras Step 1.1 (Important to avoid errors) You also need to have a USB storage device formatted to ext4 (important to avoid errors). You can learn how to format a USB drive following the steps outlined in the How to format a USB drive to ext4 addendum section below. Step 2. Mounting the USB Storage Device Next, plug in your USB storage device. If your device is detected correctly by the Omega, it will show up at a device under the /dev directory, usually /dev/sda1 . Then, create a mount point for your device if you don't already have one with the following command: mkdir /mnt/sda1 Finally, mount the device: mount /dev/sda1 /mnt/sda1 Your USB storage device should now be accessible at /mnt/sda1 . Step 3. Duplicating the /overlay Directory Now, we are ready to move the /overlay directory into the USB storage device. mount /dev/sda1 /mnt ; tar -C /overlay -cvf - . | tar -C /mnt -xf - ; umount /mnt Step 4. Setting up the /overlay Directory to Automount on Startup First, we are going to generate the fstab template: block detect /etc/config/fstab Then, we are going to edit the /etc/config/fstab file, which we have just created, to enable auto-mounting the /overlay directory. Look for the line option target '/mnt/sda1' and change it to: option target '/overlay' Then, look for the line: option enabled '0' and change it to option enabled '1' Save the file and restart the Omega: reboot And voil\u00e0! Your Omega should automatically mount the /overlay directory. From this point on, all changes to your filesystem will be made on your USB storage device. Please remember that if you startup your Omega with out plugging in the USB storage device, some settings may be different because all the settings will be saved on your USB device. exroot with pivot-root Pivot-root is the extroot implementation that completely replaces the flash storage on the Omega with your USB storage device. Using pivot-root method means that all fugure firmware upgrade (unless it is done by uboot) will be done to your USB storage device. Step 1. Prerequisites Using extroot requires the following packages, all of them should already be installed on the default Omega firmware. But just in case you are using your own firmware, here they are again: * block-mount * kmod-fs-[filesystem of choice] , typically kmod-fs-ext4 * kmod-usb-storage-extras Install the packages with opkg : opkg update opkg install block-mount kmod-fs-ext4 kmod-usb-storage-extras You also need to have a USB storage device formatted to ext4 (or another filesystem you chose above). Step 2. Mounting the USB Storage Device Next, plug in your USB storage device. If your device is detected correctly by the Omega, it will show up at a device under the /dev directory, usually /dev/sda1 . Then, create a mount point for your device if you don't already have one with the following command: mkdir /mnt/sda1 Finally, mount the device: mount /dev/sda1 /mnt/sda1 Your USB storage device should now be accessible at /mnt/sda1 . Step 3. Duplicating your rootfs Next, we must make a complete copy of the of the root filesystem to the external rootfs device. To do this, we will first create a temporary directory that acts as the mount point for the current / directory: mkdir -p /tmp/cproot Then, we will create a bind mount of / at /tmp/cproot : mount --bind / /tmp/cproot Now, we will make a complete copy of the rootfs to your USB storage device: tar -C /tmp/cproot -cvf - . | tar -C /mnt/sda1 -xf - Finally, we will unmount the bind mount: umount /tmp/cproot Great! Now you have created a complete copy of your current rootfs on your USB storage device! Step 4. Configure Omega to Automount USB Storage Device on Boot We will now configure the Omega to automatically mount your USB storage device to / on startup. This essentially means that we will be using the firmware on Omega's own flash storage as a \"bootloader\" that run the filesystem on your USB storage as rootfs. To do this, we will open up /etc/config/fstab , and add the following lines to it: config mount option target / option device /dev/sda1 option fstype ext4 option options rw,sync option enabled 1 option enabled_fsck 0 Save the file and reboot: reboot And voil\u00e0! Your Omega should automatically mount your USB storage device as its rootfs. From this point on, all changes to your filesystem, including firmware upgrades, will be made on your USB storage device. If you change your mind and want to revert back to running the firmware off Omega's flash storage, simply unplug the USB storage and reboot the Omega. Happy hacking! Addendum Procedures How to format a USB drive to ext4 In this short additional tutorial you'll learn how to format a USB drive to ext4 so it can be used as rootfs or additional storage. This is handly as USB drives typically arrive pre-formatted with fat32! Run these commands on the Omega's terminal: opkg update opkg install kmod-usb-storage-extras e2fsprogs kmod-fs-ext4 This installs the required tools, next plug in your USB drive. Next we need to format the USB drive with ext4, typically the drive is mounded as \"sda1\" (change the value if required): mkfs.ext4 /dev/sda1 Now you can mount the USB drive and use it for either general storage , extroot with pivot-overlay or exroot with pivot-root .","title":"Using USB Storage as Rootfs (extroot)"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage-as-Rootfs/#using-usb-storage-as-rootfs-extroot","text":"This tutorial is on how to use the USB storage device as the rootfs. If you simply want to use the USB storage device to store files (i.e., you won't be installing anything to it), then read [[Tutorials/Using-USB-Storage]] . The Omega comes with 16MB of flash storage. While this is enough for the majority of hardware-related tasks, having extra storage space is always better. Even though you can plug in external USB storage devices to the Omega, but because application packages are typically designed to be installed in the root filesystem (rootfs), those of you who want to install larger opkg packages would still be limited by the 16MB flash size. Luckily, with extroot, you can mount your USB storage device to the rootfs. There are two approaches to this: * With pivot-overlay , you can mount your USB storage device to /overlay , which is the writable part of your filesystem that's merged with /rom (the read-only part of your filesystem) to generate / . * With pivot-root , you can mount your USB storage device to both /overlay and /rom , which essentially allows you to replace Omega's on-board flash with your USB storage device. [[ TOC ]]","title":"Using USB Storage as Rootfs (extroot)"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage-as-Rootfs/#extroot-with-pivot-overlay","text":"Pivot-overlay is the recommended extroot implementation because it is easier to set up and future firmware upgrade will still be written to Omega's flash (instead of your USB storage device).","title":"extroot with pivot-overlay"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage-as-Rootfs/#step-1-prerequisites","text":"Using extroot requires the following packages, all of them should already be installed on the default Omega firmware. But just in case you are using your own firmware, here they are again: * block-mount * kmod-fs-[filesystem of choice] , typically kmod-fs-ext4 * kmod-usb-storage-extras Install the packages with opkg : opkg update opkg install block-mount kmod-fs-ext4 kmod-usb-storage-extras","title":"Step 1. Prerequisites"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage-as-Rootfs/#step-11-important-to-avoid-errors","text":"You also need to have a USB storage device formatted to ext4 (important to avoid errors). You can learn how to format a USB drive following the steps outlined in the How to format a USB drive to ext4 addendum section below.","title":"Step 1.1 (Important to avoid errors)"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage-as-Rootfs/#step-2-mounting-the-usb-storage-device","text":"Next, plug in your USB storage device. If your device is detected correctly by the Omega, it will show up at a device under the /dev directory, usually /dev/sda1 . Then, create a mount point for your device if you don't already have one with the following command: mkdir /mnt/sda1 Finally, mount the device: mount /dev/sda1 /mnt/sda1 Your USB storage device should now be accessible at /mnt/sda1 .","title":"Step 2. Mounting the USB Storage Device"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage-as-Rootfs/#step-3-duplicating-the-overlay-directory","text":"Now, we are ready to move the /overlay directory into the USB storage device. mount /dev/sda1 /mnt ; tar -C /overlay -cvf - . | tar -C /mnt -xf - ; umount /mnt","title":"Step 3. Duplicating the /overlay Directory"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage-as-Rootfs/#step-4-setting-up-the-overlay-directory-to-automount-on-startup","text":"First, we are going to generate the fstab template: block detect /etc/config/fstab Then, we are going to edit the /etc/config/fstab file, which we have just created, to enable auto-mounting the /overlay directory. Look for the line option target '/mnt/sda1' and change it to: option target '/overlay' Then, look for the line: option enabled '0' and change it to option enabled '1' Save the file and restart the Omega: reboot And voil\u00e0! Your Omega should automatically mount the /overlay directory. From this point on, all changes to your filesystem will be made on your USB storage device. Please remember that if you startup your Omega with out plugging in the USB storage device, some settings may be different because all the settings will be saved on your USB device.","title":"Step 4. Setting up the /overlay Directory to Automount on Startup"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage-as-Rootfs/#exroot-with-pivot-root","text":"Pivot-root is the extroot implementation that completely replaces the flash storage on the Omega with your USB storage device. Using pivot-root method means that all fugure firmware upgrade (unless it is done by uboot) will be done to your USB storage device.","title":"exroot with pivot-root"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage-as-Rootfs/#step-1-prerequisites_1","text":"Using extroot requires the following packages, all of them should already be installed on the default Omega firmware. But just in case you are using your own firmware, here they are again: * block-mount * kmod-fs-[filesystem of choice] , typically kmod-fs-ext4 * kmod-usb-storage-extras Install the packages with opkg : opkg update opkg install block-mount kmod-fs-ext4 kmod-usb-storage-extras You also need to have a USB storage device formatted to ext4 (or another filesystem you chose above).","title":"Step 1. Prerequisites"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage-as-Rootfs/#step-2-mounting-the-usb-storage-device_1","text":"Next, plug in your USB storage device. If your device is detected correctly by the Omega, it will show up at a device under the /dev directory, usually /dev/sda1 . Then, create a mount point for your device if you don't already have one with the following command: mkdir /mnt/sda1 Finally, mount the device: mount /dev/sda1 /mnt/sda1 Your USB storage device should now be accessible at /mnt/sda1 .","title":"Step 2. Mounting the USB Storage Device"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage-as-Rootfs/#step-3-duplicating-your-rootfs","text":"Next, we must make a complete copy of the of the root filesystem to the external rootfs device. To do this, we will first create a temporary directory that acts as the mount point for the current / directory: mkdir -p /tmp/cproot Then, we will create a bind mount of / at /tmp/cproot : mount --bind / /tmp/cproot Now, we will make a complete copy of the rootfs to your USB storage device: tar -C /tmp/cproot -cvf - . | tar -C /mnt/sda1 -xf - Finally, we will unmount the bind mount: umount /tmp/cproot Great! Now you have created a complete copy of your current rootfs on your USB storage device!","title":"Step 3. Duplicating your rootfs"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage-as-Rootfs/#step-4-configure-omega-to-automount-usb-storage-device-on-boot","text":"We will now configure the Omega to automatically mount your USB storage device to / on startup. This essentially means that we will be using the firmware on Omega's own flash storage as a \"bootloader\" that run the filesystem on your USB storage as rootfs. To do this, we will open up /etc/config/fstab , and add the following lines to it: config mount option target / option device /dev/sda1 option fstype ext4 option options rw,sync option enabled 1 option enabled_fsck 0 Save the file and reboot: reboot And voil\u00e0! Your Omega should automatically mount your USB storage device as its rootfs. From this point on, all changes to your filesystem, including firmware upgrades, will be made on your USB storage device. If you change your mind and want to revert back to running the firmware off Omega's flash storage, simply unplug the USB storage and reboot the Omega. Happy hacking!","title":"Step 4. Configure Omega to Automount USB Storage Device on Boot"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage-as-Rootfs/#addendum-procedures","text":"","title":"Addendum Procedures"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage-as-Rootfs/#how-to-format-a-usb-drive-to-ext4","text":"In this short additional tutorial you'll learn how to format a USB drive to ext4 so it can be used as rootfs or additional storage. This is handly as USB drives typically arrive pre-formatted with fat32! Run these commands on the Omega's terminal: opkg update opkg install kmod-usb-storage-extras e2fsprogs kmod-fs-ext4 This installs the required tools, next plug in your USB drive. Next we need to format the USB drive with ext4, typically the drive is mounded as \"sda1\" (change the value if required): mkfs.ext4 /dev/sda1 Now you can mount the USB drive and use it for either general storage , extroot with pivot-overlay or exroot with pivot-root .","title":"How to format a USB drive to ext4"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage/","text":"Using USB Storage with the Omega The Omega can read and write to USB storage devices, such as USB keys, and USB external hard-drives. This tutorial will show you how to manually mount and unmount storage, and then how to setup automatic mounting. This tutorial is on how to use USB drive as separate storage device. If you want to use the USB storage device as Rootfs (i.e. if you want to install opkg packages on the USB storage device), then read [[Tutorials/Using-USB-Storage-as-Rootfs]] . [[ TOC ]] Supported Filesystems The following filesystems are currently supported: FAT32 NTFS ext2, ext3, ext4 Let us know if you have any requests! Using USB Storage Steps to setup USB storage manually: Plug in the USB Storage Usually, it will get mapped to the sda1 device Double check the mapping: ls /dev/sda* It should output something like: /dev/sda /dev/sda1 Usually it will get mapped to sda1 Create a mount point directory mkdir /mnt/sda1 Mount the drive mount device mount point for example: mount /dev/sda1 /mnt/sda1/ The storage can now be accessed at /mnt/sda1 Safely Removing USB Storage The USB storage must be unmounted before safely removing the disk. The umount command is used to unmount the storage umount mount point From the above example: umount /mnt/sda1 The USB device can now be safely unplugged. Automatic Mounting Manually mounting everytime becomes pretty tedious after a while... Luckily, Linux has a built-in utility to automatically mount drives when they are plugged in. Setting up Automatic Mounting for a Drive Let's take a look at our fstab configuration, this is the configuration file that holds all of the storage device info on the system. It can be found at /etc/config/fstab , meaning we can access it with UCI : root@Omega-267F:~# uci show fstab fstab.@global[0]=global fstab.@global[0].anon_swap='0' fstab.@global[0].anon_mount='0' fstab.@global[0].auto_swap='1' fstab.@global[0].auto_mount='1' fstab.@global[0].delay_root='5' fstab.@global[0].check_fs='0' Setup a New Device Now, plug in the drive. Then, we will need to detect the information for the drive and save it in our fstab configuration: block detect /etc/config/fstab Now the Omega has an fstab UCI entry for this specific USB drive. Let's update the UCI entry so that it will automatically be mounted. First, let's see the current configuration by running uci show fstab , it will output something like the following: fstab.@global[0]=global fstab.@global[0].anon_swap='0' fstab.@global[0].anon_mount='0' fstab.@global[0].auto_swap='1' fstab.@global[0].auto_mount='1' fstab.@global[0].delay_root='5' fstab.@global[0].check_fs='0' fstab.@mount[0]=mount fstab.@mount[0].target='/mnt/sda1' fstab.@mount[0].uuid='1806-3FEB' // this is the unique identifier of the USB drive fstab.@mount[0].enabled='0' Now, lets enable the mount[0] device: uci set fstab.@mount[0].enabled='1' uci commit fstab Make sure fstab is Enabled Just to be safe, let's enable fstab to run at boot: /etc/init.d/fstab enable block mount Restarting fstab Any time the fstab configuration is changed, the following command can be used to restart the process so the changes will take effect: block umount;block mount Summary That's it! Now this particular USB drive will be automatically mounted whenever it's plugged in, or if it's present at boot. Enjoy! Safely Removing USB Storage Even when automatically mounting a USB drive, it still has to be unmounted before it's unplugged: block umount What's Next? Now that your USB drive is mounted, you can use it to store all sorts of different data. For instance, you can set it up so the Omega's root filesystem is run from the USB device . You can also setup a Samba share so that users on your local network can access the USB drive wirelessly. It's really up to you! Happy hacking!","title":"Using USB Storage with the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage/#using-usb-storage-with-the-omega","text":"The Omega can read and write to USB storage devices, such as USB keys, and USB external hard-drives. This tutorial will show you how to manually mount and unmount storage, and then how to setup automatic mounting. This tutorial is on how to use USB drive as separate storage device. If you want to use the USB storage device as Rootfs (i.e. if you want to install opkg packages on the USB storage device), then read [[Tutorials/Using-USB-Storage-as-Rootfs]] . [[ TOC ]]","title":"Using USB Storage with the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage/#supported-filesystems","text":"The following filesystems are currently supported: FAT32 NTFS ext2, ext3, ext4 Let us know if you have any requests!","title":"Supported Filesystems"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage/#using-usb-storage","text":"Steps to setup USB storage manually: Plug in the USB Storage Usually, it will get mapped to the sda1 device Double check the mapping: ls /dev/sda* It should output something like: /dev/sda /dev/sda1 Usually it will get mapped to sda1 Create a mount point directory mkdir /mnt/sda1 Mount the drive mount device mount point for example: mount /dev/sda1 /mnt/sda1/ The storage can now be accessed at /mnt/sda1","title":"Using USB Storage"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage/#safely-removing-usb-storage","text":"The USB storage must be unmounted before safely removing the disk. The umount command is used to unmount the storage umount mount point From the above example: umount /mnt/sda1 The USB device can now be safely unplugged.","title":"Safely Removing USB Storage"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage/#automatic-mounting","text":"Manually mounting everytime becomes pretty tedious after a while... Luckily, Linux has a built-in utility to automatically mount drives when they are plugged in.","title":"Automatic Mounting"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage/#setting-up-automatic-mounting-for-a-drive","text":"Let's take a look at our fstab configuration, this is the configuration file that holds all of the storage device info on the system. It can be found at /etc/config/fstab , meaning we can access it with UCI : root@Omega-267F:~# uci show fstab fstab.@global[0]=global fstab.@global[0].anon_swap='0' fstab.@global[0].anon_mount='0' fstab.@global[0].auto_swap='1' fstab.@global[0].auto_mount='1' fstab.@global[0].delay_root='5' fstab.@global[0].check_fs='0' Setup a New Device Now, plug in the drive. Then, we will need to detect the information for the drive and save it in our fstab configuration: block detect /etc/config/fstab Now the Omega has an fstab UCI entry for this specific USB drive. Let's update the UCI entry so that it will automatically be mounted. First, let's see the current configuration by running uci show fstab , it will output something like the following: fstab.@global[0]=global fstab.@global[0].anon_swap='0' fstab.@global[0].anon_mount='0' fstab.@global[0].auto_swap='1' fstab.@global[0].auto_mount='1' fstab.@global[0].delay_root='5' fstab.@global[0].check_fs='0' fstab.@mount[0]=mount fstab.@mount[0].target='/mnt/sda1' fstab.@mount[0].uuid='1806-3FEB' // this is the unique identifier of the USB drive fstab.@mount[0].enabled='0' Now, lets enable the mount[0] device: uci set fstab.@mount[0].enabled='1' uci commit fstab Make sure fstab is Enabled Just to be safe, let's enable fstab to run at boot: /etc/init.d/fstab enable block mount Restarting fstab Any time the fstab configuration is changed, the following command can be used to restart the process so the changes will take effect: block umount;block mount Summary That's it! Now this particular USB drive will be automatically mounted whenever it's plugged in, or if it's present at boot. Enjoy!","title":"Setting up Automatic Mounting for a Drive"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage/#safely-removing-usb-storage_1","text":"Even when automatically mounting a USB drive, it still has to be unmounted before it's unplugged: block umount","title":"Safely Removing USB Storage"},{"location":"tutorials/OnionWiki/Tutorials/Using-USB-Storage/#whats-next","text":"Now that your USB drive is mounted, you can use it to store all sorts of different data. For instance, you can set it up so the Omega's root filesystem is run from the USB device . You can also setup a Samba share so that users on your local network can access the USB drive wirelessly. It's really up to you! Happy hacking!","title":"What's Next?"},{"location":"tutorials/OnionWiki/Tutorials/Using-Ubidots-with-Omega/","text":"Using Ubidots with the Omega The Omega is compatible with the Ubidots data service ! Use the Omega to push datapoints to Ubidots and then create awesome dashboards and data visualizations! Using the ubidots-client The Omega communicates with the Ubidots service using a command line client Installing the Ubidots Client To allow the Omega to communicate with Ubidots, a package must be installed via opkg from the console of the Omega. The command to enter is: opkg install ubidots-client Pushing a Datapoint Now whenever you want to write to a variable in ubidots, send a command through the command line with your token, data source label, the variable, and the value you wish to assign to it. The flags -t (token) and -d (data source label) precede the respective values, and 'set' will precede the json string containing the variable and new value to assign. Multiple variables, with multiple values, may be assigned at the same time. For example: ubidots -t my-token -d my-data-source-label set '{ variableOne :12, variableTwo :10}' Getting the Most Recent Datapoint for a Variable To get the most recent value of a variable from ubidots, change 'set' to 'get' and the following json file to the variable name of interest. Only one variable can be fetched at once. For example: ubidots -t my-token -d my-data-source-label get variableOne What's Next Try using Ubidots in a project where you track something using the Omega. Let us know how it goes on the Onion Community . Check out Ubidot's site for more info.","title":"Using Ubidots with the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Using-Ubidots-with-Omega/#using-ubidots-with-the-omega","text":"The Omega is compatible with the Ubidots data service ! Use the Omega to push datapoints to Ubidots and then create awesome dashboards and data visualizations!","title":"Using Ubidots with the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Using-Ubidots-with-Omega/#using-the-ubidots-client","text":"The Omega communicates with the Ubidots service using a command line client","title":"Using the ubidots-client"},{"location":"tutorials/OnionWiki/Tutorials/Using-Ubidots-with-Omega/#installing-the-ubidots-client","text":"To allow the Omega to communicate with Ubidots, a package must be installed via opkg from the console of the Omega. The command to enter is: opkg install ubidots-client","title":"Installing the Ubidots Client"},{"location":"tutorials/OnionWiki/Tutorials/Using-Ubidots-with-Omega/#pushing-a-datapoint","text":"Now whenever you want to write to a variable in ubidots, send a command through the command line with your token, data source label, the variable, and the value you wish to assign to it. The flags -t (token) and -d (data source label) precede the respective values, and 'set' will precede the json string containing the variable and new value to assign. Multiple variables, with multiple values, may be assigned at the same time. For example: ubidots -t my-token -d my-data-source-label set '{ variableOne :12, variableTwo :10}'","title":"Pushing a Datapoint"},{"location":"tutorials/OnionWiki/Tutorials/Using-Ubidots-with-Omega/#getting-the-most-recent-datapoint-for-a-variable","text":"To get the most recent value of a variable from ubidots, change 'set' to 'get' and the following json file to the variable name of interest. Only one variable can be fetched at once. For example: ubidots -t my-token -d my-data-source-label get variableOne","title":"Getting the Most Recent Datapoint for a Variable"},{"location":"tutorials/OnionWiki/Tutorials/Using-Ubidots-with-Omega/#whats-next","text":"Try using Ubidots in a project where you track something using the Omega. Let us know how it goes on the Onion Community . Check out Ubidot's site for more info.","title":"What's Next"},{"location":"tutorials/OnionWiki/Tutorials/Using-the-GPIOs/","text":"How to Use GPIOs? The Omega has 15 GPIO pins that can be controlled with software. The Expansion Dock allows for easy access to 12 GPIO pins and connects 3 pins to the LED on the Dock Using the Command Line We've developed a tool that makes GPIO access very easy using the command line, the tool is called fast-gpio Command Usage: For a print-out of the usage, run fast-gpio with no comments on the command line: root@Omega-0100:/# fast-gpio Usage: fast-gpio set-input gpio fast-gpio set-output gpio fast-gpio get-direction gpio fast-gpio read gpio fast-gpio set gpio value: 0 or 1 fast-gpio pwm gpio freq in Hz duty cycle percentage Setting a GPIO pin's direction: fast-gpio set-input gpio fast-gpio set-output gpio A pin can be configured to either be input or output. To avoid damaging your Omega, set a pin to the input direction before driving any voltage to it!! (Note: this is available in firmware 0.0.2 b174 and later) Reading a GPIO pin's direction: fast-gpio get-direction gpio Might be handy to check a pin's programmed direction GPIO14 direction is OUTPUT GPIO13 direction is INPUT (Note: this is available in firmware 0.0.2 b174 and later) Reading a GPIO pin's value: fast-gpio read gpio pin This will return the pin's value, in both input and output modes Read GPIO14: 0 Setting a GPIO pin's value: This will drive the selected pin to the value desired. fast-gpio set gpio pin number value to set; 0 or 1 This will only work when the pin is in the output direction, but fast-gpio will take care of that behind the scenes. Using a pin as a digital input: The pin needs to first be set to run as input fast-gpio set-input 13 Then the connected voltage can be read: fast-gpio read 13 Read GPIO13: 1 Using the Console The console app to control the GPIOs is under development and coming very soon! Stay tuned!","title":"How to Use GPIOs?"},{"location":"tutorials/OnionWiki/Tutorials/Using-the-GPIOs/#how-to-use-gpios","text":"The Omega has 15 GPIO pins that can be controlled with software. The Expansion Dock allows for easy access to 12 GPIO pins and connects 3 pins to the LED on the Dock","title":"How to Use GPIOs?"},{"location":"tutorials/OnionWiki/Tutorials/Using-the-GPIOs/#using-the-command-line","text":"We've developed a tool that makes GPIO access very easy using the command line, the tool is called fast-gpio","title":"Using the Command Line"},{"location":"tutorials/OnionWiki/Tutorials/Using-the-GPIOs/#command-usage","text":"For a print-out of the usage, run fast-gpio with no comments on the command line: root@Omega-0100:/# fast-gpio Usage: fast-gpio set-input gpio fast-gpio set-output gpio fast-gpio get-direction gpio fast-gpio read gpio fast-gpio set gpio value: 0 or 1 fast-gpio pwm gpio freq in Hz duty cycle percentage","title":"Command Usage:"},{"location":"tutorials/OnionWiki/Tutorials/Using-the-GPIOs/#setting-a-gpio-pins-direction","text":"fast-gpio set-input gpio fast-gpio set-output gpio A pin can be configured to either be input or output. To avoid damaging your Omega, set a pin to the input direction before driving any voltage to it!! (Note: this is available in firmware 0.0.2 b174 and later)","title":"Setting a GPIO pin's direction:"},{"location":"tutorials/OnionWiki/Tutorials/Using-the-GPIOs/#reading-a-gpio-pins-direction","text":"fast-gpio get-direction gpio Might be handy to check a pin's programmed direction GPIO14 direction is OUTPUT GPIO13 direction is INPUT (Note: this is available in firmware 0.0.2 b174 and later)","title":"Reading a GPIO pin's direction:"},{"location":"tutorials/OnionWiki/Tutorials/Using-the-GPIOs/#reading-a-gpio-pins-value","text":"fast-gpio read gpio pin This will return the pin's value, in both input and output modes Read GPIO14: 0","title":"Reading a GPIO pin's value:"},{"location":"tutorials/OnionWiki/Tutorials/Using-the-GPIOs/#setting-a-gpio-pins-value","text":"This will drive the selected pin to the value desired. fast-gpio set gpio pin number value to set; 0 or 1 This will only work when the pin is in the output direction, but fast-gpio will take care of that behind the scenes.","title":"Setting a GPIO pin's value:"},{"location":"tutorials/OnionWiki/Tutorials/Using-the-GPIOs/#using-a-pin-as-a-digital-input","text":"The pin needs to first be set to run as input fast-gpio set-input 13 Then the connected voltage can be read: fast-gpio read 13 Read GPIO13: 1","title":"Using a pin as a digital input:"},{"location":"tutorials/OnionWiki/Tutorials/Using-the-GPIOs/#using-the-console","text":"The console app to control the GPIOs is under development and coming very soon! Stay tuned!","title":"Using the Console"},{"location":"tutorials/OnionWiki/Tutorials/WinSCP-For-File-Transfers/","text":"WinSCP for File Transfers on the Onion Omega Transfering, updating, deleting creating files via the command-line is fine for small jobs (or really huge jobs), but there are Windows tools out there to make this a lot easier. WinSCP is free program that can help you with your daily tasks on the Onion Omega and what you'll learn about in this tutorial. [[ TOC ]] What is WinSCP? WinSCP is an open source free SFTP client, FTP client, WebDAV client and SCP client for Windows. Its main function is file transfer between a local and a remote computer. Beyond this, WinSCP offers scripting and basic file manager functionality. In short, it makes creating updating files on your Onion Omega a lot faster! Getting Started First, download the WinSCP program from their site . Once downloaded, install the application and then run it. Configure the Connection Connecting to the Omega is super simple, you just need to connect to a New Site as shown in the image below: In the right hand pane, you'll need to set the details for your Onion Omega. Typically these are: File Protocol: SCP Hostname: 192.168.3.1 Port Number: 22 Username: root Password: onioneer Once finished, press the \"Save\" button. On the next window there is a tickbox option to save the password, thats up to you. Saving the password is less secure, but faster to access your Omega. You can name the connection and you can also you can save a desktop shortcut if desired. Connecting to Your Onion Omega using WinSCP Now from the left menu you'll see the name you saved the new site as a few moments ago, eg \"root@192.168.3.1\", click on this, then \"Login\". As this is your first time connecting via WinSCP you'll receive a warning similar to the one below. That's to be expected, click on \"Yes\" Congraulations, you now have remote, easy access to your Onion Omega system files! Happy Hacking! Note: Common sense applies here, just like when you're logged in via a terminal, you are logged in as root aka \"god\" on your Onion Omega. Go careful :)","title":"WinSCP for File Transfers on the Onion Omega"},{"location":"tutorials/OnionWiki/Tutorials/WinSCP-For-File-Transfers/#winscp-for-file-transfers-on-the-onion-omega","text":"Transfering, updating, deleting creating files via the command-line is fine for small jobs (or really huge jobs), but there are Windows tools out there to make this a lot easier. WinSCP is free program that can help you with your daily tasks on the Onion Omega and what you'll learn about in this tutorial. [[ TOC ]]","title":"WinSCP for File Transfers on the Onion Omega"},{"location":"tutorials/OnionWiki/Tutorials/WinSCP-For-File-Transfers/#what-is-winscp","text":"WinSCP is an open source free SFTP client, FTP client, WebDAV client and SCP client for Windows. Its main function is file transfer between a local and a remote computer. Beyond this, WinSCP offers scripting and basic file manager functionality. In short, it makes creating updating files on your Onion Omega a lot faster!","title":"What is WinSCP?"},{"location":"tutorials/OnionWiki/Tutorials/WinSCP-For-File-Transfers/#getting-started","text":"First, download the WinSCP program from their site . Once downloaded, install the application and then run it.","title":"Getting Started"},{"location":"tutorials/OnionWiki/Tutorials/WinSCP-For-File-Transfers/#configure-the-connection","text":"Connecting to the Omega is super simple, you just need to connect to a New Site as shown in the image below: In the right hand pane, you'll need to set the details for your Onion Omega. Typically these are: File Protocol: SCP Hostname: 192.168.3.1 Port Number: 22 Username: root Password: onioneer Once finished, press the \"Save\" button. On the next window there is a tickbox option to save the password, thats up to you. Saving the password is less secure, but faster to access your Omega. You can name the connection and you can also you can save a desktop shortcut if desired.","title":"Configure the Connection"},{"location":"tutorials/OnionWiki/Tutorials/WinSCP-For-File-Transfers/#connecting-to-your-onion-omega-using-winscp","text":"Now from the left menu you'll see the name you saved the new site as a few moments ago, eg \"root@192.168.3.1\", click on this, then \"Login\". As this is your first time connecting via WinSCP you'll receive a warning similar to the one below. That's to be expected, click on \"Yes\" Congraulations, you now have remote, easy access to your Onion Omega system files! Happy Hacking! Note: Common sense applies here, just like when you're logged in via a terminal, you are logged in as root aka \"god\" on your Onion Omega. Go careful :)","title":"Connecting to Your Onion Omega using WinSCP"},{"location":"tutorials/OnionWiki/Tutorials/blynk-library/","text":"Blynk Library for Omega The Omega now officially supports Blynk and the Blynk Library. You can now use the Blynk app to control your Omega! [[ TOC ]] Overview Using the Blynk Library and Node.js, you can control your Omega through the Blynk mobile app. For further reading on the library's functionality refer to the documentation or check out blynk.cc . Installation To install the Blynk library run the following commands: opkg update opkg install blynk-library This will install Node.js 4.3.1 as well, if it is not already installed. OnOff Package If you would like to use Blynk to control the Omega's GPIOs, you will need to install the onoff Node package as well: opkg update opkg install onoff-node Installation Size See the table below for info on how much space each of the mentioned packages will take up on your Omega: Package Size nodejs 8.5MB blynk-library 260kB onoff 880kB Getting Started Follow along with Blynk's guide for info how to get started! Optional: Auth Token Check You can run a quick check to see if your Auth Token works correctly: node /usr/bin/blynk-library/bin/blynk-client.js Auth Token Using the Library The modules will be installed to the /usr/bin/ directory, so you will need to point to the correct directory for import. Your import code should look like this: var BlynkLib = require('/usr/bin/blynk-library'); Testing The following is a test script to illustrate communication via the Blynk App. On the App side create a button that is a virtual pin 1 (V1) Then create a file test.js: var BlynkLib = require('/usr/bin/blynk-library'); var blynk = new BlynkLib.Blynk(' YOUR AUTH TOKEN HERE! '); // Make sure to replace this with your Auth Token var v1 = new blynk.VirtualPin(1); v1.on('write', function(param) { console.log('V1:', param); }); And you can run the script with the following command: node test.js Press the button on you app and note the output on the screen. You can take this further by using the OnOff module to control the Omega's GPIOs.","title":"Blynk Library for Omega"},{"location":"tutorials/OnionWiki/Tutorials/blynk-library/#blynk-library-for-omega","text":"The Omega now officially supports Blynk and the Blynk Library. You can now use the Blynk app to control your Omega! [[ TOC ]]","title":"Blynk Library for Omega"},{"location":"tutorials/OnionWiki/Tutorials/blynk-library/#overview","text":"Using the Blynk Library and Node.js, you can control your Omega through the Blynk mobile app. For further reading on the library's functionality refer to the documentation or check out blynk.cc .","title":"Overview"},{"location":"tutorials/OnionWiki/Tutorials/blynk-library/#installation","text":"To install the Blynk library run the following commands: opkg update opkg install blynk-library This will install Node.js 4.3.1 as well, if it is not already installed.","title":"Installation"},{"location":"tutorials/OnionWiki/Tutorials/blynk-library/#onoff-package","text":"If you would like to use Blynk to control the Omega's GPIOs, you will need to install the onoff Node package as well: opkg update opkg install onoff-node","title":"OnOff Package"},{"location":"tutorials/OnionWiki/Tutorials/blynk-library/#installation-size","text":"See the table below for info on how much space each of the mentioned packages will take up on your Omega: Package Size nodejs 8.5MB blynk-library 260kB onoff 880kB","title":"Installation Size"},{"location":"tutorials/OnionWiki/Tutorials/blynk-library/#getting-started","text":"Follow along with Blynk's guide for info how to get started!","title":"Getting Started"},{"location":"tutorials/OnionWiki/Tutorials/blynk-library/#optional-auth-token-check","text":"You can run a quick check to see if your Auth Token works correctly: node /usr/bin/blynk-library/bin/blynk-client.js Auth Token","title":"Optional: Auth Token Check"},{"location":"tutorials/OnionWiki/Tutorials/blynk-library/#using-the-library","text":"The modules will be installed to the /usr/bin/ directory, so you will need to point to the correct directory for import. Your import code should look like this: var BlynkLib = require('/usr/bin/blynk-library');","title":"Using the Library"},{"location":"tutorials/OnionWiki/Tutorials/blynk-library/#testing","text":"The following is a test script to illustrate communication via the Blynk App. On the App side create a button that is a virtual pin 1 (V1) Then create a file test.js: var BlynkLib = require('/usr/bin/blynk-library'); var blynk = new BlynkLib.Blynk(' YOUR AUTH TOKEN HERE! '); // Make sure to replace this with your Auth Token var v1 = new blynk.VirtualPin(1); v1.on('write', function(param) { console.log('V1:', param); }); And you can run the script with the following command: node test.js Press the button on you app and note the output on the screen. You can take this further by using the OnOff module to control the Omega's GPIOs.","title":"Testing"},{"location":"tutorials/OnionWiki/Tutorials/camera-kit-assembly-tutorial/","text":"Camera Kit Assembly This tutorial will show you how to assemble your camera kit. Step 1: Parts Check your parts you have against the picture below. Parts list: * 1: Two Servo Motors * 2: Two Servo Screws * 3: Top Piece * 4a: Middle Piece * 4b: Middle Piece with Servo Horn mount * 5: Servo horn for middle piece. * 6: Screws for servo horn middle piece * 7: Screws for middle piece * 8: Base Piece * 9: Servo horn for base piece * 10: Screw for servo horn base piece * 11: Screws for base piece. Step 2: Attach part 5 to part 4b using part 6 screws. Note Your servo horn may not fit perfectly. In that case, you may need to trim/file it down to fit. Step 3: Mount one of the servos(part 1) into the servo horn you attached in step 2. Make sure you position the servo into the horn for your desired rotation. Also refer to the picture below to see correct orientation. Step 4: Slide the other servo(part 1) into part 4b as such. Step 5: Connect 4a into 4b using screw for middle piece part 7. Step 6: Mount the top piece(part 3) onto the top servo using the servo screws(part 2). Step 7: Screw part 10 into part 9. Screw the servo horn part 9 into the base (part 8) using the part 11 screws like so. Note Your servo horn may not fit perfectly. In that case, you may need to trim/file it down to fit. Step 8: Mount the base onto the servo so that it fits into the servo horn. Be sure that the servo has your desired range of motion. Screw part 10 into the servo, so that it is attached firmly. Step 9: Attach your webcam and your camera kit is ready to go.","title":"Camera kit assembly tutorial"},{"location":"tutorials/OnionWiki/Tutorials/camera-kit-assembly-tutorial/#camera-kit-assembly","text":"This tutorial will show you how to assemble your camera kit.","title":"Camera Kit Assembly"},{"location":"tutorials/OnionWiki/Tutorials/camera-kit-assembly-tutorial/#step-1-parts","text":"Check your parts you have against the picture below. Parts list: * 1: Two Servo Motors * 2: Two Servo Screws * 3: Top Piece * 4a: Middle Piece * 4b: Middle Piece with Servo Horn mount * 5: Servo horn for middle piece. * 6: Screws for servo horn middle piece * 7: Screws for middle piece * 8: Base Piece * 9: Servo horn for base piece * 10: Screw for servo horn base piece * 11: Screws for base piece.","title":"Step 1: Parts"},{"location":"tutorials/OnionWiki/Tutorials/camera-kit-assembly-tutorial/#step-2","text":"Attach part 5 to part 4b using part 6 screws. Note Your servo horn may not fit perfectly. In that case, you may need to trim/file it down to fit.","title":"Step 2:"},{"location":"tutorials/OnionWiki/Tutorials/camera-kit-assembly-tutorial/#step-3","text":"Mount one of the servos(part 1) into the servo horn you attached in step 2. Make sure you position the servo into the horn for your desired rotation. Also refer to the picture below to see correct orientation.","title":"Step 3:"},{"location":"tutorials/OnionWiki/Tutorials/camera-kit-assembly-tutorial/#step-4","text":"Slide the other servo(part 1) into part 4b as such.","title":"Step 4:"},{"location":"tutorials/OnionWiki/Tutorials/camera-kit-assembly-tutorial/#step-5","text":"Connect 4a into 4b using screw for middle piece part 7.","title":"Step 5:"},{"location":"tutorials/OnionWiki/Tutorials/camera-kit-assembly-tutorial/#step-6","text":"Mount the top piece(part 3) onto the top servo using the servo screws(part 2).","title":"Step 6:"},{"location":"tutorials/OnionWiki/Tutorials/camera-kit-assembly-tutorial/#step-7","text":"Screw part 10 into part 9. Screw the servo horn part 9 into the base (part 8) using the part 11 screws like so. Note Your servo horn may not fit perfectly. In that case, you may need to trim/file it down to fit.","title":"Step 7:"},{"location":"tutorials/OnionWiki/Tutorials/camera-kit-assembly-tutorial/#step-8","text":"Mount the base onto the servo so that it fits into the servo horn. Be sure that the servo has your desired range of motion. Screw part 10 into the servo, so that it is attached firmly.","title":"Step 8:"},{"location":"tutorials/OnionWiki/Tutorials/camera-kit-assembly-tutorial/#step-9","text":"Attach your webcam and your camera kit is ready to go.","title":"Step 9:"},{"location":"tutorials/OnionWiki/Tutorials/node-red/","text":"Node-Red for the Omega [[ TOC ]] Overview Extending Memory and RAM In order to run node-red or any node module, you will need to extend the Omega's storage and memory with a USB. We recommed ~512Mb of additonal RAM and ~256Mb of additional storage. Follow these tutorials: Extending Omega's RAM Extending Omega's Storage Installation You will need node installed on your Omega. If you don't have it, install it: opkg update opkg install nodejs And then to install node-red: opkg install onion-node-red Starting Node-Red Node red gets installed to the usr/bin directory. To start node-red we will have to execute the red.js file. To do this, we have to navigate to the following directory: cd /usr/bin/onion-node-red/node_modules/node-red/ By default, node-red is designed to serve on 'localhost'. To make it accessible, we have to change this to the Omega's Access Point's Ip Address. By default that address is '192.168.3.1'. To change the IP address change to following line of code inside red.js: settings.uiHost = settings.uiHost|| 0.0.0.0 ; to settings.uiHost = 192.168.3.1 Next, launch node-red with the following command: node red.js To see the UI, you will need to connect to the Omega's Access Point. Once connected, navigate to http://192.168.3.1:1880 and you should see the node-red UI.","title":"Node-Red for the Omega"},{"location":"tutorials/OnionWiki/Tutorials/node-red/#node-red-for-the-omega","text":"[[ TOC ]]","title":"Node-Red for the Omega"},{"location":"tutorials/OnionWiki/Tutorials/node-red/#overview","text":"","title":"Overview"},{"location":"tutorials/OnionWiki/Tutorials/node-red/#extending-memory-and-ram","text":"In order to run node-red or any node module, you will need to extend the Omega's storage and memory with a USB. We recommed ~512Mb of additonal RAM and ~256Mb of additional storage. Follow these tutorials: Extending Omega's RAM Extending Omega's Storage","title":"Extending Memory and RAM"},{"location":"tutorials/OnionWiki/Tutorials/node-red/#installation","text":"You will need node installed on your Omega. If you don't have it, install it: opkg update opkg install nodejs And then to install node-red: opkg install onion-node-red","title":"Installation"},{"location":"tutorials/OnionWiki/Tutorials/node-red/#starting-node-red","text":"Node red gets installed to the usr/bin directory. To start node-red we will have to execute the red.js file. To do this, we have to navigate to the following directory: cd /usr/bin/onion-node-red/node_modules/node-red/ By default, node-red is designed to serve on 'localhost'. To make it accessible, we have to change this to the Omega's Access Point's Ip Address. By default that address is '192.168.3.1'. To change the IP address change to following line of code inside red.js: settings.uiHost = settings.uiHost|| 0.0.0.0 ; to settings.uiHost = 192.168.3.1 Next, launch node-red with the following command: node red.js To see the UI, you will need to connect to the Omega's Access Point. Once connected, navigate to http://192.168.3.1:1880 and you should see the node-red UI.","title":"Starting Node-Red"},{"location":"tutorials/OnionWiki/Tutorials/onoff-node/","text":"Onoff Node Module for Omega Using the OnOff Module, you can control the Omega's GPIOs using NodeJS. We've made this package available through opkg since installing npm, the regular Node package manager, on the Omega requires the use of external USB storage. [[ TOC ]] Overview The onoff package allows control of the direction and state of a pin. For further reading on the functionality, refer to the documentation . Installation Make sure you have node installed, if not refer to this tutorial . To install the onoff package run the following commands: opkg update opkg install onoff-node Importing into your Node Scripts The module will be installed to the /usr/bin/ directory, so you will need to point to the correct directory for import. Your import code should look like this: var Gpio = require('/usr/bin/onoff-node/onoff.js').Gpio; Testing The following is a test script that will blink an LED connected to GPIO6 every two seconds. Let's create a file test.js : var Gpio = require('/usr/bin/onoff-node/onoff.js').Gpio; var led = new Gpio(6,'out'); var num = 1; setInterval((function(){ this.num ^= 1; led.writeSync(this.num); }),2000); Run the script with the following command: node test.js And watch that little LED blink!","title":"Onoff Node Module for Omega"},{"location":"tutorials/OnionWiki/Tutorials/onoff-node/#onoff-node-module-for-omega","text":"Using the OnOff Module, you can control the Omega's GPIOs using NodeJS. We've made this package available through opkg since installing npm, the regular Node package manager, on the Omega requires the use of external USB storage. [[ TOC ]]","title":"Onoff Node Module for Omega"},{"location":"tutorials/OnionWiki/Tutorials/onoff-node/#overview","text":"The onoff package allows control of the direction and state of a pin. For further reading on the functionality, refer to the documentation .","title":"Overview"},{"location":"tutorials/OnionWiki/Tutorials/onoff-node/#installation","text":"Make sure you have node installed, if not refer to this tutorial . To install the onoff package run the following commands: opkg update opkg install onoff-node","title":"Installation"},{"location":"tutorials/OnionWiki/Tutorials/onoff-node/#importing-into-your-node-scripts","text":"The module will be installed to the /usr/bin/ directory, so you will need to point to the correct directory for import. Your import code should look like this: var Gpio = require('/usr/bin/onoff-node/onoff.js').Gpio;","title":"Importing into your Node Scripts"},{"location":"tutorials/OnionWiki/Tutorials/onoff-node/#testing","text":"The following is a test script that will blink an LED connected to GPIO6 every two seconds. Let's create a file test.js : var Gpio = require('/usr/bin/onoff-node/onoff.js').Gpio; var led = new Gpio(6,'out'); var num = 1; setInterval((function(){ this.num ^= 1; led.writeSync(this.num); }),2000); Run the script with the following command: node test.js And watch that little LED blink!","title":"Testing"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Controlling-Neopixels/","text":"Controlling Neopixels The Omega + Arduino Dock can be used to control Neopixels, with the Omega sending the commands and colour codes, and the Arduino Dock acting as a communication channel. [[ TOC ]] Arduino Dock Setup Download and install the latest Onion Arduino Library, and flash a sketch to the Arduino Dock that has the Onion Library enabled and setup . The Arduino Dock is now ready to accept commands from the Omega that will control Neopixels. The Library code handles all of the Neopixel commands, no additional changes to the Arduino Sketch are required to control the Neopixels . Methods to Control the Neopixels Any connected Neopixels can be controlled with the following methods: * Command line tool on the Omega * C++ Library * C Library * Python Module The latter three options allow you to write your own programs to interact with Neopixels. Programming Flow All of methods listed above follow the same programming flow: * Initialize the Neopixels; set the Arduino Dock pin to be used as data output, set the number of Neopixels * Set the colour of one or several pixels * Display the queued up colour changes Omega Command Line Tool The neopixel-tool utility provides a method to control Neopixels from the command line. Installation To install the neopixel-tool utility: opkg update opkg install neopixel-tool Usage The following describes how to use the command line tool. Initialization The Arduino Dock must be told which Port to use to communicate with the Neopixels, and how many Neopixels are to be programmed: neopixel-tool -i -p pin -l number of neopixels Arguments The pin argument indicates which Arduino Dock pin is connected to the Neopixel Data In. If no pin is specified, the tool will assume Pin 6 is being used to control the Neopixels. The number of neopixels argument indicates how many neopixels there are in the conencted Neopixel strip, array, or matrix. If the number is not specified, the tool will assume there are 32 individual pixels. Examples Initialize Arduino Dock to use pin 5 for a strip with 64 pixels neopixel-tool -i -p 5 -l 64 Set the Colour of a Single Pixel Single pixels can be programmed with a specific hex colour code: neopixel-tool set pixel colour code Note that the above command will queue up the colour change, to immediately show the colour change: neopixel-tool -s set pixel colour code Arguments The pixel specifies which Neopixel in your strip or array to program, with the first pixel being 0. The colour code is a 24-bit hex colour, with 8-bits representing the intensity of each colour component. Experiment with a colour wheel to find your favourite colours. Examples Set the first pixel in the strip to be red: neopixel-tool set 0 0xff0000 Set the fifth pixel in the strip to be blue: neopixel-tool set 4 0x0000ff Set the second pixel in the strip to be green, and to show this change immediately: neopixel-tool -s set 1 0x00ff00 Set the Colour of Many Pixels Multiple pixels can be programmed at once by writing a large buffer of colours: neopixel-tool buffer pixel colour string Note that the above command will queue up the colour change, to immediately show the colour change: neopixel-tool -s buffer pixel colour string Arguments The pixel colour string specifies the colours for each pixels, starting with pixel 0. Imagine it like stringing together a number of commands that set single pixels: 24-bits for each pixel. Examples Set the first three pixels to red, green, and then blue: neopixel-tool buffer ff000000ff000000ff Set the first five pixels to: yellow, pink, light blue, purple, and lime neopixel-tool buffer ffff00ff66ff3399ffcc00ccbfff80 Set the Maximum Pixel Brightness Neopixels can be programmed with to maximum brightness: neopixel-tool -b brightness Note that the above command will queue up the brightness change, to immediately show the colour change: neopixel-tool -sb brightness Arguments The brightness argument specifies the maximum colour intensity for all colour components. The range is 0 to 255 Examples Set the maximum brightness: neopixel-tool -b 255 Set to half brightness: neopixel-tool -b 127 Set to quarter brightness, taking effect right away: neopixel-tool -sb 63 Show Queued Colour Changes Any commands to set the colours of pixels will not be immediately displayed on the Neopixels (unless they are run with the -s option). To show all queued colour changes: neopixel-tool -s Using the Libraries The C and C++ Libraries and Python module can be used in your own programs to control Neopixels. Allowing you to put on light shows of your own creation! For more information, see this guide .","title":"Controlling Neopixels"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Controlling-Neopixels/#controlling-neopixels","text":"The Omega + Arduino Dock can be used to control Neopixels, with the Omega sending the commands and colour codes, and the Arduino Dock acting as a communication channel. [[ TOC ]]","title":"Controlling Neopixels"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Controlling-Neopixels/#arduino-dock-setup","text":"Download and install the latest Onion Arduino Library, and flash a sketch to the Arduino Dock that has the Onion Library enabled and setup . The Arduino Dock is now ready to accept commands from the Omega that will control Neopixels. The Library code handles all of the Neopixel commands, no additional changes to the Arduino Sketch are required to control the Neopixels .","title":"Arduino Dock Setup"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Controlling-Neopixels/#methods-to-control-the-neopixels","text":"Any connected Neopixels can be controlled with the following methods: * Command line tool on the Omega * C++ Library * C Library * Python Module The latter three options allow you to write your own programs to interact with Neopixels.","title":"Methods to Control the Neopixels"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Controlling-Neopixels/#programming-flow","text":"All of methods listed above follow the same programming flow: * Initialize the Neopixels; set the Arduino Dock pin to be used as data output, set the number of Neopixels * Set the colour of one or several pixels * Display the queued up colour changes","title":"Programming Flow"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Controlling-Neopixels/#omega-command-line-tool","text":"The neopixel-tool utility provides a method to control Neopixels from the command line.","title":"Omega Command Line Tool"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Controlling-Neopixels/#installation","text":"To install the neopixel-tool utility: opkg update opkg install neopixel-tool","title":"Installation"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Controlling-Neopixels/#usage","text":"The following describes how to use the command line tool.","title":"Usage"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Controlling-Neopixels/#initialization","text":"The Arduino Dock must be told which Port to use to communicate with the Neopixels, and how many Neopixels are to be programmed: neopixel-tool -i -p pin -l number of neopixels Arguments The pin argument indicates which Arduino Dock pin is connected to the Neopixel Data In. If no pin is specified, the tool will assume Pin 6 is being used to control the Neopixels. The number of neopixels argument indicates how many neopixels there are in the conencted Neopixel strip, array, or matrix. If the number is not specified, the tool will assume there are 32 individual pixels. Examples Initialize Arduino Dock to use pin 5 for a strip with 64 pixels neopixel-tool -i -p 5 -l 64","title":"Initialization"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Controlling-Neopixels/#set-the-colour-of-a-single-pixel","text":"Single pixels can be programmed with a specific hex colour code: neopixel-tool set pixel colour code Note that the above command will queue up the colour change, to immediately show the colour change: neopixel-tool -s set pixel colour code Arguments The pixel specifies which Neopixel in your strip or array to program, with the first pixel being 0. The colour code is a 24-bit hex colour, with 8-bits representing the intensity of each colour component. Experiment with a colour wheel to find your favourite colours. Examples Set the first pixel in the strip to be red: neopixel-tool set 0 0xff0000 Set the fifth pixel in the strip to be blue: neopixel-tool set 4 0x0000ff Set the second pixel in the strip to be green, and to show this change immediately: neopixel-tool -s set 1 0x00ff00","title":"Set the Colour of a Single Pixel"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Controlling-Neopixels/#set-the-colour-of-many-pixels","text":"Multiple pixels can be programmed at once by writing a large buffer of colours: neopixel-tool buffer pixel colour string Note that the above command will queue up the colour change, to immediately show the colour change: neopixel-tool -s buffer pixel colour string Arguments The pixel colour string specifies the colours for each pixels, starting with pixel 0. Imagine it like stringing together a number of commands that set single pixels: 24-bits for each pixel. Examples Set the first three pixels to red, green, and then blue: neopixel-tool buffer ff000000ff000000ff Set the first five pixels to: yellow, pink, light blue, purple, and lime neopixel-tool buffer ffff00ff66ff3399ffcc00ccbfff80","title":"Set the Colour of Many Pixels"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Controlling-Neopixels/#set-the-maximum-pixel-brightness","text":"Neopixels can be programmed with to maximum brightness: neopixel-tool -b brightness Note that the above command will queue up the brightness change, to immediately show the colour change: neopixel-tool -sb brightness Arguments The brightness argument specifies the maximum colour intensity for all colour components. The range is 0 to 255 Examples Set the maximum brightness: neopixel-tool -b 255 Set to half brightness: neopixel-tool -b 127 Set to quarter brightness, taking effect right away: neopixel-tool -sb 63","title":"Set the Maximum Pixel Brightness"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Controlling-Neopixels/#show-queued-colour-changes","text":"Any commands to set the colours of pixels will not be immediately displayed on the Neopixels (unless they are run with the -s option). To show all queued colour changes: neopixel-tool -s","title":"Show Queued Colour Changes"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Controlling-Neopixels/#using-the-libraries","text":"The C and C++ Libraries and Python module can be used in your own programs to control Neopixels. Allowing you to put on light shows of your own creation! For more information, see this guide .","title":"Using the Libraries"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/","text":"Arduino Dock Initial Setup This procedure is meant to be carried out on the original Arduino Dock. Do not perform this on the Arduino Dock 2, it is not needed ! For information on flashing sketches on the Arduino Dock 2, see the Onion Docs for the Arduino Dock 2 Before you can get started with the Arduino Dock, there are a few things that need to be done on your computer and then on the Arduino Dock. These steps will only need to be carried out once, and then you'll be set to go. [[ TOC ]] Computer setup These steps ensure the Omega and Arduino Dock will be detected wirelessly and correctly work with your computer. Accessing the Omega's URL The Omega must be accessible via its URL http://omega-ABCD.local where ABCD is your Omega's unique code. The requirements vary depending on your Operating System: Operating System Actions Required Windows Install Apple's Bonjour Service OS X Nothing, good to go Linux Zeroconf services should already be installed, should be ok Arduino IDE Installation Install the latest Arduino IDE from the good folks over at Arduino . We did all of our testing using Version 1.6.6. Modification of boards.txt The regular Arduino Uno has no way of communicating with your computer via WiFi, but the Omega provides the Arduino Dock with a means of wireless communication, so we'll have to let the Arduino software know! This requires a one line addition to the boards.txt file in your Arduino IDE installation. Open the boards.txt file in any text editor. The following table outlines where the boards.txt file can be found: Operating System Location of boards.txt OS X /Applications/Arduino.app/Contents/Java/hardware/arduino/avr/boards.txt Windows C:\\Program Files (x86)\\Arduino\\hardware\\arduino\\avr\\boards.txt Once it's open, add the following line: uno.upload.via_ssh=true Doesn't matter where you add it, you can nestle it with the other uno. settings if you like. Installation of Onion Arduino Library The Onion Arduino Library provides the required setup and functions required for the Arduino Dock to operate correctly. Installing the library Follow these steps to install the library: * Download and install the Adafruit Neopixel Library using these instructions * Download the latest Onion Arduino Library zip to your computer * Open the Arduino IDE * Open the Sketch Menu, and then Include Library - Add .ZIP Library * Navigate to where the Onion Arduino Library zip was downloaded * Select Onion-Arduino-Library.zip * The library is now installed, it can be included in your sketches by opening the Sketch menu - Include Library - Onion Arduino Dock Setup The ATmega chip on the Arduino Dock needs to be burned with a new bootloader to work with the Omega properly. This only has to be done once and your Arduino Dock will be good to go. The new bootloader allows the ATmega to be flashed via the I2C connection with the Omega. There are a few methods to flash the bootloader, they are outlined below. Using the Omega + Expansion Dock as a Programmer The Omega can actually be used to program the bootloader Required Components An Omega An Expansion Dock The target Arduino Dock Six jumper wires (male-to-male) Can just be six pieces of wire with the insulation stripped off at the end Wiring Plug the Omega into the Expansion Dock and allow it to boot. The Expansion Dock ports need to be connected to specific Arduino Dock ports for the programming to work. Follow the table below to wire the Omega to the Arduino Dock. Note that it's very important that the Omega and the Arduino Dock share a common ground! Function Expansion Dock GPIO Arduino Dock Pin SPI MISO 1 12 SPI SCK 6 13 SPI RESET 7 Reset SPI MOSI 19 11 VCC 5V 5V GND GND GND Provide power to the Omega and Expansion Dock through the micro usb port. Programming First install the Onion Arduino Dock software package: opkg update opkg install arduino-dock On the Omega's terminal and run the following command: sh /usr/bin/arduino-dock flash bootloader Unless there were errors in the programming sequence, the Arduino Dock should now have the Bootloader installed and the amber LED next to the DC connector should be flickering. Summary Once this is complete, the extra wires and the Expansion Dock are no longer required! Check out the [[guide on using the Arduino Dock|Using the Arduino Dock]] for what to do next. Resolving Issues If the amber LED on the Arduino Dock is not flickering after the bootloader upload or if you experience issues flashing sketches, try the ICSP bootloader flashing method described in the section below . Using the Omega + Expansion Dock with the Arduino Dock ICSP Header If the method described above does not successfully flash the Bootloader, try this slightly modified method. The ICSP Header provides direct SPI communication with the ATmega chip, allowing for programming regardless of how the ATmega pins are setup. Required Components An Omega An Expansion Dock The target Arduino Dock Two male-to-male jumper wires Four male-to-female jumper wires Wiring Plug the Omega into the Expansion Dock and allow it to boot. Provide power to the Arduino Dock by connecting the 5V and GND Expansion Dock GPIOs to the Arduino Dock 5V and GND pins with jumper wires. GPIOs 1, 6, 7, and 19 from the Expansion Dock need to be connected to the ICSP Header on the Arduino Dock using male-to-female jumper wires. Follow the image and table below: Expansion Dock GPIO ICSP Pin 1 MISO 6 SCK 7 RESET 19 MOSI Power the Omega and Expansion Dock through the micro usb port. Programming First install the Onion Arduino Dock software package: opkg update opkg install arduino-dock Connect to the Omega's terminal and run the following command: sh /usr/bin/arduino-dock flash bootloader Unless there were errors in the programming sequence, the Arduino Dock should now have the Bootloader installed and the amber LED next to the DC connector should be flickering. Summary Once this is complete, the extra wires and the Expansion Dock are no longer required! Check out the [[guide on using the Arduino Dock|Using the Arduino Dock]] for what to do next. Using the Omega + Mini Dock as a Programmer The Mini Dock can be used in place of an Expansion Dock if you do not have access to one. This process is a little more 'hacky' and we recommend using an Expansion Dock if at all possible, proceed with caution and at your own risk! Required Components An Omega A Mini Dock The target Arduino dock Six pieces of wire with insulation stripped off the ends Stranded wire works best Wiring Disconnect the Omega from the Mini Dock. Put a wire into each of the pins shown below: When using stranded wire, you'll need to twist the ends to make it easier to plug in. With the wires in place, plug the Omega into the Mini Dock, ensuring that the wires are into the Mini Dock's headers by the Omega's pins. It will take more pressure than usual to plug the Omega in since the pins need to squish in with the wires, be careful to not break anything! Stranded wires work well since the strands have some mobility and can accomodate the pin. Allow the Omega to boot. Now connect the wires to the Arduino Dock ports specified below: Function Mini Dock Pin Arduino Dock Pin SPI MISO 1 12 SPI SCK 6 13 SPI RESET 7 Reset SPI MOSI 19 11 VCC 3.3V 3V3 GND GND GND Programming First install the Onion Arduino Dock software package: opkg update opkg install arduino-dock Connect to the Omega's terminal and run the following command: sh /usr/bin/arduino-dock flash bootloader Unless there were errors in the programming sequence, the Arduino Dock should now have the Bootloader installed and the amber LED next to the DC connector should be flickering. Summary Once this is complete, the extra wires and the Mini Dock are no longer required! Check out the [[guide on using the Arduino Dock|Using the Arduino Dock]] for what to do next. Using an Arduino as a Programmer Stil working on this one, stay tuned!","title":"Arduino Dock Initial Setup"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#arduino-dock-initial-setup","text":"","title":"Arduino Dock Initial Setup"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#this-procedure-is-meant-to-be-carried-out-on-the-original-arduino-dock-do-not-perform-this-on-the-arduino-dock-2-it-is-not-needed-for-information-on-flashing-sketches-on-the-arduino-dock-2-see-the-onion-docs-for-the-arduino-dock-2","text":"Before you can get started with the Arduino Dock, there are a few things that need to be done on your computer and then on the Arduino Dock. These steps will only need to be carried out once, and then you'll be set to go. [[ TOC ]]","title":"This procedure is meant to be carried out on the original Arduino Dock. Do not perform this on the Arduino Dock 2, it is not needed! For information on flashing sketches on the Arduino Dock 2, see the Onion Docs for the Arduino Dock 2"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#computer-setup","text":"These steps ensure the Omega and Arduino Dock will be detected wirelessly and correctly work with your computer.","title":"Computer setup"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#accessing-the-omegas-url","text":"The Omega must be accessible via its URL http://omega-ABCD.local where ABCD is your Omega's unique code. The requirements vary depending on your Operating System: Operating System Actions Required Windows Install Apple's Bonjour Service OS X Nothing, good to go Linux Zeroconf services should already be installed, should be ok","title":"Accessing the Omega's URL"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#arduino-ide","text":"","title":"Arduino IDE"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#installation","text":"Install the latest Arduino IDE from the good folks over at Arduino . We did all of our testing using Version 1.6.6.","title":"Installation"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#modification-of-boardstxt","text":"The regular Arduino Uno has no way of communicating with your computer via WiFi, but the Omega provides the Arduino Dock with a means of wireless communication, so we'll have to let the Arduino software know! This requires a one line addition to the boards.txt file in your Arduino IDE installation. Open the boards.txt file in any text editor. The following table outlines where the boards.txt file can be found: Operating System Location of boards.txt OS X /Applications/Arduino.app/Contents/Java/hardware/arduino/avr/boards.txt Windows C:\\Program Files (x86)\\Arduino\\hardware\\arduino\\avr\\boards.txt Once it's open, add the following line: uno.upload.via_ssh=true Doesn't matter where you add it, you can nestle it with the other uno. settings if you like.","title":"Modification of boards.txt"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#installation-of-onion-arduino-library","text":"The Onion Arduino Library provides the required setup and functions required for the Arduino Dock to operate correctly.","title":"Installation of Onion Arduino Library"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#installing-the-library","text":"Follow these steps to install the library: * Download and install the Adafruit Neopixel Library using these instructions * Download the latest Onion Arduino Library zip to your computer * Open the Arduino IDE * Open the Sketch Menu, and then Include Library - Add .ZIP Library * Navigate to where the Onion Arduino Library zip was downloaded * Select Onion-Arduino-Library.zip * The library is now installed, it can be included in your sketches by opening the Sketch menu - Include Library - Onion","title":"Installing the library"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#arduino-dock-setup","text":"The ATmega chip on the Arduino Dock needs to be burned with a new bootloader to work with the Omega properly. This only has to be done once and your Arduino Dock will be good to go. The new bootloader allows the ATmega to be flashed via the I2C connection with the Omega. There are a few methods to flash the bootloader, they are outlined below.","title":"Arduino Dock Setup"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#using-the-omega-expansion-dock-as-a-programmer","text":"The Omega can actually be used to program the bootloader","title":"Using the Omega + Expansion Dock as a Programmer"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#required-components","text":"An Omega An Expansion Dock The target Arduino Dock Six jumper wires (male-to-male) Can just be six pieces of wire with the insulation stripped off at the end","title":"Required Components"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#wiring","text":"Plug the Omega into the Expansion Dock and allow it to boot. The Expansion Dock ports need to be connected to specific Arduino Dock ports for the programming to work. Follow the table below to wire the Omega to the Arduino Dock. Note that it's very important that the Omega and the Arduino Dock share a common ground! Function Expansion Dock GPIO Arduino Dock Pin SPI MISO 1 12 SPI SCK 6 13 SPI RESET 7 Reset SPI MOSI 19 11 VCC 5V 5V GND GND GND Provide power to the Omega and Expansion Dock through the micro usb port.","title":"Wiring"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#programming","text":"First install the Onion Arduino Dock software package: opkg update opkg install arduino-dock On the Omega's terminal and run the following command: sh /usr/bin/arduino-dock flash bootloader Unless there were errors in the programming sequence, the Arduino Dock should now have the Bootloader installed and the amber LED next to the DC connector should be flickering.","title":"Programming"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#summary","text":"Once this is complete, the extra wires and the Expansion Dock are no longer required! Check out the [[guide on using the Arduino Dock|Using the Arduino Dock]] for what to do next.","title":"Summary"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#resolving-issues","text":"If the amber LED on the Arduino Dock is not flickering after the bootloader upload or if you experience issues flashing sketches, try the ICSP bootloader flashing method described in the section below .","title":"Resolving Issues"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#using-the-omega-expansion-dock-with-the-arduino-dock-icsp-header","text":"If the method described above does not successfully flash the Bootloader, try this slightly modified method. The ICSP Header provides direct SPI communication with the ATmega chip, allowing for programming regardless of how the ATmega pins are setup.","title":"Using the Omega + Expansion Dock with the Arduino Dock ICSP Header"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#required-components_1","text":"An Omega An Expansion Dock The target Arduino Dock Two male-to-male jumper wires Four male-to-female jumper wires","title":"Required Components"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#wiring_1","text":"Plug the Omega into the Expansion Dock and allow it to boot. Provide power to the Arduino Dock by connecting the 5V and GND Expansion Dock GPIOs to the Arduino Dock 5V and GND pins with jumper wires. GPIOs 1, 6, 7, and 19 from the Expansion Dock need to be connected to the ICSP Header on the Arduino Dock using male-to-female jumper wires. Follow the image and table below: Expansion Dock GPIO ICSP Pin 1 MISO 6 SCK 7 RESET 19 MOSI Power the Omega and Expansion Dock through the micro usb port.","title":"Wiring"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#programming_1","text":"First install the Onion Arduino Dock software package: opkg update opkg install arduino-dock Connect to the Omega's terminal and run the following command: sh /usr/bin/arduino-dock flash bootloader Unless there were errors in the programming sequence, the Arduino Dock should now have the Bootloader installed and the amber LED next to the DC connector should be flickering.","title":"Programming"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#summary_1","text":"Once this is complete, the extra wires and the Expansion Dock are no longer required! Check out the [[guide on using the Arduino Dock|Using the Arduino Dock]] for what to do next.","title":"Summary"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#using-the-omega-mini-dock-as-a-programmer","text":"The Mini Dock can be used in place of an Expansion Dock if you do not have access to one. This process is a little more 'hacky' and we recommend using an Expansion Dock if at all possible, proceed with caution and at your own risk!","title":"Using the Omega + Mini Dock as a Programmer"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#required-components_2","text":"An Omega A Mini Dock The target Arduino dock Six pieces of wire with insulation stripped off the ends Stranded wire works best","title":"Required Components"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#wiring_2","text":"Disconnect the Omega from the Mini Dock. Put a wire into each of the pins shown below: When using stranded wire, you'll need to twist the ends to make it easier to plug in. With the wires in place, plug the Omega into the Mini Dock, ensuring that the wires are into the Mini Dock's headers by the Omega's pins. It will take more pressure than usual to plug the Omega in since the pins need to squish in with the wires, be careful to not break anything! Stranded wires work well since the strands have some mobility and can accomodate the pin. Allow the Omega to boot. Now connect the wires to the Arduino Dock ports specified below: Function Mini Dock Pin Arduino Dock Pin SPI MISO 1 12 SPI SCK 6 13 SPI RESET 7 Reset SPI MOSI 19 11 VCC 3.3V 3V3 GND GND GND","title":"Wiring"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#programming_2","text":"First install the Onion Arduino Dock software package: opkg update opkg install arduino-dock Connect to the Omega's terminal and run the following command: sh /usr/bin/arduino-dock flash bootloader Unless there were errors in the programming sequence, the Arduino Dock should now have the Bootloader installed and the amber LED next to the DC connector should be flickering.","title":"Programming"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#summary_2","text":"Once this is complete, the extra wires and the Mini Dock are no longer required! Check out the [[guide on using the Arduino Dock|Using the Arduino Dock]] for what to do next.","title":"Summary"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Initial-Setup/#using-an-arduino-as-a-programmer","text":"Stil working on this one, stay tuned!","title":"Using an Arduino as a Programmer"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Using-the-Arduino-Dock/","text":"Using the Arduino Dock This procedure is meant to be carried out on the original Arduino Dock. Do not perform this on the Arduino Dock 2, for information on flashing sketches on the Arduino Dock 2, see the Onion Docs for the Arduino Dock 2 The Onion Arduino Dock is meant to be an interface between the Omega and the popular ATmega microcontroller, allowing you to bring the flexibility of the Omega into the world of microcontrollers. [[ TOC ]] The Hardware It is essentially our (supercharged) version of an Arduino Uno R3 board, since they share the same microcontroller, the ATmel ATmega328P microcontroller (MCU), and have identical pin layouts. This allows users to use any Arduino shields in conjunction with the Arduino Dock and the Omega. The Dock also includes an In-Circuit Serial Programming (ICSP) header to break out the SPI pins which can be used to program the IC. Additionally, there is a USB-host port that is connected to the Omega. Initial Setup Before you can get started with the Arduino Dock, there are a few things that need to be done on your computer and then on the Arduino Dock. Follow the steps outlined in the [[Initial Setup]] article. Using the Arduino Dock Connectivity When the Omega is plugged into the Arduino Dock, the serial terminal is not available. Ensure that the Omega is connected to a local WiFi network to allow communication via SSH or the Console. Power The Arduino Dock and attached Omega can be powered in the following ways: * Micro USB cable plugged into the Micro USB port * 5V DC power supply plugged into the DC barrel jack * Any 5V source connected via the 5V and GND pins on the Arduino Dock * Any 3.3V source connected via the 3V3 and GND pins on the Arduino Dock The Arduino Dock has a voltage regulator to ensure the Omega is being supplied with the correct voltage. Note that the Arduino Dock's DC barrel jack should only be used with 5V DC power supplies. If a higher voltage is used, your Omega and Arduino Dock have a high chance of being damaged! Flashing Sketches Ensure you are on Omega firmware b220 or later. Now we get to the fun part, flashing sketches to the ATmega chip! Ensure that all sketches include the Onion Arduino Library and that an Onion object is instantiated in the setup() function. If this is not done, the MCU_RESET button on the Omega will have to be pressed before uploading the Sketch. Using the Arduino IDE wirelessly Thanks to the setup you did on your computer and the Arduino Dock, you can actually use the Arduino IDE on your computer to wirelessly flash Sketches to the Arduino Dock, so long as your computer and the Omega on your Arduino Dock are on the same wifi network. In the Arduino Tools menu, select \"Arduino/Guinuino Uno\" for the Board, and your Omega-ABCD hostname as the Port: If your Omega does not show up in the Port menu as a network port, restart the Arduino and wait for 30 seconds: When your sketch is ready, hit the Upload button. Once the sketch is compiled, it will require your Omega password to upload: The IDE actually creates an SSH connection with the Omega to transfer the compiled hex file, and the Omega with then flash the ATmega chip via I2C! (If your previous sketch did not include the Onion Arduino Library you will have to press the MCU_RESET button on the Arduino Dock right after entering your password in order to flash successfully) Once the upload completes, the info screen will show something along the lines of: The ATmega chip is now running your sketch, enjoy! Note: An orange message saying ash: merge-sketch-with-bootloader.lua: not found may appear in the info screen. You can safely ignore this message , it does not affect the sketch upload. Using the Omega The Omega can actually flash the ATmega chip as well. This is handy if the Arduino IDE cannot detect your Omega as a Network Port due to any connection/setup issues. First, enable verbose output during compilation in the Arduino IDE Preferences: Hit the verify button to compile the sketch, once it's complete you will have to scroll to the right to find the path to the compiled hex file: Copy this path and then transfer the file to your Omega. I personally like to use rsync to transfer files from my computer to the Omega, the rsync command on my computer to transfer to the Omega is as follows: rsync -va path to compiled sketch root@omega-abcd.local:/root/ hex name As an example: rsync -va /var/folders/55/7v7wrbcs57jflv83zgz8v67m0000gn/T/builddf059f74b6cb24ac573e131020699c2d.tmp/blink2.ino.hex root@omega-1302.local:/root/blink2.hex On the Omega, you will need to install the Onion Arduino Dock software package: opkg update opkg install arduino-dock Now that the hex file is on your Omega, you can flash it to the ATmega chip from the Omega's terminal: sh /usr/bin/arduino-dock flash hex file For example: # sh /usr/bin/arduino-dock flash /root/blink2.hex Flashing application '/root/blink2.hex' ... device : /dev/i2c-0 (address: 0x29) version : TWIBOOTm328pv2.1??x (sig: 0x1e 0x95 0x0f = AVR Mega 32p) flash size : 0x7800 / 30720 (0x80 bytes/page) eeprom size : 0x0400 / 1024 writing flash : [**************************************************#?] (3210) verifying flash: [**************************************************#?] (3210) Done The sketch has been flashing and is running on the Arduino Dock, enjoy! (If your previous sketch did not include the Onion Arduino Library you will have to press the MCU_RESET button on the Arduino Dock just before pressing Enter for the arduino-dock command) The Onion Arduino Library The library provides some essential functionality for the Arduino Dock. For info on installing the Onion Arduino Library, check out the installation instructions in the Arduino Dock Initial Setup article . The Onion Arduino Library has dependencies on other libraries so make sure to follow all of the listed steps. Basic Setup in Sketch To add the Onion library to your Sketch in the IDE, open the Sketch menu, navigate to Include Library - Onion Once the library has been added, create a global instance of the Onion object. Add the following line on the global scope: Onion* onionSetup; To initialize and activate the library functions, add the following line to the setup() function in the sketch: onionSetup = new Onion(); Check out our blink2 example to see this in action. The example can be accessed in the Arduino IDE through File - Examples - Onion - blink2 Library Functionality For now the library setups up the ATmega to join the I2C bus. It then listens on the bus for a command from the Omega to go into Reset so a new Sketch can be flashed. As described above, if the Onion library is not used in your sketch, the MCU_RESET button on the Arduino Dock will have to be manually pressed right before a new sketch is uploaded. We're working on more functionality for this library, namely using the Serial Port as a bridge between the Omega and ATmega chip! Stay tuned! If the Library is Not Includeed If the library is not included in your sketch, you will likely see a message like the following in the Arduino IDE the next time you try to upload a sketch: Sketch uses 1,030 bytes (3%) of program storage space. Maximum is 32,256 bytes. Global variables use 9 bytes (0%) of dynamic memory, leaving 2,039 bytes for local variables. Maximum is 2,048 bytes. ash: merge-sketch-with-bootloader.lua: not found Flashing application '/tmp/sketch.hex' ... Error: Write failed Done Flash complete! failed to switch to bootloader (invalid address?): No such device or address To remedy this, press the MCU_RESET button on the Arduino Dock right before loading the sketch. While Arduino Dock LED is flickering super quickly, the sketch upload will work. Using I2C in a Sketch Right now the Onion Library joins the I2C bus with an address of 0x08 and listens for a write of 0xde 0xad (get it? 'dead' ha ha ha) when resetting. If you need a Sketch to use I2C, make sure to build this functionality into your I2C handling to comply with the Arduino Dock flashing procedure. Acknowledgements Special thanks to Olaf Rempel for creating the original TWI bootloader and boot tool.","title":"Using the Arduino Dock"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Using-the-Arduino-Dock/#using-the-arduino-dock","text":"","title":"Using the Arduino Dock"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Using-the-Arduino-Dock/#this-procedure-is-meant-to-be-carried-out-on-the-original-arduino-dock-do-not-perform-this-on-the-arduino-dock-2-for-information-on-flashing-sketches-on-the-arduino-dock-2-see-the-onion-docs-for-the-arduino-dock-2","text":"The Onion Arduino Dock is meant to be an interface between the Omega and the popular ATmega microcontroller, allowing you to bring the flexibility of the Omega into the world of microcontrollers. [[ TOC ]]","title":"This procedure is meant to be carried out on the original Arduino Dock. Do not perform this on the Arduino Dock 2, for information on flashing sketches on the Arduino Dock 2, see the Onion Docs for the Arduino Dock 2"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Using-the-Arduino-Dock/#the-hardware","text":"It is essentially our (supercharged) version of an Arduino Uno R3 board, since they share the same microcontroller, the ATmel ATmega328P microcontroller (MCU), and have identical pin layouts. This allows users to use any Arduino shields in conjunction with the Arduino Dock and the Omega. The Dock also includes an In-Circuit Serial Programming (ICSP) header to break out the SPI pins which can be used to program the IC. Additionally, there is a USB-host port that is connected to the Omega.","title":"The Hardware"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Using-the-Arduino-Dock/#initial-setup","text":"Before you can get started with the Arduino Dock, there are a few things that need to be done on your computer and then on the Arduino Dock. Follow the steps outlined in the [[Initial Setup]] article.","title":"Initial Setup"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Using-the-Arduino-Dock/#using-the-arduino-dock_1","text":"","title":"Using the Arduino Dock"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Using-the-Arduino-Dock/#connectivity","text":"When the Omega is plugged into the Arduino Dock, the serial terminal is not available. Ensure that the Omega is connected to a local WiFi network to allow communication via SSH or the Console.","title":"Connectivity"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Using-the-Arduino-Dock/#power","text":"The Arduino Dock and attached Omega can be powered in the following ways: * Micro USB cable plugged into the Micro USB port * 5V DC power supply plugged into the DC barrel jack * Any 5V source connected via the 5V and GND pins on the Arduino Dock * Any 3.3V source connected via the 3V3 and GND pins on the Arduino Dock The Arduino Dock has a voltage regulator to ensure the Omega is being supplied with the correct voltage. Note that the Arduino Dock's DC barrel jack should only be used with 5V DC power supplies. If a higher voltage is used, your Omega and Arduino Dock have a high chance of being damaged!","title":"Power"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Using-the-Arduino-Dock/#flashing-sketches","text":"Ensure you are on Omega firmware b220 or later. Now we get to the fun part, flashing sketches to the ATmega chip! Ensure that all sketches include the Onion Arduino Library and that an Onion object is instantiated in the setup() function. If this is not done, the MCU_RESET button on the Omega will have to be pressed before uploading the Sketch.","title":"Flashing Sketches"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Using-the-Arduino-Dock/#using-the-arduino-ide-wirelessly","text":"Thanks to the setup you did on your computer and the Arduino Dock, you can actually use the Arduino IDE on your computer to wirelessly flash Sketches to the Arduino Dock, so long as your computer and the Omega on your Arduino Dock are on the same wifi network. In the Arduino Tools menu, select \"Arduino/Guinuino Uno\" for the Board, and your Omega-ABCD hostname as the Port: If your Omega does not show up in the Port menu as a network port, restart the Arduino and wait for 30 seconds: When your sketch is ready, hit the Upload button. Once the sketch is compiled, it will require your Omega password to upload: The IDE actually creates an SSH connection with the Omega to transfer the compiled hex file, and the Omega with then flash the ATmega chip via I2C! (If your previous sketch did not include the Onion Arduino Library you will have to press the MCU_RESET button on the Arduino Dock right after entering your password in order to flash successfully) Once the upload completes, the info screen will show something along the lines of: The ATmega chip is now running your sketch, enjoy! Note: An orange message saying ash: merge-sketch-with-bootloader.lua: not found may appear in the info screen. You can safely ignore this message , it does not affect the sketch upload.","title":"Using the Arduino IDE wirelessly"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Using-the-Arduino-Dock/#using-the-omega","text":"The Omega can actually flash the ATmega chip as well. This is handy if the Arduino IDE cannot detect your Omega as a Network Port due to any connection/setup issues. First, enable verbose output during compilation in the Arduino IDE Preferences: Hit the verify button to compile the sketch, once it's complete you will have to scroll to the right to find the path to the compiled hex file: Copy this path and then transfer the file to your Omega. I personally like to use rsync to transfer files from my computer to the Omega, the rsync command on my computer to transfer to the Omega is as follows: rsync -va path to compiled sketch root@omega-abcd.local:/root/ hex name As an example: rsync -va /var/folders/55/7v7wrbcs57jflv83zgz8v67m0000gn/T/builddf059f74b6cb24ac573e131020699c2d.tmp/blink2.ino.hex root@omega-1302.local:/root/blink2.hex On the Omega, you will need to install the Onion Arduino Dock software package: opkg update opkg install arduino-dock Now that the hex file is on your Omega, you can flash it to the ATmega chip from the Omega's terminal: sh /usr/bin/arduino-dock flash hex file For example: # sh /usr/bin/arduino-dock flash /root/blink2.hex Flashing application '/root/blink2.hex' ... device : /dev/i2c-0 (address: 0x29) version : TWIBOOTm328pv2.1??x (sig: 0x1e 0x95 0x0f = AVR Mega 32p) flash size : 0x7800 / 30720 (0x80 bytes/page) eeprom size : 0x0400 / 1024 writing flash : [**************************************************#?] (3210) verifying flash: [**************************************************#?] (3210) Done The sketch has been flashing and is running on the Arduino Dock, enjoy! (If your previous sketch did not include the Onion Arduino Library you will have to press the MCU_RESET button on the Arduino Dock just before pressing Enter for the arduino-dock command)","title":"Using the Omega"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Using-the-Arduino-Dock/#the-onion-arduino-library","text":"The library provides some essential functionality for the Arduino Dock. For info on installing the Onion Arduino Library, check out the installation instructions in the Arduino Dock Initial Setup article . The Onion Arduino Library has dependencies on other libraries so make sure to follow all of the listed steps.","title":"The Onion Arduino Library"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Using-the-Arduino-Dock/#basic-setup-in-sketch","text":"To add the Onion library to your Sketch in the IDE, open the Sketch menu, navigate to Include Library - Onion Once the library has been added, create a global instance of the Onion object. Add the following line on the global scope: Onion* onionSetup; To initialize and activate the library functions, add the following line to the setup() function in the sketch: onionSetup = new Onion(); Check out our blink2 example to see this in action. The example can be accessed in the Arduino IDE through File - Examples - Onion - blink2","title":"Basic Setup in Sketch"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Using-the-Arduino-Dock/#library-functionality","text":"For now the library setups up the ATmega to join the I2C bus. It then listens on the bus for a command from the Omega to go into Reset so a new Sketch can be flashed. As described above, if the Onion library is not used in your sketch, the MCU_RESET button on the Arduino Dock will have to be manually pressed right before a new sketch is uploaded. We're working on more functionality for this library, namely using the Serial Port as a bridge between the Omega and ATmega chip! Stay tuned!","title":"Library Functionality"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Using-the-Arduino-Dock/#if-the-library-is-not-includeed","text":"If the library is not included in your sketch, you will likely see a message like the following in the Arduino IDE the next time you try to upload a sketch: Sketch uses 1,030 bytes (3%) of program storage space. Maximum is 32,256 bytes. Global variables use 9 bytes (0%) of dynamic memory, leaving 2,039 bytes for local variables. Maximum is 2,048 bytes. ash: merge-sketch-with-bootloader.lua: not found Flashing application '/tmp/sketch.hex' ... Error: Write failed Done Flash complete! failed to switch to bootloader (invalid address?): No such device or address To remedy this, press the MCU_RESET button on the Arduino Dock right before loading the sketch. While Arduino Dock LED is flickering super quickly, the sketch upload will work.","title":"If the Library is Not Includeed"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Using-the-Arduino-Dock/#using-i2c-in-a-sketch","text":"Right now the Onion Library joins the I2C bus with an address of 0x08 and listens for a write of 0xde 0xad (get it? 'dead' ha ha ha) when resetting. If you need a Sketch to use I2C, make sure to build this functionality into your I2C handling to comply with the Arduino Dock flashing procedure.","title":"Using I2C in a Sketch"},{"location":"tutorials/OnionWiki/Tutorials/Arduino-Dock/Using-the-Arduino-Dock/#acknowledgements","text":"Special thanks to Olaf Rempel for creating the original TWI bootloader and boot tool.","title":"Acknowledgements"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Ethernet-Expansion/","text":"Using the Ethernet Expansion The Ethernet Expansion allows your Omega to perform any networking duties via Ethernet. This tutorial will show you how to enable the Ethernet port so that your Omega can act as just another Ethernet device connected to your router or switch. This means that the Omega will depend on the router to assign it an IP address. The eth0 interface on the Omega is disabled by default because it is primarily designed as a prototyping platform for wireless applications. However, by changing configuration, you can enable the eth0 interface on the Omega. Step 1. Edit the configuration file The configuration file for the network is located at /etc/config/network Add the following lines: config interface 'wan' option ifname 'eth0' option proto 'dhcp' option hostname 'OnionOmega' Save the file. Step 2. Restart the network service Run the following command to restart the network service so that your new configuration will be put into effect: /etc/init.d/network restart Other Applications The Ethernet Expansion allows for a lot of flexibility in networking with the Omega. Applications range from using the Omega as a Router to using the Omega as an Ethernet Bridge . Check out the Omega and Networking section of the Tutorials!","title":"Using the Ethernet Expansion"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Ethernet-Expansion/#using-the-ethernet-expansion","text":"The Ethernet Expansion allows your Omega to perform any networking duties via Ethernet. This tutorial will show you how to enable the Ethernet port so that your Omega can act as just another Ethernet device connected to your router or switch. This means that the Omega will depend on the router to assign it an IP address. The eth0 interface on the Omega is disabled by default because it is primarily designed as a prototyping platform for wireless applications. However, by changing configuration, you can enable the eth0 interface on the Omega.","title":"Using the Ethernet Expansion"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Ethernet-Expansion/#step-1-edit-the-configuration-file","text":"The configuration file for the network is located at /etc/config/network Add the following lines: config interface 'wan' option ifname 'eth0' option proto 'dhcp' option hostname 'OnionOmega' Save the file.","title":"Step 1. Edit the configuration file"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Ethernet-Expansion/#step-2-restart-the-network-service","text":"Run the following command to restart the network service so that your new configuration will be put into effect: /etc/init.d/network restart","title":"Step 2. Restart the network service"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Ethernet-Expansion/#other-applications","text":"The Ethernet Expansion allows for a lot of flexibility in networking with the Omega. Applications range from using the Omega as a Router to using the Omega as an Ethernet Bridge . Check out the Omega and Networking section of the Tutorials!","title":"Other Applications"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-GPS-Expansion/","text":"Using The GPS Expansion With The Omega The GPS expansion from Onion features a ublox neo GPS module, which allows seamless integration into your omega projects. The expansion outputs GPS data in the form of NMEA messages, which include all relevant information(latitude, longtitude...etc). For more info on the NMEA standard, refer to this link . We have prepared a package, ogps, to handle the NMEA messages and offer up the relevant information to the user via ubus calls. [[ TOC ]] Hardware Simply connect the GPS expansion into the USB port of your Omega's Dock. Note: You may need to connect the GPS expansion to a USB Hub with its own power supply. Refer to the bottom of the tutorial for more info. GPS Commands The device driver will already be installed and Linux should recognize the device automatically. To double check, run the following command. ls /dev/ You should see a device called \"ttyACM0\", this is our GPS expansion. At this point you can read the raw output of the gps, using the following command. cat /dev/ttyACM0 This will print out the raw NMEA output. Installing ogps You can also use ogps to access relevant data offered up by the GPS via ubus calls. To install ogps enter the following commands. opkg update opkg install opgs Now that it is installed you can access the information through ubus. To make sure the gps service has initialized, run the command. ubus list You should see gps listed. Usage Make sure your GPS is connected! To access the data simply run the command. ubus call gps info If the GPS is not locked, the command will return \"signal=false\". In this case you may need to give the GPS more time to lock onto a satellite or you will need to move to a more open area where the gps can see more satellites. If GPS refuses to lock, it may be due to a power stability issue which can be fixed with a hardware adjustment. Refer to the next section of the tutorial to deal with this. Otherwise you should have an output that looks like this. Hardware Fix for Stability Issue If you have given ample time ( 10 min) and tested the module in an open area and it still doesn't work, you may need to make a change to your hardware setup. To see if this is the case, you need to look at the raw output of the gps expansion. Run the command. cat /dev/ttyACM0 Look for a line that begins with \"GPGSV\" and \"GPRMC\". Look the third number in the \"GPGSV\" sentence. This number represents the number of satellites in view, if its abnormally large (~20) and the third position in the \"GPRMC\" sentence is \"V\" instead of \"A\". This hardware adjustment should work for you. The issue is that there is a power instability on the GPS expansion. To get around this you will need to connect the GPS expansion into a USB Hub with its own power supply and connect the USB Hub to the Omega's USB Host port To verify it is working, look at the raw output by using cat /dev/ttyACM0 You should see a significant drop in the third number in the \"GPGSV\" sentence and \"A\" in the third position of the \"GPRMC\" sentence. Try running the ubus call gps command again. If it still returns false, try restarting gps service on ubus by running the following command. /etc/init.d/ugps stop and /etc/init.d/ugps start Now try running the ubus call for gps info again and it should work.","title":"Using the GPS Expansion"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-GPS-Expansion/#using-the-gps-expansion-with-the-omega","text":"The GPS expansion from Onion features a ublox neo GPS module, which allows seamless integration into your omega projects. The expansion outputs GPS data in the form of NMEA messages, which include all relevant information(latitude, longtitude...etc). For more info on the NMEA standard, refer to this link . We have prepared a package, ogps, to handle the NMEA messages and offer up the relevant information to the user via ubus calls. [[ TOC ]]","title":"Using The GPS Expansion With The Omega"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-GPS-Expansion/#hardware","text":"Simply connect the GPS expansion into the USB port of your Omega's Dock. Note: You may need to connect the GPS expansion to a USB Hub with its own power supply. Refer to the bottom of the tutorial for more info.","title":"Hardware"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-GPS-Expansion/#gps-commands","text":"The device driver will already be installed and Linux should recognize the device automatically. To double check, run the following command. ls /dev/ You should see a device called \"ttyACM0\", this is our GPS expansion. At this point you can read the raw output of the gps, using the following command. cat /dev/ttyACM0 This will print out the raw NMEA output.","title":"GPS Commands"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-GPS-Expansion/#installing-ogps","text":"You can also use ogps to access relevant data offered up by the GPS via ubus calls. To install ogps enter the following commands. opkg update opkg install opgs Now that it is installed you can access the information through ubus. To make sure the gps service has initialized, run the command. ubus list You should see gps listed.","title":"Installing ogps"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-GPS-Expansion/#usage","text":"Make sure your GPS is connected! To access the data simply run the command. ubus call gps info If the GPS is not locked, the command will return \"signal=false\". In this case you may need to give the GPS more time to lock onto a satellite or you will need to move to a more open area where the gps can see more satellites. If GPS refuses to lock, it may be due to a power stability issue which can be fixed with a hardware adjustment. Refer to the next section of the tutorial to deal with this. Otherwise you should have an output that looks like this.","title":"Usage"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-GPS-Expansion/#hardware-fix-for-stability-issue","text":"If you have given ample time ( 10 min) and tested the module in an open area and it still doesn't work, you may need to make a change to your hardware setup. To see if this is the case, you need to look at the raw output of the gps expansion. Run the command. cat /dev/ttyACM0 Look for a line that begins with \"GPGSV\" and \"GPRMC\". Look the third number in the \"GPGSV\" sentence. This number represents the number of satellites in view, if its abnormally large (~20) and the third position in the \"GPRMC\" sentence is \"V\" instead of \"A\". This hardware adjustment should work for you. The issue is that there is a power instability on the GPS expansion. To get around this you will need to connect the GPS expansion into a USB Hub with its own power supply and connect the USB Hub to the Omega's USB Host port To verify it is working, look at the raw output by using cat /dev/ttyACM0 You should see a significant drop in the third number in the \"GPGSV\" sentence and \"A\" in the third position of the \"GPRMC\" sentence. Try running the ubus call gps command again. If it still returns false, try restarting gps service on ubus by running the following command. /etc/init.d/ugps stop and /etc/init.d/ugps start Now try running the ubus call for gps info again and it should work.","title":"Hardware Fix for Stability Issue"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/","text":"Using the OLED Expansion The OLED Expansion allows you to display images and text on the small black and white OLED Display. It can be used to display project status, sensor info, or other information from the Omega, allowing you to have data from the digital world displayed in the real world! [[ TOC ]] The Hardware The OLED Expansion has a 0.96\" 128x64 black and white OLED display. When displaying text, there are 8 rows, with 21 possible characters in each row. Using the OLED Expansion Make sure that your Omega has the latest firmware! On the command line, a tool called oled-exp will be your helper in all things related to the OLED Expansion. Also available are a C library and Python module that will allow you to create your own programs that use the OLED Expansion. Command Usage For a print-out of the command's usage, run it with just a -h argument oled-exp -h In general, the commands will be in this form: oled-exp [OPTIONS] COMMAND PARAMETER Programming Flow When it is first powered on, the OLED Expansion must first be programmed with an initialization sequence in order to accept further commands. After the initialization, it can accept a series of commands to do the following: * clear the display * turn it on and off (while preserving the image) * invert the display colours * dim the brightness * set the text cursor to a particular position * write a message * enable horizontal or diagonal scrolling * display an image A single oled-exp call can have one or many cascaded commands: // single command oled-exp write Hello! // multiple cascaded commands (execute in order from left to right) oled-exp write Onion Omega\\nMy favourite dim on cursor 4,0 write :) Command and Option Table To reconcile all of the above features to oled-exp , refer to the table below: Action Option/Command initialization -i clear the display -c toggle display on or off power on|off invert colours invert on|off dim the screen dim on|off set the cursor cursor row , column set the cursor by pixel cursorPixel row , pixel write text write string write a single byte writeByte byte enable scrolling scroll direction display an image draw lcd file Options The option arguments can be run by themselves or in conjunction with any other command. They will always be executed first. Initialization To initialize the display to accept further commands: // just initialize the display oled-exp -i // initialize the display and write a message oled-exp -i write Freshly initialized Clear the Screen To clear the screen and set the cursor to the top left: // just clear the screen oled-exp -c // clear the screen and draw an image oled-exp -c draw /root/onion.lcd Commands The commands are more complex and each requires one argument. Power Turn the display on or off. Can be used to toggle the display after it has been initialized. oled-exp power on|off Note that any text or images on the screen will be preserved. Invert Invert black and white on the display. Setting to on will enable the invert, setting to off will disable the inversion. oled-exp invert on|off Dim Enable dimming the display. Setting to on will dim the display, setting to off will restore the default brightness. oled-exp dim on|off Write Write a string to the display at the current position of the cursor : oled-exp write string If the string contains spaces or any special characters (newlines, !?(){}[] etc), it needs to be wrapped with double quotes: oled-exp write This is so exciting!\\nIsn't it?!?!\\n\\n(I love the Omega) A list outlining the supported characters can be found in a section below. Write a Single Byte Write a single byte of data (eight vertical pixels) to the display at the current position of the cursor : oled-exp writeByte byte The Least Significant Bit (LSB) in the byte corresponds to the top-most pixel in the column, the Most Significant Bit (MSB) corresponds to the bottom-most pixel in the column. The cursor will be incremented to the next pixel column after this command. For example, the following command: oled-exp writeByte 0x0f Will fill in the top four pixels and will leave the bottom four pixels in a column blank. Set the Cursor Position Set the cursor position on the display, any writes after this command will start at the specified row and column. The row parameter represents each character row (8 pixel rows) on the display, so the range is 0 to 7 The column parameter represents each character column, the range is 0 to 20 oled-exp cursor row , column Examples To write Hello on the first line, and then How are you? on the 4th row: oled-exp write Hello cursor 3,0 write How are you? Set the cursor to the start of the last character row: oled-exp cursor 7,0 Set the cursor to the middle of the 2nd row: oled-exp cursor 2,10 Set the Cursor Position by Pixel Column Set the cursor position on the display, any writes after this command will start at the specified row and pixel . The row parameter represents each character row (8 pixel rows) on the display, so the range is 0 to 7 The pixel parameter represents each pixel column, the range is 0 to 127 oled-exp cursorPixel row , pixel Examples To write Hello a quarter of the way through the first line, and then How are you? in the middle of the 4th row: oled-exp cursorPixel 0,31 write Hello cursorPixel 3,63 write How are you? Set the cursor to the start of the last character row: oled-exp cursorPixel 7,0 Set the cursor to the middle of the 2nd row: oled-exp cursorPixel 2,63 Scrolling The OLED can scroll whatever is on the screen horizontally or diagonally upwards. The text/image will wrap around the edges. oled-exp scroll direction Supported directions: * left * right * diagonal-left * diagonal-right * stop * To disable scrolling Displaying Images Drawing Images on the Display The OLED Screen can also be used to display images. The Console can be used to convert existing images into a format that is compatible with the OLED Expansion and save the output to an Omega. Functions in the C library can read the image data and display it on the OLED Expansion. Alternatively, a buffer can be created programatically and displayed on the OLED. Creating Image Files The Console OLED App can be used to create OLED Expansion compatible image files. Navigate to the Image tab of the OLED App: Once an image has been selected, a button and form will appear that allow you to save the OLED image file to your Omega: After the image name and location are selected, click the Save to Omega button. OLED Image File Details The OLED image files store the image data as 1024 bytes represented in hexadecimal. Each byte represents eight vertical pixels, with the first 128 bytes representing the columns in Page 0, the following 128 bytes representing the columns in Page 1, and so on. If this is unclear, see the Understanding the Display Section in the OLED Expansion Library documentation article for details on how the display is addressed. Displaying Images from a File To display the OLED image file on the OLED Expansion: oled-exp draw path to oled image file Example Draw an image saved to /root/image.lcd on the display: oled-exp draw /root/image.lcd Initialize the display and draw an image saved to /tmp/onion.lcd : oled-exp -i draw /tmp/onion.lcd Supported Characters The OLED Display supports the following characters: SPACE ! \" $ % ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z : ; = ? @ [ \\ ] ^ _ ` { | } ~ Using the Libraries The C library and Python module will give you the flexibility to use the OLED Expansion however you want in your own programs. For more information, see this guide .","title":"Using the OLED Expansion"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#using-the-oled-expansion","text":"The OLED Expansion allows you to display images and text on the small black and white OLED Display. It can be used to display project status, sensor info, or other information from the Omega, allowing you to have data from the digital world displayed in the real world! [[ TOC ]]","title":"Using the OLED Expansion"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#the-hardware","text":"The OLED Expansion has a 0.96\" 128x64 black and white OLED display. When displaying text, there are 8 rows, with 21 possible characters in each row.","title":"The Hardware"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#using-the-oled-expansion_1","text":"Make sure that your Omega has the latest firmware! On the command line, a tool called oled-exp will be your helper in all things related to the OLED Expansion. Also available are a C library and Python module that will allow you to create your own programs that use the OLED Expansion.","title":"Using the OLED Expansion"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#command-usage","text":"For a print-out of the command's usage, run it with just a -h argument oled-exp -h In general, the commands will be in this form: oled-exp [OPTIONS] COMMAND PARAMETER","title":"Command Usage"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#programming-flow","text":"When it is first powered on, the OLED Expansion must first be programmed with an initialization sequence in order to accept further commands. After the initialization, it can accept a series of commands to do the following: * clear the display * turn it on and off (while preserving the image) * invert the display colours * dim the brightness * set the text cursor to a particular position * write a message * enable horizontal or diagonal scrolling * display an image A single oled-exp call can have one or many cascaded commands: // single command oled-exp write Hello! // multiple cascaded commands (execute in order from left to right) oled-exp write Onion Omega\\nMy favourite dim on cursor 4,0 write :)","title":"Programming Flow"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#command-and-option-table","text":"To reconcile all of the above features to oled-exp , refer to the table below: Action Option/Command initialization -i clear the display -c toggle display on or off power on|off invert colours invert on|off dim the screen dim on|off set the cursor cursor row , column set the cursor by pixel cursorPixel row , pixel write text write string write a single byte writeByte byte enable scrolling scroll direction display an image draw lcd file","title":"Command and Option Table"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#options","text":"The option arguments can be run by themselves or in conjunction with any other command. They will always be executed first.","title":"Options"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#initialization","text":"To initialize the display to accept further commands: // just initialize the display oled-exp -i // initialize the display and write a message oled-exp -i write Freshly initialized","title":"Initialization"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#clear-the-screen","text":"To clear the screen and set the cursor to the top left: // just clear the screen oled-exp -c // clear the screen and draw an image oled-exp -c draw /root/onion.lcd","title":"Clear the Screen"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#commands","text":"The commands are more complex and each requires one argument.","title":"Commands"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#power","text":"Turn the display on or off. Can be used to toggle the display after it has been initialized. oled-exp power on|off Note that any text or images on the screen will be preserved.","title":"Power"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#invert","text":"Invert black and white on the display. Setting to on will enable the invert, setting to off will disable the inversion. oled-exp invert on|off","title":"Invert"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#dim","text":"Enable dimming the display. Setting to on will dim the display, setting to off will restore the default brightness. oled-exp dim on|off","title":"Dim"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#write","text":"Write a string to the display at the current position of the cursor : oled-exp write string If the string contains spaces or any special characters (newlines, !?(){}[] etc), it needs to be wrapped with double quotes: oled-exp write This is so exciting!\\nIsn't it?!?!\\n\\n(I love the Omega) A list outlining the supported characters can be found in a section below.","title":"Write"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#write-a-single-byte","text":"Write a single byte of data (eight vertical pixels) to the display at the current position of the cursor : oled-exp writeByte byte The Least Significant Bit (LSB) in the byte corresponds to the top-most pixel in the column, the Most Significant Bit (MSB) corresponds to the bottom-most pixel in the column. The cursor will be incremented to the next pixel column after this command. For example, the following command: oled-exp writeByte 0x0f Will fill in the top four pixels and will leave the bottom four pixels in a column blank.","title":"Write a Single Byte"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#set-the-cursor-position","text":"Set the cursor position on the display, any writes after this command will start at the specified row and column. The row parameter represents each character row (8 pixel rows) on the display, so the range is 0 to 7 The column parameter represents each character column, the range is 0 to 20 oled-exp cursor row , column Examples To write Hello on the first line, and then How are you? on the 4th row: oled-exp write Hello cursor 3,0 write How are you? Set the cursor to the start of the last character row: oled-exp cursor 7,0 Set the cursor to the middle of the 2nd row: oled-exp cursor 2,10","title":"Set the Cursor Position"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#set-the-cursor-position-by-pixel-column","text":"Set the cursor position on the display, any writes after this command will start at the specified row and pixel . The row parameter represents each character row (8 pixel rows) on the display, so the range is 0 to 7 The pixel parameter represents each pixel column, the range is 0 to 127 oled-exp cursorPixel row , pixel Examples To write Hello a quarter of the way through the first line, and then How are you? in the middle of the 4th row: oled-exp cursorPixel 0,31 write Hello cursorPixel 3,63 write How are you? Set the cursor to the start of the last character row: oled-exp cursorPixel 7,0 Set the cursor to the middle of the 2nd row: oled-exp cursorPixel 2,63","title":"Set the Cursor Position by Pixel Column"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#scrolling","text":"The OLED can scroll whatever is on the screen horizontally or diagonally upwards. The text/image will wrap around the edges. oled-exp scroll direction Supported directions: * left * right * diagonal-left * diagonal-right * stop * To disable scrolling","title":"Scrolling"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#displaying-images","text":"","title":"Displaying Images"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#drawing-images-on-the-display","text":"The OLED Screen can also be used to display images. The Console can be used to convert existing images into a format that is compatible with the OLED Expansion and save the output to an Omega. Functions in the C library can read the image data and display it on the OLED Expansion. Alternatively, a buffer can be created programatically and displayed on the OLED.","title":"Drawing Images on the Display"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#creating-image-files","text":"The Console OLED App can be used to create OLED Expansion compatible image files. Navigate to the Image tab of the OLED App: Once an image has been selected, a button and form will appear that allow you to save the OLED image file to your Omega: After the image name and location are selected, click the Save to Omega button.","title":"Creating Image Files"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#oled-image-file-details","text":"The OLED image files store the image data as 1024 bytes represented in hexadecimal. Each byte represents eight vertical pixels, with the first 128 bytes representing the columns in Page 0, the following 128 bytes representing the columns in Page 1, and so on. If this is unclear, see the Understanding the Display Section in the OLED Expansion Library documentation article for details on how the display is addressed.","title":"OLED Image File Details"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#displaying-images-from-a-file","text":"To display the OLED image file on the OLED Expansion: oled-exp draw path to oled image file Example Draw an image saved to /root/image.lcd on the display: oled-exp draw /root/image.lcd Initialize the display and draw an image saved to /tmp/onion.lcd : oled-exp -i draw /tmp/onion.lcd","title":"Displaying Images from a File"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#supported-characters","text":"The OLED Display supports the following characters: SPACE ! \"","title":"Supported Characters"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-OLED-Expansion/#using-the-libraries","text":"The C library and Python module will give you the flexibility to use the OLED Expansion however you want in your own programs. For more information, see this guide .","title":"Using the Libraries"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/","text":"Using the Power Dock Bring your next project on the go with the Power Dock! Equipped with on-board battery management, the Power Dock allows you to recharge and monitor battery levels, while providing a header to connect Onion Expansions. [[ TOC ]] The Hardware Your Power Dock has a 30 pin Expansion Header, allowing you to use all of your existing Onion Expansions. It provides the Omega with the 3.3V it needs to run, while also providing 5V for the Expansions and USB Host port. The Power Dock is flexible: it can run off just a battery or just by drawing power from the Micro USB port. Charging the battery requires having both the battery and the Micro USB plugged in, don't worry, the Omega will still work with no interruptions during charging. The Power Dock at a Glance The Power Switch The power switch controls power to the Omega, regardless of whether it is powered from the battery or Micro-USB cable. The power switch has no effect on the battery charging, so the battery will charge regardless of the switch position . The blue Power LED indicates if there is power flowing to the Omega. Indicator LEDs The power dock contains 4 LEDs that indicate the current battery level and charging status. The LED closest to the Micro-USB port indicates the lowest battery level and the LED furthest away from the Micro-USB port indicates the highest battery level. Lowest Battery Level: Highest Battery Level: The Battery The Power Dock is designed for use with a 3.7V LiPo Battery with a standard 2-pin JST-PH connector (2mm spacing between pins). Expect a 1500mAh battery to last about 10 hours, in some cases, up to 12 hours. Warning: Do not attempt to charge your battery with anything other that the Power Dock or a charger designed specifically for LiPo Batteries! Reset Button The Reset Button can be used to reboot the Omega or perform a factor restore of the firmware. A Reset Button can be found on the Expansion Dock and Mini Dock: For reference, the Reset Button is connected to Omega's GPIO11. GPIO11 is the Omega's Active-High Soft Reset input. Reboot Momentarily pressing the reset button and letting go will initiate a reboot of the Omega OS. Factory Restore Pressing and holding the reset button for 10 seconds and releasing will trigger a factory restore. Warning: This will reset your Omega to the default filesystem of the last firmware update, this will delete ALL of your data! Micro-USB Port The Micro-USB Port is used to supply the Power Dock with ... power! Connect it to a computer or a USB wall adapter. No USB to Serial Chip There is no USB-to-Serial Chip on the Power Dock. This means that you will not be able to connect to the Omega serially over the Micro-USB port. Instead, connect to your Omega wirelessly via SSH . USB Host Port The USB Host Port is connected to the Omega and can be used to interface USB peripherals with the Omega. A large variety of devices are supported out of the box, including webcams, keyboards, flash drives, hard drives, etc. Differences from the Expansion Dock Note some of the differences between the Expansion Dock and the Power Dock: The main differences are: * Addition of battery management circuits and battery level indicator LEDs * Addition of 2-pin JST-PH connector for batteries * All circuit components are surface-mount * No USB-to-Serial Chip * No RGB LED Usage Modes The Power Dock operates in three different modes. Battery Mode This is the most important mode; when the Omega and Power Dock are running completely off the battery. The LED Indicators will be turned off by default to conserve battery life, however they can be turned on for five seconds via a command from the Omega. When the battery is approaching depletion the Indicator LEDs will begin flashing the low battery warning: Charging Mode When both the battery and Micro-USB cable are connected to the Power Dock, the battery will be charging. The Omega can still be powered on while the battery is charging, but it doesn't have to be; the battery will charge in this mode regardless of what the Omega is doing. You can even disconnect your Omega and the battery will still charge! The Indicator LEDs will show the current charge level of the battery: * A solid LED means the battery has charged up to that level * A flashing LED means the battery is currently charging this level For best results, use a short Micro-USB cable when charging. Take a look at the animations below for more details on the battery level indicators: Battery is 25% charged, charging up to 50% : Battery is 50% charged, charging up to 75% : Battery is 75% charged, charging up to 100% : Stationary Mode The Power Dock will still work when the battery is disconnected and the Power Dock is receiving power just from the Micro USB cable. The Battery Level Indicator LEDs will be flashing erattically, this is expected: The Power Dock essentially acts like the Expansion Dock in this mode. Application to Check Battery Level The power-dock application allows you to turn on the indicator LEDs on the Power Dock. It will only take effect when the Omega and Power Dock are being powered just by the battery. Install To install the power-dock application, run the following commands: opkg update opkg install power-dock Usage The application will turn on the Battery Level Indicator LEDs, allowing you to visually check the battery charge level. To do this simply enter the following command: power-dock","title":"Using the Power Dock"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#using-the-power-dock","text":"Bring your next project on the go with the Power Dock! Equipped with on-board battery management, the Power Dock allows you to recharge and monitor battery levels, while providing a header to connect Onion Expansions. [[ TOC ]]","title":"Using the Power Dock"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#the-hardware","text":"Your Power Dock has a 30 pin Expansion Header, allowing you to use all of your existing Onion Expansions. It provides the Omega with the 3.3V it needs to run, while also providing 5V for the Expansions and USB Host port. The Power Dock is flexible: it can run off just a battery or just by drawing power from the Micro USB port. Charging the battery requires having both the battery and the Micro USB plugged in, don't worry, the Omega will still work with no interruptions during charging.","title":"The Hardware"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#the-power-dock-at-a-glance","text":"","title":"The Power Dock at a Glance"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#the-power-switch","text":"The power switch controls power to the Omega, regardless of whether it is powered from the battery or Micro-USB cable. The power switch has no effect on the battery charging, so the battery will charge regardless of the switch position . The blue Power LED indicates if there is power flowing to the Omega.","title":"The Power Switch"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#indicator-leds","text":"The power dock contains 4 LEDs that indicate the current battery level and charging status. The LED closest to the Micro-USB port indicates the lowest battery level and the LED furthest away from the Micro-USB port indicates the highest battery level. Lowest Battery Level: Highest Battery Level:","title":"Indicator LEDs"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#the-battery","text":"The Power Dock is designed for use with a 3.7V LiPo Battery with a standard 2-pin JST-PH connector (2mm spacing between pins). Expect a 1500mAh battery to last about 10 hours, in some cases, up to 12 hours. Warning: Do not attempt to charge your battery with anything other that the Power Dock or a charger designed specifically for LiPo Batteries!","title":"The Battery"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#reset-button","text":"The Reset Button can be used to reboot the Omega or perform a factor restore of the firmware. A Reset Button can be found on the Expansion Dock and Mini Dock: For reference, the Reset Button is connected to Omega's GPIO11. GPIO11 is the Omega's Active-High Soft Reset input.","title":"Reset Button"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#reboot","text":"Momentarily pressing the reset button and letting go will initiate a reboot of the Omega OS.","title":"Reboot"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#factory-restore","text":"Pressing and holding the reset button for 10 seconds and releasing will trigger a factory restore. Warning: This will reset your Omega to the default filesystem of the last firmware update, this will delete ALL of your data!","title":"Factory Restore"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#micro-usb-port","text":"The Micro-USB Port is used to supply the Power Dock with ... power! Connect it to a computer or a USB wall adapter.","title":"Micro-USB Port"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#no-usb-to-serial-chip","text":"There is no USB-to-Serial Chip on the Power Dock. This means that you will not be able to connect to the Omega serially over the Micro-USB port. Instead, connect to your Omega wirelessly via SSH .","title":"No USB to Serial Chip"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#usb-host-port","text":"The USB Host Port is connected to the Omega and can be used to interface USB peripherals with the Omega. A large variety of devices are supported out of the box, including webcams, keyboards, flash drives, hard drives, etc.","title":"USB Host Port"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#differences-from-the-expansion-dock","text":"Note some of the differences between the Expansion Dock and the Power Dock: The main differences are: * Addition of battery management circuits and battery level indicator LEDs * Addition of 2-pin JST-PH connector for batteries * All circuit components are surface-mount * No USB-to-Serial Chip * No RGB LED","title":"Differences from the Expansion Dock"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#usage-modes","text":"The Power Dock operates in three different modes.","title":"Usage Modes"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#battery-mode","text":"This is the most important mode; when the Omega and Power Dock are running completely off the battery. The LED Indicators will be turned off by default to conserve battery life, however they can be turned on for five seconds via a command from the Omega. When the battery is approaching depletion the Indicator LEDs will begin flashing the low battery warning:","title":"Battery Mode"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#charging-mode","text":"When both the battery and Micro-USB cable are connected to the Power Dock, the battery will be charging. The Omega can still be powered on while the battery is charging, but it doesn't have to be; the battery will charge in this mode regardless of what the Omega is doing. You can even disconnect your Omega and the battery will still charge! The Indicator LEDs will show the current charge level of the battery: * A solid LED means the battery has charged up to that level * A flashing LED means the battery is currently charging this level For best results, use a short Micro-USB cable when charging. Take a look at the animations below for more details on the battery level indicators: Battery is 25% charged, charging up to 50% : Battery is 50% charged, charging up to 75% : Battery is 75% charged, charging up to 100% :","title":"Charging Mode"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#stationary-mode","text":"The Power Dock will still work when the battery is disconnected and the Power Dock is receiving power just from the Micro USB cable. The Battery Level Indicator LEDs will be flashing erattically, this is expected: The Power Dock essentially acts like the Expansion Dock in this mode.","title":"Stationary Mode"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#application-to-check-battery-level","text":"The power-dock application allows you to turn on the indicator LEDs on the Power Dock. It will only take effect when the Omega and Power Dock are being powered just by the battery.","title":"Application to Check Battery Level"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#install","text":"To install the power-dock application, run the following commands: opkg update opkg install power-dock","title":"Install"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Power-Dock/#usage","text":"The application will turn on the Battery Level Indicator LEDs, allowing you to visually check the battery charge level. To do this simply enter the following command: power-dock","title":"Usage"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Relay-Expansion/","text":"Using the Relay Expansion The Relay Expansion allows you to control two relay modules. Relays are basically electronically operated switches, enabling the Omega's low power circuits to control other, potentially high power circuits. [[ TOC ]] Using Relays Since relays are essentially switches, they can be used as switches in other circuits. Consider this LED circuit: We can build this circuit without the switch: Next, we will add the Omega and Relay Expansion to act as the switch: The positive lead of the battery pack is connected to the port labelled IN on the Expansion. A jumper wire is connected from the OUT port back to the circuit. Since the Relay is OFF, the switch is off and no current is passing through the LED: When we turn the relay on, it acts as a closed switch, allowing current to flow through the LED: The Relay Expansion has two modules, so it is possible to control two different circuits with a single Relay Expansion. The Hardware The Relay Expansion has two TE Axicom IM03 relay modules. The table below outlines the specifications: Parameter Specification Maximum Switching Voltage 220VDC, 250VAC Current Rating 2A Switching Power 60W, 62.5VA Switching Time Typical: 1ms Maximum: 3ms The full datasheet for the relay can be found here . The Dip-Switches The dip switches on the Relay Expansion control the I2C device address of the Expansion, enabling users to stack and control up to eight Relay Expansions with one Omega and Expansion dock. The 'off' position for each switch is when the toggle is close to the numbers on the switch, or away from the relay modules. The 'on' position is when the toggle is away from the numbers on the switch, or closer to the relay modules. Using the Command Line Make sure that your Omega has the latest firmware! A tool we've developed called relay-exp will make controlling your relay expansion easy as pie. Also available are a C library and a Python module that allow you to develop your own programs to control the Relay Expansion. Command Usage For a print out of the command's usage, run it with just a -h argument: relay-exp -h Initialization After every power-cycle, the chip on the Relay Expansion must be initialized to correctly and safely control the Relay Modules. The driver application will automatically detect if initialization is required and perform the required sequence, so there is no need to run this command. However, manually triggering the initialization is still available; run the following command: relay-exp -i This can be run on it's own or in conjunction with any commands below. By default, the relays will be OFF. Relay Channels The Expansion has two modules, this guide will refer to the relays as RELAY0 and RELAY1 or as a channel. Refer to the following image to identify which channel refers to which relay: Setting a Relay's State The tool allows you to program the relay's states like so: relay-exp channel state The channel argument should be either 0 or 1 for RELAY0 and RELAY1 respectively. The state argument should be 0 or off for turning the relay OFF, or 1 or on for turning the relay ON When the relay is OFF, it will act as an open switch, so any circuit connected to it will not be closed and will therefore be powered down. When it is ON, it is essentially a closed switch, so connected circuits will be powered on. A few examples... To initialize the chip and enable relay1: relay-exp -i 1 1 To disable relay1: relay-exp 1 0 To turn on relay 0: relay-exp 0 on Controlling both Relays Simultaneously You are also able to control both relays in a single command: relay-exp all state As above, the state argument should be 0 or off to turn the relay OFF, or 1 or on to turn the relay ON, the only difference is that it will now affect both relays. Some Examples: Initializing the chip and turning both relays ON: relay-exp -i all 1 Turning both relays OFF: relay-exp all off Reading a Relay's State The tool also allows you to check the current state of the relay: relay-exp read channel The channel argument should be either 0 or 1 for RELAY0 and RELAY1 respectively. The output of the program will indicate if the relay is ON or OFF. A few examples... To read the state of relay0: root@Omega-1302:~# relay-exp read 0 Reading RELAY0 state: ON To read the state of relay1: root@Omega-1302:~# relay-exp read 1 Reading RELAY1 state: OFF Using Multiple Relay Expansions by Changing the Dip-Switch Settings The dip-switches specify the I2C address the chip on the Relax Expansion declares as it's device address. A single Omega and Expansion Dock can control up to eight Relay Expansions if they all have different dip-switch configurations. The relay-exp tool will need to know if the switch configuration has changed when programming the expansion: relay-exp -s bbb channel state Where bbb is a binary number representing the position of each switch. If the switch is 'off', it can be represented with a 0; if the switch is 'on', it can be represented with a 1. The order is: Switch 1 value, Switch 2 value, Switch 3 value. Follow this table: Switch 1 Switch 2 Switch 3 Binary Value OFF OFF OFF 000 OFF OFF ON 001 OFF ON OFF 010 OFF ON ON 011 ON OFF OFF 100 ON OFF ON 101 ON ON OFF 110 ON ON ON 111 If all of the switches are off (000), the switch setting does not need to be specified and the command can be used as normal: relay-exp channel state Some Examples: The switches are set to on-off-on, setting RELAY0 to on: relay-exp -s 101 0 on The switches are set to on-on-on, setting RELAY1 to off: relay-exp -s 111 1 0 The switches are set to off-off-on, setting BOTH relays to on relay-exp -s 001 all 1 The switches are set to off-off-off, setting both relays to off relay-exp all off I2C Address Mapping If you're curious about how the dip-switch settings affect the I2C device address of the Relay Expansion, then this table is for you: I2C Device Address Switch Binary Setting 0x27 000 0x26 100 0x25 010 0x24 110 0x23 001 0x22 101 0x21 011 0x20 111 Using the I2C Address Directly If you don't like dealing with the switch positions and would rather use the I2C device address directly, this option is for you: relay-exp -a addr channel state Where addr is the I2C device address. It can be entered with or without the leading 0x , so 0x27 or 27 will both work. Some Examples: For a device address of 0x23, set RELAY0 to on: relay-exp -a 0x23 0 on For a device address of 0x26, set RELAY1 to off: relay-exp -a 26 1 0 For a device address of 0x24, set BOTH relays to on relay-exp -a 0x24 all 1 Using the Libraries The C library and Python module will allow you to control the Relay Expansion with your own programs. For more information, see this guide .","title":"Using the Relay Expansion"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Relay-Expansion/#using-the-relay-expansion","text":"The Relay Expansion allows you to control two relay modules. Relays are basically electronically operated switches, enabling the Omega's low power circuits to control other, potentially high power circuits. [[ TOC ]]","title":"Using the Relay Expansion"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Relay-Expansion/#using-relays","text":"Since relays are essentially switches, they can be used as switches in other circuits. Consider this LED circuit: We can build this circuit without the switch: Next, we will add the Omega and Relay Expansion to act as the switch: The positive lead of the battery pack is connected to the port labelled IN on the Expansion. A jumper wire is connected from the OUT port back to the circuit. Since the Relay is OFF, the switch is off and no current is passing through the LED: When we turn the relay on, it acts as a closed switch, allowing current to flow through the LED: The Relay Expansion has two modules, so it is possible to control two different circuits with a single Relay Expansion.","title":"Using Relays"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Relay-Expansion/#the-hardware","text":"The Relay Expansion has two TE Axicom IM03 relay modules. The table below outlines the specifications: Parameter Specification Maximum Switching Voltage 220VDC, 250VAC Current Rating 2A Switching Power 60W, 62.5VA Switching Time Typical: 1ms Maximum: 3ms The full datasheet for the relay can be found here .","title":"The Hardware"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Relay-Expansion/#the-dip-switches","text":"The dip switches on the Relay Expansion control the I2C device address of the Expansion, enabling users to stack and control up to eight Relay Expansions with one Omega and Expansion dock. The 'off' position for each switch is when the toggle is close to the numbers on the switch, or away from the relay modules. The 'on' position is when the toggle is away from the numbers on the switch, or closer to the relay modules.","title":"The Dip-Switches"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Relay-Expansion/#using-the-command-line","text":"Make sure that your Omega has the latest firmware! A tool we've developed called relay-exp will make controlling your relay expansion easy as pie. Also available are a C library and a Python module that allow you to develop your own programs to control the Relay Expansion.","title":"Using the Command Line"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Relay-Expansion/#command-usage","text":"For a print out of the command's usage, run it with just a -h argument: relay-exp -h","title":"Command Usage"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Relay-Expansion/#initialization","text":"After every power-cycle, the chip on the Relay Expansion must be initialized to correctly and safely control the Relay Modules. The driver application will automatically detect if initialization is required and perform the required sequence, so there is no need to run this command. However, manually triggering the initialization is still available; run the following command: relay-exp -i This can be run on it's own or in conjunction with any commands below. By default, the relays will be OFF.","title":"Initialization"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Relay-Expansion/#relay-channels","text":"The Expansion has two modules, this guide will refer to the relays as RELAY0 and RELAY1 or as a channel. Refer to the following image to identify which channel refers to which relay:","title":"Relay Channels"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Relay-Expansion/#setting-a-relays-state","text":"The tool allows you to program the relay's states like so: relay-exp channel state The channel argument should be either 0 or 1 for RELAY0 and RELAY1 respectively. The state argument should be 0 or off for turning the relay OFF, or 1 or on for turning the relay ON When the relay is OFF, it will act as an open switch, so any circuit connected to it will not be closed and will therefore be powered down. When it is ON, it is essentially a closed switch, so connected circuits will be powered on. A few examples... To initialize the chip and enable relay1: relay-exp -i 1 1 To disable relay1: relay-exp 1 0 To turn on relay 0: relay-exp 0 on","title":"Setting a Relay's State"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Relay-Expansion/#controlling-both-relays-simultaneously","text":"You are also able to control both relays in a single command: relay-exp all state As above, the state argument should be 0 or off to turn the relay OFF, or 1 or on to turn the relay ON, the only difference is that it will now affect both relays. Some Examples: Initializing the chip and turning both relays ON: relay-exp -i all 1 Turning both relays OFF: relay-exp all off","title":"Controlling both Relays Simultaneously"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Relay-Expansion/#reading-a-relays-state","text":"The tool also allows you to check the current state of the relay: relay-exp read channel The channel argument should be either 0 or 1 for RELAY0 and RELAY1 respectively. The output of the program will indicate if the relay is ON or OFF. A few examples... To read the state of relay0: root@Omega-1302:~# relay-exp read 0 Reading RELAY0 state: ON To read the state of relay1: root@Omega-1302:~# relay-exp read 1 Reading RELAY1 state: OFF","title":"Reading a Relay's State"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Relay-Expansion/#using-multiple-relay-expansions-by-changing-the-dip-switch-settings","text":"The dip-switches specify the I2C address the chip on the Relax Expansion declares as it's device address. A single Omega and Expansion Dock can control up to eight Relay Expansions if they all have different dip-switch configurations. The relay-exp tool will need to know if the switch configuration has changed when programming the expansion: relay-exp -s bbb channel state Where bbb is a binary number representing the position of each switch. If the switch is 'off', it can be represented with a 0; if the switch is 'on', it can be represented with a 1. The order is: Switch 1 value, Switch 2 value, Switch 3 value. Follow this table: Switch 1 Switch 2 Switch 3 Binary Value OFF OFF OFF 000 OFF OFF ON 001 OFF ON OFF 010 OFF ON ON 011 ON OFF OFF 100 ON OFF ON 101 ON ON OFF 110 ON ON ON 111 If all of the switches are off (000), the switch setting does not need to be specified and the command can be used as normal: relay-exp channel state Some Examples: The switches are set to on-off-on, setting RELAY0 to on: relay-exp -s 101 0 on The switches are set to on-on-on, setting RELAY1 to off: relay-exp -s 111 1 0 The switches are set to off-off-on, setting BOTH relays to on relay-exp -s 001 all 1 The switches are set to off-off-off, setting both relays to off relay-exp all off","title":"Using Multiple Relay Expansions by Changing the Dip-Switch Settings"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Relay-Expansion/#i2c-address-mapping","text":"If you're curious about how the dip-switch settings affect the I2C device address of the Relay Expansion, then this table is for you: I2C Device Address Switch Binary Setting 0x27 000 0x26 100 0x25 010 0x24 110 0x23 001 0x22 101 0x21 011 0x20 111","title":"I2C Address Mapping"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Relay-Expansion/#using-the-i2c-address-directly","text":"If you don't like dealing with the switch positions and would rather use the I2C device address directly, this option is for you: relay-exp -a addr channel state Where addr is the I2C device address. It can be entered with or without the leading 0x , so 0x27 or 27 will both work. Some Examples: For a device address of 0x23, set RELAY0 to on: relay-exp -a 0x23 0 on For a device address of 0x26, set RELAY1 to off: relay-exp -a 26 1 0 For a device address of 0x24, set BOTH relays to on relay-exp -a 0x24 all 1","title":"Using the I2C Address Directly"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Relay-Expansion/#using-the-libraries","text":"The C library and Python module will allow you to control the Relay Expansion with your own programs. For more information, see this guide .","title":"Using the Libraries"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Servo-Expansion/","text":"Using the Servo Expansion The Servo (PWM) Expansion allows you to generate up to 16 different Pulse Width Modulated (PWM) signals to control anything from Servo Motors, DC Motor speed, LED brightness, etc. [[ TOC ]] PWM Signals Pulse Width Modulated signals can be described by duty cycle or periods. Duty Cycle Indicates what percentage of the time a signal is on or high voltage. So a PWM signal with a 25% duty cycle will be high for 25% of the time, and low 75% of the time. The duty cycle can be calculated as follows: $$DutyCycle = {\\frac{T_{on}}{T_{CompleteCycle}}}\\times100\\%$$ Period Indicates the amount of time (usually in milliseconds) for each part of the cycle. The Time On, Ton in the diagram above is the time the signal is high. This is also known as pulse width. Similarly, Time Off, or Toff is the time the signal is low. The Complete Cycle time corresponds to the overall period of the PWM. Changing the period will also change the frequency of the PWM signal: $$Frequency = {\\frac{1}{Period}}$$ The Hardware The Servo Expansion has 16 channels to generate PWM signals. The 16 channels are broken out so that servo-motors can be directly connected to the headers. It also comes with an onboard DC barrel jack connector that can be used to supply power to any connected servos. If this connector is not used, the Expansion Dock will provide power to the servos, however, it is not recommended to run more than one or two servos under light load with this method. Note that the Omega cannot be powered through this connector, it requires its power own power supply. The onboard chip has an oscillator that can generate PWM signals with a frequency in the range of 24 Hz to 1526 Hz. Most servos operate at 50 Hz, that is the default frequency. Using the Command Line Make sure that your Omega has the latest firmware! We've developed a tool called pwm-exp that should make generating PWM signals a breeze. Also available are a C library and a Python module that allow you to develop your own programs to control the Servo Expansion. Command Usage For a print-out of the command's usage, run it with just a -h argument pwm-exp -h Initialization After every boot, the chip and oscillator on the Servo Expansion have to be initialized in order for the PWM signals to be generated correctly. The driver application will automatically detect if the oscillator is not running and will run the required sequence, so this command should only be run if you wish to initialize the oscillator but not generate any PWM signals. To perform the initialization, run the following command: pwm-exp -i This can be run by itself or in conjunction with any commands below. Setting the PWM based on Duty Cycle The tool allows you to define the PWM signal to be generated by specifying which channel on the expansion to use and the duty cycle pwm-exp [options] channel duty cycle percentage A few examples: Generating a 10% duty cycle signal on channel 0 pwm-exp 0 10 Generating a 33.33% duty cycle with a signal frequency of 100 Hz on channel 1 pwm-exp -f 100 1 33.33 Performing the initialization sequence and then generating a 95% duty cycle signal on channel 2 pwm-exp -i 2 95 Note that the duty cycle must be between 0 and 100. Setting the PWM based on Period The PWM signal can also be generated by specifying the pulse width and total period in milliseconds: pwm-exp -p channel pulse width total period Some examples: Generating a PWM signal that is high for 1ms and low for 19ms on channel 3. This makes the overall period 20ms, corresponding to a 50Hz frequency pwm-exp -p 3 1 20 Generating a PWM signal that is high for 1.65ms with an overall period of 5.4ms (corresponds to 185.19 Hz) on channel 4 pwm-exp -p 5 1.65 5.4 Setting the PWM signal frequency When setting the signal based on duty cycle, the frequency can also be adjusted in each command by using the -f option. pwm-exp -f frequency channel duty An example Generating a 15% duty pwm signal at 220Hz on channel 5 pwm-exp -f 220 5 15 The default frequency is 50 Hz since most Servos operate on this frequency. If the desired frequency is different from the default, the frequency must be specified in each pwm-exp command, otherwise the expansion will reset to the default frequency. Also note that all channels run on the same frequency, it is not possible to generate PWM signals with different frequencies on the same Servo Expansion. When setting the signal based on period, the frequency is dependent on the total period: $$Frequency = {\\frac{1}{Period}}$$ Selecting a Channel The Servo Expansion has 16 channels, pwm-exp allows you to program each individually or all at once. Programming each individually: Seen in the examples above: pwm-exp 12 97 pwm-exp -p 15 1.65 20 Programming all at once: Instead of specifying a channel number, the keyword all can be entered Setting all of the channels to a 50% duty cycle signal at the default 50Hz: pwm-exp all 50 Setting all of the channels to a 66% duty cycle at 123Hz: pwm-exp -f 123 all 66 Setting all of the channels to a 5% duty cycle at 50Hz using the period times pwm-exp -p all 1 20 Setting a Delay It is also possible to create PWM signals where the pulse is delayed by some time. The following image shows a 20% duty cycle signal with a 10% delay: So for the first 10% of the time, the signal is low, then it will be high for the next 20% of the time, and low for the remaining 70% of the time. Setting a delay with pwm-exp can only be done when setting the PWM signal using the duty cycle: pwm-exp channel duty cycle delay percentage Examples Generating a signal like the one above, 20% duty cycle with a 10% delay, on all channels: pwm-exp all 20 10 Generating a signal with 33% and a delay of 50% on channel 9: pwm-exp 9 33 50 Disabling the Oscillator The oscillator can be put into sleep mode, immediately disabling generation of all PWM signals. This might be useful in any application where you want to disable all connected servos or LEDs but keep the Omega powered on. For instance, we use the sleep mode to rest the servos on Oliver, our robotic arm, after he's been powered on for too long. To put the oscillator in sleep mode: pwm-exp -s To enable the oscillator again, there are a few methods: Run the initialization sequence to enable the oscillator and generate no pwm signals: pwm-exp -i Generate a PWM signal on one or all channels, the software will detect the oscillator is in sleep mode and will run the initialization sequence: pwm-exp channel duty or pwm-exp -p channel pulse width total period Using the Libraries The C library and Python module will allow you to develop your own programs that can control the Servo Expansion. For more information, see this guide .","title":"Using the Servo Expansion"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Servo-Expansion/#using-the-servo-expansion","text":"The Servo (PWM) Expansion allows you to generate up to 16 different Pulse Width Modulated (PWM) signals to control anything from Servo Motors, DC Motor speed, LED brightness, etc. [[ TOC ]]","title":"Using the Servo Expansion"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Servo-Expansion/#pwm-signals","text":"Pulse Width Modulated signals can be described by duty cycle or periods.","title":"PWM Signals"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Servo-Expansion/#duty-cycle","text":"Indicates what percentage of the time a signal is on or high voltage. So a PWM signal with a 25% duty cycle will be high for 25% of the time, and low 75% of the time. The duty cycle can be calculated as follows: $$DutyCycle = {\\frac{T_{on}}{T_{CompleteCycle}}}\\times100\\%$$","title":"Duty Cycle"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Servo-Expansion/#period","text":"Indicates the amount of time (usually in milliseconds) for each part of the cycle. The Time On, Ton in the diagram above is the time the signal is high. This is also known as pulse width. Similarly, Time Off, or Toff is the time the signal is low. The Complete Cycle time corresponds to the overall period of the PWM. Changing the period will also change the frequency of the PWM signal: $$Frequency = {\\frac{1}{Period}}$$","title":"Period"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Servo-Expansion/#the-hardware","text":"The Servo Expansion has 16 channels to generate PWM signals. The 16 channels are broken out so that servo-motors can be directly connected to the headers. It also comes with an onboard DC barrel jack connector that can be used to supply power to any connected servos. If this connector is not used, the Expansion Dock will provide power to the servos, however, it is not recommended to run more than one or two servos under light load with this method. Note that the Omega cannot be powered through this connector, it requires its power own power supply. The onboard chip has an oscillator that can generate PWM signals with a frequency in the range of 24 Hz to 1526 Hz. Most servos operate at 50 Hz, that is the default frequency.","title":"The Hardware"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Servo-Expansion/#using-the-command-line","text":"Make sure that your Omega has the latest firmware! We've developed a tool called pwm-exp that should make generating PWM signals a breeze. Also available are a C library and a Python module that allow you to develop your own programs to control the Servo Expansion.","title":"Using the Command Line"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Servo-Expansion/#command-usage","text":"For a print-out of the command's usage, run it with just a -h argument pwm-exp -h","title":"Command Usage"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Servo-Expansion/#initialization","text":"After every boot, the chip and oscillator on the Servo Expansion have to be initialized in order for the PWM signals to be generated correctly. The driver application will automatically detect if the oscillator is not running and will run the required sequence, so this command should only be run if you wish to initialize the oscillator but not generate any PWM signals. To perform the initialization, run the following command: pwm-exp -i This can be run by itself or in conjunction with any commands below.","title":"Initialization"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Servo-Expansion/#setting-the-pwm-based-on-duty-cycle","text":"The tool allows you to define the PWM signal to be generated by specifying which channel on the expansion to use and the duty cycle pwm-exp [options] channel duty cycle percentage A few examples: Generating a 10% duty cycle signal on channel 0 pwm-exp 0 10 Generating a 33.33% duty cycle with a signal frequency of 100 Hz on channel 1 pwm-exp -f 100 1 33.33 Performing the initialization sequence and then generating a 95% duty cycle signal on channel 2 pwm-exp -i 2 95 Note that the duty cycle must be between 0 and 100.","title":"Setting the PWM based on Duty Cycle"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Servo-Expansion/#setting-the-pwm-based-on-period","text":"The PWM signal can also be generated by specifying the pulse width and total period in milliseconds: pwm-exp -p channel pulse width total period Some examples: Generating a PWM signal that is high for 1ms and low for 19ms on channel 3. This makes the overall period 20ms, corresponding to a 50Hz frequency pwm-exp -p 3 1 20 Generating a PWM signal that is high for 1.65ms with an overall period of 5.4ms (corresponds to 185.19 Hz) on channel 4 pwm-exp -p 5 1.65 5.4","title":"Setting the PWM based on Period"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Servo-Expansion/#setting-the-pwm-signal-frequency","text":"When setting the signal based on duty cycle, the frequency can also be adjusted in each command by using the -f option. pwm-exp -f frequency channel duty An example Generating a 15% duty pwm signal at 220Hz on channel 5 pwm-exp -f 220 5 15 The default frequency is 50 Hz since most Servos operate on this frequency. If the desired frequency is different from the default, the frequency must be specified in each pwm-exp command, otherwise the expansion will reset to the default frequency. Also note that all channels run on the same frequency, it is not possible to generate PWM signals with different frequencies on the same Servo Expansion. When setting the signal based on period, the frequency is dependent on the total period: $$Frequency = {\\frac{1}{Period}}$$","title":"Setting the PWM signal frequency"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Servo-Expansion/#selecting-a-channel","text":"The Servo Expansion has 16 channels, pwm-exp allows you to program each individually or all at once. Programming each individually: Seen in the examples above: pwm-exp 12 97 pwm-exp -p 15 1.65 20 Programming all at once: Instead of specifying a channel number, the keyword all can be entered Setting all of the channels to a 50% duty cycle signal at the default 50Hz: pwm-exp all 50 Setting all of the channels to a 66% duty cycle at 123Hz: pwm-exp -f 123 all 66 Setting all of the channels to a 5% duty cycle at 50Hz using the period times pwm-exp -p all 1 20","title":"Selecting a Channel"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Servo-Expansion/#setting-a-delay","text":"It is also possible to create PWM signals where the pulse is delayed by some time. The following image shows a 20% duty cycle signal with a 10% delay: So for the first 10% of the time, the signal is low, then it will be high for the next 20% of the time, and low for the remaining 70% of the time. Setting a delay with pwm-exp can only be done when setting the PWM signal using the duty cycle: pwm-exp channel duty cycle delay percentage Examples Generating a signal like the one above, 20% duty cycle with a 10% delay, on all channels: pwm-exp all 20 10 Generating a signal with 33% and a delay of 50% on channel 9: pwm-exp 9 33 50","title":"Setting a Delay"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Servo-Expansion/#disabling-the-oscillator","text":"The oscillator can be put into sleep mode, immediately disabling generation of all PWM signals. This might be useful in any application where you want to disable all connected servos or LEDs but keep the Omega powered on. For instance, we use the sleep mode to rest the servos on Oliver, our robotic arm, after he's been powered on for too long. To put the oscillator in sleep mode: pwm-exp -s To enable the oscillator again, there are a few methods: Run the initialization sequence to enable the oscillator and generate no pwm signals: pwm-exp -i Generate a PWM signal on one or all channels, the software will detect the oscillator is in sleep mode and will run the initialization sequence: pwm-exp channel duty or pwm-exp -p channel pulse width total period","title":"Disabling the Oscillator"},{"location":"tutorials/OnionWiki/Tutorials/Expansions/Using-the-Servo-Expansion/#using-the-libraries","text":"The C library and Python module will allow you to develop your own programs that can control the Servo Expansion. For more information, see this guide .","title":"Using the Libraries"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/CLI_Part2/","text":"The Command Line Interface At this point we expect readers should have setup the Omega. If not the getting started guide can be found here . What is the Command Line Interface? The command line interface (CLI) is the user's access point into the operating system using a terminal. All user interaction is interpreted and executed by the OS through things called commands . A user enters a command into a terminal to make something happen. Additionally, commands come with options that tell the command to do specific things related to that command. Users can select options by typing the command followed by the option into the terminal. We will now explore some basic linux commands. Go ahead and connect your the Omega as in the getting started guide . You shoud see a screen like this: Some Basic Commands Let's go ahead try some basic commands: login This allows the user to login into the Linux as the root, which we will elaborate on further in this section/article. Type login into the command line and press enter. You will be prompted to enter the username and password , which are \"root\" and \"onioneer\" respectively by default. Also note that the password will be hidden while you type. After that you should see a screen like this: Congratulations! You have just executed your first command, you are now logged in as root. Information: If you are not used to work with the terminal, you might be happy to get some additional information what you can do within this \" Black-Box \". To get more info about what commands you can use, just type: busybox --help and you will get a overview of what busy-box is and all commands available over it. busybox --list if you prefer a list of all this commands. If you need more explanation about a certain command just use: busybox ifconfig --help Let's see the next command: date The date command will return the date and time. Type date on the terminal and press enter. You should see something like this. Date Screen: As you can see, the command returned the current date and time(may be incorrect, but can be fixed) on the terminal. echo For the programmers, this is analogous to a print function. For example, typing echo \"hello\" will display \"hello\" in the command line. Go ahead and type \" echo hello\" into the command line. You should see this. echo can also be used to pass an input into another command but we'll elaborate on that more in the redirection/piping article . We will now explore the filesystem on the Omega.","title":"CLI Part2"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/CLI_Part2/#the-command-line-interface","text":"At this point we expect readers should have setup the Omega. If not the getting started guide can be found here .","title":"The Command Line Interface"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/CLI_Part2/#what-is-the-command-line-interface","text":"The command line interface (CLI) is the user's access point into the operating system using a terminal. All user interaction is interpreted and executed by the OS through things called commands . A user enters a command into a terminal to make something happen. Additionally, commands come with options that tell the command to do specific things related to that command. Users can select options by typing the command followed by the option into the terminal. We will now explore some basic linux commands. Go ahead and connect your the Omega as in the getting started guide . You shoud see a screen like this:","title":"What is the Command Line Interface?"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/CLI_Part2/#some-basic-commands","text":"Let's go ahead try some basic commands: login This allows the user to login into the Linux as the root, which we will elaborate on further in this section/article. Type login into the command line and press enter. You will be prompted to enter the username and password , which are \"root\" and \"onioneer\" respectively by default. Also note that the password will be hidden while you type. After that you should see a screen like this: Congratulations! You have just executed your first command, you are now logged in as root. Information: If you are not used to work with the terminal, you might be happy to get some additional information what you can do within this \" Black-Box \". To get more info about what commands you can use, just type: busybox --help and you will get a overview of what busy-box is and all commands available over it. busybox --list if you prefer a list of all this commands. If you need more explanation about a certain command just use: busybox ifconfig --help Let's see the next command: date The date command will return the date and time. Type date on the terminal and press enter. You should see something like this. Date Screen: As you can see, the command returned the current date and time(may be incorrect, but can be fixed) on the terminal. echo For the programmers, this is analogous to a print function. For example, typing echo \"hello\" will display \"hello\" in the command line. Go ahead and type \" echo hello\" into the command line. You should see this. echo can also be used to pass an input into another command but we'll elaborate on that more in the redirection/piping article . We will now explore the filesystem on the Omega.","title":"Some Basic Commands"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/FileSystem_Part3/","text":"Exploring The OpenWRT File System All files in the Linux OS are organized into directories. For Windows users, this is akin to organizing files into \"folders\". An important point to note is that everything in Linux can be classified as a file or directory. By the end of this section, the reader will be able to: 1)navigate directories 2)create/delete directories and files How To Navigate In Linux Firstly, connect your Omega and open up the terminal. pwd command The first command we will learn is the pwd command, which stands for print working directory. Type pwd in the command line and hit enter. You should see ... The command line has returned \"/\", this means that we are at the top of the directory. If your command line has returned anything else, for example \"abc/def/ghi\" it means that you are in that directory. ls command The ls command list the contents of the directories. This may include, files, other directories(known as sub-directories), and programs. This is extremely useful command when looking for things in a directory. So let's see what's in our homeGETPROPERNAMEFORTHIS directory. Type \"ls\" into the command line and hit enter. You should see the sceen below As you can see, the command displayed the contents in our \"home\" folder. You may or may not see the items in color depending on how you connect to the Omega. Since we are using Putty, we see them in color. Below is a short list of what the colors mean: 1) blue = directory 2) green = executable or recognized data file 3) sky blue = linked file 4) yellow with black background = device 5) pink = graphic image file 6) red = archive file If your still interested in the color coding, it might be worth giving this a read. Additionally, you can use the ls command with the -l option for a more detailed list of the directory, we will use this in the Owners/Permissions Section . cd command cd (change directory) is the main command we will use to navigate directories. To change to a particular directory all we have to do is type cd into the terminal followed by the path, cd path Let's try change our directory to /usr/bin/ directory. The pwd command is used to show we have succesfully changed directories. The table below shows some of the different options you can use with the cd command that make life easier. Go ahead and play around with them until you are comfortable. | command [option] | Descripton | |----------|-------------| | cd | Using cd by itself will take you to the root directory. | | cd .. | This will take you up one one level to the parent directory. | | cd . | This will keep you in your curent directory.| | cd - | This will change you to your previous directory, convenient when working in two directories simultaneously.| How To Create/Delete Files And Directories mkdir command The mkdir allows us to create directories. This simplest way to use it is to type cd followed by the name of the new directory into the terminal and hit enter. This will create the new directory in your present working directory. mkdir newdirectoryname Let's create a new directory called \"NewDirectory\". Mkdir Screen: We have successfully created our a new directory called \"NewDirectory\" in our current working directory. You can also create multiple directories inside your current directory by entering this into your terminal: mkdir newdirectoryname1 newdirectoryname2 newdirectoryname3 Go ahead and try this on your own.Enter the ls command and you should be able to see all three newly created directories in your current directory. We can also use mkdir to create a directory in a directory other than the one we are currently in. Simply type mkdir followed by the path/newdirectoryname . In our example, we will create a new directory named \"NewDirectory\" inside the /tmp/usr/ sub-directory, from our current working directory. mkdir path/newdirectoryname In the screenshot above, we use the cd, pwd and ls functions to show the contents of the /tmp/usr/ subdirectory before and after executing the mkdir command from the / directory. We successfully created the \"NewDirectory\" in the /tmp/usr sub directory. You can also create multiple directories inside your another directory by entering this into your terminal: mkdir path/newdirectoryname1 path/newdirectoryname2 path/newdirectoryname3 Go ahead and try this on your own.Enter the ls command and you should be able to see all three newly created directories in your current directory. Now that we have created all these new directories, it seems fitting that we learn how to delete them. rmdir command The rmdir command allows us to delete a directory. It is used in an almost identical way to the mkdir command. For that reason, we will forgo most explanation and simply demonstrate an example of its usage in the screen shot below. Readers are encouraged to try on their own. rmdir DirectoryName or rmdir path/directoryname Now that we have learned how to create and delete directories, we will learn how to do the same for files. touch command The touch command is the easiest way to create a new file in linux. It is used in a similar fashion as mkdir and rmdir commands, including creating multiple files at once. touch newFileName or touch path/newFileName Refer to the screenshot below for an example of its usage. Using touch allows us to create a new file, but what if we want to create a new file and place content into it right away. For that, we will introduce the cat command. cat command cat is a powerful command that allows us to write as well as display contents to the file. Firstly to create a file type this into your command line and hit enter(make sure newfile does not already exist in that folder otherwise you will overwrite the file): cat newfile Now you will notice that you have not returned to the command line, instead the terminal is expecting more input. This is where you input the contents of the file. Once you are finished writing the contents of the file you can return to the command line using ctrl + d. Similarly you can do the same for files that are in other directories by using the command: cat path/newfile To display the contents of a file we can use the cat command as such: cat filename or cat path/filename In the example below we will create a file named HelloWorld.txt in a directory other than our current one, write Hello World! to the file and display its contents from the terminal. For users who would like to explore file editting in more detail, click here . Finally we will learn how to delete files. rm command The rm command is used to delete files in the same way rmdir deletes directories. rm filename or rm path/filename As our example we will delete the HelloWorld.txt we created above. This concludes our introduction of Linux Filesystem. At this point, the reader should feel comfortable with navigating in Linux. In the following articles/sections we will look at some more advanced topics such as redirection and shell scripting.","title":"FileSystem Part3"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/FileSystem_Part3/#exploring-the-openwrt-file-system","text":"All files in the Linux OS are organized into directories. For Windows users, this is akin to organizing files into \"folders\". An important point to note is that everything in Linux can be classified as a file or directory. By the end of this section, the reader will be able to: 1)navigate directories 2)create/delete directories and files","title":"Exploring The OpenWRT File System"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/FileSystem_Part3/#how-to-navigate-in-linux","text":"Firstly, connect your Omega and open up the terminal.","title":"How To Navigate In Linux"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/FileSystem_Part3/#pwd-command","text":"The first command we will learn is the pwd command, which stands for print working directory. Type pwd in the command line and hit enter. You should see ... The command line has returned \"/\", this means that we are at the top of the directory. If your command line has returned anything else, for example \"abc/def/ghi\" it means that you are in that directory.","title":"pwd command"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/FileSystem_Part3/#ls-command","text":"The ls command list the contents of the directories. This may include, files, other directories(known as sub-directories), and programs. This is extremely useful command when looking for things in a directory. So let's see what's in our homeGETPROPERNAMEFORTHIS directory. Type \"ls\" into the command line and hit enter. You should see the sceen below As you can see, the command displayed the contents in our \"home\" folder. You may or may not see the items in color depending on how you connect to the Omega. Since we are using Putty, we see them in color. Below is a short list of what the colors mean: 1) blue = directory 2) green = executable or recognized data file 3) sky blue = linked file 4) yellow with black background = device 5) pink = graphic image file 6) red = archive file If your still interested in the color coding, it might be worth giving this a read. Additionally, you can use the ls command with the -l option for a more detailed list of the directory, we will use this in the Owners/Permissions Section .","title":"ls command"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/FileSystem_Part3/#cd-command","text":"cd (change directory) is the main command we will use to navigate directories. To change to a particular directory all we have to do is type cd into the terminal followed by the path, cd path Let's try change our directory to /usr/bin/ directory. The pwd command is used to show we have succesfully changed directories. The table below shows some of the different options you can use with the cd command that make life easier. Go ahead and play around with them until you are comfortable. | command [option] | Descripton | |----------|-------------| | cd | Using cd by itself will take you to the root directory. | | cd .. | This will take you up one one level to the parent directory. | | cd . | This will keep you in your curent directory.| | cd - | This will change you to your previous directory, convenient when working in two directories simultaneously.|","title":"cd command"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/FileSystem_Part3/#how-to-createdelete-files-and-directories","text":"","title":"How To Create/Delete Files And Directories"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/FileSystem_Part3/#mkdir-command","text":"The mkdir allows us to create directories. This simplest way to use it is to type cd followed by the name of the new directory into the terminal and hit enter. This will create the new directory in your present working directory. mkdir newdirectoryname Let's create a new directory called \"NewDirectory\". Mkdir Screen: We have successfully created our a new directory called \"NewDirectory\" in our current working directory. You can also create multiple directories inside your current directory by entering this into your terminal: mkdir newdirectoryname1 newdirectoryname2 newdirectoryname3 Go ahead and try this on your own.Enter the ls command and you should be able to see all three newly created directories in your current directory. We can also use mkdir to create a directory in a directory other than the one we are currently in. Simply type mkdir followed by the path/newdirectoryname . In our example, we will create a new directory named \"NewDirectory\" inside the /tmp/usr/ sub-directory, from our current working directory. mkdir path/newdirectoryname In the screenshot above, we use the cd, pwd and ls functions to show the contents of the /tmp/usr/ subdirectory before and after executing the mkdir command from the / directory. We successfully created the \"NewDirectory\" in the /tmp/usr sub directory. You can also create multiple directories inside your another directory by entering this into your terminal: mkdir path/newdirectoryname1 path/newdirectoryname2 path/newdirectoryname3 Go ahead and try this on your own.Enter the ls command and you should be able to see all three newly created directories in your current directory. Now that we have created all these new directories, it seems fitting that we learn how to delete them.","title":"mkdir command"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/FileSystem_Part3/#rmdir-command","text":"The rmdir command allows us to delete a directory. It is used in an almost identical way to the mkdir command. For that reason, we will forgo most explanation and simply demonstrate an example of its usage in the screen shot below. Readers are encouraged to try on their own. rmdir DirectoryName or rmdir path/directoryname Now that we have learned how to create and delete directories, we will learn how to do the same for files.","title":"rmdir command"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/FileSystem_Part3/#touch-command","text":"The touch command is the easiest way to create a new file in linux. It is used in a similar fashion as mkdir and rmdir commands, including creating multiple files at once. touch newFileName or touch path/newFileName Refer to the screenshot below for an example of its usage. Using touch allows us to create a new file, but what if we want to create a new file and place content into it right away. For that, we will introduce the cat command.","title":"touch command"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/FileSystem_Part3/#cat-command","text":"cat is a powerful command that allows us to write as well as display contents to the file. Firstly to create a file type this into your command line and hit enter(make sure newfile does not already exist in that folder otherwise you will overwrite the file): cat newfile Now you will notice that you have not returned to the command line, instead the terminal is expecting more input. This is where you input the contents of the file. Once you are finished writing the contents of the file you can return to the command line using ctrl + d. Similarly you can do the same for files that are in other directories by using the command: cat path/newfile To display the contents of a file we can use the cat command as such: cat filename or cat path/filename In the example below we will create a file named HelloWorld.txt in a directory other than our current one, write Hello World! to the file and display its contents from the terminal. For users who would like to explore file editting in more detail, click here . Finally we will learn how to delete files.","title":"cat command"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/FileSystem_Part3/#rm-command","text":"The rm command is used to delete files in the same way rmdir deletes directories. rm filename or rm path/filename As our example we will delete the HelloWorld.txt we created above. This concludes our introduction of Linux Filesystem. At this point, the reader should feel comfortable with navigating in Linux. In the following articles/sections we will look at some more advanced topics such as redirection and shell scripting.","title":"rm command"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/Linux_Intro_Part1/","text":"Linux for OMEGA Beginners This tutorial is intended for new Omega users who are new to Linux. By the end of this tutorial, users should be comfortable with some of the Omega's built in functionality as well as getting started with their own projects. Introduction to Linux What Is Linux? In short, Linux is an operating system (OS). Like its counterparts, Windows and OS X, it provides the software bridge between applications and hardware processes. As an example, the OS will relay instructions from an application to the computer's processor and then pass the results back to the application. Unlike the previously mentioned OSs, Linux is mostly Open Source. This means that no one part is responsible for the development or support, rather development is collaborative. Refer to this article for a more extensive read on Linux. Linux comes in many distributions/distros (versions) each tailored to serve particular applications. What Distribution Does The Omega Run? The OMEGA runs OpenWRT. OpenWRT is the most distribution most catered towards embedded applications and can typically be found running on routers. OpenWRT is robust; in that supports many packages and architecture which makes it ideal for embedded devices. In the interest of being memory efficient, OpenWRT doesn't come with all of the packages found on a larger distribution such as Ubuntu and available packages may have functionality stripped down. For now we will move onto using OpenWRT on the Omega, but we do encourage users to further peruse the OpenWRT wiki which can be found here . Next, we will move onto introducing users to the command line interface.","title":"Linux Intro Part1"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/Linux_Intro_Part1/#linux-for-omega-beginners","text":"This tutorial is intended for new Omega users who are new to Linux. By the end of this tutorial, users should be comfortable with some of the Omega's built in functionality as well as getting started with their own projects.","title":"Linux for OMEGA Beginners"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/Linux_Intro_Part1/#introduction-to-linux","text":"","title":"Introduction to Linux"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/Linux_Intro_Part1/#what-is-linux","text":"In short, Linux is an operating system (OS). Like its counterparts, Windows and OS X, it provides the software bridge between applications and hardware processes. As an example, the OS will relay instructions from an application to the computer's processor and then pass the results back to the application. Unlike the previously mentioned OSs, Linux is mostly Open Source. This means that no one part is responsible for the development or support, rather development is collaborative. Refer to this article for a more extensive read on Linux. Linux comes in many distributions/distros (versions) each tailored to serve particular applications.","title":"What Is Linux?"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/Linux_Intro_Part1/#what-distribution-does-the-omega-run","text":"The OMEGA runs OpenWRT. OpenWRT is the most distribution most catered towards embedded applications and can typically be found running on routers. OpenWRT is robust; in that supports many packages and architecture which makes it ideal for embedded devices. In the interest of being memory efficient, OpenWRT doesn't come with all of the packages found on a larger distribution such as Ubuntu and available packages may have functionality stripped down. For now we will move onto using OpenWRT on the Omega, but we do encourage users to further peruse the OpenWRT wiki which can be found here . Next, we will move onto introducing users to the command line interface.","title":"What Distribution Does The Omega Run?"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/Permissions_Part6/","text":"Ownership and Permissions In all linux systems there is a hierarchy of users, with the root, also known as super user, sitting at the top. Each of the users have an ownership over their own files and have the right to read, write and execute them as they please. Users do not have the same permissions to other users files. The exception to this is the super user or root. On the Omega, we will not concern ourselves with the user system since we are always logged in as root. To further explain the concept, let's revisit the last tutorial on scripting. In our last tutorial we executed the shell script by using the : sh LogGen.sh Now that command worked by let's say we wanted to drop the sh and run the command: ./LogGen We will receive this message from the command line /bin/ash: ./LogGen.sh: Permission denied So lets go ahead and look at the permission on the shell script. To do that run the ls command with the -l option. This will give us a detailed description of the files/subdirectories in our current directory. ls -l You should see something like this... For now all we are concerned with is the column containing the stuff that looks like this drwxr-xr-x . If you are interested in a more detailed description of what all the descriptions mean refer to this article . So lets take a look at our permission for the LogGen.sh file. Yours should look like this. -rw-r--r-- The first \"-\" indicates that it is a file, if it were a directory we could make we would find a \"d\" in its place. The next three characters indicate whether the super user has read,write,executable permission. Similarly the next 6 characters are similar indicators for the user and the usergroup, with \"rwx\" indicating full permission and \"---\" indicating no permission. chmod command Since we are the root user we can give ourselves full permission to the file. So let's go ahead and change the permissions. To do this we will need to employ the chmod command. At this point, quickly read this article describing how to use the command. To give ourselves full permission enter this command: chmod 777 LogGen.sh To check if the permission has changed enter: ls -l You should see something like this below. We have sucessfully given ourselves full permission. So let's try to to run the LogGen.sh file without sh. ./LogGen","title":"Permissions Part6"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/Permissions_Part6/#ownership-and-permissions","text":"In all linux systems there is a hierarchy of users, with the root, also known as super user, sitting at the top. Each of the users have an ownership over their own files and have the right to read, write and execute them as they please. Users do not have the same permissions to other users files. The exception to this is the super user or root. On the Omega, we will not concern ourselves with the user system since we are always logged in as root. To further explain the concept, let's revisit the last tutorial on scripting. In our last tutorial we executed the shell script by using the : sh LogGen.sh Now that command worked by let's say we wanted to drop the sh and run the command: ./LogGen We will receive this message from the command line /bin/ash: ./LogGen.sh: Permission denied So lets go ahead and look at the permission on the shell script. To do that run the ls command with the -l option. This will give us a detailed description of the files/subdirectories in our current directory. ls -l You should see something like this... For now all we are concerned with is the column containing the stuff that looks like this drwxr-xr-x . If you are interested in a more detailed description of what all the descriptions mean refer to this article . So lets take a look at our permission for the LogGen.sh file. Yours should look like this. -rw-r--r-- The first \"-\" indicates that it is a file, if it were a directory we could make we would find a \"d\" in its place. The next three characters indicate whether the super user has read,write,executable permission. Similarly the next 6 characters are similar indicators for the user and the usergroup, with \"rwx\" indicating full permission and \"---\" indicating no permission.","title":"Ownership and Permissions"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/Permissions_Part6/#chmod-command","text":"Since we are the root user we can give ourselves full permission to the file. So let's go ahead and change the permissions. To do this we will need to employ the chmod command. At this point, quickly read this article describing how to use the command. To give ourselves full permission enter this command: chmod 777 LogGen.sh To check if the permission has changed enter: ls -l You should see something like this below. We have sucessfully given ourselves full permission. So let's try to to run the LogGen.sh file without sh. ./LogGen","title":"chmod command"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/Redirection_Part4/","text":"Redirection Using the the redirection tools we are able to create dynamic commands. Input/Output Redirection We can use redirection to send the output of one command to files. We have already seen an example of this in the previous tutorial, when we used the cat command to create a new file. When we executed the command: cat filename After the file was created, we were prompted by the terminal to enter something by the cat command.The output of cat was redirected as input into the file's contents. This is known as output redirection. We can also use the echo command in a similar manner. Follow the example below. We can redirect the output commands so it does not overwrite the contents of the file but rather appends to it. For that we use the pattern . Say we wanted to append the date and time to this file we created in the previous example we could use a command like this. sort command Now lets try some input redirection, which allows us to pass files as input to commands. For that we will introduce a new command, sort , which sorts the content of a file in alphabetical order by default. sort filename In the next example we will create a new file with randomly assorted letters, called alpha. We will use the command: sort alpha.txt This will display the letters of the file in alphabetical order. Now let's put both types of redirection in a practical example. In the next screen we will use output of the past screen as input into a new file containing the ordered alphabet. To do this we use the command. sort alpha.txt ordered.txt As you can see the ordered.txt file stores the contents of alpha.txt in alphabetical order. Now we will move onto Piping. Piping As we learn more commands Pipes will allow us to create dynamic commands by passing the output of one command into the input of another command. Use of a pipe is indicated through the symbol | To demonstrate the power of piping we will create a files called \"names.txt\" which will have a different name on each line. We will then execute the following command. cat names.txt | grep a The output of cat is passed as input to the input of the grep command which searches the output for all lines containing the character \"a\" and then do the same for all lines with \"j\". The end result will display all lines with \"a\" and \"j\" in a line . We have demonstrated this in the screenshot below. We recommend that you get comfortable with using pipes as they are essential in accomplishing more complicated tasks. The next topic we will introduce is shell scripting.","title":"Redirection Part4"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/Redirection_Part4/#redirection","text":"Using the the redirection tools we are able to create dynamic commands.","title":"Redirection"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/Redirection_Part4/#inputoutput-redirection","text":"We can use redirection to send the output of one command to files. We have already seen an example of this in the previous tutorial, when we used the cat command to create a new file. When we executed the command: cat filename After the file was created, we were prompted by the terminal to enter something by the cat command.The output of cat was redirected as input into the file's contents. This is known as output redirection. We can also use the echo command in a similar manner. Follow the example below. We can redirect the output commands so it does not overwrite the contents of the file but rather appends to it. For that we use the pattern . Say we wanted to append the date and time to this file we created in the previous example we could use a command like this.","title":"Input/Output Redirection"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/Redirection_Part4/#sort-command","text":"Now lets try some input redirection, which allows us to pass files as input to commands. For that we will introduce a new command, sort , which sorts the content of a file in alphabetical order by default. sort filename In the next example we will create a new file with randomly assorted letters, called alpha. We will use the command: sort alpha.txt This will display the letters of the file in alphabetical order. Now let's put both types of redirection in a practical example. In the next screen we will use output of the past screen as input into a new file containing the ordered alphabet. To do this we use the command. sort alpha.txt ordered.txt As you can see the ordered.txt file stores the contents of alpha.txt in alphabetical order. Now we will move onto Piping.","title":"sort command"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/Redirection_Part4/#piping","text":"As we learn more commands Pipes will allow us to create dynamic commands by passing the output of one command into the input of another command. Use of a pipe is indicated through the symbol | To demonstrate the power of piping we will create a files called \"names.txt\" which will have a different name on each line. We will then execute the following command. cat names.txt | grep a The output of cat is passed as input to the input of the grep command which searches the output for all lines containing the character \"a\" and then do the same for all lines with \"j\". The end result will display all lines with \"a\" and \"j\" in a line . We have demonstrated this in the screenshot below. We recommend that you get comfortable with using pipes as they are essential in accomplishing more complicated tasks. The next topic we will introduce is shell scripting.","title":"Piping"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/ShellScript_Part5/","text":"Shell Scripting A shell script in simply a script that excutes a series of commands written in the script at once from the terminal. This is equivalent to any programming language where you can execute a script from a console. Linux can come with two types of shells, C and Bourne Shell. Since we are using OpenWRT we are only concerned with the latter, which we invoke when we type sh into the command line. At this point, we will write a simple script and explain what will happen at each step during execution. This script uses some general programming techniques. So if you are new to programming, we recommend reading this for an in depth explanation. # Anything after the hash symbol is considered a comment. # This script will create log of the time the script that was executed # and the name of the person who executed it. The log will be stored in # a file called log.txt, found in the \"/\" directory. The script will # also display the contents of the log.txt file on the terminal. #The line below tells Linux which shell to use for execution #!/bin/bash # Create NAME variable with value name NAME=name # Create DATE variable with value date DATE=date #Prompt User to input their name echo -n \"Please Enter Your Name >\" #Store the value entered by the user into the variable username read username #Store the value of our username in NAME variable NAME=$username #The DATE stores the value returned by the date command. in form $(command) DATE=$(date) #Append the NAME and DATE values to the log.txt file echo $NAME $DATE >> /log.txt #Display the contents of the log.txt file cat /log.txt Copy the script to the \"/\" folder in your Omega and save it as LogGen.sh. Run the script by entering this script into terminal and see what happens. sh LogGen.sh Run it a few times entering different names and see what happens in the output. It should look something like this. Our last topic of the Linux Introduction Series, will introduce the concept of users, ownerships and permission in Linux Systems.","title":"ShellScript Part5"},{"location":"tutorials/OnionWiki/Tutorials/LinuxBasics/ShellScript_Part5/#shell-scripting","text":"A shell script in simply a script that excutes a series of commands written in the script at once from the terminal. This is equivalent to any programming language where you can execute a script from a console. Linux can come with two types of shells, C and Bourne Shell. Since we are using OpenWRT we are only concerned with the latter, which we invoke when we type sh into the command line. At this point, we will write a simple script and explain what will happen at each step during execution. This script uses some general programming techniques. So if you are new to programming, we recommend reading this for an in depth explanation. # Anything after the hash symbol is considered a comment. # This script will create log of the time the script that was executed # and the name of the person who executed it. The log will be stored in # a file called log.txt, found in the \"/\" directory. The script will # also display the contents of the log.txt file on the terminal. #The line below tells Linux which shell to use for execution #!/bin/bash # Create NAME variable with value name NAME=name # Create DATE variable with value date DATE=date #Prompt User to input their name echo -n \"Please Enter Your Name >\" #Store the value entered by the user into the variable username read username #Store the value of our username in NAME variable NAME=$username #The DATE stores the value returned by the date command. in form $(command) DATE=$(date) #Append the NAME and DATE values to the log.txt file echo $NAME $DATE >> /log.txt #Display the contents of the log.txt file cat /log.txt Copy the script to the \"/\" folder in your Omega and save it as LogGen.sh. Run the script by entering this script into terminal and see what happens. sh LogGen.sh Run it a few times entering different names and see what happens in the output. It should look something like this. Our last topic of the Linux Introduction Series, will introduce the concept of users, ownerships and permission in Linux Systems.","title":"Shell Scripting"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/OPKG_Tutorial/opkg-tutorial/","text":"OPKG Tutorial We highly recommend glancing over this tutorial as it will likely help resolving any problems you may have regarding installing new applications. What is OPKG? opkg is the packge installer and manager used by OpenWRT. Its purpose is akin to the windows installer wizard, the apt-get installer on Ubuntu. Opkg comes connected to a few repositories including our own so that packages can be easily downloaded and installed to your Omega. To see which repositories are connected enter the following into the command line. cat /etc/opkg/distfeeds.conf OPKG Basics We will look at a few of the more important commands and options when using opkg. Firstly, lets look at opkg update. Make sure you run this command before trying to install any packages. opkg update This will update opkg list of available packages. If you try to install a package without running opkg update first, opkg may not be able to find the package you are looking for. Next to install a particular package, use the following command. opkg install packagename This will search through the list of available packages. If you would like, you can point the opkg installer to install from a particular repository or from a local directory. opkg install urltopackage opkg install pathtopackage Sometimes it is also useful to see which packages we have already installed. opkg list-installed You can also upgrade a package or a group of packages using the following command. opkg upgrade packages As per the OpenWRT wiki, this is not recommended . For two main reasons: 1) It is far more inefficient at allocating memory than the default installation process. 2)If you are upgrading a kernel package and there are compatibility issues, your device may break. Therefore, Do Not Upgrade Kernel Packages . Instead of upgrading, it is recommended to reflash OpenWRT with the newer firmware image. Lastly, to remove a package, you can use the following command: opkg remove packages","title":"Opkg tutorial"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/OPKG_Tutorial/opkg-tutorial/#opkg-tutorial","text":"We highly recommend glancing over this tutorial as it will likely help resolving any problems you may have regarding installing new applications.","title":"OPKG Tutorial"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/OPKG_Tutorial/opkg-tutorial/#what-is-opkg","text":"opkg is the packge installer and manager used by OpenWRT. Its purpose is akin to the windows installer wizard, the apt-get installer on Ubuntu. Opkg comes connected to a few repositories including our own so that packages can be easily downloaded and installed to your Omega. To see which repositories are connected enter the following into the command line. cat /etc/opkg/distfeeds.conf","title":"What is OPKG?"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/OPKG_Tutorial/opkg-tutorial/#opkg-basics","text":"We will look at a few of the more important commands and options when using opkg. Firstly, lets look at opkg update. Make sure you run this command before trying to install any packages. opkg update This will update opkg list of available packages. If you try to install a package without running opkg update first, opkg may not be able to find the package you are looking for. Next to install a particular package, use the following command. opkg install packagename This will search through the list of available packages. If you would like, you can point the opkg installer to install from a particular repository or from a local directory. opkg install urltopackage opkg install pathtopackage Sometimes it is also useful to see which packages we have already installed. opkg list-installed You can also upgrade a package or a group of packages using the following command. opkg upgrade packages As per the OpenWRT wiki, this is not recommended . For two main reasons: 1) It is far more inefficient at allocating memory than the default installation process. 2)If you are upgrading a kernel package and there are compatibility issues, your device may break. Therefore, Do Not Upgrade Kernel Packages . Instead of upgrading, it is recommended to reflash OpenWRT with the newer firmware image. Lastly, to remove a package, you can use the following command: opkg remove packages","title":"OPKG Basics"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/UBUS_Tutorial/Part1_Ubus_Intro/","text":"Introduction to UBUS This is the first part of a mini series dedicated to introducing users of the Omega to one of the most powerful tools on OpenWRT, the ubus . We strongly recommend users to go through our Linux Basics tutorial, found here , prior to proceeding with this tutorial series. Furthermore, users should be comfortable with shell scripting to get the most out of this tutorial. This series may seem challenging, however, completing it is paramount to realizing the full potential of the Omega and your projects. Without further ado. What Is Ubus? The ubus is an interface that allows users to access and use services from the same place. Some services are built-in to OpenWRT and other services are executable files that we have created ourselves. Example The best way to understand ubus is to study some examples of how we use. To start, let's take a look at how to use the ubus. Enter this into your command line. ubus The command has given us some options, that we can pass in. Let's try using the list option to see what services are available to us. ubus list You should have a screen that looks like this. Fear not if you have a slightly different list, we may have updated somethings. Let's try using the onion service, to do some function. But first we have to what we have functions we have available and how to access them. In general, we can do this by entering this. ubus list -v servicename Since, we are interested in what the onion has to offer enter this into the command line. ubus list -v onion You should see a screen like this. Now lets try to get the omega to blink the LED on the Omega using the heartbeat option. Similar to how we did it in this tutorial . To do this we have to use the call option provided by ubus to access the onion service. We then select the function we want and pass the additional parameters using a json format. To re-iterate: ubus call service function '{ JSON parameters }' Specifically, enter this into the command line. ubus call onion omega-led '{\"set_trigger\":\"heartbeat\"}' And see what happen's to the Omega's LED. It should mimic a heartbeat. Now that we have used ubus let's take a more intricate look a what happened behind the scenes. The Ubus Structure The figure below is a basic outline of how ubus works. In the previous example we connected to ubus via the ubus command line interface, ubus_cli on the figure. The ubus allowed us connect to onion service through the rcpd, which we will discuss in depth later on. Once the onion service executed the requested function, the ouput was relayed back to the ubus_cli via the ubus. The ubus gives us a very powerful tool for accessing Omega's services both locally and remotely. For example, when we use the Omega as a server, we can use the httpd-mod-ubus service to connect to the Omega's ubus locally. Also if we are using the Omega's cloud, we can connect to the Omega's ubus through the onion device client service.","title":"Part1 Ubus Intro"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/UBUS_Tutorial/Part1_Ubus_Intro/#introduction-to-ubus","text":"This is the first part of a mini series dedicated to introducing users of the Omega to one of the most powerful tools on OpenWRT, the ubus . We strongly recommend users to go through our Linux Basics tutorial, found here , prior to proceeding with this tutorial series. Furthermore, users should be comfortable with shell scripting to get the most out of this tutorial. This series may seem challenging, however, completing it is paramount to realizing the full potential of the Omega and your projects. Without further ado.","title":"Introduction to UBUS"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/UBUS_Tutorial/Part1_Ubus_Intro/#what-is-ubus","text":"The ubus is an interface that allows users to access and use services from the same place. Some services are built-in to OpenWRT and other services are executable files that we have created ourselves.","title":"What Is Ubus?"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/UBUS_Tutorial/Part1_Ubus_Intro/#example","text":"The best way to understand ubus is to study some examples of how we use. To start, let's take a look at how to use the ubus. Enter this into your command line. ubus The command has given us some options, that we can pass in. Let's try using the list option to see what services are available to us. ubus list You should have a screen that looks like this. Fear not if you have a slightly different list, we may have updated somethings. Let's try using the onion service, to do some function. But first we have to what we have functions we have available and how to access them. In general, we can do this by entering this. ubus list -v servicename Since, we are interested in what the onion has to offer enter this into the command line. ubus list -v onion You should see a screen like this. Now lets try to get the omega to blink the LED on the Omega using the heartbeat option. Similar to how we did it in this tutorial . To do this we have to use the call option provided by ubus to access the onion service. We then select the function we want and pass the additional parameters using a json format. To re-iterate: ubus call service function '{ JSON parameters }' Specifically, enter this into the command line. ubus call onion omega-led '{\"set_trigger\":\"heartbeat\"}' And see what happen's to the Omega's LED. It should mimic a heartbeat. Now that we have used ubus let's take a more intricate look a what happened behind the scenes.","title":"Example"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/UBUS_Tutorial/Part1_Ubus_Intro/#the-ubus-structure","text":"The figure below is a basic outline of how ubus works. In the previous example we connected to ubus via the ubus command line interface, ubus_cli on the figure. The ubus allowed us connect to onion service through the rcpd, which we will discuss in depth later on. Once the onion service executed the requested function, the ouput was relayed back to the ubus_cli via the ubus. The ubus gives us a very powerful tool for accessing Omega's services both locally and remotely. For example, when we use the Omega as a server, we can use the httpd-mod-ubus service to connect to the Omega's ubus locally. Also if we are using the Omega's cloud, we can connect to the Omega's ubus through the onion device client service.","title":"The Ubus Structure"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/UBUS_Tutorial/Part2_RPCD/","text":"RPCD Tutorial Part 1 Recall in the last Ubus tutorial, we mentioned that some services available on the Ubus are native to OpenWRT and some have been added our onioneers. Well let's take a look again at what we mean. Enter the ubus list command into your command line. ubus list You will see a list of services. But how do we know which ones are custom onion services? Enter the rpcd plugin. Let's take a look back at the figure we introduced in the last tutorial. As the name and figure suggests we are using the rpcd to literally plugin our service into the ubus. This is how are onioneers add service to the ubus and how you can add your custom services to the ubus. The rpcd plugin allows users to expose their custom services in the form of executable shell scripts over the ubus. To see what shell scripts are using rpcd, navigate to the /usr/libexec/rpcd/ directory and list the contents. cd /usr/libexec/rpcd/ ls You can check for yourself, but the same services are available on the ubus. We can use the cat command to open the shell script and see what is going on behind the scenes everytime we call a ubus service. In the next tutorial, we will actually show you how to make your own service and attach it to the ubus.","title":"Part2 RPCD"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/UBUS_Tutorial/Part2_RPCD/#rpcd-tutorial-part-1","text":"Recall in the last Ubus tutorial, we mentioned that some services available on the Ubus are native to OpenWRT and some have been added our onioneers. Well let's take a look again at what we mean. Enter the ubus list command into your command line. ubus list You will see a list of services. But how do we know which ones are custom onion services? Enter the rpcd plugin. Let's take a look back at the figure we introduced in the last tutorial. As the name and figure suggests we are using the rpcd to literally plugin our service into the ubus. This is how are onioneers add service to the ubus and how you can add your custom services to the ubus. The rpcd plugin allows users to expose their custom services in the form of executable shell scripts over the ubus. To see what shell scripts are using rpcd, navigate to the /usr/libexec/rpcd/ directory and list the contents. cd /usr/libexec/rpcd/ ls You can check for yourself, but the same services are available on the ubus. We can use the cat command to open the shell script and see what is going on behind the scenes everytime we call a ubus service. In the next tutorial, we will actually show you how to make your own service and attach it to the ubus.","title":"RPCD Tutorial Part 1"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/UBUS_Tutorial/Part3_RPCD/","text":"RPCD Tutorial Part 2 In this tutorial we will show you how to make your own an executable shell script for the ubus. We also recommend reading the OpenWRT wiki on the topic aswell, which can be found here . Additionally, users should also be familiar with JSON formatting as this is the format used for passing information into UBUS services. Refer to this link for a brief overview of json formatting. UBUS Shell Scripts There are two distinguishing features that seperate ubus shell scripts from regular shell scripts, which we will become evident in our example. 1) I/O All input/output of ubus shell scripts are in the form of JSON format. This format provides compatibility between all ubus services. JSON is also a very common format for transfering data across the web, so make sure you get comfortable with using it. A typical json object/ file looks something like this. '{\"argument1\":\"value1\", \"argument2\":\"value2\",\"argument3\":\"value3\"}' 2) List and Call functions. A ubus shell script must also support call and list functions to be attached to the ubus. Remember from the first ubus tutorial , that we used the ubus list function to show us how to use the service and we used the ubus call to actually access the service. Both of these functionalities are described in the shell script. Example In our example we will create a simple ubus executable shell script that will compute the addition and subtraction of two integer numbers and return them back in the form of a json. So to start lets navigate to our rpcd directory. cd /usr/libexec/rpcd Now create a file called Math using cat cat > Math And paste the following code #!/bin/sh . /usr/lib/onion/lib.sh #includes the functions that we need to parse JSON files case \"$1\" in #The list function describes how to use the ubus functions. list) echo '{ \"addition\": { \"argument1\": \"value\" , \"argument2\":\"value\"}, \"subtraction\": { \"argument1\": \"value\", \"argument2\":\"value\"} }' ;; #The call function describes the methods that are available call) case \"$2\" in # The addition method addition) # read the argument read input # Load the argument into the json for retrieval json_load \"$input\" #Using the function below, the value of #\"argument1\" is stored in variable val1 json_get_var val1 \"argument1\" json_get_var val2 \"argument2\" #The sum of the two are computed ans=$(($val1+$val2)) #The \\ is used so that we can substitute #properly echo \"{ \\\"The ans is\\\" :\\\"$ans\\\"}\" ;; subtraction) # read the argument read input # Load the argument into the json for json_load \"$input\" #Using the function below, the value of #\"argument1\" is stored in variable val1 json_get_var val1 \"argument1\" json_get_var val2 \"argument2\" #The difference of the two are computed ans=$(($val1-$val2)) #The \\ is used so that we can substitute #properly echo \"{ \\\"The ans is\\\" :\\\"$ans\\\"}\" ;; esac ;; esac Once you have pasted the code, press the CTRL D and save the file. Once your done that make the file executable by changing the permission on the file enter this into your command line. chmod +x Math After that you'll need to restart the rcpd plugin so that it recognizes the new service we have just attached. To do that enter this into your command line: /etc/init.d/rpcd restart This should attach your service to the ubus. Now lets check to see if our service is listed. To check if your service is available run ubus list on the command line. As you can see, we have Math listed in our ubus service. If not, try running /etc/init.d/rpcd stop and then /etc/init.d/rpcd start , or restarting your Omega. Let's try using it now, go ahead and enter the following commands and see what happens: ubus list -v Math ubus call Math addition '{\"argument1\":\"4\",\"argument2\":\"6\"}' ubus call Math subtraction '{\"argument1\":\"4\",\"argument2\":\"6\"}' That wraps up our mini-series on Ubus.","title":"Part3 RPCD"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/UBUS_Tutorial/Part3_RPCD/#rpcd-tutorial-part-2","text":"In this tutorial we will show you how to make your own an executable shell script for the ubus. We also recommend reading the OpenWRT wiki on the topic aswell, which can be found here . Additionally, users should also be familiar with JSON formatting as this is the format used for passing information into UBUS services. Refer to this link for a brief overview of json formatting.","title":"RPCD Tutorial Part 2"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/UBUS_Tutorial/Part3_RPCD/#ubus-shell-scripts","text":"There are two distinguishing features that seperate ubus shell scripts from regular shell scripts, which we will become evident in our example. 1) I/O All input/output of ubus shell scripts are in the form of JSON format. This format provides compatibility between all ubus services. JSON is also a very common format for transfering data across the web, so make sure you get comfortable with using it. A typical json object/ file looks something like this. '{\"argument1\":\"value1\", \"argument2\":\"value2\",\"argument3\":\"value3\"}' 2) List and Call functions. A ubus shell script must also support call and list functions to be attached to the ubus. Remember from the first ubus tutorial , that we used the ubus list function to show us how to use the service and we used the ubus call to actually access the service. Both of these functionalities are described in the shell script.","title":"UBUS Shell Scripts"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/UBUS_Tutorial/Part3_RPCD/#example","text":"In our example we will create a simple ubus executable shell script that will compute the addition and subtraction of two integer numbers and return them back in the form of a json. So to start lets navigate to our rpcd directory. cd /usr/libexec/rpcd Now create a file called Math using cat cat > Math And paste the following code #!/bin/sh . /usr/lib/onion/lib.sh #includes the functions that we need to parse JSON files case \"$1\" in #The list function describes how to use the ubus functions. list) echo '{ \"addition\": { \"argument1\": \"value\" , \"argument2\":\"value\"}, \"subtraction\": { \"argument1\": \"value\", \"argument2\":\"value\"} }' ;; #The call function describes the methods that are available call) case \"$2\" in # The addition method addition) # read the argument read input # Load the argument into the json for retrieval json_load \"$input\" #Using the function below, the value of #\"argument1\" is stored in variable val1 json_get_var val1 \"argument1\" json_get_var val2 \"argument2\" #The sum of the two are computed ans=$(($val1+$val2)) #The \\ is used so that we can substitute #properly echo \"{ \\\"The ans is\\\" :\\\"$ans\\\"}\" ;; subtraction) # read the argument read input # Load the argument into the json for json_load \"$input\" #Using the function below, the value of #\"argument1\" is stored in variable val1 json_get_var val1 \"argument1\" json_get_var val2 \"argument2\" #The difference of the two are computed ans=$(($val1-$val2)) #The \\ is used so that we can substitute #properly echo \"{ \\\"The ans is\\\" :\\\"$ans\\\"}\" ;; esac ;; esac Once you have pasted the code, press the CTRL D and save the file. Once your done that make the file executable by changing the permission on the file enter this into your command line. chmod +x Math After that you'll need to restart the rcpd plugin so that it recognizes the new service we have just attached. To do that enter this into your command line: /etc/init.d/rpcd restart This should attach your service to the ubus. Now lets check to see if our service is listed. To check if your service is available run ubus list on the command line. As you can see, we have Math listed in our ubus service. If not, try running /etc/init.d/rpcd stop and then /etc/init.d/rpcd start , or restarting your Omega. Let's try using it now, go ahead and enter the following commands and see what happens: ubus list -v Math ubus call Math addition '{\"argument1\":\"4\",\"argument2\":\"6\"}' ubus call Math subtraction '{\"argument1\":\"4\",\"argument2\":\"6\"}' That wraps up our mini-series on Ubus.","title":"Example"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/UCI_Tutorial/uci_introduction/","text":"Introduction to UCI Short for Unified Configuration Interface , uci is OpenWRT centralized configuration interface. To modify congifuration files we can either navigate to the specific file usually located in the \"/etc/config\" folder. Alternatively, you can use the uci command line to utility to achieve the same thing. Uci is particular handy when it comes to making modifcations to config files from within a shell script without changing any other parts of the file. For further reading, consult OpenWRT's documentation on the subject which can be found here . In keeping with our prior tutorials, let's learn about uci through an example. In this tutorial we will secure the Omega's access point with a password. Example To call the uci, from the command line simply type: uci The result will give you all the options you can call for uci. Next lets take a closer look at our wireless configuration file, this is the same one that is in our '/etc/config/' folder, but we want to exploit the convenience of using uci. So enter: uci export wireless Or alternatively you can use the uci show command, which will prove useful shortly. uci show wireless Now in order for us to secure our wifi access point we must change our encryption and add a key. We wil have to use the following command: uci set config . section [. option ]= value Your probably wondering what the second part of the command means. I won't bore you with the details, if your interested refer to OpenWRT documentation , but the second part points to the exact line in the config file we would like to change and sets the new value. So in our case we would like to change our encryption from none to psk2. To determine the exact syntax for the second part refer to output of uci show wireless . Now enter the following into your command line. uci set wireless.@wifi-iface[0].encryption=psk2 followed by this, to commit changes: uci commit wireless To observe the changes, re-enter the uci show wireless You should similar changes as in the image below. Now let's set our password for our key access point. Similar to our previous step we will enter the following command. uci set wireless.@wifi-iface[0].key=password followed by uci commit wireless and to check our changes: uci show wireless Now to reset your Omega's wifi settings, enter: /etc/init.d/boot reload This will reload your configuration files. You will also need to restart your wifi service. To do that enter this into your command line. wifi Give it a few seconds and your Omega should broadcast a secured wifi signal. To check, open your network page and check avaiable networks, you should your Omega's wifi and it should require the password, which we set as \"password\" to login. And voila, you have just used uci to secure your Omega access point. More Information For more details on UCI, visit the OpenWRT UCI Technical Reference article","title":"Uci introduction"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/UCI_Tutorial/uci_introduction/#introduction-to-uci","text":"Short for Unified Configuration Interface , uci is OpenWRT centralized configuration interface. To modify congifuration files we can either navigate to the specific file usually located in the \"/etc/config\" folder. Alternatively, you can use the uci command line to utility to achieve the same thing. Uci is particular handy when it comes to making modifcations to config files from within a shell script without changing any other parts of the file. For further reading, consult OpenWRT's documentation on the subject which can be found here . In keeping with our prior tutorials, let's learn about uci through an example. In this tutorial we will secure the Omega's access point with a password.","title":"Introduction to UCI"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/UCI_Tutorial/uci_introduction/#example","text":"To call the uci, from the command line simply type: uci The result will give you all the options you can call for uci. Next lets take a closer look at our wireless configuration file, this is the same one that is in our '/etc/config/' folder, but we want to exploit the convenience of using uci. So enter: uci export wireless Or alternatively you can use the uci show command, which will prove useful shortly. uci show wireless Now in order for us to secure our wifi access point we must change our encryption and add a key. We wil have to use the following command: uci set config . section [. option ]= value Your probably wondering what the second part of the command means. I won't bore you with the details, if your interested refer to OpenWRT documentation , but the second part points to the exact line in the config file we would like to change and sets the new value. So in our case we would like to change our encryption from none to psk2. To determine the exact syntax for the second part refer to output of uci show wireless . Now enter the following into your command line. uci set wireless.@wifi-iface[0].encryption=psk2 followed by this, to commit changes: uci commit wireless To observe the changes, re-enter the uci show wireless You should similar changes as in the image below. Now let's set our password for our key access point. Similar to our previous step we will enter the following command. uci set wireless.@wifi-iface[0].key=password followed by uci commit wireless and to check our changes: uci show wireless Now to reset your Omega's wifi settings, enter: /etc/init.d/boot reload This will reload your configuration files. You will also need to restart your wifi service. To do that enter this into your command line. wifi Give it a few seconds and your Omega should broadcast a secured wifi signal. To check, open your network page and check avaiable networks, you should your Omega's wifi and it should require the password, which we set as \"password\" to login. And voila, you have just used uci to secure your Omega access point.","title":"Example"},{"location":"tutorials/OnionWiki/Tutorials/OpenWrt Tutorials/UCI_Tutorial/uci_introduction/#more-information","text":"For more details on UCI, visit the OpenWRT UCI Technical Reference article","title":"More Information"},{"location":"tutorials/RaspberryPi/RasPiBot202_links/","text":"RPB-202, a beginner\u2019s robot based on Romi chassis and Raspberry Pi DrGFreeman (Posted Mar 15, 2018) \"Here is my first robot project, RPB-202 (for Raspberry Pi Bot - 202 are its last three digits of its IP address on my network). I started this project about a month ago.\"\" https://forum.pololu.com/t/rpb-202-a-beginners-robot-based-on-romi-chassis-and-raspberry-pi/11243 I developed a few basic python classes to provide high level access to the robot components: A simple differential drive robot project based on Pololu Romi chassis and A-Star 32U4 SV w Raspberry Pi bridge https://github.com/DrGFreeman/RasPiBot202/tree/master/examples Raspberry Pi slave library for Arduino An Arduino library that helps establish I2C communication between an A-Star 32U4 Robot Controller and a Raspberry Pi, with the Arduino acting as the I2C slave. https://github.com/pololu/pololu-rpi-slave-arduino-library Library to help interface with the on-board hardware of the Romi 32U4 Control Board https://github.com/pololu/romi-32u4-arduino-library Encoder Pin IO_E2 on A Star 32U4 Board? https://forum.pololu.com/t/encoder-pin-io-e2-on-a-star-32u4-board/12501 Loading RasPiBot202 in to Raspberry Pi from the web browser and then decompressing it https://github.com/DrGFreeman/RasPiBot202/ wget https://github.com/pololu/pololu-rpi-slave-arduino-library/archive/2.0.0.tar.gz tar -xzf 2.0.0.tar.gz Running server.py from: https://github.com/pololu/pololu-rpi-slave-arduino-library/blob/master/pi/server.py http://192.168.1.4:5000/ Using AMAZONZ AWS Building a Raspberry Pi telepresence robot using serverless: Part 1 https://aws.amazon.com/blogs/compute/building-a-raspberry-pi-telepresence-robot-using-serverless-part-1/ implementation of I2C slave on the STM32: https://www.freelancer.com/projects/c-programming/implementation-simple-slave-stm/","title":"RasPiBot202 links"},{"location":"tutorials/RaspberryPi/WebThingsGateway/","text":"Mozilla WebThings Iot Raspberry PI gateway software - https://iot.mozilla.org/docs/gateway-getting-started-guide.html https://iot.mozilla.org/docs/gateway-user-guide.html about: https://iot.mozilla.org/about/ Arduino Library - https://github.com/mozilla-iot/webthing-arduino Gateway Website setup: https://kd8bxp.mozilla-iot.org/","title":"Mozilla WebThings Iot"},{"location":"tutorials/RaspberryPi/WebThingsGateway/#mozilla-webthings-iot","text":"Raspberry PI gateway software - https://iot.mozilla.org/docs/gateway-getting-started-guide.html https://iot.mozilla.org/docs/gateway-user-guide.html about: https://iot.mozilla.org/about/ Arduino Library - https://github.com/mozilla-iot/webthing-arduino Gateway Website setup: https://kd8bxp.mozilla-iot.org/","title":"Mozilla WebThings Iot"},{"location":"tutorials/RaspberryPi/chatbotforraspberrypi/","text":"Voice AI/Chat Bot for Raspberry PI https://aws.amazon.com/blogs/machine-learning/build-a-voice-kit-with-amazon-lex-and-a-raspberry-pi/ https://github.com/AbhikChowdhury6/chameo/ https://rpiai.com/raspberrypi/ai-bot/ https://github.com/BaronKhan/Talk-To-Pi https://www.houndify.com/ https://www.home-assistant.io/integrations/snips/ https://docs.snips.ai/getting-started https://github.com/macbury/snips-aiy","title":"Voice AI/Chat Bot for Raspberry PI"},{"location":"tutorials/RaspberryPi/chatbotforraspberrypi/#voice-aichat-bot-for-raspberry-pi","text":"https://aws.amazon.com/blogs/machine-learning/build-a-voice-kit-with-amazon-lex-and-a-raspberry-pi/ https://github.com/AbhikChowdhury6/chameo/ https://rpiai.com/raspberrypi/ai-bot/ https://github.com/BaronKhan/Talk-To-Pi https://www.houndify.com/ https://www.home-assistant.io/integrations/snips/ https://docs.snips.ai/getting-started https://github.com/macbury/snips-aiy","title":"Voice AI/Chat Bot for Raspberry PI"},{"location":"tutorials/RaspberryPi/dosbox/","text":"Raspberry PI DosBox Install https://pimylifeup.com/raspberry-pi-dosbox/ Dos Game Solar Realms Elite https://breakintochat.com/wiki/Solar_Realms_Elite http://www-cs-students.stanford.edu/~amitp/Articles/SRE-Documentation.html","title":"Raspberry PI DosBox Install"},{"location":"tutorials/RaspberryPi/dosbox/#raspberry-pi-dosbox-install","text":"https://pimylifeup.com/raspberry-pi-dosbox/","title":"Raspberry PI DosBox Install"},{"location":"tutorials/RaspberryPi/dosbox/#dos-game-solar-realms-elite","text":"https://breakintochat.com/wiki/Solar_Realms_Elite http://www-cs-students.stanford.edu/~amitp/Articles/SRE-Documentation.html","title":"Dos Game Solar Realms Elite"},{"location":"tutorials/RaspberryPi/jupyter/","text":"Jupyter Notebook Recommended way to setup Jupyter (which just simply works). make sure everything is up to date. sudo apt update sudo apt upgrade sudo pip3 install --upgrade pip or sudo python3 -m pip install --upgrade pip sudo pip3 install jupyter Now we want Jupyter to write it's configuration file so we can modify it. jupyter notebook --generate-config To let others on the network use the notebook you need to modify the config to allow it. use your favorite text editor to edit /home/pi/.jupyter/jupyter_notebook_config.py around line 180 - 185 you should find. c.NotebookApp.ip= change the ip to '*' That should do it. To start the notebook. Create a folder named Notebook, if you haven't already done so (this just helps keep things orginized a little) mkdir Notebook cd Notebook jupyter notebook cd ~ That should be it. Ipyparallel (not required) Examples","title":"Setup Jupyter Notebook"},{"location":"tutorials/RaspberryPi/jupyter/#jupyter-notebook","text":"Recommended way to setup Jupyter (which just simply works). make sure everything is up to date. sudo apt update sudo apt upgrade sudo pip3 install --upgrade pip or sudo python3 -m pip install --upgrade pip sudo pip3 install jupyter Now we want Jupyter to write it's configuration file so we can modify it. jupyter notebook --generate-config To let others on the network use the notebook you need to modify the config to allow it. use your favorite text editor to edit /home/pi/.jupyter/jupyter_notebook_config.py around line 180 - 185 you should find. c.NotebookApp.ip= change the ip to '*' That should do it. To start the notebook. Create a folder named Notebook, if you haven't already done so (this just helps keep things orginized a little) mkdir Notebook cd Notebook jupyter notebook cd ~ That should be it.","title":"Jupyter Notebook"},{"location":"tutorials/RaspberryPi/jupyter/#ipyparallel-not-required","text":"Examples","title":"Ipyparallel (not required)"},{"location":"tutorials/RaspberryPi/linux_issues/","text":"Changing a drive from NTFS to ext4 issues My drives lost at least 400gb, and in some cases more, the fix was to turn off the journal, it appears to have worked. https://unix.stackexchange.com/questions/475294/how-do-i-format-a-hard-drive-ext4-with-lowest-possible-inode-disk-usage-for-1-d sudo tune2fs -m 0 /dev/sd[X] unmount drive and run this command: sudo tune2fs -O ^has_journal /dev/sd[X]","title":"Changing a drive from NTFS to ext4 issues"},{"location":"tutorials/RaspberryPi/linux_issues/#changing-a-drive-from-ntfs-to-ext4-issues","text":"My drives lost at least 400gb, and in some cases more, the fix was to turn off the journal, it appears to have worked. https://unix.stackexchange.com/questions/475294/how-do-i-format-a-hard-drive-ext4-with-lowest-possible-inode-disk-usage-for-1-d sudo tune2fs -m 0 /dev/sd[X] unmount drive and run this command: sudo tune2fs -O ^has_journal /dev/sd[X]","title":"Changing a drive from NTFS to ext4 issues"},{"location":"tutorials/RaspberryPi/mediaserverinstall/","text":"Raspberry Pi Media Server Software Install Emby Server Mostly complete instructions can be found here: https://www.electromaker.io/tutorial/blog/emby-server-raspberry-pi There are two things that should be added. 1) check for an update to emby server 2) You need to set premissions for the server to read your external drives * basic instructions can be found here: https://emby.media/community/index.php?/topic/29236-linux-permissions-for-emby/ What worked for me: sudo chown emby.emby /media/pi -R sudo chmod 755 /media/pi sudo find /media/pi -type d -exec chmod 755 {} \\; sudo find /media/pi -type f -exec chmod 644 {} \\; The USB drive may not mount if power is removed. https://www.raspberrypi-spy.co.uk/2014/05/how-to-mount-a-usb-flash-disk-on-the-raspberry-pi/ Step 3, and Step 4 worked, the media server needs to be rebooted. It maybe better to setup a second raspberry pi as a NAS drive, and point the Emby Server to the NAS drive, this might also be slower. Share media drive on network Most of this information is useful, I didn't need to add workground, or wins support both were already installed. https://raspberrypihq.com/how-to-share-a-folder-with-a-windows-computer-from-a-raspberry-pi/ sudo apt install samba Alterntive to Emby Plex https://pimylifeup.com/raspberry-pi-plex-server/","title":"Raspberry Pi Media Server Software"},{"location":"tutorials/RaspberryPi/mediaserverinstall/#raspberry-pi-media-server-software","text":"","title":"Raspberry Pi Media Server Software"},{"location":"tutorials/RaspberryPi/mediaserverinstall/#install-emby-server","text":"Mostly complete instructions can be found here: https://www.electromaker.io/tutorial/blog/emby-server-raspberry-pi There are two things that should be added. 1) check for an update to emby server 2) You need to set premissions for the server to read your external drives * basic instructions can be found here: https://emby.media/community/index.php?/topic/29236-linux-permissions-for-emby/ What worked for me: sudo chown emby.emby /media/pi -R sudo chmod 755 /media/pi sudo find /media/pi -type d -exec chmod 755 {} \\; sudo find /media/pi -type f -exec chmod 644 {} \\; The USB drive may not mount if power is removed. https://www.raspberrypi-spy.co.uk/2014/05/how-to-mount-a-usb-flash-disk-on-the-raspberry-pi/ Step 3, and Step 4 worked, the media server needs to be rebooted. It maybe better to setup a second raspberry pi as a NAS drive, and point the Emby Server to the NAS drive, this might also be slower.","title":"Install Emby Server"},{"location":"tutorials/RaspberryPi/mediaserverinstall/#share-media-drive-on-network","text":"Most of this information is useful, I didn't need to add workground, or wins support both were already installed. https://raspberrypihq.com/how-to-share-a-folder-with-a-windows-computer-from-a-raspberry-pi/ sudo apt install samba","title":"Share media drive on network"},{"location":"tutorials/RaspberryPi/mediaserverinstall/#alterntive-to-emby","text":"Plex https://pimylifeup.com/raspberry-pi-plex-server/","title":"Alterntive to Emby"},{"location":"tutorials/RaspberryPi/offgrid/","text":"Off Grid Raspberry PI projects PirateBox Pirate Box was a DIY anonymous offline file sharing and communications system, they officially shutdown at the end of 2019, and the website will be online until the end of 2021. https://piratebox.cc/ https://www.reddit.com/r/Piratebox/","title":"Off Grid Raspberry PI projects"},{"location":"tutorials/RaspberryPi/offgrid/#off-grid-raspberry-pi-projects","text":"","title":"Off Grid Raspberry PI projects"},{"location":"tutorials/RaspberryPi/offgrid/#piratebox","text":"Pirate Box was a DIY anonymous offline file sharing and communications system, they officially shutdown at the end of 2019, and the website will be online until the end of 2021. https://piratebox.cc/ https://www.reddit.com/r/Piratebox/","title":"PirateBox"},{"location":"tutorials/RaspberryPi/opensocialnetwork/","text":"Installing Open Social Network (Raspberry PI) Guide: https://opensource.com/article/20/3/raspberry-pi-open-source-social Installing GNU-Social Appears to be very simular to the above, with a few changes for GNU-Social https://git.gnu.io/gnu/gnu-social/blob/master/INSTALL Rocket Chat soical network https://opensource.com/article/20/3/raspberry-pi-rocketchat (haven't tried it yet)","title":"Installing Open Social Network (Raspberry PI)"},{"location":"tutorials/RaspberryPi/opensocialnetwork/#installing-open-social-network-raspberry-pi","text":"Guide: https://opensource.com/article/20/3/raspberry-pi-open-source-social","title":"Installing Open Social Network (Raspberry PI)"},{"location":"tutorials/RaspberryPi/opensocialnetwork/#installing-gnu-social","text":"Appears to be very simular to the above, with a few changes for GNU-Social https://git.gnu.io/gnu/gnu-social/blob/master/INSTALL","title":"Installing GNU-Social"},{"location":"tutorials/RaspberryPi/opensocialnetwork/#rocket-chat-soical-network","text":"https://opensource.com/article/20/3/raspberry-pi-rocketchat (haven't tried it yet)","title":"Rocket Chat soical network"},{"location":"tutorials/RaspberryPi/pihole/","text":"What is PIHole Pi-hole is a network-wide Ad blocking system, works at the dns level. https://pi-hole.net/ Setup PIHole with Balena-Cloud Easy(ish) Balena Cloud gives you upto 10 devices for free - this is a good deal. https://www.balena.io/blog/deploy-network-wide-ad-blocking-with-pi-hole-and-a-raspberry-pi/ Maybe even an easier way There is a button on the Balena-PiHole github respository that is a one click setup. https://github.com/klutchell/balena-pihole Add a LCD screen https://www.balena.io/blog/add-a-display-to-your-pi-hole-for-monitoring-and-stats/ Balena-Cli Stand-alone https://github.com/balena-io/balena-cli/releases Balena Cloud Dashboard https://dashboard.balena-cloud.com","title":"What is PIHole"},{"location":"tutorials/RaspberryPi/pihole/#what-is-pihole","text":"Pi-hole is a network-wide Ad blocking system, works at the dns level. https://pi-hole.net/","title":"What is PIHole"},{"location":"tutorials/RaspberryPi/pihole/#setup-pihole-with-balena-cloud-easyish","text":"Balena Cloud gives you upto 10 devices for free - this is a good deal. https://www.balena.io/blog/deploy-network-wide-ad-blocking-with-pi-hole-and-a-raspberry-pi/","title":"Setup PIHole with Balena-Cloud Easy(ish)"},{"location":"tutorials/RaspberryPi/pihole/#maybe-even-an-easier-way","text":"There is a button on the Balena-PiHole github respository that is a one click setup. https://github.com/klutchell/balena-pihole","title":"Maybe even an easier way"},{"location":"tutorials/RaspberryPi/pihole/#add-a-lcd-screen","text":"https://www.balena.io/blog/add-a-display-to-your-pi-hole-for-monitoring-and-stats/","title":"Add a LCD screen"},{"location":"tutorials/RaspberryPi/pihole/#balena-cli-stand-alone","text":"https://github.com/balena-io/balena-cli/releases","title":"Balena-Cli Stand-alone"},{"location":"tutorials/RaspberryPi/pihole/#balena-cloud-dashboard","text":"https://dashboard.balena-cloud.com","title":"Balena Cloud Dashboard"},{"location":"tutorials/RaspberryPi/restrictedshell/","text":"How to limit user's access to the linux system This tutorial mostly works on the Raspberry PI (Raspbian Buster)- some files need to be created manually. sudo su is needed for the above to work, and a .bash_profile file needs to created. More tutorials (untried) Red Hat How to restrict access A little different, but very simuliar to the above. Restrict SSH User Access to certain directory using chrooted jail restrict a user to a specific directory Set up a Banner for a specific user This works using SSH ssh bbs@bbs this displays the banner before the user login, after the user logs in they get the MOTD. Banner","title":"Restricted Shell"},{"location":"tutorials/RaspberryPi/restrictedshell/#how-to-limit-users-access-to-the-linux-system","text":"This tutorial mostly works on the Raspberry PI (Raspbian Buster)- some files need to be created manually. sudo su is needed for the above to work, and a .bash_profile file needs to created.","title":"How to limit user's access to the linux system"},{"location":"tutorials/RaspberryPi/restrictedshell/#more-tutorials-untried","text":"Red Hat How to restrict access A little different, but very simuliar to the above. Restrict SSH User Access to certain directory using chrooted jail restrict a user to a specific directory","title":"More tutorials (untried)"},{"location":"tutorials/RaspberryPi/restrictedshell/#set-up-a-banner-for-a-specific-user","text":"This works using SSH ssh bbs@bbs this displays the banner before the user login, after the user logs in they get the MOTD. Banner","title":"Set up a Banner for a specific user"},{"location":"tutorials/RaspberryPi/rpiSTT/","text":"Using Google AIY Voice board without Google https://www.raspberrypi.org/forums/viewtopic.php?t=223922 Use Step 3.2 (AIY-HAT users) to install the drivers needed. https://github.com/shivasiddharth/GassistPi That's all you need your done installing drivers. Raspberry PI Speech To Text APIs 1) Pocket Sphinx/Sphinx This works but is slow, and not as acqurite as it should be. works off line. https://www.alatortsev.com/2018/06/28/speech-processing-on-raspberry-pi-3-b/ This tutorial works mostly, you need to also install a model from here. https://sourceforge.net/projects/cmusphinx/files/Acoustic%20and%20Language%20Models/US%20English/ 2) Wit.ai online speech to text. Easy to use, and works well. https://www.liip.ch/en/blog/speech-recognition-with-wit-ai https://wit.ai/docs/quickstart Wit-AI python library: https://github.com/wit-ai/pywit HTTP API: https://wit.ai/docs/http/20200513#authentication_link Other Speech APIs (some work, some didn't) Most of these haven't been tried: https://blog.api.rakuten.net/top-10-best-speech-recognition-apis-google-speech-ibm-watson-speechapi-and-others/ Don't think this worked, but it did have some other apps that are good to install for use later: https://oscarliang.com/raspberry-pi-voice-recognition-works-like-siri/ Fix for the libboost1.49-dev library error that was encountered with one of this APIs I tried: https://github.com/StevenHickson/PiAUISuite/issues/58 Quickstarts with Google Cloud DialogFlow: https://cloud.google.com/dialogflow/docs/quick Didn't try this: https://www.bishoph.org/step-by-step-raspberry-pi-offline-voice-recognition-with-sopare/ https://github.com/bishoph/sopare Didn't Try this either: https://www.seeedstudio.com/blog/2020/01/23/offline-speech-recognition-on-raspberry-pi-4-with-respeaker/ This didn't work, but contains some apps that maybe useful, this needed the libboost1.49-dev fix from above. https://maker.pro/raspberry-pi/tutorial/the-best-voice-recognition-software-for-raspberry-pi","title":"Using Google AIY Voice board without Google"},{"location":"tutorials/RaspberryPi/rpiSTT/#using-google-aiy-voice-board-without-google","text":"https://www.raspberrypi.org/forums/viewtopic.php?t=223922 Use Step 3.2 (AIY-HAT users) to install the drivers needed. https://github.com/shivasiddharth/GassistPi That's all you need your done installing drivers.","title":"Using Google AIY Voice board without Google"},{"location":"tutorials/RaspberryPi/rpiSTT/#raspberry-pi-speech-to-text-apis","text":"1) Pocket Sphinx/Sphinx This works but is slow, and not as acqurite as it should be. works off line. https://www.alatortsev.com/2018/06/28/speech-processing-on-raspberry-pi-3-b/ This tutorial works mostly, you need to also install a model from here. https://sourceforge.net/projects/cmusphinx/files/Acoustic%20and%20Language%20Models/US%20English/ 2) Wit.ai online speech to text. Easy to use, and works well. https://www.liip.ch/en/blog/speech-recognition-with-wit-ai https://wit.ai/docs/quickstart Wit-AI python library: https://github.com/wit-ai/pywit HTTP API: https://wit.ai/docs/http/20200513#authentication_link","title":"Raspberry PI Speech To Text APIs"},{"location":"tutorials/RaspberryPi/rpiSTT/#other-speech-apis-some-work-some-didnt","text":"Most of these haven't been tried: https://blog.api.rakuten.net/top-10-best-speech-recognition-apis-google-speech-ibm-watson-speechapi-and-others/ Don't think this worked, but it did have some other apps that are good to install for use later: https://oscarliang.com/raspberry-pi-voice-recognition-works-like-siri/ Fix for the libboost1.49-dev library error that was encountered with one of this APIs I tried: https://github.com/StevenHickson/PiAUISuite/issues/58 Quickstarts with Google Cloud DialogFlow: https://cloud.google.com/dialogflow/docs/quick Didn't try this: https://www.bishoph.org/step-by-step-raspberry-pi-offline-voice-recognition-with-sopare/ https://github.com/bishoph/sopare Didn't Try this either: https://www.seeedstudio.com/blog/2020/01/23/offline-speech-recognition-on-raspberry-pi-4-with-respeaker/ This didn't work, but contains some apps that maybe useful, this needed the libboost1.49-dev fix from above. https://maker.pro/raspberry-pi/tutorial/the-best-voice-recognition-software-for-raspberry-pi","title":"Other Speech APIs (some work, some didn't)"},{"location":"tutorials/RaspberryPi/rpiissues/","text":"Issues and Fixes with Raspberry PI Raspberry PI Zero W not stable, maybe a \"under voltage\" issue, Adding over_voltage=6 to the config.txt file in the boot partition may fix the issue. refranced: https://www.raspberrypi.org/forums/viewtopic.php?f=43 t=212777","title":"Issues and Fixes with Raspberry PI"},{"location":"tutorials/RaspberryPi/rpiissues/#issues-and-fixes-with-raspberry-pi","text":"Raspberry PI Zero W not stable, maybe a \"under voltage\" issue, Adding over_voltage=6 to the config.txt file in the boot partition may fix the issue. refranced: https://www.raspberrypi.org/forums/viewtopic.php?f=43 t=212777","title":"Issues and Fixes with Raspberry PI"},{"location":"tutorials/RaspberryPi/rpisambashares/","text":"Setting up a Samba Share NAS server on the Raspberry PI Generally this is easy to do. Using Raspbian Buster Lite for this, and this tutorial. https://pimylifeup.com/raspberry-pi-samba/ Auto Mount Drives at boot up IF you are going to use USB drives you need have them mounted to share, I used this tutorial to auto mount my drives at boot time. https://www.raspberrypi.org/forums/viewtopic.php?t=205016 The highlights: get the UUID of the drive - this will mount the drive even if it's in a different usb port, or if something else has changed. sudo blkid Make a directory for the mount point. sudo mkdir /media/SOMENAME back up the existing fstab file (just a precaution) sudo cp /etc/fstab /etc/fstab.bak edit fstab sudo nano /etc/fstab add this line (or somehting like it) UUID=93ddc2e0-48e1-457c-9d59-f6a34596e6e1 /media/SSD-120GB ext4 defaults,nofail 0 0 Now add the directory to your samba config file, and reboot. This works without issue for the default user, but if you want a guest or no login user you also need to change the directory premissions of /media/USBNAME sudo chmod 777 /media/USBNAME This only mounts the drive automatically at boot time, hot plug you maybe able to use sudo mount -a This should mount all filesystems mentioned in fstab. Note2: after umount a drive the directory permissions changed, not sure why, so this is something to remember and be aware of. Other Tutorials https://www.pcmag.com/how-to/how-to-turn-a-raspberry-pi-into-a-nas-for-whole-home-file-sharing https://magpi.raspberrypi.org/articles/build-a-raspberry-pi-nas Open Media Vault (I never got this to work correctly, I think it was a permissions issue) https://forum.openmediavault.org/index.php?thread/28789-installing-omv5-on-raspberry-pi-s-armbian-sbc-s-i386-32-bit-platforms/ https://www.openmediavault.org/","title":"Setting up a Samba Share NAS server on the Raspberry PI"},{"location":"tutorials/RaspberryPi/rpisambashares/#setting-up-a-samba-share-nas-server-on-the-raspberry-pi","text":"Generally this is easy to do. Using Raspbian Buster Lite for this, and this tutorial. https://pimylifeup.com/raspberry-pi-samba/","title":"Setting up a Samba Share NAS server on the Raspberry PI"},{"location":"tutorials/RaspberryPi/rpisambashares/#auto-mount-drives-at-boot-up","text":"IF you are going to use USB drives you need have them mounted to share, I used this tutorial to auto mount my drives at boot time. https://www.raspberrypi.org/forums/viewtopic.php?t=205016 The highlights: get the UUID of the drive - this will mount the drive even if it's in a different usb port, or if something else has changed. sudo blkid Make a directory for the mount point. sudo mkdir /media/SOMENAME back up the existing fstab file (just a precaution) sudo cp /etc/fstab /etc/fstab.bak edit fstab sudo nano /etc/fstab add this line (or somehting like it) UUID=93ddc2e0-48e1-457c-9d59-f6a34596e6e1 /media/SSD-120GB ext4 defaults,nofail 0 0 Now add the directory to your samba config file, and reboot. This works without issue for the default user, but if you want a guest or no login user you also need to change the directory premissions of /media/USBNAME sudo chmod 777 /media/USBNAME This only mounts the drive automatically at boot time, hot plug you maybe able to use sudo mount -a This should mount all filesystems mentioned in fstab. Note2: after umount a drive the directory permissions changed, not sure why, so this is something to remember and be aware of.","title":"Auto Mount Drives at boot up"},{"location":"tutorials/RaspberryPi/rpisambashares/#other-tutorials","text":"https://www.pcmag.com/how-to/how-to-turn-a-raspberry-pi-into-a-nas-for-whole-home-file-sharing https://magpi.raspberrypi.org/articles/build-a-raspberry-pi-nas Open Media Vault (I never got this to work correctly, I think it was a permissions issue) https://forum.openmediavault.org/index.php?thread/28789-installing-omv5-on-raspberry-pi-s-armbian-sbc-s-i386-32-bit-platforms/ https://www.openmediavault.org/","title":"Other Tutorials"},{"location":"tutorials/RaspberryPi/rpiservicestotry/","text":"Servers and systems to try with the Raspberry PI 1) Fast Git server: https://www.techcoil.com/blog/setting-up-a-fast-git-server-on-raspberry-pi-zero-w-with-go-git-service-gogs-and-raspbian-stretch-lite/ https://gogs.io/ https://github.com/gogs/gogs 2) ProjectSend for large file sharing: https://www.techcoil.com/blog/setting-up-projectsend-on-your-raspberry-pi-3-for-sharing-files-the-lemp-way/ https://www.projectsend.org/ 3) Yunohost: https://yunohost.org/#/","title":"Servers and systems to try with the Raspberry PI"},{"location":"tutorials/RaspberryPi/rpiservicestotry/#servers-and-systems-to-try-with-the-raspberry-pi","text":"1) Fast Git server: https://www.techcoil.com/blog/setting-up-a-fast-git-server-on-raspberry-pi-zero-w-with-go-git-service-gogs-and-raspbian-stretch-lite/ https://gogs.io/ https://github.com/gogs/gogs 2) ProjectSend for large file sharing: https://www.techcoil.com/blog/setting-up-projectsend-on-your-raspberry-pi-3-for-sharing-files-the-lemp-way/ https://www.projectsend.org/ 3) Yunohost: https://yunohost.org/#/","title":"Servers and systems to try with the Raspberry PI"},{"location":"tutorials/RaspberryPi/webmin/","text":"install webmin on raspberry pi https://pimylifeup.com/raspberry-pi-webmin/ http://www.webmin.com/deb.html","title":"install webmin on raspberry pi"},{"location":"tutorials/RaspberryPi/webmin/#install-webmin-on-raspberry-pi","text":"https://pimylifeup.com/raspberry-pi-webmin/ http://www.webmin.com/deb.html","title":"install webmin on raspberry pi"},{"location":"tutorials/RaspberryPi/wp/","text":"Install Wordpress on Raspberry PI My install is using Raspbain Stretch on a Raspberry PI Zero W. These instructions work without issues, but your packages and distro should probably also be updated. sudo apt update sudo apt upgrade https://projects.raspberrypi.org/en/projects/lamp-web-server-with-wordpress","title":"Install Wordpress on Raspberry PI"},{"location":"tutorials/RaspberryPi/wp/#install-wordpress-on-raspberry-pi","text":"My install is using Raspbain Stretch on a Raspberry PI Zero W. These instructions work without issues, but your packages and distro should probably also be updated. sudo apt update sudo apt upgrade https://projects.raspberrypi.org/en/projects/lamp-web-server-with-wordpress","title":"Install Wordpress on Raspberry PI"},{"location":"tutorials/RaspberryPi/xmppJabberserver/","text":"For the most part this is what I followed, but I was only able to get Tkabber software to connect http://raspberrypi.tomasgreno.cz/xmppjabber-server.html https://prosody.im/doc/prosodyctl This was not easy to setup, but did in the end work Something to try - communicate with the arduino https://fablab.ruc.dk/get-xmpp-protocol-on-arduino/","title":"xmppJabberserver"},{"location":"tutorials/RaspberryPi/1.54inTFTGameScreen/tutorial/","text":"1.54\" TFT Game Pad with TouchScreen Physical Resolution : 240x240 (The software Resolution is set to 480x480 for the more larger display area) With touch function (The game don't have touch function. Because the Retropie OS don't support touch) Provide Raspbian and Retropie OS images and drivers Support Raspberry Pi 2B/3B+/Zero W Setup Link spotpear.com Setup Info (if link above disappears) Using your own Raspbian OS install worked the best for me. Download, and install the OS as normal, setup your wifi, and ssh (if you want it). Next download the LCD-show-190115.tar.gz drivers. copy the above file to your SD card, and untar using tar xvf LCD-show.tar.gz cd LCD-show for the 1.54\" screen run, the LCD154-show script to install, the raspberry pi will reboot. sudo ./LCD154-show That it. A keypad test program is also provided, and can also be found here: keytest.zip","title":"1.54\" TFT Touch Screen"},{"location":"tutorials/RaspberryPi/1.54inTFTGameScreen/tutorial/#154-tft-game-pad-with-touchscreen","text":"Physical Resolution : 240x240 (The software Resolution is set to 480x480 for the more larger display area) With touch function (The game don't have touch function. Because the Retropie OS don't support touch) Provide Raspbian and Retropie OS images and drivers Support Raspberry Pi 2B/3B+/Zero W","title":"1.54\" TFT Game Pad with TouchScreen"},{"location":"tutorials/RaspberryPi/1.54inTFTGameScreen/tutorial/#setup-link","text":"spotpear.com","title":"Setup Link"},{"location":"tutorials/RaspberryPi/1.54inTFTGameScreen/tutorial/#setup-info-if-link-above-disappears","text":"Using your own Raspbian OS install worked the best for me. Download, and install the OS as normal, setup your wifi, and ssh (if you want it). Next download the LCD-show-190115.tar.gz drivers. copy the above file to your SD card, and untar using tar xvf LCD-show.tar.gz cd LCD-show for the 1.54\" screen run, the LCD154-show script to install, the raspberry pi will reboot. sudo ./LCD154-show That it. A keypad test program is also provided, and can also be found here: keytest.zip","title":"Setup Info (if link above disappears)"},{"location":"tutorials/RaspberryPi/OpenCV/opencv/","text":"Easy(ish) setup for Raspberry PI Zero W -This probably will work on other versions of Raspberry PI also. 1st Do not try to build from source, this is a hugh waste of time. 2nd The Raspberry PI Zero W is very slow at processing, it does work, but don't expect much. 3rd The current version of OpenCV (4.x.x.x) doesn't work correctly on the Raspberry PI (May 2, 2020), this will show how to install 3.4.6.27 4th OpenCV is big, so uninstall anything not needed. A lot of packages also need to be installed, and the OS needs to be up to date. Using Raspbain Buster: expand the SD card if you haven't already done it. Next uninstall unneeded software to free up space. sudo apt purge wolfram-engine sudo apt purge libreoffice* sudo apt clean sudo apt autoremove Next update Raspbian, update the software. sudo apt update sudo apt upgrade Make sure you have the latest version of pip. sudo pip3 install --upgrade pip sudo pip2 install --upgrade pip After you upgrade pip to the latest version, the above commands may not work any more so use. sudo python3 -m pip install --upgrade pip sudo python2 -m pip install --upgrade pip Note: (I originally tried to install OpenCV from scratch by building it, this took over a day to finally end up failing at 86%, with no real reason as to why it failed. Some of the packages to install may not be needed.) Install dependances and packages sudo apt-get -y remove x264 libx264-dev sudo apt install libatlas3-base libwebp6 libtiff5 libjasper1 libilmbase12 libopenexr22 libilmbase12 libgstreamer1.0-0 libavcodec57 libavformat57 libavutil55 libswscale4 libqtgui4 libqt4-test libqtcore4 sudo pip3 install opencv-python==3.4.6.27 sudo pip3 install opencv-contrib-python==3.4.6.27 sudo apt install libhdf5* sudo pip3 install libwebp6 pip3 install dlib sudo -H pip3 install -U pip numpy Notes: Some of these packages are not in the repository for Buster, and appear they are not required. Full Guide to Face Detection Maelfabien Github Raw Gist of Face_detection_video.py Raw Gist of Face_detection_img.py Face Detection in 2 Minutes A Guide to Face Detection in Python Resources OpenCV Python Tutorials Some of the above was learned here: Learn OpenCV Other Information was learned here: Installing OpenCV on Raspberry PI Zero Install OpenCV on your Raspberry PI Zero - Raspbian Jessie Note the above resources are tutorials for installing from source, that didn't work for me, but contain some information that is useful. Ready to Use ROS + OpenCV Image Based on Raspbian Stretch 2018-10-09 and only for the Raspberry PI 3B+ There is also a .deb file for Raspbain Jessie for more info see Git Hub , this is also an older version of OpenCV. Is there a Raspberry PI Image with OpenCV 3 pre-installed? Found on Stack Exchange This is where steps (for the wrong version of openCV) were found to install via pinwheels. Pinwheel OpenCV Blog Still wrong version of OpenCV for the RaspberryPi. Info for correct version of OpenCV Information for some fails A lot of the failure result in OpenCV not being able to load the classifier. OpenCV Error assertion failed empty in detectmultiscale Packages or Steps that maybe required *sudo apt-get -y install build-essential checkinstall cmake pkg-config yasm *sudo apt-get -y install git gfortran *sudo apt-get -y install libjpeg8-dev libjasper-dev libpng12-dev *sudo apt-get -y install libtiff5-dev *sudo apt-get -y install libtiff-dev *sudo apt-get -y install libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev *sudo apt-get -y install libxine2-dev libv4l-dev *sudo apt-get -y install libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev *sudo apt-get -y install libgtk2.0-dev libtbb-dev qt5-default *sudo apt-get -y install libatlas-base-dev *sudo apt-get -y install libmp3lame-dev libtheora-dev *sudo apt-get -y install libvorbis-dev libxvidcore-dev libx264-dev *sudo apt-get -y install libopencore-amrnb-dev libopencore-amrwb-dev *sudo apt-get -y install libavresample-dev *sudo apt-get -y install x264 v4l-utils *sudo apt-get -y install libprotobuf-dev protobuf-compiler *sudo apt-get -y install libgoogle-glog-dev libgflags-dev *sudo apt-get -y install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen Note to self verify these steps are needed More/Other Projects Lane Following Robot using OpenCV Create OpenCV Image Classifiers using Python *Note untried Pictures","title":"Raspberry PI Zero W OpenCV"},{"location":"tutorials/RaspberryPi/OpenCV/opencv/#easyish-setup-for-raspberry-pi-zero-w","text":"","title":"Easy(ish) setup for Raspberry PI Zero W"},{"location":"tutorials/RaspberryPi/OpenCV/opencv/#-this-probably-will-work-on-other-versions-of-raspberry-pi-also","text":"1st Do not try to build from source, this is a hugh waste of time. 2nd The Raspberry PI Zero W is very slow at processing, it does work, but don't expect much. 3rd The current version of OpenCV (4.x.x.x) doesn't work correctly on the Raspberry PI (May 2, 2020), this will show how to install 3.4.6.27 4th OpenCV is big, so uninstall anything not needed. A lot of packages also need to be installed, and the OS needs to be up to date. Using Raspbain Buster: expand the SD card if you haven't already done it. Next uninstall unneeded software to free up space. sudo apt purge wolfram-engine sudo apt purge libreoffice* sudo apt clean sudo apt autoremove Next update Raspbian, update the software. sudo apt update sudo apt upgrade Make sure you have the latest version of pip. sudo pip3 install --upgrade pip sudo pip2 install --upgrade pip After you upgrade pip to the latest version, the above commands may not work any more so use. sudo python3 -m pip install --upgrade pip sudo python2 -m pip install --upgrade pip Note: (I originally tried to install OpenCV from scratch by building it, this took over a day to finally end up failing at 86%, with no real reason as to why it failed. Some of the packages to install may not be needed.) Install dependances and packages sudo apt-get -y remove x264 libx264-dev sudo apt install libatlas3-base libwebp6 libtiff5 libjasper1 libilmbase12 libopenexr22 libilmbase12 libgstreamer1.0-0 libavcodec57 libavformat57 libavutil55 libswscale4 libqtgui4 libqt4-test libqtcore4 sudo pip3 install opencv-python==3.4.6.27 sudo pip3 install opencv-contrib-python==3.4.6.27 sudo apt install libhdf5* sudo pip3 install libwebp6 pip3 install dlib sudo -H pip3 install -U pip numpy Notes: Some of these packages are not in the repository for Buster, and appear they are not required.","title":"-This probably will work on other versions of Raspberry PI also."},{"location":"tutorials/RaspberryPi/OpenCV/opencv/#full-guide-to-face-detection","text":"Maelfabien Github Raw Gist of Face_detection_video.py Raw Gist of Face_detection_img.py Face Detection in 2 Minutes A Guide to Face Detection in Python","title":"Full Guide to Face Detection"},{"location":"tutorials/RaspberryPi/OpenCV/opencv/#resources","text":"OpenCV Python Tutorials Some of the above was learned here: Learn OpenCV Other Information was learned here: Installing OpenCV on Raspberry PI Zero Install OpenCV on your Raspberry PI Zero - Raspbian Jessie Note the above resources are tutorials for installing from source, that didn't work for me, but contain some information that is useful. Ready to Use ROS + OpenCV Image Based on Raspbian Stretch 2018-10-09 and only for the Raspberry PI 3B+ There is also a .deb file for Raspbain Jessie for more info see Git Hub , this is also an older version of OpenCV. Is there a Raspberry PI Image with OpenCV 3 pre-installed? Found on Stack Exchange This is where steps (for the wrong version of openCV) were found to install via pinwheels. Pinwheel OpenCV Blog Still wrong version of OpenCV for the RaspberryPi. Info for correct version of OpenCV","title":"Resources"},{"location":"tutorials/RaspberryPi/OpenCV/opencv/#information-for-some-fails","text":"A lot of the failure result in OpenCV not being able to load the classifier. OpenCV Error assertion failed empty in detectmultiscale","title":"Information for some fails"},{"location":"tutorials/RaspberryPi/OpenCV/opencv/#packages-or-steps-that-maybe-required","text":"*sudo apt-get -y install build-essential checkinstall cmake pkg-config yasm *sudo apt-get -y install git gfortran *sudo apt-get -y install libjpeg8-dev libjasper-dev libpng12-dev *sudo apt-get -y install libtiff5-dev *sudo apt-get -y install libtiff-dev *sudo apt-get -y install libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev *sudo apt-get -y install libxine2-dev libv4l-dev *sudo apt-get -y install libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev *sudo apt-get -y install libgtk2.0-dev libtbb-dev qt5-default *sudo apt-get -y install libatlas-base-dev *sudo apt-get -y install libmp3lame-dev libtheora-dev *sudo apt-get -y install libvorbis-dev libxvidcore-dev libx264-dev *sudo apt-get -y install libopencore-amrnb-dev libopencore-amrwb-dev *sudo apt-get -y install libavresample-dev *sudo apt-get -y install x264 v4l-utils *sudo apt-get -y install libprotobuf-dev protobuf-compiler *sudo apt-get -y install libgoogle-glog-dev libgflags-dev *sudo apt-get -y install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen Note to self verify these steps are needed","title":"Packages or Steps that maybe required"},{"location":"tutorials/RaspberryPi/OpenCV/opencv/#moreother-projects","text":"Lane Following Robot using OpenCV Create OpenCV Image Classifiers using Python *Note untried","title":"More/Other Projects"},{"location":"tutorials/RaspberryPi/OpenCV/opencv/#pictures","text":"","title":"Pictures"},{"location":"tutorials/SZDOITWiKi/1.-how-to-install-the-driving-wheel-and-bearing-wheel/","text":"when you download and open this manual, you will find the detailed installation for the driving wheel and the bearing wheel. In this manual, you just need to read the installation for the wheel. * manaul ;","title":"1. how to install the driving wheel and bearing wheel"},{"location":"tutorials/SZDOITWiKi/12V-motor/","text":"For our robot tank car chassis, we use the following 12v motor with the following featurs. * Voltage: 12V DC * RPM: 30RPM * Current: 0.55A * Diameter: 25mm * Height (excl. shaft): 68mm * Shaft length: 9.5mm * Shaft diameter: 4mm * Weight: 180g * Brand new and unused You can get it from our official shops SmartArduino , or AliExpress shop .","title":"12V motor"},{"location":"tutorials/SZDOITWiKi/2-4ch-DC-motor-&-16ch-servo-shield---motor-and-servo-shield/","text":"Introduction When using this 2/4ch motor driver, which can control 2 pcs or 4 pcs DC motors at the same time, and then is also able to control 16 pcs servo. So, it is the best choice to DIY a smart robot car with robotic arm. And now, this board is already at our shop www.vvdoit.com. Order: 2/4ch motor 16 servo shield , our shop Alications: robot tank car Documents download Document: download source code included wifi, bluetooth, and ps2: download Features Control 2pcs or 4pcs DC motors, and 16pcs servo at the same time; Fully compatible with Arduino board; Fully support WiFi DT-06, Bluetooth HC-05, or HC-06, and the PS2 handle; It is the best choice to DIY smart tank car chassis, or robot arm. Can search the item by AliExpress, Amazon, and our site. Usage\uff1a This board can remote control the 2wd/4wd car by using our WiFi module DT-06, or Bluetooth, and PS2; Note that, for WiFi and Bluetooth version, needs APP to control the car, and now, the app is just for Android; This board can drive 3-5kg load. Fully compatible with Arduino, which can directly insert UNO board. Specifications\uff1a 16ch servos and 4ch DC motor driver board, which use TB6612 to drive 4ch DC motor, and PCA9685 is used to control 16ch servo. Having Arduino UNO I/O pins; Max power 15V/DC; Having Bluetooth and WIFI interface; Have PS2 interface; 4 DC motor driver, and the single max current is 1.2A(mean)/3.2A(peak); 16ch servo, and the jumper to change the servo and motor working voltage: Input power\uff1a Motor power\uff08VM\uff09\uff1a4.5V\uff5e36V,can work separately; Servo power\uff08VIN\uff09\uff1a5\uff5e18V, can work separately; Work separately Cut off VM and VIN,(separately control motor, 6-36v); Cut off VS and VIN, (separately control servo, 6-18v); ** Short VM and VIN, short VS and 5V, to control motor\uff086\uff5e18V\uff09 and servos (5V). Note Prohibit inversion for the power positive and negative, or will built out the boar.Same as the WiFi module, Bluetooth, and PS2. When using PS2, please put put the \"PS2X_lib\" to the libraries of Arduino.","title":"2 4ch DC motor & 16ch servo shield   motor and servo shield"},{"location":"tutorials/SZDOITWiKi/2-4ch-DC-motor-&-16ch-servo-shield---motor-and-servo-shield/#introduction","text":"When using this 2/4ch motor driver, which can control 2 pcs or 4 pcs DC motors at the same time, and then is also able to control 16 pcs servo. So, it is the best choice to DIY a smart robot car with robotic arm. And now, this board is already at our shop www.vvdoit.com. Order: 2/4ch motor 16 servo shield , our shop Alications: robot tank car","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/2-4ch-DC-motor-&-16ch-servo-shield---motor-and-servo-shield/#documents-download","text":"Document: download source code included wifi, bluetooth, and ps2: download","title":"Documents download"},{"location":"tutorials/SZDOITWiKi/2-4ch-DC-motor-&-16ch-servo-shield---motor-and-servo-shield/#features","text":"Control 2pcs or 4pcs DC motors, and 16pcs servo at the same time; Fully compatible with Arduino board; Fully support WiFi DT-06, Bluetooth HC-05, or HC-06, and the PS2 handle; It is the best choice to DIY smart tank car chassis, or robot arm. Can search the item by AliExpress, Amazon, and our site.","title":"Features"},{"location":"tutorials/SZDOITWiKi/2-4ch-DC-motor-&-16ch-servo-shield---motor-and-servo-shield/#usage","text":"This board can remote control the 2wd/4wd car by using our WiFi module DT-06, or Bluetooth, and PS2; Note that, for WiFi and Bluetooth version, needs APP to control the car, and now, the app is just for Android; This board can drive 3-5kg load. Fully compatible with Arduino, which can directly insert UNO board.","title":"Usage\uff1a"},{"location":"tutorials/SZDOITWiKi/2-4ch-DC-motor-&-16ch-servo-shield---motor-and-servo-shield/#specifications","text":"16ch servos and 4ch DC motor driver board, which use TB6612 to drive 4ch DC motor, and PCA9685 is used to control 16ch servo. Having Arduino UNO I/O pins; Max power 15V/DC; Having Bluetooth and WIFI interface; Have PS2 interface; 4 DC motor driver, and the single max current is 1.2A(mean)/3.2A(peak); 16ch servo, and the jumper to change the servo and motor working voltage: Input power\uff1a Motor power\uff08VM\uff09\uff1a4.5V\uff5e36V,can work separately; Servo power\uff08VIN\uff09\uff1a5\uff5e18V, can work separately; Work separately Cut off VM and VIN,(separately control motor, 6-36v); Cut off VS and VIN, (separately control servo, 6-18v); ** Short VM and VIN, short VS and 5V, to control motor\uff086\uff5e18V\uff09 and servos (5V).","title":"Specifications\uff1a"},{"location":"tutorials/SZDOITWiKi/2-4ch-DC-motor-&-16ch-servo-shield---motor-and-servo-shield/#note","text":"Prohibit inversion for the power positive and negative, or will built out the boar.Same as the WiFi module, Bluetooth, and PS2. When using PS2, please put put the \"PS2X_lib\" to the libraries of Arduino.","title":"Note"},{"location":"tutorials/SZDOITWiKi/2-4ch-DC-motor-&amp;-16ch-servo-shield---motor-and-servo-shield/","text":"Introduction When using this 2/4ch motor driver, which can control 2 pcs or 4 pcs DC motors at the same time, and then is also able to control 16 pcs servo. So, it is the best choice to DIY a smart robot car with robotic arm. And now, this board is already at our shop www.vvdoit.com. Order: 2/4ch motor 16 servo shield , our shop Alications: robot tank car Documents and Source code Download Document: download source code included wifi, bluetooth, and ps2: 2 motors: download 3 motors: download 4 motors: download App: download Features Control 2pcs or 4pcs DC motors, and 16pcs servo at the same time; Fully compatible with Arduino board; Fully support WiFi DT-06, Bluetooth HC-05, or HC-06, and the PS2 handle; It is the best choice to DIY smart tank car chassis, or robot arm. Can search the item by AliExpress, Amazon, and our site. Usage\uff1a This board can remote control the 2wd/4wd car by using our WiFi module DT-06, or Bluetooth, and PS2; Note that, for WiFi and Bluetooth version, needs APP to control the car, and now, the app is just for Android; This board can drive 3-5kg load. Fully compatible with Arduino, which can directly insert UNO board. Specifications\uff1a 16ch servos and 4ch DC motor driver board, which use TB6612 to drive 4ch DC motor, and PCA9685 is used to control 16ch servo. Having Arduino UNO I/O pins; Max power 15V/DC; Having Bluetooth and WIFI interface; Have PS2 interface; 4 DC motor driver, and the single max current is 1.2A(mean)/3.2A(peak); 16ch servo, and the jumper to change the servo and motor working voltage: Input power\uff1a Motor power\uff08VM\uff09\uff1a4.5V\uff5e36V,can work separately; Servo power\uff08VIN\uff09\uff1a5\uff5e18V, can work separately; Work separately Cut off VM and VIN,(separately control motor, 6-36v); Cut off VS and VIN, (separately control servo, 6-18v); Short VM and VIN, short VS and 5V, to control motor\uff086\uff5e18V\uff09 and servos (5V). Note Prohibit inversion for the power positive and negative, or will built out the boar.Same as the WiFi module, Bluetooth, and PS2. When using PS2, please put put the \"PS2X_lib\" to the libraries of Arduino.","title":"2 4ch DC motor &amp; 16ch servo shield   motor and servo shield"},{"location":"tutorials/SZDOITWiKi/2-4ch-DC-motor-&amp;-16ch-servo-shield---motor-and-servo-shield/#introduction","text":"When using this 2/4ch motor driver, which can control 2 pcs or 4 pcs DC motors at the same time, and then is also able to control 16 pcs servo. So, it is the best choice to DIY a smart robot car with robotic arm. And now, this board is already at our shop www.vvdoit.com. Order: 2/4ch motor 16 servo shield , our shop Alications: robot tank car","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/2-4ch-DC-motor-&amp;-16ch-servo-shield---motor-and-servo-shield/#documents-and-source-code-download","text":"Document: download source code included wifi, bluetooth, and ps2: 2 motors: download 3 motors: download 4 motors: download App: download","title":"Documents and Source code Download"},{"location":"tutorials/SZDOITWiKi/2-4ch-DC-motor-&amp;-16ch-servo-shield---motor-and-servo-shield/#features","text":"Control 2pcs or 4pcs DC motors, and 16pcs servo at the same time; Fully compatible with Arduino board; Fully support WiFi DT-06, Bluetooth HC-05, or HC-06, and the PS2 handle; It is the best choice to DIY smart tank car chassis, or robot arm. Can search the item by AliExpress, Amazon, and our site.","title":"Features"},{"location":"tutorials/SZDOITWiKi/2-4ch-DC-motor-&amp;-16ch-servo-shield---motor-and-servo-shield/#usage","text":"This board can remote control the 2wd/4wd car by using our WiFi module DT-06, or Bluetooth, and PS2; Note that, for WiFi and Bluetooth version, needs APP to control the car, and now, the app is just for Android; This board can drive 3-5kg load. Fully compatible with Arduino, which can directly insert UNO board.","title":"Usage\uff1a"},{"location":"tutorials/SZDOITWiKi/2-4ch-DC-motor-&amp;-16ch-servo-shield---motor-and-servo-shield/#specifications","text":"16ch servos and 4ch DC motor driver board, which use TB6612 to drive 4ch DC motor, and PCA9685 is used to control 16ch servo. Having Arduino UNO I/O pins; Max power 15V/DC; Having Bluetooth and WIFI interface; Have PS2 interface; 4 DC motor driver, and the single max current is 1.2A(mean)/3.2A(peak); 16ch servo, and the jumper to change the servo and motor working voltage: Input power\uff1a Motor power\uff08VM\uff09\uff1a4.5V\uff5e36V,can work separately; Servo power\uff08VIN\uff09\uff1a5\uff5e18V, can work separately; Work separately Cut off VM and VIN,(separately control motor, 6-36v); Cut off VS and VIN, (separately control servo, 6-18v); Short VM and VIN, short VS and 5V, to control motor\uff086\uff5e18V\uff09 and servos (5V).","title":"Specifications\uff1a"},{"location":"tutorials/SZDOITWiKi/2-4ch-DC-motor-&amp;-16ch-servo-shield---motor-and-servo-shield/#note","text":"Prohibit inversion for the power positive and negative, or will built out the boar.Same as the WiFi module, Bluetooth, and PS2. When using PS2, please put put the \"PS2X_lib\" to the libraries of Arduino.","title":"Note"},{"location":"tutorials/SZDOITWiKi/2.-how-to-install-the-track/","text":"when you watch the track carefully, you will find that the track is connect one by one.Thus, the track can be changed at any length, which is shown in the followign picture. or watch the following video: watch video ;","title":"2. how to install the track"},{"location":"tutorials/SZDOITWiKi/2WD-WiFi-TANK-car-chassis/","text":"Introduction In this part, we just present the userl manual for the 2wd wifi tank car chassis. The assembling of car, please move to Assembling Chassis . App download http://en.doit.am/DoitCar_2016_0115.apk Source Code: http://en.doit.am/Doit_Car_en_1217.zip Google Play Market: https://play.google.com/store/apps/details?id=com.doit.carset iOS ; RC kit About wifi control, we have two kinds wifi control kits: NodeMCU and ESPduino. NodeMCU kit FirmWare for NodeMCU rc kit how to connection How to Buy: Buy ESPduino RC kit FirmWare for ESPduino RC kit how to built in firmware how to buy Note that This manual is ONLY suitable for the 2wd tank car chassis, not suitable for the 4wd car chassis (although we present the usage for the 4wd car chassis.). If one must use the 4WD chassis, please visit [[4WD WiFi car chassis]].","title":"2WD WiFi TANK car chassis"},{"location":"tutorials/SZDOITWiKi/2WD-WiFi-TANK-car-chassis/#introduction","text":"In this part, we just present the userl manual for the 2wd wifi tank car chassis. The assembling of car, please move to Assembling Chassis .","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/2WD-WiFi-TANK-car-chassis/#app-download","text":"http://en.doit.am/DoitCar_2016_0115.apk Source Code: http://en.doit.am/Doit_Car_en_1217.zip Google Play Market: https://play.google.com/store/apps/details?id=com.doit.carset iOS ;","title":"App download"},{"location":"tutorials/SZDOITWiKi/2WD-WiFi-TANK-car-chassis/#rc-kit","text":"About wifi control, we have two kinds wifi control kits: NodeMCU and ESPduino. NodeMCU kit FirmWare for NodeMCU rc kit how to connection How to Buy: Buy ESPduino RC kit FirmWare for ESPduino RC kit how to built in firmware how to buy","title":"RC kit"},{"location":"tutorials/SZDOITWiKi/2WD-WiFi-TANK-car-chassis/#note-that","text":"This manual is ONLY suitable for the 2wd tank car chassis, not suitable for the 4wd car chassis (although we present the usage for the 4wd car chassis.). If one must use the 4WD chassis, please visit [[4WD WiFi car chassis]].","title":"Note that"},{"location":"tutorials/SZDOITWiKi/2WD-WiFi-car-chassis/","text":"2WD WiFi NodeMCU car chassis Since we design and develop this car chassis based on NodeMCU, it is very popular for many hobbiests. it is our honour that the first NodeMCU 2WD car in the world is from our company DOIT. Note that, this manual is written by our buyer. Thanks for his great work. Installation manual: Download How to Buy: Buy","title":"2WD WiFi car chassis"},{"location":"tutorials/SZDOITWiKi/2WD-WiFi-car-chassis/#2wd-wifi-nodemcu-car-chassis","text":"Since we design and develop this car chassis based on NodeMCU, it is very popular for many hobbiests. it is our honour that the first NodeMCU 2WD car in the world is from our company DOIT. Note that, this manual is written by our buyer. Thanks for his great work.","title":"2WD WiFi NodeMCU car chassis"},{"location":"tutorials/SZDOITWiKi/2WD-WiFi-car-chassis/#installation-manual-download","text":"","title":"Installation manual: Download"},{"location":"tutorials/SZDOITWiKi/2WD-WiFi-car-chassis/#how-to-buy-buy","text":"","title":"How to Buy: Buy"},{"location":"tutorials/SZDOITWiKi/2wd-video-car/","text":"For the assembling car chassis, please move to the assembling manual . In the default, we will built in the firmware to the control board. But at some time, we don't built in the firmware, especially for the ESPduino board, so please built in the firmware by the following manual. App download Android: https://github.com/SmartArduino/ESPboard/blob/master/MyWifiCar_en.apk source code: https://github.com/SmartArduino/ESPboard/blob/master/Android_Source.zip iOS: https://itunes.apple.com/us/app/doit-video-car/id1068695561?l=zh ls=1 mt=8, or search \u201cdoitvideocar\u201d on app store. RC Video Car Kit NodeMCU RC video kit Firmware for NodeMCU kit how to download the firmware user manual . The manual is similar, just the connection, can be refer to this document . how to buy ESPduino RC video kit Firmware for ESPduino kit user manual how to download the firmware to the board how to buy","title":"2wd video car"},{"location":"tutorials/SZDOITWiKi/2wd-video-car/#app-download","text":"Android: https://github.com/SmartArduino/ESPboard/blob/master/MyWifiCar_en.apk source code: https://github.com/SmartArduino/ESPboard/blob/master/Android_Source.zip iOS: https://itunes.apple.com/us/app/doit-video-car/id1068695561?l=zh ls=1 mt=8, or search \u201cdoitvideocar\u201d on app store.","title":"App download"},{"location":"tutorials/SZDOITWiKi/2wd-video-car/#rc-video-car-kit","text":"NodeMCU RC video kit Firmware for NodeMCU kit how to download the firmware user manual . The manual is similar, just the connection, can be refer to this document . how to buy ESPduino RC video kit Firmware for ESPduino kit user manual how to download the firmware to the board how to buy","title":"RC Video Car Kit"},{"location":"tutorials/SZDOITWiKi/3.-how-to-install-the-motor/","text":"This step should be very easy. we just give out the paramters of motors. Note that, we have 3 sizes coupling for the motor, 4mm, 5mm, and 6mm, which is decided by your axis size of your motor. please move to this link: click me","title":"3. how to install the motor"},{"location":"tutorials/SZDOITWiKi/4.-how-to-use-the-gasket/","text":"For compatible with many types for motors, we have already make different specifications. So at some places, you must need to intall the gaskets. how to intall the gasket, please watch the following video. Watch video","title":"4. how to use the gasket"},{"location":"tutorials/SZDOITWiKi/4WD-Video-Car/","text":"For the assembling car chassis, please move to the assembling manual . In the default, we will built in the firmware to the control board. But at some time, we don't built in the firmware, especially for the ESPduino board, so please built in the firmware by the following manual. App download Android: https://github.com/SmartArduino/ESPboard/blob/master/MyWifiCar_en.apk source code: https://github.com/SmartArduino/ESPboard/blob/master/Android_Source.zip iOS: https://itunes.apple.com/us/app/doit-video-car/id1068695561?l=zh ls=1 mt=8 Video: Watch Connection Manual Manual: download FirmWare for 4wd video car FirmWare: download","title":"4WD Video Car"},{"location":"tutorials/SZDOITWiKi/4WD-Video-Car/#app-download","text":"Android: https://github.com/SmartArduino/ESPboard/blob/master/MyWifiCar_en.apk source code: https://github.com/SmartArduino/ESPboard/blob/master/Android_Source.zip iOS: https://itunes.apple.com/us/app/doit-video-car/id1068695561?l=zh ls=1 mt=8 Video: Watch","title":"App download"},{"location":"tutorials/SZDOITWiKi/4WD-Video-Car/#connection-manual","text":"Manual: download","title":"Connection Manual"},{"location":"tutorials/SZDOITWiKi/4WD-Video-Car/#firmware-for-4wd-video-car","text":"FirmWare: download","title":"FirmWare for 4wd video car"},{"location":"tutorials/SZDOITWiKi/4WD-Vido-Car-ESPduino-Vesrion/","text":"Introduction In this part, we just take T900 4WD car chassis as an example. Video: Watch Connection Manual Manual: download FirmWare for 4wd video car FirmWare: download","title":"4WD Vido Car ESPduino Vesrion"},{"location":"tutorials/SZDOITWiKi/4WD-Vido-Car-ESPduino-Vesrion/#introduction","text":"In this part, we just take T900 4WD car chassis as an example. Video: Watch","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/4WD-Vido-Car-ESPduino-Vesrion/#connection-manual","text":"Manual: download","title":"Connection Manual"},{"location":"tutorials/SZDOITWiKi/4WD-Vido-Car-ESPduino-Vesrion/#firmware-for-4wd-video-car","text":"FirmWare: download","title":"FirmWare for 4wd video car"},{"location":"tutorials/SZDOITWiKi/4WD-WiFi-car-chassis/","text":"Introdcution In fact, the connection is a connection for 2wd. But it can drive 4 motors. Connection Manual Maunal: Download FirmWare FirmWare: Download","title":"4WD WiFi car chassis"},{"location":"tutorials/SZDOITWiKi/4WD-WiFi-car-chassis/#introdcution","text":"In fact, the connection is a connection for 2wd. But it can drive 4 motors.","title":"Introdcution"},{"location":"tutorials/SZDOITWiKi/4WD-WiFi-car-chassis/#connection-manual","text":"Maunal: Download","title":"Connection Manual"},{"location":"tutorials/SZDOITWiKi/4WD-WiFi-car-chassis/#firmware","text":"FirmWare: Download","title":"FirmWare"},{"location":"tutorials/SZDOITWiKi/4wd-car-chassis/","text":"installation pdf download watch video how to buy","title":"4wd car chassis"},{"location":"tutorials/SZDOITWiKi/5.-how-to-install-the-frame/","text":"Different tank model, has different frames. But when you see the pictures, I think you can install it. very easy. please move to the tank models installation, click here","title":"5. how to install the frame"},{"location":"tutorials/SZDOITWiKi/9V-motor-with-Hall-sensor/","text":"As for our many tank car chassis , we use this motor to install it. Since the motor has a big power with Hall sensor. The paramters are listed as follows. * Name: 25mm gear motor * Output speed: 150\u00b110%rpm * No_load Current: 200mA (Max) * Stall current: 4500mA(max) * Stall torque: 9.5kgNaN * Rated speed: 100\u00b110%rpm * Rated torque: 3000gNaN * Rated Current: 1200mA (Max) * Noise: 56dB * Working voltage: 9V * Outside Shaft Length: 14.5mm * Shaft End Play: 0.05-0.50mm * Screw Size\uff1a M3.0 * Dia. Of Shaft phi4mm, D3.5 * encoder: 2 pulses/circle The code disc is listed as follows. More details, please visit the motor datasheet . or download One can purchased from our SmartArduino , or our AliExpress Shop . Any problem, please contact us: yichoneyi@163.com, skype: yichone.","title":"9V motor with Hall sensor"},{"location":"tutorials/SZDOITWiKi/App&Firmwares/","text":"* Click me","title":"App&Firmwares"},{"location":"tutorials/SZDOITWiKi/App-Firmwares/","text":"Please move to [[The general firmwares and tools]].","title":"App Firmwares"},{"location":"tutorials/SZDOITWiKi/App/","text":"APPs for WiFi Car Android APP for WiFi car iOS APP for WiFi car APPs for WiFi Video Car Android APP for WiFi Video car iOS APP for WiFi Video car","title":"App"},{"location":"tutorials/SZDOITWiKi/App/#apps-for-wifi-car","text":"Android APP for WiFi car iOS APP for WiFi car","title":"APPs for WiFi Car"},{"location":"tutorials/SZDOITWiKi/App/#apps-for-wifi-video-car","text":"Android APP for WiFi Video car iOS APP for WiFi Video car","title":"APPs for WiFi Video Car"},{"location":"tutorials/SZDOITWiKi/Arduino---2-way&16-way-motor&servo-shield/","text":"Introduction 2-way Motor 16-way Servo Drive Shield is a compatible with Arduino UNO R3 and ESPduino development board. This module can be inserted directly into the Arduino UNO and/or ESPduino. But if using ESPduino, you can develop quickly and conveniently a tank/car chassis controlled by WiFi. More details, please see the following link: http://www.smartarduino.com/view.php?id=94895 . This driver shield can control 2-way DC motor (4.5~18v) and 16-way servo (5-18V), which is very suitable for the control of mobile robot with robotic arm. This board is designed by using L293DD, which can drive directly 2-way DC motor or 1-way stepping motor. Its max current can be 1.2A. 16-way servo is controlled by IIC interface on the board. The IO interfaces is used as the control interface for Arduino UNO and ESPduino. Thus, just the four ports D6, D7, D11, and D12 ( as for ESPduino, it is D12, D13, D3, D1) is defined as PWMB ( speed for motor B), DIRB (the turn direction for motor B) PWMA(speed for motor A), and DIRA( the turn direction for motor B). The humanized design is used the power switch, which can make one on/off the power conveniently. The board can directly be used to control the intelligent robot by Bluetooth (pre-server) and/or WiFi. More details, please visit: Doit official site ; doit online shop . How to use Download the DataSheet Download the servo test cod How to BUY: Click me to buy","title":"Arduino   2 way&16 way motor&servo shield"},{"location":"tutorials/SZDOITWiKi/Arduino---2-way&16-way-motor&servo-shield/#introduction","text":"2-way Motor 16-way Servo Drive Shield is a compatible with Arduino UNO R3 and ESPduino development board. This module can be inserted directly into the Arduino UNO and/or ESPduino. But if using ESPduino, you can develop quickly and conveniently a tank/car chassis controlled by WiFi. More details, please see the following link: http://www.smartarduino.com/view.php?id=94895 . This driver shield can control 2-way DC motor (4.5~18v) and 16-way servo (5-18V), which is very suitable for the control of mobile robot with robotic arm. This board is designed by using L293DD, which can drive directly 2-way DC motor or 1-way stepping motor. Its max current can be 1.2A. 16-way servo is controlled by IIC interface on the board. The IO interfaces is used as the control interface for Arduino UNO and ESPduino. Thus, just the four ports D6, D7, D11, and D12 ( as for ESPduino, it is D12, D13, D3, D1) is defined as PWMB ( speed for motor B), DIRB (the turn direction for motor B) PWMA(speed for motor A), and DIRA( the turn direction for motor B). The humanized design is used the power switch, which can make one on/off the power conveniently. The board can directly be used to control the intelligent robot by Bluetooth (pre-server) and/or WiFi. More details, please visit: Doit official site ; doit online shop .","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/Arduino---2-way&16-way-motor&servo-shield/#how-to-use","text":"Download the DataSheet Download the servo test cod","title":"How to use"},{"location":"tutorials/SZDOITWiKi/Arduino---2-way&16-way-motor&servo-shield/#how-to-buy-click-me-to-buy","text":"","title":"How to BUY: Click me to buy"},{"location":"tutorials/SZDOITWiKi/Arduino---2-way&amp;16-way-motor&amp;servo-shield/","text":"Introduction 2-way Motor 16-way Servo Drive Shield is a compatible with Arduino UNO R3 and ESPduino development board. This module can be inserted directly into the Arduino UNO and/or ESPduino. But if using ESPduino, you can develop quickly and conveniently a tank/car chassis controlled by WiFi. More details, please see the following link: http://www.smartarduino.com/view.php?id=94895. This driver shield can control 2-way DC motor (4.5~18v) and 16-way servo (5-18V), which is very suitable for the control of mobile robot with robotic arm. This board is designed by using L293DD, which can drive directly 2-way DC motor or 1-way stepping motor. Its max current can be 1.2A. 16-way servo is controlled by IIC interface on the board. The IO interfaces is used as the control interface for Arduino UNO and ESPduino. Thus, just the four ports D6, D7, D11, and D12( as for ESPduino, it is D12, D13, D3, D1) is defined as PWMB ( speed for motor B), DIRB (the turn direction for motor B)PWMA(speed for motor A), andDIRA ( the turn direction for motor B). The humanized design is used the power switch, which can make one on/off the power conveniently. The board can directly be used to control the intelligent robot by Bluetooth (pre-server) and/or WiFi. More details, please visit: http://www.doit.am; www.smartarduino.com, www.vvdoit.com Specifications POWER: Power for motor(VM): 4.5V\uff5e36V, can power separately; Power for servo(VIN): 5\uff5e18V, can power separately; How to use power connection: very important! If short VM and VIN, only can control the motor with 6-18V; If short VS and VIN, only can control the servo with 6-18V; If short VM and VIN, and short VS and 5V, then CAN control the 2-way motor (with 6-18V) and 16-way 5V servo at the same time. Working Current Io\uff1a\u22641.2A; Max power consumption:4W\uff08T=90\u2103\uff09; Input for control signal: High level: 2.3V\u2264VIH\u2264VIN; low level: -0.3V\u2264VIL\u22641.5V Working temperature: -25\u2103\uff5e\uff0b125\u2103; Driven mode: double big power H bridge driver; Weight: about 46g manual: download servo test: download source code Applications with ESPduino board with Arduino board with DT-06 wifi board how to buy Reminder If short VM and VIN, only can control the motor with 6-18V; If short VS and VIN, only can control the servo with 6-18V; If short VM and VIN, and short VS and 5V, then CAN control the 2-way motor (with 6-18V) and 16-way 5V servo at the same time.","title":"Arduino   2 way&amp;16 way motor&amp;servo shield"},{"location":"tutorials/SZDOITWiKi/Arduino---2-way&amp;16-way-motor&amp;servo-shield/#introduction","text":"2-way Motor 16-way Servo Drive Shield is a compatible with Arduino UNO R3 and ESPduino development board. This module can be inserted directly into the Arduino UNO and/or ESPduino. But if using ESPduino, you can develop quickly and conveniently a tank/car chassis controlled by WiFi. More details, please see the following link: http://www.smartarduino.com/view.php?id=94895. This driver shield can control 2-way DC motor (4.5~18v) and 16-way servo (5-18V), which is very suitable for the control of mobile robot with robotic arm. This board is designed by using L293DD, which can drive directly 2-way DC motor or 1-way stepping motor. Its max current can be 1.2A. 16-way servo is controlled by IIC interface on the board. The IO interfaces is used as the control interface for Arduino UNO and ESPduino. Thus, just the four ports D6, D7, D11, and D12( as for ESPduino, it is D12, D13, D3, D1) is defined as PWMB ( speed for motor B), DIRB (the turn direction for motor B)PWMA(speed for motor A), andDIRA ( the turn direction for motor B). The humanized design is used the power switch, which can make one on/off the power conveniently. The board can directly be used to control the intelligent robot by Bluetooth (pre-server) and/or WiFi. More details, please visit: http://www.doit.am; www.smartarduino.com, www.vvdoit.com","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/Arduino---2-way&amp;16-way-motor&amp;servo-shield/#specifications","text":"POWER: Power for motor(VM): 4.5V\uff5e36V, can power separately; Power for servo(VIN): 5\uff5e18V, can power separately; How to use power connection: very important! If short VM and VIN, only can control the motor with 6-18V; If short VS and VIN, only can control the servo with 6-18V; If short VM and VIN, and short VS and 5V, then CAN control the 2-way motor (with 6-18V) and 16-way 5V servo at the same time. Working Current Io\uff1a\u22641.2A; Max power consumption:4W\uff08T=90\u2103\uff09; Input for control signal: High level: 2.3V\u2264VIH\u2264VIN; low level: -0.3V\u2264VIL\u22641.5V Working temperature: -25\u2103\uff5e\uff0b125\u2103; Driven mode: double big power H bridge driver; Weight: about 46g","title":"Specifications"},{"location":"tutorials/SZDOITWiKi/Arduino---2-way&amp;16-way-motor&amp;servo-shield/#manual-download","text":"","title":"manual: download"},{"location":"tutorials/SZDOITWiKi/Arduino---2-way&amp;16-way-motor&amp;servo-shield/#servo-test-download-source-code","text":"","title":"servo test: download source code"},{"location":"tutorials/SZDOITWiKi/Arduino---2-way&amp;16-way-motor&amp;servo-shield/#applications","text":"with ESPduino board with Arduino board with DT-06 wifi board","title":"Applications"},{"location":"tutorials/SZDOITWiKi/Arduino---2-way&amp;16-way-motor&amp;servo-shield/#how-to-buy","text":"","title":"how to buy"},{"location":"tutorials/SZDOITWiKi/Arduino---2-way&amp;16-way-motor&amp;servo-shield/#reminder","text":"If short VM and VIN, only can control the motor with 6-18V; If short VS and VIN, only can control the servo with 6-18V; If short VM and VIN, and short VS and 5V, then CAN control the 2-way motor (with 6-18V) and 16-way 5V servo at the same time.","title":"Reminder"},{"location":"tutorials/SZDOITWiKi/Arduino---ESPduino/","text":"General Introduction ESPduino is developed by Doit company based on the ESP8266 ESP-13, which can be compatible with Arduino UNO R3 developmen board; i.e., ESPduino=WiFi+Arduino UNO R3. By using the ESP8266 WiFi Chip and MCU, ESPduino can work with the support of WiFi. Compared to the traditional Arduino UNO development baord, users don't have to buy another WiFi development board when developing some WiFi applications. Now, This ESPduino can be gotten by the link from SmartArduino . ESPduino is shaped by the following Figure. Features Compatible with Arduino UNO R3; With WiFi; How to Use This section is just for the installation and use the Arduino IDE, and download the code into the ESPduino development board. Especially, for convenience, we have already improved the ESPduino since Sep. 30, 2016, and now you DO NOT need to press any button, when you download the code. Note that, the old version must press the button when download the code. * [[How to Use]] * [[Download the software]] * [[FAQ for ESPduino]] * [[In Summary]] * schematics pdf Applications \\ Examples [[Schematics]] [[Remote control WiFi Video Tank/Car]]","title":"Arduino   ESPduino"},{"location":"tutorials/SZDOITWiKi/Arduino---ESPduino/#general","text":"Introduction ESPduino is developed by Doit company based on the ESP8266 ESP-13, which can be compatible with Arduino UNO R3 developmen board; i.e., ESPduino=WiFi+Arduino UNO R3. By using the ESP8266 WiFi Chip and MCU, ESPduino can work with the support of WiFi. Compared to the traditional Arduino UNO development baord, users don't have to buy another WiFi development board when developing some WiFi applications. Now, This ESPduino can be gotten by the link from SmartArduino . ESPduino is shaped by the following Figure. Features Compatible with Arduino UNO R3; With WiFi;","title":"General"},{"location":"tutorials/SZDOITWiKi/Arduino---ESPduino/#how-to-use","text":"This section is just for the installation and use the Arduino IDE, and download the code into the ESPduino development board. Especially, for convenience, we have already improved the ESPduino since Sep. 30, 2016, and now you DO NOT need to press any button, when you download the code. Note that, the old version must press the button when download the code. * [[How to Use]] * [[Download the software]] * [[FAQ for ESPduino]] * [[In Summary]] * schematics pdf","title":"How to Use"},{"location":"tutorials/SZDOITWiKi/Arduino---ESPduino/#applications-examples","text":"[[Schematics]] [[Remote control WiFi Video Tank/Car]]","title":"Applications \\&amp; Examples"},{"location":"tutorials/SZDOITWiKi/Arduino---WiFi-Shield/","text":"[[User Manual]]","title":"Arduino   WiFi Shield"},{"location":"tutorials/SZDOITWiKi/Basic-Manual/","text":"Introduction DT-06 (TTL-WiFi module) is designed and developed based on ESP-M2 WiFi module from our company Shenzhen Doctors of Intelligence Technology Co., Ltd., which is extracted the TTL, EN, STATE and other pins. Importantly, the TTL-WiFi is already built-in the serial transparent transmission firmware programmed by our company (SZdoit), which can realize the transparent transmit the data to the cloud on the real-time, together with low-power control, status indictor. This board can replace the old wiring serial WiFi device to realize the data collection and control. It has the following features. * Fully compatible with the original electrical interface and physical interface for the serial transparent Bluetooth; * Built-in the industrial transparent transmission firmware V3.0 with stability and reliability by using the Web Configuration; * Built-in the high performance WiFi module ESP-M2 with size: 34mm 17mm 4mm; * Working voltage: 4.5V~6.0V, TTL working voltage: 3.3V (compatible with 5.0V); * Provided pins: STATE, TXD, RXD,EN; * Average current: 80mA; when data sent, it is 170mA; but it is 20\u03bcA at deep sleep mode; * Support serial AT command; * Support re-programmable, OTA firmware update; * Seamless transparent transmission between serial and WiFi; * Built-in HTTP Web Server, support configure parameters by web page; * Support re-connect automatically at WiFi STA mode and TCP Client; * Support set baud rate, data bit, parity check, stop bits, and/or subcontracting time; * Support baud rate (bps): 300/600/1200/2400/4800/9600/19200/38400/57600/74800/115200/ * 230400/460800/921600/1843200/3686400\uff1b * Support AP enable, self-defined SSID/password, self-defined IP and network duration; * Automatically scan the peripheral WiFi hotspot, support STA enable, DHCP, self-defined IP; * Support TCP Server, TCP Client, UDP Server, UDP Client and UDP local broadcast; * Support DNS resolution automatically for the remote sever address; * Support checking the status by AT command; * Provide IO4 to show the WiFi status; * Working temperature: -40\u2103-125\u2103; * Applications: smart home, wireless data connection and transparent transmission, smart car control, wireless serial printer, LED light industrial control etc. How to use: Click me download the datasheet How to Buy: Click me to buy","title":"Basic Manual"},{"location":"tutorials/SZDOITWiKi/Basic-Manual/#introduction","text":"DT-06 (TTL-WiFi module) is designed and developed based on ESP-M2 WiFi module from our company Shenzhen Doctors of Intelligence Technology Co., Ltd., which is extracted the TTL, EN, STATE and other pins. Importantly, the TTL-WiFi is already built-in the serial transparent transmission firmware programmed by our company (SZdoit), which can realize the transparent transmit the data to the cloud on the real-time, together with low-power control, status indictor. This board can replace the old wiring serial WiFi device to realize the data collection and control. It has the following features. * Fully compatible with the original electrical interface and physical interface for the serial transparent Bluetooth; * Built-in the industrial transparent transmission firmware V3.0 with stability and reliability by using the Web Configuration; * Built-in the high performance WiFi module ESP-M2 with size: 34mm 17mm 4mm; * Working voltage: 4.5V~6.0V, TTL working voltage: 3.3V (compatible with 5.0V); * Provided pins: STATE, TXD, RXD,EN; * Average current: 80mA; when data sent, it is 170mA; but it is 20\u03bcA at deep sleep mode; * Support serial AT command; * Support re-programmable, OTA firmware update; * Seamless transparent transmission between serial and WiFi; * Built-in HTTP Web Server, support configure parameters by web page; * Support re-connect automatically at WiFi STA mode and TCP Client; * Support set baud rate, data bit, parity check, stop bits, and/or subcontracting time; * Support baud rate (bps): 300/600/1200/2400/4800/9600/19200/38400/57600/74800/115200/ * 230400/460800/921600/1843200/3686400\uff1b * Support AP enable, self-defined SSID/password, self-defined IP and network duration; * Automatically scan the peripheral WiFi hotspot, support STA enable, DHCP, self-defined IP; * Support TCP Server, TCP Client, UDP Server, UDP Client and UDP local broadcast; * Support DNS resolution automatically for the remote sever address; * Support checking the status by AT command; * Provide IO4 to show the WiFi status; * Working temperature: -40\u2103-125\u2103; * Applications: smart home, wireless data connection and transparent transmission, smart car control, wireless serial printer, LED light industrial control etc.","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/Basic-Manual/#how-to-use-click-me-download-the-datasheet","text":"","title":"How to use: Click me download the datasheet"},{"location":"tutorials/SZDOITWiKi/Basic-Manual/#how-to-buy-click-me-to-buy","text":"","title":"How to Buy: Click me to buy"},{"location":"tutorials/SZDOITWiKi/Bluetooth-WiFi-car-chassis/","text":"Introduction UNODoit Bluetooth/WiFi car chassis, is designed based on the Arduino uno board, together with 2-channel 16-channel servo shield board to drive the car, HC-06 OR DT-06 as the Bluetooth/ WiFi communication tool. By this way, one can control the car by app via Bluetooth/wifi. Bluetooth/WiFi controller kit Bluetooth HC-06: 1pcs WiFi module DT-06 : 1pcs 2-channel motor 16-channel servo shield board : 1pcs UNO board: 1pcs How to Buy: click me to BUY APP, source code, and manual: Click me to Download","title":"Bluetooth WiFi car chassis"},{"location":"tutorials/SZDOITWiKi/Bluetooth-WiFi-car-chassis/#introduction","text":"UNODoit Bluetooth/WiFi car chassis, is designed based on the Arduino uno board, together with 2-channel 16-channel servo shield board to drive the car, HC-06 OR DT-06 as the Bluetooth/ WiFi communication tool. By this way, one can control the car by app via Bluetooth/wifi.","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/Bluetooth-WiFi-car-chassis/#bluetoothwifi-controller-kit","text":"Bluetooth HC-06: 1pcs WiFi module DT-06 : 1pcs 2-channel motor 16-channel servo shield board : 1pcs UNO board: 1pcs","title":"Bluetooth/WiFi controller kit"},{"location":"tutorials/SZDOITWiKi/Bluetooth-WiFi-car-chassis/#how-to-buy-click-me-to-buy","text":"","title":"How to Buy: click me to BUY"},{"location":"tutorials/SZDOITWiKi/Bluetooth-WiFi-car-chassis/#app-source-code-and-manual-click-me-to-download","text":"","title":"APP, source code, and manual: Click me to Download"},{"location":"tutorials/SZDOITWiKi/C3-4WD-Car-chassis/","text":"video how to buy","title":"C3 4WD Car chassis"},{"location":"tutorials/SZDOITWiKi/Crash-dumps/","text":"When the ESP8266/ESP32 encounters a fatal exception, LuaNode outputs a crash dump like this: Fatal exception (29): epc1=0x40221970 epc2=0x00000000 epc3=0x00000000 excvaddr=0x00000000 depc=0x00000000 excsave1=0x40221968","title":"Crash dumps"},{"location":"tutorials/SZDOITWiKi/Development-History/","text":"Hi, everyone, welcome to the SZDOITWiKi wiki! This wiki is originated from DOIT [Doctors of Intelligence \\ Technology Limited Comany] (www.doit.am), which was founded on April 28, 2015. Our four members are from University of Chinese Academy of Sciences . Till now, we have designed and developed many products on WiFi modules, development boards, IoT, WiFi probers, and Robotics. Certainly, these products can be found at our online shop . Till now, our company ( DOIT ) publish many different products by the following different duration. April-May 2015 Main products: NodeMCU and motor shield for the RC toys. I remember that, when we publish the first product ESP8266 development board (NodeMCU), it is very popular till now by all the lovers in the world. But where can it use directly? Therefore, we design a motor shield for the NodeMCU. This can make the wide creative makers able to use this set board to develop a RC toys, like tank/car chassis. June 2015 Main products: NodeMCU-- web setting Web setting, can make users set the route by using this board, users just set the router information by web page. It is very convenient. July-August 2015 Main products: WiFiMCU In this stage, we design and develop a Lua Node SDK, which can make the users develop many different applications based on Lua. Sep.- Oct., 2015 Main productrs: robotic platroms To let the NodeMCU be able to exihibit its performance, we design a metal module to generate mass a T sery robot tank car chassises, such as T100, T200, T300, TD200,TD300,TP100,TP200,TP300. All these tank car chassis can be controlled by Android/iOS APP with the free code (only for Android). Moreover, we also develop the corresponding video RC tank. Nov., 2015 Main products: WiFi sniffer based on openWRT WiFi sniffer is developed mainly to probe the phone MAC addresses nearby the WiFi signal source. Some one uses it to monitor the phone around people. Especially, this function is deeply studied agin in 2016, and already extends many other applications. Dec., 2015 Main products: a cloud platform based on IoT When users get the NodeMCU development board, they want to upload the sensed data to the internet. In the requirments, the IoT platform (http://cloud.doit.am/) is developed for many uses to upload the sensed data freely, and do some other IoT applications. Jan., 2016 Main products: LuaNode for ESP32 ESP32 has the WiFi and Bluetooth at the same time. It is a new concept. So, to promise the quantity and process, ESPressif company send freely us 2 samples to investigate. Therefore, we start a ESP32 project on Kickstarter, although it is not successful. Feb., 2016 Main products: Arduino WiFi shield for UNO R3 As we all know, Arduino is very popular in the world, but the WiFi shield is very expensive. Thus, we develop a WiFi shield for UNO R3, together with web server configuration. This is the first WiFi shield for UNO R3 based on ESP8266. Moreover, many Arduino lovers can use the Yun function by using this WiFi shield. Mar., 2016 Main products: MiniNodeMCU Because of the popularance of NodeMCU, we develop a type of smaller NodeMCU--MiniNodeMCU. What's more, our WiFi prober is designed from the miniNodeMCU. April, 2016 Main products: ESPduino Compatible with Arduino, ESPduino also can develop and compile many Arduino applications, but it has WiFi naturally. So, many Arduino lovers can develop fastly many IoT applications based such ESPduino board. May, 2016 Main products: WiFi prober WiFi prober has a wide applications. For exmaple, * The security can monitor a stranger entering into a residence by scaning its phone MAC; * The residence can open the door when entering into his/her living area; * The company can use it for the attence; * The superviser in the university can use it to monitor whether his/her students is in/out the laboratory\uff1b * and so on. June, 2016 Main products: a laser navigation car We start a laser navigation car for a project, which mainly realize lazer navigation and image recognization to seize a colorful ball by the color.","title":"Development History"},{"location":"tutorials/SZDOITWiKi/Development-History/#april-may-2015","text":"Main products: NodeMCU and motor shield for the RC toys. I remember that, when we publish the first product ESP8266 development board (NodeMCU), it is very popular till now by all the lovers in the world. But where can it use directly? Therefore, we design a motor shield for the NodeMCU. This can make the wide creative makers able to use this set board to develop a RC toys, like tank/car chassis.","title":"April-May 2015"},{"location":"tutorials/SZDOITWiKi/Development-History/#june-2015","text":"Main products: NodeMCU-- web setting Web setting, can make users set the route by using this board, users just set the router information by web page. It is very convenient.","title":"June 2015"},{"location":"tutorials/SZDOITWiKi/Development-History/#july-august-2015","text":"Main products: WiFiMCU In this stage, we design and develop a Lua Node SDK, which can make the users develop many different applications based on Lua.","title":"July-August 2015"},{"location":"tutorials/SZDOITWiKi/Development-History/#sep-oct-2015","text":"Main productrs: robotic platroms To let the NodeMCU be able to exihibit its performance, we design a metal module to generate mass a T sery robot tank car chassises, such as T100, T200, T300, TD200,TD300,TP100,TP200,TP300. All these tank car chassis can be controlled by Android/iOS APP with the free code (only for Android). Moreover, we also develop the corresponding video RC tank.","title":"Sep.- Oct., 2015"},{"location":"tutorials/SZDOITWiKi/Development-History/#nov-2015","text":"Main products: WiFi sniffer based on openWRT WiFi sniffer is developed mainly to probe the phone MAC addresses nearby the WiFi signal source. Some one uses it to monitor the phone around people. Especially, this function is deeply studied agin in 2016, and already extends many other applications.","title":"Nov., 2015"},{"location":"tutorials/SZDOITWiKi/Development-History/#dec-2015","text":"Main products: a cloud platform based on IoT When users get the NodeMCU development board, they want to upload the sensed data to the internet. In the requirments, the IoT platform (http://cloud.doit.am/) is developed for many uses to upload the sensed data freely, and do some other IoT applications.","title":"Dec., 2015"},{"location":"tutorials/SZDOITWiKi/Development-History/#jan-2016","text":"Main products: LuaNode for ESP32 ESP32 has the WiFi and Bluetooth at the same time. It is a new concept. So, to promise the quantity and process, ESPressif company send freely us 2 samples to investigate. Therefore, we start a ESP32 project on Kickstarter, although it is not successful.","title":"Jan., 2016"},{"location":"tutorials/SZDOITWiKi/Development-History/#feb-2016","text":"Main products: Arduino WiFi shield for UNO R3 As we all know, Arduino is very popular in the world, but the WiFi shield is very expensive. Thus, we develop a WiFi shield for UNO R3, together with web server configuration. This is the first WiFi shield for UNO R3 based on ESP8266. Moreover, many Arduino lovers can use the Yun function by using this WiFi shield.","title":"Feb., 2016"},{"location":"tutorials/SZDOITWiKi/Development-History/#mar-2016","text":"Main products: MiniNodeMCU Because of the popularance of NodeMCU, we develop a type of smaller NodeMCU--MiniNodeMCU. What's more, our WiFi prober is designed from the miniNodeMCU.","title":"Mar., 2016"},{"location":"tutorials/SZDOITWiKi/Development-History/#april-2016","text":"Main products: ESPduino Compatible with Arduino, ESPduino also can develop and compile many Arduino applications, but it has WiFi naturally. So, many Arduino lovers can develop fastly many IoT applications based such ESPduino board.","title":"April, 2016"},{"location":"tutorials/SZDOITWiKi/Development-History/#may-2016","text":"Main products: WiFi prober WiFi prober has a wide applications. For exmaple, * The security can monitor a stranger entering into a residence by scaning its phone MAC; * The residence can open the door when entering into his/her living area; * The company can use it for the attence; * The superviser in the university can use it to monitor whether his/her students is in/out the laboratory\uff1b * and so on.","title":"May, 2016"},{"location":"tutorials/SZDOITWiKi/Development-History/#june-2016","text":"Main products: a laser navigation car We start a laser navigation car for a project, which mainly realize lazer navigation and image recognization to seize a colorful ball by the color.","title":"June, 2016"},{"location":"tutorials/SZDOITWiKi/Download-the-software/","text":"(1) Download the compatible-Arduino software in the link: http://en.doit.am/espduino.php, or https://github.com/esp8266/Arduino/ and install it. (2) Install the CH340 chip driver by the following choices. Widowns \\ MAC http://bbs.smartarduino.com/showthread.php?tid=2038 Ubuntu https://github.com/esp8266/Arduino%20for%20Ubuntu (3) After installation of Arduino and CH340 driver. Open the Arduino IDE, and choose the development board type \" ESPDuino (ESP-13 module) \", as shown in the following Figure. Then, you will see the setting information. Note that, if you get the new version ESPduino (order it after Sep. 30, 2016), please further confirm whether the \"Reset Method\" is \"ESPduino-V2\" (which is also the default setting); if you get the old version (order it before Sep. 30, 2016), please choose the \"Reset Method\" is \"ESPduino-V1\". (4) Test the Arduino IDE After building the Arduino IDE, we should test whether the Arduino IDE for ESPduino board is normal by a example, the Blink, which is provided by the standard Arduino IDE, as shown in the following Figure. If it is successful, then the Arduino IDE for ESPduino IDE is ok.","title":"Download the software"},{"location":"tutorials/SZDOITWiKi/Download-the-software/#widowns-mac","text":"http://bbs.smartarduino.com/showthread.php?tid=2038","title":"Widowns \\&amp; MAC"},{"location":"tutorials/SZDOITWiKi/Download-the-software/#ubuntu","text":"https://github.com/esp8266/Arduino%20for%20Ubuntu (3) After installation of Arduino and CH340 driver. Open the Arduino IDE, and choose the development board type \" ESPDuino (ESP-13 module) \", as shown in the following Figure. Then, you will see the setting information. Note that, if you get the new version ESPduino (order it after Sep. 30, 2016), please further confirm whether the \"Reset Method\" is \"ESPduino-V2\" (which is also the default setting); if you get the old version (order it before Sep. 30, 2016), please choose the \"Reset Method\" is \"ESPduino-V1\". (4) Test the Arduino IDE After building the Arduino IDE, we should test whether the Arduino IDE for ESPduino board is normal by a example, the Blink, which is provided by the standard Arduino IDE, as shown in the following Figure. If it is successful, then the Arduino IDE for ESPduino IDE is ok.","title":"Ubuntu"},{"location":"tutorials/SZDOITWiKi/Drivers,Firmwares,-and-Tools/","text":"Drivers CP2102 Download CH341 (windows/MAC) Download Firmwares DOIT_car firmwares Click Serial2WiFi firmwares for ESP8266 Click Tools CP2102 Download CH341 (windows/MAC) Download Tcpudpdebugger: download APPs car apps only wifi car app: http://en.doit.am/DoitCar_2016_0115.apk Source Code: http://en.doit.am/Doit_Car_en_1217.zip Google Play Market: https://play.google.com/store/apps/details?id=com.doit.carset iOS ; WiFi video car app: https://github.com/SmartArduino/ESPboard/blob/master/MyWifiCar_en.apk source code: https://github.com/SmartArduino/ESPboard/blob/master/Android_Source.zip search \"doitvideocar\" at app store. DIY wifi/bluetooth/ir/tracking car app: download DoHome apps","title":"Drivers,Firmwares, and Tools"},{"location":"tutorials/SZDOITWiKi/Drivers,Firmwares,-and-Tools/#drivers","text":"CP2102 Download CH341 (windows/MAC) Download","title":"Drivers"},{"location":"tutorials/SZDOITWiKi/Drivers,Firmwares,-and-Tools/#firmwares","text":"DOIT_car firmwares Click Serial2WiFi firmwares for ESP8266 Click","title":"Firmwares"},{"location":"tutorials/SZDOITWiKi/Drivers,Firmwares,-and-Tools/#tools","text":"CP2102 Download CH341 (windows/MAC) Download Tcpudpdebugger: download","title":"Tools"},{"location":"tutorials/SZDOITWiKi/Drivers,Firmwares,-and-Tools/#apps","text":"car apps only wifi car app: http://en.doit.am/DoitCar_2016_0115.apk Source Code: http://en.doit.am/Doit_Car_en_1217.zip Google Play Market: https://play.google.com/store/apps/details?id=com.doit.carset iOS ; WiFi video car app: https://github.com/SmartArduino/ESPboard/blob/master/MyWifiCar_en.apk source code: https://github.com/SmartArduino/ESPboard/blob/master/Android_Source.zip search \"doitvideocar\" at app store. DIY wifi/bluetooth/ir/tracking car app: download DoHome apps","title":"APPs"},{"location":"tutorials/SZDOITWiKi/ESP32---ESP32/","text":"The datasheet for ESP32 module can be download for this link . Now this module can be purchased from SmartArduino . If you want to know the ESP32 boar , please move to this link .","title":"ESP32   ESP32"},{"location":"tutorials/SZDOITWiKi/ESP8266---ESP-E/","text":"Hi, everyone, since the ESP-E is very similiar to ESP-F excluding the antenna design, so we will don't temeperarily generate the ESP-E in the near future. Moreover, from the view of performance, ESP-F is better than ESP-E.","title":"ESP8266   ESP E"},{"location":"tutorials/SZDOITWiKi/ESP8266---ESP-F/","text":"As a classical WiFi module based on ESP8266, ESP-F aleady get many recognitions, and is already applied many other applications. For example, based on ESP-F, we design the NodeMCU . We already use to our many IoT solutions . The WiFi module ESP-F is manufactured by using a high-performance chip ESP8266EX. This small chip is encapsulated an enhanced Tensilica\u2019s L106 diamond series 32-bit kennel CPU with a SRAM. Thus, ESP8285 has the complete function Wi-Fi function; it not only can be applied independently, but can be used as a slaver working with other host CPU. When ESP8285 is applied as a slaver, it can start from the onboard Flash. The built-in high-speed buffer is not only benefit to improve the system performance, but optimize the store system. In addition, ESP8285 can be used as Wi-Fi adapter by SPI/SDIO or I2C/UART interface, when it is applied to other MCU design. The ESP-F module supports the standard IEEE802.11 b/g/n/e/i protocol and the complete TCP/IP protocol stack. User can use it to add the WiFi function for the installed devices, and also can be viewed as a independent network controller. Anyway, ESP-F module provides many probabilities with the best price. CE/FCC/RoHS: Download . Data Manual: Download . Online shop vvdoit.com Aliexpress , SmartArduino and banggood.","title":"ESP8266   ESP F"},{"location":"tutorials/SZDOITWiKi/ESP8266---ESP-F/#cefccrohs-download","text":"","title":"CE/FCC/RoHS: Download."},{"location":"tutorials/SZDOITWiKi/ESP8266---ESP-F/#data-manual-download","text":"","title":"Data Manual: Download."},{"location":"tutorials/SZDOITWiKi/ESP8266---ESP-F/#online-shop","text":"vvdoit.com Aliexpress , SmartArduino and banggood.","title":"Online shop"},{"location":"tutorials/SZDOITWiKi/ESP8266---ESP-S/","text":"In essense, ESP-S is very similar to ESP-F. The only difference is that ESP-F has more 6 solder point in the end than ESP-S. Therefore, in many applications. This Two WiFi modules can be changed each other. The WiFi module ESP-S is manufactured by using a high-performance chip ESP8266EX. This small chip is encapsulated an enhanced Tensilica\u2019s L106 diamond series 32-bit kennel CPU with a SRAM. Thus, ESP8285 has the complete function Wi-Fi function; it not only can be applied independently, but can be used as a slaver working with other host CPU. When ESP8285 is applied as a slaver, it can start from the onboard Flash. The built-in high-speed buffer is not only benefit to improve the system performance, but optimize the store system. In addition, ESP8285 can be used as Wi-Fi adapter by SPI/SDIO or I2C/UART interface, when it is applied to other MCU design. The ESP-S module supports the standard IEEE802.11 b/g/n/e/i protocol and the complete TCP/IP protocol stack. User can use it to add the WiFi function for the installed devices, and also can be viewed as a independent network controller. Anyway, ESP-S module provides many probabilities with the best price. The manual for ESP-S can be downloaded from this link . Now, this module can be ordered at Aliexpress , SmartArduino , and many other online shops.","title":"ESP8266   ESP S"},{"location":"tutorials/SZDOITWiKi/ESP8266---ESP32/","text":"General Introduction ESP32 is already integrated antenna and RF balun, power amplifier, low-noise amplifiers, filters, and power management module. The entire solution takes up the least amount of printed circuit board area.This board is used with 2.4 GHz dual-mode Wi-Fi and Bluetooth chips by TSMC 40nm low power technology, power and RF properties best, which is safe, reliable, and scalable to a variety of applications. Now, it can be gotten from DOIT company from the link: http://www.smartarduino.com/view.php?id=95103. The ESP32 module is originally from ESPressif, as shown in the following Figure. The Schematics for ESP32 development board can be seen at SchematicsForESP32Board Features High performance-price ratio; Small volume,easily embeded to other products; Strong function with support LWIP protocol,Freertos; Suppporting three modes: AP, STA, and AP+STA; Supporting Lua program, easily to develop. How to Use [[Crash dumps]] [[How to add your own module]] [[How to build for ESP32]] [[How to debug]] [[How to flash firmware]] [[Programming with Lua]] [[FAQ]] [[Some useful links]]","title":"ESP8266   ESP32"},{"location":"tutorials/SZDOITWiKi/ESP8266---ESP32/#general","text":"Introduction ESP32 is already integrated antenna and RF balun, power amplifier, low-noise amplifiers, filters, and power management module. The entire solution takes up the least amount of printed circuit board area.This board is used with 2.4 GHz dual-mode Wi-Fi and Bluetooth chips by TSMC 40nm low power technology, power and RF properties best, which is safe, reliable, and scalable to a variety of applications. Now, it can be gotten from DOIT company from the link: http://www.smartarduino.com/view.php?id=95103. The ESP32 module is originally from ESPressif, as shown in the following Figure. The Schematics for ESP32 development board can be seen at SchematicsForESP32Board Features High performance-price ratio; Small volume,easily embeded to other products; Strong function with support LWIP protocol,Freertos; Suppporting three modes: AP, STA, and AP+STA; Supporting Lua program, easily to develop.","title":"General"},{"location":"tutorials/SZDOITWiKi/ESP8266---ESP32/#how-to-use","text":"[[Crash dumps]] [[How to add your own module]] [[How to build for ESP32]] [[How to debug]] [[How to flash firmware]] [[Programming with Lua]] [[FAQ]] [[Some useful links]]","title":"How to Use"},{"location":"tutorials/SZDOITWiKi/ESP8266---ESPduino-32/","text":"Introduiction ESPDuino-32 board is from ESP32 module, which is compatible with Arduino. How to buy: Click here to buy Schematics: Download","title":"ESP8266   ESPduino 32"},{"location":"tutorials/SZDOITWiKi/ESP8266---ESPduino-32/#introduiction","text":"ESPDuino-32 board is from ESP32 module, which is compatible with Arduino.","title":"Introduiction"},{"location":"tutorials/SZDOITWiKi/ESP8266---ESPduino-32/#how-to-buy-click-here-to-buy","text":"","title":"How to buy: Click here to buy"},{"location":"tutorials/SZDOITWiKi/ESP8266---ESPduino-32/#schematics-download","text":"","title":"Schematics: Download"},{"location":"tutorials/SZDOITWiKi/ESP8266---NodeMCU/","text":"Introduction NodeMCU is now very popular in the world. But there are many facoteries to generate this board. So, everyday, we receive many disputes and have to handle many problems for NodeMCU. But when we get the pictures from the clients, most of them are not from our company, since our board has the printed our company logo and site. More importantly, we many develop many firmwares for this board. Maybe many other reasons, other NodeMCU boards from other companies can or cannot use it. So, please get our NodeMCU boards from the official online shop, e.g., SmartArduino . how to buy: vvdoit User Manual: View Schematics: View Firmware: view How to download firmware: View CH340G driver: Download CP2101 driver: Download Lua debug tool: Download TCP UDP Debugger for network: Download Lua Editor: Download LASH_DOWNLOAD_TOOLS from Espressif: Download","title":"ESP8266   NodeMCU"},{"location":"tutorials/SZDOITWiKi/ESP8266---NodeMCU/#introduction","text":"NodeMCU is now very popular in the world. But there are many facoteries to generate this board. So, everyday, we receive many disputes and have to handle many problems for NodeMCU. But when we get the pictures from the clients, most of them are not from our company, since our board has the printed our company logo and site. More importantly, we many develop many firmwares for this board. Maybe many other reasons, other NodeMCU boards from other companies can or cannot use it. So, please get our NodeMCU boards from the official online shop, e.g., SmartArduino . how to buy: vvdoit User Manual: View Schematics: View Firmware: view How to download firmware: View CH340G driver: Download CP2101 driver: Download Lua debug tool: Download TCP UDP Debugger for network: Download Lua Editor: Download LASH_DOWNLOAD_TOOLS from Espressif: Download","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/ESP8266---TTLtoWiFi/","text":"[[Basic Manual]] [[Some Example]]","title":"ESP8266   TTLtoWiFi"},{"location":"tutorials/SZDOITWiKi/ESP8285---ESP-1/","text":"The ESP-1 is also based on ESP8285. So, it has the same features as ESP-M1 and ESP-M2 . For example, it can bear a much high temperature to 125\u2103, small size, and completely comaptible with ESP8266. So the programmed ESP8266 code does not change anything, and can be originally used on ESP8285 modules. The pictures for ESP-1 is shown as the followings. The manual can be download from this link . Now, this board can be ordered at many online shops, like Aliexpress , SmartArduino and banggood.","title":"ESP8285   ESP 1"},{"location":"tutorials/SZDOITWiKi/ESP8285---ESP-M1/","text":"Because of the ultra-small size, ESP-M1/ESP-M2 is now very popular for many people. Moreover, this two modules are based on ESP8285 chip. Compared to the previous modules (e.g., ESP-F , ESP-S , and ESP-E ), which are based on ESP8266 chip, the differeces are obvious and listed as follows. * Small size; * Bearable a higher temperature (about +125\u2103), but ESP8266 is just +85\u2103; * The original ESP8266 code can be used on this modules (based on ESP8285, DO NOT change any code); * Support serial transpent transmission; * Support long distance with ultra-low power; * Support a onboard antenna (For ESP-M1 ). CE/FCC/RoHS We also get the CE/FCC/RoHS certifications, please clike it: click me . The WiFi module ESP-M is manufactured by using a high-performance chip ESP8285. This small chip is encapsulated an enhanced Tensilica\u2019s L106 diamond series 32-bit kennel CPU with a SRAM. Thus, ESP8285 has the complete function Wi-Fi function; it not only can be applied independently, but can be used as a slaver working with other host CPU. When ESP8285 is applied as a slaver, it can start from the onboard Flash. The built-in high-speed buffer is not only benefit to improve the system performance, but optimize the store system. In addition, ESP8285 can be used as Wi-Fi adapter by SPI/SDIO or I2C/UART interface, when it is applied to other MCU design. The ESP-M module supports the standard IEEE802.11 b/g/n/e/i protocol and the complete TCP/IP protocol stack. User can use it to add the WiFi function for the installed devices, and also can be viewed as a independent network controller. Anyway, ESP-M module provides many probabilities with the best price. The user manual can be download from this link . Now, this module can be ordered at many online shops, like Aliexpress , SmartArduino and banggood.","title":"ESP8285   ESP M1"},{"location":"tutorials/SZDOITWiKi/ESP8285---ESP-M1/#cefccrohs","text":"We also get the CE/FCC/RoHS certifications, please clike it: click me . The WiFi module ESP-M is manufactured by using a high-performance chip ESP8285. This small chip is encapsulated an enhanced Tensilica\u2019s L106 diamond series 32-bit kennel CPU with a SRAM. Thus, ESP8285 has the complete function Wi-Fi function; it not only can be applied independently, but can be used as a slaver working with other host CPU. When ESP8285 is applied as a slaver, it can start from the onboard Flash. The built-in high-speed buffer is not only benefit to improve the system performance, but optimize the store system. In addition, ESP8285 can be used as Wi-Fi adapter by SPI/SDIO or I2C/UART interface, when it is applied to other MCU design. The ESP-M module supports the standard IEEE802.11 b/g/n/e/i protocol and the complete TCP/IP protocol stack. User can use it to add the WiFi function for the installed devices, and also can be viewed as a independent network controller. Anyway, ESP-M module provides many probabilities with the best price. The user manual can be download from this link . Now, this module can be ordered at many online shops, like Aliexpress , SmartArduino and banggood.","title":"CE/FCC/RoHS"},{"location":"tutorials/SZDOITWiKi/ESP8285---ESP-M2/","text":"At most case, ESP-M2 is similar to ESP-M1 . So, many usages and applications can be referred to ESP-M1. Just the ESP-M1 has the onboard antenna. And the size is different. ESP-M2 is shown in the following. CE/FCC/RoHS We also get the CE/FCC/RoHS certifications, please clike it: click me . The user manual can be downloaded from this link . Now, this board can be ordered at many online shops, like Aliexpress , SmartArduino and banggood.","title":"ESP8285   ESP M2"},{"location":"tutorials/SZDOITWiKi/ESP8285---ESP-M2/#cefccrohs","text":"We also get the CE/FCC/RoHS certifications, please clike it: click me . The user manual can be downloaded from this link . Now, this board can be ordered at many online shops, like Aliexpress , SmartArduino and banggood.","title":"CE/FCC/RoHS"},{"location":"tutorials/SZDOITWiKi/FAQ-for-ESPduino/","text":"A: * Confirm the software Arduino IDE is for ESPduino (https://github.com/esp8266/Arduino/) * Confirm whether the CH340 driver is installed. * Confirm whether the PC port for ESPduino is right.","title":"FAQ for ESPduino"},{"location":"tutorials/SZDOITWiKi/FAQ/","text":"When you are trying to compile esp-open-sdk or build your firmware, you may face some errors as below. configure: error: missing required tool: makeinfo Install texinfo by running the following commond to fix it: sudo apt-get install texinfo cannot create autom4te.cache This is a permission problem, change the permission of directory esp-open-sdk/ to 777. Input the following commond on terminal: sudo chmod 777 -R /opt/esp-open-sdk configure: error: could not find GNU awk sudo apt-get install gawk configure: error: could not find GNU libtool = 1.5.26 sudo apt-get install libtool If it dosen't work, install libtool-bin: sudo apt-get install libtool-bin configure: error: could not find curses header, required for the kconfig frontends sudo apt-get install libncurses5-dev configure: error: expat is missing or unusable sudo apt-get install libexpat1-dev configure: error: could not find GNU automake = 1.10 sudo apt-get install automake When you compile the esp-open-sdk, occurs some errors like the following screenshot: ust ignore it, execute make STANDALONE=y again, it will be ok then.","title":"FAQ"},{"location":"tutorials/SZDOITWiKi/Features/","text":"High performance-price ratio; Small volume,easily embeded to other products; Strong function with support LWIP protocol,Freertos; Suppporting three modes: AP, STA, and AP+STA; Supporting Lua program, easily to develop.","title":"Features"},{"location":"tutorials/SZDOITWiKi/Get-Started/","text":"DOIT company is specialized in the research and development on WiFi, such as WiFi moduels, WiFi boards, and other WiFi applications, which are listed as follows. Development Boards NodeMCU ; NodeMCU Kit; miniNodeMCU; WiFi shield for Arduino UNO; ESPduino; ESPduino kit; ESP8266 Grove kit; ESP32 WiFi Probers WiFi Robot Smart robot tank/car chassis; Humanoid; IoT Solutions Smart massage chair; Self-checkout counters;","title":"Get Started"},{"location":"tutorials/SZDOITWiKi/Get-Started/#development-boards","text":"NodeMCU ; NodeMCU Kit; miniNodeMCU; WiFi shield for Arduino UNO; ESPduino; ESPduino kit; ESP8266 Grove kit; ESP32","title":"Development Boards"},{"location":"tutorials/SZDOITWiKi/Get-Started/#wifi-probers","text":"","title":"WiFi Probers"},{"location":"tutorials/SZDOITWiKi/Get-Started/#wifi-robot","text":"Smart robot tank/car chassis; Humanoid;","title":"WiFi Robot"},{"location":"tutorials/SZDOITWiKi/Get-Started/#iot-solutions","text":"Smart massage chair; Self-checkout counters;","title":"IoT Solutions"},{"location":"tutorials/SZDOITWiKi/Home/","text":"\u4e2d\u6587\u7248WiKi WiKi for English Version Hi, everyone, welcome to Shenzhen DOIT (Doctors of Intelligence \\ Technology) company . Till now, we have the main products on * WiFi module , * development board , * WiFi prober , * IoT Solutions , * Robot Tank Car Chassis * and robotics . More details, please read the right column for the required documents. Some videos Watch the videos Where to buy Online shops: * DOIT shop SmartArduino AliExpress Shop Amazon shop Who we are Our company (Shenzhen Doctors of Intelligence \\ Technology Co. Ltd, SZDOIT) was build up 2014. After several years, our HK company is also formed, and named as HK Doctors of Intelligence \\ Technology Co. Ltd. Now, SZDOIT already has 18 members with about 600 m^2, and is speciallized in: Manufacturer of ESP8266/8285 WiFi module WiFi module OpenSource Hardwares Robotics Provider Solutions for IoT and others We can do WiFi module Development board IoT solutions (from module,board design, App, software, and cloud server) Robotics Visual applications in industrial application Makers eduaction Join Our Community FaceBook: Facebook Twitter: Twitter Youtube: Youtube Pinterest: Pinterest Instagram: Instagram Contact Us E-mails: yichone@doit.am,yichoneyi@163.com Skype: yichone WhatsApp:+86-18676662425 Wechat: 18676662425 Where we are Addr.: Unit 401, West Bulding 2, Mingqi Science and Technology Park, Pingshan Road 1, Xili Town, Nanshan Distr., Shenzhen, Guangdong, China, 518052 Subway station: Line 5 to University Town , and then go out from C EXIT ahead about 500 meters . English version subway Useful Links doitshop Our online shop: SmartArduino , AliExpress Shop Our offical site: www.doit.am","title":"Home"},{"location":"tutorials/SZDOITWiKi/Home/#wiki","text":"","title":"\u4e2d\u6587\u7248WiKi"},{"location":"tutorials/SZDOITWiKi/Home/#wiki-for-english-version","text":"Hi, everyone, welcome to Shenzhen DOIT (Doctors of Intelligence \\ Technology) company . Till now, we have the main products on * WiFi module , * development board , * WiFi prober , * IoT Solutions , * Robot Tank Car Chassis * and robotics . More details, please read the right column for the required documents.","title":"WiKi for English Version"},{"location":"tutorials/SZDOITWiKi/Home/#some-videos","text":"Watch the videos","title":"Some videos"},{"location":"tutorials/SZDOITWiKi/Home/#where-to-buy","text":"Online shops: * DOIT shop SmartArduino AliExpress Shop Amazon shop","title":"Where to buy"},{"location":"tutorials/SZDOITWiKi/Home/#who-we-are","text":"Our company (Shenzhen Doctors of Intelligence \\ Technology Co. Ltd, SZDOIT) was build up 2014. After several years, our HK company is also formed, and named as HK Doctors of Intelligence \\ Technology Co. Ltd. Now, SZDOIT already has 18 members with about 600 m^2, and is speciallized in: Manufacturer of ESP8266/8285 WiFi module WiFi module OpenSource Hardwares Robotics Provider Solutions for IoT and others","title":"Who we are"},{"location":"tutorials/SZDOITWiKi/Home/#we-can-do","text":"WiFi module Development board IoT solutions (from module,board design, App, software, and cloud server) Robotics Visual applications in industrial application Makers eduaction","title":"We can do"},{"location":"tutorials/SZDOITWiKi/Home/#join-our-community","text":"FaceBook: Facebook Twitter: Twitter Youtube: Youtube Pinterest: Pinterest Instagram: Instagram","title":"Join Our Community"},{"location":"tutorials/SZDOITWiKi/Home/#contact-us","text":"E-mails: yichone@doit.am,yichoneyi@163.com Skype: yichone WhatsApp:+86-18676662425 Wechat: 18676662425","title":"Contact Us"},{"location":"tutorials/SZDOITWiKi/Home/#where-we-are","text":"Addr.: Unit 401, West Bulding 2, Mingqi Science and Technology Park, Pingshan Road 1, Xili Town, Nanshan Distr., Shenzhen, Guangdong, China, 518052 Subway station: Line 5 to University Town , and then go out from C EXIT ahead about 500 meters . English version subway","title":"Where we are"},{"location":"tutorials/SZDOITWiKi/Home/#useful-links","text":"doitshop Our online shop: SmartArduino , AliExpress Shop Our offical site: www.doit.am","title":"Useful Links"},{"location":"tutorials/SZDOITWiKi/How-to-Use/","text":"Warm Prompt If you order this board after Sep. 30, 2016, then don't need to press any button, but the old version still need to press the button. About the new version, to download the code, just by the following two methods: (1) Change the boards.txt file. Search the boards.txt file within the installation Arduino files in your PC by using the txt file downloaded in the following link: http://8266.doit.am/boards.txt, and then, you can choose the board type as \" ESPduino (ESP-13 Module) \", and the \" Reset Method \" is \" ESPduino-V2 \". (2) Select the development board type as \" Generic ESP8266 Module \", and choose the \" Reset Method \" as \" nodemcu \", as shown in the following picture. Then you can download the code into the board.","title":"How to Use"},{"location":"tutorials/SZDOITWiKi/How-to-Use/#warm-prompt","text":"If you order this board after Sep. 30, 2016, then don't need to press any button, but the old version still need to press the button. About the new version, to download the code, just by the following two methods: (1) Change the boards.txt file. Search the boards.txt file within the installation Arduino files in your PC by using the txt file downloaded in the following link: http://8266.doit.am/boards.txt, and then, you can choose the board type as \" ESPduino (ESP-13 Module) \", and the \" Reset Method \" is \" ESPduino-V2 \". (2) Select the development board type as \" Generic ESP8266 Module \", and choose the \" Reset Method \" as \" nodemcu \", as shown in the following picture. Then you can download the code into the board.","title":"Warm Prompt"},{"location":"tutorials/SZDOITWiKi/How-to-add-your-own-module/","text":"To add your own module is easy. Just follow the steps below: Add the module source code to the path: LuaNode_Esp32/components/modules If you add a module, say my_module, and your code named my_module.c, then you should register your module. Use the macro named LUANODE_MODULE to register your module. // The registration macro // The first parameter MY_MODULE is a string to be used for registration. Use your module name. // The second parameter is the module name to be required in lua, you invoke the methods in your module by using this name. // The third parameter is a key-value map for your module methods and their names. // The last parameter is a init function, which will be called when module initialize. Usually, you can set it for NULL. LUANODE_MODULE(MY_MODULE, my_module , my_module_map, NULL); How to add methods to your module? Add your methods as well as their name to the key-value map mentioned above. // The module function map // In this example, we have two custom methods for my_module. The two methods are my_module_start and my_module_stop, // and their corresponding name is start and stop respectively. static const LUA_REG_TYPE my_module_map[] = { { LSTRKEY( start ), LFUNCVAL( my_module_start ) }, { LSTRKEY( stop ), LFUNCVAL( my_module_stop ) }, { LNILKEY, LNILVAL } }; The implementation of your method: void my_module_start(void) { printf( My module start\\n ); } void my_module_stop(void) { printf( My module stop\\n ); } The methods only output test message. After adding your module, you can invoke them in Lua like this: my_module.start(); my_module.stop();","title":"How to add your own module"},{"location":"tutorials/SZDOITWiKi/How-to-build-for-ESP32/","text":"Requirements: The following tools are required, use apt-get to install them. GNU autoconf, libtool, libtool-bin GNU flex, bison, gawk, libexpat1-dev Windows: We utilize VirtualBox (VB) with Ubuntu installed as build environment. If your OS is Linux, you can also setup the build environment according the following steps: Download and install VirtualBox-5.0.16-105871-Win (You'd better install the latest version, since I found that the older version such as 4.x cannot install the VB Guest Additions) Download ubuntu-15.10-desktop-amd64.iso and install it on VB. Make sure that asign more than 1G RAM and 12G Hard Disk for this virtual machine. The tool chain build process require much memory! Setup share file folder: Settings- Share Folders- Add new shared folder, input your share folder path and the select Make Permanent, Note that do not select Auto Mount. Launch Ubuntu and then create a folder to mount the share folder, I create a folder, named share, in the path /mnt. Type the commond in the terminal to mount share folder: sudo mount -t vboxsf share /mnt/share Note: if you mount failed, check whether the module vboxsf is exist by executing commond c lsmod | grep vboxsf . If nothing found, maybe the Guest Additions are not installed correctly. Try to install that again or upgrade your VirtualBox to the latest version. * 3. Download toolchain: Before downloading, make sure that the git has been installed, if not, install it by sudo apt-get install git. I create path /opt/Espressif and then install to sdk to it, then make the current user the owner: ```c sudo chown $USER /opt/Espressif/; Execute the following commond to download toolchain: cd /opt/Espressif/ git clone -b esp108-1.21.0 git://github.com/jcmvbkbc/crosstool-NG.git * 4. Install toolchain: Before installing, make sure that all the required tools list in Requirements are installed on your virtual machine. Type the following commands to build the toolchain. ```c cd crosstool-NG ./bootstrap ./configure --prefix=`pwd` make make install ./ct-ng xtensa-esp108-elf ./ct-ng build After installing the toolchain, export the bin path by the following commond, then you can build your source on your machine! Note: if your machine is not enough memory, the error such as Build failed in step: 'installing pass-2 core C compiler' may occur. The following screenshot shows the error: * 6. After installing the toolchain, export the bin path by the following commond, then you can build your source on your machine! export PATH=/opt/Espressif/crosstool-NG/builds/xtensa-esp108-elf/bin:$PATH Now that you can place your source in the share folder, build it with your virtual machine. Build App: Create a directory, say LuaNode, and then clone the LuaNode project to it: git clone --recursive https://github.com/Nicholas3388/LuaNode.git Create a Bin folder for LuaNode, say LuaNode_Bin, you should place LuaNode_Bin and LuaNode_Esp32 at the same directory. Modify the gen_misc.sh, setup the following three variables: SDK_PATH, BIN_PATH, and APP_NAME. SDK_PATH is the path of LuaNode_Esp32; BIN_PATH is the path of LuaNode_Bin; APP is the path of the application that you want to build. The apps you can build is in the apps folder. Start to build by input ./gen_misc.sh in your shell. Linux: System requiement: RAM 1G; Hard Disk 10G Setup the build environment as that on Windows:) Mac OS: Download and install VirtualBox for Mac Assign memory 1G and hard disk 12G for the virtual machine Setup the build environment as that on Windows:) HOW TO BUILD (For ESP8266): Requirements: The required tools are the same as those list in the section How To Build for ESP8266. But the firmware for ESP32 utilize different toolchain. Windows: Follow the Step 1~3 list in How To Build for ESP32. Create a new directory for toolchain by executing the commond: sudo mkdir /opt/esp-open-sdk. Download the latest toolchain: git clone --recursive https://github.com/pfalcon/esp-open-sdk.git /opt/esp-open-sdk Install the toolchain (If you are not in the toolchain directory now, change directory first cd /opt/Espressif/): 'make STANDALONE=y' Setup PATH variable: export PATH=/opt/esp-open-sdk/xtensa-lx106-elf/bin:$PATH Note: You have to export PATH again if you restart the shell. If you don't want to reqeat this step, you can place the toolchain directory to the .bashrc file. If you prefer IDE, such as Eclipse, you can also build the firmware with Eclipse. To setup Eclipse, follow the steps list below: Download and install the Unofficial Development Kit for Espressif ESP8266 Download and install the Java Runtime x86 jre-7uXX-windows-i586.exe Download and install Eclipse Mars x86 to develop in C++ (eclipse-cpp-mars-R-win32.zip) . Unpack the archive to the root of drive C. Note: You should place the Eclipse under the path C:, since the install-mingw-package.bat run in step 5 will search the path. If install-mingw-package.bat run failed, it may probably you didn't place Eclipse in C: Download and install MinGW . Run the downloader mingw-get-setup.exe, the installation process to select without GUI, ie uncheck \"... also install support for the graphical user interface\". Run from the file install-mingw-package.bat. He will establish the basic modules for MinGW, installation should proceed without error. Start the Eclipse Luna from the directory c:\\eclipse\\eclipse.exe In Eclipse, select File - Import - General - Existing Project into Workspace, in the line Select root directory, select the directory C:\\Espressif\\examples and import work projects. Further, the right to select the Make Target project, such as hello-world and run the target All the assembly, while in the console window should display the progress of the build. To select the target firmware flash. Now that you can build firmware using Eclipse, if you have any questions, go to ESP8266 Community Forum, read this post for details. Linux: Setup as that in Windows VirtualBox Mac OS: Setup as in Windows","title":"How to build for ESP32"},{"location":"tutorials/SZDOITWiKi/How-to-build-for-ESP32/#linux","text":"System requiement: RAM 1G; Hard Disk 10G Setup the build environment as that on Windows:)","title":"Linux:"},{"location":"tutorials/SZDOITWiKi/How-to-build-for-ESP32/#mac-os","text":"Download and install VirtualBox for Mac Assign memory 1G and hard disk 12G for the virtual machine Setup the build environment as that on Windows:)","title":"Mac OS:"},{"location":"tutorials/SZDOITWiKi/How-to-build-for-ESP32/#how-to-build-for-esp8266","text":"Requirements: The required tools are the same as those list in the section How To Build for ESP8266. But the firmware for ESP32 utilize different toolchain.","title":"HOW TO BUILD (For ESP8266):"},{"location":"tutorials/SZDOITWiKi/How-to-build-for-ESP32/#windows","text":"Follow the Step 1~3 list in How To Build for ESP32. Create a new directory for toolchain by executing the commond: sudo mkdir /opt/esp-open-sdk. Download the latest toolchain: git clone --recursive https://github.com/pfalcon/esp-open-sdk.git /opt/esp-open-sdk Install the toolchain (If you are not in the toolchain directory now, change directory first cd /opt/Espressif/): 'make STANDALONE=y' Setup PATH variable: export PATH=/opt/esp-open-sdk/xtensa-lx106-elf/bin:$PATH Note: You have to export PATH again if you restart the shell. If you don't want to reqeat this step, you can place the toolchain directory to the .bashrc file. If you prefer IDE, such as Eclipse, you can also build the firmware with Eclipse. To setup Eclipse, follow the steps list below: Download and install the Unofficial Development Kit for Espressif ESP8266 Download and install the Java Runtime x86 jre-7uXX-windows-i586.exe Download and install Eclipse Mars x86 to develop in C++ (eclipse-cpp-mars-R-win32.zip) . Unpack the archive to the root of drive C. Note: You should place the Eclipse under the path C:, since the install-mingw-package.bat run in step 5 will search the path. If install-mingw-package.bat run failed, it may probably you didn't place Eclipse in C: Download and install MinGW . Run the downloader mingw-get-setup.exe, the installation process to select without GUI, ie uncheck \"... also install support for the graphical user interface\". Run from the file install-mingw-package.bat. He will establish the basic modules for MinGW, installation should proceed without error. Start the Eclipse Luna from the directory c:\\eclipse\\eclipse.exe In Eclipse, select File - Import - General - Existing Project into Workspace, in the line Select root directory, select the directory C:\\Espressif\\examples and import work projects. Further, the right to select the Make Target project, such as hello-world and run the target All the assembly, while in the console window should display the progress of the build. To select the target firmware flash. Now that you can build firmware using Eclipse, if you have any questions, go to ESP8266 Community Forum, read this post for details.","title":"Windows:"},{"location":"tutorials/SZDOITWiKi/How-to-build-for-ESP32/#linux_1","text":"Setup as that in Windows VirtualBox","title":"Linux:"},{"location":"tutorials/SZDOITWiKi/How-to-build-for-ESP32/#mac-os_1","text":"Setup as in Windows","title":"Mac OS:"},{"location":"tutorials/SZDOITWiKi/How-to-debug/","text":"I use SecureCRT to monitor the output from UART0. When you try to utilize this tool, you should setup serial as bellow: Note: In the Session Options, you must uncheck XON/XOFF, otherwise, you won't be able to input anything via serial!","title":"How to debug"},{"location":"tutorials/SZDOITWiKi/How-to-flash-firmware/","text":"Flash tool for Windows: For ESP8266: You can download the windows flash tool (for Esp8266) HERE . This tool is official Espressif flash tool. You can also use esptool to flash the bin files on Linux, instead of Espressif flash tool. For ESP32: Download the flash tool (for Esp32) HERE Flash address The images flash to the address list below: For ESP8266: blank.bin -- 0xfe000 esp_init_data_default.bin -- 0x7c000 0x00000.bin -- 0x00000 0x40000.bin -- 0x40000 For ESP32: blank.bin -- 0xfe000 boot.bin -- 0x00000 drom0.bin -- 0x04000 irom0_flash.bin -- 0x40000 Note: The baudrate to flash for Esp32 must be 230400, while the default baudrate for Esp8266 is 115200, this can be changed.","title":"How to flash firmware"},{"location":"tutorials/SZDOITWiKi/How-to-flash-firmware/#flash-tool-for-windows","text":"For ESP8266: You can download the windows flash tool (for Esp8266) HERE . This tool is official Espressif flash tool. You can also use esptool to flash the bin files on Linux, instead of Espressif flash tool. For ESP32: Download the flash tool (for Esp32) HERE","title":"Flash tool for Windows:"},{"location":"tutorials/SZDOITWiKi/How-to-flash-firmware/#flash-address","text":"The images flash to the address list below: For ESP8266: blank.bin -- 0xfe000 esp_init_data_default.bin -- 0x7c000 0x00000.bin -- 0x00000 0x40000.bin -- 0x40000 For ESP32: blank.bin -- 0xfe000 boot.bin -- 0x00000 drom0.bin -- 0x04000 irom0_flash.bin -- 0x40000 Note: The baudrate to flash for Esp32 must be 230400, while the default baudrate for Esp8266 is 115200, this can be changed.","title":"Flash address"},{"location":"tutorials/SZDOITWiKi/In-Summary/","text":"Download the right software by the given links; Install the CH340 driver; Choose the development board type as \"ESPduino(ESP-13 module)\"; Confirm whether the \"Reset Method\" is \"ESPduino-V2\" OR \"ESPduino-V1\"; Test the Arduino IDE for ESPduino development board.","title":"In Summary"},{"location":"tutorials/SZDOITWiKi/Installation-for-T-series-of-Tank/","text":"Introduction This document contains the basic assembly instructions for the T-series tank chassis and the wiring guidelines for connecting the motors to the DOIT NodeMCU Kit. Although the T300 tank chassis is used in this document, the instructions can be equally applied to any other T-series tank chassis (i.e.\uff0cT100, T200, T600, T800, mini T100 and T900) Installation Manual: Download How to Buy: Buy BUY T100 tank chassis BUY T200 tank chassis BUY T900 tank chassis BUY mini T100 tank chassis","title":"Installation for T series of Tank"},{"location":"tutorials/SZDOITWiKi/Installation-for-T-series-of-Tank/#introduction","text":"This document contains the basic assembly instructions for the T-series tank chassis and the wiring guidelines for connecting the motors to the DOIT NodeMCU Kit. Although the T300 tank chassis is used in this document, the instructions can be equally applied to any other T-series tank chassis (i.e.\uff0cT100, T200, T600, T800, mini T100 and T900)","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/Installation-for-T-series-of-Tank/#installation-manual-download","text":"","title":"Installation Manual: Download"},{"location":"tutorials/SZDOITWiKi/Installation-for-T-series-of-Tank/#how-to-buy-buy","text":"BUY T100 tank chassis BUY T200 tank chassis BUY T900 tank chassis BUY mini T100 tank chassis","title":"How to Buy: Buy"},{"location":"tutorials/SZDOITWiKi/Installation-for-TS100/","text":"Introduction The TS100 has a shock absorption suspention metal tank chassis, which has the following Features. * All wheels are metal, and installed by cup bearing for the bearing wheels; * This chassis has a good shock absorption performance; * The design is novel, and pre-served many locations to install control board or servos; * The chassis can connected the 4mm, 5mm motor for the connection. Reminder Although this manual is for TS100 tank chassis, in fact, it can used for many other TS series tank chassis, like TS300, TS600, TS900, and other shock absorption tank chassises. User manual: Download How to buy: Buy","title":"Installation for TS100"},{"location":"tutorials/SZDOITWiKi/Installation-for-TS100/#introduction","text":"The TS100 has a shock absorption suspention metal tank chassis, which has the following Features. * All wheels are metal, and installed by cup bearing for the bearing wheels; * This chassis has a good shock absorption performance; * The design is novel, and pre-served many locations to install control board or servos; * The chassis can connected the 4mm, 5mm motor for the connection.","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/Installation-for-TS100/#reminder","text":"Although this manual is for TS100 tank chassis, in fact, it can used for many other TS series tank chassis, like TS300, TS600, TS900, and other shock absorption tank chassises.","title":"Reminder"},{"location":"tutorials/SZDOITWiKi/Installation-for-TS100/#user-manual-download","text":"","title":"User manual: Download"},{"location":"tutorials/SZDOITWiKi/Installation-for-TS100/#how-to-buy-buy","text":"","title":"How to buy: Buy"},{"location":"tutorials/SZDOITWiKi/Instructions-for-MINI-T100/","text":"This document is for the installation for mini T100 tank chassis. mini T100 Installation: Download How to buy: Buy","title":"Instructions for MINI T100"},{"location":"tutorials/SZDOITWiKi/Introduction/","text":"ESP32 is already integrated antenna and RF balun, power amplifier, low-noise amplifiers, filters, and power management module. The entire solution takes up the least amount of printed circuit board area.This board is used with 2.4 GHz dual-mode Wi-Fi and Bluetooth chips by TSMC 40nm low power technology, power and RF properties best, which is safe, reliable, and scalable to a variety of applications. Now, it can be gotten from DOIT company from the link: http://www.smartarduino.com/view.php?id=95103. The ESP32 module is originally from ESPressif, as shown in the following Figure.","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/MINI-T100/","text":"This document is for the installation for mini T100 tank chassis. mini T100 Installation: Download , watch video How to buy: Buy","title":"MINI T100"},{"location":"tutorials/SZDOITWiKi/Prober-Preface/","text":"Based on the wifi probe principle, and comined with our software and hardeware, we have already developed and invegisted a series wifi probe products. If the user's phone is already open the wifi function (i.e., wifi is open at the setting), then we can get the following data (which are very useful for the data analyse): * Deveice MAC address, including the source and destination; * WiFi signal strength; * Frame small catergory; * Frame big catergory; * channel * RSSI, etc. Specifications Automatically probe the uniqe ID (i.e., MAC address) in the probing scope of users'phone; Automatically recorder the staying time, leaving time, and starting time; Users don't take in any other actions, don't use the app, or connect the wifi network; Can probe pc, phone, and other wifi devices. Features Even if the use don't connect the wifi, if the wifi function is open at the phone setting, our wifi probe can probe the phone and get some important information. By using these information, we can do many projects, like user's location, users statistics, and user phone brand statictics, and other analyze. Scratch all the packages at all channels (can probe the iphone, the mac address is frame only at the probe phase, and it is real at other phases.) We also can probe the phones, even if the phone is connected (usually, it is difficult to do it). We can provide the customerized requirments, since we provide one-stop solution, including the module design and generation , firmware development, location algorithm, software and app development. conveniently integrated, since we can design any size and shape by your requirements. A wifi board is developed to be able to probe 2.4G and 5G. Probe typs [[serial wifi probe]] [signal WiFi transmission probe] [double WiFi transmission probe] [double WiFi transmission 2.4G 5G probe] [GPRS transmission probe] [WiFi location] [customer statistics] manage system http://tanzhen.doit.am/ account: demo@doit.am; password: 000000 Remider In general, the probe is used with other devices, e.g., router, advertized devices. After collect these important information, then upload to the cloud to data processing and analyzing. Downloads usb drivers documents and software\uff1a download video video\uff1a watch Support mail: yichone@doit.am skype: yichone, whatsapp: 008618676662425","title":"Prober Preface"},{"location":"tutorials/SZDOITWiKi/Prober-Preface/#specifications","text":"Automatically probe the uniqe ID (i.e., MAC address) in the probing scope of users'phone; Automatically recorder the staying time, leaving time, and starting time; Users don't take in any other actions, don't use the app, or connect the wifi network; Can probe pc, phone, and other wifi devices.","title":"Specifications"},{"location":"tutorials/SZDOITWiKi/Prober-Preface/#features","text":"Even if the use don't connect the wifi, if the wifi function is open at the phone setting, our wifi probe can probe the phone and get some important information. By using these information, we can do many projects, like user's location, users statistics, and user phone brand statictics, and other analyze. Scratch all the packages at all channels (can probe the iphone, the mac address is frame only at the probe phase, and it is real at other phases.) We also can probe the phones, even if the phone is connected (usually, it is difficult to do it). We can provide the customerized requirments, since we provide one-stop solution, including the module design and generation , firmware development, location algorithm, software and app development. conveniently integrated, since we can design any size and shape by your requirements. A wifi board is developed to be able to probe 2.4G and 5G.","title":"Features"},{"location":"tutorials/SZDOITWiKi/Prober-Preface/#probe-typs","text":"[[serial wifi probe]] [signal WiFi transmission probe] [double WiFi transmission probe] [double WiFi transmission 2.4G 5G probe] [GPRS transmission probe] [WiFi location] [customer statistics]","title":"Probe typs"},{"location":"tutorials/SZDOITWiKi/Prober-Preface/#manage-system","text":"http://tanzhen.doit.am/ account: demo@doit.am; password: 000000","title":"manage system"},{"location":"tutorials/SZDOITWiKi/Prober-Preface/#remider","text":"In general, the probe is used with other devices, e.g., router, advertized devices. After collect these important information, then upload to the cloud to data processing and analyzing.","title":"Remider"},{"location":"tutorials/SZDOITWiKi/Prober-Preface/#downloads","text":"usb drivers documents and software\uff1a download","title":"Downloads"},{"location":"tutorials/SZDOITWiKi/Prober-Preface/#video","text":"video\uff1a watch","title":"video"},{"location":"tutorials/SZDOITWiKi/Prober-Preface/#support","text":"mail: yichone@doit.am skype: yichone, whatsapp: 008618676662425","title":"Support"},{"location":"tutorials/SZDOITWiKi/Programming-with-Lua/","text":"How to use node module Restart your device node.restart() How to use file module Create a file on file system (SPIFFS) file.open( yourFile.lua , w+ ) -- if the file is not exist, create one file.write( Input your content here ) --file.writeline( Your content here ) -- write a line file.close() Read an existing file from file system file.open( yourFile.lua , r ) file.read() -- Use file.read(n) to read the first n characters of the file --file.readline() -- read a line file.close() Append something new to an existing file file.open( yourFile.lua , a ) file.write( Your content here ) file.close() Remove file from file system file.remove( yourFile.lua ) How to encode/decode with cjson module encodeString = cjson.encode({key1=value1, key2=value2}) print(encodeString) -- {'key1':'value1', 'key2':'value2'} decodeResult = cjson.decode(encodeString) How to use base64 The utils module contains some useful tools, such as base64, date tool, etc. More useful tools will be added to this module, then user can invoke them from this module. str = hello world ; encrypt = utils.base64_encode(str); decrypt = utils.base64_decode(encrypt); How to use template module Test The template module is a sample to show users how to create their own module. Invoke the start and stop method to test. template.start() template.stop()","title":"Programming with Lua"},{"location":"tutorials/SZDOITWiKi/Programming-with-Lua/#how-to-use-node-module","text":"","title":"How to use node module"},{"location":"tutorials/SZDOITWiKi/Programming-with-Lua/#restart-your-device","text":"node.restart()","title":"Restart your device"},{"location":"tutorials/SZDOITWiKi/Programming-with-Lua/#how-to-use-file-module","text":"","title":"How to use file module"},{"location":"tutorials/SZDOITWiKi/Programming-with-Lua/#create-a-file-on-file-system-spiffs","text":"file.open( yourFile.lua , w+ ) -- if the file is not exist, create one file.write( Input your content here ) --file.writeline( Your content here ) -- write a line file.close()","title":"Create a file on file system (SPIFFS)"},{"location":"tutorials/SZDOITWiKi/Programming-with-Lua/#read-an-existing-file-from-file-system","text":"file.open( yourFile.lua , r ) file.read() -- Use file.read(n) to read the first n characters of the file --file.readline() -- read a line file.close()","title":"Read an existing file from file system"},{"location":"tutorials/SZDOITWiKi/Programming-with-Lua/#append-something-new-to-an-existing-file","text":"file.open( yourFile.lua , a ) file.write( Your content here ) file.close()","title":"Append something new to an existing file"},{"location":"tutorials/SZDOITWiKi/Programming-with-Lua/#remove-file-from-file-system","text":"file.remove( yourFile.lua )","title":"Remove file from file system"},{"location":"tutorials/SZDOITWiKi/Programming-with-Lua/#how-to-encodedecode-with-cjson-module","text":"encodeString = cjson.encode({key1=value1, key2=value2}) print(encodeString) -- {'key1':'value1', 'key2':'value2'} decodeResult = cjson.decode(encodeString)","title":"How to encode/decode with cjson module"},{"location":"tutorials/SZDOITWiKi/Programming-with-Lua/#how-to-use-base64","text":"The utils module contains some useful tools, such as base64, date tool, etc. More useful tools will be added to this module, then user can invoke them from this module. str = hello world ; encrypt = utils.base64_encode(str); decrypt = utils.base64_decode(encrypt);","title":"How to use base64"},{"location":"tutorials/SZDOITWiKi/Programming-with-Lua/#how-to-use-template-module","text":"Test The template module is a sample to show users how to create their own module. Invoke the start and stop method to test. template.start() template.stop()","title":"How to use template module"},{"location":"tutorials/SZDOITWiKi/Robot---RC-Robot/","text":"Introduction The followings are the manual and source code for the remote control control robot. This app is applicable for the followings. APP download PS2 Car","title":"Robot   RC Robot"},{"location":"tutorials/SZDOITWiKi/Robot---RC-Robot/#introduction","text":"The followings are the manual and source code for the remote control control robot. This app is applicable for the followings.","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/Robot---RC-Robot/#app-download","text":"PS2 Car","title":"APP download"},{"location":"tutorials/SZDOITWiKi/Robot---Wireless-WiFi-Tank-Car/","text":"[video] [[4WD WiFi car chassis]] [[2WD WiFi TANK car chassis]] [[2WD WiFi car chassis]] [[Bluetooth/WiFi car chassis]]","title":"Robot   Wireless WiFi Tank Car"},{"location":"tutorials/SZDOITWiKi/Robot---Wireless-WiFi-Video-Tank-Car/","text":"Video: Watch we have the following video control versions as follows. If the car have 4 motors, please choose 4wd ones. [[2wd video car]] [[4WD Video Car]] Reminder the default password is 12345678, and the wifi signal name is doit_tank; since the working voltage of ESPduino is 6-18V, and the router is 5V, so we can use portable phone power for router; when you fix the ESPduino rc kit, need to use copper coupling to support it to avoid bad for short electronic circuit.","title":"Robot   Wireless WiFi Video Tank Car"},{"location":"tutorials/SZDOITWiKi/Robot---Wireless-WiFi-Video-Tank-Car/#reminder","text":"the default password is 12345678, and the wifi signal name is doit_tank; since the working voltage of ESPduino is 6-18V, and the router is 5V, so we can use portable phone power for router; when you fix the ESPduino rc kit, need to use copper coupling to support it to avoid bad for short electronic circuit.","title":"Reminder"},{"location":"tutorials/SZDOITWiKi/Robot--Assembling-Chassis/","text":"In this section, we just provide the manual for our robot tank car chassis. Generally, we will start to install the car chassis by the following steps. Especially, if there is no the manual for your tank, please read other manual for tanks, since they are similar. The assemble is very easy. You just need to know that: [[1. how to install the driving wheel and bearing wheel]]; [[2. how to install the track]]; [[3. how to install the motor]]; [[4. how to use the gasket]]; [[5. how to install the frame]]. Then other problem is very easy. Please click the following links for the assembling manual. Any problem, please let contact me (skype: yichone, whatsapp: 008618676662425, Email: yichoneyi@163.com). [video] [[some tank models]]","title":"Robot  Assembling Chassis"},{"location":"tutorials/SZDOITWiKi/Robot--Motors/","text":"To promise the quanlity and quantity, we have produced some motors servos from factories for our robotics, which are listed as follows. * [[9V motor with Hall sensor]] * [[12V motor]]","title":"Robot  Motors"},{"location":"tutorials/SZDOITWiKi/Robot-car-Preface/","text":"Robot Tank Car Chassis [[Video|Video--Video]] [[Softwares]] [[Motors Servos|Robot--Motors]] [[Assembling Chassis|Robot--Assembling Chassis]] [[Wireless WiFi Tank Car|Robot---Wireless-WiFi-Tank-Car]] [[Wireless WiFi Video Tank Car|Robot---Wireless-WiFi-Video-Tank-Car]]","title":"Robot car Preface"},{"location":"tutorials/SZDOITWiKi/Robot-car-Preface/#robot-tank-car-chassis","text":"[[Video|Video--Video]] [[Softwares]] [[Motors Servos|Robot--Motors]] [[Assembling Chassis|Robot--Assembling Chassis]] [[Wireless WiFi Tank Car|Robot---Wireless-WiFi-Tank-Car]] [[Wireless WiFi Video Tank Car|Robot---Wireless-WiFi-Video-Tank-Car]]","title":"Robot Tank Car Chassis"},{"location":"tutorials/SZDOITWiKi/Robotics-3dofRobotArm/","text":"Introduction This 3dof robot arm can be used 3D printer, factory repeating moving, color recognization, writing, and laser engraving, more functions is waiting for you!!! Yutobe video: Click watching How to buy: AliExpress Shop , 3dof robot arm User Manual: Dowloand","title":"Robotics 3dofRobotArm"},{"location":"tutorials/SZDOITWiKi/Robotics-3dofRobotArm/#introduction","text":"This 3dof robot arm can be used 3D printer, factory repeating moving, color recognization, writing, and laser engraving, more functions is waiting for you!!!","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/Robotics-3dofRobotArm/#yutobe-video-click-watching","text":"","title":"Yutobe video: Click watching"},{"location":"tutorials/SZDOITWiKi/Robotics-3dofRobotArm/#how-to-buy-aliexpress-shop-3dof-robot-arm","text":"","title":"How to buy: AliExpress Shop, 3dof robot arm"},{"location":"tutorials/SZDOITWiKi/Robotics-3dofRobotArm/#user-manual-dowloand","text":"","title":"User Manual: Dowloand"},{"location":"tutorials/SZDOITWiKi/Robotics-Gripper-Claw/","text":"Introduction Yuntai This Yuntai can be installed at the car chassis, as shown in the following. We have the following two types of metal paws with the following manual. User Manual G6 Paw: download manual G8 Paw: download manual how to buy Yuntai and Car chassis","title":"Robotics Gripper Claw"},{"location":"tutorials/SZDOITWiKi/Robotics-Gripper-Claw/#yuntai","text":"This Yuntai can be installed at the car chassis, as shown in the following. We have the following two types of metal paws with the following manual.","title":"Yuntai"},{"location":"tutorials/SZDOITWiKi/Robotics-Gripper-Claw/#user-manual","text":"G6 Paw: download manual G8 Paw: download manual how to buy Yuntai and Car chassis","title":"User Manual"},{"location":"tutorials/SZDOITWiKi/Robotics-Humanoid/","text":"[[ViVi Robot]];","title":"Robotics Humanoid"},{"location":"tutorials/SZDOITWiKi/Robotics-Preface/","text":"Humanoid/plen2 Gripper/Claw Robot Arm","title":"Robotics Preface"},{"location":"tutorials/SZDOITWiKi/Robotics-Robot-Arm/","text":"Introduction Our company is already developed many types robot arm with the followings. This small robot arm can be used for research, and function realizations. Robot Arm many robot arm can be chosen. User Manual for 4 types robot arm: Download how to buy","title":"Robotics Robot Arm"},{"location":"tutorials/SZDOITWiKi/Robotics-Robot-Arm/#introduction","text":"Our company is already developed many types robot arm with the followings. This small robot arm can be used for research, and function realizations.","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/Robotics-Robot-Arm/#robot-arm","text":"many robot arm can be chosen. User Manual for 4 types robot arm: Download how to buy","title":"Robot Arm"},{"location":"tutorials/SZDOITWiKi/Schematics/","text":"The schematics for ESPduino: http://bbs.smartarduino.com/showthread.php?tid=2012","title":"Schematics"},{"location":"tutorials/SZDOITWiKi/Smart-Bulb/","text":"Introuction This smart bulb is developed by WiFi, which can be controlled by internet, voice (now support Amazon, Google, Tmall, and Xiao Mi). User Manual video: watch pdf: download How to buy: AliExpress shop Amazon Shop Parameters Model: DoLED05 Mode: Wi-Fi APP Name: DoHome OS version: Android 4.0/IOS9.0 Channel: 4\uff08RGBW\uff09 Watt: 7.5W Power Factor: 0.6 Lumen: 550lm Luminous Angle: 120 Temperature: 3000K, RGB Beads Number: RGB: 5050-0.2W 5, warm white: 2835-0.5W 16 Working Voltage: 100-264VAC, 50/60HZ Lampholder: E27 B22 Effective control of distance: 40 meters for visual distance Material: shade: PC, holder: aluminum working time: 40000H Specifications Brightness adjustment 16 million color Heating adjustment Custom pattern Timing delay Mobile phone control Remote upgrade Voice control Tmall Genie Google assistant Amazon Alexa Xiao Mi Usage Steps Install bulb In your actual case to install the bulb, and then open the power switch. App Download In the app store to search \u201cDoHome\u201d, an/or scan the following QR code to download and install the App \u201cDoHome\u201d in your phone. Three control modes Our bulb can be controlled by the following three modes: * Directly connect the local area network * Remote control by internet * Voice control with the following supporting AI box * Tmall Genie * Google Assistant * Amazon Alexa * xiaomi Control at local area network Open the WiFi setting in your phone, find and connect the WiFi for bulb with its SSID name \u201cDoHome_xxxx\u201d, and the default password is 12345678; Open the \u201cDoHome\u201d App, click the device name (as shown in the following Fig. 2) to be able to enter the bulb functions, and then can control the bulb randomly. Note:\uff1a Under this local control mode, some control functions for the bulb would not be finished, e.g., remote control, remote update, voice control, and so on. Remote control by internet Before you use this remote control function, you must register a DoHome ACCOUNT at DoHome App. Since this section has many navigation applications. So, please click this link to download the PDF user manual . Q A Q: What is the WiFi name for this bulb? and its password? A: The SSID is \u201cDoHome_xxxx\u201d, where, xxxx is denoted the ID for this device, and the default password is 12345678. Q: When add the device, if pop a message says whether accept APP to get the location, how to handle it? A\uff1aThis is very important. Must click \"accept or Yes\". Q: At step 3.2, if the progress bar is 0% and then don't move, how to do it? A: there is two ways: 1) Open the phone WiFi setting, select \"forget/don't save\" the WiFi signal \"DoHome_xxxx\" for this device, and then go on the WiFi configuration by the above; 2) Manually connect the WiFi signal \"DoHome_xxxx\", and press the phone return key to back \"DoHome\" interface. Q: If I want to use the voice function, What are the issues to be aware of? A\uff1a1\uff09 please make sure that the device have already open the remote function, and bind the DoHome account; 2\uff09 Any problem, please click the menu logo to get the help for the other applications. Q: How to restore the system? A: on/off device for 5 times with each 2s to restore the factory setting. Note, if the time is too long for each time, then would re-compute the number of times. Q: Why should the device name be short? A: Convenient for the voice control, for example, DoHome.","title":"Smart Bulb"},{"location":"tutorials/SZDOITWiKi/Smart-Bulb/#introuction","text":"This smart bulb is developed by WiFi, which can be controlled by internet, voice (now support Amazon, Google, Tmall, and Xiao Mi).","title":"Introuction"},{"location":"tutorials/SZDOITWiKi/Smart-Bulb/#user-manual","text":"video: watch pdf: download","title":"User Manual"},{"location":"tutorials/SZDOITWiKi/Smart-Bulb/#how-to-buy","text":"AliExpress shop Amazon Shop","title":"How to buy:"},{"location":"tutorials/SZDOITWiKi/Smart-Bulb/#parameters","text":"Model: DoLED05 Mode: Wi-Fi APP Name: DoHome OS version: Android 4.0/IOS9.0 Channel: 4\uff08RGBW\uff09 Watt: 7.5W Power Factor: 0.6 Lumen: 550lm Luminous Angle: 120 Temperature: 3000K, RGB Beads Number: RGB: 5050-0.2W 5, warm white: 2835-0.5W 16 Working Voltage: 100-264VAC, 50/60HZ Lampholder: E27 B22 Effective control of distance: 40 meters for visual distance Material: shade: PC, holder: aluminum working time: 40000H","title":"Parameters"},{"location":"tutorials/SZDOITWiKi/Smart-Bulb/#specifications","text":"Brightness adjustment 16 million color Heating adjustment Custom pattern Timing delay Mobile phone control Remote upgrade Voice control Tmall Genie Google assistant Amazon Alexa Xiao Mi","title":"Specifications"},{"location":"tutorials/SZDOITWiKi/Smart-Bulb/#usage-steps","text":"","title":"Usage Steps"},{"location":"tutorials/SZDOITWiKi/Smart-Bulb/#install-bulb","text":"In your actual case to install the bulb, and then open the power switch.","title":"Install bulb"},{"location":"tutorials/SZDOITWiKi/Smart-Bulb/#app-download","text":"In the app store to search \u201cDoHome\u201d, an/or scan the following QR code to download and install the App \u201cDoHome\u201d in your phone.","title":"App Download"},{"location":"tutorials/SZDOITWiKi/Smart-Bulb/#three-control-modes","text":"Our bulb can be controlled by the following three modes: * Directly connect the local area network * Remote control by internet * Voice control with the following supporting AI box * Tmall Genie * Google Assistant * Amazon Alexa * xiaomi","title":"Three control modes"},{"location":"tutorials/SZDOITWiKi/Smart-Bulb/#control-at-local-area-network","text":"Open the WiFi setting in your phone, find and connect the WiFi for bulb with its SSID name \u201cDoHome_xxxx\u201d, and the default password is 12345678; Open the \u201cDoHome\u201d App, click the device name (as shown in the following Fig. 2) to be able to enter the bulb functions, and then can control the bulb randomly. Note:\uff1a Under this local control mode, some control functions for the bulb would not be finished, e.g., remote control, remote update, voice control, and so on.","title":"Control at local area network"},{"location":"tutorials/SZDOITWiKi/Smart-Bulb/#remote-control-by-internet","text":"Before you use this remote control function, you must register a DoHome ACCOUNT at DoHome App. Since this section has many navigation applications. So, please click this link to download the PDF user manual .","title":"Remote control by internet"},{"location":"tutorials/SZDOITWiKi/Smart-Bulb/#q-a","text":"Q: What is the WiFi name for this bulb? and its password? A: The SSID is \u201cDoHome_xxxx\u201d, where, xxxx is denoted the ID for this device, and the default password is 12345678. Q: When add the device, if pop a message says whether accept APP to get the location, how to handle it? A\uff1aThis is very important. Must click \"accept or Yes\". Q: At step 3.2, if the progress bar is 0% and then don't move, how to do it? A: there is two ways: 1) Open the phone WiFi setting, select \"forget/don't save\" the WiFi signal \"DoHome_xxxx\" for this device, and then go on the WiFi configuration by the above; 2) Manually connect the WiFi signal \"DoHome_xxxx\", and press the phone return key to back \"DoHome\" interface. Q: If I want to use the voice function, What are the issues to be aware of? A\uff1a1\uff09 please make sure that the device have already open the remote function, and bind the DoHome account; 2\uff09 Any problem, please click the menu logo to get the help for the other applications. Q: How to restore the system? A: on/off device for 5 times with each 2s to restore the factory setting. Note, if the time is too long for each time, then would re-compute the number of times. Q: Why should the device name be short? A: Convenient for the voice control, for example, DoHome.","title":"Q &amp; A"},{"location":"tutorials/SZDOITWiKi/Softwares/","text":"please directly move to [[The general firmwares and tools]].","title":"Softwares"},{"location":"tutorials/SZDOITWiKi/Some-Example/","text":"[[Bluetooth WiFi car chassis]]","title":"Some Example"},{"location":"tutorials/SZDOITWiKi/Some-useful-links/","text":"DOIT: www.doit.am esp-open-sdk: https://github.com/pfalcon/esp-open-sdk NodeMCU: https://github.com/nodemcu/nodemcu-firmware esp-open-rtos: https://github.com/SuperHouse/esp-open-rtos ESP8266_RTOS_SDK: https://github.com/espressif/ESP8266_RTOS_SDK ESP32_RTOS_SDK https://github.com/espressif/ESP32_RTOS_SDK FreeRTOS: http://www.freertos.org/ esptool: https://github.com/themadinventor/esptool GDBSTUB: https://github.com/espressif/esp-gdbstub Unofficial Development Kit for Espressif ESP8266: http://programs74.ru/udkew-en.html lua: www.lua.org elua: www.eluaproject.net","title":"Some useful links"},{"location":"tutorials/SZDOITWiKi/T-series-tank-chassis,-like-T200,T300/","text":"Introduction This document contains the basic assembly instructions for the T-series tank chassis and the wiring guidelines for connecting the motors to the DOIT NodeMCU Kit. Although the T300 tank chassis is used in this document, the instructions can be equally applied to any other T-series tank chassis (i.e.\uff0cT100, T200, T600, T800, mini T100 and T900) Installation Manual: Download , watch video How to Buy: Buy BUY T100 tank chassis BUY T200 tank chassis BUY T900 tank chassis BUY mini T100 tank chassis","title":"T series tank chassis, like T200,T300"},{"location":"tutorials/SZDOITWiKi/T-series-tank-chassis,-like-T200,T300/#introduction","text":"This document contains the basic assembly instructions for the T-series tank chassis and the wiring guidelines for connecting the motors to the DOIT NodeMCU Kit. Although the T300 tank chassis is used in this document, the instructions can be equally applied to any other T-series tank chassis (i.e.\uff0cT100, T200, T600, T800, mini T100 and T900)","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/T-series-tank-chassis,-like-T200,T300/#installation-manual-download","text":"watch video","title":"Installation Manual: Download,"},{"location":"tutorials/SZDOITWiKi/T-series-tank-chassis,-like-T200,T300/#how-to-buy-buy","text":"BUY T100 tank chassis BUY T200 tank chassis BUY T900 tank chassis BUY mini T100 tank chassis","title":"How to Buy: Buy"},{"location":"tutorials/SZDOITWiKi/T101-tank-chassis/","text":"pdf download video how to buy","title":"T101 tank chassis"},{"location":"tutorials/SZDOITWiKi/T900-T800-tank-chassis/","text":"This tank chassis is integrated by two T300 tank chassis, so, its installation can be refered to the installation of T300 .","title":"T900 T800 tank chassis"},{"location":"tutorials/SZDOITWiKi/TS100,TS300/","text":"Introduction The TS100 has a shock absorption suspention metal tank chassis, which has the following Features. * All wheels are metal, and installed by cup bearing for the bearing wheels; * This chassis has a good shock absorption performance; * The design is novel, and pre-served many locations to install control board or servos; * The chassis can connected the 4mm, 5mm motor for the connection. Reminder Although this manual is for TS100 tank chassis, in fact, it can used for many other TS series tank chassis, like TS300, TS600, TS900, and other shock absorption tank chassises. User manual: Download watch video How to buy: Buy","title":"TS100,TS300"},{"location":"tutorials/SZDOITWiKi/TS100,TS300/#introduction","text":"The TS100 has a shock absorption suspention metal tank chassis, which has the following Features. * All wheels are metal, and installed by cup bearing for the bearing wheels; * This chassis has a good shock absorption performance; * The design is novel, and pre-served many locations to install control board or servos; * The chassis can connected the 4mm, 5mm motor for the connection.","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/TS100,TS300/#reminder","text":"Although this manual is for TS100 tank chassis, in fact, it can used for many other TS series tank chassis, like TS300, TS600, TS900, and other shock absorption tank chassises.","title":"Reminder"},{"location":"tutorials/SZDOITWiKi/TS100,TS300/#user-manual-download","text":"watch video","title":"User manual: Download"},{"location":"tutorials/SZDOITWiKi/TS100,TS300/#how-to-buy-buy","text":"","title":"How to buy: Buy"},{"location":"tutorials/SZDOITWiKi/The-general-firmwares-and-tools/","text":"Introduciton The followings are the univeral tools, drivers, and firmwares. Tools TCP UDP Debugger: Download ESP8266/ESP8285/ESP32 flash download tool: Download Firmwares Softwares APPs for WiFi Car Android APP for WiFi car iOS APP for WiFi car APPs for WiFi Video Car Android APP for WiFi Video car iOS APP for WiFi Video car","title":"The general firmwares and tools"},{"location":"tutorials/SZDOITWiKi/The-general-firmwares-and-tools/#introduciton","text":"The followings are the univeral tools, drivers, and firmwares.","title":"Introduciton"},{"location":"tutorials/SZDOITWiKi/The-general-firmwares-and-tools/#tools","text":"TCP UDP Debugger: Download ESP8266/ESP8285/ESP32 flash download tool: Download","title":"Tools"},{"location":"tutorials/SZDOITWiKi/The-general-firmwares-and-tools/#firmwares","text":"","title":"Firmwares"},{"location":"tutorials/SZDOITWiKi/The-general-firmwares-and-tools/#softwares","text":"","title":"Softwares"},{"location":"tutorials/SZDOITWiKi/The-general-firmwares-and-tools/#apps-for-wifi-car","text":"Android APP for WiFi car iOS APP for WiFi car","title":"APPs for WiFi Car"},{"location":"tutorials/SZDOITWiKi/The-general-firmwares-and-tools/#apps-for-wifi-video-car","text":"Android APP for WiFi Video car iOS APP for WiFi Video car","title":"APPs for WiFi Video Car"},{"location":"tutorials/SZDOITWiKi/Tp101/","text":"","title":"Tp101"},{"location":"tutorials/SZDOITWiKi/User-Manual/","text":"Introduction ESP8266 serial WiFi shield is designed and developed based on ESPressif by Shenzhen Doctors of Intelligence Technology, which can be compatible with Arduino UNO, Mega, and other standard development board. By this way, one can quickly go on the 2nd development and design. This WiFi shield can be easy to realize serial to WiFi function with the following features: * WiFi chip is adopted the industrial ESP8266, and the module is encapsulated by a metal shell, which make the module have the strong anti-interference; * This shield is fully compatible with Arduino UNO, Mega 2560, and so on, the working voltage of the connection between Arduino UNO and shield can be 3.3V and 5V by the voltage transformation; * The serial port use a double-way switch to control the shield. If sw1 is off, then shield board can be used separately, otherwise, the shield board would work by connecting the shield board; * Arduino board don\u2019t need any configuration, then Arduino uno board can internet if insert this shield board; * Be able to configure the WiFi parameters and serial port by the Webserver; * This shield board can be used as a desperate ESP8266 board, and certainly use the AT command, and our other firmwares; * Can be used as a shield board for Arduino UNO. More details, please visit our official site , and online shop . Online shop: Buy User Manual: Download How to use Insert this shield board into Arduino board, and power it; Connect the WiFi signal named as \u201cDoitWiFi_Ser2Net\u201d, and input the password=\u201c12345678\u201d. Input 192.168.4.1 in the pc browser, and you can set the network configuration parameters; After that, you can download the PC TCP software tcpudpdebugger ; Another example is shown in the manual to exhibit the connection to the internet sever, More details, please download the user manual . Note when you download the code to the Arduino, please let the sw1 (1 and 2) as \"OFF\" state; before you input the IP address, please connect the wifi signal named as \u201cDoitWiFi_Ser2Net\u201d to set the parameters.","title":"User Manual"},{"location":"tutorials/SZDOITWiKi/User-Manual/#introduction","text":"ESP8266 serial WiFi shield is designed and developed based on ESPressif by Shenzhen Doctors of Intelligence Technology, which can be compatible with Arduino UNO, Mega, and other standard development board. By this way, one can quickly go on the 2nd development and design. This WiFi shield can be easy to realize serial to WiFi function with the following features: * WiFi chip is adopted the industrial ESP8266, and the module is encapsulated by a metal shell, which make the module have the strong anti-interference; * This shield is fully compatible with Arduino UNO, Mega 2560, and so on, the working voltage of the connection between Arduino UNO and shield can be 3.3V and 5V by the voltage transformation; * The serial port use a double-way switch to control the shield. If sw1 is off, then shield board can be used separately, otherwise, the shield board would work by connecting the shield board; * Arduino board don\u2019t need any configuration, then Arduino uno board can internet if insert this shield board; * Be able to configure the WiFi parameters and serial port by the Webserver; * This shield board can be used as a desperate ESP8266 board, and certainly use the AT command, and our other firmwares; * Can be used as a shield board for Arduino UNO. More details, please visit our official site , and online shop .","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/User-Manual/#online-shop-buy","text":"","title":"Online shop: Buy"},{"location":"tutorials/SZDOITWiKi/User-Manual/#user-manual-download","text":"","title":"User Manual: Download"},{"location":"tutorials/SZDOITWiKi/User-Manual/#how-to-use","text":"Insert this shield board into Arduino board, and power it; Connect the WiFi signal named as \u201cDoitWiFi_Ser2Net\u201d, and input the password=\u201c12345678\u201d. Input 192.168.4.1 in the pc browser, and you can set the network configuration parameters; After that, you can download the PC TCP software tcpudpdebugger ; Another example is shown in the manual to exhibit the connection to the internet sever, More details, please download the user manual .","title":"How to use"},{"location":"tutorials/SZDOITWiKi/User-Manual/#note","text":"when you download the code to the Arduino, please let the sw1 (1 and 2) as \"OFF\" state; before you input the IP address, please connect the wifi signal named as \u201cDoitWiFi_Ser2Net\u201d to set the parameters.","title":"Note"},{"location":"tutorials/SZDOITWiKi/ViVi-Robot/","text":"ViVi Robot is a smart WiFi-controled Robot, and developed by DOIT China, in Shenzhen. some videos from Youtube video1 ; video2 ; video3 ; video4 ; Reminders During the installation of vivi robot, the installation suggestion has the following two reminders. Coarse debugging Based on the above installation, we have this coarse debugging. In this step, the key is that the control board must be on power during the whole installation, till the end. It aims to let the servo at the initial state set by the program built-in the control board. So, after installation, the robot would be at the initial state set by the robot. subtle debugging After the Coarse debugging , in order to let the robot finish some operations, we must do some subtle debugging by the following effects. the two toes of the robot are on one line; the two heels of the robot are on one line; two footpads of the robot are on a plane; the standing posture of the robot should be like a trained soldier, which is vertical and horizontal. Features: With ESP8266 inside, support STA+AP mode, 4MB flash size, utilizing SPIFFS Controllable with WiFi Provide App for both Android and iOS devices Lowcost Open source (App excluded), fit for Geeker How to buy Officail site: click me to buy Some downloads user manual for vivi robot control board: pdf Manuals for Assemblling and Debugging: Click to download Firmwares: how to download the firmware ; download firmware ; Tools for download firmware download Some useful tools and source code can be downloaded here: http://en.doit.am/ViVI.zip Download and install ViVi Robot App Android version https://play.google.com/store/apps/details?id=jp.doit.scenography hl=zh_CN https://www.pgyer.com/qIYq iOS version https://itunes.apple.com/us/app/vivi-robot/id1255421040?l=zh ls=1 mt=8 Note: Please update your iOS system to the latest version, when using iOS App. About the vivi robot, please visit: http://plen.jp/playground/wiki/tutorials/index.html. Connect your phone to Robot\u2019s AP The Robot works as AP mode. When ViVi Robot powers up, then wait for about 5 seconds, please connect the WiFi signal named as \"ViVi-xxxx\", and then open the installed robot App. Note that, Default password for Robot AP is 12345678xyz. Robot Control via App After install Robot AP successfully, then please run the App to connect with the robot by clicking the \u201cconnect robot\u201d button on App. After the robot is connected successfully, you can go to the controlling/programming page on App to interact with the robot. Demonstrate Videos The following video shows how robot works: http://v.youku.com/v_show/id_XMjc2OTA5MTk3Mg==.html?spm=a2h0k.8191407.0.0 from=s1.8-1-1.2 http://v.youku.com/v_show/id_XMjc2OTA5MTY0OA==.html?spm=a2h0k.8191407.0.0 from=s1.8-1-1.2 http://v.youku.com/v_show/id_XMjc2OTA5MDkwOA==.html?spm=a2hzp.8253869.0.0 ClassicVideos: video1 ; video2","title":"ViVi Robot"},{"location":"tutorials/SZDOITWiKi/ViVi-Robot/#some-videos-from-youtube","text":"video1 ; video2 ; video3 ; video4 ;","title":"some videos from Youtube"},{"location":"tutorials/SZDOITWiKi/ViVi-Robot/#reminders","text":"","title":"Reminders"},{"location":"tutorials/SZDOITWiKi/ViVi-Robot/#during-the-installation-of-vivi-robot-the-installation-suggestion-has-the-following-two-reminders","text":"Coarse debugging Based on the above installation, we have this coarse debugging. In this step, the key is that the control board must be on power during the whole installation, till the end. It aims to let the servo at the initial state set by the program built-in the control board. So, after installation, the robot would be at the initial state set by the robot. subtle debugging After the Coarse debugging , in order to let the robot finish some operations, we must do some subtle debugging by the following effects. the two toes of the robot are on one line; the two heels of the robot are on one line; two footpads of the robot are on a plane; the standing posture of the robot should be like a trained soldier, which is vertical and horizontal.","title":"During the installation of vivi robot, the installation suggestion has the following two reminders."},{"location":"tutorials/SZDOITWiKi/ViVi-Robot/#features","text":"With ESP8266 inside, support STA+AP mode, 4MB flash size, utilizing SPIFFS Controllable with WiFi Provide App for both Android and iOS devices Lowcost Open source (App excluded), fit for Geeker","title":"Features:"},{"location":"tutorials/SZDOITWiKi/ViVi-Robot/#how-to-buy","text":"Officail site: click me to buy","title":"How to buy"},{"location":"tutorials/SZDOITWiKi/ViVi-Robot/#some-downloads","text":"user manual for vivi robot control board: pdf Manuals for Assemblling and Debugging: Click to download Firmwares: how to download the firmware ; download firmware ; Tools for download firmware download Some useful tools and source code can be downloaded here: http://en.doit.am/ViVI.zip Download and install ViVi Robot App Android version https://play.google.com/store/apps/details?id=jp.doit.scenography hl=zh_CN https://www.pgyer.com/qIYq iOS version https://itunes.apple.com/us/app/vivi-robot/id1255421040?l=zh ls=1 mt=8 Note: Please update your iOS system to the latest version, when using iOS App. About the vivi robot, please visit: http://plen.jp/playground/wiki/tutorials/index.html.","title":"Some downloads"},{"location":"tutorials/SZDOITWiKi/ViVi-Robot/#connect-your-phone-to-robots-ap","text":"The Robot works as AP mode. When ViVi Robot powers up, then wait for about 5 seconds, please connect the WiFi signal named as \"ViVi-xxxx\", and then open the installed robot App.","title":"Connect your phone to Robot\u2019s AP"},{"location":"tutorials/SZDOITWiKi/ViVi-Robot/#note-that-default-password-for-robot-ap-is-12345678xyz","text":"","title":"Note that, Default password for Robot AP is 12345678xyz."},{"location":"tutorials/SZDOITWiKi/ViVi-Robot/#robot-control-via-app","text":"After install Robot AP successfully, then please run the App to connect with the robot by clicking the \u201cconnect robot\u201d button on App. After the robot is connected successfully, you can go to the controlling/programming page on App to interact with the robot.","title":"Robot Control via App"},{"location":"tutorials/SZDOITWiKi/ViVi-Robot/#demonstrate-videos","text":"The following video shows how robot works: http://v.youku.com/v_show/id_XMjc2OTA5MTk3Mg==.html?spm=a2h0k.8191407.0.0 from=s1.8-1-1.2 http://v.youku.com/v_show/id_XMjc2OTA5MTY0OA==.html?spm=a2h0k.8191407.0.0 from=s1.8-1-1.2 http://v.youku.com/v_show/id_XMjc2OTA5MDkwOA==.html?spm=a2hzp.8253869.0.0 ClassicVideos: video1 ; video2","title":"Demonstrate Videos"},{"location":"tutorials/SZDOITWiKi/Video--Video/","text":"Video Tank Running Video: Watch Installation Video: Watch","title":"Video  Video"},{"location":"tutorials/SZDOITWiKi/Video--Video/#video","text":"Tank Running Video: Watch Installation Video: Watch","title":"Video"},{"location":"tutorials/SZDOITWiKi/WiFi-Prober---Serial-Transmission-Probe/","text":"serial transmission wifi probe \u4ea7\u54c1\u56fe\u7247\u5982\u4e0b\uff1a \u6dd8\u5b9d\u5546\u57ce\uff1a \u8d2d\u4e70 \u7eaf\u4e32\u53e3\u4f20\u8f93\u4f7f\u7528\u8d77\u6765\u6bd4\u8f83\u7b80\u5355\uff0c\u53ef\u53c2\u8003\u4ee5\u4e0b\u6b65\u9aa4\uff1a 1. \u5b89\u88c5\u9a71\u52a8 \u5728\u4f7f\u7528\u8be5\u63a2\u9488\u6a21\u5757\u65f6\uff0c\u9700\u8981\u4f7f\u7528TTL\u8f6c\u4e32\u53e3\u7684\u6a21\u5757\uff0c\u6bd4\u5982\uff0c CP2102\u6a21\u5757 , PL2303 \uff0c\u70b9\u51fb \u9a71\u52a8\u4e0b\u8f7d \u4e0b\u8f7d\u76f8\u5e94\u7684\u9a71\u52a8\uff1b\u6309\u4e0b\u56fe\u5bf9\u5e94\u4f4d\u7f6e\u8fde\u63a5\u597d\u3002 2. \u6253\u5f00\u8f6f\u4ef6 \u76f4\u63a5\u901a\u8fc7\u4e32\u53e3\u5373\u53ef\u8bfb\u53d6\u6570\u636e\uff0c\u4e32\u53e3\u6ce2\u7279\u7387\u8bbe\u7f6e\u4e3a 115200,\u5176\u5b83\u9009\u9879\u9ed8\u8ba4\u3002\u5728 \u4f7f\u7528\u8bf4\u660e\u548c\u8f6f\u4ef6 \u4e0b\u8f7d\u5e76\u6253\u5f00\u76ee \u63a2\u9488PC\u8c03\u8bd5\u5de5\u5177- \u56db\u535a\u667a\u8054-WiFi\u63a2\u6d4b\u4e0a\u4f4d\u673a-\u8bbe\u7f6e\u5de5\u5177.ex \u8f6f\u4ef6\u540d\u4e3a \u56db\u535a\u667a\u8054-WiFi\u63a2\u6d4b\u4e0a\u4f4d\u673a-\u8bbe\u7f6e\u5de5\u5177 \uff0c\u7136\u540e\u70b9\u51fb \u6253\u5f00\u4e32\u53e3 \uff0c\u53ef\u5f97\u5982\u4e0b\u56fe\u6240\u793a\u7684\u7ed3\u679c\u3002 3. \u91c7\u96c6\u5230\u7684\u63a2\u9488\u6570\u636e\u683c\u5f0f A8:15:4D:5F:BD:36|00:08:22:29:11:4F|02|04|1|-94 \u5176\u4e2d\uff1a * \u7b2c\u4e00\u5217\uff1a08:00:23:6F:58:CE\u4ee3\u8868\u624b\u673aMAC * \u7b2c\u4e8c\u5217\uff1a12:F8:56:FF:6F:56 \u4ee3\u8868\u8def\u7531MAC * \u7b2c\u4e09\u5217\uff1a00 \u4ee3\u8868Frame\u7684\u5927\u7c7b * \u7b2c\u56db\u5217\uff1a08 \u4ee3\u8868Frame\u7684\u5c0f\u7c7b * \u7b2c\u4e94\u5217\uff1a3 \u4ee3\u8868Channel * \u7b2c\u516d\u5217\uff1a\u4fe1\u53f7\u5f3a\u5ea6\uff0c\u636e\u6b64\u53ef\u7b97\u51fa\u5927\u6982\u7684\u8ddd\u79bb\uff0c\u8ddd\u79bb\u516c\u5f0f\u8054\u7cfbQQ 114209716\u8d2d\u4e70\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u53ea\u9700\u8981\u5173\u6ce8\u7b2c\u4e00\u5217\u5373\u53ef\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u770b\u201dWiFi\u63a2\u9488\u539f\u7406\u6559\u7a0b.pdf\u201d (\u538b\u7f29\u5305\u4e2d)\u3002 \u8f93\u51fa\u672c\u673aMAC,\u89c1\u672c\u6587\u6863AT\u6307\u4ee49\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u3002\u6709\u6548\u8303\u56f4\uff0c\u5728\u7a7a\u65f7\u533a\u57df\u8fbe\u5230 50-100\u7c73\u3002 4. AT\u6307\u4ee4 \u9996\u5148\u4e0b\u8f7d \u4e32\u53e3\u8c03\u8bd5\u5de5\u5177 ; \u5bf9\u4e8e\u63a2\u9488\u4e5f\u53ef\u4ee5\u91c7\u7528AT\u6307\u4ee4\u6765\u91c7\u96c6\u6570\u636e\uff0c\u5982\u6307\u5b9a\u9891\u9053\u91c7\u96c6\u6570\u636e\uff1a \u9ed8\u8ba4\u662f\u5168\u9891\u9053(1---13)\u626b\u63cf\uff0c\u53ef\u4ee5\u901a\u8fc7AT\u6307\u4ee4\u56fa\u5b9a\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u9891\u9053\u4e0a * AT+CHANNEL=1,3,5\\r\\n * \u63a7\u5236\u8bfb\u53d6\u7684\u4fe1\u53f7\u5f3a\u5ea6\u8303\u56f4 AT+RSSI=\u4fe1\u53f7\u5f3a\u5ea6\\r\\n \u6bd4\u5982 AT+RSSI=-70\\r\\n * \u63a7\u5236\u4e32\u53e3\u8f93\u51fa\u6ce2\u7279\u7387,\u9ed8\u8ba4\u662f 115200,\u53ef\u4ee5\u901a\u8fc7AT\u6307\u4ee4\u8fdb\u884c\u66f4\u6539 AT+BAUD=9600\\r\\n * \u8bbe\u5b9a\u4fe1\u9053\u91c7\u96c6\u5468\u671f\uff08\u9ed8\u8ba4\u662f250ms\uff09,\u53ef\u4ee5\u901a\u8fc7AT\u6307\u4ee4\u8fdb\u884c\u66f4\u6539 AT+TIME=500\\r\\n,\u5176\u4e2d500\u4ee3\u8868\u6bcf\u4e00\u4e2achannel\u7684\u91c7\u96c6\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a\u6beb\u79d2 * \u8bbe\u5b9a\u8f93\u51fa\u5468\u671f\uff0c\u53ef\u4ee5\u901a\u8fc7 AT+PERIOD=4\\r\\n\uff0c\u8bbe\u7f6e\u8f93\u51fa\u5468\u671f\uff0c\u9ed8\u8ba4\u4e3a4\uff0c\u5355\u4f4d\u4e3a\u5728\u6bcf\u4e2achannel\u65f6\u95f4\u3002 * \u67e5\u770b\u56fa\u4ef6\u7248\u672c AT+VERSION=?\\r\\n * \u91c7\u96c6\u63a7\u5236 AT+SEND=0\\r\\n,\u5f00\u59cb\u91c7\u96c6AT+SEND=1\\r\\n * \u8f93\u51fa\u66f4\u591a\u4fe1\u606f \u5f00\u59cbAT+ALL=1\\r\\n \u505c\u6b62\u66f4\u591a\u8f93\u51faAT+ALL=0\\r\\n \u5305\u62ec\u8def\u7531\u540d\u79f0\u6216\u63a2\u6d4b\u5305\u7684\u8def\u7531\u540d\u79f0\uff0c\u548c\u76ee\u524d\u624b\u673a\u662f\u5426\u9ed1\u5c4f\uff0c\u6b64\u529f\u80fd\u4e3a\u9ad8\u7ea7\u529f\u80fd\uff0c\u975e\u4e13\u4e1a\u5206\u6790\u4e0d\u9700\u8981\u5f00\u542f\u3002 * \u662f\u5426\u8f93\u51fa\u672c\u673amac \u5f00\u542fAT+MAC=1\\r\\n \u505c\u6b62\u66f4\u591a\u8f93\u51faAT+MAC=0\\r\\n * \u662f\u5426\u8fc7\u6ee4\u82f9\u679c\u865a\u5047mac,\u9ed8\u8ba4\u8fc7\u6ee4 \u5f00\u542f\u8fc7\u6ee4AT+IOS=1\\r\\n \u505c\u6b62\u8fc7\u6ee4AT+IOS=0\\r\\n * \u662f\u5426\u7edf\u8ba1\u4ece\u8def\u7531\u5230\u624b\u673a\u7684\u5305 \u5f00\u542fAT+AP=1\\r\\n \u505c\u6b62AT+AP=0\\r\\n \u6570\u636e\u5206\u6790 Doit\u63a2\u9488\u56fa\u4ef6\u5df2\u7ecf\u5185\u7f6e\u5206\u6790\u7cfb\u7edf\uff0c\u901a\u8fc7\u4e32\u53e3\u4f20\u51fa\u7684\u6570\u636e\u4e3a\u5df2\u7ecf\u5904\u7406\u8fc7\u7684\u6570\u636e\uff0c\u5904\u7406\u7b97\u6cd5\u9ed8\u8ba4\u662f1\u79d2\u5185\u53bb\u91cd\uff0c\u7b2c\u4e00\u884c\u662f\u624b\u673a\u7b49STA \u7684MAC\u5730\u5740\uff0c\u7b2c\u4e8c\u884c\u662f\u8def\u7531\u5668\u5730\u5740\uff0c WiFi\u5b9a\u4f4d \u6839\u636e\u8def\u7531MAC\u5b9a\u4f4d\uff1ahttp://dingwei.doit.am/d.php?mac=BC:D1:77:55:17:FA MAC\u5730\u5740\u624b\u673a\u5382\u5546\u67e5\u8be2 http://mac.doit.am \u5e94\u7528\u6848\u4f8b \u5e26\u82af\u7247\u4e32\u53e3WiFi \u5e26\u82af\u7247\u4e32\u53e3WiFi\u63a2\u9488\uff0c\u662f\u6307\u63a2\u9488\u672c\u8eab\u5e26\u6709cp2102\u4e32\u53e3\u82af\u7247\uff0c\u4e0d\u9700\u8981\u4e32\u53e3\u5de5\u5177\u4e86\u3002\u76f4\u63a5\u5b89\u88c5\u9a71\u52a8\u4e0b\u8f7d\u5373\u53ef\u3002\u4ed6\u4eec\u4e24\u4f7f\u7528\u65b9\u6cd5\u4e00\u6837\u3002\u6ca1\u6709\u533a\u522b * \u4e32\u53e3\u63a2\u9488\u6587\u6863\u6c47\u603b\u8d44\u6599\u4e0b\u8f7d * \u4e0a\u8ff0\u6587\u6863\u8d44\u6599\u4ee5\u53ca\u5305\u542b\u63a2\u9488\u539f\u7406\uff0c\u4ea7\u54c1\u624b\u518c\uff0c\u4f7f\u7528\u8bf4\u660e\uff0c\u9a71\u52a8\uff0capp\uff0c\u8f6f\u4ef6\uff0c\u5de5\u5177\u7b49\u3002","title":"WiFi Prober   Serial Transmission Probe"},{"location":"tutorials/SZDOITWiKi/WiFi-Prober---Serial-Transmission-Probe/#serial-transmission-wifi-probe","text":"\u4ea7\u54c1\u56fe\u7247\u5982\u4e0b\uff1a \u6dd8\u5b9d\u5546\u57ce\uff1a \u8d2d\u4e70 \u7eaf\u4e32\u53e3\u4f20\u8f93\u4f7f\u7528\u8d77\u6765\u6bd4\u8f83\u7b80\u5355\uff0c\u53ef\u53c2\u8003\u4ee5\u4e0b\u6b65\u9aa4\uff1a","title":"serial transmission wifi probe"},{"location":"tutorials/SZDOITWiKi/WiFi-Prober---Serial-Transmission-Probe/#1","text":"\u5728\u4f7f\u7528\u8be5\u63a2\u9488\u6a21\u5757\u65f6\uff0c\u9700\u8981\u4f7f\u7528TTL\u8f6c\u4e32\u53e3\u7684\u6a21\u5757\uff0c\u6bd4\u5982\uff0c CP2102\u6a21\u5757 , PL2303 \uff0c\u70b9\u51fb \u9a71\u52a8\u4e0b\u8f7d \u4e0b\u8f7d\u76f8\u5e94\u7684\u9a71\u52a8\uff1b\u6309\u4e0b\u56fe\u5bf9\u5e94\u4f4d\u7f6e\u8fde\u63a5\u597d\u3002","title":"1. \u5b89\u88c5\u9a71\u52a8"},{"location":"tutorials/SZDOITWiKi/WiFi-Prober---Serial-Transmission-Probe/#2","text":"\u76f4\u63a5\u901a\u8fc7\u4e32\u53e3\u5373\u53ef\u8bfb\u53d6\u6570\u636e\uff0c\u4e32\u53e3\u6ce2\u7279\u7387\u8bbe\u7f6e\u4e3a 115200,\u5176\u5b83\u9009\u9879\u9ed8\u8ba4\u3002\u5728 \u4f7f\u7528\u8bf4\u660e\u548c\u8f6f\u4ef6 \u4e0b\u8f7d\u5e76\u6253\u5f00\u76ee \u63a2\u9488PC\u8c03\u8bd5\u5de5\u5177- \u56db\u535a\u667a\u8054-WiFi\u63a2\u6d4b\u4e0a\u4f4d\u673a-\u8bbe\u7f6e\u5de5\u5177.ex \u8f6f\u4ef6\u540d\u4e3a \u56db\u535a\u667a\u8054-WiFi\u63a2\u6d4b\u4e0a\u4f4d\u673a-\u8bbe\u7f6e\u5de5\u5177 \uff0c\u7136\u540e\u70b9\u51fb \u6253\u5f00\u4e32\u53e3 \uff0c\u53ef\u5f97\u5982\u4e0b\u56fe\u6240\u793a\u7684\u7ed3\u679c\u3002","title":"2. \u6253\u5f00\u8f6f\u4ef6"},{"location":"tutorials/SZDOITWiKi/WiFi-Prober---Serial-Transmission-Probe/#3","text":"A8:15:4D:5F:BD:36|00:08:22:29:11:4F|02|04|1|-94 \u5176\u4e2d\uff1a * \u7b2c\u4e00\u5217\uff1a08:00:23:6F:58:CE\u4ee3\u8868\u624b\u673aMAC * \u7b2c\u4e8c\u5217\uff1a12:F8:56:FF:6F:56 \u4ee3\u8868\u8def\u7531MAC * \u7b2c\u4e09\u5217\uff1a00 \u4ee3\u8868Frame\u7684\u5927\u7c7b * \u7b2c\u56db\u5217\uff1a08 \u4ee3\u8868Frame\u7684\u5c0f\u7c7b * \u7b2c\u4e94\u5217\uff1a3 \u4ee3\u8868Channel * \u7b2c\u516d\u5217\uff1a\u4fe1\u53f7\u5f3a\u5ea6\uff0c\u636e\u6b64\u53ef\u7b97\u51fa\u5927\u6982\u7684\u8ddd\u79bb\uff0c\u8ddd\u79bb\u516c\u5f0f\u8054\u7cfbQQ 114209716\u8d2d\u4e70\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u53ea\u9700\u8981\u5173\u6ce8\u7b2c\u4e00\u5217\u5373\u53ef\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u770b\u201dWiFi\u63a2\u9488\u539f\u7406\u6559\u7a0b.pdf\u201d (\u538b\u7f29\u5305\u4e2d)\u3002 \u8f93\u51fa\u672c\u673aMAC,\u89c1\u672c\u6587\u6863AT\u6307\u4ee49\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u3002\u6709\u6548\u8303\u56f4\uff0c\u5728\u7a7a\u65f7\u533a\u57df\u8fbe\u5230 50-100\u7c73\u3002","title":"3. \u91c7\u96c6\u5230\u7684\u63a2\u9488\u6570\u636e\u683c\u5f0f"},{"location":"tutorials/SZDOITWiKi/WiFi-Prober---Serial-Transmission-Probe/#4-at","text":"\u9996\u5148\u4e0b\u8f7d \u4e32\u53e3\u8c03\u8bd5\u5de5\u5177 ; \u5bf9\u4e8e\u63a2\u9488\u4e5f\u53ef\u4ee5\u91c7\u7528AT\u6307\u4ee4\u6765\u91c7\u96c6\u6570\u636e\uff0c\u5982\u6307\u5b9a\u9891\u9053\u91c7\u96c6\u6570\u636e\uff1a \u9ed8\u8ba4\u662f\u5168\u9891\u9053(1---13)\u626b\u63cf\uff0c\u53ef\u4ee5\u901a\u8fc7AT\u6307\u4ee4\u56fa\u5b9a\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u9891\u9053\u4e0a * AT+CHANNEL=1,3,5\\r\\n * \u63a7\u5236\u8bfb\u53d6\u7684\u4fe1\u53f7\u5f3a\u5ea6\u8303\u56f4 AT+RSSI=\u4fe1\u53f7\u5f3a\u5ea6\\r\\n \u6bd4\u5982 AT+RSSI=-70\\r\\n * \u63a7\u5236\u4e32\u53e3\u8f93\u51fa\u6ce2\u7279\u7387,\u9ed8\u8ba4\u662f 115200,\u53ef\u4ee5\u901a\u8fc7AT\u6307\u4ee4\u8fdb\u884c\u66f4\u6539 AT+BAUD=9600\\r\\n * \u8bbe\u5b9a\u4fe1\u9053\u91c7\u96c6\u5468\u671f\uff08\u9ed8\u8ba4\u662f250ms\uff09,\u53ef\u4ee5\u901a\u8fc7AT\u6307\u4ee4\u8fdb\u884c\u66f4\u6539 AT+TIME=500\\r\\n,\u5176\u4e2d500\u4ee3\u8868\u6bcf\u4e00\u4e2achannel\u7684\u91c7\u96c6\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a\u6beb\u79d2 * \u8bbe\u5b9a\u8f93\u51fa\u5468\u671f\uff0c\u53ef\u4ee5\u901a\u8fc7 AT+PERIOD=4\\r\\n\uff0c\u8bbe\u7f6e\u8f93\u51fa\u5468\u671f\uff0c\u9ed8\u8ba4\u4e3a4\uff0c\u5355\u4f4d\u4e3a\u5728\u6bcf\u4e2achannel\u65f6\u95f4\u3002 * \u67e5\u770b\u56fa\u4ef6\u7248\u672c AT+VERSION=?\\r\\n * \u91c7\u96c6\u63a7\u5236 AT+SEND=0\\r\\n,\u5f00\u59cb\u91c7\u96c6AT+SEND=1\\r\\n * \u8f93\u51fa\u66f4\u591a\u4fe1\u606f \u5f00\u59cbAT+ALL=1\\r\\n \u505c\u6b62\u66f4\u591a\u8f93\u51faAT+ALL=0\\r\\n \u5305\u62ec\u8def\u7531\u540d\u79f0\u6216\u63a2\u6d4b\u5305\u7684\u8def\u7531\u540d\u79f0\uff0c\u548c\u76ee\u524d\u624b\u673a\u662f\u5426\u9ed1\u5c4f\uff0c\u6b64\u529f\u80fd\u4e3a\u9ad8\u7ea7\u529f\u80fd\uff0c\u975e\u4e13\u4e1a\u5206\u6790\u4e0d\u9700\u8981\u5f00\u542f\u3002 * \u662f\u5426\u8f93\u51fa\u672c\u673amac \u5f00\u542fAT+MAC=1\\r\\n \u505c\u6b62\u66f4\u591a\u8f93\u51faAT+MAC=0\\r\\n * \u662f\u5426\u8fc7\u6ee4\u82f9\u679c\u865a\u5047mac,\u9ed8\u8ba4\u8fc7\u6ee4 \u5f00\u542f\u8fc7\u6ee4AT+IOS=1\\r\\n \u505c\u6b62\u8fc7\u6ee4AT+IOS=0\\r\\n * \u662f\u5426\u7edf\u8ba1\u4ece\u8def\u7531\u5230\u624b\u673a\u7684\u5305 \u5f00\u542fAT+AP=1\\r\\n \u505c\u6b62AT+AP=0\\r\\n","title":"4. AT\u6307\u4ee4"},{"location":"tutorials/SZDOITWiKi/WiFi-Prober---Serial-Transmission-Probe/#_1","text":"Doit\u63a2\u9488\u56fa\u4ef6\u5df2\u7ecf\u5185\u7f6e\u5206\u6790\u7cfb\u7edf\uff0c\u901a\u8fc7\u4e32\u53e3\u4f20\u51fa\u7684\u6570\u636e\u4e3a\u5df2\u7ecf\u5904\u7406\u8fc7\u7684\u6570\u636e\uff0c\u5904\u7406\u7b97\u6cd5\u9ed8\u8ba4\u662f1\u79d2\u5185\u53bb\u91cd\uff0c\u7b2c\u4e00\u884c\u662f\u624b\u673a\u7b49STA \u7684MAC\u5730\u5740\uff0c\u7b2c\u4e8c\u884c\u662f\u8def\u7531\u5668\u5730\u5740\uff0c","title":"\u6570\u636e\u5206\u6790"},{"location":"tutorials/SZDOITWiKi/WiFi-Prober---Serial-Transmission-Probe/#wifi","text":"\u6839\u636e\u8def\u7531MAC\u5b9a\u4f4d\uff1ahttp://dingwei.doit.am/d.php?mac=BC:D1:77:55:17:FA","title":"WiFi\u5b9a\u4f4d"},{"location":"tutorials/SZDOITWiKi/WiFi-Prober---Serial-Transmission-Probe/#mac","text":"http://mac.doit.am","title":"MAC\u5730\u5740\u624b\u673a\u5382\u5546\u67e5\u8be2"},{"location":"tutorials/SZDOITWiKi/WiFi-Prober---Serial-Transmission-Probe/#_2","text":"","title":"\u5e94\u7528\u6848\u4f8b"},{"location":"tutorials/SZDOITWiKi/WiFi-Prober---Serial-Transmission-Probe/#wifi_1","text":"\u5e26\u82af\u7247\u4e32\u53e3WiFi\u63a2\u9488\uff0c\u662f\u6307\u63a2\u9488\u672c\u8eab\u5e26\u6709cp2102\u4e32\u53e3\u82af\u7247\uff0c\u4e0d\u9700\u8981\u4e32\u53e3\u5de5\u5177\u4e86\u3002\u76f4\u63a5\u5b89\u88c5\u9a71\u52a8\u4e0b\u8f7d\u5373\u53ef\u3002\u4ed6\u4eec\u4e24\u4f7f\u7528\u65b9\u6cd5\u4e00\u6837\u3002\u6ca1\u6709\u533a\u522b * \u4e32\u53e3\u63a2\u9488\u6587\u6863\u6c47\u603b\u8d44\u6599\u4e0b\u8f7d * \u4e0a\u8ff0\u6587\u6863\u8d44\u6599\u4ee5\u53ca\u5305\u542b\u63a2\u9488\u539f\u7406\uff0c\u4ea7\u54c1\u624b\u518c\uff0c\u4f7f\u7528\u8bf4\u660e\uff0c\u9a71\u52a8\uff0capp\uff0c\u8f6f\u4ef6\uff0c\u5de5\u5177\u7b49\u3002","title":"\u5e26\u82af\u7247\u4e32\u53e3WiFi"},{"location":"tutorials/SZDOITWiKi/_Footer/","text":"Shenzhen Doctors of Intelligence \\ Technology Co. Ltd: wwww.doit.am , SZDOIT official online Shops: www.vvdoit.com , and www.smartarduino.com","title":" Footer"},{"location":"tutorials/SZDOITWiKi/_Sidebar/","text":"Introduction Home [[General History|Development History]] [[Drivers,Firmwares, and Tools]] [[Get Started]] WiFi Module [[Preface|module-Preface]] [[ESP-F|ESP8266---ESP-F]] [[ESP-S|ESP8266---ESP-S]] [[ESP-E|ESP8266---ESP-E]] [[ESP-M1|ESP8285---ESP-M1]] [[ESP-M2|ESP8285---ESP-M2]] [[ESP-1|ESP8285---ESP-1]] [[ESP32|ESP32---ESP32]] Development Board [[Preface|board-Preface]] [[NodeMCU|ESP8266---NodeMCU]] [[miniNodeMCU|ESP8266---miniNodeMCU]] [[WiFi Shield|Arduino---WiFi Shield]] [[ESPduino|Arduino---ESPduino]] [[2-way 16-way motor servo shield|Arduino---2-way 16-way motor servo shield]] [[ESP32|ESP8266---ESP32]] [[DT-06(TTLtoWiFi)|ESP8266---TTLtoWiFi]] [[ESPDuino-32|ESP8266---ESPduino-32]] [[2/4ch DC motor 16ch servo shield---motor and servo shield]] WiFi Prober [[Preface|Prober-Preface]] [[Serial Transmission Probe|WiFi Prober---Serial Transmission Probe]] [[Attendance|WiFi Prober---Attendance]] [[MAC Scanner|WiFi Prober---MAC Scanner]] IoT Solutions [[Smart Bulb]] [[Smart Plug]] Robot Tank Car Chassis [[Preface|Robot car-Preface]] [[Video|Video--Video]] [[Softwares]] [[Motors Servos|Robot--Motors]] [[Assembling Chassis|Robot--Assembling Chassis]] [[Wireless WiFi Tank Car|Robot---Wireless-WiFi-Tank-Car]] [[Wireless WiFi Video Tank Car|Robot---Wireless-WiFi-Video-Tank-Car]] [[RC Robot|Robot---RC Robot]] Robotics [[Preface|Robotics-Preface]] [[Humanoid|Robotics-Humanoid]] [[Gripper/Claw|Robotics-Gripper/Claw]] [[Robot Arm|Robotics-Robot Arm]] [[3dof Robot Arm|Robotics-3dofRobotArm]] Visual Programming blocks","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/_Sidebar/#introduction","text":"Home [[General History|Development History]] [[Drivers,Firmwares, and Tools]] [[Get Started]]","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/_Sidebar/#wifi-module","text":"[[Preface|module-Preface]] [[ESP-F|ESP8266---ESP-F]] [[ESP-S|ESP8266---ESP-S]] [[ESP-E|ESP8266---ESP-E]] [[ESP-M1|ESP8285---ESP-M1]] [[ESP-M2|ESP8285---ESP-M2]] [[ESP-1|ESP8285---ESP-1]] [[ESP32|ESP32---ESP32]]","title":"WiFi Module"},{"location":"tutorials/SZDOITWiKi/_Sidebar/#development-board","text":"[[Preface|board-Preface]] [[NodeMCU|ESP8266---NodeMCU]] [[miniNodeMCU|ESP8266---miniNodeMCU]] [[WiFi Shield|Arduino---WiFi Shield]] [[ESPduino|Arduino---ESPduino]] [[2-way 16-way motor servo shield|Arduino---2-way 16-way motor servo shield]] [[ESP32|ESP8266---ESP32]] [[DT-06(TTLtoWiFi)|ESP8266---TTLtoWiFi]] [[ESPDuino-32|ESP8266---ESPduino-32]] [[2/4ch DC motor 16ch servo shield---motor and servo shield]]","title":"Development Board"},{"location":"tutorials/SZDOITWiKi/_Sidebar/#wifi-prober","text":"[[Preface|Prober-Preface]] [[Serial Transmission Probe|WiFi Prober---Serial Transmission Probe]] [[Attendance|WiFi Prober---Attendance]] [[MAC Scanner|WiFi Prober---MAC Scanner]]","title":"WiFi Prober"},{"location":"tutorials/SZDOITWiKi/_Sidebar/#iot-solutions","text":"[[Smart Bulb]] [[Smart Plug]]","title":"IoT Solutions"},{"location":"tutorials/SZDOITWiKi/_Sidebar/#robot-tank-car-chassis","text":"[[Preface|Robot car-Preface]] [[Video|Video--Video]] [[Softwares]] [[Motors Servos|Robot--Motors]] [[Assembling Chassis|Robot--Assembling Chassis]] [[Wireless WiFi Tank Car|Robot---Wireless-WiFi-Tank-Car]] [[Wireless WiFi Video Tank Car|Robot---Wireless-WiFi-Video-Tank-Car]] [[RC Robot|Robot---RC Robot]]","title":"Robot Tank Car Chassis"},{"location":"tutorials/SZDOITWiKi/_Sidebar/#robotics","text":"[[Preface|Robotics-Preface]] [[Humanoid|Robotics-Humanoid]] [[Gripper/Claw|Robotics-Gripper/Claw]] [[Robot Arm|Robotics-Robot Arm]] [[3dof Robot Arm|Robotics-3dofRobotArm]] Visual Programming blocks","title":"Robotics"},{"location":"tutorials/SZDOITWiKi/board-Preface/","text":"Introduction we have develop many types of development as follows. NodeMCU miniNodeMCU WiFi Shield ESPduino 2-way 16-way motor servo shield ESP32 DT-06(TTLtoWiFi) ESPDuino-32","title":"board Preface"},{"location":"tutorials/SZDOITWiKi/board-Preface/#introduction","text":"we have develop many types of development as follows. NodeMCU miniNodeMCU WiFi Shield ESPduino 2-way 16-way motor servo shield ESP32 DT-06(TTLtoWiFi) ESPDuino-32","title":"Introduction"},{"location":"tutorials/SZDOITWiKi/mini-TP100/","text":"This manual is for mini TP100. Assembling manual: download","title":"mini TP100"},{"location":"tutorials/SZDOITWiKi/module-Preface/","text":"DOIT company is already developed many types modules based on ESP8266 and ESP8285, such as ESP-F , ESP-S , ESP-M1 , ESP-M2 , ESP32 .","title":"module Preface"},{"location":"tutorials/SZDOITWiKi/some-tank-models/","text":"[[T series tank chassis, like T200,T300]]; [[TS100,TS300]] [[MINI T100]] [[4wd car chassis]] [[C3 4WD Car chassis]] [[T101 tank chassis]] [[T900/T800 tank chassis]] [[Tp101]] [[mini TP100]]","title":"Some tank models"},{"location":"tutorials/SipeedMaixBit/M5StickV/","text":"Training Docs: https://docs.m5stack.com/#/en/related_documents/v-training http://v-training.m5stack.com/ M5StickV Firmware Information: https://qiita.com/nnn112358/items/6f4934f8b81902b8e98c M5StickV Documention: https://docs.m5stack.com/#/en/core/m5stickv https://docs.m5stack.com/#/en/quick_start/m5stickv/m5stickv_quick_start Sipeed Documention: Getting Started: https://maixpy.sipeed.com/en/get_started/upgrade_firmware.html Introduction: https://maixpy.sipeed.com/en/ Releases (all version of K210 I think): http://dl.sipeed.com/MAIX/MaixPy/release/master/ Micropython Info: http://micropython.org/","title":"M5StickV"},{"location":"tutorials/SipeedMaixBit/Sipeed_Maixduino/","text":"Arduino Board Core: https://github.com/Seeed-Studio/ArduinoCore-k210 https://www.youtube.com/watch?v=NA4JgWccu8s feature=youtu.be ct=t%28%29 mc_cid=ba47cc3db1 mc_eid=f4b50e533d t=253s https://www.instructables.com/id/Transfer-Learning-With-Sipeed-MaiX-and-Arduino-IDE/ https://www.seeedstudio.com/Sipeed-Maixduino-Kit-for-RISC-V-AI-IoT-p-4047.html?utm_source=mailchimp utm_medium=edm utm_campaign=bazaar_0523 ct=t() mc_cid=1bda2e8e3d mc_eid=ecf5dc49bb","title":"Sipeed Maixduino"},{"location":"tutorials/SipeedMaixBit/info/","text":"Arduino: https://github.com/sipeed/Maixduino Learning Sipeed: https://github.com/AIWintermuteAI/transfer_learning_sipeed Downloads: http://dl.sipeed.com/ The MicroPython Interactive Mode: http://docs.micropython.org/en/latest/reference/index.html http://docs.micropython.org/en/latest/reference/repl.html Demos: MaixPy Run 20-classes object detection based on tiny-yolov2: https://bbs.sipeed.com/t/topic/683 More Information: https://maixpy.sipeed.com/en/others/what_maix_do.html https://www.seeedstudio.com/sipeed Instructables: Image Recognition with Sipeed Maix and Arduino IDE/Micropython https://www.instructables.com/id/Transfer-Learning-With-Sipeed-MaiX-and-Arduino-IDE/ Sipeed MaiX Bit OpenMV Demos - Computer Vision https://www.instructables.com/id/Sipeed-MaiX-Bit-OpenMV-Demos-Computer-Vision/","title":"General Information"},{"location":"tutorials/TI/resources/","text":"TI Launchpad Resources MSP32: http://www.ti.com/tool/MSP-EXP432P401R?DCMP=ep-mcu-msp-432-en HQS=beginmsp432launchpad#project0 http://www2.keil.com/mdk5/ http://dev.ti.com/tirex/#/DevTool/MSP-EXP432P401R http://www.ti.com/tool/energia http://energia.nu/ http://energia.nu/guide/multitasking/ http://dev.ti.com/tirex/#/Search/out%20of%20box%20experience?link=MSP432%20Pre-Production,%20Black%20LP%2FDevelopment%20Tools%2FMSP-EXP432P401R%20-%20Rev%201.0%20(Black)%2FDocuments Out of the Box Demo: Out of the Box Demo More Resources: Lady Adas DHT Library http://forum.43oh.com/topic/2826-ladyadas-dht-library-lcd/ http://forum.43oh.com/topic/1312-nokia-5110-display/ http://forum.43oh.com/topic/1769-nokia-5110-c-template-class/ http://forum.43oh.com/topic/5920-energia-library-dht11-dht22-temperature-and-humidity-sensors/ https://andres.svbtle.com/how-to-add-energia-support-to-utft-library https://github.com/andresv/UTFT-Energia https://github.com/search?utf8=%E2%9C%93 q=energia Both Energia and Arduino info: No Libraries needed: Ping Sensor Super Mario Song","title":"TI Launchpad Resources"},{"location":"tutorials/TI/resources/#ti-launchpad-resources","text":"","title":"TI Launchpad Resources"},{"location":"tutorials/TI/resources/#msp32","text":"http://www.ti.com/tool/MSP-EXP432P401R?DCMP=ep-mcu-msp-432-en HQS=beginmsp432launchpad#project0 http://www2.keil.com/mdk5/ http://dev.ti.com/tirex/#/DevTool/MSP-EXP432P401R http://www.ti.com/tool/energia http://energia.nu/ http://energia.nu/guide/multitasking/ http://dev.ti.com/tirex/#/Search/out%20of%20box%20experience?link=MSP432%20Pre-Production,%20Black%20LP%2FDevelopment%20Tools%2FMSP-EXP432P401R%20-%20Rev%201.0%20(Black)%2FDocuments","title":"MSP32:"},{"location":"tutorials/TI/resources/#out-of-the-box-demo","text":"Out of the Box Demo","title":"Out of the Box Demo:"},{"location":"tutorials/TI/resources/#more-resources","text":"Lady Adas DHT Library http://forum.43oh.com/topic/2826-ladyadas-dht-library-lcd/ http://forum.43oh.com/topic/1312-nokia-5110-display/ http://forum.43oh.com/topic/1769-nokia-5110-c-template-class/ http://forum.43oh.com/topic/5920-energia-library-dht11-dht22-temperature-and-humidity-sensors/ https://andres.svbtle.com/how-to-add-energia-support-to-utft-library https://github.com/andresv/UTFT-Energia https://github.com/search?utf8=%E2%9C%93 q=energia","title":"More Resources:"},{"location":"tutorials/TI/resources/#both-energia-and-arduino-info","text":"No Libraries needed: Ping Sensor Super Mario Song","title":"Both Energia and Arduino info:"},{"location":"tutorials/Tessel/readme/","text":"This is information for using the Tessel Board. tessel.io Getting Started Github Getting Started Docs on Github","title":"Resources"},{"location":"tutorials/Tessel/GettingStarted/","text":"t2-start The Tessel 2 first run experience \u2013 viewable at http://tessel.io/t2-start Running locally To run this repo locally: Run gem install github-pages to mirror the plug-ins used by GitHub Pages on your local machine. Run jekyll serve . Open http://localhost:4000/ See instructions in jekyll-now for more details. Image assets Image assets are stored on Imgur, with the username TesselProject. Contact Kelsey if you need the login. GIF assets can be generated from video according to this tutorial . License Documentation is copyright The Tessel Project and released under a Creative Commons Attribution ShareAlike license . All license text and links must be included in any redistribution.","title":"t2-start"},{"location":"tutorials/Tessel/GettingStarted/#t2-start","text":"The Tessel 2 first run experience \u2013 viewable at http://tessel.io/t2-start","title":"t2-start"},{"location":"tutorials/Tessel/GettingStarted/#running-locally","text":"To run this repo locally: Run gem install github-pages to mirror the plug-ins used by GitHub Pages on your local machine. Run jekyll serve . Open http://localhost:4000/ See instructions in jekyll-now for more details.","title":"Running locally"},{"location":"tutorials/Tessel/GettingStarted/#image-assets","text":"Image assets are stored on Imgur, with the username TesselProject. Contact Kelsey if you need the login. GIF assets can be generated from video according to this tutorial .","title":"Image assets"},{"location":"tutorials/Tessel/GettingStarted/#license","text":"Documentation is copyright The Tessel Project and released under a Creative Commons Attribution ShareAlike license . All license text and links must be included in any redistribution.","title":"License"},{"location":"tutorials/Tessel/GettingStarted/ap/","text":"{::options parse_block_html=\"true\" /} # Making Tessel An Access Point A typical WiFi setup consists of a couple of devices: a modem, which is connected by wire to the internet, and a wireless access point (also called a WAP or router), wired to the modem, which directs requests and responses between every device on the network. As explained in the [wifi tutorial](/wifi.html), Tessel 2 can easily connect to wifi networks using the command line tool. If your computer is connected to the same WAP as the Tessel, then the two devices can talk to each other. This is how we push code to Tessel over LAN (local area network). The connection setup looks about like this: ![router](./images/router.png) This is fine and dandy if we want to use Tessel in a place where there's a modem and WAP already set up, but what happens when that's not possible? We can't access the Internet without a modem, but we can create a LAN connection between devices by turning Tessel 2 into a WAP. Devices on the network can all talk to each other, like this: ![router](./images/Tessel-AP.png) This tutorial shows you to turn Tessel into a wireless access point, thus creating your own local network. In the terminal, run the following command: `t2 ap -n MyTessel` This will make an open, or password-less, wifi network called MyTessel. Open the wifi setting of your computer, or a separate device like a smartphone or tablet, and scan for new devices to see and connect to this new network. ![access point preview](./images/ap-preview.gif) **Bonus:** Create an network that requires a password. (Hint: for information about making a secure network, take a look at [the cli docs](https://tessel.io/docs/cli#usage).) Prev: Tweet Next: Build A Web Server","title":"Ap"},{"location":"tutorials/Tessel/GettingStarted/blinky/","text":"{::options parse_block_html=\"true\" /} ![](http://i.imgur.com/jDRIX06.jpg) # Hello, (Physical) World! Blinking some lights is the \"Hello World\" of hardware. Let's make those LEDs built into Tessel 2 dance for us. In your command line, make a folder for your Tessel code, then initialize a Tessel project in that folder by running each of the following commands in the terminal: `mkdir tessel-code` `cd tessel-code` `t2 init` _Have a look at [the CLI docs](https://tessel.gitbooks.io/t2-docs/content/API/CLI.html#starting-projects) to explore the `t2 init` command._ Great! Now you're set up to run code on Tessel. Your \"tessel-code\" folder now contains: * a \"package.json\" with some metadata Node uses for your project * a \".tesselinclude\" file which the T2 CLI uses to optimize bundle size * an entrypoint file called \"index.js\" You can open and look at any of the files to learn more about them. But right now we're most interested in index.js. \"index.js\" contains the code to make the blue and green LEDs blink. Let's take a look: {% highlight javascript %} // Import the interface to Tessel hardware var tessel = require('tessel'); // Turn one of the LEDs on to start. tessel.led[2].on(); // Blink! setInterval(function () { tessel.led[2].toggle(); tessel.led[3].toggle(); }, 100); console.log(\"I'm blinking! (Press CTRL + C to stop)\"); {% endhighlight %} In your command line, enter `t2 run index.js` to run your code in Tessel's RAM. **Look at your Tessel!** The blue and green LEDs on your Tessel's LED panel should blink back and forth. ![](http://i.imgur.com/kZIZNcL.gif) **Bonus:** mess with the code to make the LEDs blink in sync. **Extra bonus:** Want to untether your computer from your Tessel? Run: `t2 push index.js` Now plug Tessel in to USB power, just like plugging in a phone or an original Tessel. Wait for it to boot up, then... lights will blink! Tired of the blinking lights? `t2 erase` will clear the saved code. If you're connected over LAN, you can run any of these commands remotely, without plugging Tessel back into your computer. Learn more `t2` commands by running `t2 -h` or looking at the [T2 CLI docs](https://tessel.io/docs/cli). ![](http://i.imgur.com/2JXAPKt.jpg) ![](http://i.imgur.com/kFHhIim.jpg) Prev: Wifi Next: Add Modules","title":"Blinky"},{"location":"tutorials/Tessel/GettingStarted/cmd/","text":"{::options parse_block_html=\"true\" /} # Command Line Basics Using Tessel is just like web development. But if you're not familiar with web development, you might want to take a minute or two to get comfortable with some key tools of the trade: the command line (the \"terminal\", where you execute commands) and the text editor, where you will work on and save your programs. Select the operating system you are working on. {:.tabs.contained.three-up #install-tabs data-tab=\"\"} OSX : {:.active} [OSX](#tab-osx) Linux : [Linux](#tab-linux) Windows : [Windows](#tab-windows) Open up the application on your computer called \u201cTerminal\u201d by pressing \u2318 + SPACE and typing \u201cTerminal\u201d. Its dock icon looks like ![](http://i.imgur.com/y5U2cZ2.png), and the terminal will look something like ![](http://i.imgur.com/SQSbFrE.png) You can use the terminal to write commands to your computer (this is the \u201ccommand line\u201d). Let\u2019s try it out! In your terminal, type `ls` and hit enter. The `ls` command, short for \u201clist\u201d, tells your computer to list all of the file names for the folder you\u2019re in. Your list of files probably includes \u201cDesktop\u201d and \u201cDocuments\u201d, among others. Let\u2019s try another command: type `cd Documents` and hit enter. You are now in the Documents folder; `cd` means \u201cchange directory\u201d. If you try `ls` again, you should see the contents of your Documents folder listed out. If you want to compare, open up Finder and look in Documents to see the same files. Let\u2019s get back to the folder we were in before: `cd ..` You changed directory again! `ls` to see what we have here. You\u2019re back where you started! The `..` after `cd` tells it to go up one folder in the directory. Ok, now you're a cool hacker who can use the terminal (or \"console\") to write in the command line. (If you want to learn more commands, there are a whole bunch of them here . I recommend `pwd`, `open`, `mkdir`, `touch`, `mv`, and `cp`.) Open up the application on your computer called \u201cTerminal\u201d by either pressing __Control + Alt + T__ or by clicking the symbol at the top of the Ubuntu launcher and searching for \"Terminal\". Its icon looks like ![](http://i.imgur.com/y5U2cZ2.png), and the terminal will look something like ![](http://i.imgur.com/6jzen4Y.png?1) You can use the terminal to write commands to your computer (this is the \u201ccommand line\u201d). Let\u2019s try it out! In your terminal, type `ls` and hit enter. The `ls` command, short for \u201clist\u201d, tells your computer to list all of the file names for the folder you\u2019re in. Your list of files probably includes \u201cDesktop\u201d and \u201cDocuments\u201d, among others. Let\u2019s try another command: type `cd Documents` and hit enter. You are now in the Documents folder; `cd` means \u201cchange directory\u201d. If you try `ls` again, you should see the contents of your Documents folder listed out. If you want to compare, open up Finder and look in Documents to see the same files. Let\u2019s get back to the folder we were in before: `cd ..` You changed directory again! `ls` to see what we have here. You\u2019re back where you started! The `..` after `cd` tells it to go up one folder in the directory. Ok, now you're a cool hacker who can use the terminal (or \"console\") to write in the command line. (If you want to learn more commands, there are a whole bunch of them here . I recommend `pwd`, `open`, `mkdir`, `touch`, `mv`, and `cp`.) Open up the application on your computer called \u201cCommand Prompt\u201d. If you\u2019re not on Windows 8, go to the start menu and type \u201cCommand Prompt\u201d. If you are on Windows 8+, swipe right to find \u201cWindows System\u201d, within which you can find \u201cCommand Prompt\u201d. Its icon looks like ![](http://i.imgur.com/ySRfyMC.png), and the application (the terminal) will look something like ![](http://i.imgur.com/VjVWZD8.png) You can use the terminal to write commands to your computer (this is the \u201ccommand line\u201d). Let\u2019s try it out! In your terminal, type `dir` and hit enter. The `dir` command, short for \u201cdirectory\u201d, tells your computer to list all of the file names for the folder you\u2019re in. Your list of files probably includes \u201cDesktop\u201d and \u201cDocuments\u201d, among others. Let\u2019s try another command: Now type `cd Documents` into your command line and press enter. You are now in the Documents folder; `cd` means \u201cchange directory\u201d. If you try `dir` again, you should see the contents of your Documents folder listed out. If you want to compare, open up My Comuter and look in Documents to see the same files. Let\u2019s get back to the folder we were in before: `cd ..` You changed directory again! `dir` to see what we have here. You\u2019re back where you started! The `..` after `cd` tells it to go up one folder in the directory. Now you\u2019re a cool hacker who can use the terminal to write in the command line. (If you want to learn more commands, there are a whole bunch of them here .) When you use a command line tool, you're using a grammar-like structure. Items are separated by spaces, and it's usually like this: `tool action object -flag ` The \"tool\" is like a program you're calling; the \"action\" is the action you want the tool to perform, and the \"object\" is the object you want the tool to perform the action on. \"Flags\" are for passing in extra objects For example, on the next page you will do: `npm install t2 -g` This means: \"use the tool called 'npm' to perform the 'install' action on the item called 't2'. Do this globally.\" `t2` is the command line tool you will use to talk to the Tessel 2. `-g` stands for globally\u2013 which is to say, you want `npm` to install such that you can use the `t2` tool even outside the folder you were in when you installed it. ### Text Editors You will also need a text editor to save your JavaScript files. This means a plaintext editor, not a Word document. We recommend that you download one of these (you can download for free): * [Sublime Text](http://www.sublimetext.com/) * [Atom](https://atom.io/) * [Notepad++](http://notepad-plus-plus.org/) Typically, directions that belong in the command line are one line, whereas longer scripts, such as anything in JavaScript, should be typed into the text editor and saved, then run through the command line. In the context of this tutorial, things that should be run in the command line look `like this` And scripts that should be saved in the text editor will look {% highlight javascript %} like this {% endhighlight %} You'll see this when you get to the [blinking lights example]({{ site.baseurl }}/blinky.html). But don't skip ahead\u2013 you'll need the tools we install in the next step. Next: Install","title":"Cmd"},{"location":"tutorials/Tessel/GettingStarted/finished/","text":"{::options parse_block_html=\"true\" /} # Congratulations! You've completed the Tessel Tutorial! What's next? * Check out Tessel projects (and build your own) \u2192 * Learn more in Tessel's docs \u2192 # Get involved The [**Tessel Project**](https://tessel.io/about) is a completely open and volunteer-run organization. You can help to build Tessel by contributing and sharing back: * [Improve this **start experience** \u2192](https://github.com/tessel/t2-start) * [Quick fix with the _contribution-easy_ tag on **CLI** \u2192](https://github.com/tessel/t2-cli/labels/contribution-easy) * [Learn about Tessel 2's **tech stack** \u2192](https://tessel.gitbooks.io/t2-docs/content/Debugging/Technical_Overview.html) Welcome to the community! We're happy to have you. Love, the Tessel team ![](http://imgur.com/g37w4HQ.png) Prev: GPIO","title":"Finished"},{"location":"tutorials/Tessel/GettingStarted/gpio/","text":"{::options parse_block_html=\"true\" /} # Beyond Modules [![](https://raw.githubusercontent.com/rwaldron/tessel-io/master/fritzing/tessel.png)](https://github.com/rwaldron/tessel-io/tree/master/fritzing) Tessel's two module ports are not just for modules\u2013 they can also be used as flexible, simply [addressable GPIO](//tessel.io/docs/hardwareAPI) (general purpose input/output) pins. What does that mean? It means you're not limited to Tessel's ten-pin modules. In theory, you can connect nearly any electronic device or sensor to Tessel! There is now a Tessel 2-based kit called the [Johnny-Five Inventor's Kit](https://www.sparkfun.com/products/13847) which gets you started with electronic components, complete with its own thorough [Experiment Guide](https://learn.sparkfun.com/tutorials/experiment-guide-for-the-johnny-five-inventors-kit/introduction-to-the-johnny-five-inventors-kit). ### Community modules For an experience nearly as easy as Tessel's ten-pin module experience, take a look at the [Community Modules](https://tessel.io/modules#third-party). These are hardware components for which members of the community have created npm libraries, documentation, and wiring information. For example: To see more community-created modules (or to add one you've made!) go to [tessel.io/modules](https://tessel.io/modules#third-party). _Note: we're still building out Tessel 2's firmware, so you might hit some bugs trying to use community modules. If you do, please report them! We're collecting status reports on community modules [here](https://github.com/tessel/hardware-modules/issues/5)._ ### Making your own Modules If no one has made the module you want yet, you can be the first! There are a lot of cool components on [SparkFun](//sparkfun.com) and [Adafruit](//adafruit.com) that are fairly easy to connect to Tessel. In case you've never built anything with hardware before, we've put up an introduction at [tessel.io/diy](//tessel.io/diy) that should get you up and running. Share what you've made, and if you need help, [just ask](https://forums.tessel.io/c/community-modules). Happy inventing! Prev: Build Your Internet Next: Finished","title":"Gpio"},{"location":"tutorials/Tessel/GettingStarted/install/","text":"{::options parse_block_html=\"true\" /} # Install Tessel 2 **New to the command line? [Take a step back and learn the basics.](cmd.html)** Select the operating system you are working on. ![](https://raw.githubusercontent.com/rwaldron/tessel-io/master/fritzing/tessel.png) | [OSX](#tab-osx) || [Linux](#tab-linux) || [Windows](#tab-windows) | [Node.js](http://nodejs.org/) is a prerequisite for installing the Tessel command line. Tessel currently supports the Long Term Support (LTS) version of Node.js. You can install it from the [official website](http://nodejs.org/) (select the LTS option), or if you have [brew](http://brew.sh/) installed: `brew install homebrew/versions/node4-lts` Once Node.js is installed, run this installation script from your terminal: `npm install -g t2-cli` *Note: If you get the common npm EACCES error, correct it by [fixing npm permissions](https://docs.npmjs.com/getting-started/fixing-npm-permissions) and then running `npm install -g t2-cli` again.* [Node.js](http://nodejs.org/) is a prerequisite for installing the Tessel command line. Tessel currently supports the Long Term Support (LTS) version of Node.js. You can install it from the [official website](http://nodejs.org/) (select the LTS option), or following [these instructions from Node.js](https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions): `curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -` `sudo apt-get install -y nodejs` *Note: Piping a script into a shell with root access can be a security issue. Feel free to [read the script contents](https://deb.nodesource.com/setup_4.x) before executing the commands.* Once Node is installed, install USB dependencies: `apt-get install libusb-1.0-0-dev libudev-dev` Then, install the Tessel 2 command line interface: `npm install -g t2-cli` *Note: If you get the common npm EACCES error, correct it by [fixing npm permissions](https://docs.npmjs.com/getting-started/fixing-npm-permissions) and then running `npm install -g t2-cli` again. Using sudo is not recommended. Here is a handy [shell script](https://github.com/glenpike/npm-g_nosudo#npm-g_nosudo) to fix permissions issues.* Finally, you will need to install Tessel USB rules: `sudo t2 install drivers` *Note: This is a one-time operation that uses `sudo` and you should not use it for any other Tessel commands.* On Windows, Tessel drivers should install automatically when you plug this device into your computer.. On Windows 7, you may receive the notification \"Device driver software was not successfully installed\". If you do, click on the notification, click the \"Change settings...\" button, and then select \"Install driver software from Windows Update if it is not found on my computer.\" Save changes and retry. [Node.js](http://nodejs.org/) is a prerequisite for installing the Tessel command line. Tessel currently supports the Long Term Support (LTS) version of Node.js. You can install it from the [official website](http://nodejs.org/) (select the LTS option). After installing the Tessel drivers and Node.js, run this in cmd.exe: `npm install -g t2-cli` *Note: If you get the common npm EACCES error, correct it by [fixing npm permissions](https://docs.npmjs.com/getting-started/fixing-npm-permissions) and then running `npm install -g t2-cli` again.* ### Find your Tessel Plug in your Tessel over USB (use Tessel's microUSB port, between the USB ports and the module ports). *It takes ~30s to finish booting up (track the issue [here](https://github.com/tessel/t2-firmware/issues/117)); lights will flash during this process.* Run: `t2 list` ![](http://i.imgur.com/jDRIX06.jpg) You should be able to see your Tessel (and any other Tessels connected to the same network as your computer): {% highlight sh %} INFO Searching for nearby Tessels... USB Tessel-AF768F095 {% endhighlight %} Yay, you found it! At this point, your Tessel is operational and in communication with your computer. **Bonus:** give your Tessel a name, like \"Frank\" or \"Bulbasaur\": `t2 rename ` If you run `t2 list` again, you'll see your Tessel has changed its name: {% highlight sh %} INFO Searching for nearby Tessels... USB Bulbasaur {% endhighlight %} Prev: Command line Next: Get connected","title":"Install"},{"location":"tutorials/Tessel/GettingStarted/modules/","text":"{::options parse_block_html=\"true\" /} # Modules ![](http://i.imgur.com/5cpim4e.jpg) Tessel has two module ports, labeled A and B. In the examples below, port \"A\" is always specified. But as long as you change the port in the code, you can plug your module into either of the ports. It's best to unplug Tessel from power while plugging in modules. At the bottom of this page are walkthroughs for the connection and installation of each module. Modules should be plugged in so that all of the electrical components are on the top and the big hexagon is face down: #### this side up ![](http://i.imgur.com/ROHx9nr.png) #### this side down ![](http://i.imgur.com/vNg4gxd.png) ## Choose a module below to get up and running If you've already tried out your modules, move on to [Tweet.](tweet.html) * [Accelerometer](modules/accelerometer.html) * [Ambient (Light + Sound)](modules/ambient.html) * [Audio](modules/audio.html) * [BLE](modules/ble.html) * [Camera](modules/camera.html) * [Climate](modules/climate.html) * [GPS](modules/gps.html) * [Infrared](modules/ir.html) * [Relay](modules/relay.html) * [RFID](modules/rfid.html) * [Servo](modules/servo.html) * [Storage](modules/storage.html) Prev: Wifi","title":"Modules"},{"location":"tutorials/Tessel/GettingStarted/tweet/","text":"{::options parse_block_html=\"true\" /} # Tessel's First Tweet Because Tessel runs Node, we can leverage the [thousands of libraries](//npmjs.com) that the Node community has made. This code snippet makes Tessel send a tweet from a dummy account (@TesselTweet) that we've created for this purpose. _If you would prefer to post from your own account, go to apps.twitter.com , create your own OAuth tokens with read and write permissions, and paste them into the script._ [![](https://s3.amazonaws.com/technicalmachine-assets/fre+assets/tessel-tweet-2.png)](https://twitter.com/intent/tweet?text=OAuth%20is%20hard.%20But%20at%20least%20I%20can%20sign%20requests%20from%20my%20microcontroller.%23Tessel) Create a new directory within your \"tessel-code\" directory: `mkdir tessel-tweet; cd tessel-tweet; t2 init` Use npm to install [the Twitter library](https://www.npmjs.org/package/twitter) that the Node.js community has built: `npm install twitter` Rename the \"index.js\" file you've just created to \"tweet.js\", then copy and paste the below script over the existing text: {% highlight javascript %} // Node requires var twitter = require('twitter'); var twitterHandle = '@tesselproject'; // The status to tweet var status = 'Hello ' + twitterHandle + '. This is your #Tessel 2 speaking.'; // These OAuth credentials are for the dummy @TesselTweet account // Paste in your own OAuth details if you want to tweet from your own account var twit = new twitter({ consumer_key: 'O7oc0pvsZn4xjgcuHuYdX4FaC', consumer_secret: 'iJYuHFz2sD46Nvk3mcwzX8uih14aEAMgVWdWoR59nx8v6Zl7ZX', access_token_key: '2529232909-luARGU89K4CKFMvfzBjCgG6ubefzDkdDWkSB85i', access_token_secret: 'GXQfuzvGdjLEs3t1HEYfhQ9x9bdBcSBVXjBkbRgwYlOE0' }); // Make a tweet! twit.post('statuses/update', {status: status}, function(error, tweet, response){ if (error) { console.log('error sending tweet:', error); } else { console.log('Successfully tweeted! Tweet text:', tweet.text); } }); {% endhighlight %} Change the \"twitterHandle\" var to your own Twitter handle and save. Make sure you're [connected to Wifi]({{ site.baseurl }}/wifi.html), then run: `t2 run tweet.js` **Check Twitter for your tweet!** **Bonus:** Try making Tessel tweet output from a module. **Extra bonus:** What's another Node module you can try out? Maybe Twilio, PubNub, Plotly, Firebase? Surf around on [npm](//npmjs.com) until you find a Node library you like, then try using it with Tessel. Prev: Modules Next: Access Point","title":"Tweet"},{"location":"tutorials/Tessel/GettingStarted/webserver/","text":"{::options parse_block_html=\"true\" /} # Build A Portable Web Server Most web applications are served from remote machines in data centers miles and miles away from the devices that are using them. Because we're used to high-speed internet connections, that distance can seem trivial and unnoticeable. The Tessel 2 can run a server and deliver web applications to locally connected devices. It's quicker than those remote machines due to the immediate distance between the Tessel and devices connected to it. By the end of this article, we'll start a server on the Tessel and serve a web application that controls the Tessel LEDs through a local network. In your command line, make a folder for your Tessel code, then initialize a Tessel project in that folder by running each of the following commands in the terminal: `mkdir tessel-router` `cd tessel-router` `t2 init` Rename the \u201cindex.js\u201d file you\u2019ve just created to \u201cwebserver.js\u201d, then copy and paste the below script over the existing text: {% highlight javascript %} // Import the interface to Tessel hardware var tessel = require('tessel'); // Load the http module to create an http server. var http = require('http'); // Configure our HTTP server to respond with \"Hello from Tessel!\" to all requests. var server = http.createServer(function (request, response) { response.writeHead(200, {\"Content-Type\": \"text/plain\"}); response.end(\"Hello from Tessel!\\n\"); }); // Listen on port 8080, IP defaults to 192.168.1.101. Also accessible through [tessel-name].local server.listen(8080); // Put a friendly message in the terminal console.log(\"Server running at http://192.168.1.101:8080/\"); {% endhighlight %} Now that our server is in place, let's get our access point set up. In the terminal, run the following command: `t2 ap -n TesselRouter` If you haven't read about creating access points yet, check out the [access point tutorial](ap.html). After connecting to TesselRouter, run the following command in your terminal: `t2 run webserver.js` When \"Server running at http://192.168.1.101:8080/\" appears in the terminal, connect to that URL (or http://tessel.local:8080/, replacing \"tessel\" with the name of your Tessel) in a web browser of the device connected to the TesselRouter network. ![web app screenshot](./images/hello-tessel.png) Now let's take it up a notch by adding some interactivity between the web page and the Tessel! Let's start this next part by building out the web page we want Tessel to send to your web browser. Create a file called `index.html` in your project directory and open it up in your preferred text editor to add the initial html: {% highlight html %} Tessel Web App Hello from Tessel! Press a button to toggle an LED. Green Status: Blue Status: {% endhighlight %} Open that file in the browser to see the UI for this web app. ![web app screenshot](./images/ap-web-app-preview.png) Add the following JavaScript before ` ` tag: {% highlight html %} // Get a NodeList of elements with the class 'led-button' var buttons = document.querySelectorAll('.led-button'); // Iterate through that Nodelist and add a 'click' EventListener Array.prototype.forEach.call(buttons, function (button) { button.addEventListener('click', toggleLed); }); // Our event handler function for 'click' event on the LED buttons function toggleLed (event) { var button = event.target; var ledIndex = button.getAttribute('data-led'); // The index of the led in the Tessel.led array var statusNode = button.parentNode.querySelector('.led-status'); // The sibling status <span> to update // Create a new XHR for communicating requests to our Tessel server var req = new XMLHttpRequest(); // Open a GET request to '/leds/:index' req.open('GET', '/leds/' + ledIndex); // Once the request gets a successful response, update that statusNode with the status of the LED. req.onload = function(e) { if (req.readyState == 4 && req.status == 200) { var response = JSON.parse(req.responseText); statusNode.textContent = response.on ? 'ON' : 'OFF'; } else { console.log('Error', e); // If something went wrong, log that event to the console. } } req.send(); // Send our request to the server } {% endhighlight %} Now let's check out the server again to finish up the project. Replace the code in `webserver.js` with the following: {% highlight javascript %} // These two dependencies remain the same var tessel = require('tessel'); var http = require('http'); // Require two other core Node.js modules var fs = require('fs'); var url = require('url'); var server = http.createServer(function (request, response) { // Break up the url into easier-to-use parts var urlParts = url.parse(request.url, true); // Create a regular expression to match requests to toggle LEDs var ledRegex = /leds/; if (urlParts.pathname.match(ledRegex)) { // If there is a request containing the string 'leds' call a function, toggleLED toggleLED(urlParts.pathname, request, response); } else { // All other request will call a function, showIndex showIndex(urlParts.pathname, request, response); } }); // Stays the same server.listen(8080); // Stays the same console.log('Server running at http://192.168.1.101:8080/'); // Respond to the request with our index.html page function showIndex (url, request, response) { // Create a response header telling the browser to expect html response.writeHead(200, {\"Content-Type\": \"text/html\"}); // Use fs to read in index.html fs.readFile(__dirname + '/index.html', function (err, content) { // If there was an error, throw to stop code execution if (err) { throw err; } // Serve the content of index.html read in by fs.readFile response.end(content); }); } // Toggle the led specified in the url and respond with its state function toggleLED (url, request, response) { // Create a regular expression to find the number at the end of the url var indexRegex = /(\\d)$/; // Capture the number, returns an array var result = indexRegex.exec(url); // Grab the captured result from the array var index = result[1]; // Use the index to refence the correct LED var led = tessel.led[index]; // Toggle the state of the led and call the callback after that's done led.toggle(function (err) { if (err) { // Log the error, send back a 500 (internal server error) response to the client console.log(err); response.writeHead(500, {\"Content-Type\": \"application/json\"}); response.end(JSON.stringify({error: err})); } else { // The led was successfully toggled, respond with the state of the toggled led using led.isOn response.writeHead(200, {\"Content-Type\": \"application/json\"}); response.end(JSON.stringify({on: led.isOn})); } }); } {% endhighlight %} In order to make code pushing more efficient, Tessel only pushes the entry point file and its Node dependencies by default. Since index.html is not included in this default push, we'll need to explicitly require it with a .tesselinclude file (Read more about project files [here](https://tessel.io/docs/cli#usage)). You already have a `.tesselinclude` file, which was created when you ran `t2 init`. Open it up and copy and paste the following on a new line: {% highlight javascript %} index.html {% endhighlight %} Finally, let's fire up our server again by running: `t2 run webserver.js` Once the server is running, connect to the URL in the web browser. Click on the buttons to toggle the lights. Here is a demo video: Video not available at the moment. The full code for this project can be found in [this repo](https://github.com/HipsterBrown/tessel-router). **Bonus:** Add a way to toggle the red LED as well. Prev: Access Point Next: Beyond modules","title":"Webserver"},{"location":"tutorials/Tessel/GettingStarted/wifi/","text":"{::options parse_block_html=\"true\" /} # Using Tessel's Wifi Tessel 2 has robust Wifi built into the board. Let's get connected! ### Connect To connect to a new network, enter in your command line (without brackets) `t2 wifi -n -p ` _Note: Wifi radio on Tessel can only connect to 2.4GHz networks. As of yet, you cannot connect over a 5GHz network. _Note: if you have spaces in your network name, or password, add quotes around the network name and/or password_ `t2 wifi -n \" \" -p \" \"` The password flag is optional. Tessel 2 will save network credentials and attempt to reconnect automatically on startup. Wifi connectivity is indicated by the on-board amber Wifi LED, which will blink with every packet it receives. _To explore more options available for the `t2 wifi` command, take a look at [the CLI docs](https://tessel.gitbooks.io/t2-docs/content/API/CLI.html#using-wifi)._ ![](http://i.imgur.com/91pkDCQ.gif) ### Authorize On Tessel 2, you can run and push your code over Wifi, not just USB. Let's get that set up. Run: `t2 provision` This authorizes your computer to push code to the connected Tessel 2. Now, run: `t2 list` Assuming your computer is connected to the same network as your Tessel 2, you should see it listed by name, as a \"LAN\" connection, something like: {% highlight sh %} INFO Searching for nearby Tessels... Bulbasaur LAN Bulbasaur USB {% endhighlight %} You might see (as in the example) that your Tessel is connected via both USB and LAN. The connection will automatically prefer LAN, since it's faster, but you can control this by adding `--lan` or `--usb` to any command. ### Update Great! now that we're connected and authorized, let's check for updates. Run: `t2 update` This command will check for a new version of the Tessel 2 firmware. If there is an update available, it will be downloaded and installed. _Have a look at [the CLI docs](https://tessel.gitbooks.io/t2-docs/content/API/CLI.html#updating-tessel-2-on-board-osfirmware) to get more information on updations._ Prev: Install Next: Hello Blinky","title":"Wifi"},{"location":"tutorials/Tessel/GettingStarted/modules/accelerometer/","text":"{::options parse_block_html=\"true\" /} ## Accelerometer [ View source on Github](https://github.com/tessel/accel-mma84) ### Step 1 Make a directory inside your \"tessel-code\" folder called \"accelerometer\", change directory into that folder, and initialize a tessel project: `mkdir accelerometer; cd accelerometer; t2 init` ### Step 2 Plug the accelerometer module into Tessel **port A** with the hexagon/icon side down and the electrical components on the top, then plug Tessel into your computer via USB. ![](http://i.imgur.com/aaQT2wC.jpg) ### Step 3 Install by typing `npm install accel-mma84` into the command line. ![](//i.imgur.com/7ZJQwQI.jpg) ### Step 4 Rename \"index.js\" to \"accelerometer.js\" and replace the file's contents with the following: {% highlight js %} // Any copyright is dedicated to the Public Domain. // http://creativecommons.org/publicdomain/zero/1.0/ /********************************************* This basic accelerometer example logs a stream of x, y, and z data from the accelerometer *********************************************/ var tessel = require('tessel'); var accel = require('accel-mma84').use(tessel.port['A']); // Initialize the accelerometer. accel.on('ready', function () { // Stream accelerometer data accel.on('data', function (xyz) { console.log('x:', xyz[0].toFixed(2), 'y:', xyz[1].toFixed(2), 'z:', xyz[2].toFixed(2)); }); }); accel.on('error', function(err){ console.log('Error:', err); }); {% endhighlight %} Save the file. ### Step 5 In your command line, `t2 run accelerometer.js` Watch x, y, and z values appear in your terminal! Move the Tessel module around to see acceleration along different axes. **Bonus:** Instead of just printing data, can you make the accelerometer tell you something useful? Make the Tessel log whether it's right side up or upside down. To see what else you can do with the accelerometer module, see the module docs [here](https://github.com/tessel/accel-mma84). ![](http://i.imgur.com/KnXf6uL.gif) ### Step 6 What else can you do with a accelerometer module? Try a [community-created project.](http://tessel.io/projects) What are you making? [Share your invention!](//tessel.io/projects) If you run into any issues you can check out the [accelerometer forums](https://forums.tessel.io/c/modules/accelerometer).","title":"Accelerometer"},{"location":"tutorials/Tessel/GettingStarted/modules/ambient/","text":"{::options parse_block_html=\"true\" /} ## Ambient [ View source on Github](https://github.com/tessel/ambient-attx4) ### Step 1 Make a directory inside your \"tessel-code\" folder called \"ambient\", change directory into that folder, and initialize a tessel project: `mkdir ambient; cd ambient; t2 init` ### Step 2 Plug the ambient module into Tessel **port A** with the hexagon/icon side down and the electrical components on the top, then plug Tessel into your computer via USB. ![](http://i.imgur.com/RLmPhfw.jpg) ### Step 3 Install by typing `npm install ambient-attx4` into the command line. ![](//i.imgur.com/WWtJyIJ.jpg) ### Step 4 Rename \"index.js\" to \"ambient.js\" and replace the file's contents with the following: {% highlight js %} // Any copyright is dedicated to the Public Domain. // http://creativecommons.org/publicdomain/zero/1.0/ /********************************************* This ambient module example console.logs ambient light and sound levels and whenever a specified light or sound level trigger is met. *********************************************/ var tessel = require('tessel'); var ambientlib = require('ambient-attx4'); var ambient = ambientlib.use(tessel.port['A']); ambient.on('ready', function () { // Get points of light and sound data. setInterval( function () { ambient.getLightLevel( function(err, lightdata) { if (err) throw err; ambient.getSoundLevel( function(err, sounddata) { if (err) throw err; console.log(\"Light level:\", lightdata.toFixed(8), \" \", \"Sound Level:\", sounddata.toFixed(8)); }); }); }, 500); // The readings will happen every .5 seconds }); ambient.on('error', function (err) { console.log(err); }); {% endhighlight %} Save the file. ### Step 5 In your command line, `t2 run ambient.js` Watch light and sound values appear in your terminal! Try clapping or shining a flashlight at it. **Bonus:** Test out setting triggers with light and sound (hint: there is an example in [the ambient module's examples folder](https://github.com/tessel/ambient-attx4/tree/master/examples)). To see what else you can do with the ambient module, see the module docs [here](https://github.com/tessel/ambient-attx4). ![](http://i.imgur.com/SuvbD9O.gif) ### Step 6 What else can you do with an ambient module? Try a [community-created project.](http://tessel.io/projects) What are you making? [Share your invention!](//tessel.io/projects) If you run into any issues you can check out the [ambient forums](https://forums.tessel.io/c/modules/ambient).","title":"Ambient"},{"location":"tutorials/Tessel/GettingStarted/modules/audio/","text":"{::options parse_block_html=\"true\" /} ## Audio [ View source on Github ](https://github.com/tessel/tessel-av) ### Step 1 Make a directory inside your \"tessel-code\" folder called \"audio\", change directory into that folder, and initialize a tessel project: `mkdir audio; cd audio; t2 init` Download [this mp3](https://dl.dropboxusercontent.com/u/3531958/yoda-mudhole.mp3) into the \"audio\" directory, this will be the audio file we manipulate. In order to include static, non-require-dependency resources in your deployment, you'll need to explicitly inform Tessel's CLI. To do this, create a `.tesselinclude` file in your `audio` directory. In that file, type the name of the static asset that should be deployed with the project. For this project, your `.tesselinclude` will have at least the following in it: `yoda-mudhole.mp3` (Learn more about Tessel CLI deployment [tips and tricks in the docs](https://tessel.io/docs/cli#usage)) ### Step 2 Plug Tessel into your computer via USB, then plug the audio module into either of Tessel's USB ports. You will also need some kind of speaker output, headphones or [desk speakers](http://www.amazon.com/AmazonBasics-Powered-Computer-Speakers-A100/dp/B00GHY5F3K/) will do the trick. ![](http://i.imgur.com/zbRKAVx.jpg) ### Step 3 Install by typing `npm install tessel-av` into the command line. ### Step 4 Rename \"index.js\" to \"audio.js\" and replace the file's contents with the following: {% highlight js %} // Any copyright is dedicated to the Public Domain. // http://creativecommons.org/publicdomain/zero/1.0/ /********************************************* - Play audio from an amusing scene between Luke Skywalker, R2-D2 and Yoda - When the audio reaches the end, play it again from the beginning. *********************************************/ var path = require('path'); var av = require('tessel-av'); var mp3 = path.join(__dirname, 'yoda-mudhole.mp3'); var sound = new av.Speaker(mp3); sound.play(); sound.on('ended', function(seconds) { sound.play(); }); {% endhighlight %} Save the file. ### Step 5 In your command line, `t2 run audio.js` Hooray! You should hear the mp3 playing in a loop! **Bonus:** Try connecting buttons to your Tessel 2 and use them to control playback. Hint: it may help to look for the NPM module `tessel-gpio-button`. **Extra bonus:** Load many mp3s onto a USB storage drive and playback from that source. Hint: check out the \"storage\" tutorial on the left sidebar. To see what else you can do with the USB audio module, read the [tessel-av](https://github.com/tessel/tessel-av) documentation. ### Step 6 What else can you do with an audio module? What are you making? [Share your invention!](//tessel.io/projects) If you run into any issues you can check out the [audio forums](https://forums.tessel.io/c/usb-modules/audio).","title":"Audio"},{"location":"tutorials/Tessel/GettingStarted/modules/ble/","text":"{::options parse_block_html=\"true\" /} ## Bluetooth Low Energy [ View source on Github](https://github.com/sandeepmistry/noble) ### Step 1 Make a directory inside your \"tessel-code\" folder called \"ble\", change directory into that folder, and initialize a tessel project: `mkdir ble; cd ble; t2 init` ### Step 2 Plug Tessel into your computer via USB, then plug the BLE module into either of Tessel's USB ports. ![](http://i.imgur.com/uifn1p7.jpg) ### Step 3 Install `noble` by typing `npm install noble --force` into the command line (the `--force` flag is in case you are on OSX. The library is compatible with Linux (which Tessel uses) but not OSX, so npm blocks downloads to incompatible systems). ### Step 4 Rename \"index.js\" to \"ble.js\" and replace the file's contents with the following: {% highlight js %} // Any copyright is dedicated to the Public Domain. // http://creativecommons.org/publicdomain/zero/1.0/ /********************************************* This basic example scans for BLE peripherals and prints out details when found *********************************************/ // Import the BLE library var noble = require('noble'); // USB modules don't have to be explicitly connected // Wait for the module to report that it is powered up first noble.on('stateChange', function(state) { if (state === 'poweredOn') { console.log('beginning to scan...'); // Begin scanning for BLE peripherals noble.startScanning(); } }); // When a peripheral is discovered noble.on('discover', function(peripheral) { // Print out the address console.log('peripheral found at:', peripheral.address); }); console.log('waiting for power up...'); {% endhighlight %} Save the file. ### Step 5 In your command line, `t2 run ble.js` Be sure your BLE peripheral(s) are enabled! You should see Tessel output the address of any nearby BLE peripherals. **Bonus:** Make your BLE dongle advertise as a peripheral. Hint: you will need the `bleno` library instead of `noble`. To see what else you can do with the BLE dongle, read the [noble](https://github.com/sandeepmistry/noble) and [bleno](https://github.com/sandeepmistry/bleno) documentation. ![](https://s3.amazonaws.com/technicalmachine-assets/fre+assets/gifs/usb-ble.gif) ### Step 6 What else can you do with a BLE module? Get inspired by a [community-created project.](http://tessel.io/projects) What are you making? [Share your invention!](//tessel.io/projects) If you run into any issues you can check out the [ble forums](https://forums.tessel.io/c/usb-modules/ble).","title":"Ble"},{"location":"tutorials/Tessel/GettingStarted/modules/camera/","text":"{::options parse_block_html=\"true\" /} ## Camera [ View source on Github](https://github.com/tessel/tessel-av) ### Step 1 Make a directory inside your \"tessel-code\" folder called \"camera\", change directory into that folder, and initialize a tessel project: `mkdir camera; cd camera; t2 init` ### Step 2 Plug Tessel into your computer via USB, then plug the camera module into either of Tessel's USB ports. You will also need a [UVC compatible USB camera](https://tessel.io/modules#tessel-av). ![](http://i.imgur.com/uifn1p7.jpg) ### Step 3 Install by typing `npm install tessel-av` into the command line. ### Step 4 Rename \"index.js\" to \"camera.js\" and replace the file's contents with the following: {% highlight js %} // Any copyright is dedicated to the Public Domain. // http://creativecommons.org/publicdomain/zero/1.0/ /********************************************* Create a server that responds to every request by taking a picture and piping it directly to the browser. *********************************************/ var av = require('tessel-av'); var os = require('os'); var http = require('http'); var port = 8000; var camera = new av.Camera(); http.createServer((request, response) => { response.writeHead(200, { 'Content-Type': 'image/jpg' }); camera.capture().pipe(response); }).listen(port, () => console.log(`http://${os.hostname()}.local:${port}`)); {% endhighlight %} Save the file. ### Step 5 Make sure your Tessel and computer are [connected to the same Wifi network](http://tessel.github.io/t2-start/wifi.html). Then, in your command line, `t2 run camera.js` Hooray! You should see the following: In your terminal: ![](http://i.imgur.com/8JdxCON.gif) In your browser: ![](http://i.imgur.com/Yjvr1Uc.png) > Note: `bishop` is just the name of my Tessel 2 board, your Tessel's URL will include whatever you've named your board! **Bonus:** Try connecting a button to your Tessel 2 and use it as a shutter. Hint: it may help to look for the NPM module `tessel-gpio-button`. **Extra bonus:** Use an USB storage drive to store many photos. Hint: check out the \"storage\" module tutorial. To see what else you can do with the USB camera module, read the [tessel-av](https://github.com/tessel/tessel-av) documentation. ### Step 6 What else can you do with a camera module? Get inspired by a [community-created project.](http://tessel.io/projects) What are you making? [Share your invention!](//tessel.io/projects) If you run into any issues you can check out the [camera forums](https://forums.tessel.io/c/usb-modules/camera).","title":"Camera"},{"location":"tutorials/Tessel/GettingStarted/modules/climate/","text":"{::options parse_block_html=\"true\" /} ## Climate [ View source on Github](https://github.com/tessel/climate-si7020) ### Step 1 **Note: Temperature and humidity readings can be skewed by the operating temperature of the Tessel. Distancing the the climate module from the Tessel via [wires](https://www.adafruit.com/products/1954) is recommended for accurate readings.** Make a directory inside your \"tessel-code\" folder called \"climate\", change directory into that folder, and initialize a tessel project: `mkdir climate; cd climate; t2 init` ### Step 2 Plug the climate module into Tessel **port A** with the hexagon/icon side down and the electrical components on the top, then plug Tessel into your computer via USB. ![](http://i.imgur.com/mMAJoEZ.jpg) ### Step 3 Install by typing `npm install climate-si7020` into the command line. ![Have a look at the si-7020 module](https://www.pubnub.com/wp-content/uploads/2015/04/climate-si7020.jpg) ### Step 4 Rename \"index.js\" to \"climate.js\" and replace the file's contents with the following: {% highlight js %} // Any copyright is dedicated to the Public Domain. // http://creativecommons.org/publicdomain/zero/1.0/ /********************************************* This basic climate example logs a stream of temperature and humidity to the console. *********************************************/ var tessel = require('tessel'); var climatelib = require('climate-si7020'); var climate = climatelib.use(tessel.port['A']); climate.on('ready', function () { console.log('Connected to climate module'); // Loop forever setImmediate(function loop () { climate.readTemperature('f', function (err, temp) { climate.readHumidity(function (err, humid) { console.log('Degrees:', temp.toFixed(4) + 'F', 'Humidity:', humid.toFixed(4) + '%RH'); setTimeout(loop, 300); }); }); }); }); climate.on('error', function(err) { console.log('error connecting module', err); }); {% endhighlight %} Save the file. ### Step 5 In your command line, `t2 run climate.js` See the temperature and humidity change if you cup your hands and breathe on the module. **Bonus:** Change the code so the temperature reads out in celsius rather than Fahrenheit. To see what else you can do with the climate module, see the module docs [here](https://github.com/tessel/climate-si7020). ![](http://i.imgur.com/CSMwFdM.gif) ### Step 6 What else can you do with a climate module? Try a [community-created project.](http://tessel.io/projects) What are you making? [Share your invention!](//tessel.io/projects) If you run into any issues you can check out the [climate forums](https://forums.tessel.io/c/modules/climate).","title":"Climate"},{"location":"tutorials/Tessel/GettingStarted/modules/gps/","text":"{::options parse_block_html=\"true\" /} ## GPS [ View source on Github](https://github.com/tessel/gps-a2235h) ### Step 1 **Note:** The time between seeing satellites and actually getting a lock is dependent on the satellite. Be in view of the open sky for best results (and even then it may take a while to get a lock). Once the module has a lock, the lock should stay for a while. Make a directory inside your \"tessel-code\" folder called \"gps\", change directory into that folder, and initialize a tessel project: `mkdir gps; cd gps; t2 init` ### Step 2 Plug the GPS module into Tessel **port A** with the hexagon/icon side down and the electrical components on the top, then plug Tessel into your computer via USB. ![](http://i.imgur.com/F4rOKN7.jpg) ### Step 3 Install by typing `npm install gps-a2235h` into the command line. ![](//i.imgur.com/f92rOvG.jpg) ### Step 4 Rename \"index.js\" to \"gps.js\" and replace the file's contents with the following: {% highlight js %} // Any copyright is dedicated to the Public Domain. // http://creativecommons.org/publicdomain/zero/1.0/ /********************************************************** This gps example logs a stream of data: coordinates, detected satellites, timestamps, and altitude. For best results, try it while outdoors. **********************************************************/ var tessel = require('tessel'); var gpsLib = require('gps-a2235h'); var gps = gpsLib.use(tessel.port['A']); // Wait until the module is connected gps.on('ready', function () { console.log('GPS module powered and ready. Waiting for satellites...'); // Emit coordinates when we get a coordinate fix gps.on('coordinates', function (coords) { console.log('Lat:', coords.lat, '\\tLon:', coords.lon, '\\tTimestamp:', coords.timestamp); }); // Emit altitude when we get an altitude fix gps.on('altitude', function (alt) { console.log('Got an altitude of', alt.alt, 'meters (timestamp: ' + alt.timestamp + ')'); }); // Emitted when we have information about a fix on satellites gps.on('fix', function (data) { console.log(data.numSat, 'fixed.'); }); gps.on('dropped', function(){ // we dropped the gps signal console.log(\"gps signal dropped\"); }); }); gps.on('error', function(err){ console.log(\"got this error\", err); }); {% endhighlight %} Save the file. ### Step 5 In your command line, `t2 run gps.js` Check out your location! If you're having trouble getting a location fix, try going outside; you probably don't have satellites indoors. **Bonus:** Set up a geofence so that you are inside it. (Hint: you may need to check the documentation.) To see what else you can do with the GPS module, see the module docs [here](https://github.com/tessel/gps-a2235h). ![](http://i.imgur.com/m4CxbLN.gif) ### Step 6 What else can you do with a GPS module? Try a [community-created project.](http://tessel.io/projects) What are you making? [Share your invention!](//tessel.io/projects) If you run into any issues you can check out the [gps forums](https://forums.tessel.io/c/modules/gps).","title":"Gps"},{"location":"tutorials/Tessel/GettingStarted/modules/ir/","text":"{::options parse_block_html=\"true\" /} ## Infrared [ View source on Github](https://github.com/tessel/ir-attx4) ### Step 1 Make a directory inside your \"tessel-code\" folder called \"ir\", change directory into that folder, and initialize a tessel project: `mkdir ir; cd ir; t2 init` ### Step 2 Plug the IR module into Tessel **port A** with the hexagon/icon side down and the electrical components on the top, then plug Tessel into your computer via USB. ![](http://i.imgur.com/okriGCr.jpg) ### Step 3 Install by typing `npm install ir-attx4` into the command line. ![](//i.imgur.com/b5TdwG8.jpg) ### Step 4 Rename \"index.js\" to \"ir.js\" and replace the file's contents with the following: {% highlight js %} // Any copyright is dedicated to the Public Domain. // http://creativecommons.org/publicdomain/zero/1.0/ /********************************************* This infrared module example transmits the power signal sequence of an Insignia brand television every three seconds, while also listening for (and logging) any incoming infrared data. *********************************************/ var tessel = require('tessel'); var infraredlib = require('ir-attx4'); var infrared = infraredlib.use(tessel.port['A']); // When we're connected infrared.on('ready', function() { console.log(\"Connected to IR!\"); // Start sending a signal every three seconds setInterval(function () { // Make a buffer of on/off durations (each duration is 16 bits) var powerBuffer = new Buffer([0x22,0xc4,0xee,0xd0,0x2,0x58,0xfe,0xc,0x2,0x8a,0xf9,0xf2,0x2,0x8a,0xf9,0xc0,0x2,0x58,0xfe,0xc,0x2,0x58,0xfe,0xc,0x2,0x8a,0xfe,0x3e,0x2,0x8a,0xfe,0x3e,0x2,0x8a,0xf9,0xc0,0x2,0x58,0xf9,0xc0,0x2,0x8a,0xfe,0x3e,0x2,0x8a,0xf9,0xc0,0x2,0x58,0xfe,0xc,0x2,0x58,0xfe,0xc,0x2,0x58,0xfe,0xc,0x2,0x58,0xfe,0xc,0x2,0x8a,0xfe,0x3e,0x2,0x8a,0xf9,0xc0,0x2,0x58,0xf9,0xc0,0x2,0x8a,0xf9,0xf2,0x2,0x8a,0xf9,0xc0,0x2,0x58,0xfe,0xc,0x2,0x58,0xfe,0xc,0x2,0x8a,0xfe,0x3e,0x2,0x8a,0xfe,0x3e,0x2,0x8a,0xfe,0xc,0x2,0x58,0xfe,0xc,0x2,0x58,0xfe,0xc,0x2,0x58,0xfe,0xc,0x2,0x58,0xf9,0xc0,0x2,0x8a,0xf9,0xc0,0x2,0x58,0xf9,0xc0,0x2,0x58,0xf9,0xc0,0x2,0x58]); // Send the signal at 38 kHz infrared.sendRawSignal(38, powerBuffer, function(err) { if (err) { console.log(\"Unable to send signal: \", err); } else { console.log(\"Signal sent!\"); } }); }, 3000); // Every 3 seconds }); // If we get data, print it out infrared.on('data', function(data) { console.log(\"Received RX Data: \", data); }); {% endhighlight %} Save the file. ### Step 5 In your command line, `t2 run ir.js` Try turning on your TV! Look at the IR LED through a camera. **Bonus:** Change the code to turn on a different device. To see what else you can do with the IR module, see the module docs [here](https://github.com/tessel/ir-attx4). ![](http://i.imgur.com/hbGlM7N.gif) ### Step 6 What else can you do with a IR module? Try a [community-created project.](http://tessel.io/projects) What are you making? [Share your invention!](http://tessel.hackster.io/) If you run into any issues you can check out the [ir forums](https://forums.tessel.io/c/modules/ir).","title":"Ir"},{"location":"tutorials/Tessel/GettingStarted/modules/relay/","text":"{::options parse_block_html=\"true\" /} ## Relay [ View source on Github](https://github.com/tessel/relay-mono) ### Step 1 Make a directory inside your \"tessel-code\" folder called \"relay\", change directory into that folder, and initialize a tessel project: `mkdir relay; cd relay; t2 init` ### Step 2 If you have something to turn on and off with the Relay module, cut the power wire, strip the ends to expose the wire, and insert the two exposed ends into port 1 on the Relay module. (If you don't have something to plug in at the moment, you can still continue; you won't see anything turn on or off, but the relay makes an audible clicking noise when it latches.) ![](http://i.imgur.com/kMdQPqz.jpg) ### Step 3 Plug the relay module into Tessel **port A** with the hexagon/icon side down and the electrical components on the top, then plug Tessel into your computer via USB. ![](http://i.imgur.com/XKJHJEw.jpg) ### Step 4 Install by typing `npm install relay-mono` into the command line. ![](//i.imgur.com/1e7hZO0.jpg) ### Step 5 Rename \"index.js\" to \"relay.js\" and replace the file's contents with the following: {% highlight js %} // Any copyright is dedicated to the Public Domain. // http://creativecommons.org/publicdomain/zero/1.0/ /********************************************* This relay module demo toggles both relay channels every two seconds, logging the new values to the console upon latching. *********************************************/ var tessel = require('tessel'); var relaylib = require('relay-mono'); var relay = relaylib.use(tessel.port['A']); // Wait for the module to connect relay.on('ready', function relayReady () { console.log('Ready! Toggling relays...'); setInterval(function toggle() { // Toggle relay channel 1 relay.toggle(1, function toggleOneResult(err) { if (err) console.log(\"Err toggling 1\", err); }); // Toggle relay channel 2 relay.toggle(2, function toggleTwoResult(err) { if (err) console.log(\"Err toggling 2\", err); }); }, 2000); // Every 2 seconds (2000ms) }); // When a relay channel is set, it emits the 'latch' event relay.on('latch', function(channel, value) { console.log('latch on relay channel ' + channel + ' switched to', value); }); {% endhighlight %} Save the file. ### Step 6 In your command line, `t2 run relay.js` Turn some things on and off with code! This gif shows clap-activated lights which use the ambient and relay modules together. **Bonus:** Change the code to toggle only one relay channel, every 10 seconds. To see what else you can do with the relay module, see the module docs [here](https://github.com/tessel/relay-mono). ![](http://i.imgur.com/ypBLeqQ.gif) ### Step 7 What else can you do with a relay module? Try a [community-created project.](http://tessel.io/projects) What are you making? [Share your invention!](http://tessel.hackster.io/) If you run into any issues you can check out the [relay forums](https://forums.tessel.io/c/modules/relay).","title":"Relay"},{"location":"tutorials/Tessel/GettingStarted/modules/rfid/","text":"{::options parse_block_html=\"true\" /} ## RFID [ View source on Github](https://github.com/tessel/rfid-pn532) ### Step 1 Make a directory inside your \"tessel-code\" folder called \"rfid\", change directory into that folder, and initialize a tessel project: `mkdir rfid; cd rfid; t2 init` ### Step 2 Plug the RFID module into Tessel **port A** with the hexagon/icon side down and the electrical components on the top, then plug Tessel into your computer via USB. ![](http://i.imgur.com/aYlr7Bd.jpg) ### Step 3 Install by typing `npm install rfid-pn532` into the command line. ![](//i.imgur.com/JPTWSFj.jpg) ### Step 4 Rename \"index.js\" to \"rfid.js\" and replace the file's contents with the following: {% highlight js %} // Any copyright is dedicated to the Public Domain. // http://creativecommons.org/publicdomain/zero/1.0/ /********************************************* This basic RFID example listens for an RFID device to come within range of the module, then logs its UID to the console. *********************************************/ var tessel = require('tessel'); var rfidlib = require('rfid-pn532'); var rfid = rfidlib.use(tessel.port['A']); rfid.on('ready', function (version) { console.log('Ready to read RFID card'); rfid.on('data', function(card) { console.log('UID:', card.uid.toString('hex')); }); }); rfid.on('error', function (err) { console.error(err); }); {% endhighlight %} Save the file. ### Step 5 In your command line, `t2 run rfid.js` Tap the included RFID card on the reader to get its UID! **Bonus:** Change the polling rate of the RFID module so that it only checks for a card once every three seconds. (Hint: you may need to check the docs.) To see what else you can do with the RFID module, see the module docs [here](https://github.com/tessel/rfid-pn532). ![](http://i.imgur.com/6nA6hJy.gif) ### Step 6 What else can you do with a RFID module? Try a [community-created project.](http://tessel.io/projects) What are you making? [Share your invention!](http://tessel.hackster.io/) If you run into any issues you can check out the [rfid forums](https://forums.tessel.io/c/modules/rfid).","title":"Rfid"},{"location":"tutorials/Tessel/GettingStarted/modules/servo/","text":"{::options parse_block_html=\"true\" /} ## Servo [ View source on Github](https://github.com/tessel/servo-pca9685) ### Step 1 Make a directory inside your \"tessel-code\" folder called \"servo\", change directory into that folder, and initialize a tessel project: `mkdir servo; cd servo; t2 init` ### Step 2 Plug servo into port \"1\" on the module as shown. * the brown wire (ground) goes to `-` * the red wire (power) goes to `+` * the yellow wire (signal) goes to `S` ![](http://i.imgur.com/g4PbQIp.jpg) ### Step 3 Plug 5V adapter into the barrel jack on the servo module, then plug into wall power. ![](http://i.imgur.com/z78mWxa.png) ### Step 4 Plug the servo module into Tessel **port A** with the hexagon/icon side down and the electrical components on the top, then plug Tessel into your computer via USB. ![](http://i.imgur.com/oiKY9md.jpg) ### Step 5 Install by typing `npm install servo-pca9685` into the command line. ![](//i.imgur.com/QsPkouA.jpg) ### Step 6 Rename \"index.js\" to \"servo.js\" and replace the file's contents with the following: {% highlight js %} // Any copyright is dedicated to the Public Domain. // http://creativecommons.org/publicdomain/zero/1.0/ /********************************************* This servo module demo turns the servo around 1/10 of its full rotation every 500ms, then resets it after 10 turns, reading out position to the console at each movement. *********************************************/ var tessel = require('tessel'); var servolib = require('servo-pca9685'); var servo = servolib.use(tessel.port['A']); var servo1 = 1; // We have a servo plugged in at position 1 servo.on('ready', function () { var position = 0; // Target position of the servo between 0 (min) and 1 (max). // Set the minimum and maximum duty cycle for servo 1. // If the servo doesn't move to its full extent or stalls out // and gets hot, try tuning these values (0.05 and 0.12). // Moving them towards each other = less movement range // Moving them apart = more range, more likely to stall and burn out servo.configure(servo1, 0.05, 0.12, function () { setInterval(function () { console.log('Position (in range 0-1):', position); // Set servo #1 to position pos. servo.move(servo1, position); // Increment by 10% (~18 deg for a normal servo) position += 0.1; if (position > 1) { position = 0; // Reset servo position } }, 500); // Every 500 milliseconds }); }); {% endhighlight %} Save the file. ### Step 7 In your command line, `t2 run servo.js` Watch your servo move! **Bonus:** Make the servo turn all the way to position 1 in one fell swoop, and then back to position 0. To see what else you can do with the servo module, see the module docs [here](https://github.com/tessel/servo-pca9685). ![](http://i.imgur.com/eMUtSTT.gif) ### Step 8 What else can you do with a servo module? Try a [community-created project.](http://tessel.io/projects) What are you making? [Share your invention!](http://tessel.hackster.io/) If you run into any issues you can check out the [servo forums](https://forums.tessel.io/c/modules/servo).","title":"Servo"},{"location":"tutorials/Tessel/GettingStarted/modules/storage/","text":"{::options parse_block_html=\"true\" /} ## Storage (Flash Drive) [ View source on Github](https://github.com/nodejs/node/blob/master/lib/fs.js) ### Step 1 Make a directory inside your \"tessel-code\" folder called \"storage\", change directory into that folder, and initialize a tessel project: `mkdir storage; cd storage; t2 init` ### Step 2 Plug Tessel into your computer via USB, then plug a USB mass storage device (flash drive) into either of Tessel's USB ports. ![](http://i.imgur.com/uifn1p7.jpg) ### Step 3 You don't need to install a library to use a USB storage module. We will use the [fs](https://nodejs.org/api/fs.html) (filesystem) library that's built into Node.js to interact with USB mass storage devices. In the folder where you ran `t2 init`, rename \"index.js\" to \"storage.js\" and replace the file's contents with the following: {% highlight js %} // Any copyright is dedicated to the Public Domain. // http://creativecommons.org/publicdomain/zero/1.0/ /********************************************* Write some text to a file on a USB mass storage device, then read it back. *********************************************/ // Import the fs library var fs = require('fs'); var path = require('path'); var mountPoint = '/mnt/sda1'; // The first flash drive you plug in will be mounted here, the second will be at '/mnt/sdb1' var filepath = path.join(mountPoint, 'myFile.txt'); var textToWrite = 'Hello Tessel!'; // Write the text to a file on the flash drive fs.writeFile(filepath, textToWrite, function () { console.log('Wrote', textToWrite, 'to', filepath, 'on USB mass storage device.'); }); // Read the text we wrote from the file fs.readFile(filepath, function (err, data) { console.log('Read', data.toString(), 'from USB mass storage device.'); }); {% endhighlight %} Save the file. ### Step 4 In your command line, `t2 run storage.js` Now you can create, write to, read from, and otherwise manipulate files on USB storage devices! **Bonus:** Try writing some longer text (or output from a different module) by using streams. Hint: look up the fs function `createWriteStream`. To see what else you can do with a USB storage module, read the [fs](https://nodejs.org/api/fs.html) documentation. ![](http://i.imgur.com/wKksk4X.gif) ### Step 5 What else can you do with a USB mass storage device? Get inspired by a [community-created project.](http://tessel.io/projects) What are you making? [Share your invention!](//tessel.io/projects) If you run into any issues you can check out the [storage forums](https://forums.tessel.io/c/usb-modules/storage).","title":"Storage"},{"location":"tutorials/Tessel/T2Docs/","text":"Tessel 2 Docs This is a GitBook-formatted guide. You may read the processed document at https://www.gitbook.com/book/tessel/t2-docs/details . PRs to this repository are automatically published online. Developing the Gitbook Editing online GitBooks are editable online! Visit the GitBook repository for the Tessel 2 docs to suggest changes through a graphical editing format. Requirements The docs are built using a command line tool called GitBook , which requires: Node Version 4 or higher NPM Version 2 or higher Running GitBook locally Clone this repo: https://github.com/tessel/t2-docs.git ( Learn more here ) Moving into the docs directory: cd t2-docs Install the project dependecies: npm install Start the documentation generation: npm start Changing the contents SUMMARY.md is autogenerated using the gitbook-summary tool, using instructions from book.json . The command to regenerate is npm run build , which is automatically run during the npm start command. Deployment The master branch of this repo is automatically deployed when new changes are committed. Updates are deployed via GitBook ( see build history by commit ) to display at tessel.io/docs .","title":"Tessel 2 Docs"},{"location":"tutorials/Tessel/T2Docs/#tessel-2-docs","text":"This is a GitBook-formatted guide. You may read the processed document at https://www.gitbook.com/book/tessel/t2-docs/details . PRs to this repository are automatically published online.","title":"Tessel 2 Docs"},{"location":"tutorials/Tessel/T2Docs/#developing-the-gitbook","text":"","title":"Developing the Gitbook"},{"location":"tutorials/Tessel/T2Docs/#editing-online","text":"GitBooks are editable online! Visit the GitBook repository for the Tessel 2 docs to suggest changes through a graphical editing format.","title":"Editing online"},{"location":"tutorials/Tessel/T2Docs/#requirements","text":"The docs are built using a command line tool called GitBook , which requires: Node Version 4 or higher NPM Version 2 or higher","title":"Requirements"},{"location":"tutorials/Tessel/T2Docs/#running-gitbook-locally","text":"Clone this repo: https://github.com/tessel/t2-docs.git ( Learn more here ) Moving into the docs directory: cd t2-docs Install the project dependecies: npm install Start the documentation generation: npm start","title":"Running GitBook locally"},{"location":"tutorials/Tessel/T2Docs/#changing-the-contents","text":"SUMMARY.md is autogenerated using the gitbook-summary tool, using instructions from book.json . The command to regenerate is npm run build , which is automatically run during the npm start command.","title":"Changing the contents"},{"location":"tutorials/Tessel/T2Docs/#deployment","text":"The master branch of this repo is automatically deployed when new changes are committed. Updates are deployed via GitBook ( see build history by commit ) to display at tessel.io/docs .","title":"Deployment"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/","text":"access point Networking hardware which creates a local area network over Wifi analog In an electrical signal, existing in a continuous range, as opposed to the discrete ranges of digital. Sparkfun has a good writeup on analog versus digital if you want to learn more. API Application program interface: a set of tools and protocols which can be used to build software. In the case of Tessel, the hardware API is a library you can use to connect to modules, manipulate LEDs, and call out specific pins CLI Command line interface: a tool which lets you interact with a program (or in the case of Tessel, with the Tessel) via text-based commands in the command line, or terminal communication protocols Defined ways of communicating, e.g. a map between timed toggling of digital signals and hexadecimal values. Learn more in the Communication Protocols doc . datasheet A document of information about an electrical part or component. Typically, the manufacturer of an integrated circuit (IC) will provide a corresponding datasheet. Datasheets are usually available as PDF documents online, and can be found by searching for the part's number in a search engine. DFU device firmware upgrade, a mode of operation which allows for reprogramming of device firmware digital In an electrical signal, existing at discrete/binary values: on or off, zero or one. This can be used simply, e.g. on/off states of a switch or light, or you can toggle digital signals very quickly to encode complex messaging with communication protocols . Sparkfun has a good writeup on analog versus digital if you want to learn more. GPIO General purpose input and output: electrical pins which can be configured for various purposes I2C A hardware communication protocol which uses two wires: SCL and SDA. Read more about it in the Communication Protocols doc . interrupt An electrical signal which tells the processor that something needs immediate attention LAN Local area network LED Light-emitting diode master A machine or device directly controlling another machine or device MDNS Multicast domain name system, a way to map IPs to devices in a small network MISO Master input/slave output: in a SPI interface, the wire which carries commands to the controlling device from the device(s) under control MOSI Master output/slave input: in a SPI interface, the wire which carries commands from the controlling device to the device(s) under control module port A standard interface for connecting wires and modules to Tessel, configured as 10 \"pins\" or points of electrical connection pins Points of electrical connection with an integrated circuit ports Interfaces for electrical connections pull-up Ensures that given no input, the circuit assumes a defualt value, which is pulled high. pull-down Ensures that given no input, the circuit assumes a default value, which is pulled low. PWM Pulse-width modulation: a hardware communication protocol where there is a digital signal fluctuating between values at a set period, and the message is encoded by changing the percentage of that period in which the signal stays at one of the values. This can be used to approximate an analog signal on a pin which only supports digital signaling. A common application is in motor controllers, mapping a servo motor position to the percentage of the time a signal is held high register A register is a location in processor memory. Information in a register is stored in the form of digital (0 or 1) bytes. Typically, registers (and how each one can be used) are described in the datasheet of a part. RX Receive: the wire in a UART interface which receives data from the controlled device SCK Serial clock: the clock wire of a SPI interface, which ensures that the communicating hardware components are in sync and therefore able to understand each other SCL Serial clock line: the clock wire of an I2C interface, which ensures that the communicating hardware components are in sync and therefore able to understand each other SDA Serial data line: the data-carrying wire of an I2C interface serial See: UART slave A device or part of a device which is directly controlled by another SPI A hardware communication protocol which uses SCK, MISO, MOSI, and SS/CS (chip select) lines. Learn more in the Communication Protocols doc . T2 Tessel 2 Tessel module A piece of hardware built to interface with Tessel's module ports, paired with a software library TX Transmit: the wire in a UART interface which sends data to the controlled device UART Also referred to as serial. A communication protocol using the RX and TX lines. Learn more in the Communication Protocols doc .","title":"GLOSSARY"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#access-point","text":"Networking hardware which creates a local area network over Wifi","title":"access point"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#analog","text":"In an electrical signal, existing in a continuous range, as opposed to the discrete ranges of digital. Sparkfun has a good writeup on analog versus digital if you want to learn more.","title":"analog"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#api","text":"Application program interface: a set of tools and protocols which can be used to build software. In the case of Tessel, the hardware API is a library you can use to connect to modules, manipulate LEDs, and call out specific pins","title":"API"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#cli","text":"Command line interface: a tool which lets you interact with a program (or in the case of Tessel, with the Tessel) via text-based commands in the command line, or terminal","title":"CLI"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#communication-protocols","text":"Defined ways of communicating, e.g. a map between timed toggling of digital signals and hexadecimal values. Learn more in the Communication Protocols doc .","title":"communication protocols"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#datasheet","text":"A document of information about an electrical part or component. Typically, the manufacturer of an integrated circuit (IC) will provide a corresponding datasheet. Datasheets are usually available as PDF documents online, and can be found by searching for the part's number in a search engine.","title":"datasheet"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#dfu","text":"device firmware upgrade, a mode of operation which allows for reprogramming of device firmware","title":"DFU"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#digital","text":"In an electrical signal, existing at discrete/binary values: on or off, zero or one. This can be used simply, e.g. on/off states of a switch or light, or you can toggle digital signals very quickly to encode complex messaging with communication protocols . Sparkfun has a good writeup on analog versus digital if you want to learn more.","title":"digital"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#gpio","text":"General purpose input and output: electrical pins which can be configured for various purposes","title":"GPIO"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#i2c","text":"A hardware communication protocol which uses two wires: SCL and SDA. Read more about it in the Communication Protocols doc .","title":"I2C"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#interrupt","text":"An electrical signal which tells the processor that something needs immediate attention","title":"interrupt"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#lan","text":"Local area network","title":"LAN"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#led","text":"Light-emitting diode","title":"LED"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#master","text":"A machine or device directly controlling another machine or device","title":"master"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#mdns","text":"Multicast domain name system, a way to map IPs to devices in a small network","title":"MDNS"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#miso","text":"Master input/slave output: in a SPI interface, the wire which carries commands to the controlling device from the device(s) under control","title":"MISO"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#mosi","text":"Master output/slave input: in a SPI interface, the wire which carries commands from the controlling device to the device(s) under control","title":"MOSI"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#module-port","text":"A standard interface for connecting wires and modules to Tessel, configured as 10 \"pins\" or points of electrical connection","title":"module port"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#pins","text":"Points of electrical connection with an integrated circuit","title":"pins"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#ports","text":"Interfaces for electrical connections","title":"ports"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#pull-up","text":"Ensures that given no input, the circuit assumes a defualt value, which is pulled high.","title":"pull-up"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#pull-down","text":"Ensures that given no input, the circuit assumes a default value, which is pulled low.","title":"pull-down"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#pwm","text":"Pulse-width modulation: a hardware communication protocol where there is a digital signal fluctuating between values at a set period, and the message is encoded by changing the percentage of that period in which the signal stays at one of the values. This can be used to approximate an analog signal on a pin which only supports digital signaling. A common application is in motor controllers, mapping a servo motor position to the percentage of the time a signal is held high","title":"PWM"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#register","text":"A register is a location in processor memory. Information in a register is stored in the form of digital (0 or 1) bytes. Typically, registers (and how each one can be used) are described in the datasheet of a part.","title":"register"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#rx","text":"Receive: the wire in a UART interface which receives data from the controlled device","title":"RX"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#sck","text":"Serial clock: the clock wire of a SPI interface, which ensures that the communicating hardware components are in sync and therefore able to understand each other","title":"SCK"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#scl","text":"Serial clock line: the clock wire of an I2C interface, which ensures that the communicating hardware components are in sync and therefore able to understand each other","title":"SCL"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#sda","text":"Serial data line: the data-carrying wire of an I2C interface","title":"SDA"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#serial","text":"See: UART","title":"serial"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#slave","text":"A device or part of a device which is directly controlled by another","title":"slave"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#spi","text":"A hardware communication protocol which uses SCK, MISO, MOSI, and SS/CS (chip select) lines. Learn more in the Communication Protocols doc .","title":"SPI"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#t2","text":"Tessel 2","title":"T2"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#tessel-module","text":"A piece of hardware built to interface with Tessel's module ports, paired with a software library","title":"Tessel module"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#tx","text":"Transmit: the wire in a UART interface which sends data to the controlled device","title":"TX"},{"location":"tutorials/Tessel/T2Docs/GLOSSARY/#uart","text":"Also referred to as serial. A communication protocol using the RX and TX lines. Learn more in the Communication Protocols doc .","title":"UART"},{"location":"tutorials/Tessel/T2Docs/Introduction/","text":"Tessel 2 Docs Looking for Tessel 1 docs? Look here . Welcome to the Tessel 2 documentation. All of the information you need is separated into three sections at left: API, Debugging, and Tutorials. If you are looking for information on how to use Tessel or one of the Tessel modules, look in the API section. Looking to learn more about hardware and how to create it? Check out the information in the Tutorials section. If you are here to debug an issue or get up to speed on the open source project, the Debugging section should help you, particularly the Technical Overview . Looking for information you can't find? Please report incorrect or missing information as an issue on the Tessel 2 docs repo . About Tessel Tessel is an open source project under open governance. Read more here . Fritzing part for Tessel Get involved: The Tessel project welcomes contributors! Get started here and reach out if you have any questions. Stay in the loop: Sign up for our weekly-ish newsletter This Week in Tessel License: This documentation repo is CC-BY-SA 4.0 licensed.","title":"Tessel 2 Docs"},{"location":"tutorials/Tessel/T2Docs/Introduction/#tessel-2-docs","text":"Looking for Tessel 1 docs? Look here .","title":"Tessel 2 Docs"},{"location":"tutorials/Tessel/T2Docs/Introduction/#welcome-to-the-tessel-2-documentation","text":"All of the information you need is separated into three sections at left: API, Debugging, and Tutorials. If you are looking for information on how to use Tessel or one of the Tessel modules, look in the API section. Looking to learn more about hardware and how to create it? Check out the information in the Tutorials section. If you are here to debug an issue or get up to speed on the open source project, the Debugging section should help you, particularly the Technical Overview . Looking for information you can't find? Please report incorrect or missing information as an issue on the Tessel 2 docs repo .","title":"Welcome to the Tessel 2 documentation."},{"location":"tutorials/Tessel/T2Docs/Introduction/#about-tessel","text":"Tessel is an open source project under open governance. Read more here . Fritzing part for Tessel Get involved: The Tessel project welcomes contributors! Get started here and reach out if you have any questions. Stay in the loop: Sign up for our weekly-ish newsletter This Week in Tessel License: This documentation repo is CC-BY-SA 4.0 licensed.","title":"About Tessel"},{"location":"tutorials/Tessel/T2Docs/SUMMARY/","text":"Tessel 2 Documentation API CLI Hardware API Modules Network API Supported Languages Debugging LAN Discovery Node.js Root Access Technical Overview USB Hardware Modules Tessel 2 Overview Tutorials Communication Protocols Interrupts Making Your Own Module Pinpull Pulse Width Modulation","title":"Tessel 2 Documentation"},{"location":"tutorials/Tessel/T2Docs/SUMMARY/#tessel-2-documentation","text":"API CLI Hardware API Modules Network API Supported Languages Debugging LAN Discovery Node.js Root Access Technical Overview USB Hardware Modules Tessel 2 Overview Tutorials Communication Protocols Interrupts Making Your Own Module Pinpull Pulse Width Modulation","title":"Tessel 2 Documentation"},{"location":"tutorials/Tessel/T2Docs/API/CLI/","text":"Tessel 2 Command Line Interface Installation Updating Tessel Setup Usage/CLI commands Installation Prerequisites for installation: Node.js 4.2.x or greater npm install -g t2-cli The best place to go next is the Tessel 2 start experience , which will walk you through a tutorial. Updating Tessel 2 On-board OS/Firmware How do I know if I need to update my T2? t2-cli and t2-firmware are separately versioned. For updating t2-cli: When a CLI command is run on an internet-connected computer, the CLI automatically checks for updates to the t2-cli module. If an update is available, the CLI will provide the update instructions using a notifier to the user (as shown below). The CLI can be updated with a global npm re-install of the CLI using the command npm install -g t2-cli . The CLI only checks once per day to ensure that the CLI functioning does not slow down. For updating t2-firmware: The user does not get update information for t2-firmware from the CLI. The most convenient and fastest way to find out if a firmware update is needed is by running the t2 update command and the t2-firmware will update automatically if there is a newer firmware version available. Otherwise, you can run t2 version to get the version running on your Tessel, and then t2 update -l to see the 10 newest versions available. Updating Simply run t2 update . If you want to update to a specific version, run t2 update -v VERSION_NUM where VERSION_NUM is one of the versions returned by t2 update -l (like t2 update -v 0.0.6 ). Setup USB Connecting to a Tessel 2 over USB requires no special setup. LAN In order to authorize the device with your computer to work over a LAN connection, call t2 provision after connecting it via USB. This will place an SSH key on the device. Use the t2 wifi command as described below to connect Tessel 2 to a local network. You should now be able to access your Tessel 2 remotely. SSH To connect to your Tessel 2 over SSH use the t2 root command. Before you connect, call t2 provision to authorize your computer to access your Tessel via SSH. Usage * t2 root * [--timeout] Set timeout in seconds for scanning networked Tessels. The default is 5 seconds. * [--key] SSH key for authorization with your Tessel. Optional, only required if you have changed the keypath after your Tessel was provisioned. * [--name] The name of the Tessel where the command will be executed. * [--output] Enable or disable writing command output to stdout/stderr. Useful for CLI API consumers. Set to true by default * [--loglevel] Set the loglevel. It is set to basic by default. Available options are 'trace', 'debug', 'basic', 'info', 'http', 'warn', 'error' Virtual Machine Check out the Virtual Machine repo for instructions on how to set up the VM. All CLI commands except provision and wifi should be functional with the VM. Usage Specify which Tessel to use with the --name name option appended to any command. If --name is not specified, CLI will look for an environment variable, e.g. export TESSEL=Bulbasaur . If none of the above are specified and there is one Tessel connected over USB, this Tessel will be preferred. Finally, if there is only one Tessel available and none of the above are specified, CLI will choose that Tessel. Starting Projects t2 init in the current directory, create a package.json and index.js with Hello World code . Project Files Along with the package.json and index.js included in the t2 init process, there are some other files that may be useful for your project: * .tesselignore similar to .gitignore or .npmignore , this file should list any files or directories you want ignored by the T2 bundling and deployment process. This is handy when using the --full flag, which tells T2 to bundle everything in the project directory. * .tesselinclude the overriding and opposite behavior of .tesselignore , this file should list any files or directories you want included with the T2 bundling and deployment process. This is handy for including non-JavaScript assets, like HTML, CSS, and images, for use within your project. * In your JavaScript program, assets listed in the .tesselinclude file should always be accessed using __dirname (read more about __dirname in the Node.js docs ). For example, if there is a file at public/index.html and it's listed in your .tesselinclude , from your JavaScript program, you'd read it like this: fs.readFile(path.join(__dirname, \"public/index.html\"), \"utf8\", (error, contents) = ...); . Tessel Management t2 key will generate a local SSH keypair for authenticating to a Tessel. Use with the generate argument to generate a new local SSH keypair for authenticating to a Tessel. t2 list will show what Tessels are available over WiFi and USB. t2 provision will authorize your computer to access a Tessel over SSH. (USB-connected Tessel only) t2 rename will change the name of a Tessel. t2 reboot will reboot your Tessel. t2 restore Restore your Tessel to factory defaults by installing the factory version of OpenWrt-Tessel , and T2-Firmware . Code Deployment During code deployment, CLI looks for .tesselignore and .tesselinclude files to let it know which files it should bundle up and push over to Tessel. In the default bundling process, CLI takes the file passed into the run or push command and uses it as an entry point to build a dependency graph (similar to Browserify ). Once the dependencies are known, binary modules are replaced by pre-compiled (for mips) binaries, assets are copied, and everything is tarred before sent to the awaiting Tessel. * t2 run file copy the file and its dependencies into Tessel's RAM run immediately. Use this during development of your device application. * [--lan] deploy over LAN connection * [--usb] deploy over USB connection * [--slim] true by default, copy only files needed by the program to run * [--full] the opposite of --slim, copy all the files in the project directory * [--compress] true by default, compress and minify the project code prior to copying it to the device * [--binopts] Arguments sent to the binary (e.g. Node.js, Python). For example, to enable ES modules in Node use --binopts=\"--experimental-modules\" * t2 push file copy the file and its dependencies into Tessel's Flash memory run immediately. Once deployed with push command, the device application will automatically run every time the Tessel restarts. * [--lan] deploy over LAN connection * [--usb] deploy over USB connection * [--slim] true by default, copy only files needed by the program to run * [--full] the opposite of --slim, copy all the files in the project directory * [--compress] true by default, compress and minify the project code prior to copying it to the device * [--binopts] Arguments sent to the binary (e.g. Node.js, Python). For example, to enable ES modules in Node use --binopts=\"--experimental-modules\" * t2 erase erase any code pushed using the t2 push command Using Wifi t2 wifi show details about an existing WiFi connection [-l] lists the available networks [-n SSID] required, connects to the provided SSID [-p PASS] optional, connects with the given password [-s SECURITY] connects with the given security type, valid options: none open network, no need for a password wep WEP network, password required psk WPA Personal, password required psk2 WPA2 Personal, password required wpa WPA Enterprise, password required wpa2 WPA2 Enterprise, password required [--off] disconnects from the current network [--on] connects to the last configured network Create An Access Point t2 ap [-n SSID] required, creates a network with the given ssid [-p PASS] optional for open networks, creates a network with the given password [-s SECURITY] creates a network with the given security, valid options: none open network, default if no password is given wep WEP network, password required psk WPA Personal, password required psk2 WPA2 Personal, reccomended, password required default if password is given without security [--off] turn off the current access point [--on] turn on the most recently used access point","title":"Tessel 2 Command Line Interface"},{"location":"tutorials/Tessel/T2Docs/API/CLI/#tessel-2-command-line-interface","text":"Installation Updating Tessel Setup Usage/CLI commands","title":"Tessel 2 Command Line Interface"},{"location":"tutorials/Tessel/T2Docs/API/CLI/#installation","text":"Prerequisites for installation: Node.js 4.2.x or greater npm install -g t2-cli The best place to go next is the Tessel 2 start experience , which will walk you through a tutorial.","title":"Installation"},{"location":"tutorials/Tessel/T2Docs/API/CLI/#updating-tessel-2-on-board-osfirmware","text":"","title":"Updating Tessel 2 On-board OS/Firmware"},{"location":"tutorials/Tessel/T2Docs/API/CLI/#how-do-i-know-if-i-need-to-update-my-t2","text":"t2-cli and t2-firmware are separately versioned. For updating t2-cli: When a CLI command is run on an internet-connected computer, the CLI automatically checks for updates to the t2-cli module. If an update is available, the CLI will provide the update instructions using a notifier to the user (as shown below). The CLI can be updated with a global npm re-install of the CLI using the command npm install -g t2-cli . The CLI only checks once per day to ensure that the CLI functioning does not slow down. For updating t2-firmware: The user does not get update information for t2-firmware from the CLI. The most convenient and fastest way to find out if a firmware update is needed is by running the t2 update command and the t2-firmware will update automatically if there is a newer firmware version available. Otherwise, you can run t2 version to get the version running on your Tessel, and then t2 update -l to see the 10 newest versions available.","title":"How do I know if I need to update my T2?"},{"location":"tutorials/Tessel/T2Docs/API/CLI/#updating","text":"Simply run t2 update . If you want to update to a specific version, run t2 update -v VERSION_NUM where VERSION_NUM is one of the versions returned by t2 update -l (like t2 update -v 0.0.6 ).","title":"Updating"},{"location":"tutorials/Tessel/T2Docs/API/CLI/#setup","text":"","title":"Setup"},{"location":"tutorials/Tessel/T2Docs/API/CLI/#usb","text":"Connecting to a Tessel 2 over USB requires no special setup.","title":"USB"},{"location":"tutorials/Tessel/T2Docs/API/CLI/#lan","text":"In order to authorize the device with your computer to work over a LAN connection, call t2 provision after connecting it via USB. This will place an SSH key on the device. Use the t2 wifi command as described below to connect Tessel 2 to a local network. You should now be able to access your Tessel 2 remotely.","title":"LAN"},{"location":"tutorials/Tessel/T2Docs/API/CLI/#ssh","text":"To connect to your Tessel 2 over SSH use the t2 root command. Before you connect, call t2 provision to authorize your computer to access your Tessel via SSH. Usage * t2 root * [--timeout] Set timeout in seconds for scanning networked Tessels. The default is 5 seconds. * [--key] SSH key for authorization with your Tessel. Optional, only required if you have changed the keypath after your Tessel was provisioned. * [--name] The name of the Tessel where the command will be executed. * [--output] Enable or disable writing command output to stdout/stderr. Useful for CLI API consumers. Set to true by default * [--loglevel] Set the loglevel. It is set to basic by default. Available options are 'trace', 'debug', 'basic', 'info', 'http', 'warn', 'error'","title":"SSH"},{"location":"tutorials/Tessel/T2Docs/API/CLI/#virtual-machine","text":"Check out the Virtual Machine repo for instructions on how to set up the VM. All CLI commands except provision and wifi should be functional with the VM.","title":"Virtual Machine"},{"location":"tutorials/Tessel/T2Docs/API/CLI/#usage","text":"Specify which Tessel to use with the --name name option appended to any command. If --name is not specified, CLI will look for an environment variable, e.g. export TESSEL=Bulbasaur . If none of the above are specified and there is one Tessel connected over USB, this Tessel will be preferred. Finally, if there is only one Tessel available and none of the above are specified, CLI will choose that Tessel.","title":"Usage"},{"location":"tutorials/Tessel/T2Docs/API/CLI/#starting-projects","text":"t2 init in the current directory, create a package.json and index.js with Hello World code .","title":"Starting Projects"},{"location":"tutorials/Tessel/T2Docs/API/CLI/#project-files","text":"Along with the package.json and index.js included in the t2 init process, there are some other files that may be useful for your project: * .tesselignore similar to .gitignore or .npmignore , this file should list any files or directories you want ignored by the T2 bundling and deployment process. This is handy when using the --full flag, which tells T2 to bundle everything in the project directory. * .tesselinclude the overriding and opposite behavior of .tesselignore , this file should list any files or directories you want included with the T2 bundling and deployment process. This is handy for including non-JavaScript assets, like HTML, CSS, and images, for use within your project. * In your JavaScript program, assets listed in the .tesselinclude file should always be accessed using __dirname (read more about __dirname in the Node.js docs ). For example, if there is a file at public/index.html and it's listed in your .tesselinclude , from your JavaScript program, you'd read it like this: fs.readFile(path.join(__dirname, \"public/index.html\"), \"utf8\", (error, contents) = ...); .","title":"Project Files"},{"location":"tutorials/Tessel/T2Docs/API/CLI/#tessel-management","text":"t2 key will generate a local SSH keypair for authenticating to a Tessel. Use with the generate argument to generate a new local SSH keypair for authenticating to a Tessel. t2 list will show what Tessels are available over WiFi and USB. t2 provision will authorize your computer to access a Tessel over SSH. (USB-connected Tessel only) t2 rename will change the name of a Tessel. t2 reboot will reboot your Tessel. t2 restore Restore your Tessel to factory defaults by installing the factory version of OpenWrt-Tessel , and T2-Firmware .","title":"Tessel Management"},{"location":"tutorials/Tessel/T2Docs/API/CLI/#code-deployment","text":"During code deployment, CLI looks for .tesselignore and .tesselinclude files to let it know which files it should bundle up and push over to Tessel. In the default bundling process, CLI takes the file passed into the run or push command and uses it as an entry point to build a dependency graph (similar to Browserify ). Once the dependencies are known, binary modules are replaced by pre-compiled (for mips) binaries, assets are copied, and everything is tarred before sent to the awaiting Tessel. * t2 run file copy the file and its dependencies into Tessel's RAM run immediately. Use this during development of your device application. * [--lan] deploy over LAN connection * [--usb] deploy over USB connection * [--slim] true by default, copy only files needed by the program to run * [--full] the opposite of --slim, copy all the files in the project directory * [--compress] true by default, compress and minify the project code prior to copying it to the device * [--binopts] Arguments sent to the binary (e.g. Node.js, Python). For example, to enable ES modules in Node use --binopts=\"--experimental-modules\" * t2 push file copy the file and its dependencies into Tessel's Flash memory run immediately. Once deployed with push command, the device application will automatically run every time the Tessel restarts. * [--lan] deploy over LAN connection * [--usb] deploy over USB connection * [--slim] true by default, copy only files needed by the program to run * [--full] the opposite of --slim, copy all the files in the project directory * [--compress] true by default, compress and minify the project code prior to copying it to the device * [--binopts] Arguments sent to the binary (e.g. Node.js, Python). For example, to enable ES modules in Node use --binopts=\"--experimental-modules\" * t2 erase erase any code pushed using the t2 push command","title":"Code Deployment"},{"location":"tutorials/Tessel/T2Docs/API/CLI/#using-wifi","text":"t2 wifi show details about an existing WiFi connection [-l] lists the available networks [-n SSID] required, connects to the provided SSID [-p PASS] optional, connects with the given password [-s SECURITY] connects with the given security type, valid options: none open network, no need for a password wep WEP network, password required psk WPA Personal, password required psk2 WPA2 Personal, password required wpa WPA Enterprise, password required wpa2 WPA2 Enterprise, password required [--off] disconnects from the current network [--on] connects to the last configured network","title":"Using Wifi"},{"location":"tutorials/Tessel/T2Docs/API/CLI/#create-an-access-point","text":"t2 ap [-n SSID] required, creates a network with the given ssid [-p PASS] optional for open networks, creates a network with the given password [-s SECURITY] creates a network with the given security, valid options: none open network, default if no password is given wep WEP network, password required psk WPA Personal, password required psk2 WPA2 Personal, reccomended, password required default if password is given without security [--off] turn off the current access point [--on] turn on the most recently used access point","title":"Create An Access Point"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/","text":"Tessel 2 Hardware API Ports and pins Modules Pin mapping Pull-up and Pull-down pins Digital pins Analog pins Interrupts PWM pins Terms used I2C SPI UART/Serial Power management LEDs Button USB ports When you require('tessel') within a script which is executed on Tessel 2, this loads a library which interfaces with the Tessel 2 hardware, including pins, ports, and LEDs, just like Tessel 1 ( Tessel 1 hardware documentation ). The code for Tessel 2's hardware object can be found here . Ports and pins Tessel has two ports, A and B. They are referred to as tessel.port.B . tessel.port['B'] is also an acceptable reference style. Tessel's ports can be used as module ports as in Tessel 1 (e.g. accelerometer.use(tessel.port.B) ), or used as flexible GPIO pins (e.g. myPin = tessel.port.A.pin[0] ). Modules Tessel 2's module ports can be used with Tessel modules much as in Tessel 1 . Here is an example of using the Tessel Climate module on Tessel's port B: var tessel = require('tessel'); var climatelib = require('climate-si7020').use(tessel.port.B); Pin mapping The module ports are not just for modules! They can also be used as flexible, simply addressable General purpose input-output (GPIO) pins. GPIO pins provide access for digital and analog signal lines. Available pins are exposed through the .pin, .digital, .analog, and .pwm arrays. The pin capabilities for ports A and B are as follows: Port Pin Digital I/O SCL SDA SCK MISO MOSI TX RX Analog In Analog Out Interrupt PWM A 0 \u2713 \u2713 A 1 \u2713 \u2713 A 2 \u2713 \u2713 \u2713 A 3 \u2713 \u2713 A 4 \u2713 \u2713 \u2713 A 5 \u2713 \u2713 \u2713 \u2713 A 6 \u2713 \u2713 \u2713 \u2713 A 7 \u2713 \u2713 \u2713 B 0 \u2713 \u2713 \u2713 B 1 \u2713 \u2713 \u2713 B 2 \u2713 \u2713 \u2713 \u2713 B 3 \u2713 \u2713 \u2713 B 4 \u2713 \u2713 \u2713 B 5 \u2713 \u2713 \u2713 \u2713 \u2713 B 6 \u2713 \u2713 \u2713 \u2713 \u2713 B 7 \u2713 \u2713 \u2713 \u2713 Tessel 2 Pin Diagram If you're newer to hardware and these functions look like alphabet soup to you, take a look at our communication protocols documentation to get an idea of how these pins should be used. By default, all of the pins are pulled high if not specifically set. Pull-up and Pull-down pins Pins 2-7 on both Ports are available for pull-up and pull-down. The basic function of a pull-up resistor is to ensure that given no other input, a circuit assumes a default value. The 'pullup' mode pulls the line high and the 'pulldown' mode pulls it low. Usage // Invoke this method to set the pull mode. pullType can be - pullup, pulldown or none. pin.pull(pullType, callback); Example : var tessel= require('tessel'); // Import Tessel var pin = tessel.port.A.pin[2]; // Select pin 2 on port A pin.pull('pullup', (error, buffer) = { if (error) { throw error; } console.log(buffer.toString('hex')); // The output would be 88. Which is an OK Signal from SAMD21 }) Learn more about using the Pullup / Pulldown API. Digital pins A digital pin is either high (on/3.3V) or low (off/0V). Any pin on both ports A and B, other than 3.3V and GND, can be used be used as a digital pin. All pins are pulled high to 3.3V by default. pin.write: Set the digital value of a pin. pin.write(number, callback(error, buffer)); Option Type Description Required number Number 0 for \"low\", 1 for \"high\" Yes callback Function Called when write is complete Yes error Error Contains information if an error occured, otherwise null Yes buffer Buffer Value written to the pin Yes Example: var tessel = require('tessel'); // Import tessel var pin = tessel.port.A.pin[2]; // Select pin 2 on port A pin.write(1, (error, buffer) = { if (error) { throw error; } console.log(buffer.toString()); // Log the value written to the pin }); pin.read: Read the digital value of a pin. pin.read(callback(error, number)); Option Type Description Required callback Function Called when read is complete Yes error Error Contains information if an error occured, otherwise null Yes number Number 1 if \"high\", 0 if \"low\" Yes Example: var tessel = require('tessel'); // Import tessel var pin = tessel.port.A.pin[2]; // Select pin 2 on port A pin.read(function(error, number) { if (error) { throw error; } console.log(number); // 1 if high , 0 if low }); pin.toggle: Toggle the value of a digital pin. When the value of a pin is high, then it is set to low, and vice versa. pin.toggle(callback(error, buffer)); Option Type Description Required callback Function Called when action is complete Yes error Error Contains information if an error occured, otherwise null Yes buffer Buffer Value written to the pin Yes var tessel = require('tessel'); // Import tessel var pin = tessel.port.A.pin[3]; // Select pin 3 on port A pin.toggle((error, buffer) = { if (error) { throw error; } console.log(buffer.toString()); // Log the value written to the pin }); Analog pins An analog pin is a pin whose value can vary in the range between 0V and 3.3V. The analog pin API represents these this value as a percentage, between 0 and 1, where 1 stands for 3.3V. pin.analogWrite: Set the analog value of a pin. Enabled on pin 7 of Port B. pin.analogWrite(number); Option Type Description Required number Number Minimum value 0, maximum value 1 Yes Example: var tessel = require('tessel'); // Import tessel var pin = tessel.port.B.pin[7]; // Select pin 7 on port B pin.analogWrite(0.6); // Turn pin to 60% of high voltage pin.analogRead: Read the analog value of a pin. Enabled on pins 4 and 7 on Port A,and all pins on Port B. On both ports, all pins are pulled high by default, which means a pin not connected to any sort of sensor or resistor can still return a value over 0. pin.analogRead(callback(error, number)); Option Type Description Required callback Function Called when read is complete Yes error Error Contains information if an error occured, otherwise null Yes number Number Minimum value 0, maximum value 1 Yes Example: var tessel = require('tessel'); // Import tessel var pin = tessel.port.A.pin[4]; // Select pin 4 on port A pin.analogRead((error, number) = { if (error) { throw error; } console.log(number); // The number is a value between 0 and 1 }); Interrupt Pins Pins 2, 5, 6, 7 on both Ports are available for interrupts. Interrupts allow us to register events based on state changes in a pin. Usage // Invoke the callback whenever the event occurs pin.on(eventName, callback); // Invoke the callback the first time the event occurs pin.once(eventName, callback); Available Events Event Name Description Notes rise Pin voltage rises fall Pin voltage falls change Pin voltage changes Passes current value of pin to callback high* Pin voltage goes high Only available via pin.once() low* Pin voltage goes low Only available via pin.once() * Only one of these events may be registered at a time. Learn more about using the interrupt API. PWM pins Tessel has four PWM pins: pins 5 and 6 on each module port. Usage tessel.pwmFrequency: Set the signal frequency in hertz. 1 hertz equals 1 cycle of signal per second. tessel.pwmFrequency(number); Option Type Description Required number Number Minimum value 1, maximum value 5000 Yes Note: the pwmFrequency function must be called before pwmDutyCycle . Re-setting pwmFrequency will disable PWM output until pwmDutyCycle is called again. pin.pwmDutyCycle: Set the percentage amount of time the pin is active each cycle of signal. pin.pwmDutyCycle(number); Option Type Description Required number Number Minimum value 0, maximum value 1, e.g. 0.6 Yes Learn more about using the PWM API. Terms Used The following sections use industry standard technical terms that are considered non-inclusive. They are used here in an explicitly technical manner and only to be accurate in describing these wire communication protocols. The terms are used strictly as defined here: Master: A machine or device directly controlling another (source: Oxford Dictionary ) Slave: A device, or part of one, directly controlled by another (source: Oxford Dictionary ) I2C An I2C channel uses the SCL and SDA pins (0 and 1 on Tessel 2). If you are unfamiliar with the I2C protocol, please see the communication protocols tutorial . Usage There are three different commands you can send over I2C: transfer, send, and read. i2c.transfer Write data to the slave device and then subsequently read data from the slave device. Can be used to read from a specific register (depending on the communication details of the slave device\u2013 read the datasheet!). A common use of this method is to send the address of a register, then receive back the information contained in that register. var tessel = require('tessel'); // Connect to device var port = tessel.port.A; // Use the SCL/SDA pins of Port A var slaveAddress = 0xDE; // Specific to device var i2c = new port.I2C(slaveAddress); // Initialize I2C communication // Details of I2C transfer var bytesToSend = [0xde, 0xad, 0xbe, 0xef]; // An array,can be the address of a register or data to write (depends on device) var numBytesToRead = 4; // Read back this number of bytes // Send/recieve data over I2C using i2c.transfer i2c.transfer(new Buffer(bytesToSend), numBytesToRead, function (error, dataReceived) { // Print data received (buffer of hex values) console.log('Buffer returned by I2C slave device ('+slaveAddress.toString(16)+'):', dataReceived); }); i2c.send Write data over I2C to the slave device without reading data back. var tessel = require('tessel'); // Connect to device var port = tessel.port.A; // Use the SCL/SDA pins of Port A var slaveAddress = 0xDE; // Specific to device var i2c = new port.I2C(slaveAddress); // Initialize I2C communication // Details of I2C transfer var bytesToSend = [0xde, 0xad, 0xbe, 0xef]; // An array,can be the address of a register or data to write (depends on device) // Send data over I2C using i2c.send i2c.send(new Buffer(bytesToSend), function (error) { // Print confirmation console.log('Wrote', bytesToSend, 'to slave device', slaveAddress.toString(16), 'over I2C.'); }); i2c.read Read data over I2C but do not write to the slave device. var tessel = require('tessel'); // Connect to device var port = tessel.port.A; // Use the SCL/SDA pins of Port A var slaveAddress = 0xDE; // Specific to device var i2c = new port.I2C(slaveAddress); // Initialize I2C communication // Details of I2C transfer var numBytesToRead = 4; // Read back this number of bytes // Read data over I2C using i2c.transfer i2c.read(numBytesToRead, function (error, dataReceived) { // Print data received (buffer of hex values) console.log('Buffer returned by I2C slave device ('+slaveAddress.toString(16)+'):', dataReceived); }); SPI A SPI channel uses the SCK, MISO, and MOSI pins (2, 3, and 4 on Tessel 2). If you are unfamiliar with the SPI protocol, please see the communication protocols tutorial . Here is an example using Tessel's SPI protocol: var port = tessel.port.A; var spi = new port.SPI({ clockSpeed: 4*1000*1000, // 4MHz polarity: 0, // Polarity - optional phase: 0, // Clock phase - optional chipSelect: port.pin[7] // Chip select - optional }); spi.transfer(new Buffer([0xde, 0xad, 0xbe, 0xef]), function (error, dataReceived) { console.log('buffer returned by SPI slave:', dataReceived); }); Wikipedia's article on SPI has an excellent section on polarity (cpol) and clock phase (cpha). UART/Serial A UART (serial) channel uses the TX and RX pins (5 and 6 on Tessel 2). If you are unfamiliar with the UART protocol, please see the communication protocols tutorial . Here is an example using Tessel's UART protocol: var port = tessel.port.A; var uart = new port.UART({ baudrate: 115200 }); uart.write('ahoy hoy\\n') uart.on('data', function (data) { console.log('received:', data); }) // UART objects are streams! // pipe all incoming data to stdout: uart.pipe(process.stdout); Power management Board tessel.reboot: Power cycle the board. This will clear RAM and restart the program once reboot is complete. This can be done with the t2 reboot command as well. tessel.reboot(); Ports Tessel 2's firmware turns off power to the port if a program does not require the tessel module. However, if tessel is required in the code, both will be turned on by default. It is possible to control the power to module ports with an explicit call: var Tessel = require('tessel-export'); var tessel = new Tessel({ ports: { A: false, B: false, } }); tessel.open: Allow power to one or both Tessel ports. tessel.open(portName); Option Type Description Required portName String Either 'A' or 'B' No Leaving out the port name will turn on power to both ports, i.e. tessel.open() . tessel.close: Disallow power to one or both Tessel ports. tessel.close(portName); Option Type Description Required portName String Either 'A' or 'B' No Leaving out the port name will turn off power to both ports, i.e. tessel.close() . LEDs There are 4 LEDs available on the Tessel 2, you may see them labeled on the board as ERR , WLAN , LED0 , and LED1 . They are available through the tessel.led object. // an array of available LEDs var leds = tessel.led; // ERR - Red var red = leds[0]; // WLAN - Amber var amber = leds[1]; // LED0 - Green var green = leds[2]; // LED1 - Blue var blue = leds[3]; Each LED has a few methods for controlling it. // Green LED var led = tessel.led[2]; /* * Property: isOn * Returns: boolean (true or false) if led is on * * Checks the led to see if it is on or not. */ if (led.isOn) { console.log('The green LED is currently on.'); } /* * Method: on * Returns: the led object (this makes it a chainable function) * * Turns the led ON. */ led.on(); /* * Method: off * Returns: the led object (this makes it a chainable function) * * Turns the led OFF. */ led.off(); /* * Method: toggle * Arguments: * - callback: function to call once the led's value has been set and is passed an error object if one occured * * Toggles the current state of the led and calls the callback function once that is done. */ led.toggle(function (error) { if (error) { console.log('There was an error with toggling the led.', error); } else { console.log('The green led is now on OR off!'); } }); Button Tessel 2's button is not programmable. During operation of a script, pressing the button will restart the script. If you hold down the button while plugging in power, Tessel 2 boots into DFU mode. This is typically used to load firmware built from source. USB Ports USB modules do not need to be accessed through the Tessel object. See tessel-av for an example USB module.","title":"Tessel 2 Hardware API"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#tessel-2-hardware-api","text":"Ports and pins Modules Pin mapping Pull-up and Pull-down pins Digital pins Analog pins Interrupts PWM pins Terms used I2C SPI UART/Serial Power management LEDs Button USB ports When you require('tessel') within a script which is executed on Tessel 2, this loads a library which interfaces with the Tessel 2 hardware, including pins, ports, and LEDs, just like Tessel 1 ( Tessel 1 hardware documentation ). The code for Tessel 2's hardware object can be found here .","title":"Tessel 2 Hardware API"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#ports-and-pins","text":"Tessel has two ports, A and B. They are referred to as tessel.port.B . tessel.port['B'] is also an acceptable reference style. Tessel's ports can be used as module ports as in Tessel 1 (e.g. accelerometer.use(tessel.port.B) ), or used as flexible GPIO pins (e.g. myPin = tessel.port.A.pin[0] ).","title":"Ports and pins"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#modules","text":"Tessel 2's module ports can be used with Tessel modules much as in Tessel 1 . Here is an example of using the Tessel Climate module on Tessel's port B: var tessel = require('tessel'); var climatelib = require('climate-si7020').use(tessel.port.B);","title":"Modules"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#pin-mapping","text":"The module ports are not just for modules! They can also be used as flexible, simply addressable General purpose input-output (GPIO) pins. GPIO pins provide access for digital and analog signal lines. Available pins are exposed through the .pin, .digital, .analog, and .pwm arrays. The pin capabilities for ports A and B are as follows: Port Pin Digital I/O SCL SDA SCK MISO MOSI TX RX Analog In Analog Out Interrupt PWM A 0 \u2713 \u2713 A 1 \u2713 \u2713 A 2 \u2713 \u2713 \u2713 A 3 \u2713 \u2713 A 4 \u2713 \u2713 \u2713 A 5 \u2713 \u2713 \u2713 \u2713 A 6 \u2713 \u2713 \u2713 \u2713 A 7 \u2713 \u2713 \u2713 B 0 \u2713 \u2713 \u2713 B 1 \u2713 \u2713 \u2713 B 2 \u2713 \u2713 \u2713 \u2713 B 3 \u2713 \u2713 \u2713 B 4 \u2713 \u2713 \u2713 B 5 \u2713 \u2713 \u2713 \u2713 \u2713 B 6 \u2713 \u2713 \u2713 \u2713 \u2713 B 7 \u2713 \u2713 \u2713 \u2713 Tessel 2 Pin Diagram If you're newer to hardware and these functions look like alphabet soup to you, take a look at our communication protocols documentation to get an idea of how these pins should be used. By default, all of the pins are pulled high if not specifically set.","title":"Pin mapping"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#pull-up-and-pull-down-pins","text":"Pins 2-7 on both Ports are available for pull-up and pull-down. The basic function of a pull-up resistor is to ensure that given no other input, a circuit assumes a default value. The 'pullup' mode pulls the line high and the 'pulldown' mode pulls it low.","title":"Pull-up and Pull-down pins"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#usage","text":"// Invoke this method to set the pull mode. pullType can be - pullup, pulldown or none. pin.pull(pullType, callback); Example : var tessel= require('tessel'); // Import Tessel var pin = tessel.port.A.pin[2]; // Select pin 2 on port A pin.pull('pullup', (error, buffer) = { if (error) { throw error; } console.log(buffer.toString('hex')); // The output would be 88. Which is an OK Signal from SAMD21 }) Learn more about using the Pullup / Pulldown API.","title":"Usage"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#digital-pins","text":"A digital pin is either high (on/3.3V) or low (off/0V). Any pin on both ports A and B, other than 3.3V and GND, can be used be used as a digital pin. All pins are pulled high to 3.3V by default. pin.write: Set the digital value of a pin. pin.write(number, callback(error, buffer)); Option Type Description Required number Number 0 for \"low\", 1 for \"high\" Yes callback Function Called when write is complete Yes error Error Contains information if an error occured, otherwise null Yes buffer Buffer Value written to the pin Yes Example: var tessel = require('tessel'); // Import tessel var pin = tessel.port.A.pin[2]; // Select pin 2 on port A pin.write(1, (error, buffer) = { if (error) { throw error; } console.log(buffer.toString()); // Log the value written to the pin }); pin.read: Read the digital value of a pin. pin.read(callback(error, number)); Option Type Description Required callback Function Called when read is complete Yes error Error Contains information if an error occured, otherwise null Yes number Number 1 if \"high\", 0 if \"low\" Yes Example: var tessel = require('tessel'); // Import tessel var pin = tessel.port.A.pin[2]; // Select pin 2 on port A pin.read(function(error, number) { if (error) { throw error; } console.log(number); // 1 if high , 0 if low }); pin.toggle: Toggle the value of a digital pin. When the value of a pin is high, then it is set to low, and vice versa. pin.toggle(callback(error, buffer)); Option Type Description Required callback Function Called when action is complete Yes error Error Contains information if an error occured, otherwise null Yes buffer Buffer Value written to the pin Yes var tessel = require('tessel'); // Import tessel var pin = tessel.port.A.pin[3]; // Select pin 3 on port A pin.toggle((error, buffer) = { if (error) { throw error; } console.log(buffer.toString()); // Log the value written to the pin });","title":"Digital pins"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#analog-pins","text":"An analog pin is a pin whose value can vary in the range between 0V and 3.3V. The analog pin API represents these this value as a percentage, between 0 and 1, where 1 stands for 3.3V. pin.analogWrite: Set the analog value of a pin. Enabled on pin 7 of Port B. pin.analogWrite(number); Option Type Description Required number Number Minimum value 0, maximum value 1 Yes Example: var tessel = require('tessel'); // Import tessel var pin = tessel.port.B.pin[7]; // Select pin 7 on port B pin.analogWrite(0.6); // Turn pin to 60% of high voltage pin.analogRead: Read the analog value of a pin. Enabled on pins 4 and 7 on Port A,and all pins on Port B. On both ports, all pins are pulled high by default, which means a pin not connected to any sort of sensor or resistor can still return a value over 0. pin.analogRead(callback(error, number)); Option Type Description Required callback Function Called when read is complete Yes error Error Contains information if an error occured, otherwise null Yes number Number Minimum value 0, maximum value 1 Yes Example: var tessel = require('tessel'); // Import tessel var pin = tessel.port.A.pin[4]; // Select pin 4 on port A pin.analogRead((error, number) = { if (error) { throw error; } console.log(number); // The number is a value between 0 and 1 });","title":"Analog pins"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#interrupt-pins","text":"Pins 2, 5, 6, 7 on both Ports are available for interrupts. Interrupts allow us to register events based on state changes in a pin.","title":"Interrupt Pins"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#usage_1","text":"// Invoke the callback whenever the event occurs pin.on(eventName, callback); // Invoke the callback the first time the event occurs pin.once(eventName, callback);","title":"Usage"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#available-events","text":"Event Name Description Notes rise Pin voltage rises fall Pin voltage falls change Pin voltage changes Passes current value of pin to callback high* Pin voltage goes high Only available via pin.once() low* Pin voltage goes low Only available via pin.once() * Only one of these events may be registered at a time. Learn more about using the interrupt API.","title":"Available Events"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#pwm-pins","text":"Tessel has four PWM pins: pins 5 and 6 on each module port.","title":"PWM pins"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#usage_2","text":"tessel.pwmFrequency: Set the signal frequency in hertz. 1 hertz equals 1 cycle of signal per second. tessel.pwmFrequency(number); Option Type Description Required number Number Minimum value 1, maximum value 5000 Yes Note: the pwmFrequency function must be called before pwmDutyCycle . Re-setting pwmFrequency will disable PWM output until pwmDutyCycle is called again. pin.pwmDutyCycle: Set the percentage amount of time the pin is active each cycle of signal. pin.pwmDutyCycle(number); Option Type Description Required number Number Minimum value 0, maximum value 1, e.g. 0.6 Yes Learn more about using the PWM API.","title":"Usage"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#terms-used","text":"The following sections use industry standard technical terms that are considered non-inclusive. They are used here in an explicitly technical manner and only to be accurate in describing these wire communication protocols. The terms are used strictly as defined here: Master: A machine or device directly controlling another (source: Oxford Dictionary ) Slave: A device, or part of one, directly controlled by another (source: Oxford Dictionary )","title":"Terms Used"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#i2c","text":"An I2C channel uses the SCL and SDA pins (0 and 1 on Tessel 2). If you are unfamiliar with the I2C protocol, please see the communication protocols tutorial .","title":"I2C"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#usage_3","text":"There are three different commands you can send over I2C: transfer, send, and read. i2c.transfer Write data to the slave device and then subsequently read data from the slave device. Can be used to read from a specific register (depending on the communication details of the slave device\u2013 read the datasheet!). A common use of this method is to send the address of a register, then receive back the information contained in that register. var tessel = require('tessel'); // Connect to device var port = tessel.port.A; // Use the SCL/SDA pins of Port A var slaveAddress = 0xDE; // Specific to device var i2c = new port.I2C(slaveAddress); // Initialize I2C communication // Details of I2C transfer var bytesToSend = [0xde, 0xad, 0xbe, 0xef]; // An array,can be the address of a register or data to write (depends on device) var numBytesToRead = 4; // Read back this number of bytes // Send/recieve data over I2C using i2c.transfer i2c.transfer(new Buffer(bytesToSend), numBytesToRead, function (error, dataReceived) { // Print data received (buffer of hex values) console.log('Buffer returned by I2C slave device ('+slaveAddress.toString(16)+'):', dataReceived); }); i2c.send Write data over I2C to the slave device without reading data back. var tessel = require('tessel'); // Connect to device var port = tessel.port.A; // Use the SCL/SDA pins of Port A var slaveAddress = 0xDE; // Specific to device var i2c = new port.I2C(slaveAddress); // Initialize I2C communication // Details of I2C transfer var bytesToSend = [0xde, 0xad, 0xbe, 0xef]; // An array,can be the address of a register or data to write (depends on device) // Send data over I2C using i2c.send i2c.send(new Buffer(bytesToSend), function (error) { // Print confirmation console.log('Wrote', bytesToSend, 'to slave device', slaveAddress.toString(16), 'over I2C.'); }); i2c.read Read data over I2C but do not write to the slave device. var tessel = require('tessel'); // Connect to device var port = tessel.port.A; // Use the SCL/SDA pins of Port A var slaveAddress = 0xDE; // Specific to device var i2c = new port.I2C(slaveAddress); // Initialize I2C communication // Details of I2C transfer var numBytesToRead = 4; // Read back this number of bytes // Read data over I2C using i2c.transfer i2c.read(numBytesToRead, function (error, dataReceived) { // Print data received (buffer of hex values) console.log('Buffer returned by I2C slave device ('+slaveAddress.toString(16)+'):', dataReceived); });","title":"Usage"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#spi","text":"A SPI channel uses the SCK, MISO, and MOSI pins (2, 3, and 4 on Tessel 2). If you are unfamiliar with the SPI protocol, please see the communication protocols tutorial . Here is an example using Tessel's SPI protocol: var port = tessel.port.A; var spi = new port.SPI({ clockSpeed: 4*1000*1000, // 4MHz polarity: 0, // Polarity - optional phase: 0, // Clock phase - optional chipSelect: port.pin[7] // Chip select - optional }); spi.transfer(new Buffer([0xde, 0xad, 0xbe, 0xef]), function (error, dataReceived) { console.log('buffer returned by SPI slave:', dataReceived); }); Wikipedia's article on SPI has an excellent section on polarity (cpol) and clock phase (cpha).","title":"SPI"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#uartserial","text":"A UART (serial) channel uses the TX and RX pins (5 and 6 on Tessel 2). If you are unfamiliar with the UART protocol, please see the communication protocols tutorial . Here is an example using Tessel's UART protocol: var port = tessel.port.A; var uart = new port.UART({ baudrate: 115200 }); uart.write('ahoy hoy\\n') uart.on('data', function (data) { console.log('received:', data); }) // UART objects are streams! // pipe all incoming data to stdout: uart.pipe(process.stdout);","title":"UART/Serial"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#power-management","text":"","title":"Power management"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#board","text":"tessel.reboot: Power cycle the board. This will clear RAM and restart the program once reboot is complete. This can be done with the t2 reboot command as well. tessel.reboot();","title":"Board"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#ports","text":"Tessel 2's firmware turns off power to the port if a program does not require the tessel module. However, if tessel is required in the code, both will be turned on by default. It is possible to control the power to module ports with an explicit call: var Tessel = require('tessel-export'); var tessel = new Tessel({ ports: { A: false, B: false, } }); tessel.open: Allow power to one or both Tessel ports. tessel.open(portName); Option Type Description Required portName String Either 'A' or 'B' No Leaving out the port name will turn on power to both ports, i.e. tessel.open() . tessel.close: Disallow power to one or both Tessel ports. tessel.close(portName); Option Type Description Required portName String Either 'A' or 'B' No Leaving out the port name will turn off power to both ports, i.e. tessel.close() .","title":"Ports"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#leds","text":"There are 4 LEDs available on the Tessel 2, you may see them labeled on the board as ERR , WLAN , LED0 , and LED1 . They are available through the tessel.led object. // an array of available LEDs var leds = tessel.led; // ERR - Red var red = leds[0]; // WLAN - Amber var amber = leds[1]; // LED0 - Green var green = leds[2]; // LED1 - Blue var blue = leds[3]; Each LED has a few methods for controlling it. // Green LED var led = tessel.led[2]; /* * Property: isOn * Returns: boolean (true or false) if led is on * * Checks the led to see if it is on or not. */ if (led.isOn) { console.log('The green LED is currently on.'); } /* * Method: on * Returns: the led object (this makes it a chainable function) * * Turns the led ON. */ led.on(); /* * Method: off * Returns: the led object (this makes it a chainable function) * * Turns the led OFF. */ led.off(); /* * Method: toggle * Arguments: * - callback: function to call once the led's value has been set and is passed an error object if one occured * * Toggles the current state of the led and calls the callback function once that is done. */ led.toggle(function (error) { if (error) { console.log('There was an error with toggling the led.', error); } else { console.log('The green led is now on OR off!'); } });","title":"LEDs"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#button","text":"Tessel 2's button is not programmable. During operation of a script, pressing the button will restart the script. If you hold down the button while plugging in power, Tessel 2 boots into DFU mode. This is typically used to load firmware built from source.","title":"Button"},{"location":"tutorials/Tessel/T2Docs/API/Hardware_API/#usb-ports","text":"USB modules do not need to be accessed through the Tessel object. See tessel-av for an example USB module.","title":"USB Ports"},{"location":"tutorials/Tessel/T2Docs/API/Modules/","text":"Tessel 2 Modules Tessel uses a system of modules to add functionalities to the ecosystem. A Tessel module consists of some piece of hardware, matched with a software package which explains and provides API access to the hardware. There are three types of modules: Tenpin: purchaseable built-for Tessel modules following the 10-pin module format USB: any USB device with an API Tessel can use Community: any piece of hardware with an API Tessel can use, with instructions on how to connect the hardware to Tessel The best place to find API documentation for a Tessel module is through the links on the modules page . Quick links See all the modules and find their API documentation Learn how to use modules on the start page Metadata about tenpin, USB, and community modules, including compatibility Hardware docs for Tessel's first-party, tenpin modules How to make a module Communication protocols 101 Module design philosophy Modules should be devices with clear-cut functionality. That is to say, they should have a single, well-defined purpose or a set of closely related functions, rather than an eclectic mix of capabilities onboard. This requirement is designed to reduce complexity, cost, and power consumption and maximize reusability in hardware and software.","title":"Tessel 2 Modules"},{"location":"tutorials/Tessel/T2Docs/API/Modules/#tessel-2-modules","text":"Tessel uses a system of modules to add functionalities to the ecosystem. A Tessel module consists of some piece of hardware, matched with a software package which explains and provides API access to the hardware. There are three types of modules: Tenpin: purchaseable built-for Tessel modules following the 10-pin module format USB: any USB device with an API Tessel can use Community: any piece of hardware with an API Tessel can use, with instructions on how to connect the hardware to Tessel The best place to find API documentation for a Tessel module is through the links on the modules page .","title":"Tessel 2 Modules"},{"location":"tutorials/Tessel/T2Docs/API/Modules/#quick-links","text":"See all the modules and find their API documentation Learn how to use modules on the start page Metadata about tenpin, USB, and community modules, including compatibility Hardware docs for Tessel's first-party, tenpin modules How to make a module Communication protocols 101","title":"Quick links"},{"location":"tutorials/Tessel/T2Docs/API/Modules/#module-design-philosophy","text":"Modules should be devices with clear-cut functionality. That is to say, they should have a single, well-defined purpose or a set of closely related functions, rather than an eclectic mix of capabilities onboard. This requirement is designed to reduce complexity, cost, and power consumption and maximize reusability in hardware and software.","title":"Module design philosophy"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/","text":"Tessel 2 Network API Wifi Access Point When you require('tessel') within a script which is executed on Tessel 2, this loads a library which interfaces with the Tessel 2 hardware, including the wireless radios. The code for Tessel 2's hardware object can be found here . While the cli can be used to configure the Tessel to connect to local wifi networks and to create a custom wireless network, the tessel package, via the Network API, can be used in the same way. This functionality can be useful for programs that want to create on-demand access points or connect to a local network chosen by someone interacting with a web app served by a Tessel. Having some control of the networking abilities make Tessel a powerful, web-enabled device. Wifi The following methods and properties are available through tessel.network.wifi . Methods connect connection disable enable findAvailableNetworks reset connect Attempts to connect to a local wifi network using the passed-in configuration object. tessel.network.wifi.connect(config, callback); argument type description required config Object { ssid, password, security } configuration used to connect to local network yes callback Function called when done connecting or if an error occurred no Example tessel.network.wifi.connect({ ssid: 'WifiNetworkName', // required password: 'WifiNetworkPassword', // required if network is password-protected security: 'psk2' // available values - none, wep, psk, psk2, wpa, wpa2, default is 'none' if no password needed, default is 'psk2' otherwise. See https://tessel.io/docs/cli#usage for more info }, function (error, settings) { if (error) { // handle error if it exists } console.log(settings); // object containing ssid, security, IP address }); connection Returns the settings for the current connection, includes ssid (network name), security, and IP address. tessel.network.wifi.connection(callback); Example tessel.network.wifi.connection(function(error, settings) { if (error) { throw error; } console.log(settings.ssid); // logs the name of the wifi network being used by Tessel }); disable Disables Tessel's connection to wifi. tessel.network.wifi.disable(callback); argument type description required callback Function called when done disabling or if an error occurred no Example tessel.network.wifi.disable(function (error) { if (error) { // handle error if it exists } // Tessel is now disconnected from wifi }); enable Enables Tessel's connection to wifi. tessel.network.wifi.enable(callback); argument type description required callback Function called when done enabling or if an error occurred no Example tessel.network.wifi.enable(function (error) { if (error) { // handle error if it exists } // Tessel is now connected to wifi }); findAvailableNetworks Scans for local wifi networks available to Tessel. tessel.network.wifi.findAvailableNetworks(callback); argument type description required callback Function called when done scanning or if an error occurred no Example tessel.network.wifi.findAvailableNetworks(function (error, networks) { if (error) { // handle error if it exists } console.log(networks) // 'networks' is an array of objects containing { ssid, security, quality }, quality is a string comparing the signal strength out of 70 - '49/70' }); reset Resets the Tessel's wifi connection, first disabling, then enabling the connection. tessel.network.wifi.reset(); argument type description required callback Function called when Tessel is done resetting no Example tessel.network.wifi.reset(function (error) { if (error) { // handle error if it exists } // Tessel's wifi connection has been successfully reset }); Events The WifI Class inherits from the Node.js EventEmitter Class, so methods such as on , once , and removeListener can be used with the following events: connect : this event is emitted when Tessel has successfully connected to a wifi network disconnect : this event is emitted when Tessel has successfully disconnected from a wifi network error : this event is emitted when an error occurs during any of the wifi functions Example tessel.network.wifi.on('connect', function (settings) { // the 'connect' event has been called and happens to return a 'settings' object }); Access Point The following methods and properties are available through tessel.network.ap . Methods create disable enable reset create Attempts to create a custom access point using the passed-in configuration object. tessel.network.ap.create(config, callback); argument type description required config Object { ssid, password, security } configuration used to create a custom access point yes callback Function called when done creating or if an error occurred no Example tessel.network.ap.create({ ssid: 'AccessPointName', // required password: 'CustomSecurePassword', // required if network is password-protected security: 'psk2' // available values - none, wep, psk, psk2, default is 'none' if no password needed, default is 'psk2' otherwise. See https://tessel.io/docs/cli#usage for more info }, function (error, settings) { if (error) { // handle error if it exists } console.log(settings); // object containing ssid, security, IP address }); disable Disables the created access point. tessel.network.ap.disable(callback); argument type description required callback Function called when done disabling or if an error occurred no Example tessel.network.ap.disable(function (error) { if (error) { // handle error if it exists } // the access point has been successfully disabled }); enable Enables a previously configured access point. tessel.network.ap.enable(callback); argument type description required callback Function called when done enabling or if an error occurred no Example tessel.network.ap.enable(function (error) { if (error) { // handle error if it exists } // the access point has been successfully enabled }); reset Resets the active access point, first disabling, then enabling the network. tessel.network.ap.reset(); argument type description required callback Function called when Tessel is done resetting no Example tessel.network.ap.reset(function (error) { if (error) { // handle error if it exists } // Tessel's wifi connection has been successfully reset }); Events The AP Class inherits from the Node.js EventEmitter Class, so methods such as on , once , and removeListener can be used with the following events: create : this event is emitted when an access point is successfully created, includes settings object in the callback disable : this event is emitted when an access point is successfully disabled error : this event is emitted when an error occurs during any of the access point functions enable : this event is emitted when an access point is successfully enabled reset : this event is emitted when an access point is preparing to reset Example tessel.network.ap.on('create', function (settings) { // the 'create' event has been called and happens to return a 'settings' object });","title":"Tessel 2 Network API"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#tessel-2-network-api","text":"Wifi Access Point When you require('tessel') within a script which is executed on Tessel 2, this loads a library which interfaces with the Tessel 2 hardware, including the wireless radios. The code for Tessel 2's hardware object can be found here . While the cli can be used to configure the Tessel to connect to local wifi networks and to create a custom wireless network, the tessel package, via the Network API, can be used in the same way. This functionality can be useful for programs that want to create on-demand access points or connect to a local network chosen by someone interacting with a web app served by a Tessel. Having some control of the networking abilities make Tessel a powerful, web-enabled device.","title":"Tessel 2 Network API"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#wifi","text":"The following methods and properties are available through tessel.network.wifi .","title":"Wifi"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#methods","text":"connect connection disable enable findAvailableNetworks reset","title":"Methods"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#connect","text":"Attempts to connect to a local wifi network using the passed-in configuration object. tessel.network.wifi.connect(config, callback); argument type description required config Object { ssid, password, security } configuration used to connect to local network yes callback Function called when done connecting or if an error occurred no","title":"connect"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#example","text":"tessel.network.wifi.connect({ ssid: 'WifiNetworkName', // required password: 'WifiNetworkPassword', // required if network is password-protected security: 'psk2' // available values - none, wep, psk, psk2, wpa, wpa2, default is 'none' if no password needed, default is 'psk2' otherwise. See https://tessel.io/docs/cli#usage for more info }, function (error, settings) { if (error) { // handle error if it exists } console.log(settings); // object containing ssid, security, IP address });","title":"Example"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#connection","text":"Returns the settings for the current connection, includes ssid (network name), security, and IP address. tessel.network.wifi.connection(callback);","title":"connection"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#example_1","text":"tessel.network.wifi.connection(function(error, settings) { if (error) { throw error; } console.log(settings.ssid); // logs the name of the wifi network being used by Tessel });","title":"Example"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#disable","text":"Disables Tessel's connection to wifi. tessel.network.wifi.disable(callback); argument type description required callback Function called when done disabling or if an error occurred no","title":"disable"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#example_2","text":"tessel.network.wifi.disable(function (error) { if (error) { // handle error if it exists } // Tessel is now disconnected from wifi });","title":"Example"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#enable","text":"Enables Tessel's connection to wifi. tessel.network.wifi.enable(callback); argument type description required callback Function called when done enabling or if an error occurred no","title":"enable"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#example_3","text":"tessel.network.wifi.enable(function (error) { if (error) { // handle error if it exists } // Tessel is now connected to wifi });","title":"Example"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#findavailablenetworks","text":"Scans for local wifi networks available to Tessel. tessel.network.wifi.findAvailableNetworks(callback); argument type description required callback Function called when done scanning or if an error occurred no","title":"findAvailableNetworks"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#example_4","text":"tessel.network.wifi.findAvailableNetworks(function (error, networks) { if (error) { // handle error if it exists } console.log(networks) // 'networks' is an array of objects containing { ssid, security, quality }, quality is a string comparing the signal strength out of 70 - '49/70' });","title":"Example"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#reset","text":"Resets the Tessel's wifi connection, first disabling, then enabling the connection. tessel.network.wifi.reset(); argument type description required callback Function called when Tessel is done resetting no","title":"reset"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#example_5","text":"tessel.network.wifi.reset(function (error) { if (error) { // handle error if it exists } // Tessel's wifi connection has been successfully reset });","title":"Example"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#events","text":"The WifI Class inherits from the Node.js EventEmitter Class, so methods such as on , once , and removeListener can be used with the following events: connect : this event is emitted when Tessel has successfully connected to a wifi network disconnect : this event is emitted when Tessel has successfully disconnected from a wifi network error : this event is emitted when an error occurs during any of the wifi functions","title":"Events"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#example_6","text":"tessel.network.wifi.on('connect', function (settings) { // the 'connect' event has been called and happens to return a 'settings' object });","title":"Example"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#access-point","text":"The following methods and properties are available through tessel.network.ap .","title":"Access Point"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#methods_1","text":"create disable enable reset","title":"Methods"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#create","text":"Attempts to create a custom access point using the passed-in configuration object. tessel.network.ap.create(config, callback); argument type description required config Object { ssid, password, security } configuration used to create a custom access point yes callback Function called when done creating or if an error occurred no","title":"create"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#example_7","text":"tessel.network.ap.create({ ssid: 'AccessPointName', // required password: 'CustomSecurePassword', // required if network is password-protected security: 'psk2' // available values - none, wep, psk, psk2, default is 'none' if no password needed, default is 'psk2' otherwise. See https://tessel.io/docs/cli#usage for more info }, function (error, settings) { if (error) { // handle error if it exists } console.log(settings); // object containing ssid, security, IP address });","title":"Example"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#disable_1","text":"Disables the created access point. tessel.network.ap.disable(callback); argument type description required callback Function called when done disabling or if an error occurred no","title":"disable"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#example_8","text":"tessel.network.ap.disable(function (error) { if (error) { // handle error if it exists } // the access point has been successfully disabled });","title":"Example"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#enable_1","text":"Enables a previously configured access point. tessel.network.ap.enable(callback); argument type description required callback Function called when done enabling or if an error occurred no","title":"enable"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#example_9","text":"tessel.network.ap.enable(function (error) { if (error) { // handle error if it exists } // the access point has been successfully enabled });","title":"Example"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#reset_1","text":"Resets the active access point, first disabling, then enabling the network. tessel.network.ap.reset(); argument type description required callback Function called when Tessel is done resetting no","title":"reset"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#example_10","text":"tessel.network.ap.reset(function (error) { if (error) { // handle error if it exists } // Tessel's wifi connection has been successfully reset });","title":"Example"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#events_1","text":"The AP Class inherits from the Node.js EventEmitter Class, so methods such as on , once , and removeListener can be used with the following events: create : this event is emitted when an access point is successfully created, includes settings object in the callback disable : this event is emitted when an access point is successfully disabled error : this event is emitted when an error occurs during any of the access point functions enable : this event is emitted when an access point is successfully enabled reset : this event is emitted when an access point is preparing to reset","title":"Events"},{"location":"tutorials/Tessel/T2Docs/API/Network_API/#example_11","text":"tessel.network.ap.on('create', function (settings) { // the 'create' event has been called and happens to return a 'settings' object });","title":"Example"},{"location":"tutorials/Tessel/T2Docs/API/Supported_Languages/","text":"Supported languages JavaScript/Node.js Tessel 2 has full support for JavaScript and Node.js (LTS versions). The relevant repos can be found here: Firmware support for JavaScript/Node CLI support for JavaScript/Node Binary modules There is support for precompiled binary modules on Tessel 2. The best way to find out whether the module you want is available is to try deploying it. The module has been precompiled, it will just work! For modules that have not been precompiled (you can see the list at packages.tessel.io ), you will see an error message explaining why it cannot be loaded: Pre-compiled module is missing: {name of module}. This might be caused by any of the following: 1. The binary is platform specific and cannot be compiled for OpenWRT. 2. A pre-compiled binary has not yet been generated for this module. 3. The binary didn't compile correctly for the platform that you're developing on. It's possible that the binary is Linux-only or even OpenWRT specific, try npm installing with --force and rerun your deployment command. Please file an issue at https://github.com/tessel/t2-cli/issues/new Submit an issue and we will look into precompiling it. Our precompilation server lives in the t2-compiler repo . Rust (work in progress) The Tessel team is working toward first-class support for Rust. If you're interested in the state of that project, check out the tessel-rust repo . How to add support for more languages Interested in adding support for a new language to Tessel 2's CLI? Here is a detailed blog post on the six components you will need: Interfacing with the Language Plugin API for Tessel 2 (It is worth noting that support of Python for Tessel 2 was originally planned, but is no longer in active development. Read the blog post explaining this decision.)","title":"Supported languages"},{"location":"tutorials/Tessel/T2Docs/API/Supported_Languages/#supported-languages","text":"","title":"Supported languages"},{"location":"tutorials/Tessel/T2Docs/API/Supported_Languages/#javascriptnodejs","text":"Tessel 2 has full support for JavaScript and Node.js (LTS versions). The relevant repos can be found here: Firmware support for JavaScript/Node CLI support for JavaScript/Node","title":"JavaScript/Node.js"},{"location":"tutorials/Tessel/T2Docs/API/Supported_Languages/#binary-modules","text":"There is support for precompiled binary modules on Tessel 2. The best way to find out whether the module you want is available is to try deploying it. The module has been precompiled, it will just work! For modules that have not been precompiled (you can see the list at packages.tessel.io ), you will see an error message explaining why it cannot be loaded: Pre-compiled module is missing: {name of module}. This might be caused by any of the following: 1. The binary is platform specific and cannot be compiled for OpenWRT. 2. A pre-compiled binary has not yet been generated for this module. 3. The binary didn't compile correctly for the platform that you're developing on. It's possible that the binary is Linux-only or even OpenWRT specific, try npm installing with --force and rerun your deployment command. Please file an issue at https://github.com/tessel/t2-cli/issues/new Submit an issue and we will look into precompiling it. Our precompilation server lives in the t2-compiler repo .","title":"Binary modules"},{"location":"tutorials/Tessel/T2Docs/API/Supported_Languages/#rust-work-in-progress","text":"The Tessel team is working toward first-class support for Rust. If you're interested in the state of that project, check out the tessel-rust repo .","title":"Rust (work in progress)"},{"location":"tutorials/Tessel/T2Docs/API/Supported_Languages/#how-to-add-support-for-more-languages","text":"Interested in adding support for a new language to Tessel 2's CLI? Here is a detailed blog post on the six components you will need: Interfacing with the Language Plugin API for Tessel 2 (It is worth noting that support of Python for Tessel 2 was originally planned, but is no longer in active development. Read the blog post explaining this decision.)","title":"How to add support for more languages"},{"location":"tutorials/Tessel/T2Docs/Debugging/LAN_Discovery/","text":"Debugging LAN Discovery Introduction to MDNS The Tessel 2 CLI is able to detect Tessel 2s on the same wireless network as your host computer using a protocol called mDNS . If you run t2 list and don't see your Tessel labeled LAN like the example below, then either the Tessel is not advertising properly, your wifi network infrastructure blocks mDNS traffic, or your computer is not picking it up properly. \u279c t2 list INFO Searching for nearby Tessels... Frank LAN An issue with detection First, you should confirm your host machine is on the same wifi network as your Tessel. You can run t2 wifi to get the network your Tessel 2 is connected to. If it's not connected, you'll need to do that and run t2 list again. Next, let's check if your computer is able to detect the Tessel at all (to determine if it's an issue with the CLI or with the Tessel). We'll use a utility that we absolutely know works. I only have an example for OSX - if you know how to do mDNS discovery on Windows, please add to this file and submit a PR! OSX dns-sd -B _tessel._tcp . This tells the dns-sd (DNS Service Discovery) tool to start searching for any devices advertising as a _tessel._tcp device. If your device doesn't show up in the results, then it is an issue with detection, then your computer isn't detecting it up properly. There is also issue a peculiar but uncommon issue where OSX just stops picking up the advertisements for some reason. The cause is unknown thus far but you can fix it with: sudo killall -HUP mDNSResponder This command basically clears the cache of mDNS devices so the next time you run the dns-sd utility or t2 list , Tessel will show up (if this was the root cause). Linux avahi-browse _tessel._tcp -t This displays a list of DNS-SD entries that match _tessel._tcp and quits afterwards. An issue with network configuration Attempts to connect to your Tessel 2 via a network that is configured to block mDNS traffic will always fail. This type of configuration is often used for secured company networks and open public networks to prevent unwanted peer-to-peer discovery and access. If this is your home network, change the configuration via the router's administration control panel. If this is a network that you do not control, you may have to request the change from an IT department (or similar resource). An issue with advertisement To determine if it's an issue with Tessel not advertising properly, you'll need to get root access to your Tessel. Then run ps to check if the mDNS service is actually running on Tessel: 1259 root 904 S dns-sd -R Frank _tessel._tcp local 22 If you don't see this service running (note that the name of your Tessel will be different), you can restart it with: /etc/init.d/tessel-mdns restart Once it's restarted, check if it's running with the dns-sd utility on your host machine or t2 list .","title":"Debugging LAN Discovery"},{"location":"tutorials/Tessel/T2Docs/Debugging/LAN_Discovery/#debugging-lan-discovery","text":"","title":"Debugging LAN Discovery"},{"location":"tutorials/Tessel/T2Docs/Debugging/LAN_Discovery/#introduction-to-mdns","text":"The Tessel 2 CLI is able to detect Tessel 2s on the same wireless network as your host computer using a protocol called mDNS . If you run t2 list and don't see your Tessel labeled LAN like the example below, then either the Tessel is not advertising properly, your wifi network infrastructure blocks mDNS traffic, or your computer is not picking it up properly. \u279c t2 list INFO Searching for nearby Tessels... Frank LAN","title":"Introduction to MDNS"},{"location":"tutorials/Tessel/T2Docs/Debugging/LAN_Discovery/#an-issue-with-detection","text":"First, you should confirm your host machine is on the same wifi network as your Tessel. You can run t2 wifi to get the network your Tessel 2 is connected to. If it's not connected, you'll need to do that and run t2 list again. Next, let's check if your computer is able to detect the Tessel at all (to determine if it's an issue with the CLI or with the Tessel). We'll use a utility that we absolutely know works. I only have an example for OSX - if you know how to do mDNS discovery on Windows, please add to this file and submit a PR!","title":"An issue with detection"},{"location":"tutorials/Tessel/T2Docs/Debugging/LAN_Discovery/#osx","text":"dns-sd -B _tessel._tcp . This tells the dns-sd (DNS Service Discovery) tool to start searching for any devices advertising as a _tessel._tcp device. If your device doesn't show up in the results, then it is an issue with detection, then your computer isn't detecting it up properly. There is also issue a peculiar but uncommon issue where OSX just stops picking up the advertisements for some reason. The cause is unknown thus far but you can fix it with: sudo killall -HUP mDNSResponder This command basically clears the cache of mDNS devices so the next time you run the dns-sd utility or t2 list , Tessel will show up (if this was the root cause).","title":"OSX"},{"location":"tutorials/Tessel/T2Docs/Debugging/LAN_Discovery/#linux","text":"avahi-browse _tessel._tcp -t This displays a list of DNS-SD entries that match _tessel._tcp and quits afterwards.","title":"Linux"},{"location":"tutorials/Tessel/T2Docs/Debugging/LAN_Discovery/#an-issue-with-network-configuration","text":"Attempts to connect to your Tessel 2 via a network that is configured to block mDNS traffic will always fail. This type of configuration is often used for secured company networks and open public networks to prevent unwanted peer-to-peer discovery and access. If this is your home network, change the configuration via the router's administration control panel. If this is a network that you do not control, you may have to request the change from an IT department (or similar resource).","title":"An issue with network configuration"},{"location":"tutorials/Tessel/T2Docs/Debugging/LAN_Discovery/#an-issue-with-advertisement","text":"To determine if it's an issue with Tessel not advertising properly, you'll need to get root access to your Tessel. Then run ps to check if the mDNS service is actually running on Tessel: 1259 root 904 S dns-sd -R Frank _tessel._tcp local 22 If you don't see this service running (note that the name of your Tessel will be different), you can restart it with: /etc/init.d/tessel-mdns restart Once it's restarted, check if it's running with the dns-sd utility on your host machine or t2 list .","title":"An issue with advertisement"},{"location":"tutorials/Tessel/T2Docs/Debugging/Node.js/","text":"Node.js Installation instructions for the Tessel CLI can be found here: http://tessel.github.io/t2-start/ This document will address common problems related to Node.js usage. NVM The official installation instructions assume Node is installed globally. For those of you using NVM this will not be the case. As indicated here NVM does not install globally by design. Linux Install t2-cli module as normal. To install the drivers, perform the following: Find where the node executable is located: $ which node /home/username/.nvm/versions/node/v4.5.0/bin/node In the example above, the path is /home/username/.nvm/versions/node/v4.5.0/bin (referred to as $nodePath below). Install the drivers. $ sudo PATH= $PATH:$nodePath $nodePath/t2 install-drivers","title":"Node.js"},{"location":"tutorials/Tessel/T2Docs/Debugging/Node.js/#nodejs","text":"Installation instructions for the Tessel CLI can be found here: http://tessel.github.io/t2-start/ This document will address common problems related to Node.js usage.","title":"Node.js"},{"location":"tutorials/Tessel/T2Docs/Debugging/Node.js/#nvm","text":"The official installation instructions assume Node is installed globally. For those of you using NVM this will not be the case. As indicated here NVM does not install globally by design.","title":"NVM"},{"location":"tutorials/Tessel/T2Docs/Debugging/Node.js/#linux","text":"Install t2-cli module as normal. To install the drivers, perform the following: Find where the node executable is located: $ which node /home/username/.nvm/versions/node/v4.5.0/bin/node In the example above, the path is /home/username/.nvm/versions/node/v4.5.0/bin (referred to as $nodePath below). Install the drivers. $ sudo PATH= $PATH:$nodePath $nodePath/t2 install-drivers","title":"Linux"},{"location":"tutorials/Tessel/T2Docs/Debugging/Root_Access/","text":"Accessing root on Tessel 2 If you wish to access root on Tessel 2 and explore its Linux filesystem, you have a few options. The simplest option is t2 root , which gives SSH access to a Tessel 2 you are authorized with. However, while you're building tools for Tessel, you may need to access Tessel in ways not exposed by the CLI. Here are two options: SSH If you can connect to your Tessel 2 over LAN, SSH or t2 root are your best options. Setup Make sure your Tessel is online . Check that it shows up on LAN with t2 list . Run t2 provision to authorize your computer with your Tessel. SSH in Use the command ssh root@ tesselname .local -i ~/.tessel/id_rsa . The -i command lets you specify the filepath to the RSA keys written by t2 provision . Getting out When you need out, type exit . dterm Dterm lets you talk to Tessel over USB. Setup OS X Unfortunately, dterm isn't supported on El Capitan and later. You may be able to use screen instead. Install dterm with brew install dterm . Figure out what USB port your Tessel is plugged into by typing ls /dev/tty.usbmodem \u2013 see whether it auto-completes to e.g. /dev/tty.usbmodem1412 or a different number. Linux Download and build dterm from http://www.knossos.net.nz/resources/free-software/dterm/, or use screen, which comes with most Linux distros. The path to the serial port is /dev/ttyACM0 or / dev/serial/by-id/usb-Technical_Machine_Tessel_2_ serial number -if01 - find out by typing ls for those locations. Windows Not sure, sorry... if you know how to access serial on Windows, please PR. dterm in Run dterm /dev/tty.usbmodem1412 (or a different port number). You will have to press enter twice. If you're going to do this a lot, it might be a good idea to alias the command: alias v2=\"dterm /dev/tty.usbmodem1412\" . If you need your ip address (for example if you'd like to ssh in next time), you can run ifconfig to get it. Getting out CTRL+] then CTRL+C","title":"Accessing root on Tessel 2"},{"location":"tutorials/Tessel/T2Docs/Debugging/Root_Access/#accessing-root-on-tessel-2","text":"If you wish to access root on Tessel 2 and explore its Linux filesystem, you have a few options. The simplest option is t2 root , which gives SSH access to a Tessel 2 you are authorized with. However, while you're building tools for Tessel, you may need to access Tessel in ways not exposed by the CLI. Here are two options:","title":"Accessing root on Tessel 2"},{"location":"tutorials/Tessel/T2Docs/Debugging/Root_Access/#ssh","text":"If you can connect to your Tessel 2 over LAN, SSH or t2 root are your best options.","title":"SSH"},{"location":"tutorials/Tessel/T2Docs/Debugging/Root_Access/#setup","text":"Make sure your Tessel is online . Check that it shows up on LAN with t2 list . Run t2 provision to authorize your computer with your Tessel.","title":"Setup"},{"location":"tutorials/Tessel/T2Docs/Debugging/Root_Access/#ssh-in","text":"Use the command ssh root@ tesselname .local -i ~/.tessel/id_rsa . The -i command lets you specify the filepath to the RSA keys written by t2 provision .","title":"SSH in"},{"location":"tutorials/Tessel/T2Docs/Debugging/Root_Access/#getting-out","text":"When you need out, type exit .","title":"Getting out"},{"location":"tutorials/Tessel/T2Docs/Debugging/Root_Access/#dterm","text":"Dterm lets you talk to Tessel over USB.","title":"dterm"},{"location":"tutorials/Tessel/T2Docs/Debugging/Root_Access/#setup_1","text":"","title":"Setup"},{"location":"tutorials/Tessel/T2Docs/Debugging/Root_Access/#os-x","text":"Unfortunately, dterm isn't supported on El Capitan and later. You may be able to use screen instead. Install dterm with brew install dterm . Figure out what USB port your Tessel is plugged into by typing ls /dev/tty.usbmodem \u2013 see whether it auto-completes to e.g. /dev/tty.usbmodem1412 or a different number.","title":"OS X"},{"location":"tutorials/Tessel/T2Docs/Debugging/Root_Access/#linux","text":"Download and build dterm from http://www.knossos.net.nz/resources/free-software/dterm/, or use screen, which comes with most Linux distros. The path to the serial port is /dev/ttyACM0 or / dev/serial/by-id/usb-Technical_Machine_Tessel_2_ serial number -if01 - find out by typing ls for those locations.","title":"Linux"},{"location":"tutorials/Tessel/T2Docs/Debugging/Root_Access/#windows","text":"Not sure, sorry... if you know how to access serial on Windows, please PR.","title":"Windows"},{"location":"tutorials/Tessel/T2Docs/Debugging/Root_Access/#dterm-in","text":"Run dterm /dev/tty.usbmodem1412 (or a different port number). You will have to press enter twice. If you're going to do this a lot, it might be a good idea to alias the command: alias v2=\"dterm /dev/tty.usbmodem1412\" . If you need your ip address (for example if you'd like to ssh in next time), you can run ifconfig to get it.","title":"dterm in"},{"location":"tutorials/Tessel/T2Docs/Debugging/Root_Access/#getting-out_1","text":"CTRL+] then CTRL+C","title":"Getting out"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/","text":"Tessel 2 Technical Overview This guide is intended to help code contributors understand how relevant system components of Tessel 2 work, where to find code and design files, and accelerate the development process through technical transparency. T2 Github Repositories Core Command Line Interface OpenWRT OS Co-processor Firmware Tools Virtual Machine Binary Compiler Hardware Designs Tessel 2 Hardware Design Files Tessel 2 Parts Library Modules 10-Pin Modules USB Modules System Architecture Hardware Overview Software Overview Code Deploy Walkthrough Getting Questions Answered Links to more information Relevant Github Repositories Quick guide to the Tessel stack (in order of complexity): Level Stack Repo User / Module Code JS (Many) CLI JS t2-cli Tessel Library Linux / JS / Comms t2-firmware OpenWRT Linux / C / Shell / More t2-firmware SSH/GPIO Daemons Linux / C t2-firmware Firmware C / Comms t2-firmware Tessel 2 Core Repos: You can find all of the Tessel repositories on the organization page but this section provides some guidance over relevant Tessel 2-specific repositories. Tessel 2 Command Line Interface (CLI) The CLI is the primary method of interacting with Tessel for users and developers. It provides useful functions like listing available Tessels, deploying code, and setting wifi credentials on the device. Tessel 2 Operation System (OpenWRT) The primary processor of the Tessel 2 runs a very lightweight version of Linux called OpenWRT. OpenWRT provides all of the TCP/IP drivers, threading/schedule support, and runs Node, Rust or whatever other language you're using with Tessel 2. This repo contains all of the source files of the Tessel build of OpenWRT. Tessel 2 Co-processor Firmware Tessel 2 features a SAMD21 co-processor that manages a handful of responsibilities like routing USB communication from the CLI and the realtime operations on the GPIO pins of the two module ports. This repo contains not only the firmware that drives this microcontroller but hardware-related scripts that define the interface to other languages (like tessel.js for Node scripts) so that the available hardware functionality doesn't get out of sync with what is exposed to the OpenWRT processor. Tessel 2 Tools Tessel 2 Virtual Machine (VM) The VM is used primarily by Tessel developers who either don't have hardware available or want to develop on a faster computer. The repo provides the ability to create and run these Tessel virtual machines. You can use the CLI (see above) to interact with the running VM just as you would an actual Tessel 2. The VM has the limitation of not being able to set wifi credentials (it passes through the host network interface). It is not able to use 10-pin hardware modules but USB devices do get passed through. Tessel 2 Compiler The Tessel 2 compiler is another virtual machine with all the build tools needed to develop native add-ons to Node modules. These add-ons are built to perform faster or interact with lower level hardware than JS alone would provide. The compiler is being used, for example, to develop the audio-video Node module for webcams and recording audio from microphones. Hardware Designs Tessel 2 Hardware Design Files These are the production schematic and assembly files for the Tessel 2 hardware. You can find information about the parts that are used and how they are all connected to each other. These files were created with KiCad , a completely open source electronics design tool. Tessel Parts Library This repo contains all of the KiCad part models for all Tessel hardware (not just Tessel 2). You will need this library in order to recreate the schematic and PCB of the hardware design files above. Modules 10-Pin Modules There are 9 compatible 10-pin hardware modules for Tessel 2 available at the time of this writing. Each of these modules have a repo that contains the JavaScript driver. These repos can also be found on NPM under their respective Node modules names. Ambient (Light Sound) Module RFID/NFC Module Accelerometer Module Bluetooth Low Energy Module Climate (temperature humidity) Module GPS Module Infrared Module Relay Module Servo Module USB Modules Tessel supports interfacing with USB devices. Here are libraries we support for Tessel to interoperate with USB modules, available from many vendors: Bluetooth Low Energy Dongles Cellular (3G/4G) Dongles (no Github module, it just works through the Node http module and similar for other languages) Audio Recording/Playback Video Cameras (specifically, webcams) Flash Storage Devices (no Github module, it just works through the Node fs module and similar for other languages) System Architecture High Level Look At Hardware Below is a high level diagram of the hardware architecture: As you can see from the diagram, the Atmel co-processor manages the USB connection and can communicate with the MediaTek through a SPI bus. The MediaTek can execute user scripts, and when it interprets hardware commands (like pulling a GPIO high or sending data over I2C), it packages it up and sends it over to the Atmel over a pre-defined protocol on that SPI bus. Software Architecture The MediaTek is responsible for managing the two USB Host ports, the ethernet port, and the WiFi network interace directly from the OpenWRT Operating System. Let's take a look at the software architecture of Tessel 2: The USB Port on the Atmel actually has three interfaces to the to the MediaTek: 1. A UART connection that acts a serial terminal to the MediaTek. You can use a program like dterm to access the console through this connection. 2. A direct connection to the SPI Flash bus of the MediaTek. This allows the Atmel to rewrite the OpenWRT image and helps prevent the Tessel from becoming bricked by any corruptions to OS. 3. A SPI bus connection to the MediaTek for arbitrary data. A Code Deploy Example A good method of understanding all the components of the system is to go through an example of running a simple script on Tessel 2: The user code to light up an LED The user might have code like the example below to light up LED 0 on Tessel 2. var tessel = require('tessel'); tessel.led[0].high(); Deploy with the CLI First, the user will use the command line interface to deploy the script from the host computer: t2 run index.js The CLI will compress the code and break this simple run command into a number of bash commands required to deploy the code like untarring the code and running it with Node . Accepting USB Communication On The Atmel The utf-8 encoding of each command is sent over the USB connection via a USB pipe . The USB pipe driver hands off the data to the general purpose SPI bridge (labeled as \"SPI SLAVE SERCOMMx\" in the diagram above) which transfers the command to the MediaTek. Relaying Data to the MediaTek SPI Daemon On the MediaTek, the SPI Daemon is constantly waiting for data over the SPI bus and checks whether this data is from one of the module ports (for example, if an analog voltage was previously requested and was now returning the result) or from the USB port. The shell script that starts up the SPI Daemon on boot also creates three unix domain sockets: one for Module Port A ( /var/run/tessel/port_a ), one for Module Port B ( /var/run/tessel/port_b ), and one for USB ( /var/run/tessel/usb ). We'll get to the two module ports in a moment, but first, the data from the CLI is passed into the USB domain socket. One More Relay Into The USB Daemon Waiting on the other end of the domain socket is the USB Daemon . This program has the thrilling task of accepting shell commands, initializing new threads to execute them, and routing stdin, stdout, and stderr of those threads back to the CLI. So by this point, the CLI has executed a handful of bash commands that transferred the code onto the Tessel 2 and started a Node process to run it. The next question is how we actually do anything with the hardware. Accessing Hardware Through tessel.js For JavaScript files, the answer comes from the var tessel = require('tessel') line of the user script. When Node executes this on the MediaTek, it finds the tessel module in /usr/lib/node/tessel.js . When this file is executed, it connects to a domain socket for each module port : two of the three domain sockets created by the SPI Daemon earlier! That means that whenever you run a command on a port like tessel.led[0].high() , it's packaging that command into a array of bytes and sending it back over the SPI bus to the Atmel bridge firmware! That firmware then parses the command as pulling the specific GPIO high, and executes it. It can then return the result of that operation back through the SPI bus to the MediaTek SPI Daemon. Why Domain Sockets? The beauty of this architecture with domain sockets is that most legitimate programming langauges have the capability to utilize domain sockets. This is how Tessel 2 can be used by any language, not just JavaScript (the code that packages up the commands into array bytes just has to be ported to that language first). How Does Deploying Code over LAN Work Into This? In the case of a LAN connection over WiFi or Ethernet, the procedure is much the same except all of the shell commands are executed over SSH. All of the module port communication between the SPI Daemon and the USB Bridge firmware is entirely the same. That's why the CLI is able to abstract out USB and LAN interfaces into a single Connection object that simply accepts shell commands and returns a process object with the three streams (stdin, stdout, stderr) regardless of physical connection. What is UCI/ubus on the diagram above? UCI and ubus are unique features of OpenWRT that essentially let you access system configuration programmatically and receive results in a JSON format. It's very handy for the command line interface. You can see that the CLI makes use of these features heavily, especially for wifi related settings. Questions? Ask us on Slack (join here if you haven't already) or ask on the forums . More Useful Links Current CLI Development Roadmap OpenWRT website MediaTek MT7620 datasheet Atmel SAMD21 datasheet Tessel Project Blog Getting Started with Node","title":"Tessel 2 Technical Overview"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#tessel-2-technical-overview","text":"This guide is intended to help code contributors understand how relevant system components of Tessel 2 work, where to find code and design files, and accelerate the development process through technical transparency. T2 Github Repositories Core Command Line Interface OpenWRT OS Co-processor Firmware Tools Virtual Machine Binary Compiler Hardware Designs Tessel 2 Hardware Design Files Tessel 2 Parts Library Modules 10-Pin Modules USB Modules System Architecture Hardware Overview Software Overview Code Deploy Walkthrough Getting Questions Answered Links to more information","title":"Tessel 2 Technical Overview"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#relevant-github-repositories","text":"Quick guide to the Tessel stack (in order of complexity): Level Stack Repo User / Module Code JS (Many) CLI JS t2-cli Tessel Library Linux / JS / Comms t2-firmware OpenWRT Linux / C / Shell / More t2-firmware SSH/GPIO Daemons Linux / C t2-firmware Firmware C / Comms t2-firmware","title":"Relevant Github Repositories"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#tessel-2-core-repos","text":"You can find all of the Tessel repositories on the organization page but this section provides some guidance over relevant Tessel 2-specific repositories.","title":"Tessel 2 Core Repos:"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#tessel-2-command-line-interface-cli","text":"The CLI is the primary method of interacting with Tessel for users and developers. It provides useful functions like listing available Tessels, deploying code, and setting wifi credentials on the device.","title":"Tessel 2 Command Line Interface (CLI)"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#tessel-2-operation-system-openwrt","text":"The primary processor of the Tessel 2 runs a very lightweight version of Linux called OpenWRT. OpenWRT provides all of the TCP/IP drivers, threading/schedule support, and runs Node, Rust or whatever other language you're using with Tessel 2. This repo contains all of the source files of the Tessel build of OpenWRT.","title":"Tessel 2 Operation System (OpenWRT)"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#tessel-2-co-processor-firmware","text":"Tessel 2 features a SAMD21 co-processor that manages a handful of responsibilities like routing USB communication from the CLI and the realtime operations on the GPIO pins of the two module ports. This repo contains not only the firmware that drives this microcontroller but hardware-related scripts that define the interface to other languages (like tessel.js for Node scripts) so that the available hardware functionality doesn't get out of sync with what is exposed to the OpenWRT processor.","title":"Tessel 2 Co-processor Firmware"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#tessel-2-tools","text":"","title":"Tessel 2 Tools"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#tessel-2-virtual-machine-vm","text":"The VM is used primarily by Tessel developers who either don't have hardware available or want to develop on a faster computer. The repo provides the ability to create and run these Tessel virtual machines. You can use the CLI (see above) to interact with the running VM just as you would an actual Tessel 2. The VM has the limitation of not being able to set wifi credentials (it passes through the host network interface). It is not able to use 10-pin hardware modules but USB devices do get passed through.","title":"Tessel 2 Virtual Machine (VM)"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#tessel-2-compiler","text":"The Tessel 2 compiler is another virtual machine with all the build tools needed to develop native add-ons to Node modules. These add-ons are built to perform faster or interact with lower level hardware than JS alone would provide. The compiler is being used, for example, to develop the audio-video Node module for webcams and recording audio from microphones.","title":"Tessel 2 Compiler"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#hardware-designs","text":"","title":"Hardware Designs"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#tessel-2-hardware-design-files","text":"These are the production schematic and assembly files for the Tessel 2 hardware. You can find information about the parts that are used and how they are all connected to each other. These files were created with KiCad , a completely open source electronics design tool.","title":"Tessel 2 Hardware Design Files"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#tessel-parts-library","text":"This repo contains all of the KiCad part models for all Tessel hardware (not just Tessel 2). You will need this library in order to recreate the schematic and PCB of the hardware design files above.","title":"Tessel Parts Library"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#modules","text":"","title":"Modules"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#10-pin-modules","text":"There are 9 compatible 10-pin hardware modules for Tessel 2 available at the time of this writing. Each of these modules have a repo that contains the JavaScript driver. These repos can also be found on NPM under their respective Node modules names. Ambient (Light Sound) Module RFID/NFC Module Accelerometer Module Bluetooth Low Energy Module Climate (temperature humidity) Module GPS Module Infrared Module Relay Module Servo Module","title":"10-Pin Modules"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#usb-modules","text":"Tessel supports interfacing with USB devices. Here are libraries we support for Tessel to interoperate with USB modules, available from many vendors: Bluetooth Low Energy Dongles Cellular (3G/4G) Dongles (no Github module, it just works through the Node http module and similar for other languages) Audio Recording/Playback Video Cameras (specifically, webcams) Flash Storage Devices (no Github module, it just works through the Node fs module and similar for other languages)","title":"USB Modules"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#system-architecture","text":"","title":"System Architecture"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#high-level-look-at-hardware","text":"Below is a high level diagram of the hardware architecture: As you can see from the diagram, the Atmel co-processor manages the USB connection and can communicate with the MediaTek through a SPI bus. The MediaTek can execute user scripts, and when it interprets hardware commands (like pulling a GPIO high or sending data over I2C), it packages it up and sends it over to the Atmel over a pre-defined protocol on that SPI bus.","title":"High Level Look At Hardware"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#software-architecture","text":"The MediaTek is responsible for managing the two USB Host ports, the ethernet port, and the WiFi network interace directly from the OpenWRT Operating System. Let's take a look at the software architecture of Tessel 2: The USB Port on the Atmel actually has three interfaces to the to the MediaTek: 1. A UART connection that acts a serial terminal to the MediaTek. You can use a program like dterm to access the console through this connection. 2. A direct connection to the SPI Flash bus of the MediaTek. This allows the Atmel to rewrite the OpenWRT image and helps prevent the Tessel from becoming bricked by any corruptions to OS. 3. A SPI bus connection to the MediaTek for arbitrary data.","title":"Software Architecture"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#a-code-deploy-example","text":"A good method of understanding all the components of the system is to go through an example of running a simple script on Tessel 2:","title":"A Code Deploy Example"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#the-user-code-to-light-up-an-led","text":"The user might have code like the example below to light up LED 0 on Tessel 2. var tessel = require('tessel'); tessel.led[0].high();","title":"The user code to light up an LED"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#deploy-with-the-cli","text":"First, the user will use the command line interface to deploy the script from the host computer: t2 run index.js The CLI will compress the code and break this simple run command into a number of bash commands required to deploy the code like untarring the code and running it with Node .","title":"Deploy with the CLI"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#accepting-usb-communication-on-the-atmel","text":"The utf-8 encoding of each command is sent over the USB connection via a USB pipe . The USB pipe driver hands off the data to the general purpose SPI bridge (labeled as \"SPI SLAVE SERCOMMx\" in the diagram above) which transfers the command to the MediaTek.","title":"Accepting USB Communication On The Atmel"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#relaying-data-to-the-mediatek-spi-daemon","text":"On the MediaTek, the SPI Daemon is constantly waiting for data over the SPI bus and checks whether this data is from one of the module ports (for example, if an analog voltage was previously requested and was now returning the result) or from the USB port. The shell script that starts up the SPI Daemon on boot also creates three unix domain sockets: one for Module Port A ( /var/run/tessel/port_a ), one for Module Port B ( /var/run/tessel/port_b ), and one for USB ( /var/run/tessel/usb ). We'll get to the two module ports in a moment, but first, the data from the CLI is passed into the USB domain socket.","title":"Relaying Data to the MediaTek SPI Daemon"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#one-more-relay-into-the-usb-daemon","text":"Waiting on the other end of the domain socket is the USB Daemon . This program has the thrilling task of accepting shell commands, initializing new threads to execute them, and routing stdin, stdout, and stderr of those threads back to the CLI. So by this point, the CLI has executed a handful of bash commands that transferred the code onto the Tessel 2 and started a Node process to run it. The next question is how we actually do anything with the hardware.","title":"One More Relay Into The USB Daemon"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#accessing-hardware-through-tesseljs","text":"For JavaScript files, the answer comes from the var tessel = require('tessel') line of the user script. When Node executes this on the MediaTek, it finds the tessel module in /usr/lib/node/tessel.js . When this file is executed, it connects to a domain socket for each module port : two of the three domain sockets created by the SPI Daemon earlier! That means that whenever you run a command on a port like tessel.led[0].high() , it's packaging that command into a array of bytes and sending it back over the SPI bus to the Atmel bridge firmware! That firmware then parses the command as pulling the specific GPIO high, and executes it. It can then return the result of that operation back through the SPI bus to the MediaTek SPI Daemon.","title":"Accessing Hardware Through tessel.js"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#why-domain-sockets","text":"The beauty of this architecture with domain sockets is that most legitimate programming langauges have the capability to utilize domain sockets. This is how Tessel 2 can be used by any language, not just JavaScript (the code that packages up the commands into array bytes just has to be ported to that language first).","title":"Why Domain Sockets?"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#how-does-deploying-code-over-lan-work-into-this","text":"In the case of a LAN connection over WiFi or Ethernet, the procedure is much the same except all of the shell commands are executed over SSH. All of the module port communication between the SPI Daemon and the USB Bridge firmware is entirely the same. That's why the CLI is able to abstract out USB and LAN interfaces into a single Connection object that simply accepts shell commands and returns a process object with the three streams (stdin, stdout, stderr) regardless of physical connection.","title":"How Does Deploying Code over LAN Work Into This?"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#what-is-uciubus-on-the-diagram-above","text":"UCI and ubus are unique features of OpenWRT that essentially let you access system configuration programmatically and receive results in a JSON format. It's very handy for the command line interface. You can see that the CLI makes use of these features heavily, especially for wifi related settings.","title":"What is UCI/ubus on the diagram above?"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#questions","text":"Ask us on Slack (join here if you haven't already) or ask on the forums .","title":"Questions?"},{"location":"tutorials/Tessel/T2Docs/Debugging/Technical_Overview/#more-useful-links","text":"Current CLI Development Roadmap OpenWRT website MediaTek MT7620 datasheet Atmel SAMD21 datasheet Tessel Project Blog Getting Started with Node","title":"More Useful Links"},{"location":"tutorials/Tessel/T2Docs/Debugging/USB/","text":"Debugging USB Communications Introduction to USB For an in-depth description of how USB works, read about a code deploy example . Otherwise, the TL;DR is that USB communication from the CLI gets sent to the atmel samd21 coprocessor which then routes the packets over SPI to a daemon running on OpenWRT which then passes it on to another daemon whose only job is to create processes requested over USB and pipe the standard streams back to it. If that description caused your eyes to glaze over, that's okay because the only thing you need to take out of that is that for USB comms to be working, you need: * The coprocessor to be powered and have valid firmware * The SPI Daemon process running on OpenWRT * The USB Daemon process running on OpenWRT. The coprocessor should pretty much never be a problem unless you're tinkering with the firmware or the hardware. The SPI Daemon is relatively simple and has been well battle tested so that's unlikely to be broken. The USB Daemon is very often the culprit for USB issues. How to debug? The easiest way to debug USB communication issues is to check out the status of the USB and SPI daemons on OpenWRT. To do that, you need to get a root shell. Check out this short tutorial for getting a root shell over SSH or USB. I recommend using SSH because some of the programs used to route serial traffic over dterm is shared with the USB communications from the CLI so if you're already having a problem with USB comms, dterm may not work due to the same cause. Once you have a root shell, look for the following two processes by running ps : 1169 root 772 S spid /dev/spidev32766.1 2 1 /var/run/tessel 1185 root 780 S usbexecd /var/run/tessel/usb The top line is the SPI Daemon and the bottom line is the USB Daemon. If neither of them are running, you will have an issue. To start (or restart) one or both of them, run: /etc/init.d/spid restart /etc/init.d/usbexecd restart Once you restart them, you can try talking to Tessel from your host machine to see if that resolves the issue ( t2 list is a good litmus test).","title":"Debugging USB Communications"},{"location":"tutorials/Tessel/T2Docs/Debugging/USB/#debugging-usb-communications","text":"","title":"Debugging USB Communications"},{"location":"tutorials/Tessel/T2Docs/Debugging/USB/#introduction-to-usb","text":"For an in-depth description of how USB works, read about a code deploy example . Otherwise, the TL;DR is that USB communication from the CLI gets sent to the atmel samd21 coprocessor which then routes the packets over SPI to a daemon running on OpenWRT which then passes it on to another daemon whose only job is to create processes requested over USB and pipe the standard streams back to it. If that description caused your eyes to glaze over, that's okay because the only thing you need to take out of that is that for USB comms to be working, you need: * The coprocessor to be powered and have valid firmware * The SPI Daemon process running on OpenWRT * The USB Daemon process running on OpenWRT. The coprocessor should pretty much never be a problem unless you're tinkering with the firmware or the hardware. The SPI Daemon is relatively simple and has been well battle tested so that's unlikely to be broken. The USB Daemon is very often the culprit for USB issues.","title":"Introduction to USB"},{"location":"tutorials/Tessel/T2Docs/Debugging/USB/#how-to-debug","text":"The easiest way to debug USB communication issues is to check out the status of the USB and SPI daemons on OpenWRT. To do that, you need to get a root shell. Check out this short tutorial for getting a root shell over SSH or USB. I recommend using SSH because some of the programs used to route serial traffic over dterm is shared with the USB communications from the CLI so if you're already having a problem with USB comms, dterm may not work due to the same cause. Once you have a root shell, look for the following two processes by running ps : 1169 root 772 S spid /dev/spidev32766.1 2 1 /var/run/tessel 1185 root 780 S usbexecd /var/run/tessel/usb The top line is the SPI Daemon and the bottom line is the USB Daemon. If neither of them are running, you will have an issue. To start (or restart) one or both of them, run: /etc/init.d/spid restart /etc/init.d/usbexecd restart Once you restart them, you can try talking to Tessel from your host machine to see if that resolves the issue ( t2 list is a good litmus test).","title":"How to debug?"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/","text":"Hardware documentation for Tessel modules Scope This document provides hardware overviews for each Tessel module: Accelerometer Ambient Climate GPS Infrared Relay RFID Servo Accelerometer Measures acceleration in the x, y, and z directions. Quick overview: Parameter Value Tessel part # TM-01-XX Latest version TM-01-02 Key components MMA8452Q Current consumption (rated max) 165 microamps Current consumption (average) 165 microamps Communication protocol I2C, GPIO Notes I2C address can be modified by shorting J3 \u2013 see MMA8452Q datasheet 5.11.1 Table 10. +x = towards the Tessel, +y = G3 -- GND, +z = up Links to Hardware Information: Code: firmware, docs, examples Schematic(PDF) Schematic (DipTrace) Layout (DipTrace) Layout support file for silkscreen Ambient Measures ambient light and sound. Sound gain adjustable via R6. Quick overview: Parameter Value TM part # TM-08-XX Latest version TM-08-03 Key components PT15-21C/TR8 photodiode, SPU0410HR5H-PB microphone Current consumption (rated max) 10 mA Current consumption (average) 10 mA Communication protocol SPI, GPIO Notes Light signal path includes low pass filters with f c = 1.6 Hz Sound signal path measures loudness via a half wave rectifier Links to Hardware Information: Code: firmware, docs, examples Schematic(PDF) Schematic (DipTrace) Layout (DipTrace) Layout support file for silkscreen Climate Measure temperature and humidity Quick overview: Parameter Value TM part # TM-02-XX Latest version TM-02-02 Key components SI7020-A20 sensor Current consumption (rated max) 565 microamps Current consumption (average) 320 microamps Communication protocol I2C, GPIO Notes Temperature of the climate module can be affected by proximity to the Tessel processor. Links to Hardware Information: Code: firmware, docs, examples Schematic(PDF) Schematic (DipTrace) Layout (DipTrace) Layout support file for silkscreen GPS Global positioning system: position reference, movement speed heading, time reference Quick overview: Parameter Value TM part # TM-09-XX Latest version TM-09-02 Key components A2235-H GPS module ( user manual , product page ) Current consumption (rated max) 42 mA Current consumption (average) 36 mA Communication protocol UART, GPIO Notes The A2235-H is based on CSR SiRFstarIV chipset, which supports a novel GPS fix mode and a variety of low power states. The A2235-H supports two different data modes: NMEA and SiRF binary mode (also called OSP mode). Tessel GPS's default APIs use the module in NMEA mode. A-GPS is supported with client generated extended ephemeris up to 3 days. Links to Hardware Information: Code: firmware, docs, examples Schematic(PDF) Schematic (DipTrace) Layout (DipTrace) Layout support file for silkscreen Infrared Communicate with and command household electronics using IR light Quick overview: Parameter Value TM part # TM-11-XX Latest version TM-11-03 Key components TSOP38238 38 kHz IR demodulator, SFH-4646-Z IR LED Current consumption (rated max) 95 mA Current consumption (average) 5 mA Communication protocol UART, GPIO Notes Receiving IR takes very little power. Transmission, on the other hand, uses a good deal of power. Receiver frequency is fixed at 38 kHz, although pin-compatible parts which operate at other frequencies presumably exist. Check your appliance's manual and/or the internet to make sure your hardware is compatible. Links to Hardware Information: Code: firmware, docs, examples Schematic(PDF) Schematic (DipTrace) Layout (DipTrace) Layout support file for silkscreen Relay Switch large, high voltage loads Quick overview: Parameter Value TM part # TM-04-XX Latest version TM-04-04 Key components IM02DGR ( DigiKey page ) Current consumption (rated max) 90 mA Current consumption (average) 10 mA Communication protocol GPIO Notes Relays are normally open (load disconnected) and will open should the module/Tessel lose power Current draw increases when the relays close ( I draw = 10mA + 40mA * [number of relays on]) Rated to 240 V, 5 A (but please be careful) Insert and remove wires by pressing down on the connectors with a ballpoint pen (or similar). Links to Hardware Information: Code: firmware, docs, examples Schematic(PDF) Schematic (DipTrace) Layout (DipTrace) Layout support file for silkscreen RFID Read and write from/to 13.56 MHz RFID cards and tags Quick overview: Parameter Value TM part # TM-10-XX Latest version TM-10-03 Key components PN532 ( datasheet , user manual , MiFARE tag IC/protocol docs ) 13.56 MHz RFID transceiver Current consumption (rated max) 150 mA Current consumption (average) 60 mA Communication protocol I2C, GPIO Notes Module can be switched to communicate over SPI with appropriate resistor pop option swaps Current is highest when transmitting and much lower most of the time A MiFare Classic card ships with the module Hardware-compatible with ISO-14443 RFID tags , including but not limited to: MiFare (Classic 1k, Classic 4k, Ultralight), DesFire, and FeliCa. Further information in the link. Compatible cards (consumer): Charlie, Clipper Links to Hardware Information: Code: firmware, docs, examples Schematic(PDF) Schematic (DipTrace) Layout (DipTrace) Layout support file for silkscreen Servo Control up to 16 servos Quick overview: Parameter Value TM part # TM-03-XX Latest version TM-03-02 Key components PCA9685 LED driver Current consumption (rated max) 50 mA Current consumption (average) 10 mA Communication protocol I2C, GPIO Notes An I2C LED PWM driver makes for a great servo driver too! 16 channels Tessel is a 3.3V device, so V out on the PWM channels is 3.3 V (works for standard hobby servos) 5.5 mm barrel jack (center positive) for powering servos Can be used to control anything that needs PWM (speed controllers, gate drivers-to-FETs-big LEDs, etc.) Links to Hardware Information: Code: firmware, docs, examples Schematic(PDF) Schematic (DipTrace) Layout (DipTrace) Layout support file for silkscreen","title":"Hardware documentation for Tessel modules"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#hardware-documentation-for-tessel-modules","text":"","title":"Hardware documentation for Tessel modules"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#scope","text":"This document provides hardware overviews for each Tessel module: Accelerometer Ambient Climate GPS Infrared Relay RFID Servo","title":"Scope"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#accelerometer","text":"Measures acceleration in the x, y, and z directions.","title":"Accelerometer"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#quick-overview","text":"Parameter Value Tessel part # TM-01-XX Latest version TM-01-02 Key components MMA8452Q Current consumption (rated max) 165 microamps Current consumption (average) 165 microamps Communication protocol I2C, GPIO","title":"Quick overview:"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#notes","text":"I2C address can be modified by shorting J3 \u2013 see MMA8452Q datasheet 5.11.1 Table 10. +x = towards the Tessel, +y = G3 -- GND, +z = up","title":"Notes"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#links-to-hardware-information","text":"Code: firmware, docs, examples Schematic(PDF) Schematic (DipTrace) Layout (DipTrace) Layout support file for silkscreen","title":"Links to Hardware Information:"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#ambient","text":"Measures ambient light and sound. Sound gain adjustable via R6.","title":"Ambient"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#quick-overview_1","text":"Parameter Value TM part # TM-08-XX Latest version TM-08-03 Key components PT15-21C/TR8 photodiode, SPU0410HR5H-PB microphone Current consumption (rated max) 10 mA Current consumption (average) 10 mA Communication protocol SPI, GPIO","title":"Quick overview:"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#notes_1","text":"Light signal path includes low pass filters with f c = 1.6 Hz Sound signal path measures loudness via a half wave rectifier","title":"Notes"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#links-to-hardware-information_1","text":"Code: firmware, docs, examples Schematic(PDF) Schematic (DipTrace) Layout (DipTrace) Layout support file for silkscreen","title":"Links to Hardware Information:"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#climate","text":"Measure temperature and humidity","title":"Climate"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#quick-overview_2","text":"Parameter Value TM part # TM-02-XX Latest version TM-02-02 Key components SI7020-A20 sensor Current consumption (rated max) 565 microamps Current consumption (average) 320 microamps Communication protocol I2C, GPIO","title":"Quick overview:"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#notes_2","text":"Temperature of the climate module can be affected by proximity to the Tessel processor.","title":"Notes"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#links-to-hardware-information_2","text":"Code: firmware, docs, examples Schematic(PDF) Schematic (DipTrace) Layout (DipTrace) Layout support file for silkscreen","title":"Links to Hardware Information:"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#gps","text":"Global positioning system: position reference, movement speed heading, time reference","title":"GPS"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#quick-overview_3","text":"Parameter Value TM part # TM-09-XX Latest version TM-09-02 Key components A2235-H GPS module ( user manual , product page ) Current consumption (rated max) 42 mA Current consumption (average) 36 mA Communication protocol UART, GPIO","title":"Quick overview:"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#notes_3","text":"The A2235-H is based on CSR SiRFstarIV chipset, which supports a novel GPS fix mode and a variety of low power states. The A2235-H supports two different data modes: NMEA and SiRF binary mode (also called OSP mode). Tessel GPS's default APIs use the module in NMEA mode. A-GPS is supported with client generated extended ephemeris up to 3 days.","title":"Notes"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#links-to-hardware-information_3","text":"Code: firmware, docs, examples Schematic(PDF) Schematic (DipTrace) Layout (DipTrace) Layout support file for silkscreen","title":"Links to Hardware Information:"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#infrared","text":"Communicate with and command household electronics using IR light","title":"Infrared"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#quick-overview_4","text":"Parameter Value TM part # TM-11-XX Latest version TM-11-03 Key components TSOP38238 38 kHz IR demodulator, SFH-4646-Z IR LED Current consumption (rated max) 95 mA Current consumption (average) 5 mA Communication protocol UART, GPIO","title":"Quick overview:"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#notes_4","text":"Receiving IR takes very little power. Transmission, on the other hand, uses a good deal of power. Receiver frequency is fixed at 38 kHz, although pin-compatible parts which operate at other frequencies presumably exist. Check your appliance's manual and/or the internet to make sure your hardware is compatible.","title":"Notes"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#links-to-hardware-information_4","text":"Code: firmware, docs, examples Schematic(PDF) Schematic (DipTrace) Layout (DipTrace) Layout support file for silkscreen","title":"Links to Hardware Information:"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#relay","text":"Switch large, high voltage loads","title":"Relay"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#quick-overview_5","text":"Parameter Value TM part # TM-04-XX Latest version TM-04-04 Key components IM02DGR ( DigiKey page ) Current consumption (rated max) 90 mA Current consumption (average) 10 mA Communication protocol GPIO","title":"Quick overview:"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#notes_5","text":"Relays are normally open (load disconnected) and will open should the module/Tessel lose power Current draw increases when the relays close ( I draw = 10mA + 40mA * [number of relays on]) Rated to 240 V, 5 A (but please be careful) Insert and remove wires by pressing down on the connectors with a ballpoint pen (or similar).","title":"Notes"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#links-to-hardware-information_5","text":"Code: firmware, docs, examples Schematic(PDF) Schematic (DipTrace) Layout (DipTrace) Layout support file for silkscreen","title":"Links to Hardware Information:"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#rfid","text":"Read and write from/to 13.56 MHz RFID cards and tags","title":"RFID"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#quick-overview_6","text":"Parameter Value TM part # TM-10-XX Latest version TM-10-03 Key components PN532 ( datasheet , user manual , MiFARE tag IC/protocol docs ) 13.56 MHz RFID transceiver Current consumption (rated max) 150 mA Current consumption (average) 60 mA Communication protocol I2C, GPIO","title":"Quick overview:"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#notes_6","text":"Module can be switched to communicate over SPI with appropriate resistor pop option swaps Current is highest when transmitting and much lower most of the time A MiFare Classic card ships with the module Hardware-compatible with ISO-14443 RFID tags , including but not limited to: MiFare (Classic 1k, Classic 4k, Ultralight), DesFire, and FeliCa. Further information in the link. Compatible cards (consumer): Charlie, Clipper","title":"Notes"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#links-to-hardware-information_6","text":"Code: firmware, docs, examples Schematic(PDF) Schematic (DipTrace) Layout (DipTrace) Layout support file for silkscreen","title":"Links to Hardware Information:"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#servo","text":"Control up to 16 servos","title":"Servo"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#quick-overview_7","text":"Parameter Value TM part # TM-03-XX Latest version TM-03-02 Key components PCA9685 LED driver Current consumption (rated max) 50 mA Current consumption (average) 10 mA Communication protocol I2C, GPIO","title":"Quick overview:"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#notes_7","text":"An I2C LED PWM driver makes for a great servo driver too! 16 channels Tessel is a 3.3V device, so V out on the PWM channels is 3.3 V (works for standard hobby servos) 5.5 mm barrel jack (center positive) for powering servos Can be used to control anything that needs PWM (speed controllers, gate drivers-to-FETs-big LEDs, etc.)","title":"Notes"},{"location":"tutorials/Tessel/T2Docs/Hardware/Modules/#links-to-hardware-information_7","text":"Code: firmware, docs, examples Schematic(PDF) Schematic (DipTrace) Layout (DipTrace) Layout support file for silkscreen","title":"Links to Hardware Information:"},{"location":"tutorials/Tessel/T2Docs/Hardware/Tessel_2_Overview/","text":"Hardware Overview of Tessel 2 Quick specs At a glance, the main hardware components of Tessel 2 are: 580MHz WiFi router system on chip ( Mediatek MT7620n ) running linux ( OpenWRT ) 64 MB of DDR2 RAM 32 MB of flash storage 2 High-speed USB 2.0 ports micro USB port 10/100 Ethernet port (RJ-45 jack) 48MHz ARM Cortex M0 microcontroller ( Atmel SAMD21 ) Two flexible module ports 4 LEDs Reset button Above-and-beyond features: Router-grade 802.11b/g/n WiFi (2.4 GHz), including access point mode ( Tessel can be a router ) 16 GPIO broken out as a pair of multi-purpose module ports Individual control over and protection for all outward-facing power buses (USB and module ports) A form factor designed for abstraction and flexibility in the hardware, software, and mechanical worlds as you scale from prototype to production Tessel 2 Layout On the board, Tessel 2 is divided into three functional blocks: These can be abstracted as follows: Abstraction boundaries of Tessel 2 The board employs a processor/coprocessor architecture. The Mediatek runs your user code, hosts USB devices, handles the network connections (be they wired, wireless, or cellular over USB), and communicates with the SAMD21. The SAM acts as a coprocessor and handles real-time, low-level IO through the module ports, USB comms through the Micro USB port, and programming the device as a whole. The two chips are connected by a SPI bridge that also includes the onboard flash (the readme for Tessel 2\u2019s firmware repo goes into more detail here ). The whole system is powered from the single micro USB (device) port. Alternately, power can be supplied over the 5VIN pin: The additional 5V pin shown in the yellow box is a source of 5V power. Power architecture of Tessel 2 The below table explains how the major components of Tessel 2 are powered. Item Powered by Enabled or reset by 5V USB cable Presence of USB cable with upstream power 3.3V Mediatek 5V GPIO on coprocessor, pull resistor to ENABLE Mediatek chip 3.3V Mediatek GPIO on coprocessor, pull resistor to !RESET Flash chip 3.3V Mediatek GPIO on both the SAM and the Mediatek 1.8V (not exposed) 5V 3.3V Mediatek RAM for Mediatek 1.8V Mediatek (involuntary) 3.3V coprocessor 5V 5V Coprocessor chip 3.3V Coprocessor GPIO on Mediatek, pull resistor to !RESET 3.3V module port A 3.3V Coprocessor GPIO on coprocessor, pull resistor to OFF 3.3V module port B 3.3V Coprocessor GPIO on coprocessor, pull resistor to OFF USB hub IC 5V 3.3V Mediatek Power to USB ports 5V Mediatek via USB hub IC, pull resistor to off What this means in practice is that the coprocessor (SAMD21) has control over both the \"power plug\" and the reset switch for the Mediatek, while the Mediatek only has control over the SAM's reset line. The rationale here is that the SAM uses a negligible amount of power, but it might be beneficial to be able to shut down the Mediatek in order to save power. That said, there is no true \"off switch\" in the hardware that enables a permanent shutdown so long as external power is applied. Quiescent draw is currently estimated to be 10mW. Triggering a Mediatek reset from the SAM results in a clean reboot. I believe the SAM does currently save some state, but it can be reset by the Mediatek, so this isn't really a concern. Because the flash must be on in order for the Mediatek to boot (that's where our build of OpenWRT lives), it is powered by the 3.3V Mediatek bus. In order for the SAM to program the flash, it must hold the Mediatek in reset. Note that this is most useful for programming the board the first time...and other custom, low-level work, like what you would need to write in order to successfully save state so you could power down the Mediatek and bring it back up again elegantly. The protocol and architecture involved between the Mediatek and the coprocessor is explained more in the T2 Firmware readme . Port power management Various pieces of the Tessel 2 have hardware support for individual power management. Module port power Tessel 2's architecture gives you individual control over the 3.3V (at least 250 mA) rails on each port, so you can turn modules off when they\u2019re not in use to save power. Tessel 2's firmware turns off power to the port if a program does not require the tessel module. However, if tessel is required in the code, both will be turned on by default. It is possible to turn off the other module port with an explicit call, detailed here . USB ports Though not currently broken out into the user layer, it is possible to control power to each USB port via SET_FEATURE(USB_PORT_FEAT_POWER) requests. Module port goodies Each pin on the two 10-pin headers is unique and can be reconfigured to do almost anything from speaking alternate comms protocols to clock generation. For example, if you decide you don\u2019t want SPI, feel free to give yourself another I2C or UART with minimal changes to the SAMD21\u2019s firmware. Touching only JS, you can forgo the fancy comms in favor of just plain GPIO, which gives you access to as many as 16 of them. Last but not least, all eight pins on Port B are also inputs to a 12-bit, 350 ksps ADC, with adjustable gain that can operate in differential mode. More information on the module ports can be found in the Atmel SAMD21 datasheet , such as this chart of I/O pin characteristics (p962):","title":"Hardware Overview of Tessel 2"},{"location":"tutorials/Tessel/T2Docs/Hardware/Tessel_2_Overview/#hardware-overview-of-tessel-2","text":"","title":"Hardware Overview of Tessel 2"},{"location":"tutorials/Tessel/T2Docs/Hardware/Tessel_2_Overview/#quick-specs","text":"At a glance, the main hardware components of Tessel 2 are: 580MHz WiFi router system on chip ( Mediatek MT7620n ) running linux ( OpenWRT ) 64 MB of DDR2 RAM 32 MB of flash storage 2 High-speed USB 2.0 ports micro USB port 10/100 Ethernet port (RJ-45 jack) 48MHz ARM Cortex M0 microcontroller ( Atmel SAMD21 ) Two flexible module ports 4 LEDs Reset button Above-and-beyond features: Router-grade 802.11b/g/n WiFi (2.4 GHz), including access point mode ( Tessel can be a router ) 16 GPIO broken out as a pair of multi-purpose module ports Individual control over and protection for all outward-facing power buses (USB and module ports) A form factor designed for abstraction and flexibility in the hardware, software, and mechanical worlds as you scale from prototype to production","title":"Quick specs"},{"location":"tutorials/Tessel/T2Docs/Hardware/Tessel_2_Overview/#tessel-2-layout","text":"On the board, Tessel 2 is divided into three functional blocks: These can be abstracted as follows:","title":"Tessel 2 Layout"},{"location":"tutorials/Tessel/T2Docs/Hardware/Tessel_2_Overview/#abstraction-boundaries-of-tessel-2","text":"The board employs a processor/coprocessor architecture. The Mediatek runs your user code, hosts USB devices, handles the network connections (be they wired, wireless, or cellular over USB), and communicates with the SAMD21. The SAM acts as a coprocessor and handles real-time, low-level IO through the module ports, USB comms through the Micro USB port, and programming the device as a whole. The two chips are connected by a SPI bridge that also includes the onboard flash (the readme for Tessel 2\u2019s firmware repo goes into more detail here ). The whole system is powered from the single micro USB (device) port. Alternately, power can be supplied over the 5VIN pin: The additional 5V pin shown in the yellow box is a source of 5V power.","title":"Abstraction boundaries of Tessel 2"},{"location":"tutorials/Tessel/T2Docs/Hardware/Tessel_2_Overview/#power-architecture-of-tessel-2","text":"The below table explains how the major components of Tessel 2 are powered. Item Powered by Enabled or reset by 5V USB cable Presence of USB cable with upstream power 3.3V Mediatek 5V GPIO on coprocessor, pull resistor to ENABLE Mediatek chip 3.3V Mediatek GPIO on coprocessor, pull resistor to !RESET Flash chip 3.3V Mediatek GPIO on both the SAM and the Mediatek 1.8V (not exposed) 5V 3.3V Mediatek RAM for Mediatek 1.8V Mediatek (involuntary) 3.3V coprocessor 5V 5V Coprocessor chip 3.3V Coprocessor GPIO on Mediatek, pull resistor to !RESET 3.3V module port A 3.3V Coprocessor GPIO on coprocessor, pull resistor to OFF 3.3V module port B 3.3V Coprocessor GPIO on coprocessor, pull resistor to OFF USB hub IC 5V 3.3V Mediatek Power to USB ports 5V Mediatek via USB hub IC, pull resistor to off What this means in practice is that the coprocessor (SAMD21) has control over both the \"power plug\" and the reset switch for the Mediatek, while the Mediatek only has control over the SAM's reset line. The rationale here is that the SAM uses a negligible amount of power, but it might be beneficial to be able to shut down the Mediatek in order to save power. That said, there is no true \"off switch\" in the hardware that enables a permanent shutdown so long as external power is applied. Quiescent draw is currently estimated to be 10mW. Triggering a Mediatek reset from the SAM results in a clean reboot. I believe the SAM does currently save some state, but it can be reset by the Mediatek, so this isn't really a concern. Because the flash must be on in order for the Mediatek to boot (that's where our build of OpenWRT lives), it is powered by the 3.3V Mediatek bus. In order for the SAM to program the flash, it must hold the Mediatek in reset. Note that this is most useful for programming the board the first time...and other custom, low-level work, like what you would need to write in order to successfully save state so you could power down the Mediatek and bring it back up again elegantly. The protocol and architecture involved between the Mediatek and the coprocessor is explained more in the T2 Firmware readme .","title":"Power architecture of Tessel 2"},{"location":"tutorials/Tessel/T2Docs/Hardware/Tessel_2_Overview/#port-power-management","text":"Various pieces of the Tessel 2 have hardware support for individual power management.","title":"Port power management"},{"location":"tutorials/Tessel/T2Docs/Hardware/Tessel_2_Overview/#module-port-power","text":"Tessel 2's architecture gives you individual control over the 3.3V (at least 250 mA) rails on each port, so you can turn modules off when they\u2019re not in use to save power. Tessel 2's firmware turns off power to the port if a program does not require the tessel module. However, if tessel is required in the code, both will be turned on by default. It is possible to turn off the other module port with an explicit call, detailed here .","title":"Module port power"},{"location":"tutorials/Tessel/T2Docs/Hardware/Tessel_2_Overview/#usb-ports","text":"Though not currently broken out into the user layer, it is possible to control power to each USB port via SET_FEATURE(USB_PORT_FEAT_POWER) requests.","title":"USB ports"},{"location":"tutorials/Tessel/T2Docs/Hardware/Tessel_2_Overview/#module-port-goodies","text":"Each pin on the two 10-pin headers is unique and can be reconfigured to do almost anything from speaking alternate comms protocols to clock generation. For example, if you decide you don\u2019t want SPI, feel free to give yourself another I2C or UART with minimal changes to the SAMD21\u2019s firmware. Touching only JS, you can forgo the fancy comms in favor of just plain GPIO, which gives you access to as many as 16 of them. Last but not least, all eight pins on Port B are also inputs to a 12-bit, 350 ksps ADC, with adjustable gain that can operate in differential mode. More information on the module ports can be found in the Atmel SAMD21 datasheet , such as this chart of I/O pin characteristics (p962):","title":"Module port goodies"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/","text":"Tessel 2 Module Communication Protocols Each of the two ports on Tessel 2 exposes ten pins for use in creating custom modules. Two of the pins are for power (3.3V and ground) and the other eight are configurable GPIO (General Purpose Input and Output) pins that can be used to communicate with your module. All eight communication pins allow for communication through changes in voltage: some through variable voltage between 0V and 3.3V (analog pins), some through simple on/off (0V/3.3V) states (digital pins), and some through special digital toggling referred to by their communication protocols. Communication protocols (such as SPI, I2C, and UART) involve a pre-defined set of pins used in a specific way. These protocols are used to encode complex messages. It's a lot like Morse code , but for electronics. In embedded electronics, there are four common protocols and Tessel supports them all in JavaScript . GPIO SPI I2C UART This guide will provide a brief overview of the protocols and cover some of the strengths and weaknesses of each. You can see a mapping of which pins can be used for which protocols on the Tessel docs page . Quick Reference Most of the time, you will choose your protocol based on the parts you are using when designing your module. Other things to consider are the pins you have available, as well as your communication speed requirements. The following table can be used as a quick reference for the more detailed explanations of each protocol below. Protocol # Pins Required Max Speed GPIO 1 1kHz SPI 3+ (MOSI, MISO, SCK + 1 GPIO pin) 25MBit/s I2C 2 (SCL and SDA) 100kHz or 400kHz configurable by module port UART 2 (TX and RX) 8Mbit/s A Note on Level Shifting All of the diagrams and discussions below regarding communication protocols assume that the hardware modules you are communicating with operate at 3.3V, just like the Tessel. If you have a device on your custom module that operates at 5V, 1.8V, or any other non-3.3V voltage, be careful! Directly connecting components with different operating voltages can damage the Tessel and/or your device. You can use devices which operate at different voltages by employing a technique called 'level shifting'. Sparkfun has a nice writeup on voltage dividers and level shifting that can be used as a starting point. The easiest way to avoid this complication is by trying to find module components that natively work at 3.3V. GPIO Pros: Simple, Requires a single pin Cons: Not good for sending complex data By far the simplest form of communication is via General Purpose Input/Output (GPIO). GPIO isn't really a 'protocol'. It is a rudimentary form of communication where you manually (in code) turn a pin on and off or read its state. By default, Tessel's GPIO pins are configured to be inputs. See which pins support this protocol. Input When acting as a digital input, a pin can be queried in software and will return a value indicating the current state of the pin: high (1 or true) or low (0 or false). The following code snippet is an example of querying pin 2 on port A. const tessel = require('tessel'); // Import tessel const pin = tessel.port.A.pin[2]; // Select pin 2 on port A pin.read((error, value) = { // Print the pin value to the console console.log(value); }); This is great for connecting things like switches, buttons , and even motion detectors . Just remember that the Tessel can only handle signals that are 3.3V or lower. Determining digital state\u2013 a note for the curious: It's pretty clear that if an input pin sees 3.3V it would be interpreted as a high state and if the pin is connected to ground it would recognize that as a low state. But what if the pin senses something in between, like 2V? Your first thought might be that a high state is anything 1.65V (halfway between 0 and 3.3) or higher, and anything lower than that would be considered the low state. However, this is not always the case. The high/low threshold is always determined by the processor. In the case of the Tessel 2, that's the SAM D21. The documentation on the SAM D21 tells us that the Tessel will consider an input to be high if it is at least 55% of the Tessel's supply voltage (VDD) which is 3.3V. It also tells us that any signal that is 30% of VDD or lower is guaranteed to be read as a low state. That means anything 1.815V (referenced as VIH) or higher would be considered high, and anything .99V (referenced as VIL) or lower is guaranteed to be interpreted as a low state. A screen capture from the electrical characteristics section of [Atmel's SAM D21 datasheet](http://www.atmel.com/Images/Atmel-42181-SAM-D21_Datasheet.pdf) What about the voltages between .99V and 1.815V? The read behavior is undefined and you are not guaranteed to get an accurate result. That's one reason why it's important to make sure that any module you connect to a Tessel input pin provides a high voltage that is between VIH and 3.3V and a low voltage between ground and VIL. More GPIO example code and information Output When acting as a digital output, a pin can be set to one of two states: high (on/1/true) or low (off/0/false). High means the main Tessel board will set that pin to be 3.3V and low means it will set it to 0V. Digital output is useful for connected hardware that understands simple on/off states. The following code snippet shows how you can set the state of the pin 2 on port A. const tessel = require('tessel'); const pin = tessel.port.A.pin[2]; // Select pin 2 on port A pin.output(1); // Turn pin high (on) pin.read((error, value) = { // Print the pin value to the console console.log(value); pin.output(0); // Turn pin low (off) }); Some examples of using a GPIO pin as an output are simple LEDs and for turning appliances on and off with a relay . An output pin is perfect for controlling an LED. Image is licensed under the [Creative Commons Attribution-Share Alike 2.0 Generic](http://creativecommons.org/licenses/by-sa/2.0/deed.en) license. More GPIO example code and information SPI Pros: Fast, supports multiple devices on a single bus, allows two-way communication Cons: Requires at least 3 pins SPI stands for Serial Peripheral Interface . The SPI protocol allows data to be exchanged one byte at a time between the Tessel and a module via two communication lines. This is great for transferring data like sensor readings or sending commands to a module. The SPI protocol is known as a Master/Slave protocol, which means that there is always a single master device which controls the flow of communication with one or more slave devices. Think of the master as a traffic cop. It directs all of the connected slave devices so they know when it's their turn to communicate. When you are creating modules, the Tessel will always act as the master device, and your custom module will be a slave device. The SPI protocol requires a minimum of three signal connections and usually has four (this is in addition to the power connections). The following diagram shows the connections (arrows indicate flow of data). The red lines constitute the shared bus connections used for talking to the slave devices. The green wire is the shared bus connection used by the slaves to talk to the master. The blue line is the chip select for signaling each slave individually. SCK This is the clock signal that keeps the Tessel and the module synchronized while transferring data. The two devices need to have a mutual understanding of how fast data is to be transferred between them. This is sometimes referred to as the baud or bitrate. The clock signal provides that reference signal for the devices to use when exchanging data. Without a clock signal to synchronize the devices, the devices would have no way to interpret the signal on the data lines. One bit of data is transferred with each clock cycle (see the diagram below). MOSI MOSI stands for M aster O ut S lave I n and is the connection used by the Tessel to send data to the module. It's on this line that the Tessel will encode its data. MISO MISO stands for M aster I n S lave O ut and is the connection used by the module to send data to the Tessel. SS or CS This line, normally referred to as the Slave Select (SS) or Chip Select (CS) line, is used by the master device to notify a specific slave device that it is about to send data. We normally call it CS, but you may see it either way in datasheets and other references. When you create a Tessel module which uses the SPI protocol, the CS connection will be handled by one of the GPIO pins on the Tessel port. The following diagram shows how the various pins in the SPI protocol are toggled to create meaningful data. In this case, the master sends the ASCII character 'S', and the slave responds with 'F'. Timing diagram of SPI data exchange. Modified [image](https://dlnmh9ip6v2uc.cloudfront.net/assets/c/7/8/7/d/52ddb2dcce395fed638b4567.png) from Sparkfun is [CC BY-NC-SA 3.0](http://creativecommons.org/licenses/by-nc-sa/3.0/) Remember that the master initiates all communication. When it is ready, the first thing it will do is pull the CS/SS pin low to let the slave device know that a data transmission is about to begin. The master holds this pin low for the duration of the data exchange as seen in the diagram above. With the CS/SS pin low, the master will start to toggle the clock pin (SCK) while simultaneously controlling the MOSI to represent the bits of information it wishes to send to the slave. The numbers in green on the diagram above delineate each bit in the byte being transferred. It sounds complicated, but remember that the Tessel takes care of all of this pin manipulation for you. All you have to do is write some Javascript like this code snippet, which demonstrates the use of the SPI protocol on port A. 'use strict'; const tessel = require('tessel'); const port = tessel.port.A; const spi = new port.SPI({ clockSpeed: 4000000 // 4MHz }); spi.transfer(new Buffer([0xde, 0xad, 0xbe, 0xef]), (error, buffer) = { console.log(`buffer returned by SPI slave: ${[...buffer]} `); }); More SPI example code and information I2C Pros: Only requires 2 pins, multiple devices on a single bus, allows two-way communication Cons: Devices can have address conflicts, not as fast as SPI I2C stands for Inter-Integrated Circuit and is pronounced \"I squared C\", \"I two C\" or \"I-I-C\". I2C is a protocol that allows one device to exchange data with one or more connected devices through the use of a single data line and clock signal. I2C is a Master/Slave protocol, which means that there is always a single master device which controls the flow of communication with one or more slave devices. I2C only requires two communication connections: SCL This is the clock signal that keeps the Tessel and the module synchronized while transferring data. The two devices need to have a mutual understanding of how fast data is to be transferred between them. This is sometimes referred to as the baud or bitrate. The clock signal provides that reference signal for the devices to use when exchanging data. Without a clock signal to synchronize the devices, they would have no way to interpret the signal on the data lines. SDA This is the data line used for exchanging data between the master and slaves. Instead of having separate communication lines for the master and slave devices, they both share a single data connection. The master coordinates the usage of that connection so that only one device is \"talking\" at a time. Since multiple slave devices can use the same SDA line, the master needs a way to distinguish between them and talk to a single device at a time. The I2C protocol uses the concept of device addressing to coordinate traffic on the data line. Every single I2C device connected to the Tessel will have an internal address that cannot be the same as any other module connected to the Tessel. This address is usually determined by the device manufacturer and listed in the datasheet. Sometimes you can configure the address through device-specific tweaks defined by the manufacturer. The Tessel, as the master device, needs to know the address of each slave and will use it to notify a device when it wants to communicate with it before transferring data. Flow of data between Tessel and multiple I2C devices. The following diagram illustrates how the SDA and SCL pins are toggled when transferring data with the I2C protocol. To begin a data transaction, the master creates what is called a start condition by pulling the SDA pin low before the SCL pin. The master then broadcasts the address of the device it wishes to communicate with by sending each bit of the 7 bit address. Notice the clock signal (SCL) is toggled for each bit. This toggling is how the slaves know when to read each bit of the address so they can determine with which device the master wants to communicate. Right after the address, the master sends a read/write bit which signals whether it will be sending data to the slave or reading data from the slave. After broadcasting the address, the master either transmits data to the slave or sends the address of a register (internal storage) on the slave from which it wishes to retrieve data. Finally, the master will issue a stop condition on the bus by pulling SCL high, followed by SDA. It's a little complicated, but the Tessel takes care of all the details for you. Using the I2C pins on port A looks like this: 'use strict'; const tessel = require('tessel'); const port = tessel.port.A; // This is the address of the attached module/sensor const address = 0xDE; const i2c = new port.I2C(address); i2c.send(new Buffer([0xde, 0xad, 0xbe, 0xef]), (error) = { console.log( I'm done sending the data ); // Can also use err for error handling }) More I2C example code and information UART Pros: Widely supported, allows two-way communication Cons: Can't share communication lines, slower than SPI and I2C UART stands for Universal Asynchronous Receiver/Transmitter and is really just a fancy way of referring to a serial port. It is really easy to understand as it only requires two lines: a transmission line ( TX ) and a receiving line ( RX ). The Tessel sends data to connected modules on the TX line and gets data back on the RX line. TX Used by the Tessel to send data to the module. RX Used by the module to send data to the Tessel. A UART data transmission. UART transmissions begin with a start bit where the appropriate line (TX or RX) is pulled low by the sending party. Then 5 to 8 data bits are sent. The diagram above shows a scenario where 8 bits are sent. Following the data, an optional parity bit is sent, followed by 1 or 2 stop bits, where the sending module pulls the pin high. For this protocol to work, the sender and receiver have to agree on a few things. How many data bits are sent with each packet (5 to 8)? How fast should the data be sent? This is know as the baud rate. Is there a parity bit after the data, and is it high or low? How many stop bits will be sent at the end of each transmission? When you want to interact with a specific module via UART, the answers to these questions are found in the module's datasheet. Using that information you can configure the UART in Javascript like this: 'use strict'; const tessel = require('tessel'); const port = tessel.port.A; const uart = new port.UART({ dataBits: 8, baudrate: 115200, parity: none , stopBits: 1 }); uart.write('Hello UART'); More example code using a UART","title":"Tessel 2 Module Communication Protocols"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/#tessel-2-module-communication-protocols","text":"Each of the two ports on Tessel 2 exposes ten pins for use in creating custom modules. Two of the pins are for power (3.3V and ground) and the other eight are configurable GPIO (General Purpose Input and Output) pins that can be used to communicate with your module. All eight communication pins allow for communication through changes in voltage: some through variable voltage between 0V and 3.3V (analog pins), some through simple on/off (0V/3.3V) states (digital pins), and some through special digital toggling referred to by their communication protocols. Communication protocols (such as SPI, I2C, and UART) involve a pre-defined set of pins used in a specific way. These protocols are used to encode complex messages. It's a lot like Morse code , but for electronics. In embedded electronics, there are four common protocols and Tessel supports them all in JavaScript . GPIO SPI I2C UART This guide will provide a brief overview of the protocols and cover some of the strengths and weaknesses of each. You can see a mapping of which pins can be used for which protocols on the Tessel docs page .","title":"Tessel 2 Module Communication Protocols"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/#quick-reference","text":"Most of the time, you will choose your protocol based on the parts you are using when designing your module. Other things to consider are the pins you have available, as well as your communication speed requirements. The following table can be used as a quick reference for the more detailed explanations of each protocol below. Protocol # Pins Required Max Speed GPIO 1 1kHz SPI 3+ (MOSI, MISO, SCK + 1 GPIO pin) 25MBit/s I2C 2 (SCL and SDA) 100kHz or 400kHz configurable by module port UART 2 (TX and RX) 8Mbit/s","title":"Quick Reference"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/#a-note-on-level-shifting","text":"All of the diagrams and discussions below regarding communication protocols assume that the hardware modules you are communicating with operate at 3.3V, just like the Tessel. If you have a device on your custom module that operates at 5V, 1.8V, or any other non-3.3V voltage, be careful! Directly connecting components with different operating voltages can damage the Tessel and/or your device. You can use devices which operate at different voltages by employing a technique called 'level shifting'. Sparkfun has a nice writeup on voltage dividers and level shifting that can be used as a starting point. The easiest way to avoid this complication is by trying to find module components that natively work at 3.3V.","title":"A Note on Level Shifting"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/#gpio","text":"Pros: Simple, Requires a single pin Cons: Not good for sending complex data By far the simplest form of communication is via General Purpose Input/Output (GPIO). GPIO isn't really a 'protocol'. It is a rudimentary form of communication where you manually (in code) turn a pin on and off or read its state. By default, Tessel's GPIO pins are configured to be inputs. See which pins support this protocol.","title":"GPIO"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/#input","text":"When acting as a digital input, a pin can be queried in software and will return a value indicating the current state of the pin: high (1 or true) or low (0 or false). The following code snippet is an example of querying pin 2 on port A. const tessel = require('tessel'); // Import tessel const pin = tessel.port.A.pin[2]; // Select pin 2 on port A pin.read((error, value) = { // Print the pin value to the console console.log(value); }); This is great for connecting things like switches, buttons , and even motion detectors . Just remember that the Tessel can only handle signals that are 3.3V or lower.","title":"Input"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/#determining-digital-state-a-note-for-the-curious","text":"It's pretty clear that if an input pin sees 3.3V it would be interpreted as a high state and if the pin is connected to ground it would recognize that as a low state. But what if the pin senses something in between, like 2V? Your first thought might be that a high state is anything 1.65V (halfway between 0 and 3.3) or higher, and anything lower than that would be considered the low state. However, this is not always the case. The high/low threshold is always determined by the processor. In the case of the Tessel 2, that's the SAM D21. The documentation on the SAM D21 tells us that the Tessel will consider an input to be high if it is at least 55% of the Tessel's supply voltage (VDD) which is 3.3V. It also tells us that any signal that is 30% of VDD or lower is guaranteed to be read as a low state. That means anything 1.815V (referenced as VIH) or higher would be considered high, and anything .99V (referenced as VIL) or lower is guaranteed to be interpreted as a low state. A screen capture from the electrical characteristics section of [Atmel's SAM D21 datasheet](http://www.atmel.com/Images/Atmel-42181-SAM-D21_Datasheet.pdf) What about the voltages between .99V and 1.815V? The read behavior is undefined and you are not guaranteed to get an accurate result. That's one reason why it's important to make sure that any module you connect to a Tessel input pin provides a high voltage that is between VIH and 3.3V and a low voltage between ground and VIL. More GPIO example code and information","title":"Determining digital state\u2013 a note for the curious:"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/#output","text":"When acting as a digital output, a pin can be set to one of two states: high (on/1/true) or low (off/0/false). High means the main Tessel board will set that pin to be 3.3V and low means it will set it to 0V. Digital output is useful for connected hardware that understands simple on/off states. The following code snippet shows how you can set the state of the pin 2 on port A. const tessel = require('tessel'); const pin = tessel.port.A.pin[2]; // Select pin 2 on port A pin.output(1); // Turn pin high (on) pin.read((error, value) = { // Print the pin value to the console console.log(value); pin.output(0); // Turn pin low (off) }); Some examples of using a GPIO pin as an output are simple LEDs and for turning appliances on and off with a relay .","title":"Output"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/#spi","text":"Pros: Fast, supports multiple devices on a single bus, allows two-way communication Cons: Requires at least 3 pins SPI stands for Serial Peripheral Interface . The SPI protocol allows data to be exchanged one byte at a time between the Tessel and a module via two communication lines. This is great for transferring data like sensor readings or sending commands to a module. The SPI protocol is known as a Master/Slave protocol, which means that there is always a single master device which controls the flow of communication with one or more slave devices. Think of the master as a traffic cop. It directs all of the connected slave devices so they know when it's their turn to communicate. When you are creating modules, the Tessel will always act as the master device, and your custom module will be a slave device. The SPI protocol requires a minimum of three signal connections and usually has four (this is in addition to the power connections). The following diagram shows the connections (arrows indicate flow of data).","title":"SPI"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/#sck","text":"This is the clock signal that keeps the Tessel and the module synchronized while transferring data. The two devices need to have a mutual understanding of how fast data is to be transferred between them. This is sometimes referred to as the baud or bitrate. The clock signal provides that reference signal for the devices to use when exchanging data. Without a clock signal to synchronize the devices, the devices would have no way to interpret the signal on the data lines. One bit of data is transferred with each clock cycle (see the diagram below).","title":"SCK"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/#mosi","text":"MOSI stands for M aster O ut S lave I n and is the connection used by the Tessel to send data to the module. It's on this line that the Tessel will encode its data.","title":"MOSI"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/#miso","text":"MISO stands for M aster I n S lave O ut and is the connection used by the module to send data to the Tessel.","title":"MISO"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/#ss-or-cs","text":"This line, normally referred to as the Slave Select (SS) or Chip Select (CS) line, is used by the master device to notify a specific slave device that it is about to send data. We normally call it CS, but you may see it either way in datasheets and other references. When you create a Tessel module which uses the SPI protocol, the CS connection will be handled by one of the GPIO pins on the Tessel port. The following diagram shows how the various pins in the SPI protocol are toggled to create meaningful data. In this case, the master sends the ASCII character 'S', and the slave responds with 'F'.","title":"SS or CS"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/#i2c","text":"Pros: Only requires 2 pins, multiple devices on a single bus, allows two-way communication Cons: Devices can have address conflicts, not as fast as SPI I2C stands for Inter-Integrated Circuit and is pronounced \"I squared C\", \"I two C\" or \"I-I-C\". I2C is a protocol that allows one device to exchange data with one or more connected devices through the use of a single data line and clock signal. I2C is a Master/Slave protocol, which means that there is always a single master device which controls the flow of communication with one or more slave devices. I2C only requires two communication connections:","title":"I2C"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/#scl","text":"This is the clock signal that keeps the Tessel and the module synchronized while transferring data. The two devices need to have a mutual understanding of how fast data is to be transferred between them. This is sometimes referred to as the baud or bitrate. The clock signal provides that reference signal for the devices to use when exchanging data. Without a clock signal to synchronize the devices, they would have no way to interpret the signal on the data lines.","title":"SCL"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/#sda","text":"This is the data line used for exchanging data between the master and slaves. Instead of having separate communication lines for the master and slave devices, they both share a single data connection. The master coordinates the usage of that connection so that only one device is \"talking\" at a time. Since multiple slave devices can use the same SDA line, the master needs a way to distinguish between them and talk to a single device at a time. The I2C protocol uses the concept of device addressing to coordinate traffic on the data line. Every single I2C device connected to the Tessel will have an internal address that cannot be the same as any other module connected to the Tessel. This address is usually determined by the device manufacturer and listed in the datasheet. Sometimes you can configure the address through device-specific tweaks defined by the manufacturer. The Tessel, as the master device, needs to know the address of each slave and will use it to notify a device when it wants to communicate with it before transferring data.","title":"SDA"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/#uart","text":"Pros: Widely supported, allows two-way communication Cons: Can't share communication lines, slower than SPI and I2C UART stands for Universal Asynchronous Receiver/Transmitter and is really just a fancy way of referring to a serial port. It is really easy to understand as it only requires two lines: a transmission line ( TX ) and a receiving line ( RX ). The Tessel sends data to connected modules on the TX line and gets data back on the RX line.","title":"UART"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/#tx","text":"Used by the Tessel to send data to the module.","title":"TX"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Communication_Protocols/#rx","text":"Used by the module to send data to the Tessel.","title":"RX"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Interrupts/","text":"Interrupt Pins Interrupts allow us to register events based on state changes in a pin. Pins 2, 5, 6, 7 on both Ports are available for interrupts. Take a look at the following circuit. While the switch is open, pin2 will be low. When the button is pressed we'll complete the circuit and the voltage at pin2 will rise to 3.3V. Let's turn on the green LED when the button is pressed. Here's one way of doing it. var tessel = require('tessel'); // Import tessel // Initialize our pins var green = tessel.led[2]; var pin2 = tessel.port.A.pin[2]; // Turn off the green LED green.off(); // Every 10 milliseconds check to see if the button was pressed setInterval(function() { pin2.read(function(error, value) { // button was pressed if (value === 1) { green.on(); } }); }, 10); This is pretty inefficient. We're spending a lot of time (every 10 millseconds) manually checking to see if the button was pressed. Let's just tell the processor to run some code when the voltage rises. var tessel = require('tessel'); // Import tessel // Initialize our pins var green = tessel.led[2]; var pin2 = tessel.port.A.pin[2]; // Turn off the green LED green.off(); // Register an event. When the voltage on pin2 rises, turn on the green LED. pin2.on('rise', function() { green.on(); }); We tell the processor to invoke our callback function when pin2 rises (button has been pressed). We don't have to continuously poll to see if the voltage has risen. We can just register our listener and move on. More information on interrupts.","title":"Interrupt Pins"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Interrupts/#interrupt-pins","text":"Interrupts allow us to register events based on state changes in a pin. Pins 2, 5, 6, 7 on both Ports are available for interrupts. Take a look at the following circuit. While the switch is open, pin2 will be low. When the button is pressed we'll complete the circuit and the voltage at pin2 will rise to 3.3V. Let's turn on the green LED when the button is pressed. Here's one way of doing it. var tessel = require('tessel'); // Import tessel // Initialize our pins var green = tessel.led[2]; var pin2 = tessel.port.A.pin[2]; // Turn off the green LED green.off(); // Every 10 milliseconds check to see if the button was pressed setInterval(function() { pin2.read(function(error, value) { // button was pressed if (value === 1) { green.on(); } }); }, 10); This is pretty inefficient. We're spending a lot of time (every 10 millseconds) manually checking to see if the button was pressed. Let's just tell the processor to run some code when the voltage rises. var tessel = require('tessel'); // Import tessel // Initialize our pins var green = tessel.led[2]; var pin2 = tessel.port.A.pin[2]; // Turn off the green LED green.off(); // Register an event. When the voltage on pin2 rises, turn on the green LED. pin2.on('rise', function() { green.on(); }); We tell the processor to invoke our callback function when pin2 rises (button has been pressed). We don't have to continuously poll to see if the voltage has risen. We can just register our listener and move on. More information on interrupts.","title":"Interrupt Pins"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/","text":"Creating Your Own Tessel Module What Is a Module? Modules should be devices with clear-cut functionality. That is to say, they should have a single, well-defined purpose or a set of closely related functions, rather than an eclectic mix of capabilities onboard. This requirement is designed to reduce complexity, cost, and power consumption and maximize reusability in hardware and software. \u2013Tessel hardware docs One of the main goals of the Tessel platform is \"connected hardware as easy as npm install.\" If you need an accelerometer, Bluetooth Low Energy connection, SIM card capability, or any of the other first-party or USB modules available , you can literally plug, npm install, and play. There is also a growing library of community-contributed third-party modules : npm libraries paired with some simple wiring instructions, built for specific pieces of hardware. But what if your project needs functionality that can't be provided by one of the existing first- or third-party modules? You make your own, of course. This guide will walk you through the basics of creating your own Tessel module using our new proto-module boards. A Quick Note of Encouragement Making your own module might seem like an overwhelming task best left to those who know things like Ohm's Law, how to solder, and why licking a 9V doesn't feel very good. But while having some electronics knowledge doesn't hurt, it's not a hard and fast prerequisite. If you know how to program, you are smart enough to figure out the basic concepts and make awesome things happen. Just trust us and read on. Module Design Basics Before you venture into the world of custom module creation, we need to cover some basics that will help guide you along the way. Every module created for the Tessel involves 5 parts: Power Communication Software Documentation Sharing If you understand how each of these fit into the module creation process, you will be well on your way to creating your own custom module. Let's start with power. Power When dealing with anything in electronics, whether it be sensors, displays, buttons, or servos, you have to provide power. Everything needs a power source, and Tessel modules are no exception. In its simplest form, you can think of a power source as two connections; a positive voltage and a ground connection. These connections are provided on each Tessel port. The main Tessel board can be powered several ways, but regardless of how you provide power to the main board it ultimately turns that source into 3.3V. That's the native \"voltage language\" of the Tessel. It likes to speak 3.3V to everything if possible. One of the nice things about the proto-module is that the 3.3V and ground connections are exposed as two rails that run along each side of the module as seen below. This allows you to easily power your module components. Proto-module power rails Special Considerations If all of the components on your custom module operate at 3.3V, then your power design is extremely simple. You just use the 3.3V and ground rails and connect your components accordingly (the custom screen module below is a good example). Sometimes, however, you may encounter a situation where 3.3V is not what you need, like in the case of the servo module . Many servos like to operate at 5V. That's their native \"voltage language\" and so the 3.3V provided by the Tessel isn't ideal and, in many cases, just won't work. Servos can also draw a lot of current, which may overwhelm the Tessel's power supply. To solve this problem, you'll notice that the servo module has a DC barrel jack on it that allows you to plug in a 5V adapter to provide sufficient power to the connected servos. DC Barrel Jack on the Servo Module From the servo module schematic , we can see that communication is accomplished with the normal I2C lines, which operate at 3.3V, but servo power is provided via schematic component J2, which is the barrel jack. This guide isn't meant to be a comprehensive power reference, but we just want to point out that if you have any components on your custom module that work outside of the 3.3V realm, you will need to design for it . To simplify your module design, we recommend using 3.3V components where possible. The Power Warnings Here are some items to remember when working with power in electronics. ALWAYS unplug your Tessel and any external power before making or altering connections. Don't mix voltages unless you know what you're doing. For example, if you put 5V on any of the module pins, you can ruin your Tessel. Never connect the positive voltage directly to ground. This is called a short circuit and can ruin components and your day. Always exercise caution and verify that you have hooked everything up correctly before plugging in your Tessel. Communication Once you have decided how you are going to power your custom module, it's time to decide how the main Tessel board will talk to it. In the world of web communication, there are standards like HTTP, HTTPS, and FTP that allow different systems to talk to each other in well-defined ways. The same concept exists in the hardware world and the Tessel supports four standard communication protocols for talking to modules. GPIO SPI I2C UART Because the Tessel does most of the heavy lifting for all of these, you don't need to be an expert to use them in your custom module. However, if you'd like to learn a little more, we've provided a simple overview of each . So Which Communication Protocol Should I Use? Knowing that there are four communication options available to you, which should you use for your custom module? The good news is that this will usually be decided for you based on the type of module you are creating. For example, most PIR sensor modules will set a pin high when motion is detected, which can be read with a simple digital input (GPIO). The same applies to sensors. For example, the Si7020 temperature and humidity sensor on the Climate Module communicates via the I2C protocol . Usually sensors will only support one protocol\u2013 so the decision is easy, you use that one. You will find some modules that support both SPI and I2C, and either will work just fine with the Tessel. As a general rule of thumb, we recommend you favor the SPI protocol in these scenarios as it eliminates the risk of I2C address collisions with other connected I2C modules. Software Once you have the power and communication all worked out and connected, it's time to start writing JavaScript to talk to your module. This is where the open-source nature of the Tessel really comes in handy. We've already used all of the possible communication protocols in our modules and the code is free to look at and copy. Design an API for working with your module so that it's easy for others to integrate into their projects. As a general rule, top priority is intuitive interaction. Second priority is exposing as many features as you can. You can find a lot of great information about organizing your project and writing an API in Making a Tessel-style Library for Third-Party Hardware . Documentation and Sharing Once you have a working module, it's time to share the good news with everyone so other people can build amazing things with your work. We recommend doing a few things to share it with the community as outlined below. This helps create a consistent feel across all Tessel modules, whether they are official modules or submitted by the community. Create A Git Repo Having your code in a git repo and available online makes it easy for others to grab your code and start using it in their projects. To help you get started we've created a template repository that you can use as a starting point. Custom Module Git Repo Template Document It You may have just created the world's most amazing Tessel module, but how is anybody going to know about it or use it? Once you've hashed out the API and everything is working, it's important to document its use so others can easily apply your work to their projects. The best way to do this is to use the README template , which includes things like how to install the module, example usage, and API information. Publish Your Code on NPM Once your git repo is ready and you've documented your module, this step is really easy and makes your module fit the Tessel motto of \"connected hardware as easy as npm install.\" If you've never published code to NPM before, you can get started with just four lines of code (run in a shell window). npm set init.author.name \"Your Name\" npm set init.author.email \"you@example.com\" npm set init.author.url \"http://yourblog.com\" npm adduser This sets up your NPM author info. Now you're ready to create your package.json file. There is one in the repo template but we suggest creating it by running npm init from within the project directory. npm init Edit your package.json file to include a name, version, and description. We also highly recommend adding \"tessel\" as a keyword so that other Tessel users can easily find your work. Most of the package.json file is self-explanatory and follows the npm package.json standard with the exception of the hardware member. **hardware** section of package.json This is a Tessel-specific item that you must add manually and is a list of files and folders in your project that you would like to exclude when code is pushed to your Tessel. Once your package.json file is complete you're ready to publish your code. Run the following command from the top level directory of your project. npm publish ./ Create a Project Page The Tessel Projects page is a way to share your module directly with the Tessel community. You simply provide a few pieces of information, a picture, and can even use your README.md file from your Git repo as the contents. Submit Your Module We're always looking to add modules to our third-party module list so if you'd like your custom module to be listed at tessel.io/modules then fill out this form and we'd be happy to review it. Third-Party Module Submission Form A great example of using this module-creation pattern can be found in Making a Tessel-style Library for Third-Party Hardware . Your First Custom Module So now that we've described the pattern for making a custom module, let's walk through creating a very simple module using that pattern. The Tessel has a spare button on the main board, but maybe you'd like to add one as a module. Kelsey did a great writeup on adding a button to the GPIO bank so let's use her work to take it one step further using a proto-module. Power You might not think of a button as needing power, and you're right, sort of. While the button itself doesn't need power to function, we can connect our button in such a way that it uses the power connections to create high and low states on a GPIO pin. GPIO pins on the Tessel will always read high/truthy with nothing connected, because internally (inside the main Tessel chip), they are pulled up to the 3.3V supply. That's our positive connection. The other power connection is ground, which we'll connect to one side of our button. It doesn't matter which side, because a button is just a momentary switch that creates and breaks a connection. You can't hook it up backward. We'll get to connecting the other side of the button in a minute. Communication As mentioned above, normally your communication protocol is determined by your module. In the case of a button, we use a digital GPIO pin because we want to read the state of the button. Each port on the Tessel has several digital I/O pins that can serve this purpose , and you are free to pick any one you like because it doesn't matter. We're going to choose port A's pin 1, which is what we will hook up to the other side of the button. When the button is not pressed, our input pin will read high, or true. When we press it, we are making a connection between our GPIO pin and ground, which will cause a low state to be present on the input pin. This is what the design looks like. Schematic of button connections Soldered together on a proto-module board. Don't let the soldering part scare you. Soldering components like this onto a proto-module is a little harder than learning to use a hot glue gun, but not a lot harder. This tutorial from Sparkfun is a great place to start learning soldering. Let's go ahead and plug our module into Port A. Remember to never make connections while your Tessel is powered up. Always unplug it first. Software With everything hooked up, it's time to write some Javascript. Actually, we're going to reuse the code from Kelsey and modify it just a bit. Since she followed the style guidelines and shared her work on NPM, we actually don't have to write the bulk of the code. She's even provided a Quick Start guide in her documentation, so we'll use that. Install the tessel-gpio-button package. This will allow us to reuse Kelsey's work. npm install tessel-gpio-button Create a file named myButton.js and copy her Quick Start code into it. It should look like this: // examples/button.js // Count button presses var tessel = require('tessel'); var buttonLib = require('../'); var myButton = buttonLib.use(tessel.port['GPIO'].pin['G3']); var i = 0; myButton.on('ready', function () { myButton.on('press', function () { i++; console.log('Press', i); }); myButton.on('release', function () { i++; console.log('Release', i); }); }); This almost works right out of the box. We just need to make two small adjustments. Do you see them? First, to include her module we won't use \"require('../').\" Instead we'll include the module directly with require('tessel-gpio-button'). Second, she hooked her button up to the G3 pin on the Tessel 1's GPIO bank, but we've hooked our proto-module up to Port A on Tessel 2 and used pin 1. So all we have to change is the line where myButton is defined. We'll change it to be: var myButton = buttonLib.use(tessel.port['A'].pin[1]); Save your changes and test it out. tessel run myButton.js Every time you push your button it should log to the console. Congratulations! You just created your first custom module for the Tessel. Documentation and Sharing We sort of cheated for our first module; Kelsey had already created an NPM package that we could reuse, so there wasn't really anything to document or share on the software side. There is nothing wrong with that. In fact, the less code you have to write, the better. This is a great example of how taking the time to document and share your work benefits the entire community. What we can do though is create a project page showing how we took Kelsey's button to the next level in the form of a plug-in module. We created the physical module. It's a simple module, but we should document it in case someone else wants a button module like ours. Custom Button Module Project Page Custom Screen Module Now that you have a simple module under your belt, it's time to level up. To date, the module that people have requested the most is a screen module. Displays are tricky because they come in so many flavors. There are simple 7-segment displays, LCD displays, OLEDs, resistive touchscreens, capacitive touchscreens, and more. This is a great use case for a custom module. One of the popular screen modules in embedded projects is the Nokia 5110, because of its simple interface and low cost. Let's see how we'd create a module for it by following the same pattern as before. For this example we'll use the Nokia 5110 breakout from Sparkfun , but you could also use the Adafruit version of the screen or just try to snag one on Ebay Nokia 5110 Graphic LCD Power The 5110 has a listed power supply range of 2.7V to 3.3V, which means any voltage in between (inclusive) is sufficient to power the screen. Since the Tessel ports have a 3.3V supply pin we don't have to do anything special to hook it up. All we need to do is connect the screen VCC, or positive pin, to a 3.3V rail on the proto-module and the GND on the screen to a GND rail. Because of the screen's size, we'll use one of the double-wide proto-modules this time, even though we'll only use a single port to connect everything. Double-Wide Proto-Module Communication Just like in the button example, the communication protocol for the screen has already been chosen for us. The Nokia 5110 uses a slightly modified version of SPI to communicate with a parent controller, namely the Tessel in our case. In addition to the normal SPI protocol, the 5110 has an extra pin involved ( D/C ) that tells the screen whether the data we are sending via SPI is a special command or actual screen data. The D/C pin is controlled by a simple high or low signal, which is a perfect job for one of the GPIO pins. The following table shows all of the communication connections available on our screen and how we'll attach them to the Tessel port. Nokia 5110 Pin Proto-Module Connetion SCE G1 RST Connected to 3.3V through 10K resistor D/C G2 MOSI MOSI SCLK SCK LED Connected to G3 through 330 ohm resistor Design Note The Nokia 5110 has 4 connections that can utilize GPIO pins for functionality. The D/C (data/command) and SCE (chip select) pins have to be used to get data to the screen. That leaves just one GPIO pin on the port with RST and LED left unconnected. You have a few options here. Wire RST to 3.3V through a 10K resistor which prevents you from resetting the screen in code. This allows you to control the backlight with the free GPIO pin. Wire LED to 3.3V through a 330 ohm resistor (to limit current) which will permanently turn on the backlight. This leaves a GPIO free that can be used to reset the screen via Javascript. Since we're using the double-wide, you could use a GPIO pin from the adjacent port and have use of both LED and RST Connect SCE (chip select) to ground, which frees up a GPIO so you can control both LED and RST. Holding the chip select low, however, makes it so that no other SPI device (including other Tessel modules that use SPI e.g., the Camera module) can be connected to the Tessel on any other port. We decided to go with option 1 because there isn't really a need to reset the screen in most cases and it allows control of the backlight with a GPIO pin. This is another great thing about custom modules. You can design it however you want to fit your project needs. We hooked everything up using the Graphic LCD Hookup Guide . We recommend testing everything with a breadboard before you solder everything in place, just to make sure it works the way you expect it to. Here is what the module looks like soldered to the double-wide proto-module. Nokia 5110 soldered to a large proto-module board Software With the screen hooked up, it's time to start writing code. We'll follow the pattern found in the Git Repo Template and start by creating a directory called tessel-nokia5110 and cd into that directory. Next, we'll use t2 init to create index.js which is where we'll write our API using the example index.js template as a guide. Because this screen is so popular, there are lots of code examples and libraries online for interacting with it. We don't need to reinvent the wheel; we just want to control the screen with JavaScript. We took a simple Arduino library for this screen and ported it to JavaScript . Our API is very simple and exposes just one event and a few methods. Event Nokia5110. on ('ready', callback(error, screen)) - Emitted when the screen object is first initialized Methods Nokia5110. gotoXY (x,y,[callback(error)]) - Sets the active cursor location to (x,y) Nokia5110. character (char, [callback(error)]) - Writes a single character to the display Nokia5110. string (data, [callback(error)]) - Writes a string to the display Nokia5110. bitmap (bitmapData, [callback(error)]) - Draws a monochrome bitmap from bitmapData Nokia5110. clear ([callback(error)]) - Clears the display Nokia5110. setBacklight (state) - Turns the backlight on if state is truthy, off otherwise Documentation Now that the module is connected up and the software is working, it's time to document its use. We can't stress enough how important this is, and it really only takes a few minutes once you've defined everything. Just think of all the times you've needed a piece of code and found a beautifully documented example that had you up and running in minutes. Share that love with others when you create your own modules, no matter how trivial you think they are. In our case, we'll take the template README.md file and add some notes for getting started as well as document our API . We'll also create an examples folder to show how the module can be used. Sharing Now it's time to share our new creation with the world by: Creating a git repo and pushing the code online Publishing the module to NPM Creating a project page for it Submitting it to the third-party module list Finished screen module Resource List To help you get started creating your own custom modules, here is a list of the resources we used to put this tutorial together. Power Powering Your Tessel Level Shifting Communication Tessel Module Communication Protocols Software Making a Tessel-style Library for Third-Party Hardware Tessel Hardware API All first-party module code on Github Documentation Git Repo Template README.md Template Sharing Publishing to NPM Tutorial package.json Standard Tessel Project Page Third-Party Module Submission Form","title":"Creating Your Own Tessel Module"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#creating-your-own-tessel-module","text":"","title":"Creating Your Own Tessel Module"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#what-is-a-module","text":"Modules should be devices with clear-cut functionality. That is to say, they should have a single, well-defined purpose or a set of closely related functions, rather than an eclectic mix of capabilities onboard. This requirement is designed to reduce complexity, cost, and power consumption and maximize reusability in hardware and software. \u2013Tessel hardware docs One of the main goals of the Tessel platform is \"connected hardware as easy as npm install.\" If you need an accelerometer, Bluetooth Low Energy connection, SIM card capability, or any of the other first-party or USB modules available , you can literally plug, npm install, and play. There is also a growing library of community-contributed third-party modules : npm libraries paired with some simple wiring instructions, built for specific pieces of hardware. But what if your project needs functionality that can't be provided by one of the existing first- or third-party modules? You make your own, of course. This guide will walk you through the basics of creating your own Tessel module using our new proto-module boards.","title":"What Is a Module?"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#a-quick-note-of-encouragement","text":"Making your own module might seem like an overwhelming task best left to those who know things like Ohm's Law, how to solder, and why licking a 9V doesn't feel very good. But while having some electronics knowledge doesn't hurt, it's not a hard and fast prerequisite. If you know how to program, you are smart enough to figure out the basic concepts and make awesome things happen. Just trust us and read on.","title":"A Quick Note of Encouragement"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#module-design-basics","text":"Before you venture into the world of custom module creation, we need to cover some basics that will help guide you along the way. Every module created for the Tessel involves 5 parts: Power Communication Software Documentation Sharing If you understand how each of these fit into the module creation process, you will be well on your way to creating your own custom module. Let's start with power.","title":"Module Design Basics"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#power","text":"When dealing with anything in electronics, whether it be sensors, displays, buttons, or servos, you have to provide power. Everything needs a power source, and Tessel modules are no exception. In its simplest form, you can think of a power source as two connections; a positive voltage and a ground connection. These connections are provided on each Tessel port. The main Tessel board can be powered several ways, but regardless of how you provide power to the main board it ultimately turns that source into 3.3V. That's the native \"voltage language\" of the Tessel. It likes to speak 3.3V to everything if possible. One of the nice things about the proto-module is that the 3.3V and ground connections are exposed as two rails that run along each side of the module as seen below. This allows you to easily power your module components.","title":"Power"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#special-considerations","text":"If all of the components on your custom module operate at 3.3V, then your power design is extremely simple. You just use the 3.3V and ground rails and connect your components accordingly (the custom screen module below is a good example). Sometimes, however, you may encounter a situation where 3.3V is not what you need, like in the case of the servo module . Many servos like to operate at 5V. That's their native \"voltage language\" and so the 3.3V provided by the Tessel isn't ideal and, in many cases, just won't work. Servos can also draw a lot of current, which may overwhelm the Tessel's power supply. To solve this problem, you'll notice that the servo module has a DC barrel jack on it that allows you to plug in a 5V adapter to provide sufficient power to the connected servos.","title":"Special Considerations"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#the-power-warnings","text":"Here are some items to remember when working with power in electronics. ALWAYS unplug your Tessel and any external power before making or altering connections. Don't mix voltages unless you know what you're doing. For example, if you put 5V on any of the module pins, you can ruin your Tessel. Never connect the positive voltage directly to ground. This is called a short circuit and can ruin components and your day. Always exercise caution and verify that you have hooked everything up correctly before plugging in your Tessel.","title":"The Power Warnings"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#communication","text":"Once you have decided how you are going to power your custom module, it's time to decide how the main Tessel board will talk to it. In the world of web communication, there are standards like HTTP, HTTPS, and FTP that allow different systems to talk to each other in well-defined ways. The same concept exists in the hardware world and the Tessel supports four standard communication protocols for talking to modules. GPIO SPI I2C UART Because the Tessel does most of the heavy lifting for all of these, you don't need to be an expert to use them in your custom module. However, if you'd like to learn a little more, we've provided a simple overview of each .","title":"Communication"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#so-which-communication-protocol-should-i-use","text":"Knowing that there are four communication options available to you, which should you use for your custom module? The good news is that this will usually be decided for you based on the type of module you are creating. For example, most PIR sensor modules will set a pin high when motion is detected, which can be read with a simple digital input (GPIO). The same applies to sensors. For example, the Si7020 temperature and humidity sensor on the Climate Module communicates via the I2C protocol . Usually sensors will only support one protocol\u2013 so the decision is easy, you use that one. You will find some modules that support both SPI and I2C, and either will work just fine with the Tessel. As a general rule of thumb, we recommend you favor the SPI protocol in these scenarios as it eliminates the risk of I2C address collisions with other connected I2C modules.","title":"So Which Communication Protocol Should I Use?"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#software","text":"Once you have the power and communication all worked out and connected, it's time to start writing JavaScript to talk to your module. This is where the open-source nature of the Tessel really comes in handy. We've already used all of the possible communication protocols in our modules and the code is free to look at and copy. Design an API for working with your module so that it's easy for others to integrate into their projects. As a general rule, top priority is intuitive interaction. Second priority is exposing as many features as you can. You can find a lot of great information about organizing your project and writing an API in Making a Tessel-style Library for Third-Party Hardware .","title":"Software"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#documentation-and-sharing","text":"Once you have a working module, it's time to share the good news with everyone so other people can build amazing things with your work. We recommend doing a few things to share it with the community as outlined below. This helps create a consistent feel across all Tessel modules, whether they are official modules or submitted by the community.","title":"Documentation and Sharing"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#create-a-git-repo","text":"Having your code in a git repo and available online makes it easy for others to grab your code and start using it in their projects. To help you get started we've created a template repository that you can use as a starting point. Custom Module Git Repo Template","title":"Create A Git Repo"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#document-it","text":"You may have just created the world's most amazing Tessel module, but how is anybody going to know about it or use it? Once you've hashed out the API and everything is working, it's important to document its use so others can easily apply your work to their projects. The best way to do this is to use the README template , which includes things like how to install the module, example usage, and API information.","title":"Document It"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#publish-your-code-on-npm","text":"Once your git repo is ready and you've documented your module, this step is really easy and makes your module fit the Tessel motto of \"connected hardware as easy as npm install.\" If you've never published code to NPM before, you can get started with just four lines of code (run in a shell window). npm set init.author.name \"Your Name\" npm set init.author.email \"you@example.com\" npm set init.author.url \"http://yourblog.com\" npm adduser This sets up your NPM author info. Now you're ready to create your package.json file. There is one in the repo template but we suggest creating it by running npm init from within the project directory. npm init Edit your package.json file to include a name, version, and description. We also highly recommend adding \"tessel\" as a keyword so that other Tessel users can easily find your work. Most of the package.json file is self-explanatory and follows the npm package.json standard with the exception of the hardware member.","title":"Publish Your Code on NPM"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#create-a-project-page","text":"The Tessel Projects page is a way to share your module directly with the Tessel community. You simply provide a few pieces of information, a picture, and can even use your README.md file from your Git repo as the contents.","title":"Create a Project Page"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#submit-your-module","text":"We're always looking to add modules to our third-party module list so if you'd like your custom module to be listed at tessel.io/modules then fill out this form and we'd be happy to review it. Third-Party Module Submission Form A great example of using this module-creation pattern can be found in Making a Tessel-style Library for Third-Party Hardware .","title":"Submit Your Module"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#your-first-custom-module","text":"So now that we've described the pattern for making a custom module, let's walk through creating a very simple module using that pattern. The Tessel has a spare button on the main board, but maybe you'd like to add one as a module. Kelsey did a great writeup on adding a button to the GPIO bank so let's use her work to take it one step further using a proto-module.","title":"Your First Custom Module"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#power_1","text":"You might not think of a button as needing power, and you're right, sort of. While the button itself doesn't need power to function, we can connect our button in such a way that it uses the power connections to create high and low states on a GPIO pin. GPIO pins on the Tessel will always read high/truthy with nothing connected, because internally (inside the main Tessel chip), they are pulled up to the 3.3V supply. That's our positive connection. The other power connection is ground, which we'll connect to one side of our button. It doesn't matter which side, because a button is just a momentary switch that creates and breaks a connection. You can't hook it up backward. We'll get to connecting the other side of the button in a minute.","title":"Power"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#communication_1","text":"As mentioned above, normally your communication protocol is determined by your module. In the case of a button, we use a digital GPIO pin because we want to read the state of the button. Each port on the Tessel has several digital I/O pins that can serve this purpose , and you are free to pick any one you like because it doesn't matter. We're going to choose port A's pin 1, which is what we will hook up to the other side of the button. When the button is not pressed, our input pin will read high, or true. When we press it, we are making a connection between our GPIO pin and ground, which will cause a low state to be present on the input pin. This is what the design looks like.","title":"Communication"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#software_1","text":"With everything hooked up, it's time to write some Javascript. Actually, we're going to reuse the code from Kelsey and modify it just a bit. Since she followed the style guidelines and shared her work on NPM, we actually don't have to write the bulk of the code. She's even provided a Quick Start guide in her documentation, so we'll use that. Install the tessel-gpio-button package. This will allow us to reuse Kelsey's work. npm install tessel-gpio-button Create a file named myButton.js and copy her Quick Start code into it. It should look like this: // examples/button.js // Count button presses var tessel = require('tessel'); var buttonLib = require('../'); var myButton = buttonLib.use(tessel.port['GPIO'].pin['G3']); var i = 0; myButton.on('ready', function () { myButton.on('press', function () { i++; console.log('Press', i); }); myButton.on('release', function () { i++; console.log('Release', i); }); }); This almost works right out of the box. We just need to make two small adjustments. Do you see them? First, to include her module we won't use \"require('../').\" Instead we'll include the module directly with require('tessel-gpio-button'). Second, she hooked her button up to the G3 pin on the Tessel 1's GPIO bank, but we've hooked our proto-module up to Port A on Tessel 2 and used pin 1. So all we have to change is the line where myButton is defined. We'll change it to be: var myButton = buttonLib.use(tessel.port['A'].pin[1]); Save your changes and test it out. tessel run myButton.js Every time you push your button it should log to the console. Congratulations! You just created your first custom module for the Tessel.","title":"Software"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#documentation-and-sharing_1","text":"We sort of cheated for our first module; Kelsey had already created an NPM package that we could reuse, so there wasn't really anything to document or share on the software side. There is nothing wrong with that. In fact, the less code you have to write, the better. This is a great example of how taking the time to document and share your work benefits the entire community. What we can do though is create a project page showing how we took Kelsey's button to the next level in the form of a plug-in module. We created the physical module. It's a simple module, but we should document it in case someone else wants a button module like ours. Custom Button Module Project Page","title":"Documentation and Sharing"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#custom-screen-module","text":"Now that you have a simple module under your belt, it's time to level up. To date, the module that people have requested the most is a screen module. Displays are tricky because they come in so many flavors. There are simple 7-segment displays, LCD displays, OLEDs, resistive touchscreens, capacitive touchscreens, and more. This is a great use case for a custom module. One of the popular screen modules in embedded projects is the Nokia 5110, because of its simple interface and low cost. Let's see how we'd create a module for it by following the same pattern as before. For this example we'll use the Nokia 5110 breakout from Sparkfun , but you could also use the Adafruit version of the screen or just try to snag one on Ebay","title":"Custom Screen Module"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#power_2","text":"The 5110 has a listed power supply range of 2.7V to 3.3V, which means any voltage in between (inclusive) is sufficient to power the screen. Since the Tessel ports have a 3.3V supply pin we don't have to do anything special to hook it up. All we need to do is connect the screen VCC, or positive pin, to a 3.3V rail on the proto-module and the GND on the screen to a GND rail. Because of the screen's size, we'll use one of the double-wide proto-modules this time, even though we'll only use a single port to connect everything.","title":"Power"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#communication_2","text":"Just like in the button example, the communication protocol for the screen has already been chosen for us. The Nokia 5110 uses a slightly modified version of SPI to communicate with a parent controller, namely the Tessel in our case. In addition to the normal SPI protocol, the 5110 has an extra pin involved ( D/C ) that tells the screen whether the data we are sending via SPI is a special command or actual screen data. The D/C pin is controlled by a simple high or low signal, which is a perfect job for one of the GPIO pins. The following table shows all of the communication connections available on our screen and how we'll attach them to the Tessel port. Nokia 5110 Pin Proto-Module Connetion SCE G1 RST Connected to 3.3V through 10K resistor D/C G2 MOSI MOSI SCLK SCK LED Connected to G3 through 330 ohm resistor","title":"Communication"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#design-note","text":"The Nokia 5110 has 4 connections that can utilize GPIO pins for functionality. The D/C (data/command) and SCE (chip select) pins have to be used to get data to the screen. That leaves just one GPIO pin on the port with RST and LED left unconnected. You have a few options here. Wire RST to 3.3V through a 10K resistor which prevents you from resetting the screen in code. This allows you to control the backlight with the free GPIO pin. Wire LED to 3.3V through a 330 ohm resistor (to limit current) which will permanently turn on the backlight. This leaves a GPIO free that can be used to reset the screen via Javascript. Since we're using the double-wide, you could use a GPIO pin from the adjacent port and have use of both LED and RST Connect SCE (chip select) to ground, which frees up a GPIO so you can control both LED and RST. Holding the chip select low, however, makes it so that no other SPI device (including other Tessel modules that use SPI e.g., the Camera module) can be connected to the Tessel on any other port. We decided to go with option 1 because there isn't really a need to reset the screen in most cases and it allows control of the backlight with a GPIO pin. This is another great thing about custom modules. You can design it however you want to fit your project needs. We hooked everything up using the Graphic LCD Hookup Guide . We recommend testing everything with a breadboard before you solder everything in place, just to make sure it works the way you expect it to. Here is what the module looks like soldered to the double-wide proto-module.","title":"Design Note"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#software_2","text":"With the screen hooked up, it's time to start writing code. We'll follow the pattern found in the Git Repo Template and start by creating a directory called tessel-nokia5110 and cd into that directory. Next, we'll use t2 init to create index.js which is where we'll write our API using the example index.js template as a guide. Because this screen is so popular, there are lots of code examples and libraries online for interacting with it. We don't need to reinvent the wheel; we just want to control the screen with JavaScript. We took a simple Arduino library for this screen and ported it to JavaScript . Our API is very simple and exposes just one event and a few methods.","title":"Software"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#event","text":"Nokia5110. on ('ready', callback(error, screen)) - Emitted when the screen object is first initialized","title":"Event"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#methods","text":"Nokia5110. gotoXY (x,y,[callback(error)]) - Sets the active cursor location to (x,y) Nokia5110. character (char, [callback(error)]) - Writes a single character to the display Nokia5110. string (data, [callback(error)]) - Writes a string to the display Nokia5110. bitmap (bitmapData, [callback(error)]) - Draws a monochrome bitmap from bitmapData Nokia5110. clear ([callback(error)]) - Clears the display Nokia5110. setBacklight (state) - Turns the backlight on if state is truthy, off otherwise","title":"Methods"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#documentation","text":"Now that the module is connected up and the software is working, it's time to document its use. We can't stress enough how important this is, and it really only takes a few minutes once you've defined everything. Just think of all the times you've needed a piece of code and found a beautifully documented example that had you up and running in minutes. Share that love with others when you create your own modules, no matter how trivial you think they are. In our case, we'll take the template README.md file and add some notes for getting started as well as document our API . We'll also create an examples folder to show how the module can be used.","title":"Documentation"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#sharing","text":"Now it's time to share our new creation with the world by: Creating a git repo and pushing the code online Publishing the module to NPM Creating a project page for it Submitting it to the third-party module list","title":"Sharing"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#resource-list","text":"To help you get started creating your own custom modules, here is a list of the resources we used to put this tutorial together.","title":"Resource List"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#power_3","text":"Powering Your Tessel Level Shifting","title":"Power"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#communication_3","text":"Tessel Module Communication Protocols","title":"Communication"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#software_3","text":"Making a Tessel-style Library for Third-Party Hardware Tessel Hardware API All first-party module code on Github","title":"Software"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#documentation_1","text":"Git Repo Template README.md Template","title":"Documentation"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Making_Your_Own_Module/#sharing_1","text":"Publishing to NPM Tutorial package.json Standard Tessel Project Page Third-Party Module Submission Form","title":"Sharing"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Pulse_Width_Modulation/","text":"Pulse-width Modulation (PWM) PWM pins are pulse-width modulated pins. Essentially, PWM is a digital signal that spends between 0% and 100% of its time pulled high/on (this is its \"duty cycle\"). You can set the PWM pins to any value between 0 (0%) and 1 (100%) to approximate an analog signal. PWM is often used to control servo speeds or LED brightness. In the following example, the Tessel will change the color of an RGB LED by changing the duty cycle sent to each color pin over a set interval of time. By changing the brightness of each internal LED (red, green, blue) per cycle, the combined color of the RGB component is changed. var tessel = require('tessel'); // Import tessel var portA = tessel.port.A; // Select port A var portB = tessel.port.B; // Select port B var redPin = portA.pwm[0]; // Select the first PWM pin on port A, equivalent to portA.pin[5] var greenPin = portA.pwm[1]; var bluePin = portB.pwm[0]; // The starting values of each color out of 255 var red = 0; var green = 0; var blue = 0; // Use this to increment the color value without exceeding 255 function stepColor (value, step) { value += step; // Add the step count to the existing value // If the value exceeds 255, then reset it to 0 if (value 255) { value = 0; } return value; } // Set the signal frequency to 1000 Hz, or 1000 cycles per second // This the rate at which Tessel will send the PWM signals // This is program specific tessel.pwmFrequency(1000); // Create a loop to run a function at a set interval of time setinterval(function() { // Increment each color at a unique step red = stepColor(red, 10); bluE = stepColor(blue, 5); green = stepColor(green, 20); // Set how often each pin is turned on out of 100% // Divide the value by 255 to get a value between 0 and 1 redPin.pwmDutyCycle(red / 255); greenPin.pwmDutyCycle(blue / 255); bluePin.pwmDutyCycle(green / 255); }, 500); // Set this function to be called every 500 milliseconds, or every half a second Note: the pwmFrequency function must be called before pwmDutyCycle . Re-setting pwmFrequency will disable PWM output until pwmDutyCycle is called again. More information on pulse-width modulation.","title":"Pulse-width Modulation (PWM)"},{"location":"tutorials/Tessel/T2Docs/Tutorials/Pulse_Width_Modulation/#pulse-width-modulation-pwm","text":"PWM pins are pulse-width modulated pins. Essentially, PWM is a digital signal that spends between 0% and 100% of its time pulled high/on (this is its \"duty cycle\"). You can set the PWM pins to any value between 0 (0%) and 1 (100%) to approximate an analog signal. PWM is often used to control servo speeds or LED brightness. In the following example, the Tessel will change the color of an RGB LED by changing the duty cycle sent to each color pin over a set interval of time. By changing the brightness of each internal LED (red, green, blue) per cycle, the combined color of the RGB component is changed. var tessel = require('tessel'); // Import tessel var portA = tessel.port.A; // Select port A var portB = tessel.port.B; // Select port B var redPin = portA.pwm[0]; // Select the first PWM pin on port A, equivalent to portA.pin[5] var greenPin = portA.pwm[1]; var bluePin = portB.pwm[0]; // The starting values of each color out of 255 var red = 0; var green = 0; var blue = 0; // Use this to increment the color value without exceeding 255 function stepColor (value, step) { value += step; // Add the step count to the existing value // If the value exceeds 255, then reset it to 0 if (value 255) { value = 0; } return value; } // Set the signal frequency to 1000 Hz, or 1000 cycles per second // This the rate at which Tessel will send the PWM signals // This is program specific tessel.pwmFrequency(1000); // Create a loop to run a function at a set interval of time setinterval(function() { // Increment each color at a unique step red = stepColor(red, 10); bluE = stepColor(blue, 5); green = stepColor(green, 20); // Set how often each pin is turned on out of 100% // Divide the value by 255 to get a value between 0 and 1 redPin.pwmDutyCycle(red / 255); greenPin.pwmDutyCycle(blue / 255); bluePin.pwmDutyCycle(green / 255); }, 500); // Set this function to be called every 500 milliseconds, or every half a second Note: the pwmFrequency function must be called before pwmDutyCycle . Re-setting pwmFrequency will disable PWM output until pwmDutyCycle is called again. More information on pulse-width modulation.","title":"Pulse-width Modulation (PWM)"},{"location":"tutorials/Tessel/T2Docs/Tutorials/pinpull/","text":"Pull- Pins Suppose a pin is configured as an input. If nothing is connected to the pin and the program tries to read the state of the pin, it would be in a 'floating' state i.e an unknown state. To prevent this, a pull-up or a pull-down state is defined. They are often used in the case of Buttons and Switches. Pins 2-7 on both the Ports are available for pull-up and pull-down. Take a look at the following circuit. The code example given below turns on the Blue LED of the Tessel module when the pushbutton is pressed and turns off the Blue LED when the pushbutton is released. var tessel= require('tessel'); // Import Tessel var pin = tessel.port.A.pin[2]; // Select pin 2 on port A var pullType = pullup ; // Set the mode of `pin.pull` to pullup var led = tessel.led[3]; // Blue LED of Tessel pin.pull(pullType,(error, buffer) = { // Pin 2 pulled high if (error){ throw error; } setInterval(() = { pin.read(function(error, valReturned){ // valReturned is the digital value that is returned from the pin if (error) { throw error; } // Pin 2 reads high when the pushbutton is not pressed since it is pulled up console.log(valReturned); if (valReturned == 1){ led.off(); } // Pin 2 reads low when the pushbutton is pressed since its connection with ground is completed else{ led.on(); } }); }, 500); }); More information on Pull-up pins and resistors (Sparkfun Tutorials)","title":"Pull- Pins"},{"location":"tutorials/Tessel/T2Docs/Tutorials/pinpull/#pull-pins","text":"Suppose a pin is configured as an input. If nothing is connected to the pin and the program tries to read the state of the pin, it would be in a 'floating' state i.e an unknown state. To prevent this, a pull-up or a pull-down state is defined. They are often used in the case of Buttons and Switches. Pins 2-7 on both the Ports are available for pull-up and pull-down. Take a look at the following circuit. The code example given below turns on the Blue LED of the Tessel module when the pushbutton is pressed and turns off the Blue LED when the pushbutton is released. var tessel= require('tessel'); // Import Tessel var pin = tessel.port.A.pin[2]; // Select pin 2 on port A var pullType = pullup ; // Set the mode of `pin.pull` to pullup var led = tessel.led[3]; // Blue LED of Tessel pin.pull(pullType,(error, buffer) = { // Pin 2 pulled high if (error){ throw error; } setInterval(() = { pin.read(function(error, valReturned){ // valReturned is the digital value that is returned from the pin if (error) { throw error; } // Pin 2 reads high when the pushbutton is not pressed since it is pulled up console.log(valReturned); if (valReturned == 1){ led.off(); } // Pin 2 reads low when the pushbutton is pressed since its connection with ground is completed else{ led.on(); } }); }, 500); }); More information on Pull-up pins and resistors (Sparkfun Tutorials)","title":"Pull- Pins"},{"location":"tutorials/blink/blink/","text":"Arduino Blink Why is important to blink a LED? It shows how digital IO works. void setup() { pinMode(13, OUTPUT); } void loop() { digitalWrite(13, HIGH); delay(1000); digitalWrite(13, LOW); delay(1000); } In the above example, we set the LED pin to be a OUTPUT - This tells the microcontroller that whatever is connected to the pin is expecting something from the controller. A INPUT would tell the microcontroll to expect to see something (data) on that pin. Inside the loop we tell PIN 13 to go HIGH, delay for 1000 microseconds (about 1 second.) and go LOW, delay again, and repeat. In this case a HIGH will turn the LED on and a LOW will turn it off. The delay will STOP the microcontroller from doing anything else. The the controller is delayed it can not do anything else (mostly), no other sensors can be used, or outputs have information written to them. Is there a better way? Blink without delay The delay() function is blocking, so what if we need to do something else and still blink a led. We can use a method like below, this allows the sketch to continue to run and still processes the blink code, about once a second. // Variables will change: int ledState = LOW; // ledState used to set the LED // Generally, you should use unsigned long for variables that hold time // The value will quickly become too large for an int to store unsigned long previousMillis = 0; // will store last time LED was updated // constants won't change: const long interval = 1000; // interval at which to blink (milliseconds) void setup() { // set the digital pin as output: pinMode(13, OUTPUT); } void loop() { // here is where you'd put code that needs to be running all the time. // check to see if it's time to blink the LED; that is, if the difference // between the current time and last time you blinked the LED is bigger than // the interval at which you want to blink the LED. unsigned long currentMillis = millis(); if (currentMillis - previousMillis = interval) { // save the last time you blinked the LED previousMillis = currentMillis; // if the LED is off turn it on and vice-versa: if (ledState == LOW) { ledState = HIGH; } else { ledState = LOW; } // set the LED with the ledState of the variable: digitalWrite(13, ledState); } }","title":"Blink"},{"location":"tutorials/blink/blink/#arduino-blink","text":"Why is important to blink a LED? It shows how digital IO works. void setup() { pinMode(13, OUTPUT); } void loop() { digitalWrite(13, HIGH); delay(1000); digitalWrite(13, LOW); delay(1000); } In the above example, we set the LED pin to be a OUTPUT - This tells the microcontroller that whatever is connected to the pin is expecting something from the controller. A INPUT would tell the microcontroll to expect to see something (data) on that pin. Inside the loop we tell PIN 13 to go HIGH, delay for 1000 microseconds (about 1 second.) and go LOW, delay again, and repeat. In this case a HIGH will turn the LED on and a LOW will turn it off. The delay will STOP the microcontroller from doing anything else. The the controller is delayed it can not do anything else (mostly), no other sensors can be used, or outputs have information written to them. Is there a better way?","title":"Arduino Blink"},{"location":"tutorials/blink/blink/#blink-without-delay","text":"The delay() function is blocking, so what if we need to do something else and still blink a led. We can use a method like below, this allows the sketch to continue to run and still processes the blink code, about once a second. // Variables will change: int ledState = LOW; // ledState used to set the LED // Generally, you should use unsigned long for variables that hold time // The value will quickly become too large for an int to store unsigned long previousMillis = 0; // will store last time LED was updated // constants won't change: const long interval = 1000; // interval at which to blink (milliseconds) void setup() { // set the digital pin as output: pinMode(13, OUTPUT); } void loop() { // here is where you'd put code that needs to be running all the time. // check to see if it's time to blink the LED; that is, if the difference // between the current time and last time you blinked the LED is bigger than // the interval at which you want to blink the LED. unsigned long currentMillis = millis(); if (currentMillis - previousMillis = interval) { // save the last time you blinked the LED previousMillis = currentMillis; // if the LED is off turn it on and vice-versa: if (ledState == LOW) { ledState = HIGH; } else { ledState = LOW; } // set the LED with the ledState of the variable: digitalWrite(13, ledState); } }","title":"Blink without delay"},{"location":"tutorials/livera/","text":"Quick Start Manual What is Livera Welcome to start the new adventure with Hicat!! Happy hacks. :p In a nutshell, Livera by Team HiCat is an open source hardware project which aims to bring machine vision features to the Arduino community. It is also a good platform for building visual driven robotics. We've provided libraries which contain machine vision related APIs such as: 720hd video and photo capturing processing OpenCV enabled Color-Sensitive and Object-Tracking. Wifi enabled wireless control (this can work with the iot!) Image capturing and data recording onto the onboard sd card Mobile observation and manipulation from our custom apps( web-based and native) Programmable and open source. what Livera could do: Future development: It is always exciting to think about the future, as for the buzz of AI recently, undeniably it is the future. When we saw the article of How a Japanese cucumber farmer is using deep learning to sort cucumbers. we think Livera should be best machine vision front-end part for image capturing and openCV pre-processing . With the natural language virtual assistant and cloud deep learning platfrom, we could just teach the robot how to perform task by speaking, or let him learn by watching, that will be really awesome, like people could finally owns their own real world R2D2 or BB8 . In conclusion: Theme based advance robotic kit . More advance image capturing and processing capability Natural language virtual assitant Image streaming and processing cloud User Manual Power: LIVERA allows mulitpul ways of power supply 3.7V lipo battery (No higher voltage) USB Port (MCU) I/O port(VIN) Hock Up Camera Module: The Livera core package contains 3 main conponent, 1. Livera Board 2. Camera Module 3. Extendable Cable. There are white symbols on top of every module, always remember to match the symbol while plugs the Camera module. You could choose to directly plug in the Camera Module on to Livera Board, or use extendable cable to extend the Camera Module in order to build something like pan-tilt enabled Robot. Connect to Livera(access point): Power up Livera, give a few second to boot, the WIFI access point hostname hicat_xxxxxx should show up on your PC/MOBILE's wifi list. The default wifi password is: 88888888 Once you connected to the wifi, you could try out the host API web page by IP address: 192.168.1.1 You could let Livera access to your local wifi(station mode) by the API web 192.168.1.1 or web app 192.168.1.1/mmc/webapp/index.html (the address /www/mmc/ is the directory of mounted sd card address within Livera Linux, which also means you could build your own web application and copy it to the sd card, Livera will automaticly host it for you) You could also change Livera's wifi name through linux command line tool : Once you connected to LIVERA, you could Telnet into the Linux system within Livera, follow the section Access into Linux(3518E) below, within the /hicat/ folder you should find the launch.sh tool, run the program ./launch.sh ap SSID password , or through web app. Station WIFI Mode: you could let Livera connected to your local wifi hotspot through the web API, btw we have provide a program call 'imhere' to let your got the new IP address of Livera. web app: 192.168.1.1/mmc/webapp/index.html (this web app should placed in the sd card , could be download on https://github.com/hicat-tech/webapp ) offers station method. Test Video Feature: LIVERA has two video streaming mode RTSP/MJPEG , RTSP stands for advence H.264 codec raw video streaming which works well with our Android app or any video Players which accepted RTSP streaming protocol(suggest to use VLC player) with this IP: rtsp://192.168.1.1/hicat.264 . MJPEG would be a WEB friendly video format. Once you successfully boot up Livera and connected the WIFI, you can go to the web API page 192.168.1.1 to test the board's functions with your web browser, btw Chrome would be the best choice. Go to web API page: 192.168.1.1 , hit the link: MJPEG Mode, you could view the live video stream via the link: http://192.168.1.1:8080 , suggest use chrome browser to visit, also you could change the video resolution by press the links, this resolution you choose would work for both RTSP and MJPG Mode . If you using the webapp, the custom web app which stay in the sd card and would show up here: 192.168.1.1/mmc/webapp/index.html . Choose the MJPG MODE from the webapp's top right switch button, and hit the LiveView button to get Live MJPG video stream from Livera. Access into Linux(3518E): Livera accept telnet connections, when you connected to Livera through WIFI, you could open up your terminal, type: telnet 192.168.1.1 //if you let the board connected to the router you should find the correct IP address //User:root //passward:(hit return directly) cd /hicat/ //firmware directory ./launch.sh //Main script for main operation: video setting/mount sd card cd /www/mmc //SD card directory beside the internet ways, you could also go serial communication through the given UART port on Livera. Reset Livera: wifi reset: hold the reset buttom RST-PBC , you would see the led light STAT flashing per second, count for 3 seconds ps: very careful to not let it flash more than 10 seconds, once you see the led flash faster, the wifi hicat_xxxxxx would comes up in your wifi list. factory reset: make sure there is a folder named hicat_failsafe.tar , if so, hold the reset buttom RST-PBC , you would see the led light STAT flashing per second, count for 10 seconds , once you see the led flash faster, you would get a brand new Livera. SD Card: Caution: if you have the SD card which comes with the Kits , the needed file has already been installed , the below instruction shows how to set up a new card . mount sd card: any new sd card with format(vfat fat32) would be auto mounted. if not, stick it into the sd card slot and follow the steps below. goto follow the above step access into Linux(3518E) to telnet into Livera(simular like ssh) goto the address `cd /hicat/` within the hicat directory you should find the command line tool named launsh.sh then go ./launch.sh sd //you should see 4 options `format|mount|umount|hicatEx`, `format` means format the sd card into `fat32` file system which works like this command below: ./launch.sh sd format mount umount would let you mount the sd card to /www/mmc directory, hicatEx would helps you to depackage the hicatEx.tar (put it into sd card before you go hicatEx ) which contains some important programs for Livera's system. - do format first(format the sd card into fat32 in your pc/mac would be okay), then go mount , finally hicatEx . - once you finished format and mount the sd card there will be you could chose to put the OpenCV lib into opencv folder incase for opencv demo. Android APP: APP main page: We've provided a custom android app for Livera, you could download it on our github page: https://github.com/hicat-tech/livera-android , the APP could help you liveview video, control robots, and access to livera's web app. Do not forget the turn the livera into RTSP(H264) Mode before live viewing the video or access into robot control. Web app: The web app provides functions like Video recording, Live streaming, Livera setting, What an amazing feature about livera is that it could serve web pages as web app thanks to the file streaming server, in Livera's demo, we've provided a single page web app which based on VUE.js , the app would work as Livera's command panel. To use the web app you could go download the web app here:https://github.com/hicat-tech/webapp The web server within Livera also provide REST API which allows you to communicate with Livera through AJAX, have a look at detailed description within API GUIDE . Hardware Livera Livera's given I/O port has connected into MCU(Atmel 32u4) , and the pin layout is pretty much likely to Arduino Mini , you could program it with arduino IDE through the given USB port , select the board to arduino leonardo . We've also placed a mpu6050 6-axie accelerometer on Livera, this would help in case of self-balance vehicle, there is 3 I/O port been connected MCU(32u4), there are I2C(D2:SDA,D3:SCL) and interrupt(D7) Design file: The Robot kit's Laser cut Acrylic CAD file contains the dimensions of LIVERA , you could use it to build your custom case for Livera. Links here . Livera Hardware Architecture: Arduino(MCU) I/O Pin Indicate: Motor Driver Port Indicator: Motor Driver - Hicat.Livera Motor Port 1(M1): M1-1 - A5 , M1-2 - A4 . Motor Port 2(M2): M2-1 - A3 , M2-2 - A2 . Motor Port 3(M3): M3-1 - D8 , M3-2 - D6 . Motor Port 4(M4): M4-1 - D5 , M4-2 - D4 . Servo Motor Port: 11 - D11, 10 - D10, 9 - D9, 13 - D13 The Livera Motor Driver was designed specially for Livera, so that you can directly plug onto Livera, in this way you would get almost everything you need for a robotic system . Livera Motor Driver can power up 4 DC motors and 3 Servo Motors , with external power input. The Robot kit Assembly Guide Like the picture shows, the Livera Robot kit ccomes with several conponents that you need you assemble and make it to a fully functional robot. This toturial would get you through all the process of physical building and wiring, it might take around 25 minutes to make the robot alive. Clear up your desk, unpack the Robot kit and let begin the journey. Parts list The Livera Robot kit comes with following parts: Boards: HICAT.Livera Boardx1 Livera Motor Driver Boardx1 Camera: Livera Camera Extend Cablex1 Livera Camera Modulex1 __Storage:__2G SD Card with firmware built in Guidebook: Livera GuideBookx1 Livera Robot Assembly GuideBookx1 Power: 9V Lipo Battery and Bat Carrier Motor: E-MAX SERVOx1 DC Gear Motor set(Motor + Motor Carrier + Wheels)x2 Structure bits: Robot Base Acrylic Panels set, Omni-directional Wheel Set Screws: M2x15(+6)mm Nylon Studx4, M2x6mm Nylon Studx4, M2x6(+6)mm Nylon Studx8, M2x10(+6)mm Nylon Studx8, M2 Nylon Nutx4 OUTPUT: LASER Beanx1 Accessories: Stickersx1, USB Cablex1, Screwdriver(+,-)x1 https://www.discourse.org/ Video Tutorial We've also created a video toturial to give you a more detailed, much clear step by step toturial, would help you with: Pyhsical Assembly Webapp Guide Design file: The Robot kit's Laser cut Acrylic CAD file contains the dimensions of LIVERA , you could use it to build your custom case for Livera. Links here . Step 1: Base panel build Unpack the Livera Robot kit package, Find out the following conponents in order to build the base panel of the Robot. Robot Base Acrylic Panel x1 DC Motor + Motor Carrier x2 Omni-directional Wheel Set x1 M2x15(+6)mm Nylon Stud x4 M2x6mm Nylon Stud x4 M2x6(+6)mm Nylon Stud x4 M2 Nylon Nut x4 Notice: All the Stud could be install by hand, doesn't require and tools. Caution: Don't make it too tight while screwing with the Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard. Assemble up the Omni-direction Wheel Set like the picture shows, then close up with the Cover bit , waiting for screw on the Base Panel. Install the motor on base panel: carefully place the M2 Nut onto the Motor Carrier's slot , than catch the DC Motor and match to the hole on the Base Panle , notice to keep the + sign on top as the left top of the pic shows, using M2x6(+6) Stud to screw through from the other side of the panel. Install the Structure bit: place the M2x15(+6) Stud on top of the Base panel , then let the 6mm screw bit through the hole and screw into the M2x6mm Stud. Step 2: Body build Install the Livera Motor Driver: simply place by matching to the Stud. Install the Structure bit: Screw M2x10(+6)mm Stud on top. Caution: Don't make it too tight while screwing with the Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard. Install HICAT.Livera with Extend Cable: carefully stack Livera on top of Livera Motor Driver, do check for the I/O ports and the outline to see weather it is matched to the Livera Motor Driver. Install the Structure bit: Screw M2x10(+6)mm Stud on top of Livera. Caution: Don't make it too tight while screwing with the Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard. Step 3: Top build Install the top Acrylic Panel: place the Top Acrylic Panel , fix the panle by screw the M2x6(+6)mm Stud on top. Stick the Power case and Servo: unpack the 3M Sticker, stick the conponents as the image shows. Connect Power: connect the 2.54mm Power connector from Power case to Livera Motor Driver. Install the Camera pan-tilt: screw the Servo Arm Set form the EMAX Servo set on the Camera Pan-tilt. Install Camera Module: carefully place the camera module on the Acrylic Camera Pan-tilt , using M2 Rivet to fix it. Install Camera Extend Cable and Laser Bean: install the conponents as the picture shows, notice that the direction of the camera module should be match together according to the indicate drawings. Step 4: Wiring Wiring: wire up all the electronics(Motors, Laser, Servo) as the picture shows, for the DC Motor wring, you would need to use the screwdriver to fix the wire into the adapter. Install SD card: put the SD card into the SD slot. Install Battery: put the 9v chargable battery into the Power Case. Power up to init the Servo: switch on the Power Switch From the Motor Driver, wait until heard two movement from the Servo, then put the Camera Pan-tilt on the Servo in a horizon direction, screw it up using the smallest screw from the Servo Box. Enjoy: pick up you cell phone, connect to the Livera's wifi , ssid:hicat_xxxxxx passward:88888888 then open chrome browser , go to the web page http://192.168.1.1/mmc/webapp/index.html Switch the top video switcher to MJPG MODE , click LiveView , if the image flipped, you could change it within QUALITY, we suggest you to chose 240p/15fps. Click ROBOT to open the control panel, Try press forward button, if you see the robot spinning or move back, you could adjust the wiring by switch the DC motor wire from the adapter. Software Firmware Livera frimware is basically embedded Linux shell script with some executable program, which works immediately while Livera power on, keeping all the functions like MJPG/H264 Server , Bridge System , Rest API works. Android We've provided a custom android app for Livera, you could download it on our github page: https://github.com/hicat-tech/livera-android , the APP could help you liveview video, control robots, and access to livera's web app. Do not forget the turn the livera into RTSP(H264) Mode before open the liveview and robot function. APP main page: Robot control panel: Web app The web app provides functions like Video recording, Live streaming, video download, wifi setting, visual tracking. __RTSP/MJPG MODE SWITCH:__Once you open up the web app in your browser, the First thing to do is to select a video mode from RTSP to MJPG , after the selection you would immediately see some of UI changed according to different mode. What an amazing feature about livera is it could serve web pages as web app thanks to the file streaming server, in Livera's demo, we've provided a single page web app which based on VUE.js , the app would work as Livera's command panel. To use the web app you could go download the web app here The server also provide REST API which allows you to communicate with Livera through AJAX Example Code Image Capturing 1. Image capture with Arduino Way #include \"hicat.h\" void setup() { hicat.begin(); char name[16] = \"0.jpg\"; for (int i = 0; i < 8; i++) { name[0] = '0' + i; hicat.snapshot(name); delay(10); } } void loop() { } 2. Image capture with WEB Way Livera's build in web server accept rest API , for detail description you could check out the WEB API guide. One thing you have to Notice is that Livera has two image streming mode , which are MJPG for web and H264 for more advance video streaming. For Video Capturing: //type the url directly within browser //IP address could be different if you use station mode. //first step, make sure you are in H264(RTSP) Mode 192.168.1.1/hicat/videoServer?mode=0 //Second step, start capture 192.168.1.1/hicat/record?save=1 //finally, stop 192.168.1.1/hicat/record?save=0 //AJAX is also avaliable, here is example with client side javascript var xhr = new XMLHttpRequest(){ xhr.open('GET', '/hicat/videoServer?mode=0', true) xhr.onload = function() { answer = JSON.parse(xhr.responseText) console.log(answer1) } xhr.send() For Image Capturing: //type the url directly within browser //IP address could be different if you use station mode. //first step, make sure you are in MJPG Mode 192.168.1.1/hicat/videoServer?mode=1 //Second step, start capture image //you could set up the image name xxx.jpg and stored direction '/www/mmc' is the SD card's directory 192.168.1.1/hicat/snapshot?name=xxx.jpg dir=/www/mmc/video/ //AJAX is also avaliable, here is example with client side javascript var xhr = new XMLHttpRequest(){ xhr.open('GET', '/hicat/videoServer?mode=1', true) xhr.onload = function() { answer = JSON.parse(xhr.responseText) console.log(answer1) } xhr.send() 3. Image capture with Linux(c/c++) Way We've cross compile a tool call curl which will help you to control Livera with the web api //telnet/serial/arduino into Livera's terminal //type the command below to invoke the web api. for detailed info please check out the web api section within the API GUIDE curl http://127.0.0.1/hicat/record?save=1 //trigger h.264 video capture Robot Kit Websocket and bridge system: bridge is a websocket server that runs on the linux core , help to accept websocket connections to Livera on port 7681 and transfer the information to MCU(32u4) . __Websocket Example:__we've built a websocket bridge server to help to transport text message from front-end web client to Arduino. //server on port 7681 var WebSocketURL = 'ws://' + window.location.hostname + ':7681' ws = new WebSocket(WebSocketURL); ws.onopen = function(event) { console.log('ws connection opened:' + WebSocketURL); } ws.send(`msg`); ws.close(); // hicat robot demo // get SerialCommand library from https://github.com/hicat-tech/Arduino-SerialCommand #include #include int PWM1 = 10; //control servo int PWM_CE = 11; //servo enable int AIN1 = 4; //control motor int AIN2 = 5; //control motor int AIN3 = 6; //control motor int AIN4 = 8; //control motor int BIN3 = A2; //control laser int BIN4 = A3; //control laser Servo myservo; SerialCommand sCmd; uint8_t camera_angle = 120; uint8_t camera_angle_range[] = { 60, 150 }; uint8_t laser_is_on = 0; void setup() { Serial.begin(115200); Serial1.begin(115200); // initialize the digital pin as an output. pinMode(AIN1, OUTPUT); pinMode(AIN2, OUTPUT); pinMode(AIN3, OUTPUT); pinMode(AIN4, OUTPUT); pinMode(BIN3, OUTPUT); pinMode(BIN4, OUTPUT); digitalWrite(BIN3, LOW); // turn off LASER digitalWrite(BIN4, LOW); pinMode(PWM_CE, OUTPUT); myservo.attach(PWM1); digitalWrite(PWM_CE, HIGH); myservo.write(camera_angle); digitalWrite(PWM_CE, LOW); //disable servo // Setup callbacks for SerialCommand commands sCmd.addCommand(\"laser\", trigger_laser); // trigger laser sCmd.addCommand(\"camera\", adjust_camera); // sCmd.addCommand(\"motor\", set_motor); sCmd.setDefaultHandler(unrecognized); // Handler for command that isn't matched (says \"What?\") } // the loop routine runs over and over again forever: void loop() { sCmd.readSerial(); } void trigger_laser() { if (laser_is_on) { digitalWrite(BIN3, LOW); // turn off LASER laser_is_on = 0; Serial.println(\"laser off\"); } else { digitalWrite(BIN3, HIGH); // turn on LASER laser_is_on = 1; Serial.println(\"laser on\"); } } void adjust_camera() { char *param; param = sCmd.next(); if (!strcmp(param, \"down\")) { if (camera_angle < camera_angle_range[1]) { camera_angle += 10; digitalWrite(PWM_CE, HIGH); myservo.write(camera_angle); digitalWrite(PWM_CE, HIGH); } } else if (!strcmp(param, \"up\")) { if (camera_angle > camera_angle_range[0]) { camera_angle -= 10; digitalWrite(PWM_CE, HIGH); myservo.write(camera_angle); digitalWrite(PWM_CE, HIGH); } } Serial.print(\"camera angle: \"); Serial.println(camera_angle); } void set_motor() { char *param; int16_t left = 0; int16_t right = 0; param = sCmd.next(); if (param == NULL) { return; } left = atoi(param); param = sCmd.next(); if (param == NULL) { return; } right = atoi(param); Serial.print(\"motor \"); Serial.print(left); Serial.print(\" \"); Serial.println(right); if (left > 30) { analogWrite(AIN2, left); digitalWrite(AIN1, LOW); } else if (left < -30) { analogWrite(AIN2, 255 + left); digitalWrite(AIN1, HIGH); } else { digitalWrite(AIN1, LOW); digitalWrite(AIN2, LOW); } if (right > 30) { analogWrite(AIN3, right); digitalWrite(AIN4, LOW); } else if (right < -30) { analogWrite(AIN3, 255 + right); digitalWrite(AIN4, HIGH); } else { digitalWrite(AIN3, LOW); digitalWrite(AIN4, LOW); } } // This gets set as the default handler, and gets called when no other command matches. void unrecognized(const char *command) { Serial.println(\"What?\"); } Advance API GUIDE 1.WEB API The Web API contains a set of REST API in order to interact with LIVERA in a convenient way through AJAX or URL . __AJAX Example:__the below could be run in general font-end javascript client side. var xhr = new XMLHttpRequest(){ xhr.open('GET', '/hicat/videoServer?mode=0', true) xhr.onload = function() { answer = JSON.parse(xhr.responseText) console.log(answer1) } xhr.send() } Websocket and bridge system: bridge is a websocket server that runs on the linux core , help to accept websocket connections to Livera on port 7681 and transfer the information to MCU(32u4) . __Websocket Example:__we've built a websocket bridge server to help to transport text message from front-end web client to Arduino. //server on port 7681 var WebSocketURL = 'ws://' + window.location.hostname + ':7681' ws = new WebSocket(WebSocketURL); ws.onopen = function(event) { console.log('ws connection opened:' + WebSocketURL); } ws.send(`msg`); ws.close(); 1. Set up Video Streaming Mode: This API allows you to swith between RTSP and MJPEG streaming mode, be careful that Video Record API only works under RTSP Mode , and Screen Shot API only works under MJEPG Mode . /hicat/videoServer?mode=0 mode=0 : RTSP Server Start mode=1 : MJPEG Mode 2. Station Mode : Let Livera link to local wifi router /hicat/stationMode?ssid=xxxxx password=xxxxxxx return messages: success : none return error :{\"result\":\"ERROR\"} 3. WIFI Access Point : Make Livera to AP mode /hicat/apMode?ssid=xxxxx password=xxxxxxx return messages(object): success : none return error \uff1a{\"result\":\"ERROR\"} 4. Set Livera time : Synchronous time with Livera, the time also affect to the default video name. /hicat/setTime?time=%d-%d-%d-%d-%d-%d Example : /hicat/setTime?time=2018-09-09-01-01-01 success \uff1a{\"result\":\"OK\"} error \uff1a{\"result\":\"ERROR\"} 5. Get Video Download Links : This API will return a JASON format( {\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]} ) message about all the file within video folder in SD Card. Once you get the fileName you could just go to this url http://192.168.1.1/mmc/video/xxxxx.264 to download it(might figure your IP address under station mode). /hicat/files success :{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]} error :{\"result\":\"ERROR\"} 6. Video Record : This API allows you to record and delete the video and auto save into the default video folder in SD card. /hicat/record?save=1 /hicat/record?del=xxxxxxxx.h264 save=1 : start recording save=0 : stop recording and save del=xxxxxxxx.h264 : delete file xxxxxxxx.h264 success \uff1a{\"result\":\"OK\"} error \uff1a{\"result\":\"ERROR\"} 7. Video Setting : Switch video angle, video resolution and video fps. /hicat/setCamera?resolve=1 rotate=0 fps=20 success \uff1a{\"result\":\"OK\"} error \uff1a{\"result\":\"ERROR\"} //only work under mjpg mode 8. Snapshot : snap shot form one of the frame form MJPEG stream. We suggest to make the direction to /www/mmc/video/ coz the photo info could be receive under /hicat/files API. /hicat/snapshot?name=xxx.jpg dir=/www/mmc/video/ success \uff1a{\"result\":\"OK\"} 9. For test : test api, do nothing but test. /hicat/test success \uff1a{\"result\":\"OK\"} 2.Embedded Linux API Detail information could be view under our github libhicat , There are instructions guide you through development tools set up and workflow, please have a look. #ifndef _LIBHISIV_H_ #define _LIBHISIV_H_ #ifdef __cplusplus extern C { #endif int venc_exit(int n); int venc_init(int resolve);//0:720P 1:QVGA(320*240) 2:VGA(640*480) int venc_init_more(int resolve,int mode,int fps);//resolve: 0/1/2 1280*720/320*240/640*480 mode: 0/1 H264/MJPEG int venc_requestIDR();//request IDR frame int venc_getFrame(char* buffer,int *datalen,int *pts,int *type); int venc_snap(char* buff,int xRes,int yRes); int venc_getYUV(int mode,char*buff);//mode=0 Y mode=1 UV mode = 3 YUV420(SP) int venc_rotate(int dir); //for audio extern int aenc_init(int mode);// 0/1 PT_LPCM/AAC/ extern int aenc_getFrame(char* buff); extern int aenc_exit(); //jpeg to http extern int libyuvdist_startYuvDistService(int port); extern int libyuvdist_updateYuv(int iHandle,char* data,int len,int seq,unsigned long timeStamp); extern int libyuvdist_stopYuvDistService(int iHandle); extern int libyuvdist_setSettingCallback(int iHandle,int func);//int func(int resX,int resY,int fps) #ifdef __cplusplus } #endif #endif 3.Arduino Libray API The Arduino library wraps the web api, using serial communication and curl to communicate and send command to the video core(HI3518E). There are also example codes could be find in github #ifndef _HICAT_H_ #define _HICAT_H_ #include Arduino.h class HiCat { public: HiCat(); int begin(void); /** * Take a picture * * @param file_name picture name * @return 0 - OK, otherwise - error code */ int snapshot(const char *file_name); /** * Start to record a video which is saved at /www/mmc/video/ * * @return 0 - OK, otherwise - error code */ int record(); /** * Stop to record a video * * @return 0 - OK, otherwise - error code */ int stop_recording(); /** * Set camera format * * @param resolution 0 - 1280*720, 2 - 640*480, 1 - 320*240 * @param rotation 0 - no rotation, 1 - 180 degree rotation * @param fps frame per secord from 1 to 25 * @return 0 - OK, otherwise - error code */ int set_camera(int resolution, int rotation, int fps); /** * Set Wi-Fi mode * * @param mode 0 - AP mode, 1 - Station mode * @param ssid SSID * @param password password * @return 0 - OK, otherwise - error code */ int set_wifi(int mode, const char *ssid, const char *password); /** * Run a shell command * * @param command shell command * @return 0 - OK, otherwise - error code */ int run(const char *command); private: void prepare_web_command(); int read_result(); }; extern HiCat hicat; #endif // _HICAT_H_ HI3518EV100 SDK Content within SDK: linux file system Hi3518E Documentation Hardware design reference download address: download link verifycode: kspc decode password: lk87612umzvcb01qqsalv How to burn the firmware to flash you must have a hicat board with a uboot already burned. then connect the UART0 on the ARM9 Hisiv chip. and then use the command as below[recomendly using Hyper Terminal to finish this]: loady 0x82000000 then send file on Hyper Terminal with xmodern protocal. choose the uImage file under https://github.com/9crk/libhisiv/opt/ sf probe 0 sf erase 0x100000 0x300000 sf write 0x82000000 0x100000 0x300000 loady 0x82000000 then send the rootfs file to the board. sf erase 0x400000 0xC00000 sf write 0x82000000 0x400000 0x500000 setenv bootargs 'mem=32M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 mtdparts=hi_sfc:1M(boot),3M(kernel),12M(rootfs)' setenv bootcmd 'sf probe 0;sf read 0x82000000 0x100000 0x300000;bootm 0x82000000' saveenv then reboot the board or execute 'reset' command. About rtspserver and libhisiv.a rtspserver have two demo: * one is modified from live555 project. ( live555MediaServer ) * source code is in https://bitbucket.org/zhouhua/hicat_rtspserver * play Address: rtsp://192.168.1.1/hicat.264 How to install software pack execute 'lrz' command to send libhicat/opt/hi_sd.sh into the board (any where) format the sd card with fat32 format in default param. or use mkfs.vfat on Linux OS then execute chmod +x hi_sd.sh ./hi_sd.sh , the board will reboot How to upgrade 1. Formating the SD card with vfat or fat32 mode. 2. then copy the hicat2016xxxx.tar package to the SD card. 3. press the reset button (RST_PBC) 4. connect the power supply. 5. wait for the board reset again. What's more zwebs https://9crk@bitbucket.org/zhouhua/hicat_zwebs.git How to use programming with serial port on Hisiv libSerial https://github.com/9crk/libSerial.git Linux SDK Source Code can be view here openCV How to use opencv Demo clone this repo then install the compiler compile the apps under 'app' dir with ./build.sh copy the app dir to the board copy the opt/opencvlib dir to the board at /www/mmc/opencv/opencvlib cd app source env.sh execute './capture' to capture an image named 'myImage.jpg' execute './match model.jpg' to find the object model.jpg in the camera. then you can browser the result hi.jpg on http://192.168.1.1/mmc/opencv/hi.jpg The way To do black-line tracking. 1.check out the files. ~/libhicat/app$ ls__ build.sh capture.cpp hi.html match model2.jpg myImage.jpg capture env.sh hi.jpg match.cpp model.jpg 2.copy capture.cpp as a demo cp capture.cpp lineTrack.cpp 3.modify build.sh, add content below arm-hisiv100nptl-linux-g++ lineTrack.cpp ../lib/libhisiv.a -I../include -lpthread -lm -o lineTrack 4.compile ./build.sh #include stdio.h #include stdlib.h #include unistd.h #include libhisiv.h int main(int argc,char* argv[]) { char data[1280*720]; int len; int i; len = venc_getYUV(0,data); int x,y; int result[10]; for(i=0;i 10;i++){ result[i] = 0; } for(i=0;i 10;i++){ for(y=635;y (635+10);y++){ for(x=i*72;x (i+1)*72;x++){ result[i]+=data[y*1280+x]; } } result[i] = result[i]/(72*10); } for(i=0;i 10;i++){ result[i] = 0; printf( result = %d\\n ,result[i]); } }","title":"Documentation"},{"location":"tutorials/livera/#quick-start-manual","text":"What is Livera Welcome to start the new adventure with Hicat!! Happy hacks. :p In a nutshell, Livera by Team HiCat is an open source hardware project which aims to bring machine vision features to the Arduino community. It is also a good platform for building visual driven robotics. We've provided libraries which contain machine vision related APIs such as: 720hd video and photo capturing processing OpenCV enabled Color-Sensitive and Object-Tracking. Wifi enabled wireless control (this can work with the iot!) Image capturing and data recording onto the onboard sd card Mobile observation and manipulation from our custom apps( web-based and native) Programmable and open source. what Livera could do: Future development: It is always exciting to think about the future, as for the buzz of AI recently, undeniably it is the future. When we saw the article of How a Japanese cucumber farmer is using deep learning to sort cucumbers. we think Livera should be best machine vision front-end part for image capturing and openCV pre-processing . With the natural language virtual assistant and cloud deep learning platfrom, we could just teach the robot how to perform task by speaking, or let him learn by watching, that will be really awesome, like people could finally owns their own real world R2D2 or BB8 . In conclusion: Theme based advance robotic kit . More advance image capturing and processing capability Natural language virtual assitant Image streaming and processing cloud User Manual Power: LIVERA allows mulitpul ways of power supply 3.7V lipo battery (No higher voltage) USB Port (MCU) I/O port(VIN) Hock Up Camera Module: The Livera core package contains 3 main conponent, 1. Livera Board 2. Camera Module 3. Extendable Cable. There are white symbols on top of every module, always remember to match the symbol while plugs the Camera module. You could choose to directly plug in the Camera Module on to Livera Board, or use extendable cable to extend the Camera Module in order to build something like pan-tilt enabled Robot. Connect to Livera(access point): Power up Livera, give a few second to boot, the WIFI access point hostname hicat_xxxxxx should show up on your PC/MOBILE's wifi list. The default wifi password is: 88888888 Once you connected to the wifi, you could try out the host API web page by IP address: 192.168.1.1 You could let Livera access to your local wifi(station mode) by the API web 192.168.1.1 or web app 192.168.1.1/mmc/webapp/index.html (the address /www/mmc/ is the directory of mounted sd card address within Livera Linux, which also means you could build your own web application and copy it to the sd card, Livera will automaticly host it for you) You could also change Livera's wifi name through linux command line tool : Once you connected to LIVERA, you could Telnet into the Linux system within Livera, follow the section Access into Linux(3518E) below, within the /hicat/ folder you should find the launch.sh tool, run the program ./launch.sh ap SSID password , or through web app. Station WIFI Mode: you could let Livera connected to your local wifi hotspot through the web API, btw we have provide a program call 'imhere' to let your got the new IP address of Livera. web app: 192.168.1.1/mmc/webapp/index.html (this web app should placed in the sd card , could be download on https://github.com/hicat-tech/webapp ) offers station method. Test Video Feature: LIVERA has two video streaming mode RTSP/MJPEG , RTSP stands for advence H.264 codec raw video streaming which works well with our Android app or any video Players which accepted RTSP streaming protocol(suggest to use VLC player) with this IP: rtsp://192.168.1.1/hicat.264 . MJPEG would be a WEB friendly video format. Once you successfully boot up Livera and connected the WIFI, you can go to the web API page 192.168.1.1 to test the board's functions with your web browser, btw Chrome would be the best choice. Go to web API page: 192.168.1.1 , hit the link: MJPEG Mode, you could view the live video stream via the link: http://192.168.1.1:8080 , suggest use chrome browser to visit, also you could change the video resolution by press the links, this resolution you choose would work for both RTSP and MJPG Mode . If you using the webapp, the custom web app which stay in the sd card and would show up here: 192.168.1.1/mmc/webapp/index.html . Choose the MJPG MODE from the webapp's top right switch button, and hit the LiveView button to get Live MJPG video stream from Livera. Access into Linux(3518E): Livera accept telnet connections, when you connected to Livera through WIFI, you could open up your terminal, type: telnet 192.168.1.1 //if you let the board connected to the router you should find the correct IP address //User:root //passward:(hit return directly) cd /hicat/ //firmware directory ./launch.sh //Main script for main operation: video setting/mount sd card cd /www/mmc //SD card directory beside the internet ways, you could also go serial communication through the given UART port on Livera. Reset Livera: wifi reset: hold the reset buttom RST-PBC , you would see the led light STAT flashing per second, count for 3 seconds ps: very careful to not let it flash more than 10 seconds, once you see the led flash faster, the wifi hicat_xxxxxx would comes up in your wifi list. factory reset: make sure there is a folder named hicat_failsafe.tar , if so, hold the reset buttom RST-PBC , you would see the led light STAT flashing per second, count for 10 seconds , once you see the led flash faster, you would get a brand new Livera. SD Card: Caution: if you have the SD card which comes with the Kits , the needed file has already been installed , the below instruction shows how to set up a new card . mount sd card: any new sd card with format(vfat fat32) would be auto mounted. if not, stick it into the sd card slot and follow the steps below. goto follow the above step access into Linux(3518E) to telnet into Livera(simular like ssh) goto the address `cd /hicat/` within the hicat directory you should find the command line tool named launsh.sh then go ./launch.sh sd //you should see 4 options `format|mount|umount|hicatEx`, `format` means format the sd card into `fat32` file system which works like this command below: ./launch.sh sd format mount umount would let you mount the sd card to /www/mmc directory, hicatEx would helps you to depackage the hicatEx.tar (put it into sd card before you go hicatEx ) which contains some important programs for Livera's system. - do format first(format the sd card into fat32 in your pc/mac would be okay), then go mount , finally hicatEx . - once you finished format and mount the sd card there will be you could chose to put the OpenCV lib into opencv folder incase for opencv demo. Android APP: APP main page: We've provided a custom android app for Livera, you could download it on our github page: https://github.com/hicat-tech/livera-android , the APP could help you liveview video, control robots, and access to livera's web app. Do not forget the turn the livera into RTSP(H264) Mode before live viewing the video or access into robot control. Web app: The web app provides functions like Video recording, Live streaming, Livera setting, What an amazing feature about livera is that it could serve web pages as web app thanks to the file streaming server, in Livera's demo, we've provided a single page web app which based on VUE.js , the app would work as Livera's command panel. To use the web app you could go download the web app here:https://github.com/hicat-tech/webapp The web server within Livera also provide REST API which allows you to communicate with Livera through AJAX, have a look at detailed description within API GUIDE .","title":"Quick Start Manual"},{"location":"tutorials/livera/#hardware","text":"","title":"Hardware"},{"location":"tutorials/livera/#livera","text":"Livera's given I/O port has connected into MCU(Atmel 32u4) , and the pin layout is pretty much likely to Arduino Mini , you could program it with arduino IDE through the given USB port , select the board to arduino leonardo . We've also placed a mpu6050 6-axie accelerometer on Livera, this would help in case of self-balance vehicle, there is 3 I/O port been connected MCU(32u4), there are I2C(D2:SDA,D3:SCL) and interrupt(D7) Design file: The Robot kit's Laser cut Acrylic CAD file contains the dimensions of LIVERA , you could use it to build your custom case for Livera. Links here . Livera Hardware Architecture: Arduino(MCU) I/O Pin Indicate:","title":"Livera"},{"location":"tutorials/livera/#motor-driver","text":"Port Indicator: Motor Driver - Hicat.Livera Motor Port 1(M1): M1-1 - A5 , M1-2 - A4 . Motor Port 2(M2): M2-1 - A3 , M2-2 - A2 . Motor Port 3(M3): M3-1 - D8 , M3-2 - D6 . Motor Port 4(M4): M4-1 - D5 , M4-2 - D4 . Servo Motor Port: 11 - D11, 10 - D10, 9 - D9, 13 - D13 The Livera Motor Driver was designed specially for Livera, so that you can directly plug onto Livera, in this way you would get almost everything you need for a robotic system . Livera Motor Driver can power up 4 DC motors and 3 Servo Motors , with external power input.","title":"Motor Driver"},{"location":"tutorials/livera/#the-robot-kit-assembly-guide","text":"Like the picture shows, the Livera Robot kit ccomes with several conponents that you need you assemble and make it to a fully functional robot. This toturial would get you through all the process of physical building and wiring, it might take around 25 minutes to make the robot alive. Clear up your desk, unpack the Robot kit and let begin the journey. Parts list The Livera Robot kit comes with following parts: Boards: HICAT.Livera Boardx1 Livera Motor Driver Boardx1 Camera: Livera Camera Extend Cablex1 Livera Camera Modulex1 __Storage:__2G SD Card with firmware built in Guidebook: Livera GuideBookx1 Livera Robot Assembly GuideBookx1 Power: 9V Lipo Battery and Bat Carrier Motor: E-MAX SERVOx1 DC Gear Motor set(Motor + Motor Carrier + Wheels)x2 Structure bits: Robot Base Acrylic Panels set, Omni-directional Wheel Set Screws: M2x15(+6)mm Nylon Studx4, M2x6mm Nylon Studx4, M2x6(+6)mm Nylon Studx8, M2x10(+6)mm Nylon Studx8, M2 Nylon Nutx4 OUTPUT: LASER Beanx1 Accessories: Stickersx1, USB Cablex1, Screwdriver(+,-)x1 https://www.discourse.org/ Video Tutorial We've also created a video toturial to give you a more detailed, much clear step by step toturial, would help you with: Pyhsical Assembly Webapp Guide Design file: The Robot kit's Laser cut Acrylic CAD file contains the dimensions of LIVERA , you could use it to build your custom case for Livera. Links here . Step 1: Base panel build Unpack the Livera Robot kit package, Find out the following conponents in order to build the base panel of the Robot. Robot Base Acrylic Panel x1 DC Motor + Motor Carrier x2 Omni-directional Wheel Set x1 M2x15(+6)mm Nylon Stud x4 M2x6mm Nylon Stud x4 M2x6(+6)mm Nylon Stud x4 M2 Nylon Nut x4 Notice: All the Stud could be install by hand, doesn't require and tools. Caution: Don't make it too tight while screwing with the Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard. Assemble up the Omni-direction Wheel Set like the picture shows, then close up with the Cover bit , waiting for screw on the Base Panel. Install the motor on base panel: carefully place the M2 Nut onto the Motor Carrier's slot , than catch the DC Motor and match to the hole on the Base Panle , notice to keep the + sign on top as the left top of the pic shows, using M2x6(+6) Stud to screw through from the other side of the panel. Install the Structure bit: place the M2x15(+6) Stud on top of the Base panel , then let the 6mm screw bit through the hole and screw into the M2x6mm Stud. Step 2: Body build Install the Livera Motor Driver: simply place by matching to the Stud. Install the Structure bit: Screw M2x10(+6)mm Stud on top. Caution: Don't make it too tight while screwing with the Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard. Install HICAT.Livera with Extend Cable: carefully stack Livera on top of Livera Motor Driver, do check for the I/O ports and the outline to see weather it is matched to the Livera Motor Driver. Install the Structure bit: Screw M2x10(+6)mm Stud on top of Livera. Caution: Don't make it too tight while screwing with the Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard. Step 3: Top build Install the top Acrylic Panel: place the Top Acrylic Panel , fix the panle by screw the M2x6(+6)mm Stud on top. Stick the Power case and Servo: unpack the 3M Sticker, stick the conponents as the image shows. Connect Power: connect the 2.54mm Power connector from Power case to Livera Motor Driver. Install the Camera pan-tilt: screw the Servo Arm Set form the EMAX Servo set on the Camera Pan-tilt. Install Camera Module: carefully place the camera module on the Acrylic Camera Pan-tilt , using M2 Rivet to fix it. Install Camera Extend Cable and Laser Bean: install the conponents as the picture shows, notice that the direction of the camera module should be match together according to the indicate drawings. Step 4: Wiring Wiring: wire up all the electronics(Motors, Laser, Servo) as the picture shows, for the DC Motor wring, you would need to use the screwdriver to fix the wire into the adapter. Install SD card: put the SD card into the SD slot. Install Battery: put the 9v chargable battery into the Power Case. Power up to init the Servo: switch on the Power Switch From the Motor Driver, wait until heard two movement from the Servo, then put the Camera Pan-tilt on the Servo in a horizon direction, screw it up using the smallest screw from the Servo Box. Enjoy: pick up you cell phone, connect to the Livera's wifi , ssid:hicat_xxxxxx passward:88888888 then open chrome browser , go to the web page http://192.168.1.1/mmc/webapp/index.html Switch the top video switcher to MJPG MODE , click LiveView , if the image flipped, you could change it within QUALITY, we suggest you to chose 240p/15fps. Click ROBOT to open the control panel, Try press forward button, if you see the robot spinning or move back, you could adjust the wiring by switch the DC motor wire from the adapter.","title":"The Robot kit Assembly Guide"},{"location":"tutorials/livera/#software","text":"","title":"Software"},{"location":"tutorials/livera/#firmware","text":"Livera frimware is basically embedded Linux shell script with some executable program, which works immediately while Livera power on, keeping all the functions like MJPG/H264 Server , Bridge System , Rest API works.","title":"Firmware"},{"location":"tutorials/livera/#android","text":"We've provided a custom android app for Livera, you could download it on our github page: https://github.com/hicat-tech/livera-android , the APP could help you liveview video, control robots, and access to livera's web app. Do not forget the turn the livera into RTSP(H264) Mode before open the liveview and robot function. APP main page: Robot control panel:","title":"Android"},{"location":"tutorials/livera/#web-app","text":"The web app provides functions like Video recording, Live streaming, video download, wifi setting, visual tracking. __RTSP/MJPG MODE SWITCH:__Once you open up the web app in your browser, the First thing to do is to select a video mode from RTSP to MJPG , after the selection you would immediately see some of UI changed according to different mode. What an amazing feature about livera is it could serve web pages as web app thanks to the file streaming server, in Livera's demo, we've provided a single page web app which based on VUE.js , the app would work as Livera's command panel. To use the web app you could go download the web app here The server also provide REST API which allows you to communicate with Livera through AJAX","title":"Web app"},{"location":"tutorials/livera/#example-code","text":"","title":"Example Code"},{"location":"tutorials/livera/#image-capturing","text":"1. Image capture with Arduino Way #include \"hicat.h\" void setup() { hicat.begin(); char name[16] = \"0.jpg\"; for (int i = 0; i < 8; i++) { name[0] = '0' + i; hicat.snapshot(name); delay(10); } } void loop() { } 2. Image capture with WEB Way Livera's build in web server accept rest API , for detail description you could check out the WEB API guide. One thing you have to Notice is that Livera has two image streming mode , which are MJPG for web and H264 for more advance video streaming. For Video Capturing: //type the url directly within browser //IP address could be different if you use station mode. //first step, make sure you are in H264(RTSP) Mode 192.168.1.1/hicat/videoServer?mode=0 //Second step, start capture 192.168.1.1/hicat/record?save=1 //finally, stop 192.168.1.1/hicat/record?save=0 //AJAX is also avaliable, here is example with client side javascript var xhr = new XMLHttpRequest(){ xhr.open('GET', '/hicat/videoServer?mode=0', true) xhr.onload = function() { answer = JSON.parse(xhr.responseText) console.log(answer1) } xhr.send() For Image Capturing: //type the url directly within browser //IP address could be different if you use station mode. //first step, make sure you are in MJPG Mode 192.168.1.1/hicat/videoServer?mode=1 //Second step, start capture image //you could set up the image name xxx.jpg and stored direction '/www/mmc' is the SD card's directory 192.168.1.1/hicat/snapshot?name=xxx.jpg dir=/www/mmc/video/ //AJAX is also avaliable, here is example with client side javascript var xhr = new XMLHttpRequest(){ xhr.open('GET', '/hicat/videoServer?mode=1', true) xhr.onload = function() { answer = JSON.parse(xhr.responseText) console.log(answer1) } xhr.send() 3. Image capture with Linux(c/c++) Way We've cross compile a tool call curl which will help you to control Livera with the web api //telnet/serial/arduino into Livera's terminal //type the command below to invoke the web api. for detailed info please check out the web api section within the API GUIDE curl http://127.0.0.1/hicat/record?save=1 //trigger h.264 video capture","title":"Image Capturing"},{"location":"tutorials/livera/#robot-kit","text":"Websocket and bridge system: bridge is a websocket server that runs on the linux core , help to accept websocket connections to Livera on port 7681 and transfer the information to MCU(32u4) . __Websocket Example:__we've built a websocket bridge server to help to transport text message from front-end web client to Arduino. //server on port 7681 var WebSocketURL = 'ws://' + window.location.hostname + ':7681' ws = new WebSocket(WebSocketURL); ws.onopen = function(event) { console.log('ws connection opened:' + WebSocketURL); } ws.send(`msg`); ws.close(); // hicat robot demo // get SerialCommand library from https://github.com/hicat-tech/Arduino-SerialCommand #include #include int PWM1 = 10; //control servo int PWM_CE = 11; //servo enable int AIN1 = 4; //control motor int AIN2 = 5; //control motor int AIN3 = 6; //control motor int AIN4 = 8; //control motor int BIN3 = A2; //control laser int BIN4 = A3; //control laser Servo myservo; SerialCommand sCmd; uint8_t camera_angle = 120; uint8_t camera_angle_range[] = { 60, 150 }; uint8_t laser_is_on = 0; void setup() { Serial.begin(115200); Serial1.begin(115200); // initialize the digital pin as an output. pinMode(AIN1, OUTPUT); pinMode(AIN2, OUTPUT); pinMode(AIN3, OUTPUT); pinMode(AIN4, OUTPUT); pinMode(BIN3, OUTPUT); pinMode(BIN4, OUTPUT); digitalWrite(BIN3, LOW); // turn off LASER digitalWrite(BIN4, LOW); pinMode(PWM_CE, OUTPUT); myservo.attach(PWM1); digitalWrite(PWM_CE, HIGH); myservo.write(camera_angle); digitalWrite(PWM_CE, LOW); //disable servo // Setup callbacks for SerialCommand commands sCmd.addCommand(\"laser\", trigger_laser); // trigger laser sCmd.addCommand(\"camera\", adjust_camera); // sCmd.addCommand(\"motor\", set_motor); sCmd.setDefaultHandler(unrecognized); // Handler for command that isn't matched (says \"What?\") } // the loop routine runs over and over again forever: void loop() { sCmd.readSerial(); } void trigger_laser() { if (laser_is_on) { digitalWrite(BIN3, LOW); // turn off LASER laser_is_on = 0; Serial.println(\"laser off\"); } else { digitalWrite(BIN3, HIGH); // turn on LASER laser_is_on = 1; Serial.println(\"laser on\"); } } void adjust_camera() { char *param; param = sCmd.next(); if (!strcmp(param, \"down\")) { if (camera_angle < camera_angle_range[1]) { camera_angle += 10; digitalWrite(PWM_CE, HIGH); myservo.write(camera_angle); digitalWrite(PWM_CE, HIGH); } } else if (!strcmp(param, \"up\")) { if (camera_angle > camera_angle_range[0]) { camera_angle -= 10; digitalWrite(PWM_CE, HIGH); myservo.write(camera_angle); digitalWrite(PWM_CE, HIGH); } } Serial.print(\"camera angle: \"); Serial.println(camera_angle); } void set_motor() { char *param; int16_t left = 0; int16_t right = 0; param = sCmd.next(); if (param == NULL) { return; } left = atoi(param); param = sCmd.next(); if (param == NULL) { return; } right = atoi(param); Serial.print(\"motor \"); Serial.print(left); Serial.print(\" \"); Serial.println(right); if (left > 30) { analogWrite(AIN2, left); digitalWrite(AIN1, LOW); } else if (left < -30) { analogWrite(AIN2, 255 + left); digitalWrite(AIN1, HIGH); } else { digitalWrite(AIN1, LOW); digitalWrite(AIN2, LOW); } if (right > 30) { analogWrite(AIN3, right); digitalWrite(AIN4, LOW); } else if (right < -30) { analogWrite(AIN3, 255 + right); digitalWrite(AIN4, HIGH); } else { digitalWrite(AIN3, LOW); digitalWrite(AIN4, LOW); } } // This gets set as the default handler, and gets called when no other command matches. void unrecognized(const char *command) { Serial.println(\"What?\"); }","title":"Robot Kit"},{"location":"tutorials/livera/#advance","text":"","title":"Advance"},{"location":"tutorials/livera/#api-guide","text":"1.WEB API The Web API contains a set of REST API in order to interact with LIVERA in a convenient way through AJAX or URL . __AJAX Example:__the below could be run in general font-end javascript client side. var xhr = new XMLHttpRequest(){ xhr.open('GET', '/hicat/videoServer?mode=0', true) xhr.onload = function() { answer = JSON.parse(xhr.responseText) console.log(answer1) } xhr.send() } Websocket and bridge system: bridge is a websocket server that runs on the linux core , help to accept websocket connections to Livera on port 7681 and transfer the information to MCU(32u4) . __Websocket Example:__we've built a websocket bridge server to help to transport text message from front-end web client to Arduino. //server on port 7681 var WebSocketURL = 'ws://' + window.location.hostname + ':7681' ws = new WebSocket(WebSocketURL); ws.onopen = function(event) { console.log('ws connection opened:' + WebSocketURL); } ws.send(`msg`); ws.close(); 1. Set up Video Streaming Mode: This API allows you to swith between RTSP and MJPEG streaming mode, be careful that Video Record API only works under RTSP Mode , and Screen Shot API only works under MJEPG Mode . /hicat/videoServer?mode=0 mode=0 : RTSP Server Start mode=1 : MJPEG Mode 2. Station Mode : Let Livera link to local wifi router /hicat/stationMode?ssid=xxxxx password=xxxxxxx return messages: success : none return error :{\"result\":\"ERROR\"} 3. WIFI Access Point : Make Livera to AP mode /hicat/apMode?ssid=xxxxx password=xxxxxxx return messages(object): success : none return error \uff1a{\"result\":\"ERROR\"} 4. Set Livera time : Synchronous time with Livera, the time also affect to the default video name. /hicat/setTime?time=%d-%d-%d-%d-%d-%d Example : /hicat/setTime?time=2018-09-09-01-01-01 success \uff1a{\"result\":\"OK\"} error \uff1a{\"result\":\"ERROR\"} 5. Get Video Download Links : This API will return a JASON format( {\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]} ) message about all the file within video folder in SD Card. Once you get the fileName you could just go to this url http://192.168.1.1/mmc/video/xxxxx.264 to download it(might figure your IP address under station mode). /hicat/files success :{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]} error :{\"result\":\"ERROR\"} 6. Video Record : This API allows you to record and delete the video and auto save into the default video folder in SD card. /hicat/record?save=1 /hicat/record?del=xxxxxxxx.h264 save=1 : start recording save=0 : stop recording and save del=xxxxxxxx.h264 : delete file xxxxxxxx.h264 success \uff1a{\"result\":\"OK\"} error \uff1a{\"result\":\"ERROR\"} 7. Video Setting : Switch video angle, video resolution and video fps. /hicat/setCamera?resolve=1 rotate=0 fps=20 success \uff1a{\"result\":\"OK\"} error \uff1a{\"result\":\"ERROR\"} //only work under mjpg mode 8. Snapshot : snap shot form one of the frame form MJPEG stream. We suggest to make the direction to /www/mmc/video/ coz the photo info could be receive under /hicat/files API. /hicat/snapshot?name=xxx.jpg dir=/www/mmc/video/ success \uff1a{\"result\":\"OK\"} 9. For test : test api, do nothing but test. /hicat/test success \uff1a{\"result\":\"OK\"} 2.Embedded Linux API Detail information could be view under our github libhicat , There are instructions guide you through development tools set up and workflow, please have a look. #ifndef _LIBHISIV_H_ #define _LIBHISIV_H_ #ifdef __cplusplus extern C { #endif int venc_exit(int n); int venc_init(int resolve);//0:720P 1:QVGA(320*240) 2:VGA(640*480) int venc_init_more(int resolve,int mode,int fps);//resolve: 0/1/2 1280*720/320*240/640*480 mode: 0/1 H264/MJPEG int venc_requestIDR();//request IDR frame int venc_getFrame(char* buffer,int *datalen,int *pts,int *type); int venc_snap(char* buff,int xRes,int yRes); int venc_getYUV(int mode,char*buff);//mode=0 Y mode=1 UV mode = 3 YUV420(SP) int venc_rotate(int dir); //for audio extern int aenc_init(int mode);// 0/1 PT_LPCM/AAC/ extern int aenc_getFrame(char* buff); extern int aenc_exit(); //jpeg to http extern int libyuvdist_startYuvDistService(int port); extern int libyuvdist_updateYuv(int iHandle,char* data,int len,int seq,unsigned long timeStamp); extern int libyuvdist_stopYuvDistService(int iHandle); extern int libyuvdist_setSettingCallback(int iHandle,int func);//int func(int resX,int resY,int fps) #ifdef __cplusplus } #endif #endif 3.Arduino Libray API The Arduino library wraps the web api, using serial communication and curl to communicate and send command to the video core(HI3518E). There are also example codes could be find in github #ifndef _HICAT_H_ #define _HICAT_H_ #include Arduino.h class HiCat { public: HiCat(); int begin(void); /** * Take a picture * * @param file_name picture name * @return 0 - OK, otherwise - error code */ int snapshot(const char *file_name); /** * Start to record a video which is saved at /www/mmc/video/ * * @return 0 - OK, otherwise - error code */ int record(); /** * Stop to record a video * * @return 0 - OK, otherwise - error code */ int stop_recording(); /** * Set camera format * * @param resolution 0 - 1280*720, 2 - 640*480, 1 - 320*240 * @param rotation 0 - no rotation, 1 - 180 degree rotation * @param fps frame per secord from 1 to 25 * @return 0 - OK, otherwise - error code */ int set_camera(int resolution, int rotation, int fps); /** * Set Wi-Fi mode * * @param mode 0 - AP mode, 1 - Station mode * @param ssid SSID * @param password password * @return 0 - OK, otherwise - error code */ int set_wifi(int mode, const char *ssid, const char *password); /** * Run a shell command * * @param command shell command * @return 0 - OK, otherwise - error code */ int run(const char *command); private: void prepare_web_command(); int read_result(); }; extern HiCat hicat; #endif // _HICAT_H_","title":"API GUIDE"},{"location":"tutorials/livera/#hi3518ev100-sdk","text":"Content within SDK: linux file system Hi3518E Documentation Hardware design reference download address: download link verifycode: kspc decode password: lk87612umzvcb01qqsalv How to burn the firmware to flash you must have a hicat board with a uboot already burned. then connect the UART0 on the ARM9 Hisiv chip. and then use the command as below[recomendly using Hyper Terminal to finish this]: loady 0x82000000 then send file on Hyper Terminal with xmodern protocal. choose the uImage file under https://github.com/9crk/libhisiv/opt/ sf probe 0 sf erase 0x100000 0x300000 sf write 0x82000000 0x100000 0x300000 loady 0x82000000 then send the rootfs file to the board. sf erase 0x400000 0xC00000 sf write 0x82000000 0x400000 0x500000 setenv bootargs 'mem=32M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 mtdparts=hi_sfc:1M(boot),3M(kernel),12M(rootfs)' setenv bootcmd 'sf probe 0;sf read 0x82000000 0x100000 0x300000;bootm 0x82000000' saveenv then reboot the board or execute 'reset' command. About rtspserver and libhisiv.a rtspserver have two demo: * one is modified from live555 project. ( live555MediaServer ) * source code is in https://bitbucket.org/zhouhua/hicat_rtspserver * play Address: rtsp://192.168.1.1/hicat.264 How to install software pack execute 'lrz' command to send libhicat/opt/hi_sd.sh into the board (any where) format the sd card with fat32 format in default param. or use mkfs.vfat on Linux OS then execute chmod +x hi_sd.sh ./hi_sd.sh , the board will reboot How to upgrade 1. Formating the SD card with vfat or fat32 mode. 2. then copy the hicat2016xxxx.tar package to the SD card. 3. press the reset button (RST_PBC) 4. connect the power supply. 5. wait for the board reset again. What's more zwebs https://9crk@bitbucket.org/zhouhua/hicat_zwebs.git How to use programming with serial port on Hisiv libSerial https://github.com/9crk/libSerial.git Linux SDK Source Code can be view here","title":"HI3518EV100 SDK"},{"location":"tutorials/livera/#opencv","text":"How to use opencv Demo clone this repo then install the compiler compile the apps under 'app' dir with ./build.sh copy the app dir to the board copy the opt/opencvlib dir to the board at /www/mmc/opencv/opencvlib cd app source env.sh execute './capture' to capture an image named 'myImage.jpg' execute './match model.jpg' to find the object model.jpg in the camera. then you can browser the result hi.jpg on http://192.168.1.1/mmc/opencv/hi.jpg The way To do black-line tracking. 1.check out the files. ~/libhicat/app$ ls__ build.sh capture.cpp hi.html match model2.jpg myImage.jpg capture env.sh hi.jpg match.cpp model.jpg 2.copy capture.cpp as a demo cp capture.cpp lineTrack.cpp 3.modify build.sh, add content below arm-hisiv100nptl-linux-g++ lineTrack.cpp ../lib/libhisiv.a -I../include -lpthread -lm -o lineTrack 4.compile ./build.sh #include stdio.h #include stdlib.h #include unistd.h #include libhisiv.h int main(int argc,char* argv[]) { char data[1280*720]; int len; int i; len = venc_getYUV(0,data); int x,y; int result[10]; for(i=0;i 10;i++){ result[i] = 0; } for(i=0;i 10;i++){ for(y=635;y (635+10);y++){ for(x=i*72;x (i+1)*72;x++){ result[i]+=data[y*1280+x]; } } result[i] = result[i]/(72*10); } for(i=0;i 10;i++){ result[i] = 0; printf( result = %d\\n ,result[i]); } }","title":"openCV"},{"location":"tutorials/livera/api/","text":"API GUIDE 1.WEB API The Web API contains a set of REST API in order to interact with LIVERA in a convenient way through AJAX or URL . __AJAX Example:__the below could be run in general font-end javascript client side. var xhr = new XMLHttpRequest(){ xhr.open('GET', '/hicat/videoServer?mode=0', true) xhr.onload = function() { answer = JSON.parse(xhr.responseText) console.log(answer1) } xhr.send() } Websocket and bridge system: bridge is a websocket server that runs on the linux core , help to accept websocket connections to Livera on port 7681 and transfer the information to MCU(32u4) . __Websocket Example:__we've built a websocket bridge server to help to transport text message from front-end web client to Arduino. //server on port 7681 var WebSocketURL = 'ws://' + window.location.hostname + ':7681' ws = new WebSocket(WebSocketURL); ws.onopen = function(event) { console.log('ws connection opened:' + WebSocketURL); } ws.send(`msg`); ws.close(); 1. Set up Video Streaming Mode: This API allows you to swith between RTSP and MJPEG streaming mode, be careful that Video Record API only works under RTSP Mode , and Screen Shot API only works under MJEPG Mode . /hicat/videoServer?mode=0 mode=0 : RTSP Server Start mode=1 : MJPEG Mode 2. Station Mode : Let Livera link to local wifi router /hicat/stationMode?ssid=xxxxx password=xxxxxxx return messages: success : none return error :{\"result\":\"ERROR\"} 3. WIFI Access Point : Make Livera to AP mode /hicat/apMode?ssid=xxxxx password=xxxxxxx return messages(object): success : none return error \uff1a{\"result\":\"ERROR\"} 4. Set Livera time : Synchronous time with Livera, the time also affect to the default video name. /hicat/setTime?time=%d-%d-%d-%d-%d-%d Example : /hicat/setTime?time=2018-09-09-01-01-01 success \uff1a{\"result\":\"OK\"} error \uff1a{\"result\":\"ERROR\"} 5. Get Video Download Links : This API will return a JASON format( {\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]} ) message about all the file within video folder in SD Card. Once you get the fileName you could just go to this url http://192.168.1.1/mmc/video/xxxxx.264 to download it(might figure your IP address under station mode). /hicat/files success :{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]} error :{\"result\":\"ERROR\"} 6. Video Record : This API allows you to record and delete the video and auto save into the default video folder in SD card. /hicat/record?save=1 /hicat/record?del=xxxxxxxx.h264 save=1 : start recording save=0 : stop recording and save del=xxxxxxxx.h264 : delete xxxxxxxx.h264 success \uff1a{\"result\":\"OK\"} error \uff1a{\"result\":\"ERROR\"} 7. Video Setting : Switch video angle, video resolution and video fps. /hicat/setCamera?resolve=1 rotate=0 fps=20 success \uff1a{\"result\":\"OK\"} error \uff1a{\"result\":\"ERROR\"} //only work under mjpg mode 8. Snapshot : snap shot form one of the frame form MJPEG stream. We suggest to make the direction to /www/mmc/video/ coz the photo info could be receive under /hicat/files API. /hicat/snapshot?name=xxx.jpg dir=/www/mmc/video/ success \uff1a{\"result\":\"OK\"} 9. For test : test api, do nothing but test. /hicat/test success \uff1a{\"result\":\"OK\"} 2.Embedded Linux API Detail information could be view under our github libhicat , There are instructions guide you through development tools set up and workflow, please have a look. #ifndef _LIBHISIV_H_ #define _LIBHISIV_H_ #ifdef __cplusplus extern C { #endif int venc_exit(int n); int venc_init(int resolve);//0:720P 1:QVGA(320*240) 2:VGA(640*480) int venc_init_more(int resolve,int mode,int fps);//resolve: 0/1/2 1280*720/320*240/640*480 mode: 0/1 H264/MJPEG int venc_requestIDR();//request IDR frame int venc_getFrame(char* buffer,int *datalen,int *pts,int *type); int venc_snap(char* buff,int xRes,int yRes); int venc_getYUV(int mode,char*buff);//mode=0 Y mode=1 UV mode = 3 YUV420(SP) int venc_rotate(int dir); //for audio extern int aenc_init(int mode);// 0/1 PT_LPCM/AAC/ extern int aenc_getFrame(char* buff); extern int aenc_exit(); //jpeg to http extern int libyuvdist_startYuvDistService(int port); extern int libyuvdist_updateYuv(int iHandle,char* data,int len,int seq,unsigned long timeStamp); extern int libyuvdist_stopYuvDistService(int iHandle); extern int libyuvdist_setSettingCallback(int iHandle,int func);//int func(int resX,int resY,int fps) #ifdef __cplusplus } #endif #endif 3.Arduino Libray API The Arduino library wraps the web api, using serial communication and curl to communicate and send command to the video core(HI3518E). There are also example codes could be find in github #ifndef _HICAT_H_ #define _HICAT_H_ #include Arduino.h class HiCat { public: HiCat(); int begin(void); /** * Take a picture * * @param file_name picture name * @return 0 - OK, otherwise - error code */ int snapshot(const char *file_name); /** * Start to record a video which is saved at /www/mmc/video/ * * @return 0 - OK, otherwise - error code */ int record(); /** * Stop to record a video * * @return 0 - OK, otherwise - error code */ int stop_recording(); /** * Set camera format * * @param resolution 0 - 1280*720, 2 - 640*480, 1 - 320*240 * @param rotation 0 - no rotation, 1 - 180 degree rotation * @param fps frame per secord from 1 to 25 * @return 0 - OK, otherwise - error code */ int set_camera(int resolution, int rotation, int fps); /** * Set Wi-Fi mode * * @param mode 0 - AP mode, 1 - Station mode * @param ssid SSID * @param password password * @return 0 - OK, otherwise - error code */ int set_wifi(int mode, const char *ssid, const char *password); /** * Run a shell command * * @param command shell command * @return 0 - OK, otherwise - error code */ int run(const char *command); private: void prepare_web_command(); int read_result(); }; extern HiCat hicat; #endif // _HICAT_H_","title":"API Guide"},{"location":"tutorials/livera/api/#api-guide","text":"","title":"API GUIDE"},{"location":"tutorials/livera/api/#1web-api","text":"The Web API contains a set of REST API in order to interact with LIVERA in a convenient way through AJAX or URL . __AJAX Example:__the below could be run in general font-end javascript client side. var xhr = new XMLHttpRequest(){ xhr.open('GET', '/hicat/videoServer?mode=0', true) xhr.onload = function() { answer = JSON.parse(xhr.responseText) console.log(answer1) } xhr.send() } Websocket and bridge system: bridge is a websocket server that runs on the linux core , help to accept websocket connections to Livera on port 7681 and transfer the information to MCU(32u4) . __Websocket Example:__we've built a websocket bridge server to help to transport text message from front-end web client to Arduino. //server on port 7681 var WebSocketURL = 'ws://' + window.location.hostname + ':7681' ws = new WebSocket(WebSocketURL); ws.onopen = function(event) { console.log('ws connection opened:' + WebSocketURL); } ws.send(`msg`); ws.close(); 1. Set up Video Streaming Mode: This API allows you to swith between RTSP and MJPEG streaming mode, be careful that Video Record API only works under RTSP Mode , and Screen Shot API only works under MJEPG Mode . /hicat/videoServer?mode=0 mode=0 : RTSP Server Start mode=1 : MJPEG Mode 2. Station Mode : Let Livera link to local wifi router /hicat/stationMode?ssid=xxxxx password=xxxxxxx return messages: success : none return error :{\"result\":\"ERROR\"} 3. WIFI Access Point : Make Livera to AP mode /hicat/apMode?ssid=xxxxx password=xxxxxxx return messages(object): success : none return error \uff1a{\"result\":\"ERROR\"} 4. Set Livera time : Synchronous time with Livera, the time also affect to the default video name. /hicat/setTime?time=%d-%d-%d-%d-%d-%d Example : /hicat/setTime?time=2018-09-09-01-01-01 success \uff1a{\"result\":\"OK\"} error \uff1a{\"result\":\"ERROR\"} 5. Get Video Download Links : This API will return a JASON format( {\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]} ) message about all the file within video folder in SD Card. Once you get the fileName you could just go to this url http://192.168.1.1/mmc/video/xxxxx.264 to download it(might figure your IP address under station mode). /hicat/files success :{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]} error :{\"result\":\"ERROR\"} 6. Video Record : This API allows you to record and delete the video and auto save into the default video folder in SD card. /hicat/record?save=1 /hicat/record?del=xxxxxxxx.h264 save=1 : start recording save=0 : stop recording and save del=xxxxxxxx.h264 : delete xxxxxxxx.h264 success \uff1a{\"result\":\"OK\"} error \uff1a{\"result\":\"ERROR\"} 7. Video Setting : Switch video angle, video resolution and video fps. /hicat/setCamera?resolve=1 rotate=0 fps=20 success \uff1a{\"result\":\"OK\"} error \uff1a{\"result\":\"ERROR\"} //only work under mjpg mode 8. Snapshot : snap shot form one of the frame form MJPEG stream. We suggest to make the direction to /www/mmc/video/ coz the photo info could be receive under /hicat/files API. /hicat/snapshot?name=xxx.jpg dir=/www/mmc/video/ success \uff1a{\"result\":\"OK\"} 9. For test : test api, do nothing but test. /hicat/test success \uff1a{\"result\":\"OK\"}","title":"1.WEB API"},{"location":"tutorials/livera/api/#2embedded-linux-api","text":"Detail information could be view under our github libhicat , There are instructions guide you through development tools set up and workflow, please have a look. #ifndef _LIBHISIV_H_ #define _LIBHISIV_H_ #ifdef __cplusplus extern C { #endif int venc_exit(int n); int venc_init(int resolve);//0:720P 1:QVGA(320*240) 2:VGA(640*480) int venc_init_more(int resolve,int mode,int fps);//resolve: 0/1/2 1280*720/320*240/640*480 mode: 0/1 H264/MJPEG int venc_requestIDR();//request IDR frame int venc_getFrame(char* buffer,int *datalen,int *pts,int *type); int venc_snap(char* buff,int xRes,int yRes); int venc_getYUV(int mode,char*buff);//mode=0 Y mode=1 UV mode = 3 YUV420(SP) int venc_rotate(int dir); //for audio extern int aenc_init(int mode);// 0/1 PT_LPCM/AAC/ extern int aenc_getFrame(char* buff); extern int aenc_exit(); //jpeg to http extern int libyuvdist_startYuvDistService(int port); extern int libyuvdist_updateYuv(int iHandle,char* data,int len,int seq,unsigned long timeStamp); extern int libyuvdist_stopYuvDistService(int iHandle); extern int libyuvdist_setSettingCallback(int iHandle,int func);//int func(int resX,int resY,int fps) #ifdef __cplusplus } #endif #endif","title":"2.Embedded Linux API"},{"location":"tutorials/livera/api/#3arduino-libray-api","text":"The Arduino library wraps the web api, using serial communication and curl to communicate and send command to the video core(HI3518E). There are also example codes could be find in github #ifndef _HICAT_H_ #define _HICAT_H_ #include Arduino.h class HiCat { public: HiCat(); int begin(void); /** * Take a picture * * @param file_name picture name * @return 0 - OK, otherwise - error code */ int snapshot(const char *file_name); /** * Start to record a video which is saved at /www/mmc/video/ * * @return 0 - OK, otherwise - error code */ int record(); /** * Stop to record a video * * @return 0 - OK, otherwise - error code */ int stop_recording(); /** * Set camera format * * @param resolution 0 - 1280*720, 2 - 640*480, 1 - 320*240 * @param rotation 0 - no rotation, 1 - 180 degree rotation * @param fps frame per secord from 1 to 25 * @return 0 - OK, otherwise - error code */ int set_camera(int resolution, int rotation, int fps); /** * Set Wi-Fi mode * * @param mode 0 - AP mode, 1 - Station mode * @param ssid SSID * @param password password * @return 0 - OK, otherwise - error code */ int set_wifi(int mode, const char *ssid, const char *password); /** * Run a shell command * * @param command shell command * @return 0 - OK, otherwise - error code */ int run(const char *command); private: void prepare_web_command(); int read_result(); }; extern HiCat hicat; #endif // _HICAT_H_","title":"3.Arduino Libray API"},{"location":"tutorials/livera/robotAssemGuide/","text":"The Robot kit Assembly Guide Like the picture shows, the Livera Robot kit ccomes with several conponents that you need you assemble and make it to a fully functional robot. This toturial would get you through all the process of physical building and wiring, it might take around 25 minutes to make the robot alive. Clear up your desk, unpack the Robot kit and let begin the journey. Parts list The Livera Robot kit comes with following parts: Boards: HICAT.Livera Boardx1 Livera Motor Driver Boardx1 Camera: Livera Camera Extend Cablex1 Livera Camera Modulex1 __Storage:__2G SD Card with firmware built in Guidebook: Livera GuideBookx1 Livera Robot Assembly GuideBookx1 Power: 9V Lipo Battery and Bat Carrier Motor: E-MAX SERVOx1 DC Gear Motor set(Motor + Motor Carrier + Wheels)x2 Structure bits: Robot Base Acrylic Panels set, Omni-directional Wheel Set Screws: M2x15(+6)mm Nylon Studx4, M2x6mm Nylon Studx4, M2x6(+6)mm Nylon Studx8, M2x10(+6)mm Nylon Studx8, M2 Nylon Nutx4 OUTPUT: LASER Beanx1 Accessories: Stickersx1, USB Cablex1, Screwdriver(+,-)x1 Video Tutorial We've also created a video toturial to give you a more detailed, much clear step by step toturial, would help you with: Pyhsical Assembly Webapp Guide Step 1: Base panel build Unpack the Livera Robot kit package, Find out the following conponents in order to build the base panel of the Robot. Robot Base Acrylic Panel x1 DC Motor + Motor Carrier x2 Omni-directional Wheel Set x1 M2x15(+6)mm Nylon Stud x4 M2x6mm Nylon Stud x4 M2x6(+6)mm Nylon Stud x4 M2 Nylon Nut x4 Notice: All the Stud could be install by hand, doesn't require and tools. Caution: Don't make it too tight while screwing with the Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard. Assemble up the Omni-direction Wheel Set like the picture shows, then close up with the Cover bit , waiting for screw on the Base Panel. Install the motor on base panel: carefully place the M2 Nut onto the Motor Carrier's slot , than catch the DC Motor and match to the hole on the Base Panle , notice to keep the + sign on top as the left top of the pic shows, using M2x6(+6) Stud to screw through from the other side of the panel. Install the Structure bit: place the M2x15(+6) Stud on top of the Base panel , then let the 6mm screw bit through the hole and screw into the M2x6mm Stud. Step 2: Body build Install the Livera Motor Driver: simply place by matching to the Stud. Install the Structure bit: Screw M2x10(+6)mm Stud on top. Caution: Don't make it too tight while screwing with the Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard. Install HICAT.Livera with Extend Cable: carefully stack Livera on top of Livera Motor Driver, do check for the I/O ports and the outline to see weather it is matched to the Livera Motor Driver. Install the Structure bit: Screw M2x10(+6)mm Stud on top of Livera. Caution: Don't make it too tight while screwing with the Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard. Step 3: Top build Install the top Acrylic Panel: place the Top Acrylic Panel , fix the panle by screw the M2x6(+6)mm Stud on top. Stick the Power case and Servo: unpack the 3M Sticker, stick the conponents as the image shows. Connect Power: connect the 2.54mm Power connector from Power case to Livera Motor Driver. Install the Camera pan-tilt: screw the Servo Arm Set form the EMAX Servo set on the Camera Pan-tilt. Install Camera Module: carefully place the camera module on the Acrylic Camera Pan-tilt , using M2 Rivet to fix it. Install Camera Extend Cable and Laser Bean: install the conponents as the picture shows, notice that the direction of the camera module should be match together according to the indicate drawings. Step 4: Wiring Wiring: wire up all the electronics(Motors, Laser, Servo) as the picture shows, for the DC Motor wring, you would need to use the screwdriver to fix the wire into the adapter. Install SD card: put the SD card into the SD slot. Install Battery: put the 9v chargable battery into the Power Case. Power up to init the Servo: switch on the Power Switch From the Motor Driver, wait until heard two movement from the Servo, then put the Camera Pan-tilt on the Servo in a horizon direction, screw it up using the smallest screw from the Servo Box. Enjoy: pick up you cell phone, connect to the Livera's wifi , ssid:hicat_xxxxxx passward:88888888 then open chrome browser , go to the web page http://192.168.1.1/mmc/webapp/index.html Switch the top video switcher to MJPG MODE , click LiveView , if the image flipped, you could change it within QUALITY, we suggest you to chose 240p/15fps. Click ROBOT to open the control panel, Try press forward button, if you see the robot spinning or move back, you could adjust the wiring by switch the DC motor wire from the adapter.","title":"Robot Assembily Guide"},{"location":"tutorials/livera/robotAssemGuide/#the-robot-kit-assembly-guide","text":"Like the picture shows, the Livera Robot kit ccomes with several conponents that you need you assemble and make it to a fully functional robot. This toturial would get you through all the process of physical building and wiring, it might take around 25 minutes to make the robot alive. Clear up your desk, unpack the Robot kit and let begin the journey.","title":"The Robot kit Assembly Guide"},{"location":"tutorials/livera/robotAssemGuide/#parts-list","text":"The Livera Robot kit comes with following parts: Boards: HICAT.Livera Boardx1 Livera Motor Driver Boardx1 Camera: Livera Camera Extend Cablex1 Livera Camera Modulex1 __Storage:__2G SD Card with firmware built in Guidebook: Livera GuideBookx1 Livera Robot Assembly GuideBookx1 Power: 9V Lipo Battery and Bat Carrier Motor: E-MAX SERVOx1 DC Gear Motor set(Motor + Motor Carrier + Wheels)x2 Structure bits: Robot Base Acrylic Panels set, Omni-directional Wheel Set Screws: M2x15(+6)mm Nylon Studx4, M2x6mm Nylon Studx4, M2x6(+6)mm Nylon Studx8, M2x10(+6)mm Nylon Studx8, M2 Nylon Nutx4 OUTPUT: LASER Beanx1 Accessories: Stickersx1, USB Cablex1, Screwdriver(+,-)x1","title":"Parts list"},{"location":"tutorials/livera/robotAssemGuide/#video-tutorial","text":"We've also created a video toturial to give you a more detailed, much clear step by step toturial, would help you with: Pyhsical Assembly Webapp Guide","title":"Video Tutorial"},{"location":"tutorials/livera/robotAssemGuide/#step-1-base-panel-build","text":"Unpack the Livera Robot kit package, Find out the following conponents in order to build the base panel of the Robot. Robot Base Acrylic Panel x1 DC Motor + Motor Carrier x2 Omni-directional Wheel Set x1 M2x15(+6)mm Nylon Stud x4 M2x6mm Nylon Stud x4 M2x6(+6)mm Nylon Stud x4 M2 Nylon Nut x4 Notice: All the Stud could be install by hand, doesn't require and tools. Caution: Don't make it too tight while screwing with the Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard. Assemble up the Omni-direction Wheel Set like the picture shows, then close up with the Cover bit , waiting for screw on the Base Panel. Install the motor on base panel: carefully place the M2 Nut onto the Motor Carrier's slot , than catch the DC Motor and match to the hole on the Base Panle , notice to keep the + sign on top as the left top of the pic shows, using M2x6(+6) Stud to screw through from the other side of the panel. Install the Structure bit: place the M2x15(+6) Stud on top of the Base panel , then let the 6mm screw bit through the hole and screw into the M2x6mm Stud.","title":"Step 1: Base panel build"},{"location":"tutorials/livera/robotAssemGuide/#step-2-body-build","text":"Install the Livera Motor Driver: simply place by matching to the Stud. Install the Structure bit: Screw M2x10(+6)mm Stud on top. Caution: Don't make it too tight while screwing with the Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard. Install HICAT.Livera with Extend Cable: carefully stack Livera on top of Livera Motor Driver, do check for the I/O ports and the outline to see weather it is matched to the Livera Motor Driver. Install the Structure bit: Screw M2x10(+6)mm Stud on top of Livera. Caution: Don't make it too tight while screwing with the Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard.","title":"Step 2: Body build"},{"location":"tutorials/livera/robotAssemGuide/#step-3-top-build","text":"Install the top Acrylic Panel: place the Top Acrylic Panel , fix the panle by screw the M2x6(+6)mm Stud on top. Stick the Power case and Servo: unpack the 3M Sticker, stick the conponents as the image shows. Connect Power: connect the 2.54mm Power connector from Power case to Livera Motor Driver. Install the Camera pan-tilt: screw the Servo Arm Set form the EMAX Servo set on the Camera Pan-tilt. Install Camera Module: carefully place the camera module on the Acrylic Camera Pan-tilt , using M2 Rivet to fix it. Install Camera Extend Cable and Laser Bean: install the conponents as the picture shows, notice that the direction of the camera module should be match together according to the indicate drawings.","title":"Step 3: Top build"},{"location":"tutorials/livera/robotAssemGuide/#step-4-wiring","text":"Wiring: wire up all the electronics(Motors, Laser, Servo) as the picture shows, for the DC Motor wring, you would need to use the screwdriver to fix the wire into the adapter. Install SD card: put the SD card into the SD slot. Install Battery: put the 9v chargable battery into the Power Case. Power up to init the Servo: switch on the Power Switch From the Motor Driver, wait until heard two movement from the Servo, then put the Camera Pan-tilt on the Servo in a horizon direction, screw it up using the smallest screw from the Servo Box. Enjoy: pick up you cell phone, connect to the Livera's wifi , ssid:hicat_xxxxxx passward:88888888 then open chrome browser , go to the web page http://192.168.1.1/mmc/webapp/index.html Switch the top video switcher to MJPG MODE , click LiveView , if the image flipped, you could change it within QUALITY, we suggest you to chose 240p/15fps. Click ROBOT to open the control panel, Try press forward button, if you see the robot spinning or move back, you could adjust the wiring by switch the DC motor wire from the adapter.","title":"Step 4: Wiring"},{"location":"tutorials/robots/robotstart/","text":"Understanding Digital I/O blah blah blah Doing something useful blah blah blah Figure out Motor direction and speed control blah blah blah","title":"Getting Started"},{"location":"tutorials/robots/robotstart/#understanding-digital-io","text":"blah blah blah","title":"Understanding Digital I/O"},{"location":"tutorials/robots/robotstart/#doing-something-useful","text":"blah blah blah","title":"Doing something useful"},{"location":"tutorials/robots/robotstart/#figure-out-motor-direction-and-speed-control","text":"blah blah blah","title":"Figure out Motor direction and speed control"}]}