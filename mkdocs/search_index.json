{
    "docs": [
        {
            "location": "/",
            "text": "This is Random Wire!\n\n\nHere you'll find some of most of my hobbies.\n\nEverything ranging from Arduino/Robotics, to Sherlock Holmes and\n\nThe Orville, and maybe even some Ham Radio Stuff.  \n\n\nSupport Me\n\n\nIf you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.\n\n\nPatreon\n\n\nKo-fi\n\n\nPayPal\n  \n\n\nOther Projects\n\n\nKD8BXP's Youtube Channel\n\n\nKD8BXP's Blog\n\n\nCredits\n\n\nCopyright (c) 2017/2018/2019 LeRoy Miller\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "Home"
        },
        {
            "location": "/#this-is-random-wire",
            "text": "Here you'll find some of most of my hobbies. \nEverything ranging from Arduino/Robotics, to Sherlock Holmes and \nThe Orville, and maybe even some Ham Radio Stuff.",
            "title": "This is Random Wire!"
        },
        {
            "location": "/#support-me",
            "text": "If you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.  Patreon  Ko-fi  PayPal",
            "title": "Support Me"
        },
        {
            "location": "/#other-projects",
            "text": "KD8BXP's Youtube Channel  KD8BXP's Blog",
            "title": "Other Projects"
        },
        {
            "location": "/#credits",
            "text": "Copyright (c) 2017/2018/2019 LeRoy Miller",
            "title": "Credits"
        },
        {
            "location": "/#license",
            "text": "This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "License"
        },
        {
            "location": "/tutorials/blink/blink/",
            "text": "Arduino Blink\n\n\nWhy is important to blink a LED?\n\n\n\n\nIt shows how digital IO works.\n\n\n\n\nvoid setup() {\n\n    pinMode(13, OUTPUT);\n\n}\n\nvoid loop() {\n\n    digitalWrite(13, HIGH);\n    delay(1000);\n    digitalWrite(13, LOW);\n    delay(1000);\n\n}\n\n\n\n\nIn the above example, we set the LED pin to be a OUTPUT - This tells the microcontroller that whatever is connected to the pin is expecting something\nfrom the controller.  A INPUT would tell the microcontroll to expect to see something (data) on that pin.\n\nInside the loop we tell PIN 13 to go HIGH, delay for 1000 microseconds (about 1 second.) and go LOW, delay again, and repeat. In this case a HIGH will turn the LED on and a LOW will turn it off.  The delay will STOP the microcontroller from doing anything else.\n\nThe the controller is delayed it can not do anything else (mostly), no other sensors can be used, or outputs have information written to them.\n\n\nIs there a better way?\n\n\nBlink without delay\n\n\nThe delay() function is blocking, so what if we need to do something else and still blink a led.\n\n\nWe can use a method like below, this allows the sketch to continue to run and still processes the blink code, about once a second.\n\n\n// Variables will change:\nint ledState = LOW;             // ledState used to set the LED\n\n// Generally, you should use \"unsigned long\" for variables that hold time\n// The value will quickly become too large for an int to store\nunsigned long previousMillis = 0;        // will store last time LED was updated\n\n// constants won't change:\nconst long interval = 1000;           // interval at which to blink (milliseconds)\n\nvoid setup() {\n  // set the digital pin as output:\n  pinMode(13, OUTPUT);\n}\n\nvoid loop() {\n  // here is where you'd put code that needs to be running all the time.\n\n  // check to see if it's time to blink the LED; that is, if the difference\n  // between the current time and last time you blinked the LED is bigger than\n  // the interval at which you want to blink the LED.\n  unsigned long currentMillis = millis();\n\n  if (currentMillis - previousMillis >= interval) {\n    // save the last time you blinked the LED\n    previousMillis = currentMillis;\n\n    // if the LED is off turn it on and vice-versa:\n    if (ledState == LOW) {\n      ledState = HIGH;\n    } else {\n      ledState = LOW;\n    }\n\n    // set the LED with the ledState of the variable:\n    digitalWrite(13, ledState);\n  }\n}",
            "title": "Blink"
        },
        {
            "location": "/tutorials/blink/blink/#arduino-blink",
            "text": "Why is important to blink a LED?   It shows how digital IO works.   void setup() {\n\n    pinMode(13, OUTPUT);\n\n}\n\nvoid loop() {\n\n    digitalWrite(13, HIGH);\n    delay(1000);\n    digitalWrite(13, LOW);\n    delay(1000);\n\n}  In the above example, we set the LED pin to be a OUTPUT - This tells the microcontroller that whatever is connected to the pin is expecting something\nfrom the controller.  A INPUT would tell the microcontroll to expect to see something (data) on that pin. \nInside the loop we tell PIN 13 to go HIGH, delay for 1000 microseconds (about 1 second.) and go LOW, delay again, and repeat. In this case a HIGH will turn the LED on and a LOW will turn it off.  The delay will STOP the microcontroller from doing anything else. \nThe the controller is delayed it can not do anything else (mostly), no other sensors can be used, or outputs have information written to them.  Is there a better way?",
            "title": "Arduino Blink"
        },
        {
            "location": "/tutorials/blink/blink/#blink-without-delay",
            "text": "The delay() function is blocking, so what if we need to do something else and still blink a led.  We can use a method like below, this allows the sketch to continue to run and still processes the blink code, about once a second.  // Variables will change:\nint ledState = LOW;             // ledState used to set the LED\n\n// Generally, you should use \"unsigned long\" for variables that hold time\n// The value will quickly become too large for an int to store\nunsigned long previousMillis = 0;        // will store last time LED was updated\n\n// constants won't change:\nconst long interval = 1000;           // interval at which to blink (milliseconds)\n\nvoid setup() {\n  // set the digital pin as output:\n  pinMode(13, OUTPUT);\n}\n\nvoid loop() {\n  // here is where you'd put code that needs to be running all the time.\n\n  // check to see if it's time to blink the LED; that is, if the difference\n  // between the current time and last time you blinked the LED is bigger than\n  // the interval at which you want to blink the LED.\n  unsigned long currentMillis = millis();\n\n  if (currentMillis - previousMillis >= interval) {\n    // save the last time you blinked the LED\n    previousMillis = currentMillis;\n\n    // if the LED is off turn it on and vice-versa:\n    if (ledState == LOW) {\n      ledState = HIGH;\n    } else {\n      ledState = LOW;\n    }\n\n    // set the LED with the ledState of the variable:\n    digitalWrite(13, ledState);\n  }\n}",
            "title": "Blink without delay"
        },
        {
            "location": "/tutorials/document/",
            "text": "Documenting Arduino Projects {#arduino-projects}\n\n\nCame across this site a few days ago, it builds websites from \"Mark Down\" text.\n\n\nThe sites can then be uploaded to github and make good documentation.\n\n\nhttp://www.mkdocs.org/\n\n\nHere is just a 'demo/test' site I made in about 3 mins and pushed to github.\n\n\nhttp://kd8bxp.github.io/Arduino-Projects/\n\n\n(I am in the process of updating this with all of the projects here)\n\n\nMaking the \"mark down\" text is easy, and the mkdoc app makes it look nice!\n\n\nhttps://guides.github.com/features/mastering-markdown/\n\n\nMkdocs - \"Mark Down\" -\n\n\nhttp://www.mkdocs.org/user-guide/configuration/\n\n\nMake Docs is a fast, simple static site generator, that\u2019s geared towards building project documentation.\n\n\nWritten in Markdown, and configured with a single YAML configuration file.\n\n\nEasy to use, and fast to generate a professional looking site with documents.\n\n\nProjects hosted on github, \u201ccome with\u201d pages - and the files generated by Mkdocs can be used as these pages.\n\n\nhttps://pages.github.com/\n\n\nMkdocs even makes it easy to push (while it\u2019s creating) the documents to github.\n\n\nhttp://www.mkdocs.org/#deploying\n\n\nIf you don\u2019t want to use Github to host your documents - that\u2019s ok too, the site generated is static, and should work on anything that can host a site (I didn\u2019t have much luck getting to work with google sites thou)\n\n\nThis site directly supports documents from github and others:\n\n\nhttps://readthedocs.org/\n\n\nGit hub has a 3 min (read) tutorial on using \u201cGithub Markdown\u201d\n\n\nhttps://guides.github.com/features/mastering-markdown/\n\n\nand mkdocs has some additional things specifically for it:\n\n\nhttp://www.mkdocs.org/user-guide/configuration/\n\n\nAs I said once before there is also something called: Gitbook\n\n\nwhich can generate books from various types of files, Markdown is one.\n\n\nhttp://www.gitbook.com\n\n\nThere are a couple (more than a couple) online Word (and others) coverters that will convert a file to markdown. Mkdocs can use those files to build a website.\n\n\nHere are a couple I tried:\n\n\nhttp://word-to-markdown.herokuapp.com/\n\n\nhttp://dillinger.io/\n\n\nWIKIs are another alternative for Documentation projects:\n\n\nHere are a few that have free accounts, I\u2019ve not tried any of them.\n\n\nhttps://wiki.wiki/\n\n\nhttps://meta.miraheze.org/wiki/Miraheze\n\n\nhttp://tiddlyspot.com/\n\n\nhttp://www.shoutwiki.com/w/index.php?title=Special%3ASearch&search=arduino&fulltext=\n\n\nGoogle Sites also has a couple of templates that are good for documenting.\n\n\nHere are a couple of DEMO sites I made - and to make changes to them is easy in the online editor:\n\n\nhttps://sites.google.com/site/demokd8bxp/\n (good basic site)\n\n\nhttps://sites.google.com/site/kd8bxpwiki/\n (Much like a wiki, and easy to add, change and update)",
            "title": "Document Projects"
        },
        {
            "location": "/tutorials/document/#documenting-arduino-projects-arduino-projects",
            "text": "Came across this site a few days ago, it builds websites from \"Mark Down\" text.  The sites can then be uploaded to github and make good documentation.  http://www.mkdocs.org/  Here is just a 'demo/test' site I made in about 3 mins and pushed to github.  http://kd8bxp.github.io/Arduino-Projects/  (I am in the process of updating this with all of the projects here)  Making the \"mark down\" text is easy, and the mkdoc app makes it look nice!  https://guides.github.com/features/mastering-markdown/  Mkdocs - \"Mark Down\" -  http://www.mkdocs.org/user-guide/configuration/  Make Docs is a fast, simple static site generator, that\u2019s geared towards building project documentation.  Written in Markdown, and configured with a single YAML configuration file.  Easy to use, and fast to generate a professional looking site with documents.  Projects hosted on github, \u201ccome with\u201d pages - and the files generated by Mkdocs can be used as these pages.  https://pages.github.com/  Mkdocs even makes it easy to push (while it\u2019s creating) the documents to github.  http://www.mkdocs.org/#deploying  If you don\u2019t want to use Github to host your documents - that\u2019s ok too, the site generated is static, and should work on anything that can host a site (I didn\u2019t have much luck getting to work with google sites thou)  This site directly supports documents from github and others:  https://readthedocs.org/  Git hub has a 3 min (read) tutorial on using \u201cGithub Markdown\u201d  https://guides.github.com/features/mastering-markdown/  and mkdocs has some additional things specifically for it:  http://www.mkdocs.org/user-guide/configuration/  As I said once before there is also something called: Gitbook  which can generate books from various types of files, Markdown is one.  http://www.gitbook.com  There are a couple (more than a couple) online Word (and others) coverters that will convert a file to markdown. Mkdocs can use those files to build a website.  Here are a couple I tried:  http://word-to-markdown.herokuapp.com/  http://dillinger.io/  WIKIs are another alternative for Documentation projects:  Here are a few that have free accounts, I\u2019ve not tried any of them.  https://wiki.wiki/  https://meta.miraheze.org/wiki/Miraheze  http://tiddlyspot.com/  http://www.shoutwiki.com/w/index.php?title=Special%3ASearch&search=arduino&fulltext=  Google Sites also has a couple of templates that are good for documenting.  Here are a couple of DEMO sites I made - and to make changes to them is easy in the online editor:  https://sites.google.com/site/demokd8bxp/  (good basic site)  https://sites.google.com/site/kd8bxpwiki/  (Much like a wiki, and easy to add, change and update)",
            "title": "Documenting Arduino Projects {#arduino-projects}"
        },
        {
            "location": "/livera/",
            "text": "Quick Start Manual\n\n\nWhat is Livera\n\n\n\n\nWelcome to start the new adventure with Hicat!! Happy hacks. :p\n\n\nIn a nutshell, Livera by Team HiCat is an open source hardware project which aims to bring machine vision features to the \nArduino\n community. It is also a good platform for building \nvisual driven robotics.\n\n\nWe've provided libraries which contain \nmachine vision\n related APIs such as:\n\n\n\n\n720hd video and photo capturing&processing\n\n\nOpenCV enabled Color-Sensitive and Object-Tracking.\n\n\nWifi enabled wireless control (this can work with the iot!) \n\n\nImage capturing and data recording onto the onboard sd card \n\n\nMobile observation and manipulation from our custom apps( web-based and native)\n\n\nProgrammable and open source.\n\n\n\n\nwhat Livera could do:\n\n\n\n\nFuture development:\n\n\nIt is always exciting to think about the future, as for the buzz of AI recently, undeniably it is the future.\n\n\nWhen we saw the article of How a \nJapanese cucumber farmer is using deep learning to sort cucumbers.\n we think Livera should be best machine vision front-end part for \nimage capturing and openCV pre-processing\n.\n\n\nWith the natural language virtual assistant and cloud deep learning platfrom, we could just teach the robot how to perform task by speaking, or let him learn by watching, that will be really awesome, like people could finally owns their own real world \nR2D2\n or \nBB8\n.\n\n\nIn conclusion:\n\n\n\n\nTheme based advance \nrobotic kit\n.\n\n\nMore advance image capturing and processing capability\n\n\nNatural language virtual assitant\n\n\nImage streaming and processing \ncloud\n \n\n\n\n\nUser Manual\n\n\nPower:\n \n\n\n\n\nLIVERA allows mulitpul ways of power supply\n\n\n\n\n3.7V lipo battery (No higher voltage)\n\n\nUSB Port (MCU)\n\n\nI/O port(VIN)\n\n\n\n\nHock Up Camera Module:\n \n\n\n\n\nThe Livera core package contains 3 main conponent, 1. Livera Board 2. Camera Module 3. Extendable Cable.\n\n\nThere are \nwhite symbols\n on top of every module, always remember to match the symbol while plugs the Camera module. \n\n\nYou could choose to directly plug in the Camera Module on to Livera Board, or use extendable cable to extend the Camera Module in order to build something like pan-tilt enabled Robot. \n\n\nConnect to Livera(access point):\n \n\n\n\n\nPower up Livera, give a few second to boot, the WIFI access point hostname \nhicat_xxxxxx\n should show up on your PC/MOBILE's wifi list. The default wifi password is: \n88888888\n \n\n\nOnce you connected to the wifi, you could try out the host API web page by IP address: 192.168.1.1\n\n\nYou could let Livera access to your local wifi(station mode) by the API web  \n192.168.1.1\n or web app \n192.168.1.1/mmc/webapp/index.html\n(the address\n/www/mmc/\n is the directory of mounted sd card address within Livera Linux, which also means you could build your own web application and copy it to the sd card, Livera will automaticly host it for you)\n\n\nYou could also change Livera's wifi name through \nlinux command line tool\n: Once you connected to LIVERA, you could Telnet into the Linux system within Livera, follow the section \nAccess into Linux(3518E)\n below, within the \n/hicat/\n folder you should find the \nlaunch.sh\n tool, run the program \n./launch.sh ap SSID password\n, or through web app.\n\n\nStation WIFI Mode:\n \n\n\n\n\nyou could let Livera connected to your \nlocal wifi hotspot\n through the web API, btw we have provide a program call \n'imhere'\n to let your got the new IP address of Livera.\n\n\nweb app: \n192.168.1.1/mmc/webapp/index.html\n(this web app should placed in the \nsd card\n, could be download on \nhttps://github.com/hicat-tech/webapp\n) offers station method.\n\n\nTest Video Feature:\n \n\n\n\n\nLIVERA has two video streaming mode \nRTSP/MJPEG\n, RTSP stands for advence \nH.264 codec raw video streaming\n which works well with our Android app or any video Players which accepted RTSP streaming protocol(suggest to use VLC player) with this IP:\nrtsp://192.168.1.1/hicat.264\n. \n\n\nMJPEG\n would be a \nWEB friendly\n video format. Once you successfully boot up Livera and connected the WIFI, you can go to the web API page \n192.168.1.1\n to test the board's functions with your web browser, btw Chrome would be the best choice.\n\n\nGo to web API page: \n192.168.1.1\n, hit the link: MJPEG Mode, you could view the live video stream via the link: \nhttp://192.168.1.1:8080\n, suggest use chrome browser to visit, also you could \nchange the video resolution\n by press the links, this resolution you choose would work for \nboth RTSP and MJPG Mode\n.\n\n\nIf you using the webapp, the custom web app which stay in the sd card and would show up here:\n192.168.1.1/mmc/webapp/index.html\n. Choose the \nMJPG MODE\n from the webapp's top right switch button, and hit the \nLiveView\n button to get Live MJPG video stream from Livera. \n\n\nAccess into Linux(3518E):\n Livera accept \ntelnet\n connections, when you connected to Livera through WIFI, you could open up your terminal, type:\n\n\ntelnet 192.168.1.1       //if you let the board connected to the router you should find the correct IP address\n\n//User:root\n//passward:(hit return directly)\n\ncd /hicat/   //firmware directory\n./launch.sh   //Main script for main operation: video setting/mount sd card\n\ncd /www/mmc  //SD card directory\n\n\n\n\nbeside the internet ways, you could also go \nserial communication\n through the given \nUART\n port on Livera. \n\n\nReset Livera:\n \n\n\n\n\n\n\nwifi reset:\n hold the reset buttom \nRST-PBC\n, you would see the led light \nSTAT\n flashing per second, count for \n3 seconds\n \nps: very careful to not let it flash more than 10 seconds,\n once you see the led flash faster, the wifi \nhicat_xxxxxx\n would comes up in your wifi list.\n\n\n\n\n\n\nfactory reset:\n make sure there is a folder named \nhicat_failsafe.tar\n, if so, hold the reset buttom \nRST-PBC\n, you would see the led light \nSTAT\n flashing per second, count for \n10 seconds\n, once you see the led flash faster, you would get a brand new Livera.\n\n\n\n\n\n\nSD Card:\n\n\nCaution:\n if you have the \nSD card which comes with the Kits\n, the needed file has already been \ninstalled\n, the below instruction shows how to set up a \nnew card\n.\n\n\nmount sd card:\n any new sd card with format(vfat&fat32) would be auto mounted. if not, stick it into the sd card slot and follow the steps below.\n\n\n\n\ngoto \n\n\nfollow the above step\naccess into Linux(3518E)\nto telnet into Livera(simular like ssh) \n\n\ngoto the address \n\n\n\n\n`cd /hicat/` \n\n\n\n\n\n\nwithin the \nhicat\n directory you should find the command line tool named \nlaunsh.sh\n \n\n\nthen go \n\n\n\n\n./launch.sh sd\n\n//you should see 4 options `format|mount|umount|hicatEx`, `format` means format the sd card into `fat32` file system which works like this command below:\n\n ./launch.sh sd format\n\n\n\n\n\nmount&umount would let you mount the sd card to \n/www/mmc\n directory, hicatEx would helps you to depackage the \nhicatEx.tar\n (put it into sd card before you go \nhicatEx\n) which contains some important programs for Livera's system. \n- do \nformat\n first(format the sd card into fat32 in your pc/mac would be okay), then go \nmount\n, finally \nhicatEx\n.\n- once you finished format and mount the sd card there will be you could chose to put the   \nOpenCV lib\n into \nopencv\n folder incase for opencv demo.\n\n\nAndroid APP:\n\n\nAPP main page:\n\n\n\n\nWe've provided a custom android app for Livera, you could download it on our github page: \nhttps://github.com/hicat-tech/livera-android\n, the APP could help you liveview video, control robots, and access to livera's web app.\n\n\nDo not forget the turn the livera into \nRTSP(H264) Mode\n before live viewing the video or access into robot control.\n\n\nWeb app:\n\n\n\n\nThe web app provides functions like Video recording, Live streaming, Livera setting, \n\n\nWhat an amazing feature about livera is that it could \nserve web pages\n as web app thanks to the file streaming server, in Livera's demo, we've provided a single page web app which based on \nVUE.js\n, the app would work as Livera's command panel.\n\n\nTo use the web app you could go download the web app \nhere:https://github.com/hicat-tech/webapp\n\n\nThe web server within Livera also provide \nREST API\n which allows you to communicate with Livera through AJAX, have a look at detailed description within \nAPI GUIDE\n.\n\n\nHardware\n\n\nLivera\n\n\nLivera's given I/O port has connected into \nMCU(Atmel 32u4)\n, and the pin layout is pretty much likely to \nArduino Mini\n, you could program it with arduino IDE through the given \nUSB port\n, select the board to \narduino leonardo\n.\n\n\n\n\nWe've also placed a mpu6050 6-axie accelerometer on Livera, this would help in case of self-balance vehicle, there is 3 I/O port been connected MCU(32u4), there are I2C(D2:SDA,D3:SCL) and interrupt(D7)\n\n\nDesign file:\n The Robot kit's Laser cut Acrylic CAD file contains the \ndimensions of LIVERA\n, you could use it to build your custom case for Livera. Links \nhere\n.\n\n\nLivera Hardware Architecture:\n\n\n\n\nArduino(MCU) I/O Pin Indicate:\n\n\n\n\nMotor Driver\n\n\n\n\nPort Indicator:\n \nMotor Driver -> Hicat.Livera\n\n\n\n\nMotor Port 1(M1):\n \nM1-1 -> A5\n, \nM1-2 -> A4\n.\n\n\nMotor Port 2(M2):\n \nM2-1 -> A3\n, \nM2-2 -> A2\n.\n\n\nMotor Port 3(M3):\n \nM3-1 -> D8\n, \nM3-2 -> D6\n.\n\n\n\n\nMotor Port 4(M4):\n \nM4-1 -> D5\n, \nM4-2 -> D4\n.\n\n\n\n\n\n\nServo Motor Port:\n \n11 -> D11, 10 -> D10, 9 -> D9, 13 -> D13\n\n\n\n\n\n\nThe Livera Motor Driver was designed specially for Livera, so that you can directly plug onto Livera, in this way you would get almost everything you need for a \nrobotic system\n.\n\n\nLivera Motor Driver can power up \n4 DC motors\n and \n3 Servo Motors\n, with external power input. \n\n\nThe Robot kit Assembly Guide\n\n\n\n\nLike the picture shows, the Livera Robot kit ccomes with several conponents that you need you assemble and make it to a fully functional robot. This toturial would get you through all the process of \nphysical building and wiring,\n it might take around \n25 minutes\n to make the robot alive. Clear up your desk, unpack the Robot kit and let begin the journey.\n\n\nParts list\n\n\n\n\n\n\nThe Livera Robot kit comes with following parts:\n\n\n\n\nBoards:\n HICAT.Livera Boardx1 Livera Motor Driver Boardx1\n\n\nCamera:\n Livera Camera Extend Cablex1 Livera Camera Modulex1\n\n\nStorage:\n2G SD Card with firmware built in\n\n\nGuidebook:\n Livera GuideBookx1 Livera Robot Assembly GuideBookx1\n\n\nPower:\n 9V Lipo Battery and Bat Carrier\n\n\nMotor:\n E-MAX SERVOx1 DC Gear Motor set(Motor + Motor Carrier + Wheels)x2\n\n\nStructure bits:\n Robot Base Acrylic Panels set, Omni-directional Wheel Set \n\n\nScrews:\n M2x15(+6)mm Nylon Studx4, M2x6mm Nylon Studx4, M2x6(+6)mm Nylon Studx8, M2x10(+6)mm Nylon Studx8, M2 Nylon Nutx4 \n\n\nOUTPUT:\n LASER Beanx1\n\n\nAccessories:\n Stickersx1, USB Cablex1, Screwdriver(+,-)x1\n\n\n\n\nhttps://www.discourse.org/\nVideo Tutorial\n\nWe've also created a video toturial to give you a more detailed, much clear step by step toturial, would help you with:\n\n\n\n\nPyhsical Assembly\n\n\nWebapp Guide\n\n\n\n\n\n    \n\n\n\n\n\nDesign file:\n The Robot kit's Laser cut Acrylic CAD file contains the \ndimensions of LIVERA\n, you could use it to build your custom case for Livera. Links \nhere\n.\n\n\nStep 1: Base panel build\n\n\n\n\nUnpack the Livera Robot kit package, Find out the following conponents in order to build the base panel of the Robot.\n\n\n\n\nRobot Base Acrylic Panel x1\n\n\nDC Motor + Motor Carrier x2\n\n\nOmni-directional Wheel Set x1\n\n\nM2x15(+6)mm Nylon Stud x4\n\n\nM2x6mm Nylon Stud x4\n\n\nM2x6(+6)mm Nylon Stud x4\n\n\nM2 Nylon Nut x4\n\n\n\n\nNotice:\n All the Stud could be install by hand, doesn't require and tools.\n\nCaution:\n Don't make it too tight while screwing with the \nLivera and Livera Motor Driver\n, might have a small chance to cause damage to the board if you screw it too hard. \n\n\n\n\nAssemble up the \nOmni-direction Wheel Set\n like the picture shows, then close up with the \nCover bit\n, waiting for screw on the \nBase Panel.\n \n\n\n\n\n\n\n\n\nInstall the motor on base panel:\n carefully place the \nM2 Nut\n onto the \nMotor Carrier's slot\n, than catch the \nDC Motor\n and match to the hole on the \nBase Panle\n, notice to keep the \n+\n sign on top as the left top of the pic shows, using \nM2x6(+6) Stud\n to screw through from the other side of the panel.\n\n\nInstall the Structure bit:\n place the \nM2x15(+6) Stud\n on top of the \nBase panel\n, then let the \n6mm screw bit\n through the hole and screw into the \nM2x6mm Stud.\n\n\n\n\nStep 2: Body build\n\n\n\n\n\n\nInstall the Livera Motor Driver:\n simply place by matching to the \nStud.\n\n\nInstall the Structure bit:\n Screw \nM2x10(+6)mm Stud\n on top.\n\n\n\n\nCaution:\n Don't make it too tight while screwing with the \nLivera and Livera Motor Driver\n, might have a small chance to cause damage to the board if you screw it too hard. \n\n\n\n\n\n\nInstall HICAT.Livera with Extend Cable:\n carefully stack \nLivera\n on top of \nLivera Motor Driver,\n do check for the \nI/O ports\n and the \noutline\n to see weather it is matched to the \nLivera Motor Driver.\n\n\nInstall the Structure bit:\n Screw \nM2x10(+6)mm Stud\n on top of Livera.\n\n\n\n\nCaution:\n Don't make it too tight while screwing with the \nLivera and Livera Motor Driver\n, might have a small chance to cause damage to the board if you screw it too hard.\n\n\nStep 3: Top build\n\n\n\n\n\n\nInstall the top Acrylic Panel:\n place the \nTop Acrylic Panel\n, fix the panle by screw the \nM2x6(+6)mm Stud\n on top.\n\n\nStick the Power case and Servo:\n unpack the \n3M Sticker,\n stick the conponents as the image shows.\n\n\nConnect Power:\n connect the 2.54mm Power connector from \nPower case\n to \nLivera Motor Driver.\n\n\n\n\n\n\n\n\nInstall the Camera pan-tilt:\n screw the Servo Arm Set form the \nEMAX Servo set\n on the \nCamera Pan-tilt.\n\n\nInstall Camera Module:\n carefully place the camera module on the \nAcrylic Camera Pan-tilt\n, using \nM2 Rivet\n to fix it.\n\n\nInstall Camera Extend Cable and Laser Bean:\n install the conponents as the picture shows, notice that the \ndirection\n of the camera module should be \nmatch together\n according to the \nindicate drawings.\n\n\n\n\nStep 4: Wiring\n\n\n\n\n\n\nWiring:\n wire up all the electronics(Motors, Laser, Servo) as the picture shows, for the \nDC Motor\n wring, you would need to use the screwdriver to fix the wire into the adapter.\n\n\nInstall SD card:\n put the \nSD card\n into the SD slot.\n\n\n\n\n\n\n\n\nInstall Battery:\n put the \n9v chargable battery\n into the \nPower Case.\n\n\nPower up to init the Servo:\n switch on the \nPower Switch\n From the Motor Driver, wait until heard \ntwo movement\n from the \nServo,\n then put the \nCamera Pan-tilt\n on the \nServo\n in a \nhorizon direction,\n screw it up using the smallest screw from the Servo Box.\n\n\nEnjoy:\n pick up you cell phone, connect to the \nLivera's wifi\n,\n\n\n\n\nssid:hicat_xxxxxx\npassward:88888888\n\n\n\n\nthen open \nchrome browser\n, go to the web page \n\n\nhttp://192.168.1.1/mmc/webapp/index.html\n\n\n\n\n\n\n\n\nSwitch the top video switcher to \nMJPG MODE\n, click \nLiveView\n, if the image flipped, you could change it within \nQUALITY,\n we suggest you to chose \n240p/15fps.\n\n\n\n\n\n\nClick \nROBOT\n to open the control panel, Try press forward button, if you see the robot \nspinning\n or \nmove back,\n you could adjust the wiring by switch the \nDC motor\n wire from the adapter.\n\n\n\n\n\n\nSoftware\n\n\nFirmware\n\n\nLivera frimware is basically embedded Linux shell script with some executable program, which works immediately while Livera power on, keeping all the functions like \nMJPG/H264 Server\n, \nBridge System\n, \nRest API\n works.\n\n\nAndroid\n\n\nWe've provided a custom android app for Livera, you could download it on our github page: \nhttps://github.com/hicat-tech/livera-android\n, the APP could help you liveview video, control robots, and access to livera's web app.\n\n\nDo not forget the turn the livera into \nRTSP(H264) Mode\n before open the liveview and robot function.\n\n\nAPP main page:\n\n\n\n\nRobot control panel:\n\n\n\n\nWeb app\n\n\n\n\nThe web app provides functions like Video recording, Live streaming, video download, wifi setting, visual tracking.\n\n\nRTSP/MJPG MODE SWITCH:\nOnce you open up the web app in your browser, the First thing to do is to select a video mode from \nRTSP\n to \nMJPG\n, after the selection you would immediately see some of UI changed according to different mode.\n\n\n\n\nWhat an amazing feature about livera is it could \nserve web pages\n as web app thanks to the file streaming server, in Livera's demo, we've provided a single page web app which based on \nVUE.js\n, the app would work as Livera's command panel.\n\n\nTo use the web app you could go download the web app \nhere\n\n\nThe server also provide \nREST API\n which allows you to communicate with Livera through AJAX\n\n\n\n\n\nExample Code\n\n\nImage Capturing\n\n\n1. Image capture with Arduino Way\n\n\n\n    #include \"hicat.h\"\n\n    void setup()\n    {\n        hicat.begin();\n\n        char name[16] = \"0.jpg\";\n        for (int i = 0; i \n<\n 8; i++)\n        {\n            name[0] = '0' + i;\n            hicat.snapshot(name);\n\n            delay(10);\n        }\n    }\n\n    void loop()\n    {\n    }\n\n\n\n\n2. Image capture with WEB Way\n\n\nLivera's build in web server accept \nrest API\n, for detail description you could check out the \nWEB API\n guide. \n\n\nOne thing you have to Notice is that Livera has \ntwo image streming mode\n, which are \nMJPG\n for web and \nH264\n for more advance video streaming.\n\n\n\n\nFor Video Capturing:\n \n\n\n\n\n\n    //type the url directly within browser\n    //IP address could be different if you use station mode.\n\n    //first step, make sure you are in H264(RTSP) Mode\n    192.168.1.1/hicat/videoServer?mode=0\n\n    //Second step, start capture\n    192.168.1.1/hicat/record?save=1\n\n    //finally, stop\n    192.168.1.1/hicat/record?save=0\n\n    //AJAX is also avaliable, here is example with client side javascript\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=0', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            \n         }\n        xhr.send()\n\n\n\n\n\n\n\n\nFor Image Capturing:\n \n\n\n\n\n\n    //type the url directly within browser\n    //IP address could be different if you use station mode.\n\n    //first step, make sure you are in MJPG Mode\n    192.168.1.1/hicat/videoServer?mode=1\n\n    //Second step, start capture image\n    //you could set up the image name xxx.jpg and stored direction '/www/mmc' is the SD card's directory\n    192.168.1.1/hicat/snapshot?name=xxx.jpg&dir=/www/mmc/video/\n\n    //AJAX is also avaliable, here is example with client side javascript\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=1', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            \n         }\n        xhr.send()\n\n\n\n\n\n\n3. Image capture with Linux(c/c++) Way\n\n\nWe've cross compile a tool call \ncurl\n which will help you to control Livera with the \nweb api\n\n\n\n    //telnet/serial/arduino into Livera's terminal\n    //type the command below to invoke the web api. for detailed info please check out the web api section within the API GUIDE\n\n    curl http://127.0.0.1/hicat/record?save=1 //trigger h.264 video capture\n\n\n\n\nRobot Kit\n\n\nWebsocket and bridge system:\n bridge is a \nwebsocket server\n that runs on the \nlinux core\n, help to accept websocket connections to Livera on\nport 7681\n and transfer the information to \nMCU(32u4)\n.\n\n\nWebsocket Example:\nwe've built a websocket bridge server to help to transport text message from front-end web client to Arduino.\n\n\n\n    //server on port 7681\n    var WebSocketURL = 'ws://' + window.location.hostname + ':7681'\n\n    ws = new WebSocket(WebSocketURL);\n\n    ws.onopen = function(event) {\n        console.log('ws connection opened:' + WebSocketURL);\n    }\n    ws.send(`msg`);\n    ws.close();\n\n\n\n\n\n\n    // hicat robot demo\n    // get SerialCommand library from https://github.com/hicat-tech/Arduino-SerialCommand\n\n    #include \n\n#include \n\n\nint PWM1 = 10;   //control servo\nint PWM_CE = 11;  //servo enable\n\nint AIN1 = 4;  //control motor\nint AIN2 = 5;  //control motor\nint AIN3 = 6;  //control motor\nint AIN4 = 8;  //control motor\n\nint BIN3 = A2;  //control laser\nint BIN4 = A3;  //control laser\n\nServo myservo;\nSerialCommand sCmd;\n\nuint8_t camera_angle = 120;\nuint8_t camera_angle_range[] = {\n  60, 150\n};\nuint8_t laser_is_on = 0;\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial1.begin(115200);\n  // initialize the digital pin as an output.\n  pinMode(AIN1, OUTPUT);\n  pinMode(AIN2, OUTPUT);\n  pinMode(AIN3, OUTPUT);\n  pinMode(AIN4, OUTPUT);\n  pinMode(BIN3, OUTPUT);\n  pinMode(BIN4, OUTPUT);\n  digitalWrite(BIN3, LOW);  // turn off LASER\n  digitalWrite(BIN4, LOW);\n\n  pinMode(PWM_CE, OUTPUT);\n  myservo.attach(PWM1);\n  digitalWrite(PWM_CE, HIGH);\n  myservo.write(camera_angle);\n  digitalWrite(PWM_CE, LOW); //disable servo\n\n\n  // Setup callbacks for SerialCommand commands\n  sCmd.addCommand(\"laser\", trigger_laser);          // trigger laser\n  sCmd.addCommand(\"camera\", adjust_camera);         //\n  sCmd.addCommand(\"motor\", set_motor);\n  sCmd.setDefaultHandler(unrecognized);      // Handler for command that isn't matched  (says \"What?\")\n}\n\n// the loop routine runs over and over again forever:\nvoid loop() {\n  sCmd.readSerial();\n}\n\nvoid trigger_laser()\n{\n  if (laser_is_on) {\n    digitalWrite(BIN3, LOW);  // turn off LASER\n    laser_is_on = 0;\n    Serial.println(\"laser off\");\n  }\n  else {\n    digitalWrite(BIN3, HIGH);  // turn on LASER\n    laser_is_on = 1;\n    Serial.println(\"laser on\");\n  }\n}\n\nvoid adjust_camera()\n{\n  char *param;\n\n  param = sCmd.next();\n  if (!strcmp(param, \"down\")) {\n    if (camera_angle \n<\n camera_angle_range[1]) {\n      camera_angle += 10;\n\n      digitalWrite(PWM_CE, HIGH);\n      myservo.write(camera_angle);\n      digitalWrite(PWM_CE, HIGH);\n    }\n  }\n  else if (!strcmp(param, \"up\")) {\n    if (camera_angle > camera_angle_range[0]) {\n      camera_angle -= 10;\n\n      digitalWrite(PWM_CE, HIGH);\n      myservo.write(camera_angle);\n      digitalWrite(PWM_CE, HIGH);\n    }\n  }\n\n  Serial.print(\"camera angle: \");\n  Serial.println(camera_angle);\n}\n\nvoid set_motor()\n{\n  char *param;\n  int16_t left = 0;\n  int16_t right = 0;\n\n  param = sCmd.next();\n  if (param == NULL) {\n    return;\n  }\n  left = atoi(param);\n\n  param = sCmd.next();\n  if (param == NULL) {\n    return;\n  }\n  right = atoi(param);\n\n  Serial.print(\"motor \");\n  Serial.print(left);\n  Serial.print(\" \");\n  Serial.println(right);\n\n\n  if (left > 30) {\n    analogWrite(AIN2, left);\n    digitalWrite(AIN1, LOW);\n  } else if (left \n<\n -30)  {\n    analogWrite(AIN2, 255 + left);\n    digitalWrite(AIN1, HIGH);\n  }\n  else {\n    digitalWrite(AIN1, LOW);\n    digitalWrite(AIN2, LOW);\n  }\n\n  if (right > 30) {\n    analogWrite(AIN3, right);\n    digitalWrite(AIN4, LOW);\n  }\n  else if (right \n<\n -30) {\n    analogWrite(AIN3, 255 + right);\n    digitalWrite(AIN4, HIGH);\n  }\n  else {\n    digitalWrite(AIN3, LOW);\n    digitalWrite(AIN4, LOW);\n  }\n\n}\n\n\n// This gets set as the default handler, and gets called when no other command matches.\nvoid unrecognized(const char *command) {\n  Serial.println(\"What?\");\n}\n\n\n\n\n\n\n\n\n\n\nAdvance\n\n\nAPI GUIDE\n\n\n1.WEB API\n\n\nThe Web API contains a set of REST API in order to interact with LIVERA in a convenient way through \nAJAX\n or \nURL\n. \n\n\nAJAX Example:\nthe below could be run in general font-end javascript client side.\n\n\n\n\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=0', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            \n         }\n        xhr.send()\n    }\n\n\n\n\n\nWebsocket and bridge system:\n bridge is a \nwebsocket server\n that runs on the \nlinux core\n, help to accept websocket connections to Livera on\nport 7681\n and transfer the information to \nMCU(32u4)\n.\n\n\nWebsocket Example:\nwe've built a websocket bridge server to help to transport text message from front-end web client to Arduino.\n\n\n\n                //server on port 7681\n                var WebSocketURL = 'ws://' + window.location.hostname + ':7681'\n\n                ws = new WebSocket(WebSocketURL);\n\n                ws.onopen = function(event) {\n                    console.log('ws connection opened:' + WebSocketURL);\n                }\n                ws.send(`msg`);\n                ws.close();\n\n\n\n\n1.\nSet up Video Streaming Mode:\n This API allows you to swith between \nRTSP\n and \nMJPEG\n streaming mode, be careful that \nVideo Record API\n only works under \nRTSP Mode\n, and \nScreen Shot API\n only works under \nMJEPG Mode\n.\n\n\n/hicat/videoServer?mode=0\n\n\n\n\nmode=0\n: RTSP Server Start\n\nmode=1\n: MJPEG Mode\n\n\n2.\nStation Mode\n: Let Livera link to local wifi router\n\n\n/hicat/stationMode?ssid=xxxxx&password=xxxxxxx\n\n\n\n\nreturn messages:\n\nsuccess\n: none return\n\nerror\n:{\"result\":\"ERROR\"}\n\n\n3.\nWIFI Access Point\n: Make Livera to AP mode\n\n\n/hicat/apMode?ssid=xxxxx&password=xxxxxxx\n\n\n\n\nreturn messages(object):\n\nsuccess\n: none return\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n4.\nSet Livera time\n: Synchronous time with Livera, the time also affect to the default video name. \n\n\n/hicat/setTime?time=%d-%d-%d-%d-%d-%d\n\n\n\n\nExample\n: /hicat/setTime?time=2018-09-09-01-01-01\n\nsuccess\n\uff1a{\"result\":\"OK\"}  \n\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n5.\nGet Video Download Links\n: This API will return a JASON format(\n{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]}\n) message about all the file within \nvideo folder\n in SD Card. Once you get the fileName you could just go to this url \nhttp://192.168.1.1/mmc/video/xxxxx.264\n to download it(might figure your IP address under station mode).\n\n\n/hicat/files\n\n\n\n\nsuccess\n:{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]}  \n\n\nerror\n:{\"result\":\"ERROR\"}\n\n\n6.\nVideo Record\n: This API allows you to record and delete the video and auto save into the default \nvideo\n folder in SD card.\n\n\n/hicat/record?save=1\n/hicat/record?del=xxxxxxxx.h264\n\n\n\n\nsave=1\n: start recording\n\nsave=0\n: stop recording and save\n\ndel=xxxxxxxx.h264\n: delete file xxxxxxxx.h264\n\nsuccess\n\uff1a{\"result\":\"OK\"}  \n\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n7.\nVideo Setting\n: Switch video angle, video resolution and video fps.\n\n\n/hicat/setCamera?resolve=1&rotate=0&fps=20\n\n\n\n\nsuccess\n\uff1a{\"result\":\"OK\"}  \n\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n//only work under mjpg mode\n\n\n8.\nSnapshot\n: snap shot form one of the frame form MJPEG stream. We suggest to make the direction to /www/mmc/video/ coz the photo info could be receive under \n/hicat/files\n API.\n\n\n/hicat/snapshot?name=xxx.jpg&dir=/www/mmc/video/\n\n\n\n\nsuccess\n\uff1a{\"result\":\"OK\"}    \n\n\n9.\nFor test\n: test api, do nothing but test.\n\n\n/hicat/test\n\n\n\n\nsuccess\n\uff1a{\"result\":\"OK\"}   \n\n\n2.Embedded Linux API\n\n\nDetail information could be view under our github \nlibhicat\n, There are instructions guide you through development tools set up and workflow, please have a look.\n\n\n#ifndef _LIBHISIV_H_\n#define _LIBHISIV_H_\n\n#ifdef __cplusplus \nextern \"C\" { \n#endif\nint venc_exit(int n);\nint venc_init(int resolve);//0:720P 1:QVGA(320*240) 2:VGA(640*480)\nint venc_init_more(int resolve,int mode,int fps);//resolve: 0/1/2  1280*720/320*240/640*480  mode: 0/1 H264/MJPEG\nint venc_requestIDR();//request IDR frame\nint venc_getFrame(char* buffer,int *datalen,int *pts,int *type);\nint venc_snap(char* buff,int xRes,int yRes);\nint venc_getYUV(int mode,char*buff);//mode=0 Y  mode=1 UV mode = 3 YUV420(SP)\nint venc_rotate(int dir);\n\n//for audio\nextern int aenc_init(int mode);// 0/1 PT_LPCM/AAC/\nextern int aenc_getFrame(char* buff);\nextern int aenc_exit();\n//jpeg to http\nextern int libyuvdist_startYuvDistService(int port);\nextern int libyuvdist_updateYuv(int iHandle,char* data,int len,int seq,unsigned long timeStamp);\nextern int libyuvdist_stopYuvDistService(int iHandle);\nextern int libyuvdist_setSettingCallback(int iHandle,int func);//int func(int resX,int resY,int fps)\n\n#ifdef __cplusplus \n}\n#endif\n#endif\n\n\n\n\n3.Arduino Libray API\n\n\nThe Arduino library wraps the web api, using serial communication and curl to communicate and send command to the video core(HI3518E). There are also example codes could be find in \ngithub\n\n\n#ifndef _HICAT_H_\n#define _HICAT_H_\n\n#include <Arduino.h>\n\nclass HiCat\n{\npublic:\n    HiCat();\n    int begin(void);\n\n    /**\n     * Take a picture\n     *\n     * @param file_name     picture name\n     * @return 0 - OK, otherwise - error code\n     */\n    int snapshot(const char *file_name);\n\n    /**\n     * Start to record a video which is saved at /www/mmc/video/\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int record();\n\n    /**\n     * Stop to record a video\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int stop_recording();\n\n    /**\n     * Set camera format\n     *\n     * @param resolution    0 - 1280*720, 2 - 640*480, 1 - 320*240\n     * @param rotation      0 - no rotation, 1 - 180 degree rotation\n     * @param fps           frame per secord from 1 to 25\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_camera(int resolution, int rotation, int fps);\n\n    /**\n     * Set Wi-Fi mode\n     *\n     * @param mode  0 - AP mode, 1 - Station mode\n     * @param ssid  SSID\n     * @param password  password\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_wifi(int mode, const char *ssid, const char *password);\n\n    /**\n     * Run a shell command\n     *\n     * @param command   shell command\n     * @return 0 - OK, otherwise - error code\n     */\n    int run(const char *command);\n\nprivate:\n    void prepare_web_command();\n    int read_result();\n};\n\nextern HiCat hicat;\n\n\n#endif // _HICAT_H_\n\n\n\n\nHI3518EV100 SDK\n\n\nContent within SDK:\n\n\n\n\nlinux\n\n\nfile system \n\n\nHi3518E Documentation&Hardware design reference\n\n\ndownload address:\n \ndownload link\n  \nverifycode:\n \nkspc\n   \ndecode password:\n \nlk87612umzvcb01qqsalv\n\n\n\n\nHow to burn the firmware to flash\n\n\nyou must have a hicat board with a uboot already burned.\n\n\nthen connect the UART0 on the ARM9 Hisiv chip. and then use the command as below[recomendly using Hyper Terminal to finish this]:\n\n\nloady 0x82000000\n\n\n\n\nthen send file on Hyper Terminal with xmodern protocal. choose the uImage file under https://github.com/9crk/libhisiv/opt/\n\n\nsf probe 0\nsf erase 0x100000 0x300000\nsf write 0x82000000 0x100000 0x300000    \nloady 0x82000000\n\n\n\n\nthen send the rootfs file to the board.\n\n\nsf erase 0x400000 0xC00000\nsf write 0x82000000 0x400000 0x500000\nsetenv bootargs 'mem=32M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 mtdparts=hi_sfc:1M(boot),3M(kernel),12M(rootfs)'\nsetenv bootcmd 'sf probe 0;sf read 0x82000000 0x100000 0x300000;bootm 0x82000000'\nsaveenv\n\n\n\n\nthen reboot the board or execute 'reset' command.\n\n\nAbout rtspserver and libhisiv.a\n\n\nrtspserver have two demo:\n\n one is modified from live555 project. ( live555MediaServer )\n\n source code is in https://bitbucket.org/zhouhua/hicat_rtspserver\n* play Address: rtsp://192.168.1.1/hicat.264\n\n\nHow to install software pack\n\n\n\n\nexecute 'lrz' command to send libhicat/opt/hi_sd.sh into the board (any where)\n\n\nformat the sd card with fat32 format in default param. or use mkfs.vfat on Linux OS\n\n\nthen execute \nchmod +x hi_sd.sh && ./hi_sd.sh\n, the board will reboot\n\n\n\n\nHow to upgrade\n\n1. Formating the SD card with vfat or fat32 mode.\n2. then copy the hicat2016xxxx.tar package to the SD card.\n3. press the reset button (RST_PBC)\n4. connect the power supply.\n5. wait for the board reset again.\n\n\nWhat's more\n\n \nzwebs\n https://9crk@bitbucket.org/zhouhua/hicat_zwebs.git\n\n\nHow to use programming with serial port on Hisiv\n\n \nlibSerial\n https://github.com/9crk/libSerial.git\n\n\nLinux SDK Source Code\n can be view \nhere\n\n\nopenCV\n\n\nHow to use opencv Demo\n\n\n\n\nclone \nthis\n repo\n\n\nthen install the compiler\n\n\ncompile the apps under 'app' dir with \n./build.sh\n\n\ncopy the app dir to the board\n\n\ncopy the opt/opencvlib dir to the board at /www/mmc/opencv/opencvlib\n\n\ncd app && source env.sh\n\n\nexecute './capture'\n to capture an image named 'myImage.jpg'\n\n\nexecute './match model.jpg'\n to find the object model.jpg in the camera.\n\n\nthen you can browser the result hi.jpg on http://192.168.1.1/mmc/opencv/hi.jpg\n\n\n\n\nThe way To do \nblack-line tracking.\n\n\n1.check out the files.\n \n\n\n~/libhicat/app$ ls__\n\nbuild.sh capture.cpp hi.html match model2.jpg myImage.jpg capture env.sh hi.jpg match.cpp model.jpg\n\n\n\n\n2.copy capture.cpp as a demo\n\n\ncp capture.cpp lineTrack.cpp\n\n\n\n\n3.modify build.sh, add content below\n\n\narm-hisiv100nptl-linux-g++ lineTrack.cpp ../lib/libhisiv.a -I../include -lpthread -lm -o lineTrack\n\n\n\n\n4.compile\n\n\n./build.sh\n\n\n\n\n#include<stdio.h>\n#include<stdlib.h>\n#include<unistd.h>\n#include\"libhisiv.h\"\nint main(int argc,char* argv[])\n{\n\nchar data[1280*720];\nint len;\nint i;\nlen = venc_getYUV(0,data);\n\n    int x,y;\n    int result[10];\nfor(i=0;i<10;i++){\n    result[i] = 0;\n}\nfor(i=0;i<10;i++){\n    for(y=635;y<(635+10);y++){\n        for(x=i*72;x<(i+1)*72;x++){\n            result[i]+=data[y*1280+x];\n        }\n    }\n    result[i] = result[i]/(72*10);\n}\nfor(i=0;i<10;i++){\n    result[i] = 0;\n    printf(\"result = %d\\n\",result[i]);\n}\n}",
            "title": "Documentation"
        },
        {
            "location": "/livera/#quick-start-manual",
            "text": "What is Livera   Welcome to start the new adventure with Hicat!! Happy hacks. :p  In a nutshell, Livera by Team HiCat is an open source hardware project which aims to bring machine vision features to the  Arduino  community. It is also a good platform for building  visual driven robotics.  We've provided libraries which contain  machine vision  related APIs such as:   720hd video and photo capturing&processing  OpenCV enabled Color-Sensitive and Object-Tracking.  Wifi enabled wireless control (this can work with the iot!)   Image capturing and data recording onto the onboard sd card   Mobile observation and manipulation from our custom apps( web-based and native)  Programmable and open source.   what Livera could do:   Future development:  It is always exciting to think about the future, as for the buzz of AI recently, undeniably it is the future.  When we saw the article of How a  Japanese cucumber farmer is using deep learning to sort cucumbers.  we think Livera should be best machine vision front-end part for  image capturing and openCV pre-processing .  With the natural language virtual assistant and cloud deep learning platfrom, we could just teach the robot how to perform task by speaking, or let him learn by watching, that will be really awesome, like people could finally owns their own real world  R2D2  or  BB8 .  In conclusion:   Theme based advance  robotic kit .  More advance image capturing and processing capability  Natural language virtual assitant  Image streaming and processing  cloud     User Manual  Power:     LIVERA allows mulitpul ways of power supply   3.7V lipo battery (No higher voltage)  USB Port (MCU)  I/O port(VIN)   Hock Up Camera Module:     The Livera core package contains 3 main conponent, 1. Livera Board 2. Camera Module 3. Extendable Cable.  There are  white symbols  on top of every module, always remember to match the symbol while plugs the Camera module.   You could choose to directly plug in the Camera Module on to Livera Board, or use extendable cable to extend the Camera Module in order to build something like pan-tilt enabled Robot.   Connect to Livera(access point):     Power up Livera, give a few second to boot, the WIFI access point hostname  hicat_xxxxxx  should show up on your PC/MOBILE's wifi list. The default wifi password is:  88888888    Once you connected to the wifi, you could try out the host API web page by IP address: 192.168.1.1  You could let Livera access to your local wifi(station mode) by the API web   192.168.1.1  or web app  192.168.1.1/mmc/webapp/index.html (the address /www/mmc/  is the directory of mounted sd card address within Livera Linux, which also means you could build your own web application and copy it to the sd card, Livera will automaticly host it for you)  You could also change Livera's wifi name through  linux command line tool : Once you connected to LIVERA, you could Telnet into the Linux system within Livera, follow the section  Access into Linux(3518E)  below, within the  /hicat/  folder you should find the  launch.sh  tool, run the program  ./launch.sh ap SSID password , or through web app.  Station WIFI Mode:     you could let Livera connected to your  local wifi hotspot  through the web API, btw we have provide a program call  'imhere'  to let your got the new IP address of Livera.  web app:  192.168.1.1/mmc/webapp/index.html (this web app should placed in the  sd card , could be download on  https://github.com/hicat-tech/webapp ) offers station method.  Test Video Feature:     LIVERA has two video streaming mode  RTSP/MJPEG , RTSP stands for advence  H.264 codec raw video streaming  which works well with our Android app or any video Players which accepted RTSP streaming protocol(suggest to use VLC player) with this IP: rtsp://192.168.1.1/hicat.264 .   MJPEG  would be a  WEB friendly  video format. Once you successfully boot up Livera and connected the WIFI, you can go to the web API page  192.168.1.1  to test the board's functions with your web browser, btw Chrome would be the best choice.  Go to web API page:  192.168.1.1 , hit the link: MJPEG Mode, you could view the live video stream via the link:  http://192.168.1.1:8080 , suggest use chrome browser to visit, also you could  change the video resolution  by press the links, this resolution you choose would work for  both RTSP and MJPG Mode .  If you using the webapp, the custom web app which stay in the sd card and would show up here: 192.168.1.1/mmc/webapp/index.html . Choose the  MJPG MODE  from the webapp's top right switch button, and hit the  LiveView  button to get Live MJPG video stream from Livera.   Access into Linux(3518E):  Livera accept  telnet  connections, when you connected to Livera through WIFI, you could open up your terminal, type:  telnet 192.168.1.1       //if you let the board connected to the router you should find the correct IP address\n\n//User:root\n//passward:(hit return directly)\n\ncd /hicat/   //firmware directory\n./launch.sh   //Main script for main operation: video setting/mount sd card\n\ncd /www/mmc  //SD card directory  beside the internet ways, you could also go  serial communication  through the given  UART  port on Livera.   Reset Livera:      wifi reset:  hold the reset buttom  RST-PBC , you would see the led light  STAT  flashing per second, count for  3 seconds   ps: very careful to not let it flash more than 10 seconds,  once you see the led flash faster, the wifi  hicat_xxxxxx  would comes up in your wifi list.    factory reset:  make sure there is a folder named  hicat_failsafe.tar , if so, hold the reset buttom  RST-PBC , you would see the led light  STAT  flashing per second, count for  10 seconds , once you see the led flash faster, you would get a brand new Livera.    SD Card:  Caution:  if you have the  SD card which comes with the Kits , the needed file has already been  installed , the below instruction shows how to set up a  new card .  mount sd card:  any new sd card with format(vfat&fat32) would be auto mounted. if not, stick it into the sd card slot and follow the steps below.   goto   follow the above step access into Linux(3518E) to telnet into Livera(simular like ssh)   goto the address    `cd /hicat/`    within the  hicat  directory you should find the command line tool named  launsh.sh    then go    ./launch.sh sd\n\n//you should see 4 options `format|mount|umount|hicatEx`, `format` means format the sd card into `fat32` file system which works like this command below:\n\n ./launch.sh sd format  mount&umount would let you mount the sd card to  /www/mmc  directory, hicatEx would helps you to depackage the  hicatEx.tar  (put it into sd card before you go  hicatEx ) which contains some important programs for Livera's system. \n- do  format  first(format the sd card into fat32 in your pc/mac would be okay), then go  mount , finally  hicatEx .\n- once you finished format and mount the sd card there will be you could chose to put the    OpenCV lib  into  opencv  folder incase for opencv demo.  Android APP:  APP main page:   We've provided a custom android app for Livera, you could download it on our github page:  https://github.com/hicat-tech/livera-android , the APP could help you liveview video, control robots, and access to livera's web app.  Do not forget the turn the livera into  RTSP(H264) Mode  before live viewing the video or access into robot control.  Web app:   The web app provides functions like Video recording, Live streaming, Livera setting,   What an amazing feature about livera is that it could  serve web pages  as web app thanks to the file streaming server, in Livera's demo, we've provided a single page web app which based on  VUE.js , the app would work as Livera's command panel.  To use the web app you could go download the web app  here:https://github.com/hicat-tech/webapp  The web server within Livera also provide  REST API  which allows you to communicate with Livera through AJAX, have a look at detailed description within  API GUIDE .",
            "title": "Quick Start Manual"
        },
        {
            "location": "/livera/#hardware",
            "text": "",
            "title": "Hardware"
        },
        {
            "location": "/livera/#livera",
            "text": "Livera's given I/O port has connected into  MCU(Atmel 32u4) , and the pin layout is pretty much likely to  Arduino Mini , you could program it with arduino IDE through the given  USB port , select the board to  arduino leonardo .   We've also placed a mpu6050 6-axie accelerometer on Livera, this would help in case of self-balance vehicle, there is 3 I/O port been connected MCU(32u4), there are I2C(D2:SDA,D3:SCL) and interrupt(D7)  Design file:  The Robot kit's Laser cut Acrylic CAD file contains the  dimensions of LIVERA , you could use it to build your custom case for Livera. Links  here .  Livera Hardware Architecture:   Arduino(MCU) I/O Pin Indicate:",
            "title": "Livera"
        },
        {
            "location": "/livera/#motor-driver",
            "text": "Port Indicator:   Motor Driver -> Hicat.Livera   Motor Port 1(M1):   M1-1 -> A5 ,  M1-2 -> A4 .  Motor Port 2(M2):   M2-1 -> A3 ,  M2-2 -> A2 .  Motor Port 3(M3):   M3-1 -> D8 ,  M3-2 -> D6 .   Motor Port 4(M4):   M4-1 -> D5 ,  M4-2 -> D4 .    Servo Motor Port:   11 -> D11, 10 -> D10, 9 -> D9, 13 -> D13    The Livera Motor Driver was designed specially for Livera, so that you can directly plug onto Livera, in this way you would get almost everything you need for a  robotic system .  Livera Motor Driver can power up  4 DC motors  and  3 Servo Motors , with external power input.",
            "title": "Motor Driver"
        },
        {
            "location": "/livera/#the-robot-kit-assembly-guide",
            "text": "Like the picture shows, the Livera Robot kit ccomes with several conponents that you need you assemble and make it to a fully functional robot. This toturial would get you through all the process of  physical building and wiring,  it might take around  25 minutes  to make the robot alive. Clear up your desk, unpack the Robot kit and let begin the journey.  Parts list    The Livera Robot kit comes with following parts:   Boards:  HICAT.Livera Boardx1 Livera Motor Driver Boardx1  Camera:  Livera Camera Extend Cablex1 Livera Camera Modulex1  Storage: 2G SD Card with firmware built in  Guidebook:  Livera GuideBookx1 Livera Robot Assembly GuideBookx1  Power:  9V Lipo Battery and Bat Carrier  Motor:  E-MAX SERVOx1 DC Gear Motor set(Motor + Motor Carrier + Wheels)x2  Structure bits:  Robot Base Acrylic Panels set, Omni-directional Wheel Set   Screws:  M2x15(+6)mm Nylon Studx4, M2x6mm Nylon Studx4, M2x6(+6)mm Nylon Studx8, M2x10(+6)mm Nylon Studx8, M2 Nylon Nutx4   OUTPUT:  LASER Beanx1  Accessories:  Stickersx1, USB Cablex1, Screwdriver(+,-)x1   https://www.discourse.org/ Video Tutorial \nWe've also created a video toturial to give you a more detailed, much clear step by step toturial, would help you with:   Pyhsical Assembly  Webapp Guide   \n       Design file:  The Robot kit's Laser cut Acrylic CAD file contains the  dimensions of LIVERA , you could use it to build your custom case for Livera. Links  here .  Step 1: Base panel build   Unpack the Livera Robot kit package, Find out the following conponents in order to build the base panel of the Robot.   Robot Base Acrylic Panel x1  DC Motor + Motor Carrier x2  Omni-directional Wheel Set x1  M2x15(+6)mm Nylon Stud x4  M2x6mm Nylon Stud x4  M2x6(+6)mm Nylon Stud x4  M2 Nylon Nut x4   Notice:  All the Stud could be install by hand, doesn't require and tools. Caution:  Don't make it too tight while screwing with the  Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard.    Assemble up the  Omni-direction Wheel Set  like the picture shows, then close up with the  Cover bit , waiting for screw on the  Base Panel.       Install the motor on base panel:  carefully place the  M2 Nut  onto the  Motor Carrier's slot , than catch the  DC Motor  and match to the hole on the  Base Panle , notice to keep the  +  sign on top as the left top of the pic shows, using  M2x6(+6) Stud  to screw through from the other side of the panel.  Install the Structure bit:  place the  M2x15(+6) Stud  on top of the  Base panel , then let the  6mm screw bit  through the hole and screw into the  M2x6mm Stud.   Step 2: Body build    Install the Livera Motor Driver:  simply place by matching to the  Stud.  Install the Structure bit:  Screw  M2x10(+6)mm Stud  on top.   Caution:  Don't make it too tight while screwing with the  Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard.     Install HICAT.Livera with Extend Cable:  carefully stack  Livera  on top of  Livera Motor Driver,  do check for the  I/O ports  and the  outline  to see weather it is matched to the  Livera Motor Driver.  Install the Structure bit:  Screw  M2x10(+6)mm Stud  on top of Livera.   Caution:  Don't make it too tight while screwing with the  Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard.  Step 3: Top build    Install the top Acrylic Panel:  place the  Top Acrylic Panel , fix the panle by screw the  M2x6(+6)mm Stud  on top.  Stick the Power case and Servo:  unpack the  3M Sticker,  stick the conponents as the image shows.  Connect Power:  connect the 2.54mm Power connector from  Power case  to  Livera Motor Driver.     Install the Camera pan-tilt:  screw the Servo Arm Set form the  EMAX Servo set  on the  Camera Pan-tilt.  Install Camera Module:  carefully place the camera module on the  Acrylic Camera Pan-tilt , using  M2 Rivet  to fix it.  Install Camera Extend Cable and Laser Bean:  install the conponents as the picture shows, notice that the  direction  of the camera module should be  match together  according to the  indicate drawings.   Step 4: Wiring    Wiring:  wire up all the electronics(Motors, Laser, Servo) as the picture shows, for the  DC Motor  wring, you would need to use the screwdriver to fix the wire into the adapter.  Install SD card:  put the  SD card  into the SD slot.     Install Battery:  put the  9v chargable battery  into the  Power Case.  Power up to init the Servo:  switch on the  Power Switch  From the Motor Driver, wait until heard  two movement  from the  Servo,  then put the  Camera Pan-tilt  on the  Servo  in a  horizon direction,  screw it up using the smallest screw from the Servo Box.  Enjoy:  pick up you cell phone, connect to the  Livera's wifi ,   ssid:hicat_xxxxxx\npassward:88888888  then open  chrome browser , go to the web page   http://192.168.1.1/mmc/webapp/index.html    Switch the top video switcher to  MJPG MODE , click  LiveView , if the image flipped, you could change it within  QUALITY,  we suggest you to chose  240p/15fps.    Click  ROBOT  to open the control panel, Try press forward button, if you see the robot  spinning  or  move back,  you could adjust the wiring by switch the  DC motor  wire from the adapter.",
            "title": "The Robot kit Assembly Guide"
        },
        {
            "location": "/livera/#software",
            "text": "",
            "title": "Software"
        },
        {
            "location": "/livera/#firmware",
            "text": "Livera frimware is basically embedded Linux shell script with some executable program, which works immediately while Livera power on, keeping all the functions like  MJPG/H264 Server ,  Bridge System ,  Rest API  works.",
            "title": "Firmware"
        },
        {
            "location": "/livera/#android",
            "text": "We've provided a custom android app for Livera, you could download it on our github page:  https://github.com/hicat-tech/livera-android , the APP could help you liveview video, control robots, and access to livera's web app.  Do not forget the turn the livera into  RTSP(H264) Mode  before open the liveview and robot function.  APP main page:   Robot control panel:",
            "title": "Android"
        },
        {
            "location": "/livera/#web-app",
            "text": "The web app provides functions like Video recording, Live streaming, video download, wifi setting, visual tracking.  RTSP/MJPG MODE SWITCH: Once you open up the web app in your browser, the First thing to do is to select a video mode from  RTSP  to  MJPG , after the selection you would immediately see some of UI changed according to different mode.   What an amazing feature about livera is it could  serve web pages  as web app thanks to the file streaming server, in Livera's demo, we've provided a single page web app which based on  VUE.js , the app would work as Livera's command panel.  To use the web app you could go download the web app  here  The server also provide  REST API  which allows you to communicate with Livera through AJAX",
            "title": "Web app"
        },
        {
            "location": "/livera/#example-code",
            "text": "",
            "title": "Example Code"
        },
        {
            "location": "/livera/#image-capturing",
            "text": "1. Image capture with Arduino Way  \n    #include \"hicat.h\"\n\n    void setup()\n    {\n        hicat.begin();\n\n        char name[16] = \"0.jpg\";\n        for (int i = 0; i  <  8; i++)\n        {\n            name[0] = '0' + i;\n            hicat.snapshot(name);\n\n            delay(10);\n        }\n    }\n\n    void loop()\n    {\n    }  2. Image capture with WEB Way  Livera's build in web server accept  rest API , for detail description you could check out the  WEB API  guide.   One thing you have to Notice is that Livera has  two image streming mode , which are  MJPG  for web and  H264  for more advance video streaming.   For Video Capturing:     \n    //type the url directly within browser\n    //IP address could be different if you use station mode.\n\n    //first step, make sure you are in H264(RTSP) Mode\n    192.168.1.1/hicat/videoServer?mode=0\n\n    //Second step, start capture\n    192.168.1.1/hicat/record?save=1\n\n    //finally, stop\n    192.168.1.1/hicat/record?save=0\n\n    //AJAX is also avaliable, here is example with client side javascript\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=0', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            \n         }\n        xhr.send()   For Image Capturing:     \n    //type the url directly within browser\n    //IP address could be different if you use station mode.\n\n    //first step, make sure you are in MJPG Mode\n    192.168.1.1/hicat/videoServer?mode=1\n\n    //Second step, start capture image\n    //you could set up the image name xxx.jpg and stored direction '/www/mmc' is the SD card's directory\n    192.168.1.1/hicat/snapshot?name=xxx.jpg&dir=/www/mmc/video/\n\n    //AJAX is also avaliable, here is example with client side javascript\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=1', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            \n         }\n        xhr.send()  3. Image capture with Linux(c/c++) Way  We've cross compile a tool call  curl  which will help you to control Livera with the  web api  \n    //telnet/serial/arduino into Livera's terminal\n    //type the command below to invoke the web api. for detailed info please check out the web api section within the API GUIDE\n\n    curl http://127.0.0.1/hicat/record?save=1 //trigger h.264 video capture",
            "title": "Image Capturing"
        },
        {
            "location": "/livera/#robot-kit",
            "text": "Websocket and bridge system:  bridge is a  websocket server  that runs on the  linux core , help to accept websocket connections to Livera on port 7681  and transfer the information to  MCU(32u4) .  Websocket Example: we've built a websocket bridge server to help to transport text message from front-end web client to Arduino.  \n    //server on port 7681\n    var WebSocketURL = 'ws://' + window.location.hostname + ':7681'\n\n    ws = new WebSocket(WebSocketURL);\n\n    ws.onopen = function(event) {\n        console.log('ws connection opened:' + WebSocketURL);\n    }\n    ws.send(`msg`);\n    ws.close();  \n\n    // hicat robot demo\n    // get SerialCommand library from https://github.com/hicat-tech/Arduino-SerialCommand\n\n    #include  \n#include  \n\nint PWM1 = 10;   //control servo\nint PWM_CE = 11;  //servo enable\n\nint AIN1 = 4;  //control motor\nint AIN2 = 5;  //control motor\nint AIN3 = 6;  //control motor\nint AIN4 = 8;  //control motor\n\nint BIN3 = A2;  //control laser\nint BIN4 = A3;  //control laser\n\nServo myservo;\nSerialCommand sCmd;\n\nuint8_t camera_angle = 120;\nuint8_t camera_angle_range[] = {\n  60, 150\n};\nuint8_t laser_is_on = 0;\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial1.begin(115200);\n  // initialize the digital pin as an output.\n  pinMode(AIN1, OUTPUT);\n  pinMode(AIN2, OUTPUT);\n  pinMode(AIN3, OUTPUT);\n  pinMode(AIN4, OUTPUT);\n  pinMode(BIN3, OUTPUT);\n  pinMode(BIN4, OUTPUT);\n  digitalWrite(BIN3, LOW);  // turn off LASER\n  digitalWrite(BIN4, LOW);\n\n  pinMode(PWM_CE, OUTPUT);\n  myservo.attach(PWM1);\n  digitalWrite(PWM_CE, HIGH);\n  myservo.write(camera_angle);\n  digitalWrite(PWM_CE, LOW); //disable servo\n\n\n  // Setup callbacks for SerialCommand commands\n  sCmd.addCommand(\"laser\", trigger_laser);          // trigger laser\n  sCmd.addCommand(\"camera\", adjust_camera);         //\n  sCmd.addCommand(\"motor\", set_motor);\n  sCmd.setDefaultHandler(unrecognized);      // Handler for command that isn't matched  (says \"What?\")\n}\n\n// the loop routine runs over and over again forever:\nvoid loop() {\n  sCmd.readSerial();\n}\n\nvoid trigger_laser()\n{\n  if (laser_is_on) {\n    digitalWrite(BIN3, LOW);  // turn off LASER\n    laser_is_on = 0;\n    Serial.println(\"laser off\");\n  }\n  else {\n    digitalWrite(BIN3, HIGH);  // turn on LASER\n    laser_is_on = 1;\n    Serial.println(\"laser on\");\n  }\n}\n\nvoid adjust_camera()\n{\n  char *param;\n\n  param = sCmd.next();\n  if (!strcmp(param, \"down\")) {\n    if (camera_angle  <  camera_angle_range[1]) {\n      camera_angle += 10;\n\n      digitalWrite(PWM_CE, HIGH);\n      myservo.write(camera_angle);\n      digitalWrite(PWM_CE, HIGH);\n    }\n  }\n  else if (!strcmp(param, \"up\")) {\n    if (camera_angle > camera_angle_range[0]) {\n      camera_angle -= 10;\n\n      digitalWrite(PWM_CE, HIGH);\n      myservo.write(camera_angle);\n      digitalWrite(PWM_CE, HIGH);\n    }\n  }\n\n  Serial.print(\"camera angle: \");\n  Serial.println(camera_angle);\n}\n\nvoid set_motor()\n{\n  char *param;\n  int16_t left = 0;\n  int16_t right = 0;\n\n  param = sCmd.next();\n  if (param == NULL) {\n    return;\n  }\n  left = atoi(param);\n\n  param = sCmd.next();\n  if (param == NULL) {\n    return;\n  }\n  right = atoi(param);\n\n  Serial.print(\"motor \");\n  Serial.print(left);\n  Serial.print(\" \");\n  Serial.println(right);\n\n\n  if (left > 30) {\n    analogWrite(AIN2, left);\n    digitalWrite(AIN1, LOW);\n  } else if (left  <  -30)  {\n    analogWrite(AIN2, 255 + left);\n    digitalWrite(AIN1, HIGH);\n  }\n  else {\n    digitalWrite(AIN1, LOW);\n    digitalWrite(AIN2, LOW);\n  }\n\n  if (right > 30) {\n    analogWrite(AIN3, right);\n    digitalWrite(AIN4, LOW);\n  }\n  else if (right  <  -30) {\n    analogWrite(AIN3, 255 + right);\n    digitalWrite(AIN4, HIGH);\n  }\n  else {\n    digitalWrite(AIN3, LOW);\n    digitalWrite(AIN4, LOW);\n  }\n\n}\n\n\n// This gets set as the default handler, and gets called when no other command matches.\nvoid unrecognized(const char *command) {\n  Serial.println(\"What?\");\n}",
            "title": "Robot Kit"
        },
        {
            "location": "/livera/#advance",
            "text": "",
            "title": "Advance"
        },
        {
            "location": "/livera/#api-guide",
            "text": "1.WEB API  The Web API contains a set of REST API in order to interact with LIVERA in a convenient way through  AJAX  or  URL .   AJAX Example: the below could be run in general font-end javascript client side.  \n\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=0', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            \n         }\n        xhr.send()\n    }  Websocket and bridge system:  bridge is a  websocket server  that runs on the  linux core , help to accept websocket connections to Livera on port 7681  and transfer the information to  MCU(32u4) .  Websocket Example: we've built a websocket bridge server to help to transport text message from front-end web client to Arduino.  \n                //server on port 7681\n                var WebSocketURL = 'ws://' + window.location.hostname + ':7681'\n\n                ws = new WebSocket(WebSocketURL);\n\n                ws.onopen = function(event) {\n                    console.log('ws connection opened:' + WebSocketURL);\n                }\n                ws.send(`msg`);\n                ws.close();  1. Set up Video Streaming Mode:  This API allows you to swith between  RTSP  and  MJPEG  streaming mode, be careful that  Video Record API  only works under  RTSP Mode , and  Screen Shot API  only works under  MJEPG Mode .  /hicat/videoServer?mode=0  mode=0 : RTSP Server Start mode=1 : MJPEG Mode  2. Station Mode : Let Livera link to local wifi router  /hicat/stationMode?ssid=xxxxx&password=xxxxxxx  return messages: success : none return error :{\"result\":\"ERROR\"}  3. WIFI Access Point : Make Livera to AP mode  /hicat/apMode?ssid=xxxxx&password=xxxxxxx  return messages(object): success : none return error \uff1a{\"result\":\"ERROR\"}  4. Set Livera time : Synchronous time with Livera, the time also affect to the default video name.   /hicat/setTime?time=%d-%d-%d-%d-%d-%d  Example : /hicat/setTime?time=2018-09-09-01-01-01 success \uff1a{\"result\":\"OK\"}    error \uff1a{\"result\":\"ERROR\"}  5. Get Video Download Links : This API will return a JASON format( {\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]} ) message about all the file within  video folder  in SD Card. Once you get the fileName you could just go to this url  http://192.168.1.1/mmc/video/xxxxx.264  to download it(might figure your IP address under station mode).  /hicat/files  success :{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]}    error :{\"result\":\"ERROR\"}  6. Video Record : This API allows you to record and delete the video and auto save into the default  video  folder in SD card.  /hicat/record?save=1\n/hicat/record?del=xxxxxxxx.h264  save=1 : start recording save=0 : stop recording and save del=xxxxxxxx.h264 : delete file xxxxxxxx.h264 success \uff1a{\"result\":\"OK\"}    error \uff1a{\"result\":\"ERROR\"}  7. Video Setting : Switch video angle, video resolution and video fps.  /hicat/setCamera?resolve=1&rotate=0&fps=20  success \uff1a{\"result\":\"OK\"}    error \uff1a{\"result\":\"ERROR\"}  //only work under mjpg mode  8. Snapshot : snap shot form one of the frame form MJPEG stream. We suggest to make the direction to /www/mmc/video/ coz the photo info could be receive under  /hicat/files  API.  /hicat/snapshot?name=xxx.jpg&dir=/www/mmc/video/  success \uff1a{\"result\":\"OK\"}      9. For test : test api, do nothing but test.  /hicat/test  success \uff1a{\"result\":\"OK\"}     2.Embedded Linux API  Detail information could be view under our github  libhicat , There are instructions guide you through development tools set up and workflow, please have a look.  #ifndef _LIBHISIV_H_\n#define _LIBHISIV_H_\n\n#ifdef __cplusplus \nextern \"C\" { \n#endif\nint venc_exit(int n);\nint venc_init(int resolve);//0:720P 1:QVGA(320*240) 2:VGA(640*480)\nint venc_init_more(int resolve,int mode,int fps);//resolve: 0/1/2  1280*720/320*240/640*480  mode: 0/1 H264/MJPEG\nint venc_requestIDR();//request IDR frame\nint venc_getFrame(char* buffer,int *datalen,int *pts,int *type);\nint venc_snap(char* buff,int xRes,int yRes);\nint venc_getYUV(int mode,char*buff);//mode=0 Y  mode=1 UV mode = 3 YUV420(SP)\nint venc_rotate(int dir);\n\n//for audio\nextern int aenc_init(int mode);// 0/1 PT_LPCM/AAC/\nextern int aenc_getFrame(char* buff);\nextern int aenc_exit();\n//jpeg to http\nextern int libyuvdist_startYuvDistService(int port);\nextern int libyuvdist_updateYuv(int iHandle,char* data,int len,int seq,unsigned long timeStamp);\nextern int libyuvdist_stopYuvDistService(int iHandle);\nextern int libyuvdist_setSettingCallback(int iHandle,int func);//int func(int resX,int resY,int fps)\n\n#ifdef __cplusplus \n}\n#endif\n#endif  3.Arduino Libray API  The Arduino library wraps the web api, using serial communication and curl to communicate and send command to the video core(HI3518E). There are also example codes could be find in  github  #ifndef _HICAT_H_\n#define _HICAT_H_\n\n#include <Arduino.h>\n\nclass HiCat\n{\npublic:\n    HiCat();\n    int begin(void);\n\n    /**\n     * Take a picture\n     *\n     * @param file_name     picture name\n     * @return 0 - OK, otherwise - error code\n     */\n    int snapshot(const char *file_name);\n\n    /**\n     * Start to record a video which is saved at /www/mmc/video/\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int record();\n\n    /**\n     * Stop to record a video\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int stop_recording();\n\n    /**\n     * Set camera format\n     *\n     * @param resolution    0 - 1280*720, 2 - 640*480, 1 - 320*240\n     * @param rotation      0 - no rotation, 1 - 180 degree rotation\n     * @param fps           frame per secord from 1 to 25\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_camera(int resolution, int rotation, int fps);\n\n    /**\n     * Set Wi-Fi mode\n     *\n     * @param mode  0 - AP mode, 1 - Station mode\n     * @param ssid  SSID\n     * @param password  password\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_wifi(int mode, const char *ssid, const char *password);\n\n    /**\n     * Run a shell command\n     *\n     * @param command   shell command\n     * @return 0 - OK, otherwise - error code\n     */\n    int run(const char *command);\n\nprivate:\n    void prepare_web_command();\n    int read_result();\n};\n\nextern HiCat hicat;\n\n\n#endif // _HICAT_H_",
            "title": "API GUIDE"
        },
        {
            "location": "/livera/#hi3518ev100-sdk",
            "text": "Content within SDK:   linux  file system   Hi3518E Documentation&Hardware design reference  download address:   download link    verifycode:   kspc     decode password:   lk87612umzvcb01qqsalv   How to burn the firmware to flash  you must have a hicat board with a uboot already burned.  then connect the UART0 on the ARM9 Hisiv chip. and then use the command as below[recomendly using Hyper Terminal to finish this]:  loady 0x82000000  then send file on Hyper Terminal with xmodern protocal. choose the uImage file under https://github.com/9crk/libhisiv/opt/  sf probe 0\nsf erase 0x100000 0x300000\nsf write 0x82000000 0x100000 0x300000    \nloady 0x82000000  then send the rootfs file to the board.  sf erase 0x400000 0xC00000\nsf write 0x82000000 0x400000 0x500000\nsetenv bootargs 'mem=32M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 mtdparts=hi_sfc:1M(boot),3M(kernel),12M(rootfs)'\nsetenv bootcmd 'sf probe 0;sf read 0x82000000 0x100000 0x300000;bootm 0x82000000'\nsaveenv  then reboot the board or execute 'reset' command.  About rtspserver and libhisiv.a  rtspserver have two demo:  one is modified from live555 project. ( live555MediaServer )  source code is in https://bitbucket.org/zhouhua/hicat_rtspserver\n* play Address: rtsp://192.168.1.1/hicat.264  How to install software pack   execute 'lrz' command to send libhicat/opt/hi_sd.sh into the board (any where)  format the sd card with fat32 format in default param. or use mkfs.vfat on Linux OS  then execute  chmod +x hi_sd.sh && ./hi_sd.sh , the board will reboot   How to upgrade \n1. Formating the SD card with vfat or fat32 mode.\n2. then copy the hicat2016xxxx.tar package to the SD card.\n3. press the reset button (RST_PBC)\n4. connect the power supply.\n5. wait for the board reset again.  What's more \n  zwebs  https://9crk@bitbucket.org/zhouhua/hicat_zwebs.git  How to use programming with serial port on Hisiv \n  libSerial  https://github.com/9crk/libSerial.git  Linux SDK Source Code  can be view  here",
            "title": "HI3518EV100 SDK"
        },
        {
            "location": "/livera/#opencv",
            "text": "How to use opencv Demo   clone  this  repo  then install the compiler  compile the apps under 'app' dir with  ./build.sh  copy the app dir to the board  copy the opt/opencvlib dir to the board at /www/mmc/opencv/opencvlib  cd app && source env.sh  execute './capture'  to capture an image named 'myImage.jpg'  execute './match model.jpg'  to find the object model.jpg in the camera.  then you can browser the result hi.jpg on http://192.168.1.1/mmc/opencv/hi.jpg   The way To do  black-line tracking.  1.check out the files.    ~/libhicat/app$ ls__\n\nbuild.sh capture.cpp hi.html match model2.jpg myImage.jpg capture env.sh hi.jpg match.cpp model.jpg  2.copy capture.cpp as a demo  cp capture.cpp lineTrack.cpp  3.modify build.sh, add content below  arm-hisiv100nptl-linux-g++ lineTrack.cpp ../lib/libhisiv.a -I../include -lpthread -lm -o lineTrack  4.compile  ./build.sh  #include<stdio.h>\n#include<stdlib.h>\n#include<unistd.h>\n#include\"libhisiv.h\"\nint main(int argc,char* argv[])\n{\n\nchar data[1280*720];\nint len;\nint i;\nlen = venc_getYUV(0,data);\n\n    int x,y;\n    int result[10];\nfor(i=0;i<10;i++){\n    result[i] = 0;\n}\nfor(i=0;i<10;i++){\n    for(y=635;y<(635+10);y++){\n        for(x=i*72;x<(i+1)*72;x++){\n            result[i]+=data[y*1280+x];\n        }\n    }\n    result[i] = result[i]/(72*10);\n}\nfor(i=0;i<10;i++){\n    result[i] = 0;\n    printf(\"result = %d\\n\",result[i]);\n}\n}",
            "title": "openCV"
        },
        {
            "location": "/livera/api/",
            "text": "API GUIDE\n\n\n1.WEB API\n\n\nThe Web API contains a set of REST API in order to interact with LIVERA in a convenient way through \nAJAX\n or \nURL\n. \n\n\nAJAX Example:\nthe below could be run in general font-end javascript client side.\n\n\n\n\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=0', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            \n         }\n        xhr.send()\n    }\n\n\n\n\n\nWebsocket and bridge system:\n bridge is a \nwebsocket server\n that runs on the \nlinux core\n, help to accept websocket connections to Livera on\nport 7681\n and transfer the information to \nMCU(32u4)\n.\n\n\nWebsocket Example:\nwe've built a websocket bridge server to help to transport text message from front-end web client to Arduino.\n\n\n\n                //server on port 7681\n                var WebSocketURL = 'ws://' + window.location.hostname + ':7681'\n\n                ws = new WebSocket(WebSocketURL);\n\n                ws.onopen = function(event) {\n                    console.log('ws connection opened:' + WebSocketURL);\n                }\n                ws.send(`msg`);\n                ws.close();\n\n\n\n\n1.\nSet up Video Streaming Mode:\n This API allows you to swith between \nRTSP\n and \nMJPEG\n streaming mode, be careful that \nVideo Record API\n only works under \nRTSP Mode\n, and \nScreen Shot API\n only works under \nMJEPG Mode\n.\n\n\n/hicat/videoServer?mode=0\n\n\n\n\nmode=0\n: RTSP Server Start\n\nmode=1\n: MJPEG Mode\n\n\n2.\nStation Mode\n: Let Livera link to local wifi router\n\n\n/hicat/stationMode?ssid=xxxxx&password=xxxxxxx\n\n\n\n\nreturn messages:\n\nsuccess\n: none return\n\nerror\n:{\"result\":\"ERROR\"}\n\n\n3.\nWIFI Access Point\n: Make Livera to AP mode\n\n\n/hicat/apMode?ssid=xxxxx&password=xxxxxxx\n\n\n\n\nreturn messages(object):\n\nsuccess\n: none return\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n4.\nSet Livera time\n: Synchronous time with Livera, the time also affect to the default video name. \n\n\n/hicat/setTime?time=%d-%d-%d-%d-%d-%d\n\n\n\n\nExample\n: /hicat/setTime?time=2018-09-09-01-01-01\n\nsuccess\n\uff1a{\"result\":\"OK\"}  \n\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n5.\nGet Video Download Links\n: This API will return a JASON format(\n{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]}\n) message about all the file within \nvideo folder\n in SD Card. Once you get the fileName you could just go to this url \nhttp://192.168.1.1/mmc/video/xxxxx.264\n to download it(might figure your IP address under station mode).\n\n\n/hicat/files\n\n\n\n\nsuccess\n:{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]}  \n\n\nerror\n:{\"result\":\"ERROR\"}\n\n\n6.\nVideo Record\n: This API allows you to record and delete the video and auto save into the default \nvideo\n folder in SD card.\n\n\n/hicat/record?save=1\n/hicat/record?del=xxxxxxxx.h264\n\n\n\n\nsave=1\n: start recording\n\nsave=0\n: stop recording and save\n\ndel=xxxxxxxx.h264\n: delete xxxxxxxx.h264\n\nsuccess\n\uff1a{\"result\":\"OK\"}  \n\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n7.\nVideo Setting\n: Switch video angle, video resolution and video fps.\n\n\n/hicat/setCamera?resolve=1&rotate=0&fps=20\n\n\n\n\nsuccess\n\uff1a{\"result\":\"OK\"}  \n\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n//only work under mjpg mode\n\n\n8.\nSnapshot\n: snap shot form one of the frame form MJPEG stream. We suggest to make the direction to /www/mmc/video/ coz the photo info could be receive under \n/hicat/files\n API.\n\n\n/hicat/snapshot?name=xxx.jpg&dir=/www/mmc/video/\n\n\n\n\nsuccess\n\uff1a{\"result\":\"OK\"}    \n\n\n9.\nFor test\n: test api, do nothing but test.\n\n\n/hicat/test\n\n\n\n\nsuccess\n\uff1a{\"result\":\"OK\"}   \n\n\n2.Embedded Linux API\n\n\nDetail information could be view under our github \nlibhicat\n, There are instructions guide you through development tools set up and workflow, please have a look.\n\n\n#ifndef _LIBHISIV_H_\n#define _LIBHISIV_H_\n\n#ifdef __cplusplus \nextern \"C\" { \n#endif\nint venc_exit(int n);\nint venc_init(int resolve);//0:720P 1:QVGA(320*240) 2:VGA(640*480)\nint venc_init_more(int resolve,int mode,int fps);//resolve: 0/1/2  1280*720/320*240/640*480  mode: 0/1 H264/MJPEG\nint venc_requestIDR();//request IDR frame\nint venc_getFrame(char* buffer,int *datalen,int *pts,int *type);\nint venc_snap(char* buff,int xRes,int yRes);\nint venc_getYUV(int mode,char*buff);//mode=0 Y  mode=1 UV mode = 3 YUV420(SP)\nint venc_rotate(int dir);\n\n//for audio\nextern int aenc_init(int mode);// 0/1 PT_LPCM/AAC/\nextern int aenc_getFrame(char* buff);\nextern int aenc_exit();\n//jpeg to http\nextern int libyuvdist_startYuvDistService(int port);\nextern int libyuvdist_updateYuv(int iHandle,char* data,int len,int seq,unsigned long timeStamp);\nextern int libyuvdist_stopYuvDistService(int iHandle);\nextern int libyuvdist_setSettingCallback(int iHandle,int func);//int func(int resX,int resY,int fps)\n\n#ifdef __cplusplus \n}\n#endif\n#endif\n\n\n\n\n3.Arduino Libray API\n\n\nThe Arduino library wraps the web api, using serial communication and curl to communicate and send command to the video core(HI3518E). There are also example codes could be find in \ngithub\n\n\n#ifndef _HICAT_H_\n#define _HICAT_H_\n\n#include <Arduino.h>\n\nclass HiCat\n{\npublic:\n    HiCat();\n    int begin(void);\n\n    /**\n     * Take a picture\n     *\n     * @param file_name     picture name\n     * @return 0 - OK, otherwise - error code\n     */\n    int snapshot(const char *file_name);\n\n    /**\n     * Start to record a video which is saved at /www/mmc/video/\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int record();\n\n    /**\n     * Stop to record a video\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int stop_recording();\n\n    /**\n     * Set camera format\n     *\n     * @param resolution    0 - 1280*720, 2 - 640*480, 1 - 320*240\n     * @param rotation      0 - no rotation, 1 - 180 degree rotation\n     * @param fps           frame per secord from 1 to 25\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_camera(int resolution, int rotation, int fps);\n\n    /**\n     * Set Wi-Fi mode\n     *\n     * @param mode  0 - AP mode, 1 - Station mode\n     * @param ssid  SSID\n     * @param password  password\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_wifi(int mode, const char *ssid, const char *password);\n\n    /**\n     * Run a shell command\n     *\n     * @param command   shell command\n     * @return 0 - OK, otherwise - error code\n     */\n    int run(const char *command);\n\nprivate:\n    void prepare_web_command();\n    int read_result();\n};\n\nextern HiCat hicat;\n\n\n#endif // _HICAT_H_",
            "title": "API Guide"
        },
        {
            "location": "/livera/api/#api-guide",
            "text": "",
            "title": "API GUIDE"
        },
        {
            "location": "/livera/api/#1web-api",
            "text": "The Web API contains a set of REST API in order to interact with LIVERA in a convenient way through  AJAX  or  URL .   AJAX Example: the below could be run in general font-end javascript client side.  \n\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=0', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            \n         }\n        xhr.send()\n    }  Websocket and bridge system:  bridge is a  websocket server  that runs on the  linux core , help to accept websocket connections to Livera on port 7681  and transfer the information to  MCU(32u4) .  Websocket Example: we've built a websocket bridge server to help to transport text message from front-end web client to Arduino.  \n                //server on port 7681\n                var WebSocketURL = 'ws://' + window.location.hostname + ':7681'\n\n                ws = new WebSocket(WebSocketURL);\n\n                ws.onopen = function(event) {\n                    console.log('ws connection opened:' + WebSocketURL);\n                }\n                ws.send(`msg`);\n                ws.close();  1. Set up Video Streaming Mode:  This API allows you to swith between  RTSP  and  MJPEG  streaming mode, be careful that  Video Record API  only works under  RTSP Mode , and  Screen Shot API  only works under  MJEPG Mode .  /hicat/videoServer?mode=0  mode=0 : RTSP Server Start mode=1 : MJPEG Mode  2. Station Mode : Let Livera link to local wifi router  /hicat/stationMode?ssid=xxxxx&password=xxxxxxx  return messages: success : none return error :{\"result\":\"ERROR\"}  3. WIFI Access Point : Make Livera to AP mode  /hicat/apMode?ssid=xxxxx&password=xxxxxxx  return messages(object): success : none return error \uff1a{\"result\":\"ERROR\"}  4. Set Livera time : Synchronous time with Livera, the time also affect to the default video name.   /hicat/setTime?time=%d-%d-%d-%d-%d-%d  Example : /hicat/setTime?time=2018-09-09-01-01-01 success \uff1a{\"result\":\"OK\"}    error \uff1a{\"result\":\"ERROR\"}  5. Get Video Download Links : This API will return a JASON format( {\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]} ) message about all the file within  video folder  in SD Card. Once you get the fileName you could just go to this url  http://192.168.1.1/mmc/video/xxxxx.264  to download it(might figure your IP address under station mode).  /hicat/files  success :{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]}    error :{\"result\":\"ERROR\"}  6. Video Record : This API allows you to record and delete the video and auto save into the default  video  folder in SD card.  /hicat/record?save=1\n/hicat/record?del=xxxxxxxx.h264  save=1 : start recording save=0 : stop recording and save del=xxxxxxxx.h264 : delete xxxxxxxx.h264 success \uff1a{\"result\":\"OK\"}    error \uff1a{\"result\":\"ERROR\"}  7. Video Setting : Switch video angle, video resolution and video fps.  /hicat/setCamera?resolve=1&rotate=0&fps=20  success \uff1a{\"result\":\"OK\"}    error \uff1a{\"result\":\"ERROR\"}  //only work under mjpg mode  8. Snapshot : snap shot form one of the frame form MJPEG stream. We suggest to make the direction to /www/mmc/video/ coz the photo info could be receive under  /hicat/files  API.  /hicat/snapshot?name=xxx.jpg&dir=/www/mmc/video/  success \uff1a{\"result\":\"OK\"}      9. For test : test api, do nothing but test.  /hicat/test  success \uff1a{\"result\":\"OK\"}",
            "title": "1.WEB API"
        },
        {
            "location": "/livera/api/#2embedded-linux-api",
            "text": "Detail information could be view under our github  libhicat , There are instructions guide you through development tools set up and workflow, please have a look.  #ifndef _LIBHISIV_H_\n#define _LIBHISIV_H_\n\n#ifdef __cplusplus \nextern \"C\" { \n#endif\nint venc_exit(int n);\nint venc_init(int resolve);//0:720P 1:QVGA(320*240) 2:VGA(640*480)\nint venc_init_more(int resolve,int mode,int fps);//resolve: 0/1/2  1280*720/320*240/640*480  mode: 0/1 H264/MJPEG\nint venc_requestIDR();//request IDR frame\nint venc_getFrame(char* buffer,int *datalen,int *pts,int *type);\nint venc_snap(char* buff,int xRes,int yRes);\nint venc_getYUV(int mode,char*buff);//mode=0 Y  mode=1 UV mode = 3 YUV420(SP)\nint venc_rotate(int dir);\n\n//for audio\nextern int aenc_init(int mode);// 0/1 PT_LPCM/AAC/\nextern int aenc_getFrame(char* buff);\nextern int aenc_exit();\n//jpeg to http\nextern int libyuvdist_startYuvDistService(int port);\nextern int libyuvdist_updateYuv(int iHandle,char* data,int len,int seq,unsigned long timeStamp);\nextern int libyuvdist_stopYuvDistService(int iHandle);\nextern int libyuvdist_setSettingCallback(int iHandle,int func);//int func(int resX,int resY,int fps)\n\n#ifdef __cplusplus \n}\n#endif\n#endif",
            "title": "2.Embedded Linux API"
        },
        {
            "location": "/livera/api/#3arduino-libray-api",
            "text": "The Arduino library wraps the web api, using serial communication and curl to communicate and send command to the video core(HI3518E). There are also example codes could be find in  github  #ifndef _HICAT_H_\n#define _HICAT_H_\n\n#include <Arduino.h>\n\nclass HiCat\n{\npublic:\n    HiCat();\n    int begin(void);\n\n    /**\n     * Take a picture\n     *\n     * @param file_name     picture name\n     * @return 0 - OK, otherwise - error code\n     */\n    int snapshot(const char *file_name);\n\n    /**\n     * Start to record a video which is saved at /www/mmc/video/\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int record();\n\n    /**\n     * Stop to record a video\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int stop_recording();\n\n    /**\n     * Set camera format\n     *\n     * @param resolution    0 - 1280*720, 2 - 640*480, 1 - 320*240\n     * @param rotation      0 - no rotation, 1 - 180 degree rotation\n     * @param fps           frame per secord from 1 to 25\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_camera(int resolution, int rotation, int fps);\n\n    /**\n     * Set Wi-Fi mode\n     *\n     * @param mode  0 - AP mode, 1 - Station mode\n     * @param ssid  SSID\n     * @param password  password\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_wifi(int mode, const char *ssid, const char *password);\n\n    /**\n     * Run a shell command\n     *\n     * @param command   shell command\n     * @return 0 - OK, otherwise - error code\n     */\n    int run(const char *command);\n\nprivate:\n    void prepare_web_command();\n    int read_result();\n};\n\nextern HiCat hicat;\n\n\n#endif // _HICAT_H_",
            "title": "3.Arduino Libray API"
        },
        {
            "location": "/livera/robotAssemGuide/",
            "text": "The Robot kit Assembly Guide\n\n\n\n\nLike the picture shows, the Livera Robot kit ccomes with several conponents that you need you assemble and make it to a fully functional robot. This toturial would get you through all the process of \nphysical building and wiring,\n it might take around \n25 minutes\n to make the robot alive. Clear up your desk, unpack the Robot kit and let begin the journey.\n\n\nParts list\n\n\n\n\n\n\nThe Livera Robot kit comes with following parts:\n\n\n\n\nBoards:\n HICAT.Livera Boardx1 Livera Motor Driver Boardx1\n\n\nCamera:\n Livera Camera Extend Cablex1 Livera Camera Modulex1\n\n\nStorage:\n2G SD Card with firmware built in\n\n\nGuidebook:\n Livera GuideBookx1 Livera Robot Assembly GuideBookx1\n\n\nPower:\n 9V Lipo Battery and Bat Carrier\n\n\nMotor:\n E-MAX SERVOx1 DC Gear Motor set(Motor + Motor Carrier + Wheels)x2\n\n\nStructure bits:\n Robot Base Acrylic Panels set, Omni-directional Wheel Set \n\n\nScrews:\n M2x15(+6)mm Nylon Studx4, M2x6mm Nylon Studx4, M2x6(+6)mm Nylon Studx8, M2x10(+6)mm Nylon Studx8, M2 Nylon Nutx4 \n\n\nOUTPUT:\n LASER Beanx1\n\n\nAccessories:\n Stickersx1, USB Cablex1, Screwdriver(+,-)x1\n\n\n\n\nVideo Tutorial\n\n\nWe've also created a video toturial to give you a more detailed, much clear step by step toturial, would help you with:\n\n\n\n\nPyhsical Assembly\n\n\nWebapp Guide\n\n\n\n\n\n    \n\n\n\n\n\nStep 1: Base panel build\n\n\n\n\nUnpack the Livera Robot kit package, Find out the following conponents in order to build the base panel of the Robot.\n\n\n\n\nRobot Base Acrylic Panel x1\n\n\nDC Motor + Motor Carrier x2\n\n\nOmni-directional Wheel Set x1\n\n\nM2x15(+6)mm Nylon Stud x4\n\n\nM2x6mm Nylon Stud x4\n\n\nM2x6(+6)mm Nylon Stud x4\n\n\nM2 Nylon Nut x4\n\n\n\n\nNotice:\n All the Stud could be install by hand, doesn't require and tools.\n\nCaution:\n Don't make it too tight while screwing with the \nLivera and Livera Motor Driver\n, might have a small chance to cause damage to the board if you screw it too hard. \n\n\n\n\nAssemble up the \nOmni-direction Wheel Set\n like the picture shows, then close up with the \nCover bit\n, waiting for screw on the \nBase Panel.\n \n\n\n\n\n\n\n\n\nInstall the motor on base panel:\n carefully place the \nM2 Nut\n onto the \nMotor Carrier's slot\n, than catch the \nDC Motor\n and match to the hole on the \nBase Panle\n, notice to keep the \n+\n sign on top as the left top of the pic shows, using \nM2x6(+6) Stud\n to screw through from the other side of the panel.\n\n\nInstall the Structure bit:\n place the \nM2x15(+6) Stud\n on top of the \nBase panel\n, then let the \n6mm screw bit\n through the hole and screw into the \nM2x6mm Stud.\n\n\n\n\nStep 2: Body build\n\n\n\n\n\n\nInstall the Livera Motor Driver:\n simply place by matching to the \nStud.\n\n\nInstall the Structure bit:\n Screw \nM2x10(+6)mm Stud\n on top.\n\n\n\n\nCaution:\n Don't make it too tight while screwing with the \nLivera and Livera Motor Driver\n, might have a small chance to cause damage to the board if you screw it too hard. \n\n\n\n\n\n\nInstall HICAT.Livera with Extend Cable:\n carefully stack \nLivera\n on top of \nLivera Motor Driver,\n do check for the \nI/O ports\n and the \noutline\n to see weather it is matched to the \nLivera Motor Driver.\n\n\nInstall the Structure bit:\n Screw \nM2x10(+6)mm Stud\n on top of Livera.\n\n\n\n\nCaution:\n Don't make it too tight while screwing with the \nLivera and Livera Motor Driver\n, might have a small chance to cause damage to the board if you screw it too hard.\n\n\nStep 3: Top build\n\n\n\n\n\n\nInstall the top Acrylic Panel:\n place the \nTop Acrylic Panel\n, fix the panle by screw the \nM2x6(+6)mm Stud\n on top.\n\n\nStick the Power case and Servo:\n unpack the \n3M Sticker,\n stick the conponents as the image shows.\n\n\nConnect Power:\n connect the 2.54mm Power connector from \nPower case\n to \nLivera Motor Driver.\n\n\n\n\n\n\n\n\nInstall the Camera pan-tilt:\n screw the Servo Arm Set form the \nEMAX Servo set\n on the \nCamera Pan-tilt.\n\n\nInstall Camera Module:\n carefully place the camera module on the \nAcrylic Camera Pan-tilt\n, using \nM2 Rivet\n to fix it.\n\n\nInstall Camera Extend Cable and Laser Bean:\n install the conponents as the picture shows, notice that the \ndirection\n of the camera module should be \nmatch together\n according to the \nindicate drawings.\n\n\n\n\nStep 4: Wiring\n\n\n\n\n\n\nWiring:\n wire up all the electronics(Motors, Laser, Servo) as the picture shows, for the \nDC Motor\n wring, you would need to use the screwdriver to fix the wire into the adapter.\n\n\nInstall SD card:\n put the \nSD card\n into the SD slot.\n\n\n\n\n\n\n\n\nInstall Battery:\n put the \n9v chargable battery\n into the \nPower Case.\n\n\nPower up to init the Servo:\n switch on the \nPower Switch\n From the Motor Driver, wait until heard \ntwo movement\n from the \nServo,\n then put the \nCamera Pan-tilt\n on the \nServo\n in a \nhorizon direction,\n screw it up using the smallest screw from the Servo Box.\n\n\nEnjoy:\n pick up you cell phone, connect to the \nLivera's wifi\n,\n\n\n\n\nssid:hicat_xxxxxx\npassward:88888888\n\n\n\n\nthen open \nchrome browser\n, go to the web page \n\n\nhttp://192.168.1.1/mmc/webapp/index.html\n\n\n\n\n\n\n\n\nSwitch the top video switcher to \nMJPG MODE\n, click \nLiveView\n, if the image flipped, you could change it within \nQUALITY,\n we suggest you to chose \n240p/15fps.\n\n\n\n\n\n\nClick \nROBOT\n to open the control panel, Try press forward button, if you see the robot \nspinning\n or \nmove back,\n you could adjust the wiring by switch the \nDC motor\n wire from the adapter.",
            "title": "Robot Assembily Guide"
        },
        {
            "location": "/livera/robotAssemGuide/#the-robot-kit-assembly-guide",
            "text": "Like the picture shows, the Livera Robot kit ccomes with several conponents that you need you assemble and make it to a fully functional robot. This toturial would get you through all the process of  physical building and wiring,  it might take around  25 minutes  to make the robot alive. Clear up your desk, unpack the Robot kit and let begin the journey.",
            "title": "The Robot kit Assembly Guide"
        },
        {
            "location": "/livera/robotAssemGuide/#parts-list",
            "text": "The Livera Robot kit comes with following parts:   Boards:  HICAT.Livera Boardx1 Livera Motor Driver Boardx1  Camera:  Livera Camera Extend Cablex1 Livera Camera Modulex1  Storage: 2G SD Card with firmware built in  Guidebook:  Livera GuideBookx1 Livera Robot Assembly GuideBookx1  Power:  9V Lipo Battery and Bat Carrier  Motor:  E-MAX SERVOx1 DC Gear Motor set(Motor + Motor Carrier + Wheels)x2  Structure bits:  Robot Base Acrylic Panels set, Omni-directional Wheel Set   Screws:  M2x15(+6)mm Nylon Studx4, M2x6mm Nylon Studx4, M2x6(+6)mm Nylon Studx8, M2x10(+6)mm Nylon Studx8, M2 Nylon Nutx4   OUTPUT:  LASER Beanx1  Accessories:  Stickersx1, USB Cablex1, Screwdriver(+,-)x1",
            "title": "Parts list"
        },
        {
            "location": "/livera/robotAssemGuide/#video-tutorial",
            "text": "We've also created a video toturial to give you a more detailed, much clear step by step toturial, would help you with:   Pyhsical Assembly  Webapp Guide",
            "title": "Video Tutorial"
        },
        {
            "location": "/livera/robotAssemGuide/#step-1-base-panel-build",
            "text": "Unpack the Livera Robot kit package, Find out the following conponents in order to build the base panel of the Robot.   Robot Base Acrylic Panel x1  DC Motor + Motor Carrier x2  Omni-directional Wheel Set x1  M2x15(+6)mm Nylon Stud x4  M2x6mm Nylon Stud x4  M2x6(+6)mm Nylon Stud x4  M2 Nylon Nut x4   Notice:  All the Stud could be install by hand, doesn't require and tools. Caution:  Don't make it too tight while screwing with the  Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard.    Assemble up the  Omni-direction Wheel Set  like the picture shows, then close up with the  Cover bit , waiting for screw on the  Base Panel.       Install the motor on base panel:  carefully place the  M2 Nut  onto the  Motor Carrier's slot , than catch the  DC Motor  and match to the hole on the  Base Panle , notice to keep the  +  sign on top as the left top of the pic shows, using  M2x6(+6) Stud  to screw through from the other side of the panel.  Install the Structure bit:  place the  M2x15(+6) Stud  on top of the  Base panel , then let the  6mm screw bit  through the hole and screw into the  M2x6mm Stud.",
            "title": "Step 1: Base panel build"
        },
        {
            "location": "/livera/robotAssemGuide/#step-2-body-build",
            "text": "Install the Livera Motor Driver:  simply place by matching to the  Stud.  Install the Structure bit:  Screw  M2x10(+6)mm Stud  on top.   Caution:  Don't make it too tight while screwing with the  Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard.     Install HICAT.Livera with Extend Cable:  carefully stack  Livera  on top of  Livera Motor Driver,  do check for the  I/O ports  and the  outline  to see weather it is matched to the  Livera Motor Driver.  Install the Structure bit:  Screw  M2x10(+6)mm Stud  on top of Livera.   Caution:  Don't make it too tight while screwing with the  Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard.",
            "title": "Step 2: Body build"
        },
        {
            "location": "/livera/robotAssemGuide/#step-3-top-build",
            "text": "Install the top Acrylic Panel:  place the  Top Acrylic Panel , fix the panle by screw the  M2x6(+6)mm Stud  on top.  Stick the Power case and Servo:  unpack the  3M Sticker,  stick the conponents as the image shows.  Connect Power:  connect the 2.54mm Power connector from  Power case  to  Livera Motor Driver.     Install the Camera pan-tilt:  screw the Servo Arm Set form the  EMAX Servo set  on the  Camera Pan-tilt.  Install Camera Module:  carefully place the camera module on the  Acrylic Camera Pan-tilt , using  M2 Rivet  to fix it.  Install Camera Extend Cable and Laser Bean:  install the conponents as the picture shows, notice that the  direction  of the camera module should be  match together  according to the  indicate drawings.",
            "title": "Step 3: Top build"
        },
        {
            "location": "/livera/robotAssemGuide/#step-4-wiring",
            "text": "Wiring:  wire up all the electronics(Motors, Laser, Servo) as the picture shows, for the  DC Motor  wring, you would need to use the screwdriver to fix the wire into the adapter.  Install SD card:  put the  SD card  into the SD slot.     Install Battery:  put the  9v chargable battery  into the  Power Case.  Power up to init the Servo:  switch on the  Power Switch  From the Motor Driver, wait until heard  two movement  from the  Servo,  then put the  Camera Pan-tilt  on the  Servo  in a  horizon direction,  screw it up using the smallest screw from the Servo Box.  Enjoy:  pick up you cell phone, connect to the  Livera's wifi ,   ssid:hicat_xxxxxx\npassward:88888888  then open  chrome browser , go to the web page   http://192.168.1.1/mmc/webapp/index.html    Switch the top video switcher to  MJPG MODE , click  LiveView , if the image flipped, you could change it within  QUALITY,  we suggest you to chose  240p/15fps.    Click  ROBOT  to open the control panel, Try press forward button, if you see the robot  spinning  or  move back,  you could adjust the wiring by switch the  DC motor  wire from the adapter.",
            "title": "Step 4: Wiring"
        },
        {
            "location": "/tutorials/TI/resources/",
            "text": "TI Launchpad Resources\n\n\nMSP32:\n\n\nhttp://www.ti.com/tool/MSP-EXP432P401R?DCMP=ep-mcu-msp-432-en&HQS=beginmsp432launchpad#project0\n\nhttp://www2.keil.com/mdk5/\n\nhttp://dev.ti.com/tirex/#/DevTool/MSP-EXP432P401R\n\nhttp://www.ti.com/tool/energia\n\nhttp://energia.nu/\n\nhttp://energia.nu/guide/multitasking/\n\nhttp://dev.ti.com/tirex/#/Search/out%20of%20box%20experience?link=MSP432%20Pre-Production,%20Black%20LP%2FDevelopment%20Tools%2FMSP-EXP432P401R%20-%20Rev%201.0%20(Black)%2FDocuments  \n\n\nOut of the Box Demo:\n\n\nOut of the Box Demo\n  \n\n\nMore Resources:\n\n\nLady Adas DHT Library\n\nhttp://forum.43oh.com/topic/2826-ladyadas-dht-library-lcd/\n\nhttp://forum.43oh.com/topic/1312-nokia-5110-display/\n\nhttp://forum.43oh.com/topic/1769-nokia-5110-c-template-class/\n\nhttp://forum.43oh.com/topic/5920-energia-library-dht11-dht22-temperature-and-humidity-sensors/\n\nhttps://andres.svbtle.com/how-to-add-energia-support-to-utft-library\n\nhttps://github.com/andresv/UTFT-Energia\n\nhttps://github.com/search?utf8=%E2%9C%93&q=energia  \n\n\nBoth Energia and Arduino info:\n\n\nNo Libraries needed:\n\n\nPing Sensor\n\n\nSuper Mario Song",
            "title": "TI Launchpad Resources"
        },
        {
            "location": "/tutorials/TI/resources/#ti-launchpad-resources",
            "text": "",
            "title": "TI Launchpad Resources"
        },
        {
            "location": "/tutorials/TI/resources/#msp32",
            "text": "http://www.ti.com/tool/MSP-EXP432P401R?DCMP=ep-mcu-msp-432-en&HQS=beginmsp432launchpad#project0 \nhttp://www2.keil.com/mdk5/ \nhttp://dev.ti.com/tirex/#/DevTool/MSP-EXP432P401R \nhttp://www.ti.com/tool/energia \nhttp://energia.nu/ \nhttp://energia.nu/guide/multitasking/ \nhttp://dev.ti.com/tirex/#/Search/out%20of%20box%20experience?link=MSP432%20Pre-Production,%20Black%20LP%2FDevelopment%20Tools%2FMSP-EXP432P401R%20-%20Rev%201.0%20(Black)%2FDocuments",
            "title": "MSP32:"
        },
        {
            "location": "/tutorials/TI/resources/#out-of-the-box-demo",
            "text": "Out of the Box Demo",
            "title": "Out of the Box Demo:"
        },
        {
            "location": "/tutorials/TI/resources/#more-resources",
            "text": "Lady Adas DHT Library \nhttp://forum.43oh.com/topic/2826-ladyadas-dht-library-lcd/ \nhttp://forum.43oh.com/topic/1312-nokia-5110-display/ \nhttp://forum.43oh.com/topic/1769-nokia-5110-c-template-class/ \nhttp://forum.43oh.com/topic/5920-energia-library-dht11-dht22-temperature-and-humidity-sensors/ \nhttps://andres.svbtle.com/how-to-add-energia-support-to-utft-library \nhttps://github.com/andresv/UTFT-Energia \nhttps://github.com/search?utf8=%E2%9C%93&q=energia",
            "title": "More Resources:"
        },
        {
            "location": "/tutorials/TI/resources/#both-energia-and-arduino-info",
            "text": "No Libraries needed:  Ping Sensor  Super Mario Song",
            "title": "Both Energia and Arduino info:"
        },
        {
            "location": "/tutorials/ESP-MESH/ESP-MESH/",
            "text": "ESP-MESH Board\n\n\nThis board isn't listed on the WIKI. Here is what I learned so far. (2/19/2019).  \n\n\n\n\nSelect Generic ESP8285 from the Arduino Boards manager.  \n\n\nAs the IDE is compiling the sketch, hold the flash button, release it when the IDE is waiting for the board.  \n\n\nThe RGB LED on board  \n\n\nRED is pin 12  \n\n\nBLUE is pin 13  \n\n\nGREEN is pin 14  \n\n\ndigitalWrite HIGH will turn the LED off  \n\n\ndigitalWrite LOW will turn the LED on  \n\n\nanalogWrite (PWM) works from 0 to 1024.  \n\n\n\n\n\n\nPainlessMesh\n for the ESP8266/ESP32 board work with no problems.  \n\n\nThe \"HelloMesh\" example included with the ESP8266 boards also works, but you have to remember to set an IP address for each node.",
            "title": "ESP-MESH Board"
        },
        {
            "location": "/tutorials/ESP-MESH/ESP-MESH/#esp-mesh-board",
            "text": "This board isn't listed on the WIKI. Here is what I learned so far. (2/19/2019).     Select Generic ESP8285 from the Arduino Boards manager.    As the IDE is compiling the sketch, hold the flash button, release it when the IDE is waiting for the board.    The RGB LED on board    RED is pin 12    BLUE is pin 13    GREEN is pin 14    digitalWrite HIGH will turn the LED off    digitalWrite LOW will turn the LED on    analogWrite (PWM) works from 0 to 1024.      PainlessMesh  for the ESP8266/ESP32 board work with no problems.    The \"HelloMesh\" example included with the ESP8266 boards also works, but you have to remember to set an IP address for each node.",
            "title": "ESP-MESH Board"
        },
        {
            "location": "/projects/arduino/chatterbot/",
            "text": "Chatter Bot\n\n\nInstallation\n\n\nSimple fun chatter bot. \n\n1) Head from a Wowwee Tri-bot\n\n2) Catalex Uart MP3 player \n\n3) Arduino UNO or the like\n\n4) amplified speaker for the MP3 player  \n\n\nFrom the Tri-Bot Head, purple wire is connected to 3.3v\nusing a ground wire I tested the other wires to figure out which does what.\nI am only using the center mouth led, and the 2 eye leds in this project.\nThere are also 2 ear leds, a white led (headlamp), and 2 more mouth leds.\nThere is a motor that will pop the headlamp and ears out.\nThis motor will also bring them all back into the head. \n\n\nYou need to find some jokes or some random stuff for your chat bot to just\nmindless say.  For mine I found some Star Wars jokes. Used a Text to Speech program, I made\na WAV file, and converted that file to a MP3. \nThe MP3 player will play the 1st \"song\" it finds and stops. The mouth leds are not\nany way synchronized to the sound, it just flashes the mouth.\n\n\nThings To Do\n\n\nadd other mouth LEDs.\nmake it play more than one MP3 file or repeat the MP3 over and over again.\n\n\nUsage\n\n\nTODO: Write usage instructions\n\n\nContributing\n\n\n\n\nFork it!\n\n\nCreate your feature branch: \ngit checkout -b my-new-feature\n\n\nCommit your changes: \ngit commit -am 'Add some feature'\n\n\nPush to the branch: \ngit push origin my-new-feature\n\n\nSubmit a pull request\n\n\n\n\nCredits\n\n\nLeRoy Miller (2015) and Catalex (unknown date)\nmost of the software is for the mp3 and based off the Catalex sketches.\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "Chatter Bot"
        },
        {
            "location": "/projects/arduino/chatterbot/#chatter-bot",
            "text": "",
            "title": "Chatter Bot"
        },
        {
            "location": "/projects/arduino/chatterbot/#installation",
            "text": "Simple fun chatter bot.  \n1) Head from a Wowwee Tri-bot \n2) Catalex Uart MP3 player  \n3) Arduino UNO or the like \n4) amplified speaker for the MP3 player    From the Tri-Bot Head, purple wire is connected to 3.3v\nusing a ground wire I tested the other wires to figure out which does what.\nI am only using the center mouth led, and the 2 eye leds in this project.\nThere are also 2 ear leds, a white led (headlamp), and 2 more mouth leds.\nThere is a motor that will pop the headlamp and ears out.\nThis motor will also bring them all back into the head.   You need to find some jokes or some random stuff for your chat bot to just\nmindless say.  For mine I found some Star Wars jokes. Used a Text to Speech program, I made\na WAV file, and converted that file to a MP3. \nThe MP3 player will play the 1st \"song\" it finds and stops. The mouth leds are not\nany way synchronized to the sound, it just flashes the mouth.",
            "title": "Installation"
        },
        {
            "location": "/projects/arduino/chatterbot/#things-to-do",
            "text": "add other mouth LEDs.\nmake it play more than one MP3 file or repeat the MP3 over and over again.",
            "title": "Things To Do"
        },
        {
            "location": "/projects/arduino/chatterbot/#usage",
            "text": "TODO: Write usage instructions",
            "title": "Usage"
        },
        {
            "location": "/projects/arduino/chatterbot/#contributing",
            "text": "Fork it!  Create your feature branch:  git checkout -b my-new-feature  Commit your changes:  git commit -am 'Add some feature'  Push to the branch:  git push origin my-new-feature  Submit a pull request",
            "title": "Contributing"
        },
        {
            "location": "/projects/arduino/chatterbot/#credits",
            "text": "LeRoy Miller (2015) and Catalex (unknown date)\nmost of the software is for the mp3 and based off the Catalex sketches.",
            "title": "Credits"
        },
        {
            "location": "/projects/arduino/chatterbot/#license",
            "text": "This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.  This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "License"
        },
        {
            "location": "/projects/arduino/arduino-project-4x4-keypad-matrix-rotary-encoder/README/",
            "text": "20140625 4x4 Keypad Matrix & Rotary Encoder with switch\n\n\nMy final project for the week was to use a 4x4 keypad matrix, and a\nrotary encoder with switch.\n\n\n{width=\"6.5in\" height=\"3.6527777777777777in\"}\n\n\nThe 4x4 16 Key matrix is pretty easy to use, it does take 8 I/O lines,\nbut works well, and the code to make it work is pretty small. A lot of\ninformation about it can be found here:\n\n\nhttps://sites.google.com/site/arduinomega2560projects/home/level-2/4x4-matrix-16-key-membrane\n\n\nI did end up modifying the code slightly, They were using a Mega, but I\nthink the code would have needed to be modified slightly even if they\nhad hooked up a UNO. 1st they used Pin 13 twice (one time to turn on/off\nthe LED, and again they used it to read the keypad, this of course\ndidn\u2019t work). SO I ended up moving the line from pin 13 to pin 5. Next\nthing it\u2019s not as clear as it could be which pins on the keypad to hook\nto which pins on the arduino.\n\n\nI am going to use his picture and try to explain it a bit better:\n\n\n{width=\"3.526042213473316in\" height=\"2.78125in\"}\n\n\n1 2 3 4 5 6 7 8\n\n\nas you can see there are 8 pins on the keypad. Looking from the left to\nthe right lets # them 1 to 8, (I made the picture bigger, so it looks\ndistorted, and my numbers may or may not line up the way I want, but I\ntried).\n\n\nI am using an UNO, but from what I can tell this should work on any\nvariation of Arduino.\n\n\nKeypad Pins   Arduino Pins\n\n\n\n\n1             9\n  2             8\n  3             7\n  4             6\n  5             5 (This is my modification)\n  6             12\n  7             11\n  8             10\n\n\nThis setup seems to work with the (modified) sketch and library found on\nthe website.\n\n\nMy other modifications were an addition of pinMode(13, OUTPUT); to set\nthe Led, the * and # on the keypad will turn on and off the LED, this\nseemed to be a needed change with the way the sketch was written.\n\n\nThe sketch setups an array with the numbers and letters in the \u201ccorrect\u201d\nlocations, as you push a button it reads the ROWs and COLs and then\nusing the array it outputs the number or letter.\n\n\n\n\n/* Keypadtest.pde\n\n\n*\n\n\n* Demonstrate the simplest use of the keypad library.\n\n\n*\n\n\n* The first step is to connect your keypad to the\n\n\n* Arduino using the pin numbers listed below in\n\n\n* rowPins[] and colPins[]. If you want to use different\n\n\n* pins then you can change the numbers below to\n\n\n* match your setup.\n\n\n*\n\n\n*/\n\n\n#include <Keypad.h>\n\n\nconst byte ROWS = 4; // Four rows\n\n\nconst byte COLS = 4; // four columns\n\n\n// Define the Keymap\n\n\nchar keys[ROWS][COLS] = {\n\n\n{'1','2','3','A'},\n\n\n{'4','5','6','B'},\n\n\n{'7','8','9','C'},\n\n\n{'*','0','#','D'}\n\n\n};\n\n\n// Connect keypad ROW0, ROW1, ROW2 and ROW3 to these Arduino pins.\n\n\nbyte rowPins[ROWS] = { 9, 8, 7, 6 };\n\n\n// Connect keypad COL0, COL1 and COL2 to these Arduino pins.\n\n\nbyte colPins[COLS] = { 5, 12, 11, 10 };\n\n\n// Create the Keypad\n\n\nKeypad kpd = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );\n\n\n#define ledpin 13\n\n\nvoid setup()\n\n\n{\n\n\n// digitalWrite(ledpin, HIGH);\n\n\npinMode(13, OUTPUT);\n\n\nSerial.begin(9600);\n\n\n}\n\n\nvoid loop()\n\n\n{\n\n\nchar key = kpd.getKey();\n\n\nif(key) // Check for a valid key.\n\n\n{\n\n\nswitch (key)\n\n\n{\n\n\ncase '*':\n\n\ndigitalWrite(13, LOW);\n\n\nbreak;\n\n\ncase '#':\n\n\ndigitalWrite(13, HIGH);\n\n\nbreak;\n\n\ndefault:\n\n\nSerial.println(key);\n\n\n}\n\n\n}\n\n\n}\n\n\n\n\n\n\nAbove is my modified code.\n\n\nThe Rotary switch is something a little different, from this website,\n\nhttp://bildr.org/2012/08/rotary-encoder-arduino/\n\n\nit\u2019s output this a 2 digit binary code, that will go 00, 01, 10, 11, so\nif you are rotating the switch and starting at 01 you can either have a\n00 or 11 depending on direction of the switch. so by adding the previous\nencoded value to the beginning of the current encoded value we get 1 of\n8 possible numbers (0001, 0010, 0100, 0111, 1000, 1011, 1110, 1101)\n1101, 0100, 0010, 1011 all mean clockwise movement, 1110, 0111, 0001,\n1000 are all counter-clockwise. Easy enough, now we just need to read\nthe switches, The sketch uses interrupts to handle this, and it seems to\na good way to handle it.\n\n\nWhile the website, explained how these worked pretty well, it didn\u2019t\nhave hook up instructions for the encoder Jim got, it took a little\ntrail and error, but since are only 5 pins, it wasn\u2019t that hard to\nfigure out.\n\n\n{width=\"2.4722222222222223in\"\nheight=\"1.9861111111111112in\"}\n\n\nAs you can see in this picture it\u2019s pins are labeled,\n\n\n2 of the labels ended up making since:\n\n\nGND - Ground & SW - is the Switch (Pin 4 on the Arduino)\n\n\nRotary Switch Pin   Arduino\n\n\n\n\nGnd                 ground\n  +                   2\n  SW                  4\n  DT                \n\n  CLK                 3\n\n\nThe rotary encoder Jim got has a switch, so I used the code for that\nsection.\n\n\nOne line of code did need to be changed, In void loop() the\nif(digitalRead(encoderSwitchPin2).... should just be\n(encoderSwitchPin)... That was the only error I found in the code.\n\n\n\n\n//From bildr article: http://bildr.org/2012/08/rotary-encoder-arduino/\n\n\n//these pins can not be changed 2/3 are special pins\n\n\nint encoderPin1 = 2;\n\n\nint encoderPin2 = 3;\n\n\nint encoderSwitchPin = 4; //push button switch\n\n\nvolatile int lastEncoded = 0;\n\n\nvolatile long encoderValue = 0;\n\n\nlong lastencoderValue = 0;\n\n\nint lastMSB = 0;\n\n\nint lastLSB = 0;\n\n\nvoid setup() {\n\n\nSerial.begin (9600);\n\n\npinMode(encoderPin1, INPUT);\n\n\npinMode(encoderPin2, INPUT);\n\n\npinMode(encoderSwitchPin, INPUT);\n\n\ndigitalWrite(encoderPin1, HIGH); //turn pullup resistor on\n\n\ndigitalWrite(encoderPin2, HIGH); //turn pullup resistor on\n\n\ndigitalWrite(encoderSwitchPin, HIGH); //turn pullup resistor on\n\n\n//call updateEncoder() when any high/low changed seen\n\n\n//on interrupt 0 (pin 2), or interrupt 1 (pin 3)\n\n\nattachInterrupt(0, updateEncoder, CHANGE);\n\n\nattachInterrupt(1, updateEncoder, CHANGE);\n\n\n}\n\n\nvoid loop(){\n\n\n//Do stuff here\n\n\nif(digitalRead(encoderSwitchPin)){\n\n\n//button is not being pushed\n\n\n}else{\n\n\n//button is being pushed\n\n\n}\n\n\nSerial.println(encoderValue);\n\n\ndelay(1000); //just here to slow down the output, and show it will work even during a delay\n\n\n}\n\n\nvoid updateEncoder(){\n\n\nint MSB = digitalRead(encoderPin1); //MSB = most significant bit\n\n\nint LSB = digitalRead(encoderPin2); //LSB = least significant bit\n\n\nint encoded = (MSB << 1) |LSB; //converting the 2 pin value to single number\n\n\nint sum = (lastEncoded << 2) | encoded; //adding it to the previous encoded value\n\n\nif(sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) encoderValue ++;\n\n\nif(sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) encoderValue --;\n\n\nlastEncoded = encoded; //store this value for next time\n\n\n}\n\n\n\n\n\n\nThe above code has been modified.\n\n\nMy next step was to make both the Keypad & the Rotary Encoder work\ntogether, I combined the code from both, made a couple of small changes\nto how the rotary encoder worked, you now can change the rotary\nswitches, but the changes are not displayed until you push the switch\nbutton. The keypad will work with out the button being pushed, and the\nLED on pin 13 will turn on and off with the use of * and # keys.\n\n\nThis is what I came up with:\n\n\n\n\n/* Keypadtest.pde\n\n\n*\n\n\n* Demonstrate the simplest use of the keypad library.\n\n\n*\n\n\n* The first step is to connect your keypad to the\n\n\n* Arduino using the pin numbers listed below in\n\n\n* rowPins[] and colPins[]. If you want to use different\n\n\n* pins then you can change the numbers below to\n\n\n* match your setup.\n\n\n*\n\n\n*/\n\n\n#include <Keypad.h>\n\n\nint encoderPin1 = 2;\n\n\nint encoderPin2 = 3;\n\n\nint encoderSwitchPin = 4; //push button switch\n\n\nvolatile int lastEncoded = 0;\n\n\nvolatile long encoderValue = 0;\n\n\nlong lastencoderValue = 0;\n\n\nint lastMSB = 0;\n\n\nint lastLSB = 0;\n\n\nconst byte ROWS = 4; // Four rows\n\n\nconst byte COLS = 4; // four columns\n\n\n// Define the Keymap\n\n\nchar keys[ROWS][COLS] = {\n\n\n{'1','2','3','A'},\n\n\n{'4','5','6','B'},\n\n\n{'7','8','9','C'},\n\n\n{'*','0','#','D'}\n\n\n};\n\n\n// Connect keypad ROW0, ROW1, ROW2 and ROW3 to these Arduino pins.\n\n\nbyte rowPins[ROWS] = { 9, 8, 7, 6 };\n\n\n// Connect keypad COL0, COL1 and COL2 to these Arduino pins.\n\n\nbyte colPins[COLS] = { 5, 12, 11, 10 };\n\n\n// Create the Keypad\n\n\nKeypad kpd = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );\n\n\n#define ledpin 13\n\n\nvoid setup()\n\n\n{\n\n\n// digitalWrite(ledpin, HIGH);\n\n\npinMode(13, OUTPUT);\n\n\nSerial.begin(9600);\n\n\npinMode(encoderPin1, INPUT);\n\n\npinMode(encoderPin2, INPUT);\n\n\npinMode(encoderSwitchPin, INPUT);\n\n\ndigitalWrite(encoderPin1, HIGH); //turn pullup resistor on\n\n\ndigitalWrite(encoderPin2, HIGH); //turn pullup resistor on\n\n\ndigitalWrite(encoderSwitchPin, HIGH); //turn pullup resistor on\n\n\n//call updateEncoder() when any high/low changed seen\n\n\n//on interrupt 0 (pin 2), or interrupt 1 (pin 3)\n\n\nattachInterrupt(0, updateEncoder, CHANGE);\n\n\nattachInterrupt(1, updateEncoder, CHANGE);\n\n\n}\n\n\nvoid loop()\n\n\n{\n\n\nif(digitalRead(encoderSwitchPin)){\n\n\n//button is not being pushed\n\n\n}else{\n\n\nSerial.println(\"Rotary Encoder Button Pushed\");\n\n\n//button is being pushed\n\n\nSerial.print(\"Rotary Encoder: \");\n\n\nSerial.println(encoderValue);\n\n\ndelay(100); //just here to slow down the output, and show it will work even during a delay\n\n\n}\n\n\nchar key = kpd.getKey();\n\n\nif(key) // Check for a valid key.\n\n\n{\n\n\nswitch (key)\n\n\n{\n\n\ncase '*':\n\n\ndigitalWrite(13, LOW);\n\n\nbreak;\n\n\ncase '#':\n\n\ndigitalWrite(13, HIGH);\n\n\nbreak;\n\n\ndefault:\n\n\nSerial.println(key);\n\n\n}\n\n\n}\n\n\n}\n\n\nvoid updateEncoder(){\n\n\nint MSB = digitalRead(encoderPin1); //MSB = most significant bit\n\n\nint LSB = digitalRead(encoderPin2); //LSB = least significant bit\n\n\nint encoded = (MSB << 1) |LSB; //converting the 2 pin value to single number\n\n\nint sum = (lastEncoded << 2) | encoded; //adding it to the previous encoded value\n\n\nif(sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) encoderValue ++;\n\n\nif(sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) encoderValue --;\n\n\nlastEncoded = encoded; //store this value for next time\n\n\n}\n\n\n\n\n\n\nSo there you have it, a whole week of Binary and BCD!",
            "title": "4x4 Keypad Matrix"
        },
        {
            "location": "/projects/arduino/arduino-project-arduino-vga-out/README/",
            "text": "May 6, 2014\n\n\nArduino VGA Out, one of the many things I randomly see as I roam the\ninternet. This is kind of a neat project, and it does work, and it was\npretty simple to hookup even thou there was an error in the\ndocumentation. I do have to say that couple of the sketches on the\ngoogle code site didn\u2019t work. I\u2019m not sure if they are works in progress\nor what. That being said, the project did as expected and outputed a\ndisplay on a VGA monitor. Here is the link to the project,\n\n\nhttps://code.google.com/p/arduino-vgaout/\n\nIt seems there hasn\u2019t been\nan activity on the site since June of 2013, so I don\u2019t know what the\ncurrent status is. I also had to do a little digging to find what pins\non the arduino this uses. And pictures of someones completed setup can\nbe found here (It looks like he was using a 2011 version):\n\n\nhttps://plus.google.com/photos/117534855759200010314/albums/5687433885778031105?banner=pwa\n\n\nIn the schematic, he also points out that PIN 9 shouldn\u2019t be hooked up\non the VGA connector, PIN 5 and PIN 10 should be ground, there was an\nerror in the original schematics that are still on the google code site.\n\n\nQuite a bit more information can be found on the Arduino forums:\n\n\nhttp://forum.arduino.cc/index.php?PHPSESSID=dfdb14903eb27c46f88347c097effb39&topic=76020.msg1123866#msg1123866\n\n\nI was going to chop up an old VGA cable to make this when I found that\nMCM electronics have this (and it\u2019s only \\$4.50) and since I wanted to\nbe sure I got the right resistors for this project I was already going\nto make an order, seemed like a no brainer:\n\n\nhttp://www.mcmelectronics.com/product/83-12821\n\n\n{width=\"4.6875in\" height=\"1.4375in\"}\n\n\nIt probably ending up saving some build time, thou how much would be\ndebatable. So here are a couple of pictures of my setup:\n\n\n{width=\"6.5in\" height=\"4.875in\"}\n\n\n{width=\"6.5in\" height=\"4.875in\"}\n\n\n{width=\"6.5in\"\nheight=\"4.875in\"}\n{width=\"6.5in\" height=\"4.875in\"}\n\n\n{width=\"6.5in\" height=\"4.875in\"}\n\n\nSo as you can see, it\u2019s takes up a lot of pins, all of the analog pins,\nand 2 of the digital pins. The digital pins are used for HSYNC and\nVSYNC, the analog pins are used for RGB, each color channel takes two\npins, and each have a 1K and 470ohm resistor wired up. And yeah, I went\na little nuts with the size of the resistors, I wasn\u2019t really thinking\nabout it at the time I ordered them, oh well, they were cheap something\nlike \\$0.70 for 10 of them.\n\n\nI probably need to trim up the resistors a little, but what the heck it\nworks, and it will be one of those projects that I can say I did it, and\nnow it\u2019s in a box\u2026 :-)",
            "title": "Arduino VGA"
        },
        {
            "location": "/projects/arduino/arduino-project-bmp180-digital-barometric-pressur/README/",
            "text": "Arduino Project: BMP180 Digital Barometric Pressure Sensor {#arduino-project-bmp180-digital-barometric-pressure-sensor}\n\n\nMay 8, 2014\n\n\nBMP180 Digital Barometric Pressure Sensor\n\n\nOnce again the folks over at Sparkfun out do the folks at Ada Fruit - Starting to worry about the people at Ada Fruit they are slipping alittle. LOL\n\n\nThere is more information about this sensor then I could possibly give you, they even go into what pascal are (Pa, Basicly it\u2019s a measure of force per unit area, defined as one newton per square metre - You get all that...yeah, see Sparkfun explains it beter)\n\n\nhttps://learn.sparkfun.com/tutorials/bmp180-barometric-pressure-sensor-hookup-/under-pressure\n\n\nThe device that Sparkfun has is different, from what the club has, but it\u2019s almost the same, it\u2019s close enough that their tutorial works really well. The sensor on it is the same sensor that on the clubs BMP180.\n\n\nThe device is an I2C device, it is very easy to hook up. SDA, SCL (Data and Clock), 3.3v and ground, that is it. On the UNO it\u2019s SDA to A4, SCL to A5\n\n\nThe other VCC connector on the board is for voltages lower then 3.3v\n\n\n\n\nAda Fruit does have plenty of information about this sensor as well, and their sensor looks more like what the club has.\n\n\nhttp://www.adafruit.com/products/1603\n and \nhttps://learn.adafruit.com/bmp085\n\n\nThe problem I had with Adafruits was the sketch didn\u2019t seem to give as much or as good information as what Sparkfun did.\n\n\n\n\nAdafruits also requires one extra library which wasn\u2019t included in the download package provided, that caused an issue for about 2 mins until I realized it called a different library. Not sure why they did that, but after I got the 2nd library it did work, just didn\u2019t seem as good as Sparkfun.\n\n\nThe outputs from the sensor, are Pressure, Temperature, and Altitude (Altitude can be both above sea-level and as a relative from it\u2019s starting point), this is a very cool sensor, and with the addition of the humitdy sensor and maybe a wind speed sensor, this could be a complete low cost weather station.",
            "title": "BMP180 Sensor"
        },
        {
            "location": "/projects/arduino/arduino-project-bmp180-digital-barometric-pressur/README/#arduino-project-bmp180-digital-barometric-pressure-sensor-arduino-project-bmp180-digital-barometric-pressure-sensor",
            "text": "May 8, 2014  BMP180 Digital Barometric Pressure Sensor  Once again the folks over at Sparkfun out do the folks at Ada Fruit - Starting to worry about the people at Ada Fruit they are slipping alittle. LOL  There is more information about this sensor then I could possibly give you, they even go into what pascal are (Pa, Basicly it\u2019s a measure of force per unit area, defined as one newton per square metre - You get all that...yeah, see Sparkfun explains it beter)  https://learn.sparkfun.com/tutorials/bmp180-barometric-pressure-sensor-hookup-/under-pressure  The device that Sparkfun has is different, from what the club has, but it\u2019s almost the same, it\u2019s close enough that their tutorial works really well. The sensor on it is the same sensor that on the clubs BMP180.  The device is an I2C device, it is very easy to hook up. SDA, SCL (Data and Clock), 3.3v and ground, that is it. On the UNO it\u2019s SDA to A4, SCL to A5  The other VCC connector on the board is for voltages lower then 3.3v   Ada Fruit does have plenty of information about this sensor as well, and their sensor looks more like what the club has.  http://www.adafruit.com/products/1603  and  https://learn.adafruit.com/bmp085  The problem I had with Adafruits was the sketch didn\u2019t seem to give as much or as good information as what Sparkfun did.   Adafruits also requires one extra library which wasn\u2019t included in the download package provided, that caused an issue for about 2 mins until I realized it called a different library. Not sure why they did that, but after I got the 2nd library it did work, just didn\u2019t seem as good as Sparkfun.  The outputs from the sensor, are Pressure, Temperature, and Altitude (Altitude can be both above sea-level and as a relative from it\u2019s starting point), this is a very cool sensor, and with the addition of the humitdy sensor and maybe a wind speed sensor, this could be a complete low cost weather station.",
            "title": "Arduino Project: BMP180 Digital Barometric Pressure Sensor {#arduino-project-bmp180-digital-barometric-pressure-sensor}"
        },
        {
            "location": "/projects/arduino/arduino-project-fs1000a-433mhz-transmitters/README/",
            "text": "Arduino Project: FS1000a 433Mhz Transmitters {#arduino-project-fs1000a-433mhz-transmitters}\n\n\n02/27/2014 FS1000a 315mhz RX/TX pair\n\n\n1. Project Reference Number / Title:\n\n\n\n\n20140227 FS1000a 315mhz RX/TX pair\n\n\n\n\nI have a corner! :-)\n\n\nFeb 27, 2014\n\n\nInitial tests of FS1000a 315mhz RX/TX pair:\n\n\nThis document seems to be relevant to these transmit and receivers.\n\n\nhttp://ardumarket.com/en/transmisors/transmisor-rf-fs1000a-330-443mhz-arduino-pic-id19.html\n\n\nYou also need the library from here:\n\n\nhttp://www.open.com.au/mikem/arduino/VirtualWire/VirtualWire-1.14.zip\n\n\nThe library contains the sketches found on the page, with the exception that they don\u2019t set the RX or TX pin\n\n\nvw_set_tx_pin(3);\n\n\nvw_set_rx_pin(3);\n\n\nAlso the receiver sketch seems to be a bit different - the example in the library prints out HEX codes.\n\n\nfor the most part these are very simple to use - one Arduino is setup to send information, the other is setup to receive that information - and do something with it.\n\n\nModulation type is ASK - or Amplitude Shift Keying - This type of modulation is like AM radio for data So it has some of the same weaknesses and strengths of AM. For more information see:\n\n\nhttp://en.wikipedia.org/wiki/Amplitude-shift_keying\n\n\nFinding a distance for them was a little harder, but as near as I can figure\n\n\n40 meters or 131 feet indoors, 100 meters or 328 feet in the open.\n\n\nI tested at about 60 feet inside and it worked without a problem.\n\n\nRange seems to be dependant on how much voltage you put on the transmitter - from what I found the TX board can handle between 3 to 12v - with 5v being normal - I don\u2019t know if I trust 12v in this figure, as I only found a couple of sites that said it, and the TX boards were not the same board we have. Better to be safe then sorry and go with 5v.\n\n\nLike finding a range for these, finding a speed wasn\u2019t as easy as it should be - most sites say between 4800 and 9600 baud work well. A couple of sites say they can go faster, but faster may cause unreliable data (or no data at all). One site even said that speed was dependant on distance (I don\u2019t think that is right given the type of modulation this uses, but maybe). The sites that have 480 to 9600 baud listed say that it\u2019s a reliable low speed for general use such as reading sensor data.\n\n\nImpressions of this it would make a good low power data sender for a remote sensor, only takes up one pin, and is really simple to use.\n\n\nOther information (But not sure if the RX/TX board are the same as what we have):\n\n\nhttps://www.sparkfun.com/datasheets/RF/KLP_Walkthrough.pdf\n\n\nhttp://www.seeedstudio.com/wiki/index.php?title=315Mhz_RF_link_kit\n (Pretty sure this is our board)\n\n\nhttp://www.seeedstudio.com/depot/315mhz-rf-link-kit-p-76.html\n\n\nUpdate: Feb 28 - Maybe this is not as easy as I first thought, the library seems to have some quirky issues - 1st it seems to want to send a \u201cconst char *variable\u201d, I\u2019m not really sure what that is. (Found this out by trying to send a tempature variable floating point to it)\n\n\nand the 2nd thing I found is that it doesn\u2019t work on some of the lesser know Arduino like boards.\n\n\n(have been trying for the past 2 hours to get the library to work with my Squarewear, wearable temperature sensor, only to find it really doesn\u2019t like that hardware at all) Admittedly the squarewear is not an Arduino, it is closely related to one.\n\n\nPlans this weekend, try some alternative methods of getting these RF devices to work.",
            "title": "FS1000a 433mhz Transmitters"
        },
        {
            "location": "/projects/arduino/arduino-project-fs1000a-433mhz-transmitters/README/#arduino-project-fs1000a-433mhz-transmitters-arduino-project-fs1000a-433mhz-transmitters",
            "text": "02/27/2014 FS1000a 315mhz RX/TX pair  1. Project Reference Number / Title:   20140227 FS1000a 315mhz RX/TX pair   I have a corner! :-)  Feb 27, 2014  Initial tests of FS1000a 315mhz RX/TX pair:  This document seems to be relevant to these transmit and receivers.  http://ardumarket.com/en/transmisors/transmisor-rf-fs1000a-330-443mhz-arduino-pic-id19.html  You also need the library from here:  http://www.open.com.au/mikem/arduino/VirtualWire/VirtualWire-1.14.zip  The library contains the sketches found on the page, with the exception that they don\u2019t set the RX or TX pin  vw_set_tx_pin(3);  vw_set_rx_pin(3);  Also the receiver sketch seems to be a bit different - the example in the library prints out HEX codes.  for the most part these are very simple to use - one Arduino is setup to send information, the other is setup to receive that information - and do something with it.  Modulation type is ASK - or Amplitude Shift Keying - This type of modulation is like AM radio for data So it has some of the same weaknesses and strengths of AM. For more information see:  http://en.wikipedia.org/wiki/Amplitude-shift_keying  Finding a distance for them was a little harder, but as near as I can figure  40 meters or 131 feet indoors, 100 meters or 328 feet in the open.  I tested at about 60 feet inside and it worked without a problem.  Range seems to be dependant on how much voltage you put on the transmitter - from what I found the TX board can handle between 3 to 12v - with 5v being normal - I don\u2019t know if I trust 12v in this figure, as I only found a couple of sites that said it, and the TX boards were not the same board we have. Better to be safe then sorry and go with 5v.  Like finding a range for these, finding a speed wasn\u2019t as easy as it should be - most sites say between 4800 and 9600 baud work well. A couple of sites say they can go faster, but faster may cause unreliable data (or no data at all). One site even said that speed was dependant on distance (I don\u2019t think that is right given the type of modulation this uses, but maybe). The sites that have 480 to 9600 baud listed say that it\u2019s a reliable low speed for general use such as reading sensor data.  Impressions of this it would make a good low power data sender for a remote sensor, only takes up one pin, and is really simple to use.  Other information (But not sure if the RX/TX board are the same as what we have):  https://www.sparkfun.com/datasheets/RF/KLP_Walkthrough.pdf  http://www.seeedstudio.com/wiki/index.php?title=315Mhz_RF_link_kit  (Pretty sure this is our board)  http://www.seeedstudio.com/depot/315mhz-rf-link-kit-p-76.html  Update: Feb 28 - Maybe this is not as easy as I first thought, the library seems to have some quirky issues - 1st it seems to want to send a \u201cconst char *variable\u201d, I\u2019m not really sure what that is. (Found this out by trying to send a tempature variable floating point to it)  and the 2nd thing I found is that it doesn\u2019t work on some of the lesser know Arduino like boards.  (have been trying for the past 2 hours to get the library to work with my Squarewear, wearable temperature sensor, only to find it really doesn\u2019t like that hardware at all) Admittedly the squarewear is not an Arduino, it is closely related to one.  Plans this weekend, try some alternative methods of getting these RF devices to work.",
            "title": "Arduino Project: FS1000a 433Mhz Transmitters {#arduino-project-fs1000a-433mhz-transmitters}"
        },
        {
            "location": "/projects/arduino/arduino-project-hc-05-bluetooth-device/README/",
            "text": "4/1/2014 HC-05 Bluetooth device\n\n\n1. Project Reference Number / Title:\n\n\n\n\n\n\n20140401 \nHC-05 Bluetooth device\n\n\n\n\n\n\nApr 1, 2014 HC-05 Bluetooth device\n\n\nAt the 1st meeting I attended Jim gave me a blank holder for the HC-05\nBluetooth device, I was able to solder a HC-05 to it today, and it\nworked well.\n\n\nThe HC-05 bluetooth is a surface mount style device, and that can be a\nlittle scary for people.\n\n\nThey are cheap enough, and the blank is cheap enough I figured if I\nmessed it up I wasn\u2019t out much. You aren\u2019t saving yourself much by\nsoldering your own to the blank (I think .30 or .35 cents, spend the\nextra money and get one already mounted).\n\n\nI used the \u201cdrag\u201d method of soldier, which is only one method for doing\nsurface mounts, but I\u2019ve got to say, it was easy to do, and it works,\nand it works well.\n\n\nYou\u2019ll see in a couple of the pictures below that I didn\u2019t get every\npin, on this it doesn\u2019t matter, I got the pins that are connected and as\nI said the bluetooth does work well.\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}",
            "title": "HC-05 Bluetooth"
        },
        {
            "location": "/projects/arduino/arduino-project-magnetic-reed-switch-water-sensor/README/",
            "text": "{width=\"2.219141513560805in\"\nheight=\"1.6510422134733158in\"}\n\n\nSpecification\n\n\n1, The use of imported normally open dry Reed tube\n\n\n2, Comparator output signal clean wave well, driving ability, than 15mA.\n\n\n3, Rated voltage and 3.3V-5V\n\n\n4, Outputs: digital switching output (0 and 1)\n\n\n5, Abolt-hole, is easy to install\n\n\n6, Small Board PCB dimensions: 3.2cm x 1.4cm\n\n\n7, Using wide LM393 voltage comparator\n\n\nDescription:\n\n\n1. The Reed switch and magnet fit is required, at the time of induction\nto a certain degree of magnetic, on-State, the module output low level,\nwhen there is no magnetic force, a\n\n\ndisconnected state, output high, Reed switch and magnets sensing\ndistance of the 1.5cm beyond insensitive or will not trigger the\nphenomenon;\n\n\n2. DO the module output can be directly connected to the microcontroller\nI/O ports, Reed can be detected by single-chip microcomputer trigger\nstatus;\n\n\n3. Modules DO the output connected to the relay IN-formed power Reed\nswitch, direct control of high voltage.\n\n\nMay 8, 2014\n\n\nMagnetic Reed Switch & Water Sensor\n - These two devices work the\nsame way, they are (for the most part) switches, what I found\ninteresting and was not expecting is that both are active low devices,\nWhat that means, is they both pass the 3.3v or 5v until the either a\nmagnetic is put to the reed switch, or the contacts on the water sensor\nare connected, then they go low.\n\n\nThere are probably a dozen of ways to use these, I ended up hooking them\nto an analog in and reading the voltages from there output lines, and\nthen I turned on the LED connected to pin 13.\n\n\nhttp://arduino.cc/en/Tutorial/ReadAnalogVoltage\n\n\nMy slightly modified sketch:\n\n\n/*\n\n\nReadAnalogVoltage\n\n\nReads an analog input on pin 0, converts it to voltage, and prints the\nresult to the serial monitor.\n\n\nAttach the center pin of a potentiometer to pin A0, and the outside pins\nto +5V and ground.\n\n\nThis example code is in the public domain.\n\n\n*/\n\n\n// the setup routine runs once when you press reset:\n\n\nvoid setup() {\n\n\n// initialize serial communication at 9600 bits per second:\n\n\nSerial.begin(9600);\n\n\npinMode(13, OUTPUT);\n\n\n}\n\n\n// the loop routine runs over and over again forever:\n\n\nvoid loop() {\n\n\n// read the input on analog pin 0:\n\n\nint sensorValue = analogRead(A0);\n\n\n// Convert the analog reading (which goes from 0 - 1023) to a voltage (0\n- 5V):\n\n\nfloat voltage = sensorValue * (5.0 / 1023.0);\n\n\n// print out the value you read:\n\n\nSerial.println(voltage);\n\n\nif (voltage > 1) {digitalWrite(13, LOW);}\n\n\nif (voltage < 1) {digitalWrite(13, HIGH);}\n\n\n}\n\n\nI never saw these ever make it clear to zero volts, but I don\u2019t know\nwhat kind of resolution the A2D converter has, and it doesn\u2019t really\nmatter. I made a choice that anything under 1 volt was going to turn\nsomething on, and any thing above 1 volt was going to turn that off.\n\n\nLike I said there are probably a dozen of different ways to use these,\nthat just seemed to be the quickest way.\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}",
            "title": "Magnetic Reed Switch Water Sensor"
        },
        {
            "location": "/projects/arduino/arduino-project-mifare-rfid-reader-rc522/README/",
            "text": "3/8/2014 Arduino Uno bootloader and the Mifare RFID reader/writer\nRC522\n\n\n1. Project Reference Number / Title:\n\n\n\n\n20140308 Arduino Uno bootloader and the Mifare RFID reader/writer\nRC522\n\n\n\n\nMar 8, 2014\n\n\nRFID - what is it? How does it work? what can you do with it? and how to\nuse RFID with an Arduino.\n\n\nRFID is a wireless non-contact use of electromagnetic fields to transfer\ndata. With the uses of Identifying and tracking inventory, or other\nobjects. There are several standards in use with RFID, too many to go\ninto here. There is also active RFID and Passive RFID, passive is\nprobably the most common. Active RFID has a greater range. RFID tags can\ncontain information and be both read from and written too (Depending on\nthe tag, and which version of tag you have.)\n\n\nThis is not a new technology, having origins dating back to 1945. A\n\u201cmodern\u201d passive radio transponder with memory was 1st patented in 1973,\nthis would be the great grand father of modern RFID.\n\n\nRFID works in several different frequencies, with probably the most\ncommon (at least consumer level) being 13.56 MHZ (HF) using the MIFARE\nISO/IEC 14443 standard, but other frequencies include 120 -150 kHZ (LF)\nwhich is currently unregulated, 433 Mhz (UHF) Short Range Devices also\nused for defence and active tags, 865 - 868 Mhz in Europe & 902-928 Mhz\nin North America and using various standard\n\n\n2.4 to 5.8 Ghz - this is also various standards, and active RFID\n\n\n3.1 to 10 Ghz requires semi-active or active tags and appears to not be\nfully implemented at this time.\n\n\nA \u201cnew\u201d type of RFID is currently the defacto standard, and is being\nwildly used in cell phones and tablets - Near Field Communication (NFC)\n- NFC is ISO/IEC 14443.\n\n\nNFC tags generally speaking can hold more information then there early\nRFID counterparts.\n\n\nYou can also find NFC/RFID in a lot of credit cards, any place you see a\ncard reader that you just have to tag is using RFID. The Middletown\nLibrary and I would think the West Chester branch use RFID tags in their\nbooks, they have for years but I\u2019m not sure why they do it.\n\n\nHow does RFID work?\n\n\nIt\u2019s really pretty simple (as easy as 123) - Remember in school you\nprobably learned about Magnetic lines of force (magnetic poles North and\nSouth), probably you also remember that when a current is passed through\na coil you can create a electro-magnet. And when you put that near\nanother coil of wire you INDUCE a voltage on the 2nd coil? Well that is\nhow this works, the RFID reader has a coil, that is powered on making a\nlittle electromagnet probably not strong enough to pickup any thing, but\nstill it\u2019s there. The tags are also coils, and by passing the tag in\nfront of the reader you INDUCE a voltage. The tags also have a chip in\nthem that contains a tiny transceiver, and an ID code (each tag has a\nunique code, thou you can clone tags if needed, not going into how to do\nthat beyond the scope). Depending on the tag it may contain other\ninformation as well. The reader also has a transceiver in it and\nreceives information when the tag transmits. In passive system the tag\nneeds to be pretty close to the reader, In an active system the tag can\nbe a few feet to a few hundred feet away from the reader.\n\n\nWhich brings us to what can you do with RFID?\n\n\nAlot really, one of the big things is tracking, and managing inventory,\nEverything in the store has an RFID tag, you pickup an item and walk out\nthe store, the active scanners at the door - buzz - the system knows you\ndidn\u2019t pay for that item because it didn\u2019t get scanned at the checkout.\n(OK, that\u2019s just one example) I think this is probably why the libraries\nhave RFID tags in the books, but I don\u2019t know why they don\u2019t use them\nfor check ins/check outs (They also have bar codes on the books for\ncheck in/check out) Any way, off on a little tangent there.\n\n\nAlready said above, visa/master card/amex all have started to put RFID\nchips in credit cards for Fast Pay (NFC) BTW you can use your NFC\nenabled cell phones for fast pay if you have your account attached to\nyour phone.\n\n\nThe auto industry has been using RFID tags for years, in both the\nmanufacture and parts replacement in cars. - A new car is sitting on the\nline waiting to have a door, using an active tag the robots can find out\nwhat is missing, what color and just about anything else about the car\nit\u2019s making - updating the tag, and moving down to the next robot in the\nline. Parts bins are marked with RFID tags so the robots can find them\nwhen they are needed.\n\n\nOther uses, Tagging animals with owner information, toll collection\n(active readers mostly).\n\n\nand countless other uses.\n\n\nUsing RFID with an Arduino:\n\n\nThere are many different RFID readers available for the Arduino, they\nall seem to work the more or less the same. (Some are capable of writing\nto a tag others are not)\n\n\nMine is a cheap sub-\\$5 reader that came with two tags, a Mifare 522\nwhich is one of the most common out there. it uses a SPI interface.\n\n\nUnfortunately, there is not a whole lot of information out about the\nmodel I have, in fact I only found 2 website, both were virtually the\nsame.\n\n\nhttps://sites.google.com/site/arduinomega2560projects/home/level-1/arduino-rfid-rc522\n\n\nand\n\n\nhttp://www.grantgibson.co.uk/2012/04/how-to-get-started-with-the-mifare-mf522-an-and-arduino/\n\n\nThere wasn\u2019t a library to use, and I am still trying to make heads and\ntails out of the code they provided, but I think you send command to the\nreader in hex and wait for a reply.\n\n\nFrom what I can tell thou, you pass a tag in front of the reader, and\nthe arduino will send (serial console) the 5 ID strings contained in the\ntag.\n\n\nIf the right tag is used - It will say \u201cHello Dave\u201d or \u201cHello Grant\u201d.\nOne of the sites is also putting a \u201c2\u201d in front of the 1st set of IDs\n(not sure why but I removed that front the code as it just seemed\nstrange to be there)\n\n\nBoth websites also made a mistake about the pin map\n\n\nThey have a pin called SS mapped to Arduino pin 10, my board doesn\u2019t\nhave a pin marked SS but the pin marked SAD seems to work.\n\n\nJeremy is using a RFID reader that is based off a zigbee or works in a\nzigbee socket, also his has a \u201creal\u201d coil of wire, and his code is very\ndifferent as well. So each reader must be different.\n\n\nHere is the link to his setup:\n\n\nhttp://www.jeremyblum.com/2011/07/08/tutorial-12-for-arduino-rfid-card-reading/\n\n\nI think by Thursday I will have a demo working that will turn on and off\nLEDs using various tags I have.\n\n\nFinal thoughts: Most RFID systems need to keep up with the tag ID\nnumbers which would be contained within a database, however it is\npossible to have simple system with just a few tags (or one that doesn\u2019t\nneed updated often) that doesn\u2019t require a database. And this is the\ntype an Arduino is great for, simple RFID control of lighting or opening\na door.\n\n\nSome pictures of my setup:\n\n\n{width=\"6.5in\" height=\"4.875in\"}\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}\n\n\n{width=\"6.5in\" height=\"4.875in\"}\n\n\n{width=\"6.5in\" height=\"4.875in\"}\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}",
            "title": "Mifare RFID reader RC522"
        },
        {
            "location": "/projects/arduino/arduino-project-nokia-5110-lcd/README/",
            "text": "Apr 20, 2014\n\n\nNokia 5110 LCD with Arduino.\n\n\nNot going to go too much into how this works, mainly because I\u2019m not\n100% sure myself.\n\n\nAlso not going to post a lot of code, because this device is very well\ndocumented. I will give links to Sparkfun and Adafruit, both with\ncontain a lot of information about the LCD.\n\n\nSparkfun, only uses the SPI Library, which is interesting, you will see\nin the code alot of HEX, which is how the display gets its commands.\nFrom what I can tell, the screen is not true SPI - but it close enough\nthat the SPI library doesn\u2019t have a problem with it. I think Sparkfun\ncontains more information, or at least better information about this\ndevice.\n\n\nThat being said, Adafruit developed a ready to use library - and from\nwhat I can tell they are making the display work a little different then\nhow Sparkfun did it. The library does make it a little nicer as well,\nsince you can just call what you need, there is still some HEX to do\ngraphics, but it looks like that is if you are doing a custom graphic,\nstandard things like lines and circles, squares are all handled by the\nlibrary. There demo program is better as well, shows off more of what\nthe display can do. So to sum up -\n\n\nSparkfun has better information, but Adafruit has a better library and\nprogram.\n\n\nHere\u2019s some links:\n\n\nhttps://www.sparkfun.com/products/10168\n\n\nhttps://learn.sparkfun.com/tutorials/graphic-lcd-hookup-guide/introduction\n\n\nhttps://github.com/adafruit/Adafruit-PCD8544-Nokia-5110-LCD-library\n\n\nStolen (don\u2019t say that too loud, but I think we are aloud to use them)\nfrom the Sparkfun site:\n\n\n\n\n\n\njust for Frank\n\n\nhttp://www.partition-resize.com/resize-raid-partition/",
            "title": "Nokia 5110 LCD"
        },
        {
            "location": "/projects/arduino/arduino-project-pin-control-over-ethernet-oled-de/README/",
            "text": "This weeks demo is for Pin Control over ethernet and as a bonus a small\n\nOLED Demo\n\n\nThese sketchs use a \u201creal\u201d Arduino ethernet shield. And by that I mean\n\none using a:\n\n\nW5100 Ethernet Controller\n\n\nhttp://arduino.cc/en/Main/ArduinoEthernetShield\n\n\n\n\nhttp://www.ebay.com/itm/UNO-ATMega328-1280-MEGA2560-Ethernet-Shield-W5100-Arduino-Main-Board-M3Y2-/171438857683?pt=LH_DefaultDomain_0&hash=item27ea8d5dd3\n\n\nLike everything else the price of these is dropping, but if you do buy a\n\ncheap one off eBay make sure it has the W5100 there are others out that\n\ndont and they dont work the same way.\n\n\nI think I paid $10 or $11 for mine a year ago, now you can find them\n\nfor $8 bucks or less.\n\n\nPin control over ethernet is based on this project:\n\n\nhttp://bildr.org/2011/06/arduino-ethernet-pin-control/\n\n\nalternative website:\n\n\nhttps://web.archive.org/web/20140702134232/http://bildr.org/2011/06/arduino-ethernet-pin-control/\n\n\nThe above project sets up a webserver running on the Arduino. The\n\naddress of the server is displayed on a serial terminal. (192.168.1.xxx)\n\nIt is setup get a DHCP from your router.\n\n\nUsing the IP address you can set pins 2 to 9 to flash a LED.\n\n\nhttp://192.168.1.45/?2\n will flash the LED on PIN 2.\n\n\nhttp://192.168.1.45/?23\n will flash the LEDs on PIN2 and PIN 3 in order.\n\n\nSo some interesting patterns can be made from this:\n\n\nhttp://192.168.1.45/?2345678998765432\n will create something like\n\nK.I.T.T.s scanner.\n\n\n//ARDUINO 1.0+ ONLY\n//ARDUINO 1.0+ ONLY\n\n#include <Ethernet.h>\n#include <SPI.h>\nboolean reading = false;\n\n////////////////////////////////////////////////////////////////////////\n//CONFIGURE\n////////////////////////////////////////////////////////////////////////\n//byte ip[] = { 192, 168, 0, 199 }; //Manual setup only\n//byte gateway[] = { 192, 168, 0, 1 }; //Manual setup only\n//byte subnet[] = { 255, 255, 255, 0 }; //Manual setup only\n// if need to change the MAC address (Very Rare)\nbyte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };\nEthernetServer server = EthernetServer(80); //port 80\n////////////////////////////////////////////////////////////////////////\n\nvoid setup(){\nSerial.begin(9600);\n//Pins 10,11,12 & 13 are used by the ethernet shield\npinMode(2, OUTPUT);\npinMode(3, OUTPUT);\npinMode(4, OUTPUT);\npinMode(5, OUTPUT);\npinMode(6, OUTPUT);\npinMode(7, OUTPUT);\npinMode(8, OUTPUT);\npinMode(9, OUTPUT);\nEthernet.begin(mac); //Ethernet.begin(mac, ip, gateway, subnet); //for manual setup\nserver.begin();\nSerial.println(Ethernet.localIP());\n}\n\nvoid loop(){\n\n// listen for incoming clients, and process qequest.\ncheckForClient();\n}\n\nvoid checkForClient(){\nEthernetClient client = server.available();\nif (client) {\n// an http request ends with a blank line\nboolean currentLineIsBlank = true;\nboolean sentHeader = false;\nwhile (client.connected()) {\nif (client.available()) {\nif(!sentHeader){\n// send a standard http response header\n\n\n\n\nclient.println(\"HTTP/1.1 200 OK\");\n\n\nclient.println(\"Content-Type: text/html\");\n\n\nclient.println();\n\n\nsentHeader = true;\n\n\n}\n\n\nchar c = client.read();\n\n\nif(reading && c == ' ') reading = false;\n\n\nif(c == '?') reading = true; //found the ?, begin reading the info\n\n\nif(reading){\n\n\nSerial.print(c);\n\n\nswitch (c) {\n\n\ncase '2':\n\n\n//add code here to trigger on 2\n\n\ntriggerPin(2, client);\n\n\nbreak;\n\n\ncase '3':\n\n\n//add code here to trigger on 3\n\n\ntriggerPin(3, client);\n\n\nbreak;\n\n\ncase '4':\n\n\n//add code here to trigger on 4\n\n\ntriggerPin(4, client);\n\n\nbreak;\n\n\ncase '5':\n\n\n//add code here to trigger on 5\n\n\ntriggerPin(5, client);\n\n\nbreak;\n\n\ncase '6':\n\n\n//add code here to trigger on 6\n\n\ntriggerPin(6, client);\n\n\nbreak;\n\n\ncase '7':\n\n\n//add code here to trigger on 7\n\n\ntriggerPin(7, client);\n\n\nbreak;\n\n\ncase '8':\n\n\n//add code here to trigger on 8\n\n\ntriggerPin(8, client);\n\n\nbreak;\n\n\ncase '9':\n\n\n//add code here to trigger on 9\n\n\ntriggerPin(9, client);\n\n\nbreak;\n\n\n}\n\n\n}\n\n\nif (c == '\\n' && currentLineIsBlank) break;\n\n\nif (c == '\\n') {\n\n\ncurrentLineIsBlank = true;\n\n\n}else if (c != '\\r') {\n\n\ncurrentLineIsBlank = false;\n\n\n}\n\n\n}\n\n\n}\n\n\ndelay(1); // give the web browser time to receive the data\n\n\nclient.stop(); // close the connection:\n\n\n}\n\n\n}\n\n\nvoid triggerPin(int pin, EthernetClient client){\n\n\n//blink a pin - Client needed just for HTML output purposes.\n\n\nclient.print(\"Turning on pin \");\n\n\nclient.println(pin);\n\n\nclient.print(\"<br>\");\n\n\ndigitalWrite(pin, HIGH);\n\n\ndelay(25);\n\n\ndigitalWrite(pin, LOW);\n\n\ndelay(25);\n\n\n}\n\n\nThis is interesting, but really not useful. So I modified the sketch to\n\ntoggle the pins on or off (from one state to another) - my code can be\n\nfound here:\n\n\nhttps://codebender.cc/sketch:60959\n\n\nThis was done using a array of zeros or ones - the array represents the\n\nLED states, the position inside the array is the PIN number,\n\n\nin otherwords:\n\n\nboolean ledPins[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n\n\n\\^\n\n\nThis is PIN 0\n\n\nthe next zero is PIN 1, the next PIN 2, next PIN 3 etc.\n\n\nSo the question is why do we have 10 pins listed when there are only 8\n\nLEDs -\n\n\nthe simple answer is I needed a place holder of two digits - (with this\n\nexample, pins 0 and 1 are left open so as to easily reprogram the\n\nArduino) So the LEDs are hooked to PINs 2 to 9.\n\n\nPin 10, 11, 12, 13 are used by the ethernet shield.\n\n\nThe main part of the sketch I modified is below:\n\n\nvoid triggerPin(int pin, EthernetClient client){\n\n\n//blink a pin - Client needed just for HTML output purposes.\n\n\nclient.print(\"Toggling pin: \");\n\n\nclient.println(pin);\n\n\nclient.print(\"<br>\");\n\n\ndigitalWrite(pin, !ledPins[pin]);\n\n\nledPins[pin]=!ledPins[pin];\n\n\n}\n\n\nThe sketch gives output to both the serial monitor, and the website.\n\n\nI liked how this worked, and thought this is a lot more useful if you\n\nneed to remotely turn something on or off.\n\n\nBut I asked myself what if you want to read and display a vaule on the\n\nwebsite:\n\n\nSo I modified the sketch one more time:\n\n\nhttps://codebender.cc/sketch:60961\n\n\nThis time I wanted to read a Analog joystick: and I added this code:\n\n\ncase '0':\n\n\nwhile(analogRead(0)>522) {\n\n\nclient.print(\"Joystick 0: \");\n\n\nclient.print(analogRead(0));\n\n\nclient.print(\"<br>\");\n\n\n}\n\n\nbreak;\n\n\ncase '1':\n\n\nwhile(analogRead(1)>522) {\n\n\nclient.print(\"Joystick 1: \");\n\n\nclient.print(analogRead(1));\n\n\nclient.print(\"<br>\");\n\n\n}\n\n\nbreak;\n\n\nTo activate this part of the code you need to send the webserver a zero\n\n(0) or a one (1)\n\n\nThis part of the code will stay active as long as the joystick vaule is\n\nabove 522 (522 is the center position) Which also mean that I am only\n\nreading two directions from Joystick - either down or left (but not up\n\nor right)\n\n\nIt\u2019s not the best way to make this work, and this was more of a test to\n\nmake it work, then it was to make it work correctly! :-)\n\n\nSo I looked at the example library that is included with the Arduino\n\nIDE:\n\n\nThat sketch can be found here:\n\n\nhttps://codebender.cc/sketch:61050\n\n\nWhich induces a couple of new things to the webserver - It also sets up\n\na static IP which for a IOT device (or a control over IP device) might\n\nmake more since to do.\n\n\nNext thing it does is show how to have the page served auto refresh this\n\ncan be a very useful thing to know.\n\n\nIt also will read all 6 analog ports and display the vaule on the web\n\npage.\n\n\nFor the demo I am only using analog Pin 0 and Pin 1 (So I modified the\n\nsketch to only read what I am using)\n\n\nAgain this was interesting, and displayed a good example but I wanted to\n\nuse a website to turn pins on or off - or display vaules\n\n\nand it lead me to this website:\n\n\nhttp://randomnerdtutorials.com/arduino-webserver-with-an-arduino-ethernet-shield/\n\n\nThis is a really good example of control and was close to what I wanted\n\nso\n\n\nOf course I modified the sketch for what I really wanted to\n\n\nhttps://codebender.cc/sketch:61051\n\n\n/*\n\n\nCreated by Rui Santos\n\n\nVisit: \nhttp://randomnerdtutorials.com\n for more arduino projects\n\n\nArduino with Ethernet Shield\n\n\n*/\n\n\n#include <SPI.h>\n\n\n#include <Ethernet.h>\n\n\nbyte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED }; //physical mac\n\naddress\n\n\nbyte ip[] = { 192, 168, 1, 178 }; // ip in lan (that's what you need\n\nto use in your browser. (\"192.168.1.178\")\n\n\nbyte gateway[] = { 192, 168, 1, 1 }; // internet access via router\n\n\nbyte subnet[] = { 255, 255, 255, 0 }; //subnet mask\n\n\nEthernetServer server(80); //server port\n\n\nString readString;\n\n\nvoid setup() {\n\n\n// Open serial communications and wait for port to open:\n\n\nSerial.begin(9600);\n\n\nwhile (!Serial) {\n\n\n; // wait for serial port to connect. Needed for Leonardo only\n\n\n}\n\n\npinMode(2, OUTPUT);\n\n\npinMode(3, OUTPUT);\n\n\npinMode(4, OUTPUT);\n\n\npinMode(5, OUTPUT);\n\n\npinMode(6, OUTPUT);\n\n\npinMode(7, OUTPUT);\n\n\npinMode(8, OUTPUT);\n\n\npinMode(9, OUTPUT);\n\n\n// start the Ethernet connection and the server:\n\n\nEthernet.begin(mac, ip, gateway, subnet);\n\n\nserver.begin();\n\n\nSerial.print(\"server is at \");\n\n\nSerial.println(Ethernet.localIP());\n\n\n}\n\n\nvoid loop() {\n\n\n// Create a client connection\n\n\nEthernetClient client = server.available();\n\n\nif (client) {\n\n\nwhile (client.connected()) {\n\n\nif (client.available()) {\n\n\nchar c = client.read();\n\n\n//read char by char HTTP request\n\n\nif (readString.length() < 100) {\n\n\n//store characters to string\n\n\nreadString += c;\n\n\n//Serial.print(c);\n\n\n}\n\n\n//if HTTP request has ended\n\n\nif (c == '\\n') {\n\n\nSerial.println(readString); //print to serial monitor for debuging\n\n\nclient.println(\"HTTP/1.1 200 OK\"); //send new page\n\n\nclient.println(\"Content-Type: text/html\");\n\n\nclient.println();\n\n\nclient.println(\"<HTML>\");\n\n\nclient.println(\"<HEAD>\");\n\n\n// client.println(\"<meta name='apple-mobile-web-app-capable'\n\ncontent='yes' />\");\n\n\n//client.println(\"<meta name='apple-mobile-web-app-status-bar-style'\n\ncontent='black-translucent' />\");\n\n\nclient.println(\"<link rel='stylesheet' type='text/css'\n\nhref='\nhttp://randomnerdtutorials.com/ethernetcss.css\n' />\");\n\n\nclient.println(\"<TITLE>Project Turn on Stuff From\n\nWebsite</TITLE>\");\n\n\nclient.println(\"</HEAD>\");\n\n\nclient.println(\"<BODY>\");\n\n\nclient.println(\"<H1>Turn on Stuff from a Website</H1>\");\n\n\nclient.println(\"<hr />\");\n\n\nclient.println(\"<br />\");\n\n\nclient.println(\"<H2>Arduino with Ethernet Shield</H2>\");\n\n\nclient.println(\"<br />\");\n\n\nclient.println(\"<a href=\\\"/?button1on\\\"\\\">Turn On LED\n\n1</a>\");\n\n\nclient.println(\"<a href=\\\"/?button1off\\\"\\\">Turn Off LED\n\n1</a><br />\");\n\n\nclient.println(\"<br />\");\n\n\nclient.println(\"<br />\");\n\n\nclient.println(\"<a href=\\\"/?button2on\\\"\\\">Turn On LED\n\n2</a>\");\n\n\nclient.println(\"<a href=\\\"/?button2off\\\"\\\">Turn Off LED\n\n2</a><br />\");\n\n\nclient.println(\"<br />\");\n\n\nclient.println(\"<br />\");\n\n\nclient.println(\"<a href=\\\"/?button3on\\\"\\\">Turn On LED\n\n3</a>\");\n\n\nclient.println(\"<a href=\\\"/?button3off\\\"\\\">Turn Off LED\n\n3</a><br />\");\n\n\nclient.println(\"<br />\");\n\n\nclient.println(\"<br />\");\n\n\nclient.println(\"<a href=\\\"/?button4on\\\"\\\">Turn On LED\n\n4</a>\");\n\n\nclient.println(\"<a href=\\\"/?button4off\\\"\\\">Turn Off LED\n\n4</a><br />\");\n\n\nclient.println(\"<br />\");\n\n\nclient.println(\"<br />\");\n\n\nclient.println(\"<a href=\\\"/?button5on\\\"\\\">Turn On LED 5\n\n</a>\");\n\n\nclient.println(\"<a href=\\\"/?button5off\\\"\\\">Turn Off LED\n\n5</a><br />\");\n\n\nclient.println(\"<br />\");\n\n\nclient.println(\"<br />\");\n\n\nclient.println(\"<a href=\\\"/?button6on\\\"\\\">Turn On LED\n\n6</a>\");\n\n\nclient.println(\"<a href=\\\"/?button6off\\\"\\\">Turn Off LED\n\n6</a><br />\");\n\n\nclient.println(\"<br />\");\n\n\nclient.println(\"<br />\");\n\n\n/* client.println(\"<a href=\\\"/?7on\\\"\\\">Turn On LED\n\n7</a>\");\n\n\nclient.println(\"<a href=\\\"/?7off\\\"\\\">Turn Off LED\n\n7</a><br />\");\n\n\nclient.println(\"<br />\");\n\n\nclient.println(\"<br />\");\n\n\nclient.println(\"<a href=\\\"/?8on\\\"\\\">Turn On LED 8</a>\");\n\n\nclient.println(\"<a href=\\\"/?8off\\\"\\\">Turn Off LED\n\n8</a><br />\");\n\n\nclient.println(\"<br />\");\n\n\nclient.println(\"<br />\");\n\n\n*/\n\n\nclient.println(\"<p>Based on a sketch \");\n\n\nclient.println(\"<p>Created by Rui Santos. Visit\n\n\nhttp://randomnerdtutorials.com\n for more projects!</p>\");\n\n\nclient.println(\"<br />\");\n\n\nclient.println(\"</BODY>\");\n\n\nclient.println(\"</HTML>\");\n\n\ndelay(1);\n\n\n//stopping client\n\n\nclient.stop();\n\n\n//controls the Arduino if you press the buttons\n\n\nif (readString.indexOf(\"?button1on\") >0){\n\n\ndigitalWrite(2, HIGH);\n\n\n}\n\n\nif (readString.indexOf(\"?button1off\") >0){\n\n\ndigitalWrite(2, LOW);\n\n\n}\n\n\nif (readString.indexOf(\"?button2on\") >0){\n\n\ndigitalWrite(3, HIGH);\n\n\n}\n\n\nif (readString.indexOf(\"?button2off\") >0){\n\n\ndigitalWrite(3, LOW);\n\n\n}\n\n\nif (readString.indexOf(\"?button3on\") >0){\n\n\ndigitalWrite(4, HIGH);\n\n\n}\n\n\nif (readString.indexOf(\"?button3off\") >0){\n\n\ndigitalWrite(4, LOW);\n\n\n}\n\n\nif (readString.indexOf(\"?button4on\") >0){\n\n\ndigitalWrite(5, HIGH);\n\n\n}\n\n\nif (readString.indexOf(\"?button4off\") >0){\n\n\ndigitalWrite(5, LOW);\n\n\n}\n\n\nif (readString.indexOf(\"?button5on\") >0){\n\n\ndigitalWrite(6, HIGH);\n\n\n}\n\n\nif (readString.indexOf(\"?button5off\") >0){\n\n\ndigitalWrite(6, LOW);\n\n\n}\n\n\nif (readString.indexOf(\"?button6on\") >0){\n\n\ndigitalWrite(7, HIGH);\n\n\n}\n\n\nif (readString.indexOf(\"?button6off\") >0){\n\n\ndigitalWrite(7, LOW);\n\n\n}\n\n\n/*\n\n\nif (readString.indexOf(\"?7on\") >0){\n\n\ndigitalWrite(8, HIGH);\n\n\n}\n\n\nif (readString.indexOf(\"?7off\") >0){\n\n\ndigitalWrite(8, LOW);\n\n\n}\n\n\nif (readString.indexOf(\"?8on\") >0){\n\n\ndigitalWrite(9, HIGH);\n\n\n}\n\n\nif (readString.indexOf(\"?8off\") >0){\n\n\ndigitalWrite(9, LOW);\n\n\n}\n\n\n*/\n\n\n//clearing string for next read\n\n\nreadString=\"\";\n\n\n}\n\n\n}\n\n\n}\n\n\n}\n\n\n}\n\n\nThis time, it makes a \u201creal\u201d web page with buttons that will turn on or\n\noff LEDs\n\n\n(a personal note: I was only able to get PINs 2 to 7 to work and I\u2019m not\n\nsure why as the code is the same for all the other LEDs)\n\n\nYou might take notice that when a button is pushed the URL will look\n\nvery much like the 1st example we looked at.\n\n\nhttp://192.168.1.178/?button1on\n\n\nAlso I didn\u2019t add anything to read the analog pins - but it would be\n\neasy to add something that could read a tempature sensor or some other\n\nsensor.\n\n\nUsing these examples we can do just about anything with control over\n\nethernet.\n\n\nThou there seems to be a limit to just what the web server can do.\n\n\n*** BONUS *** BONUS *** BONUS ***\n\n\nI2C 0.96\" OLED display module\n\n\nOLED\n\n\nnoun\n\n\nnoun: \nOLED\n; plural noun: \nOLEDs\n\n\n\n\na light-emitting diode containing thin flexible sheets of an organic\n\n\n\n\n\n\nelectroluminescent material, used for visual displays.\n\n\n\n\n\n\n\"because OLEDs emit light, they consume significantly less power\"\n\n\n\n\nhttp://www.ebay.com/itm/0-96-I2C-IIC-SPI-Serial-128X64-OLED-LCD-LED-Display-Module-for-Arduino-white-it-/251536387002?pt=LH_DefaultDomain_0&hash=item3a90bcabba\n\n\nA few example sketches can be found here\n\n\nhttp://www.wide.hk/products.php?product=I2C-0.96%22-OLED-display-module-%28-compatible-Arduino-%29\n\n\nhttp://www.adafruit.com/product/326\n\n\nAnd the adafruit tutorial:\n\n\nhttps://learn.adafruit.com/monochrome-oled-breakouts\n\n\nTo make these examples work you need to have the Adafruit_SSD1306 and\n\nthe Adafruit_GFX libraries that can be found on github.\n\n\nThere is also this library that works:\n\n\nhttps://github.com/stanleyhuangyc/MultiLCD/tree/master/MicroLCD\n\n\nI have examples using both libraries.\n\n\nLike \u201cFAKE CLOCK\u201d using the MicroLCD library\n\n\n/*************************************************************************\n\n\n* Demo sketch for MicroLCD library\n\n\n* Distributed under GPL v2.0\n\n\n* Copyright (c) 2013-2014 Stanley Huang\n\n<stanleyhuangyc@gmail.com>\n\n\n* All rights reserved.\n\n\n* For more information, please visit \nhttp://arduinodev.com\n\n\n*************************************************************************/\n\n\n#include <Arduino.h>\n\n\n#include <Wire.h>\n\n\n#include <MicroLCD.h>\n\n\nint s = 0;\n\n\nint m = 0;\n\n\nint h = 12;\n\n\n//LCD_SH1106 lcd; /* for SH1106 OLED module */\n\n\nLCD_SSD1306 lcd; /* for SSD1306 OLED module */\n\n\nconst PROGMEM uint8_t smile[48 * 48 / 8] = {\n\n\n0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xF8,0xFC,0xFC,0xFE,0xFE,0x7E,0x7F,0x7F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x7F,0x7F,0x7E,0xFE,0xFE,0xFC,0xFC,0xF8,0xF8,0xF0,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,\n\n\n0x00,0xC0,0xF0,0xFC,0xFE,0xFF,0xFF,0xFF,0x3F,0x1F,0x0F,0x07,0x03,0x01,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0xFF,0xFF,0xFF,0xFE,0xFC,0xF0,0xC0,0x00,\n\n\n0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x1F,0x1F,0x1F,0x3F,0x1F,0x1F,0x02,0x00,0x00,0x00,0x00,0x06,0x1F,0x1F,0x1F,0x3F,0x1F,0x1F,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,\n\n\n0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x30,0xF8,0xF8,0xF8,0xF8,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF8,0xF8,0xFC,0xF8,0x30,0x00,0x00,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,\n\n\n0x00,0x03,0x0F,0x3F,0x7F,0xFF,0xFF,0xFF,0xFC,0xF8,0xF0,0xE1,0xC7,0x87,0x0F,0x1F,0x3F,0x3F,0x3E,0x7E,0x7C,0x7C,0x7C,0x78,0x78,0x7C,0x7C,0x7C,0x7E,0x3E,0x3F,0x3F,0x1F,0x0F,0x87,0xC7,0xE1,0xF0,0xF8,0xFC,0xFF,0xFF,0xFF,0x7F,0x3F,0x0F,0x03,0x00,\n\n\n0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x0F,0x1F,0x1F,0x3F,0x3F,0x7F,0x7F,0x7E,0xFE,0xFE,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFE,0xFE,0x7E,0x7F,0x7F,0x3F,0x3F,0x1F,0x1F,0x0F,0x07,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,\n\n\n};\n\n\nvoid setup()\n\n\n{\n\n\nlcd.begin();\n\n\n}\n\n\nvoid loop()\n\n\n{\n\n\nlcd.clear();\n\n\nlcd.setCursor(40, 1);\n\n\nlcd.draw(smile, 48, 48);\n\n\ndelay(1000);\n\n\nlcd.clear();\n\n\nlcd.setCursor(25,1);\n\n\nlcd.setFontSize(FONT_SIZE_MEDIUM);\n\n\nlcd.print(\"FAKE Clock\");\n\n\ndelay(1500);\n\n\nfor (h = 1; h<12; h++) {\n\n\nfor (m = 0; m<59; m++) {\n\n\nfor (s = 0; s<59; s++) {\n\n\nlcd.clear();\n\n\nlcd.setCursor(35, 3);\n\n\nlcd.setFontSize(FONT_SIZE_MEDIUM);\n\n\nlcd.print(h);\n\n\nlcd.print(\":\");\n\n\nif (m < 10) {lcd.print(0);\n\n\nlcd.print(m); } else {lcd.print(m);}\n\n\nlcd.print(\":\");\n\n\nif (s < 10) {lcd.print(0);\n\n\nlcd.print(s); } else {lcd.print(s);}\n\n\nlcd.print(\"P\");\n\n\nlcd.setCursor(20, 6);\n\n\nlcd.print(\"Nov 9, 2014\");\n\n\ndelay(1000);\n\n\n}\n\n\n}}}\n\n\nBoth libraries are pretty easy to use, and following the examples given\n\npretty easy to modify\n\n\nSome tricky things to get right is the number of pixels and placement of\n\nthe \u201ccursor\u201d on the screen.\n\n\nBut one you have done a few you get the hang of where it will be.",
            "title": "Pin Control over Ethernet w/OLED"
        },
        {
            "location": "/projects/arduino/arduino-project-pin-control-over-ethernet-oled-de/README/#i2c-096-oled-display-module",
            "text": "OLED  noun  noun:  OLED ; plural noun:  OLEDs   a light-emitting diode containing thin flexible sheets of an organic    electroluminescent material, used for visual displays.    \"because OLEDs emit light, they consume significantly less power\"   http://www.ebay.com/itm/0-96-I2C-IIC-SPI-Serial-128X64-OLED-LCD-LED-Display-Module-for-Arduino-white-it-/251536387002?pt=LH_DefaultDomain_0&hash=item3a90bcabba  A few example sketches can be found here  http://www.wide.hk/products.php?product=I2C-0.96%22-OLED-display-module-%28-compatible-Arduino-%29  http://www.adafruit.com/product/326  And the adafruit tutorial:  https://learn.adafruit.com/monochrome-oled-breakouts  To make these examples work you need to have the Adafruit_SSD1306 and \nthe Adafruit_GFX libraries that can be found on github.  There is also this library that works:  https://github.com/stanleyhuangyc/MultiLCD/tree/master/MicroLCD  I have examples using both libraries.  Like \u201cFAKE CLOCK\u201d using the MicroLCD library  /*************************************************************************  * Demo sketch for MicroLCD library  * Distributed under GPL v2.0  * Copyright (c) 2013-2014 Stanley Huang \n<stanleyhuangyc@gmail.com>  * All rights reserved.  * For more information, please visit  http://arduinodev.com  *************************************************************************/  #include <Arduino.h>  #include <Wire.h>  #include <MicroLCD.h>  int s = 0;  int m = 0;  int h = 12;  //LCD_SH1106 lcd; /* for SH1106 OLED module */  LCD_SSD1306 lcd; /* for SSD1306 OLED module */  const PROGMEM uint8_t smile[48 * 48 / 8] = {  0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xF8,0xFC,0xFC,0xFE,0xFE,0x7E,0x7F,0x7F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x7F,0x7F,0x7E,0xFE,0xFE,0xFC,0xFC,0xF8,0xF8,0xF0,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,  0x00,0xC0,0xF0,0xFC,0xFE,0xFF,0xFF,0xFF,0x3F,0x1F,0x0F,0x07,0x03,0x01,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0xFF,0xFF,0xFF,0xFE,0xFC,0xF0,0xC0,0x00,  0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x1F,0x1F,0x1F,0x3F,0x1F,0x1F,0x02,0x00,0x00,0x00,0x00,0x06,0x1F,0x1F,0x1F,0x3F,0x1F,0x1F,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,  0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x30,0xF8,0xF8,0xF8,0xF8,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF8,0xF8,0xFC,0xF8,0x30,0x00,0x00,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,  0x00,0x03,0x0F,0x3F,0x7F,0xFF,0xFF,0xFF,0xFC,0xF8,0xF0,0xE1,0xC7,0x87,0x0F,0x1F,0x3F,0x3F,0x3E,0x7E,0x7C,0x7C,0x7C,0x78,0x78,0x7C,0x7C,0x7C,0x7E,0x3E,0x3F,0x3F,0x1F,0x0F,0x87,0xC7,0xE1,0xF0,0xF8,0xFC,0xFF,0xFF,0xFF,0x7F,0x3F,0x0F,0x03,0x00,  0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x0F,0x1F,0x1F,0x3F,0x3F,0x7F,0x7F,0x7E,0xFE,0xFE,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFE,0xFE,0x7E,0x7F,0x7F,0x3F,0x3F,0x1F,0x1F,0x0F,0x07,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,  };  void setup()  {  lcd.begin();  }  void loop()  {  lcd.clear();  lcd.setCursor(40, 1);  lcd.draw(smile, 48, 48);  delay(1000);  lcd.clear();  lcd.setCursor(25,1);  lcd.setFontSize(FONT_SIZE_MEDIUM);  lcd.print(\"FAKE Clock\");  delay(1500);  for (h = 1; h<12; h++) {  for (m = 0; m<59; m++) {  for (s = 0; s<59; s++) {  lcd.clear();  lcd.setCursor(35, 3);  lcd.setFontSize(FONT_SIZE_MEDIUM);  lcd.print(h);  lcd.print(\":\");  if (m < 10) {lcd.print(0);  lcd.print(m); } else {lcd.print(m);}  lcd.print(\":\");  if (s < 10) {lcd.print(0);  lcd.print(s); } else {lcd.print(s);}  lcd.print(\"P\");  lcd.setCursor(20, 6);  lcd.print(\"Nov 9, 2014\");  delay(1000);  }  }}}  Both libraries are pretty easy to use, and following the examples given \npretty easy to modify  Some tricky things to get right is the number of pixels and placement of \nthe \u201ccursor\u201d on the screen.  But one you have done a few you get the hang of where it will be.",
            "title": "I2C 0.96\" OLED display module"
        },
        {
            "location": "/projects/arduino/arduino-project-skynet-im/README/",
            "text": "20140611 SKYNET.IM\n\n\nYup, the terminators are coming, Chris Matthieu along with a few others\nhave been working on machine to machine messaging. I\u2019ve been giving\nChris a hard time about the robots coming back, he is making it\nhappen!!! Seriously thou, Skynet is a fairly easy to use set of\nprotocols for talking to any machine. Chris has (and I think mistakenly)\nsaid you don\u2019t need a CPU - What I think he means is you don\u2019t need a\ndesktop/laptop full sized computer (or for that matter a rPI,\nBeagleBone, or small computer) You do need a processor of some type - A\nmicrocontroller works well.\n\n\nSo what is Skynet? In a nutshell it\u2019s a simple way for machines to talk\nto each other.\n\n\nIt takes the Firmata protocols and builds on them to be used over\nwireless or ethernet.\n\n\nSO what is Firmata? It\u2019s a generic protocol for communicating with\nmicrocontrollers from software on a host computer.\n\nhttp://firmata.org\n\n\nI haven\u2019t gotten into the firmata implitations of skynet yet, and that\nmaybe something for a later meeting.\n\n\nWith Skynet, every machine generates it\u2019s own UUID and API codes, they\ncan be overwritten if you need to. The programs/api use these UUID and\ncodes to talk to each other. You can name them, but the machines will\nstill use the UUID.\n\n\nGoing to verify this at the library, but it seems once connected, the\nmachines UUID stay with them, making it easy on us humans, and at least\neasy enough that we don\u2019t have to change our code everytime we plug in\nthe device.\n\n\nThere is a web impliation of skynet using google chrome and something\ncalled NodeBlu which is based from something called NodeRed.\n\n\nNodeBlu, is a connector, it really is easy to pull blocks down and\nconnect them to other blocks to have a remote device do something.\n\n\nBut the real power of skynet comes from the API, using simple restFUL\ncommands, someone can control the remote device from the command line.\nOR Two skynet connected devices can connect to each other and decide\nwhat to do.\n\n\nChris has a number of videos on Skynet,\n\nhttps://www.youtube.com/channel/UCBMdqdAbjJjE9LvMjVpiwUw\n\n\nI was watching a few of his videos to get ideas on what to demo, and\ncame across one where he could call (on his phone) his connected devices\n- this is very cool when it comes to automation. Think about it, if I\ncould call Skynet, say \u201cI\u2019ll be home in 10 minutes unlock the door\u201d and\nI had a door that could be remotely unlocked, in 10 minutes the door\nwould open. Using that same idea you could text your home and ask for a\nstatus update. All very easy to do.\n\n\nSo My demo is going to be on the \u201cEcho\u201d sketch that is included with the\nSkynet-Arduino-Firmware Library Created by Jacob Rosenthal\n\nhttps://github.com/skynetim/skynet_firmware_arduino\n\n\nJacob also has several other skynet librarys in his \u201cskynet\u201d github\n\nhttps://github.com/skynetim\n\n\nAnother developer/contributor to Skynet is Luis Montes (monteslu)- He\nhas worked on the Skynet Firmata and he has some librarys on github as\nwell. \nhttps://github.com/monteslu\n\n\nI can tell you that I\u2019ve \u201cspoke\u201d well chatted with all three of these\npeople over the past couple of weeks and all are very knowledgable and\nhelpful on skynet and how it works.\n\n\nIn fact a few of the issues I had at first with NodeBlu Luis said he\ncould fix or try to fix so it was a little more clear as to what is\nneeded.\n\n\nBut wait I was talking about my demo - It\u2019s the \u201cEcho\u201d sketch, and at\nfirst it wasn\u2019t clear to me what this sketch did. BUT Simply if you send\na message to it, it will \u201cEcho\u201d that message back to you.\n\n\nUsing NodeBlu, I was able to setup something that I could either speak\nto it, google would use it\u2019s speech to text engine and send the message\non to the machine (arduino), a couple of seconds later the arduino would\nsend back the text and google would use the text to speech engine and\nspeak what I said. Yes, I know, all of that could have been done quickly\nand easier with sending the text to the machine, but it\u2019s a demo of what\ncan be done. This is using the stock \u201cEcho\u201d sketch and a NodeBlu program\nthat I built.\n\n\nI can also just type a message into the NodeBlu program and that will\nget sent to the arduino, and come back and speak.\n\n\n{width=\"6.5in\" height=\"4.875in\"}\n\n\nMy 2nd demo of Skynet, I have hooked up a DS1620 temperature sensor\n(Which seems off to me today it\u2019s saying it\u2019s 82 degrees in here, seems\nhigh, maybe because the library was written for a UNO and I\u2019m using it\non a mega) doesn\u2019t matter, it\u2019s a concept. I\u2019m using the same NodeBlu\nprogram, but this time, anything I say, or ask for it will speak the\ntemperature to me.\n\n\nSo you might be looking at the NodeBlu program above and wondering what\nis going on?\n\n\nThere are two parts to this, (maybe three), the first step is to setup\nyour remote devices, Called NODES - You can name these devices anything\nyou want, the name isn\u2019t important as it\u2019s for us humans anyways. But\nyou will need the device UUID and the Token (on the Arduino you can get\nboth these from the serial monitor)\n\n\nNext you drag some blocks over to the workspace - most of the blocks are\nself explanatory as to what they do, some are inputs and some are\noutputs, and some are both. (So if the connector is on the right side\nit\u2019s an input, if it\u2019s on the left side it\u2019s an output, and on both\nsides well it\u2019s both) There are two blocks that aren\u2019t so self\nexplanatory, they are the Function block, and the switch block. So the\nfunction block will allow you to write some Java script functions that\ncan change the course of the program on the NodeBlu side of things.\n\n\nRemember it\u2019s looking for JAVA - which is a little different, and threw\nme for a bit as too way things weren\u2019t working. Right now there is\nnothing that tells you there is an error, and this one of the things\nthat Luis thought he could fix. The switch block is an kind of like a IF\nstatement block, you can add multiply paths for the output to go to. In\nmy example you can see 5 different directions the output can go.\n\n\nSo that is just briefly what Skynet is, and what it can do, The\nunfortunate part is the guys that created this are programmers by\nprofession, and they didn\u2019t do such a good job in my opinion documenting\nthings, And for someone who is just starting programming, or someone who\nhas never used a API this might be a real struggle. I have used APIs and\nbeen programming for a while now and I found at least parts of it to be\nconfusing, I\u2019d consider myself to be an intermediate level programmer,\nnothing these guys can do. It\u2019s an old problem with us programer types -\nwe understand and know how it works, and don\u2019t think about what the end\nuser knows or the skill level they might be at. Happens all the time.\nThe best thing I can say is the guys on Chris\u2019s team are very\nknowledgable, and do understand what is going on, and are very helpful.\n(Twitter is probably the best way to get them, I know that Chris watches\nboth Twitter and G+ most of the day)\n\n\nRelease the Robots!\n\n\nModified Skynet.im Echo sketch to include DS1620 Temp Sensor:\n\n\n*\n\n\n* SSSSS kk tt\n\n\n* SS kk kk yy yy nn nnn eee tt\n\n\n* SSSSS kkkkk yy yy nnn nn ee e tttt\n\n\n* SS kk kk yyyyyy nn nn eeeee tt\n\n\n* SSSSS kk kk yy nn nn eeeee tttt\n\n\n* yyyyy\n\n\n*\n\n\n* SkynetClient for http://skynet.im, OPEN COMMUNICATIONS NETWORK & API\nFOR\n\n\n* THE INTERNET OF THINGS.\n\n\n*\n\n\n* This sketch parses any messages it receives and echos them back to\nthe\n\n\n* sender.\n\n\n*\n\n\n* Works with ethernet shields compatible with EthernetClient library\nfrom\n\n\n* Arduino. If you don't know, grab the original\n\n\n* http://arduino.cc/en/Main/ArduinoEthernetShield\n\n\n*\n\n\n* Also requires the ArduinoJsonParser\n\n\n* https://github.com/bblanchon/ArduinoJsonParser\n\n\n*\n\n\n* You will notice we're using F() in Serial.print which might be new to\nyou\n\n\n* Its covered briefly on the arduino print page but it means we can\nstore\n\n\n* our strings in flash, instead of in ram.\n\n\n*\n\n\n* You can turn on debugging within SkynetClient.h by uncommenting\n\n\n* #define SKYNETCLIENT_DEBUG\n\n\n*/\n\n\n#include <EEPROM.h>\n\n\n#include \"Ethernet.h\"\n\n\n#include \"SPI.h\"\n\n\n#include \"SkynetClient.h\"\n\n\n#include <JsonParser.h>\n\n\n#include <DS1620.h>\n\n\n#include <stdlib.h>\n\n\nEthernetClient client;\n\n\nSkynetClient skynetclient(client);\n\n\n//you can't have 2 of the same mac on your network!\n\n\nbyte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };\n\n\nchar hostname[] = \"skynet.im\";\n\n\nint port = 80;\n\n\nstatic const uint8_t RST_PIN = 7;\n\n\nstatic const uint8_t CLK_PIN = 8;\n\n\nstatic const uint8_t DQ_PIN = 9;\n\n\nDS1620 ds1620(RST_PIN, CLK_PIN, DQ_PIN);\n\n\nvoid setup()\n\n\n{\n\n\npinMode(8, OUTPUT);\n\n\nSerial.begin(9600);\n\n\ndelay(100);\n\n\nds1620.config();\n\n\n// start the Ethernet connection:\n\n\nif (Ethernet.begin(mac) == 0) {\n\n\nSerial.println(F(\"Failed to configure Ethernet using DHCP\"));\n\n\n// no point in carrying on, so do nothing forevermore:\n\n\nfor(;;)\n\n\n;\n\n\n}\n\n\nskynetclient.setMessageDelegate(onMessage);\n\n\n}\n\n\nvoid onMessage(const char * const data) {\n\n\nJsonParser<16> parser;\n\n\n//Serial.print(\"Parse \");\n\n\n//Serial.println(data);\n\n\nJsonHashTable hashTable = parser.parseHashTable((char*)data);\n\n\nif (!hashTable.success())\n\n\n{\n\n\nSerial.println(\"JsonParser.parseHashTable() failed\");\n\n\nreturn;\n\n\n}\n\n\nchar* payload = hashTable.getString(\"payload\");\n\n\n//Serial.print(\"payload=\");\n\n\nSerial.println(payload);\n\n\nchar* fromUuid = hashTable.getString(\"fromUuid\");\n\n\n//Serial.print(\"fromUuid=\");\n\n\n//Serial.println(fromUuid);\n\n\nconst float temp_c = ds1620.temp_c();\n\n\nconst float temp_f = temp_c * 9/5.0 + 32;\n\n\nSerial.print(temp_f, 1); // 1 decimal place\n\n\nSerial.print(\"F \");\n\n\nSerial.print(temp_c, 1);\n\n\nSerial.println(\"C\");\n\n\nString s = dtostrf(temp_f, 1, 2, payload);\n\n\nskynetclient.sendMessage(fromUuid, payload);\n\n\n}\n\n\nvoid loop() {\n\n\nwhile(!skynetclient.monitor()){\n\n\nbool skynetStatus = false;\n\n\ndo {\n\n\nskynetStatus = skynetclient.connect(hostname, port);\n\n\n} while (!skynetStatus);\n\n\nSerial.println(F(\"Connected!\"));\n\n\nchar uuid[UUIDSIZE];\n\n\nskynetclient.getUuid(uuid);\n\n\nSerial.print(F(\"uuid: \"));\n\n\nSerial.println(uuid);\n\n\nskynetclient.getToken(uuid);\n\n\nSerial.print(F(\"token: \"));\n\n\nSerial.println(uuid);\n\n\n}\n\n\n}\n\n\nSo you\u2019ll see it doesn\u2019t matter what you send to it, it will send the\ntemperature back everytime - you can be really impressive thou and say\n\u201cWhat is the Temerature\u201d to fool people.\n\n\nSimple prove of concept sketch, and a good demo",
            "title": "Skynet IM"
        },
        {
            "location": "/projects/arduino/arduino-project-the-spo-512-speech-synthesizer/README/",
            "text": "3/16/2014 The SPO-512 Speech Synthesizer\n\n\n1. Project Reference Number / Title:\n\n\n\n\n\n\n20140316 The SPO-512 Speech Synthesizer\n\n\n\n\n\n\nMar 16 - 17, 2014\n\n\nA side project this week, The SPO-512 Speech Synthesizer also known as\nthe RoboVoice from SpeechChips.com\n\nhttp://www.speechchips.com/shop/item.aspx?itemid=22\n\n\nThis is a PIC microcontroller that takes a serial 9600 baud input (ASCII\ndata) and outputs (speaks) VOICE, There are a couple of demos of this on\nthe website. I bought the chip probably 2 years ago, and it sat on my\ndesk. There is a design circuit in the PDF on the site, turns out most\nof the circuit is an amplifier for the speaker, the circuit to make this\nwork is really pretty simple. 4 grounds, and 4 3.3v power - a TX line, a\nRX line, a Cap for filtering (I think, left it off and it didn\u2019t sound\nas good, I also didn\u2019t have the 4.7u cap that is called for, I used a\n10u, seems to be fine so I think it is just filtering) and an output to\nthe speaker.\n\n\nI have a lot of parts that I pulled out of old computers, turns out a\nfew of the dell systems have little tiny amplified speakers build in\nthem, these things work great, and I wish I would have pulled more out.\nI am running my little speaker off 5v, but I wonder if it wasn\u2019t hooked\nup to 12v in the computer - seems like they were much louder. Doesn\u2019t\nmatter it works, and I think it will work at 3.3v as well.\n\n\nI think I\u2019ve talked to the man who invented this chip, I think he is\nvery active in the \u201cBasic Stamp\u201d forums, and very knowledgable about all\nthings microchip.\n\n\nSpeech chips offered a robovoice on an arduino shield, I don\u2019t think\nthey do any more. So after I went from breadboard, I moved the whole\nthing over to a proto board, (well the speaker isn\u2019t mounted, I really\nwanted to mount it, but\u2026)\n\n\nSo here are a few pictures of my side project, and I\u2019ll bring it with me\nto the meeting on Thurs.\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}\n\n\n{width=\"6.5in\" height=\"8.666666666666666in\"}\n\n\nIt took a couple of hours to move it from breadboard to proto board, and\nI ran into a couple of issues, the 1st, the chip is 28 pin, the board\nonly had enough multi-tap pins for a 20 pin microchip, (Issue was fairly\neasy to overcome). 2nd my proto board didn\u2019t give any tap to the 3.3v\nline of the arduino, in fact it was shorted to the 5v line (Huh?) Yeah\nthat was a mistake from the manufacturer I am sure, but I can see how\nsomeone not paying attention could short out the Arduino board. This\nproto board provide 3 different 5v rails, and 3 different ground rails,\n(one set of those rails ended up being UNDER the IC chip and not at all\nin a useful spot), No 3.3v rail, I had to make my own. but that ended up\ntaking up more room on the board then really needed. I could have done\nwithout one of the 5v rails for a replacement of a 3.3v rail, probably\nwould have had to move the IC but I could have dealt with that.\n\n\nMy last issue was - this proto board had stackable header on it. I\nwanted to make this semi-permanent so I didn\u2019t want to plug a wire into\nthe header, I wanted to use the port directly. I had to remove the most\nof the headers which caused another problem, it was a little hard to\nremove the headers, and the holes closed behind being removed, for some\nreason my solider sucker just wasn\u2019t working well tonight.\n\n\nOver all thou, this was a fun project, now I just need to order a couple\nmore protoboards for the next time I want to move off breadboarding.",
            "title": "SPO-512 Speech Synthesizer"
        },
        {
            "location": "/projects/arduino/QVGA-DISPLAY/QVGA-Display2/",
            "text": "Original document found at:\n\n\nhttps://playground2014.wordpress.com/arduino/qvga-display-2-2-tft-spi-240x320/\n\n\nQVGA DISPLAY 2.2 TFT SPI 240\u00d7320\n\n\nUpdate 23.05.2016 \u2013 Using the SD card modul\n\n\nIn the first tutorial (see below), I described the display. Please, read\nthis tutorial first, so you understand this part better.\n\n\nThis display has backside a SD card slot. Normally, this modul is not\nconnected. To use it, you must solder 4 pins.\n\n\nAnd now, be carefull! This pins works with 3.3V too! If you connect\nthis to 5V (arduino pins directly) you destroy your SD card!\n\n\nYou must use the level converter!\n\n\nWe can connect multiple devices at the same time to the SPI interface.\nSo, we connect the display and the SD card modul to this interface. Be\nsure, you connect the SD modul ports with the low level side!\n\n\n{width=\"5.5in\"\nheight=\"3.111111111111111in\"}\n\n\n{width=\"5.5in\"\nheight=\"3.111111111111111in\"}\n\n\nAnd now, let us use the SD card module.\n\n\nIn the first tutorial, you used already two ADAFRUIT libraries. Now, we\nneed a third library, named \u201cSD.h\u201d.\n\n\nYou will find two great examples in your arduino IDE \u2013 \u201cgraphicstest\u201d\nand \u201cspitfbitmap\u201d. Both runs without changes!\n\n\nTry it! The necessary bitmap for the second sketch is in the example\nfolder. Look there and copy it to your SD card (directly into the root\ndirectory).\n\n\n/***************************************************\\\nThis is an example sketch for the Adafruit 2.2\" SPI display.\\\nThis library works with the Adafruit 2.2\" TFT Breakout w/SD card\\\n----> http://www.adafruit.com/products/1480\\\n\\\nCheck out the links above for our tutorials and wiring diagrams\\\nThese displays use SPI to communicate, 4 or 5 pins are required to\\\ninterface (RST is optional)\\\nAdafruit invests time and resources providing this open source code,\\\nplease support Adafruit and open-source hardware by purchasing\\\nproducts from Adafruit!\\\n\\\nWritten by Limor Fried/Ladyada for Adafruit Industries.\\\nMIT license, all text above must be included in any redistribution\\\n****************************************************/\\\n\\\n#include <Adafruit_GFX.h> // Core graphics library\\\n#include \"Adafruit_ILI9340.h\" // Hardware-specific library\\\n#include <SPI.h>\\\n#include <SD.h>\\\n\\\n// TFT display and SD card will share the hardware SPI interface.\\\n// Hardware SPI pins are specific to the Arduino board type and\\\n// cannot be remapped to alternate pins. For Arduino Uno,\\\n// Duemilanove, etc., pin 11 = MOSI, pin 12 = MISO, pin 13 = SCK.\\\n#define TFT_RST 8\\\n#define TFT_DC 9\\\n#define TFT_CS 10\\\n#define SD_CS 4\\\n\\\nAdafruit_ILI9340 tft = Adafruit_ILI9340(TFT_CS, TFT_DC, TFT_RST);\\\n\\\n...\n\n\nQVGA Display 2.2 TFT SPI 240\u00d7320\n\n\nIn this tutorial I show you, how you can use the TFT SPI display.\n\n\nFirst, what is SPI?\n\n\nSPI is the abbreviation for \u201cSerial Peripheral Interface\u201d. For this type\nof communication, we need the following data ports:\n\n\nMISO = Master In, Slave Out\n\n\nMOSI = Master Out, Slave In\n\n\nSCK = Serial Clock\n\n\nSS = Slave Select\n\n\nOur Arduino has already this port definition:\n\n\nPort 11 = MOSI\n\n\nPort 12 = MISO\n\n\nPort 13 = SCK\n\n\nPort 10 = SS\n\n\nThis is the set to communicate via SPI.\n\n\nWe need two additional ports for our display:\n\n\nPort 9 = Data / Command selection\n\n\nPort 8 = Reset (Low Level active)\n\n\nSo far, so good, but there is one problem:\n\n\nThe TFT display works with 3.3 V. Ok, this no problem, our arduino has\nthis voltage. \nBut we need 3.3V at the data ports too!\n And here works\nthe arduino with 5V.\n\n\nWith 5V on ports 10, 11, 12 and 13 the display will be dark, no chance!\n\n\nWe solve the problem with a level converter. There are a lot of IC,\nexample the CD4050. I use in this tutorial two breakout boards from\nsparkfun.\n\n\nAnnotations:\n\n\nThe LED pin is connected with 3.3V, Vcc too.\n\n\nSome Details:\n\n\n{width=\"4.166666666666667in\"\nheight=\"2.3472222222222223in\"}\n\n{width=\"2.8055555555555554in\"\nheight=\"2.361111111111111in\"}\n\n{width=\"4.166666666666667in\"\nheight=\"2.3472222222222223in\"}\n\n{width=\"4.166666666666667in\"\nheight=\"2.3472222222222223in\"}\n\n\nThe code:\n\n\n/***************************************************\\\nThis is an example sketch for the Adafruit 2.2\" SPI display.\\\nThis library works with the Adafruit 2.2\" TFT Breakout w/SD card\\\n----> http://www.adafruit.com/products/1480\\\n\\\nCheck out the links above for our tutorials and wiring diagrams\\\nThese displays use SPI to communicate, 4 or 5 pins are required to\\\ninterface (RST is optional)\\\nAdafruit invests time and resources providing this open source code,\\\nplease support Adafruit and open-source hardware by purchasing\\\nproducts from Adafruit!\\\n\\\nWritten by Limor Fried/Ladyada for Adafruit Industries.\\\nMIT license, all text above must be included in any redistribution\\\n****************************************************/\\\n\\\n#include \"SPI.h\"\\\n#include \"Adafruit_GFX.h\"\\\n#include \"Adafruit_ILI9340.h\"\\\n\\\n#if defined(__SAM3X8E__)\\\n#undef __FlashStringHelper::F(string_literal)\\\n#define F(string_literal) string_literal\\\n#endif\\\n\\\n// These are the pins used for the UNO\\\n// for Due/Mega/Leonardo use the hardware SPI pins (which are\ndifferent)\\\n#define _sclk 13\\\n#define _miso 12\\\n#define _mosi 11\\\n#define _cs 10\\\n#define _dc 9\\\n#define _rst 8\\\n\\\nAdafruit_ILI9340 tft = Adafruit_ILI9340(_cs, _dc, _rst);\\\n\\\nvoid setup() {\\\ntft.begin();\\\n\\\ntft.setRotation(1);\\\ntestText();\\\n}\\\n\\\nvoid loop(void) {\\\n\\\n}\\\n\\\n\\\nunsigned long testText() {\\\ntft.fillScreen(ILI9340_BLACK);\\\ntft.setCursor(20, 20);\\\ntft.setTextColor(ILI9340_RED); tft.setTextSize(4);\\\ntft.println(\"Thank you!\");\\\ntft.setCursor(20, 70);\\\ntft.setTextColor(ILI9340_YELLOW); tft.setTextSize(2);\\\ntft.print(\"Adafruit tft.setTextColor(ILI9340_WHITE);\\\ntft.print(\" & \");\\\ntft.setTextColor(ILI9340_GREEN);\\\ntft.println(\"Sparkfun\");\\\ntft.setTextColor(ILI9340_WHITE);\\\ntft.setTextSize(2);\\\ntft.println();\\\ntft.println(\"It's crazy! The display \");\\\ntft.println(\"works! \");\\\ntft.println();\\\ntft.print(\"Thank\");\\\ntft.setTextColor(ILI9340_YELLOW);\\\ntft.println(\"Adafruit\");\\\ntft.setTextColor(ILI9340_WHITE);\\\ntft.println(\"for the perfect libraries\");\\\ntft.print(\"& thank you \");\\\ntft.setTextColor(ILI9340_GREEN);\\\ntft.print(\"Sparkfun tft.setTextColor(ILI9340_WHITE);\\\ntft.println(\"for\");\\\ntft.println(\"the really simple to use\");\\\ntft.println(\"Level Converter! \");\\\n}",
            "title": "QVGA Display"
        },
        {
            "location": "/projects/arduino/QVGA-DISPLAY/QVGA-Display2/#original-document-found-at",
            "text": "https://playground2014.wordpress.com/arduino/qvga-display-2-2-tft-spi-240x320/",
            "title": "Original document found at:"
        },
        {
            "location": "/projects/arduino/QVGA-DISPLAY/QVGA-Display2/#qvga-display-22-tft-spi-240320",
            "text": "",
            "title": "QVGA DISPLAY 2.2 TFT SPI 240\u00d7320"
        },
        {
            "location": "/projects/arduino/QVGA-DISPLAY/QVGA-Display2/#update-23052016-using-the-sd-card-modul",
            "text": "In the first tutorial (see below), I described the display. Please, read\nthis tutorial first, so you understand this part better.  This display has backside a SD card slot. Normally, this modul is not\nconnected. To use it, you must solder 4 pins.  And now, be carefull! This pins works with 3.3V too! If you connect\nthis to 5V (arduino pins directly) you destroy your SD card!  You must use the level converter!  We can connect multiple devices at the same time to the SPI interface.\nSo, we connect the display and the SD card modul to this interface. Be\nsure, you connect the SD modul ports with the low level side!  {width=\"5.5in\"\nheight=\"3.111111111111111in\"}  {width=\"5.5in\"\nheight=\"3.111111111111111in\"}  And now, let us use the SD card module.  In the first tutorial, you used already two ADAFRUIT libraries. Now, we\nneed a third library, named \u201cSD.h\u201d.  You will find two great examples in your arduino IDE \u2013 \u201cgraphicstest\u201d\nand \u201cspitfbitmap\u201d. Both runs without changes!  Try it! The necessary bitmap for the second sketch is in the example\nfolder. Look there and copy it to your SD card (directly into the root\ndirectory).  /***************************************************\\\nThis is an example sketch for the Adafruit 2.2\" SPI display.\\\nThis library works with the Adafruit 2.2\" TFT Breakout w/SD card\\\n----> http://www.adafruit.com/products/1480\\\n\\\nCheck out the links above for our tutorials and wiring diagrams\\\nThese displays use SPI to communicate, 4 or 5 pins are required to\\\ninterface (RST is optional)\\\nAdafruit invests time and resources providing this open source code,\\\nplease support Adafruit and open-source hardware by purchasing\\\nproducts from Adafruit!\\\n\\\nWritten by Limor Fried/Ladyada for Adafruit Industries.\\\nMIT license, all text above must be included in any redistribution\\\n****************************************************/\\\n\\\n#include <Adafruit_GFX.h> // Core graphics library\\\n#include \"Adafruit_ILI9340.h\" // Hardware-specific library\\\n#include <SPI.h>\\\n#include <SD.h>\\\n\\\n// TFT display and SD card will share the hardware SPI interface.\\\n// Hardware SPI pins are specific to the Arduino board type and\\\n// cannot be remapped to alternate pins. For Arduino Uno,\\\n// Duemilanove, etc., pin 11 = MOSI, pin 12 = MISO, pin 13 = SCK.\\\n#define TFT_RST 8\\\n#define TFT_DC 9\\\n#define TFT_CS 10\\\n#define SD_CS 4\\\n\\\nAdafruit_ILI9340 tft = Adafruit_ILI9340(TFT_CS, TFT_DC, TFT_RST);\\\n\\\n...",
            "title": "Update 23.05.2016 \u2013 Using the SD card modul"
        },
        {
            "location": "/projects/arduino/QVGA-DISPLAY/QVGA-Display2/#qvga-display-22-tft-spi-240320_1",
            "text": "In this tutorial I show you, how you can use the TFT SPI display.  First, what is SPI?  SPI is the abbreviation for \u201cSerial Peripheral Interface\u201d. For this type\nof communication, we need the following data ports:  MISO = Master In, Slave Out  MOSI = Master Out, Slave In  SCK = Serial Clock  SS = Slave Select  Our Arduino has already this port definition:  Port 11 = MOSI  Port 12 = MISO  Port 13 = SCK  Port 10 = SS  This is the set to communicate via SPI.  We need two additional ports for our display:  Port 9 = Data / Command selection  Port 8 = Reset (Low Level active)  So far, so good, but there is one problem:  The TFT display works with 3.3 V. Ok, this no problem, our arduino has\nthis voltage.  But we need 3.3V at the data ports too!  And here works\nthe arduino with 5V.  With 5V on ports 10, 11, 12 and 13 the display will be dark, no chance!  We solve the problem with a level converter. There are a lot of IC,\nexample the CD4050. I use in this tutorial two breakout boards from\nsparkfun.  Annotations:  The LED pin is connected with 3.3V, Vcc too.  Some Details:  {width=\"4.166666666666667in\"\nheight=\"2.3472222222222223in\"} {width=\"2.8055555555555554in\"\nheight=\"2.361111111111111in\"} {width=\"4.166666666666667in\"\nheight=\"2.3472222222222223in\"} {width=\"4.166666666666667in\"\nheight=\"2.3472222222222223in\"}  The code:  /***************************************************\\\nThis is an example sketch for the Adafruit 2.2\" SPI display.\\\nThis library works with the Adafruit 2.2\" TFT Breakout w/SD card\\\n----> http://www.adafruit.com/products/1480\\\n\\\nCheck out the links above for our tutorials and wiring diagrams\\\nThese displays use SPI to communicate, 4 or 5 pins are required to\\\ninterface (RST is optional)\\\nAdafruit invests time and resources providing this open source code,\\\nplease support Adafruit and open-source hardware by purchasing\\\nproducts from Adafruit!\\\n\\\nWritten by Limor Fried/Ladyada for Adafruit Industries.\\\nMIT license, all text above must be included in any redistribution\\\n****************************************************/\\\n\\\n#include \"SPI.h\"\\\n#include \"Adafruit_GFX.h\"\\\n#include \"Adafruit_ILI9340.h\"\\\n\\\n#if defined(__SAM3X8E__)\\\n#undef __FlashStringHelper::F(string_literal)\\\n#define F(string_literal) string_literal\\\n#endif\\\n\\\n// These are the pins used for the UNO\\\n// for Due/Mega/Leonardo use the hardware SPI pins (which are\ndifferent)\\\n#define _sclk 13\\\n#define _miso 12\\\n#define _mosi 11\\\n#define _cs 10\\\n#define _dc 9\\\n#define _rst 8\\\n\\\nAdafruit_ILI9340 tft = Adafruit_ILI9340(_cs, _dc, _rst);\\\n\\\nvoid setup() {\\\ntft.begin();\\\n\\\ntft.setRotation(1);\\\ntestText();\\\n}\\\n\\\nvoid loop(void) {\\\n\\\n}\\\n\\\n\\\nunsigned long testText() {\\\ntft.fillScreen(ILI9340_BLACK);\\\ntft.setCursor(20, 20);\\\ntft.setTextColor(ILI9340_RED); tft.setTextSize(4);\\\ntft.println(\"Thank you!\");\\\ntft.setCursor(20, 70);\\\ntft.setTextColor(ILI9340_YELLOW); tft.setTextSize(2);\\\ntft.print(\"Adafruit tft.setTextColor(ILI9340_WHITE);\\\ntft.print(\" & \");\\\ntft.setTextColor(ILI9340_GREEN);\\\ntft.println(\"Sparkfun\");\\\ntft.setTextColor(ILI9340_WHITE);\\\ntft.setTextSize(2);\\\ntft.println();\\\ntft.println(\"It's crazy! The display \");\\\ntft.println(\"works! \");\\\ntft.println();\\\ntft.print(\"Thank\");\\\ntft.setTextColor(ILI9340_YELLOW);\\\ntft.println(\"Adafruit\");\\\ntft.setTextColor(ILI9340_WHITE);\\\ntft.println(\"for the perfect libraries\");\\\ntft.print(\"& thank you \");\\\ntft.setTextColor(ILI9340_GREEN);\\\ntft.print(\"Sparkfun tft.setTextColor(ILI9340_WHITE);\\\ntft.println(\"for\");\\\ntft.println(\"the really simple to use\");\\\ntft.println(\"Level Converter! \");\\\n}",
            "title": "QVGA Display 2.2 TFT SPI 240\u00d7320"
        },
        {
            "location": "/projects/esp8266/",
            "text": "",
            "title": "Temp"
        },
        {
            "location": "/projects/esp32/",
            "text": "",
            "title": "Temp"
        },
        {
            "location": "/projects/TILaunchPad/ti-multi-task/README/",
            "text": "Oct 6, 2016 TI LaunchPad MS432 Multi-Tasking Demo\n\n\nPictures and short video\n (early stage) showing the Demo for Oct 6th 2016 using the MSP432 multi-tasking board  \n\n\nVideo was before adding the Nokia 5110 screen, temperature sensor, and last 2 LEDs.  \n\n\nCurrent version of demo.\n\n\n7 Blinking LEDs at different rates\n\n1 LED (in two threads) blink Green then Blue - showing the timing doesn\u2019t change\n\n6 LEDs Fading at different rates and times\n\n3 Ultra Sonic Ping Sensors\n\nNokia 5110 SPI screen\n\nDHT11 Temperature sensor\n\nA counting thread\n\nAnd a serial print to console thread  \n\n\nAll the leds are in there own thread, I count a total of 22 threads, plus the main thread which I used to setup some of the variables, serial port, lcd screen, etc  \n\n\nLibraries need (Which were a little hard to find)\n\n\nNokia 5110\n (for the Launchpad)\n\n[DHT11 library] (https://forum.43oh.com/topic/2873-energia-library-ladyadas-dht-library-ported/).  \n\n\nI started a repository for demos and projects using the TI Launchpad boards.\n\n\nGitHub",
            "title": "TI Launchpad MS432 Multi-Task Demo"
        },
        {
            "location": "/projects/TILaunchPad/ti-multi-task/README/#oct-6-2016-ti-launchpad-ms432-multi-tasking-demo",
            "text": "Pictures and short video  (early stage) showing the Demo for Oct 6th 2016 using the MSP432 multi-tasking board    Video was before adding the Nokia 5110 screen, temperature sensor, and last 2 LEDs.",
            "title": "Oct 6, 2016 TI LaunchPad MS432 Multi-Tasking Demo"
        },
        {
            "location": "/projects/TILaunchPad/ti-multi-task/README/#current-version-of-demo",
            "text": "7 Blinking LEDs at different rates \n1 LED (in two threads) blink Green then Blue - showing the timing doesn\u2019t change \n6 LEDs Fading at different rates and times \n3 Ultra Sonic Ping Sensors \nNokia 5110 SPI screen \nDHT11 Temperature sensor \nA counting thread \nAnd a serial print to console thread    All the leds are in there own thread, I count a total of 22 threads, plus the main thread which I used to setup some of the variables, serial port, lcd screen, etc",
            "title": "Current version of demo."
        },
        {
            "location": "/projects/TILaunchPad/ti-multi-task/README/#libraries-need-which-were-a-little-hard-to-find",
            "text": "Nokia 5110  (for the Launchpad) \n[DHT11 library] (https://forum.43oh.com/topic/2873-energia-library-ladyadas-dht-library-ported/).    I started a repository for demos and projects using the TI Launchpad boards.  GitHub",
            "title": "Libraries need (Which were a little hard to find)"
        },
        {
            "location": "/projects/esp32/",
            "text": "",
            "title": "Temp"
        },
        {
            "location": "/projects/other/project-hot-wheels-10-525ghz-radar-gun/README/",
            "text": "20140525 - Hot Wheels 10.525ghz radar gun - Update #2\n\n\nhttp://www.edparadis.com/radar/\n\n\nThe above website takes apart one of the Hot Wheels radar guns, and has\nsome great pictures of the components. Something that you might notice\nis that the gun itself is very much like the little gun we have. The\nbiggest difference is it\u2019s in a waveguide that helps to direct where the\nradar signal goes. But otherwise it is very much like what we have.\n\n\nOne other thing you\u2019ll notice is that he also had to add an amplifier to\nget a signal he could use, I believe that there is an amp on the\n\u201ccontrol board\u201d but it may not have been easy to access that.\n\n\nYou\u2019ll also note that his IF is also in the 10Hz to 150Hz range, which\nmakes believe the hot wheels gun is using the HB100 or at least\nsomething that is very close to it.\n\n\nThere are quite a few projects that are using the Hot Wheels gun,\nincluding a Weather Radar (well sort of),\n\n\nhttps://instruct1.cit.cornell.edu/Courses/ee476/FinalProjects/s2009/cdl32_mjc89/cdl32_mjc89/index.html\n\n\nDoes make me wonder if we could use what we have an mirror the above\nproject, looks like it might be a big project.\n\n\nAnd here\u2019s someone that \u201cmade\u201d a speed gun out of the Hot Wheels radar\ngun (What, this is already a speed gun???)\n\n\nhttp://makezine.com/projects/radar-speed-detector/\n\n\nTo make a real gun, we need more power which we are limited to using\nthis unit. But we might beable to focus the waves better using something\nlike this: It\u2019s a 10ghz (X-band) radar cone, it\u2019s tuned for the X-Band,\nand will direct the waves much better. This is very much like what is in\na commercial radar gun (IF the cops were still using X-Band)\n\n\nIt\u2019s still not going to be perfect, not with this unit, but it will be\nbetter.\n\n\nhttp://www.ebay.com/itm/10-GHZ-X-BAND-17-DB-GAIN-HORN-ANTENNA-MA86551-NEW-/141295562369?pt=US_Radio_Comm_Antennas&hash=item20e5df2e81\n\n\nI would like to try to tune the gun, but for that we need tuning forks\n(Any should work, I think) as long as we know at what Hz they vibrate.\n(IE: a fork vibrating at 200Hz should be about 6.3 or 6.4 MPHs Hz/31.36\n= MPH) Short of having any tuning forks there is no sure way to know\nthat what we are doing is working correctly or not.\n\n\nOne Idea I have is to roll a hot wheels car, see what the hot wheels\nguns says, and then roll it again and see what our gun says. Hopefully\nthey will be the same or close to the same - But that method has a\nproblem that is the push was a little more or a little less then results\nwould be a little different.\n\n\nSO if anyone has any tuning forks that we know the vibration of bring\nthem to this Thursdays meeting and we will see if we can figure out!",
            "title": "Hot Wheels 10.524Ghz Radar Gun"
        },
        {
            "location": "/projects/robot/chassis-kits/Actobotics/",
            "text": "Half-Pint Runt Rover\u2122 Robot Kit by Actobotics\u00ae #637154 $29.99 + $6.99\n\n\nhttp://www.ebay.com/itm/272032021340?_trksid=p2060353.m1438.l2649&ssPageName=STRK%3AMEBIDX%3AIT\n\n\nSprout Runt Rover\u2122 Robot Kit by\nActobotics\u00ae #637160 $17.99 + $6.99\n\n\nhttp://www.ebay.com/itm/272032021342?_trksid=p2060353.m1438.l2649&ssPageName=STRK%3AMEBIDX%3AIT\n\n\nWhippersnapper Runt Rover\u2122 Robot Kit by\nActobotics\u00ae #637156 $28.99 + $6.99\n\n\nhttp://www.ebay.com/itm/272032021341?_trksid=p2060353.m1438.l2649&ssPageName=STRK%3AMEBIDX%3AIT\n\n\nJunior Runt Rover\u2122 Robot Kit by\nActobotics\u00ae #637142 $27.99 + $6.99\n\n\nhttp://www.ebay.com/itm/272032021344?_trksid=p2060353.m1438.l2649&ssPageName=STRK%3AMEBIDX%3AIT\n\n\nBogie Runt Rover Kit By Actobotics #\n637162 $69.99 + $6.99\n\n\nhttp://www.ebay.com/itm/281843544585?_trksid=p2060353.m1438.l2649&ssPageName=STRK%3AMEBIDX%3AIT\n\n\nGooseneck Robot Kit By Actobotics Part # 637140 $89.99 + $6.99\n\n\nhttp://www.ebay.com/itm/272049766382?_trksid=p2060353.m1438.l2649&ssPageName=STRK%3AMEBIDX%3AIT",
            "title": "Actobotics"
        },
        {
            "location": "/projects/robot/herojr/",
            "text": "Nothing Here Yet",
            "title": "Hero Jr Project"
        },
        {
            "location": "/projects/robot/herojr/#nothing-here-yet",
            "text": "",
            "title": "Nothing Here Yet"
        },
        {
            "location": "/projects/robot/HeroJr-StarWarsDay/README/",
            "text": "Hero Jr Special Star Wars Day Code\n\n\nInstallation\n\n\nThis is of my Hero Jr project - (only with a special code) - I bought a Nonworking Hero Jr some time ago, after many years, I finally decided what to do with it.\nI replaced all of the boards with modern hardware.  An Arduino Mega 2560 became the brains, a SR04 ultrasonic replaced the Polaroid ultrasonic, L298 Motor Drivers were used, and a eMic 2\nspeech synthesizer for his voice.  Some other modern hardware was used as well. I keep the 12v stepper, and DC motor.  The main goal of the project was to keep it looking as original as posssible. \nAnd I I've managed to do just that.  This December (2015) our local library is having a Star Wars day, and I was asked to bring it. So this is a special sketch just for that day.\nA MP3 player will be added for additional Star Wars sound effects.  This is very early stage of the \"Special Star Wars Day Code\"\nvideo can be found here:\nhttps://www.youtube.com/watch?v=amXbPWCTQHg\n\n\nUsage\n\n\nTODO: Write usage instructions\n\n\nContributing\n\n\n\n\nFork it!\n\n\nCreate your feature branch: \ngit checkout -b my-new-feature\n\n\nCommit your changes: \ngit commit -am 'Add some feature'\n\n\nPush to the branch: \ngit push origin my-new-feature\n\n\nSubmit a pull request\n\n\n\n\nCredits\n\n\nLeRoy Miller\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses",
            "title": "General Info"
        },
        {
            "location": "/projects/robot/HeroJr-StarWarsDay/README/#hero-jr-special-star-wars-day-code",
            "text": "",
            "title": "Hero Jr Special Star Wars Day Code"
        },
        {
            "location": "/projects/robot/HeroJr-StarWarsDay/README/#installation",
            "text": "This is of my Hero Jr project - (only with a special code) - I bought a Nonworking Hero Jr some time ago, after many years, I finally decided what to do with it.\nI replaced all of the boards with modern hardware.  An Arduino Mega 2560 became the brains, a SR04 ultrasonic replaced the Polaroid ultrasonic, L298 Motor Drivers were used, and a eMic 2\nspeech synthesizer for his voice.  Some other modern hardware was used as well. I keep the 12v stepper, and DC motor.  The main goal of the project was to keep it looking as original as posssible. \nAnd I I've managed to do just that.  This December (2015) our local library is having a Star Wars day, and I was asked to bring it. So this is a special sketch just for that day.\nA MP3 player will be added for additional Star Wars sound effects.  This is very early stage of the \"Special Star Wars Day Code\"\nvideo can be found here:\nhttps://www.youtube.com/watch?v=amXbPWCTQHg",
            "title": "Installation"
        },
        {
            "location": "/projects/robot/HeroJr-StarWarsDay/README/#usage",
            "text": "TODO: Write usage instructions",
            "title": "Usage"
        },
        {
            "location": "/projects/robot/HeroJr-StarWarsDay/README/#contributing",
            "text": "Fork it!  Create your feature branch:  git checkout -b my-new-feature  Commit your changes:  git commit -am 'Add some feature'  Push to the branch:  git push origin my-new-feature  Submit a pull request",
            "title": "Contributing"
        },
        {
            "location": "/projects/robot/HeroJr-StarWarsDay/README/#credits",
            "text": "LeRoy Miller",
            "title": "Credits"
        },
        {
            "location": "/projects/robot/HeroJr-StarWarsDay/README/#license",
            "text": "This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.  This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses",
            "title": "License"
        },
        {
            "location": "/projects/robot/HeroJr-StarWarsDay/Demo/",
            "text": "Midpointe Library \u201cStar Wars Day\u201d December 12 Demo\n\n\nItems selected for Martha Matthews Demo: (what we want the kids to get\nexcited about)\n\n\nLatest Demo:\n\n\n20151030 Latest Demo\nTape\n\n\nVideos:\n\n\nhttps://www.youtube.com/watch?v=8CiRdOWwBLw\n\n\nhttps://www.youtube.com/watch?v=j-iI3EXgOpc\n\n\nhttps://www.youtube.com/watch?v=v5nnZaRjUiQ\n\n\nhttps://www.youtube.com/watch?v=ZWc71PyQ9sM\n\n\nhttps://www.youtube.com/watch?v=iwDfqH8-7z4\n\n\n**\n1.\nhttps://www.youtube.com/watch?v=ipSUzAiHT50\n\n\n**\n2.\nhttps://www.youtube.com/watch?v=E61FqZ1rzMA\n\n\nhttps://www.youtube.com/watch?v=DkSEkLGLnR0\n\n\n**\n3\n.https://www.youtube.com/watch?v=iIo2t8hObbs&feature=youtu.be\n\n\n**\n4.\nhttps://www.youtube.com/watch?v=rnjKI4fJYhk\n\n\n5.\n**\nhttps://www.youtube.com/watch?v=i1yZ60KN3VE\n\n\n**\n** 6.\nhttps://www.youtube.com/watch?v=jrZAHj4Hu7M\n\n\n**\n7.\nhttps://www.youtube.com/watch?v=2FScPXEyifA\n\n\n**\n8.\nhttps://www.youtube.com/watch?v=h_E2bXM0RiQ\n\n\n**\n9.\nhttps://www.youtube.com/watch?v=orDKwfIWsxA\n\n\n**10 New Trailer/Music/Sounds MP3 music and\nsounds\n\n\nOnes with stars are more complete working videos, not just tests.\n\n\n3 Laws Info:\n\n\nhttps://docs.google.com/document/d/17M6yG1iy0a_YRygvvAShr4ao8BpyFsjwAgvbXYu6fS0/edit\n\n\nReally Old Code: (From Jim?)\n\n\nhttps://docs.google.com/document/d/1Wb5VGys6_dgWfRY-lcKTid65CH9tgcLqm8i8NeVztH0/edit\n\n\nPictures sort of:\n\n\nhttps://plus.google.com/+LeRoyMiller/posts/Vsz6LHzugxa\n\n\nhttps://plus.google.com/+LeRoyMiller/posts/YiWk1Yto5sw\n\n\nCode on GitHub - doesn\u2019t look like it up to date (? hmmmmm I hope I\ndidn\u2019t delete the good code from codebender)\n\n\nhttps://github.com/kd8bxp/Arduino-Mega-Hero-Jr-Project\n\n\nCodeBender Code (This appears to be the current version of the code!):\n\n\nhttps://codebender.cc/sketch:106002\n\nApril 19, 2015\n\n\nOlder Versions also on CodeBender:\n\n\nhttps://codebender.cc/sketch:105886\n\nApril 18, 2015\n\n\nhttps://codebender.cc/sketch:105639\n\nApril 17, 2015\n\n\nhttps://codebender.cc/sketch:96932\n\nMar 23, 2015\n\n\nAnything else I have is written on paper, and contains wire hookup\nnotes, and ideas for improvements.",
            "title": "Midpointe Library Dec 12 Demo"
        },
        {
            "location": "/projects/robot/HeroJr-StarWarsDay/Outline_Script_for_Star_Wars_Day_Hero_Jr/",
            "text": "Outline Script for Star Wars Day, Hero Junior.\n\n\n10 minute target.\n\n\nOne of the Hero Videos on Youtube had a \u201ccheckout\u201d video. It was just\nsimple one step checks, but it struck me as interesting as it reminded\nme of stuff you would hear going on while you were in space. A bunch of\nboring equipment checkout sequences. Might appeal to kids or set\nbackground. I was thinking that doing this in the dead time before the\ndemo might be entertaining.\n\n\nhttps://youtu.be/BLtsDegME2Q\n\n\n(That is the original startup, my startup tests are a little different,\nbut similar)\n\n\nMine:\n\nhttps://youtu.be/ipSUzAiHT50?t=3m2s\n\n\ndont get a woki mad.\n\n\nhyperdrive button\n\n\nTiming will be a major issue with this demo, so hopefully we can pull it\noff.\n\n\n\n\nWhat about:\n\n\n1)  Star Wars Opening music (44 seconds)\n\n\nspeak over top \u201cWelcome to Star Wars Day.\u201d\n\n\n2) wait for end of music, rewrite test2() subroutine for Star Wars day.\n\n\nPlay Rebel Music while testing\u2026(? might be too long of a file or cause a\ndelay with random sounds?)\n\n\na.  battery voltage\n\n\nb.  ultrasonic\n\n\nc.  light test\n\n\nd.  sound test\n\n\ne.  play daisy (not really a Star Wars thing, but it\u2019s important for all\n    > Robots to know)\n\n\nf.  drive motor testing\n\n\ng.  random star wars sound 1\n\n\nh.  random star wars sound 2\n\n\ni.  random star wars sound 3\n\n\nj.  Test leds\n\n\nk.  cylon test\n\n\n3) speak \u201cI am a Hero Junior Robot, and one of my favorite movies is\u201d\n\n\nspeak \u201cStar Wars, I wish I could fight against the \u201c\n\n\nplay imperial music (37 seconds)\n\n\nspeak \u201cEmpire alongside my friends\n\n\n4) wait till imperial ends: play 2 r2d2 sounds (short 2 seconds to 4\nseconds) play C3PO sound\n\n\n(2 or 3 seconds), speak \u201cR 2 D 2 and C 3 P O\u201d\n\n\n5) wait for all sounds to finish.\n\n\n6) speak \u201cbut I must admit I am a little afraid of\u2026\u2026 \u201c play R2D2\njawa/scream\n\n\n7) wait for end sound, play Darth Vader breathing. backup a foot(ish)\nspeak \u201cDarth Vader. \u201c\n\n\n8) speak \u201cWhere\u2019s my blaster\u201d, play blaster sound, cylon leds (2 cycles)\n\n\n9) wait for sounds to end. Move forward 1 foot(ish) speak \u201cDid I get\nhim? Oh I think I just scared him off.\u201d\n\n\n10) speak \u201cWasn\u2019t expecting that from a Happy Dancing Robot? \u201c play\nstar-wars-cantina (2.50 minutes) Dance routine\n\n\n11) cyclon(5) - cycle the leds 5 times\n\n\n11a) May The Force Be With you. mp3\n\n\n12) speak \u201cHit a button on my keypad to hear a Star Wars\u201d\n\n\nspeak \u201cSound. Hit E to start over\u201d\n\n\n13) random star wars sound routine - E key with go back to number 1\n\n\nany other key will play a random sound (without doing much more, it will\nbe completely random for each key)\n\n\n14) Time out and return to number 1 after about 30 seconds (? longer?\nshorter?)\n\n\nxxx mousebot. joystick remote,\n\n\nultrasonic demo blocks obstacles\n\n\njoystick demo (pre program) in between. grand poo bah\n\n\nLIST OF MP3 CLIPS:\n\n\nbadfeel.mp3 - Luke I have a bad feeling about this 2 seconds (renamed)\n1.\n\n\nblaster.mp3 - blaster sound <1 second\n\n\nbreath.mp3 - Darth Vader 4 seconds\n\n\nc3po.mp3 -\"I am C3PO human....\" 3 seconds\n\n\ncarpet.mp3 - Leia \"Walking carpet\" 3 seconds\n\n\nchecked.mp3 - Vader Send a scanning crew.... 3 seconds\n\n\ncrops.mp3 - Han Solo - Traving thur hyperspace 3 seconds\n\n\ndeity.mp3 - C3PO I believe they think I am a deity 43 seconds\n\n\ndetonatr.mp3 - C3PO because he's holding a thermal detonatr - 2 seconds\n\n\ndisturb.mp3 - Luke & Obi Wan - Another Great Disturbance - 10 seconds\ndisturb.mp3 renamed\n\n\ndroid2.mp3 - R2D2 sounds 1 second\n\n\ndroid3.mp3 - R2D2 sounds (streaming may not work with MP3 player)?\n\n\ndroids.mp3 - This aren't the Droids ObiWan - 21 seconds\n\n\newokpara.mp3 - Ewok parade - 34 seconds\n\n\nfaith.mp3 - I find your lack of faith distrubing - Vader - 3 seconds\n\n\nfire.mp3 - You may fire when ready - Govener Tarkin - 1 seconds\n\n\nforce.mp3 - the force will be with you always - Obiwan - 2 seconds\n\n\nforce1.mp3 - same as above, better version - 3 seconds\n\n\nforce2.mp3 - May the Force Be With you -Han Solo - 2 seconds\n\n\nfstrong.mp3 - Vader The force is strong with this one 1 second -\n(renamed)\n\n\nhelpme.mp3 - Leia - Help me Obi Wan - 3 seconds\n\n\nhumnbehv.mp3 - C3PO - sometimes I just don't understand 2 seconds\n\n\nimperial.mp3 - Imperial March 37 seconds\n\n\njawascr.mp3 - Jawa R2D2 scream 2 seconds\n\n\njawastun.mp3 - Jawa Stun gun - 1 seconds\n\n\nluck.mp3 - Obi Wan - 3 seconds\n\n\nmaster.mp3 - Vader 6 seconds\n\n\nnotout.mp3 - Han Solo 2 seconds\n\n\nplans.mp3 - Vader - 6 seconds - Command Tear this ship apart I want\nthose plans\n\n\nprincess.mp3 - Luke and Han Solo talking about Princess Leia - 21\nseconds\n\n\nr2d2wst1.mp3 - R2D2 sounds 1 second\n\n\nr2d2wst2.mp3 - R2D2 sounds (who me) 1 second\n\n\nr2d2wst3.mp3 - R2D2 sound (nice sound) - 2 second\n\n\nr2d2wst4.mp3 - R2D2 sound (frustration sound?) - streaming ?\n\n\nr2d2wstl.mp3 - R2D2 sound 1 second\n\n\nR2D2.mp3 - R2D2 sound 2 seconds - (renamed)\n\n\nrebel.mp3 - Rebel Theme Music - 4 minutes long (long long) (renamed)\nrebel.mp3 (renamed)\n\n\nremotes.mp3 - Han Solo - Good against remotes.... 5 seconds\n\n\nreward.mp3 - Han Solo - No Reward is worth this... 2 seconds\n\n\nsaberoff.mp3 - 1 seconds\n\n\nsaberon.mp3 - streaming(?)\n\n\nsandppl.mp3 - Obi-Wan - Sand people are easy - 6 seconds sandppl.mp3\n(renamed)\n\n\nscum.mp3 - Obi-Wan - Mosily Space port you'll never find.... 10 seconds\n\n\nstarwars.mp3 - Episode 4 opening music - 44 seconds\n\n\ncantina.mp3 - Cantina Song - 2:47 seconds (renamed)\n\n\nswvader03 - Vader - Yes my master - 1 seconds vader03.mp3 (renamed)\n\n\nwait.mp3 - C3PO - wait a minute - 1 seconds\n\n\nduelfate.mp3 - Dual of Fates song - 4:14 seconds - another long one,\ngreat song thou.\n\n\n========================================================\n\n\nAdditional clips: \u201cOne small step for man\u201d (might be too old). (Not\nreally a Star Wars thing) May \u201cYou may fire when ready\u201d Governor Tarkin\n\n\n\n\nMaintenance self checkout\n\n\n\n\nMaintenance self check \u201ccurrent date/time\u201d initiated. (No Real Time\nclock in mine)\n\n\nCheck Left turn. (robot turns left) - Sure\n\n\nCheck Right Turn (robot turns right) - Sure\n\n\nCheck Forward (robot moves forward) - Sure\n\n\nCheck Reverse (robot moves backwards) - Sure\n\n\nCheck module temperature (robot speaks current temperature). - No\nTemperature module - Battery Voltage sure.\n\n\nRobot diagnostics completed successfully. Terminate self checkout\n\n\n\n\n\n\nRobot repeats self checkout again after appropriate interval (or\n    > alternate checkouts).\n\n\n\n\n\n\nVoice introduction by the Hero Junior. Star Wars Day, December 12\n    > 2015 at the Midpointe Library, West Chester, Ohio.\n\n\n\n\n\n\nPlay StarWars Sound Effects (Introduction)\n\n\n\n\n\n\nbeep light saber up down, darth vader breathing,blaster firing, you may\nfire when ready.\n\n\nepisode 4 theme music.\n\n\ninteractive pushbutton.\n\n\nmusic 1 (include dance motion?) This is the epsiode 4 entro music, so\nvery dramatic - probably don\u2019t want to much random movement. (apx 45\nseconds long)\n\n\nmusic 2 (motion) Darth vader intro music, again dramatic, may not want\nto much movement, maybe LEDs while firing blaster. (Imperial March - apx\n37 seconds long)\n\n\nc3pO 3 (motion) Only a few clips of C3PO, range from apx 2 seconds to 45\nsecs. Only going to use one clip in intro - other clips in random button\npushes.\n\n\n\n\nblaster sound (motion) What about spinning around as he fires the\nblaster. (LEDs for blaster as well) less than a second.\n\n\nrebel music (motion) Dramatic music, not sure? (Apx 4 mins...need\nsomething big to do with this)\n\n\ncantina (moving around suggested) For sure, this is fun dancy kind of\nmusic that goes for like 2 minutes 50 secs.\n\n\ndarth vader (motion) (He\u2019s scared, maybe backup a little bit) (Breath\nSounds apx 4 seconds)\n\n\nr2d2 sounds (motion) Yes, not sure what type of motion thou. (got\nquite a few r2 sounds most are about 2 or 3 seconds, some are shorter\nand some longer) - Only a hand full in intro - reset in button pushes.\n\n\nR2D2 getting shot by jawas - might be something we could do in intro\n(?)\n\n\nHokey Pokey Music with motion Want more movement :-)\n\n\n\n\n5. Wait for button pushes for \u201crandom\u201d star wars sounds effects of other\nthings. Time out after while, will restart from step 1. (maybe do cyclon\nled cycle while waiting for button push)",
            "title": "Outline of Program"
        },
        {
            "location": "/projects/robot/HeroJr-StarWarsDay/Star_Wars_Hero_Jr_Punch_List/",
            "text": "Star Wars Hero Jr Punch List\n\n\nNov 12: Complete video and demo by Nov 12 and present promotional clips\nand photo to library.\n\n\nDroid Dancing:\n\n\nhttps://youtu.be/pltAyNrlqJM\n\n\n*\nEdited\nVersion\n\n\nStar Wars Day Alpha:\n\n\nhttps://youtu.be/XPImtiUIs-c\n\n\nPhoto\u2019s\n\n\n*\nOption\nA\n\n\n*\nOption\nB\nhttps://youtu.be/XPImtiUIs-c\n\n\nOption C Brian Generating\n\n\n\n\n\n\nAdd forward movement (small steps) to beginning song (needs movement\n    > to enchance action)\n\n\n\n\n\n\nDevelope a guide to get cable around hall effect sensor.\n\n\n\n\n\n\nResolve audiance volume problem (not loud enought for crowd) for\n    > speech synthesizer and mp3.\n\n\n\n\n\n\nFix dancing past end of music issue.\n\n\n\n\n\n\nGet Poo Bah to clean remainder of robot (he was a janitor you know).\n\n\n\n\n\n\nAddress the loudness (lack thereoff) for the StarWars day demo\n\n\n\n\n\n\nNon Hero Punch List:\n\n\nNov 12:\n\n\n\n\n\n\nComplete 2 4x4 boxes\n\n\n\n\n\n\nGet bitty rover RC working\n\n\n\n\n\n\n---------------------------------History---------------------------------------------------------------------\n\n\nImplement sound player on arduino.\n\n\nGet all sounds implement (eliminating dead time),\n\n\nFinish choriographing video and implement video for advertising by Nov\n12 demo.\n\n\nGrand Poo Bah\n\n\n1. Blue tooth devices\n\n\na. find xmitter and charge it\n\n\nb. find receiver and put with xmitter.\n\n\nc. connect two together and confirm operation and mode.\n\n\nd. devices would not connect. substituted fm xmitter with radio.\n\n\n2. MP3 Player\n\n\na. find relay outputs\n\n\nb. connect MP3 Player to arduino.\n\n\nc. new unit came in but LeRoy already found solution.\n\n\n3. Practice video editing.\n\n\na.  Downloaded Video Editing tool and became proficient in use.\n\n\nb.  Ready to use if required.",
            "title": "Punch List"
        },
        {
            "location": "/projects/robot/HeroJr-StarWarsDay/pictures_from_Star_Wars_Day/",
            "text": "Some random pictures from Star Wars Day Dec. 12, 2015\n\n\n{width=\"6.5in\" height=\"11.541666666666666in\"}\n\n\n{width=\"6.5in\" height=\"11.541666666666666in\"}\n\n\n{width=\"6.5in\" height=\"3.6527777777777777in\"}\n\n\n{width=\"6.5in\" height=\"11.541666666666666in\"}\n\n\n{width=\"6.5in\" height=\"11.541666666666666in\"}\n\n\n{width=\"6.5in\" height=\"11.541666666666666in\"}\n\n\n{width=\"6.5in\" height=\"11.541666666666666in\"}\n\n\n{width=\"6.5in\" height=\"11.541666666666666in\"}\n\n\n{width=\"6.5in\" height=\"11.541666666666666in\"}\n\n\n{width=\"6.5in\" height=\"3.6527777777777777in\"}",
            "title": "Pictures"
        },
        {
            "location": "/tutorials/robots/robotstart/",
            "text": "Understanding Digital I/O\n\n\nblah blah blah\n\n\nDoing something useful\n\n\nblah blah blah\n\n\nFigure out Motor direction and speed control\n\n\nblah blah blah",
            "title": "Getting Started"
        },
        {
            "location": "/tutorials/robots/robotstart/#understanding-digital-io",
            "text": "blah blah blah",
            "title": "Understanding Digital I/O"
        },
        {
            "location": "/tutorials/robots/robotstart/#doing-something-useful",
            "text": "blah blah blah",
            "title": "Doing something useful"
        },
        {
            "location": "/tutorials/robots/robotstart/#figure-out-motor-direction-and-speed-control",
            "text": "blah blah blah",
            "title": "Figure out Motor direction and speed control"
        },
        {
            "location": "/projects/robot/L298MotorDrive/README/",
            "text": "L298 Motor Drive Demos\n\n\nSketches show different ways to make DC motors have direction and speed control.  \n\n\nThings To Do\n\n\nUsage\n\n\nContributing\n\n\n\n\nFork it!\n\n\nCreate your feature branch: \ngit checkout -b my-new-feature\n\n\nCommit your changes: \ngit commit -am 'Add some feature'\n\n\nPush to the branch: \ngit push origin my-new-feature\n\n\nSubmit a pull request\n\n\n\n\nSupport Me\n\n\nIf you find this or any of my projects useful or enjoyable please support me.\n\nAnything I do get goes to buy more parts and make more/better projects.\n\nhttps://www.patreon.com/kd8bxp\n\nhttps://ko-fi.com/lfmiller  \n\n\nOther Projects\n\n\nhttps://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w\n\nhttps://kd8bxp.blogspot.com/  \n\n\nCredits\n\n\nCopyright (c) 2017 LeRoy Miller\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "L298 Motor Driver"
        },
        {
            "location": "/projects/robot/L298MotorDrive/README/#l298-motor-drive-demos",
            "text": "Sketches show different ways to make DC motors have direction and speed control.",
            "title": "L298 Motor Drive Demos"
        },
        {
            "location": "/projects/robot/L298MotorDrive/README/#things-to-do",
            "text": "",
            "title": "Things To Do"
        },
        {
            "location": "/projects/robot/L298MotorDrive/README/#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/projects/robot/L298MotorDrive/README/#contributing",
            "text": "Fork it!  Create your feature branch:  git checkout -b my-new-feature  Commit your changes:  git commit -am 'Add some feature'  Push to the branch:  git push origin my-new-feature  Submit a pull request",
            "title": "Contributing"
        },
        {
            "location": "/projects/robot/L298MotorDrive/README/#support-me",
            "text": "If you find this or any of my projects useful or enjoyable please support me. \nAnything I do get goes to buy more parts and make more/better projects. \nhttps://www.patreon.com/kd8bxp \nhttps://ko-fi.com/lfmiller",
            "title": "Support Me"
        },
        {
            "location": "/projects/robot/L298MotorDrive/README/#other-projects",
            "text": "https://www.youtube.com/channel/UCP6Vh4hfyJF288MTaRAF36w \nhttps://kd8bxp.blogspot.com/",
            "title": "Other Projects"
        },
        {
            "location": "/projects/robot/L298MotorDrive/README/#credits",
            "text": "Copyright (c) 2017 LeRoy Miller",
            "title": "Credits"
        },
        {
            "location": "/projects/robot/L298MotorDrive/README/#license",
            "text": "This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.  This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "License"
        },
        {
            "location": "/projects/robot/BittyBot/",
            "text": "Bitty Bot\n\n\nCode for the Bitty Bot Rover.\n\n\nInstallation\n\n\nTODO: Describe the installation process\n\n\nUsage\n\n\nTODO: Write usage instructions\n\n\nContributing\n\n\n\n\nFork it!\n\n\nCreate your feature branch: \ngit checkout -b my-new-feature\n\n\nCommit your changes: \ngit commit -am 'Add some feature'\n\n\nPush to the branch: \ngit push origin my-new-feature\n\n\nSubmit a pull request\n\n\n\n\nCredits\n\n\nLeRoy Miller\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses",
            "title": "BittyBot"
        },
        {
            "location": "/projects/robot/BittyBot/#bitty-bot",
            "text": "Code for the Bitty Bot Rover.",
            "title": "Bitty Bot"
        },
        {
            "location": "/projects/robot/BittyBot/#installation",
            "text": "TODO: Describe the installation process",
            "title": "Installation"
        },
        {
            "location": "/projects/robot/BittyBot/#usage",
            "text": "TODO: Write usage instructions",
            "title": "Usage"
        },
        {
            "location": "/projects/robot/BittyBot/#contributing",
            "text": "Fork it!  Create your feature branch:  git checkout -b my-new-feature  Commit your changes:  git commit -am 'Add some feature'  Push to the branch:  git push origin my-new-feature  Submit a pull request",
            "title": "Contributing"
        },
        {
            "location": "/projects/robot/BittyBot/#credits",
            "text": "LeRoy Miller",
            "title": "Credits"
        },
        {
            "location": "/projects/robot/BittyBot/#license",
            "text": "This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.  This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses",
            "title": "License"
        },
        {
            "location": "/projects/robot/BittyBot2Library/",
            "text": "Bitty Bot\n\n\nTesting Library for Bitty Bot Rover.\nVersion 2 of a Bitty Bot Motor Library, not working correctly.\nFor something that is working, that this library was based from see the testing-class branch of this \nrepository.\nUpdated for testing Sept 4, 2016\n\n\nInstallation\n\n\nTODO: Describe the installation process\n\n\nUsage\n\n\nPut BittyBot folder in your libraries directory, restart the IDE, and test it out. \n\n\nA number of changes have happened to update the library: \n\n\ninclude \"BittyBot2.h\"\n\n\ncreate a BittyBot object -\n\n\nBittyBot BittyBot2(PWMLPin, PWMRPin, L1Pin, L2Pin, L3Pin, L4Pin);\n\n\nBittyBot.begin(); // This setups the pins for output, it sets a speed of zero, and sets the drive pins to low, and calibrates the wheels to the magnetic sensor \nBittyBot.Speed(LeftSpeed, RightSpeed);\nBittyBot.update(); //checks to see if motors have been running for a specific time period. Time is passed with the movement commands\nBittyBot.leftTight(time);  //turn in place to the left\nBittyBot.rightTight(time); //turn in place to the right\nBittyBot.left(time);   //turn left going forward\nBittyBot.stop(); //stop all motors and pwm. No delay \nBittyBot.right(time); //turn right going forward\nBittyBot.forward(time); //move the robot forward\nBittyBot.back(time); // move the robot backward\nBittyBot.IsRunning(); //returns a 1 if the motors should be on and running, and a zero if they should be off and stopped.  This can be used for loops, or for checks to see if it really is moving\nBittyBot.calibrate(); //used by the begin sub-routine, could be used to reset the wheels if you think they have gotten too far from each other. Does not reset the drive pins to low, so a stop just after might be needed.\n\n\nSee Library Sketch for some examples.\n\n\nContributing\n\n\n\n\nFork it!\n\n\nCreate your feature branch: \ngit checkout -b my-new-feature\n\n\nCommit your changes: \ngit commit -am 'Add some feature'\n\n\nPush to the branch: \ngit push origin my-new-feature\n\n\nSubmit a pull request\n\n\n\n\nCredits\n\n\nLeRoy Miller\n\n\nThis is my very 2nd Arduino Library, it was not as easy to convert the class sketch to a library, and this library is currently broken.\nOct 3, 2015\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses",
            "title": "BittyBot 2"
        },
        {
            "location": "/projects/robot/BittyBot2Library/#bitty-bot",
            "text": "Testing Library for Bitty Bot Rover.\nVersion 2 of a Bitty Bot Motor Library, not working correctly.\nFor something that is working, that this library was based from see the testing-class branch of this \nrepository.\nUpdated for testing Sept 4, 2016",
            "title": "Bitty Bot"
        },
        {
            "location": "/projects/robot/BittyBot2Library/#installation",
            "text": "TODO: Describe the installation process",
            "title": "Installation"
        },
        {
            "location": "/projects/robot/BittyBot2Library/#usage",
            "text": "Put BittyBot folder in your libraries directory, restart the IDE, and test it out.   A number of changes have happened to update the library:   include \"BittyBot2.h\"  create a BittyBot object -  BittyBot BittyBot2(PWMLPin, PWMRPin, L1Pin, L2Pin, L3Pin, L4Pin);  BittyBot.begin(); // This setups the pins for output, it sets a speed of zero, and sets the drive pins to low, and calibrates the wheels to the magnetic sensor \nBittyBot.Speed(LeftSpeed, RightSpeed);\nBittyBot.update(); //checks to see if motors have been running for a specific time period. Time is passed with the movement commands\nBittyBot.leftTight(time);  //turn in place to the left\nBittyBot.rightTight(time); //turn in place to the right\nBittyBot.left(time);   //turn left going forward\nBittyBot.stop(); //stop all motors and pwm. No delay \nBittyBot.right(time); //turn right going forward\nBittyBot.forward(time); //move the robot forward\nBittyBot.back(time); // move the robot backward\nBittyBot.IsRunning(); //returns a 1 if the motors should be on and running, and a zero if they should be off and stopped.  This can be used for loops, or for checks to see if it really is moving\nBittyBot.calibrate(); //used by the begin sub-routine, could be used to reset the wheels if you think they have gotten too far from each other. Does not reset the drive pins to low, so a stop just after might be needed.  See Library Sketch for some examples.",
            "title": "Usage"
        },
        {
            "location": "/projects/robot/BittyBot2Library/#contributing",
            "text": "Fork it!  Create your feature branch:  git checkout -b my-new-feature  Commit your changes:  git commit -am 'Add some feature'  Push to the branch:  git push origin my-new-feature  Submit a pull request",
            "title": "Contributing"
        },
        {
            "location": "/projects/robot/BittyBot2Library/#credits",
            "text": "LeRoy Miller  This is my very 2nd Arduino Library, it was not as easy to convert the class sketch to a library, and this library is currently broken.\nOct 3, 2015",
            "title": "Credits"
        },
        {
            "location": "/projects/robot/BittyBot2Library/#license",
            "text": "This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.  This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses",
            "title": "License"
        },
        {
            "location": "/projects/robot/CompactRoverLibrary/",
            "text": "BittyBot Compact Rover\n\n\nLibrary for the BittyBot Compact Rover.\nMar 17, 2017 Copyright (C) LeRoy Miller\nbased on the BittyBot Library\n\n\nInstallation\n\n\nTODO: Describe the installation process\n\n\nUsage\n\n\nPut CompactRover folder in your libraries directory, restart the IDE, and test it out. \n\n\nA number of changes have happened to update the library: \n\n\ninclude \"CompactRover.h\"\n\n\ncreate a BittyBot object named bot\n\n\nCompactRovert bot(LeftPin, LeftPWMPin, RightPin, RightPWMPin);\n\n\nIn void setup() put:\nbot.begin(); // This setups the pins for output, it sets a speed of zero, and sets the drive pins to low\n\n\nbot.update(); //checks to see if motors have been running for a specific time period. Time is passed with the movement commands, and should be called often while IsRunning flag is true.\n\n\nbot.leftTight(time, PWMspeed);  //turn in place to the left\nbot.rightTight(time, PWMspeed); //turn in place to the right\nbot.left(time, PWMspeed);   //turn left going forward\nbot.stop(); //stop all motors and pwm. No delay \nbot.right(time, PWMspeed); //turn right going forward\nbot.forward(time, PWMspeed); //move the robot forward\nbot.back(time, PWMspeed); // move the robot backward\n\n\nbot.IsRunning(); //returns a 1 if the motors should be on and running, and a zero if they should be off and stopped.  This can be used for loops, or for checks to see if it really is moving\n\n\nA few examples are included.\n\n\nChanges from BittyBot2 library\n\n\nremoved BittyBot.Speed(), removed BittyBot.calibration(), a number of changes\nto the motor drive setup. CompactRover uses 4 wires for speed and direction, while BittyBot Rover uses 6 wires.\nSome small code cleanup.\n\n\nSketches for BittyBot Rover should be easy to convert for the Compact Rover, with only a few minor changes in the code.\n\n\nContributing\n\n\n\n\nFork it!\n\n\nCreate your feature branch: \ngit checkout -b my-new-feature\n\n\nCommit your changes: \ngit commit -am 'Add some feature'\n\n\nPush to the branch: \ngit push origin my-new-feature\n\n\nSubmit a pull request\n\n\n\n\nCredits\n\n\nCopyright (C) LeRoy Miller, Mar 17, 2017\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "Compact Rover"
        },
        {
            "location": "/projects/robot/CompactRoverLibrary/#bittybot-compact-rover",
            "text": "Library for the BittyBot Compact Rover.\nMar 17, 2017 Copyright (C) LeRoy Miller\nbased on the BittyBot Library",
            "title": "BittyBot Compact Rover"
        },
        {
            "location": "/projects/robot/CompactRoverLibrary/#installation",
            "text": "TODO: Describe the installation process",
            "title": "Installation"
        },
        {
            "location": "/projects/robot/CompactRoverLibrary/#usage",
            "text": "Put CompactRover folder in your libraries directory, restart the IDE, and test it out.   A number of changes have happened to update the library:   include \"CompactRover.h\"  create a BittyBot object named bot  CompactRovert bot(LeftPin, LeftPWMPin, RightPin, RightPWMPin);  In void setup() put:\nbot.begin(); // This setups the pins for output, it sets a speed of zero, and sets the drive pins to low  bot.update(); //checks to see if motors have been running for a specific time period. Time is passed with the movement commands, and should be called often while IsRunning flag is true.  bot.leftTight(time, PWMspeed);  //turn in place to the left\nbot.rightTight(time, PWMspeed); //turn in place to the right\nbot.left(time, PWMspeed);   //turn left going forward\nbot.stop(); //stop all motors and pwm. No delay \nbot.right(time, PWMspeed); //turn right going forward\nbot.forward(time, PWMspeed); //move the robot forward\nbot.back(time, PWMspeed); // move the robot backward  bot.IsRunning(); //returns a 1 if the motors should be on and running, and a zero if they should be off and stopped.  This can be used for loops, or for checks to see if it really is moving  A few examples are included.",
            "title": "Usage"
        },
        {
            "location": "/projects/robot/CompactRoverLibrary/#changes-from-bittybot2-library",
            "text": "removed BittyBot.Speed(), removed BittyBot.calibration(), a number of changes\nto the motor drive setup. CompactRover uses 4 wires for speed and direction, while BittyBot Rover uses 6 wires.\nSome small code cleanup.  Sketches for BittyBot Rover should be easy to convert for the Compact Rover, with only a few minor changes in the code.",
            "title": "Changes from BittyBot2 library"
        },
        {
            "location": "/projects/robot/CompactRoverLibrary/#contributing",
            "text": "Fork it!  Create your feature branch:  git checkout -b my-new-feature  Commit your changes:  git commit -am 'Add some feature'  Push to the branch:  git push origin my-new-feature  Submit a pull request",
            "title": "Contributing"
        },
        {
            "location": "/projects/robot/CompactRoverLibrary/#credits",
            "text": "Copyright (C) LeRoy Miller, Mar 17, 2017",
            "title": "Credits"
        },
        {
            "location": "/projects/robot/CompactRoverLibrary/#license",
            "text": "This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.  This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "License"
        },
        {
            "location": "/projects/robot/RobotNavigationusingRFID/",
            "text": "Robot Navigation using RFID/NFC\n\n\nMy Instructables on my build:\n\n\nhttps://www.instructables.com/id/Robotic-Indoor-Navigation-With-RFIDNFC-Tags\n\n\nParts:\n\n\nIC Card RC522 RFID MFRC-522 Reader Sensor \\$2.00\n\n\nhttp://www.ebay.com/itm/311745603238?_trksid=p2060353.m1438.l2649&ssPageName=STRK%3AMEBIDX%3AIT\n\n\nCards:\n\n\n10 PCS NFC smart card tag 1k S50 IC 13.56Mhz Read/Write RFID \\$2.52\n\n\nhttp://www.ebay.com/itm/262611831216?_trksid=p2060353.m1438.l2649&ssPageName=STRK%3AMEBIDX%3AIT\n\n\n25mm NFC Tags Stickers NTAG213 Stickers 50pcs 9.99\n\n\nhttp://www.ebay.com/itm/322083313127?_trksid=p2060353.m1438.l2649&var=511012085777&ssPageName=STRK%3AMEBIDX%3AIT\n\n\nThe Idea:\n\n\nhttps://www.intorobotics.com/5-cheap-methods-for-indoor-robot-localization-ble-beacon-apriltags-wifi-subpos-nfc-and-rfid/\n\n\nYoutube Video:\n\n\nhttps://www.youtube.com/watch?v=iHCBRCjRnm8\n\n\nOther Location based ideas:\n\n\nhttp://www.localino.net/",
            "title": "Robot Indoor Navigation using RFID"
        },
        {
            "location": "/hamradio/hotspot/",
            "text": "Hotspot on 438.800Mhz - KD8BXP Current digital modes supported D-Star, DMR  \n\n\nMMDVM on Raspberry PI Zero W, running PI-Star Image on 8gb SD card.  \n\n\nD-Star Reflector Information:  \n\n\nRPT1: KD8BXP B  \n\n\nRPT2: KD8BXP G  \n\n\nProgrammed into the ID-92:  \n\n\n\n\n\n\n\n\nRefelctor\n\n\nInformation\n\n\nLocation\n\n\n\n\n\n\n\n\n\n\nREF001C\n\n\nD-Stars Mega Repeater\n\n\nUnited States\n\n\n\n\n\n\nREF002C\n\n\nSome Nets\n\n\nNE United States\n\n\n\n\n\n\nREF004C\n\n\nGeneral Rag Chew (English Only Please)\n\n\nUnited States\n\n\n\n\n\n\nREF015C\n\n\nData Only - Worldwide Use\n\n\nLondon, England\n\n\n\n\n\n\nREF016C\n\n\nGeneral Amateur Use\n\n\nBritish Columbia, Canada\n\n\n\n\n\n\nREF024C\n\n\nGeneral Use\n\n\nUnited States\n\n\n\n\n\n\nREF025A\n\n\nPublic Service, Skywarn & Emergency Use\n\n\nWashington, DC\n\n\n\n\n\n\nREF025C\n\n\nGeneral Usage & Sunday Night NCR net\n\n\nWashington, DC\n\n\n\n\n\n\nREF026A\n\n\nGeneral Use\n\n\nVancouver, BC Canada\n\n\n\n\n\n\nREF038A\n\n\nThe Ohio Reflector\n\n\nCleveland, Ohio\n\n\n\n\n\n\nREF038B\n\n\nNODIG Permalink\n\n\nCleveland, Ohio\n\n\n\n\n\n\nREF038C\n\n\nDayton Hamvention and the ARRL\n\n\n\n\n\n\n\n\nREF039A\n\n\nOhio State Wide ARES\n\n\nWellington, Ohio\n\n\n\n\n\n\nREF039B\n\n\nOhio State Wide EMA\n\n\nWellington, Ohio\n\n\n\n\n\n\nREF039C\n\n\nOhio State WIde Severe Weather\n\n\nWellington, Ohio\n\n\n\n\n\n\nREF039D\n\n\nAmerican Red Cross Operation in Ohio\n\n\nWellington, Ohio\n\n\n\n\n\n\nREF051B\n\n\nClub and other non-emergency nets\n\n\nChicago, IL\n\n\n\n\n\n\nREF051C\n\n\nCasual Use/ Ragchewing\n\n\nChicago, IL\n\n\n\n\n\n\n\n\nDMR Information Coming Soon:",
            "title": "MMDVM Hotspot Info"
        },
        {
            "location": "/",
            "text": "This is Random Wire!\n\n\nHere you'll find some of most of my hobbies.\n\nEverything ranging from Arduino/Robotics, to Sherlock Holmes and\n\nThe Orville, and maybe even some Ham Radio Stuff.  \n\n\nSupport Me\n\n\nIf you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.\n\n\nPatreon\n\n\nKo-fi\n\n\nPayPal\n  \n\n\nOther Projects\n\n\nKD8BXP's Youtube Channel\n\n\nKD8BXP's Blog\n\n\nCredits\n\n\nCopyright (c) 2017/2018/2019 LeRoy Miller\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "Sherlock Holmes"
        },
        {
            "location": "/#this-is-random-wire",
            "text": "Here you'll find some of most of my hobbies. \nEverything ranging from Arduino/Robotics, to Sherlock Holmes and \nThe Orville, and maybe even some Ham Radio Stuff.",
            "title": "This is Random Wire!"
        },
        {
            "location": "/#support-me",
            "text": "If you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.  Patreon  Ko-fi  PayPal",
            "title": "Support Me"
        },
        {
            "location": "/#other-projects",
            "text": "KD8BXP's Youtube Channel  KD8BXP's Blog",
            "title": "Other Projects"
        },
        {
            "location": "/#credits",
            "text": "Copyright (c) 2017/2018/2019 LeRoy Miller",
            "title": "Credits"
        },
        {
            "location": "/#license",
            "text": "This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "License"
        },
        {
            "location": "/",
            "text": "This is Random Wire!\n\n\nHere you'll find some of most of my hobbies.\n\nEverything ranging from Arduino/Robotics, to Sherlock Holmes and\n\nThe Orville, and maybe even some Ham Radio Stuff.  \n\n\nSupport Me\n\n\nIf you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.\n\n\nPatreon\n\n\nKo-fi\n\n\nPayPal\n  \n\n\nOther Projects\n\n\nKD8BXP's Youtube Channel\n\n\nKD8BXP's Blog\n\n\nCredits\n\n\nCopyright (c) 2017/2018/2019 LeRoy Miller\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "Pen and Paper RPG Games"
        },
        {
            "location": "/#this-is-random-wire",
            "text": "Here you'll find some of most of my hobbies. \nEverything ranging from Arduino/Robotics, to Sherlock Holmes and \nThe Orville, and maybe even some Ham Radio Stuff.",
            "title": "This is Random Wire!"
        },
        {
            "location": "/#support-me",
            "text": "If you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.  Patreon  Ko-fi  PayPal",
            "title": "Support Me"
        },
        {
            "location": "/#other-projects",
            "text": "KD8BXP's Youtube Channel  KD8BXP's Blog",
            "title": "Other Projects"
        },
        {
            "location": "/#credits",
            "text": "Copyright (c) 2017/2018/2019 LeRoy Miller",
            "title": "Credits"
        },
        {
            "location": "/#license",
            "text": "This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "License"
        },
        {
            "location": "/",
            "text": "This is Random Wire!\n\n\nHere you'll find some of most of my hobbies.\n\nEverything ranging from Arduino/Robotics, to Sherlock Holmes and\n\nThe Orville, and maybe even some Ham Radio Stuff.  \n\n\nSupport Me\n\n\nIf you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.\n\n\nPatreon\n\n\nKo-fi\n\n\nPayPal\n  \n\n\nOther Projects\n\n\nKD8BXP's Youtube Channel\n\n\nKD8BXP's Blog\n\n\nCredits\n\n\nCopyright (c) 2017/2018/2019 LeRoy Miller\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "X Minus One"
        },
        {
            "location": "/#this-is-random-wire",
            "text": "Here you'll find some of most of my hobbies. \nEverything ranging from Arduino/Robotics, to Sherlock Holmes and \nThe Orville, and maybe even some Ham Radio Stuff.",
            "title": "This is Random Wire!"
        },
        {
            "location": "/#support-me",
            "text": "If you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.  Patreon  Ko-fi  PayPal",
            "title": "Support Me"
        },
        {
            "location": "/#other-projects",
            "text": "KD8BXP's Youtube Channel  KD8BXP's Blog",
            "title": "Other Projects"
        },
        {
            "location": "/#credits",
            "text": "Copyright (c) 2017/2018/2019 LeRoy Miller",
            "title": "Credits"
        },
        {
            "location": "/#license",
            "text": "This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "License"
        },
        {
            "location": "/",
            "text": "This is Random Wire!\n\n\nHere you'll find some of most of my hobbies.\n\nEverything ranging from Arduino/Robotics, to Sherlock Holmes and\n\nThe Orville, and maybe even some Ham Radio Stuff.  \n\n\nSupport Me\n\n\nIf you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.\n\n\nPatreon\n\n\nKo-fi\n\n\nPayPal\n  \n\n\nOther Projects\n\n\nKD8BXP's Youtube Channel\n\n\nKD8BXP's Blog\n\n\nCredits\n\n\nCopyright (c) 2017/2018/2019 LeRoy Miller\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "The Orville"
        },
        {
            "location": "/#this-is-random-wire",
            "text": "Here you'll find some of most of my hobbies. \nEverything ranging from Arduino/Robotics, to Sherlock Holmes and \nThe Orville, and maybe even some Ham Radio Stuff.",
            "title": "This is Random Wire!"
        },
        {
            "location": "/#support-me",
            "text": "If you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.  Patreon  Ko-fi  PayPal",
            "title": "Support Me"
        },
        {
            "location": "/#other-projects",
            "text": "KD8BXP's Youtube Channel  KD8BXP's Blog",
            "title": "Other Projects"
        },
        {
            "location": "/#credits",
            "text": "Copyright (c) 2017/2018/2019 LeRoy Miller",
            "title": "Credits"
        },
        {
            "location": "/#license",
            "text": "This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "License"
        },
        {
            "location": "/",
            "text": "This is Random Wire!\n\n\nHere you'll find some of most of my hobbies.\n\nEverything ranging from Arduino/Robotics, to Sherlock Holmes and\n\nThe Orville, and maybe even some Ham Radio Stuff.  \n\n\nSupport Me\n\n\nIf you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.\n\n\nPatreon\n\n\nKo-fi\n\n\nPayPal\n  \n\n\nOther Projects\n\n\nKD8BXP's Youtube Channel\n\n\nKD8BXP's Blog\n\n\nCredits\n\n\nCopyright (c) 2017/2018/2019 LeRoy Miller\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "Forbidden Planet (C-57D)"
        },
        {
            "location": "/#this-is-random-wire",
            "text": "Here you'll find some of most of my hobbies. \nEverything ranging from Arduino/Robotics, to Sherlock Holmes and \nThe Orville, and maybe even some Ham Radio Stuff.",
            "title": "This is Random Wire!"
        },
        {
            "location": "/#support-me",
            "text": "If you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.  Patreon  Ko-fi  PayPal",
            "title": "Support Me"
        },
        {
            "location": "/#other-projects",
            "text": "KD8BXP's Youtube Channel  KD8BXP's Blog",
            "title": "Other Projects"
        },
        {
            "location": "/#credits",
            "text": "Copyright (c) 2017/2018/2019 LeRoy Miller",
            "title": "Credits"
        },
        {
            "location": "/#license",
            "text": "This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "License"
        },
        {
            "location": "/",
            "text": "This is Random Wire!\n\n\nHere you'll find some of most of my hobbies.\n\nEverything ranging from Arduino/Robotics, to Sherlock Holmes and\n\nThe Orville, and maybe even some Ham Radio Stuff.  \n\n\nSupport Me\n\n\nIf you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.\n\n\nPatreon\n\n\nKo-fi\n\n\nPayPal\n  \n\n\nOther Projects\n\n\nKD8BXP's Youtube Channel\n\n\nKD8BXP's Blog\n\n\nCredits\n\n\nCopyright (c) 2017/2018/2019 LeRoy Miller\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "DC Comics"
        },
        {
            "location": "/#this-is-random-wire",
            "text": "Here you'll find some of most of my hobbies. \nEverything ranging from Arduino/Robotics, to Sherlock Holmes and \nThe Orville, and maybe even some Ham Radio Stuff.",
            "title": "This is Random Wire!"
        },
        {
            "location": "/#support-me",
            "text": "If you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.  Patreon  Ko-fi  PayPal",
            "title": "Support Me"
        },
        {
            "location": "/#other-projects",
            "text": "KD8BXP's Youtube Channel  KD8BXP's Blog",
            "title": "Other Projects"
        },
        {
            "location": "/#credits",
            "text": "Copyright (c) 2017/2018/2019 LeRoy Miller",
            "title": "Credits"
        },
        {
            "location": "/#license",
            "text": "This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "License"
        },
        {
            "location": "/",
            "text": "This is Random Wire!\n\n\nHere you'll find some of most of my hobbies.\n\nEverything ranging from Arduino/Robotics, to Sherlock Holmes and\n\nThe Orville, and maybe even some Ham Radio Stuff.  \n\n\nSupport Me\n\n\nIf you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.\n\n\nPatreon\n\n\nKo-fi\n\n\nPayPal\n  \n\n\nOther Projects\n\n\nKD8BXP's Youtube Channel\n\n\nKD8BXP's Blog\n\n\nCredits\n\n\nCopyright (c) 2017/2018/2019 LeRoy Miller\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "Lord of the Rings"
        },
        {
            "location": "/#this-is-random-wire",
            "text": "Here you'll find some of most of my hobbies. \nEverything ranging from Arduino/Robotics, to Sherlock Holmes and \nThe Orville, and maybe even some Ham Radio Stuff.",
            "title": "This is Random Wire!"
        },
        {
            "location": "/#support-me",
            "text": "If you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.  Patreon  Ko-fi  PayPal",
            "title": "Support Me"
        },
        {
            "location": "/#other-projects",
            "text": "KD8BXP's Youtube Channel  KD8BXP's Blog",
            "title": "Other Projects"
        },
        {
            "location": "/#credits",
            "text": "Copyright (c) 2017/2018/2019 LeRoy Miller",
            "title": "Credits"
        },
        {
            "location": "/#license",
            "text": "This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "License"
        },
        {
            "location": "/",
            "text": "This is Random Wire!\n\n\nHere you'll find some of most of my hobbies.\n\nEverything ranging from Arduino/Robotics, to Sherlock Holmes and\n\nThe Orville, and maybe even some Ham Radio Stuff.  \n\n\nSupport Me\n\n\nIf you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.\n\n\nPatreon\n\n\nKo-fi\n\n\nPayPal\n  \n\n\nOther Projects\n\n\nKD8BXP's Youtube Channel\n\n\nKD8BXP's Blog\n\n\nCredits\n\n\nCopyright (c) 2017/2018/2019 LeRoy Miller\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "Noris Methology"
        },
        {
            "location": "/#this-is-random-wire",
            "text": "Here you'll find some of most of my hobbies. \nEverything ranging from Arduino/Robotics, to Sherlock Holmes and \nThe Orville, and maybe even some Ham Radio Stuff.",
            "title": "This is Random Wire!"
        },
        {
            "location": "/#support-me",
            "text": "If you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.  Patreon  Ko-fi  PayPal",
            "title": "Support Me"
        },
        {
            "location": "/#other-projects",
            "text": "KD8BXP's Youtube Channel  KD8BXP's Blog",
            "title": "Other Projects"
        },
        {
            "location": "/#credits",
            "text": "Copyright (c) 2017/2018/2019 LeRoy Miller",
            "title": "Credits"
        },
        {
            "location": "/#license",
            "text": "This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "License"
        },
        {
            "location": "/",
            "text": "This is Random Wire!\n\n\nHere you'll find some of most of my hobbies.\n\nEverything ranging from Arduino/Robotics, to Sherlock Holmes and\n\nThe Orville, and maybe even some Ham Radio Stuff.  \n\n\nSupport Me\n\n\nIf you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.\n\n\nPatreon\n\n\nKo-fi\n\n\nPayPal\n  \n\n\nOther Projects\n\n\nKD8BXP's Youtube Channel\n\n\nKD8BXP's Blog\n\n\nCredits\n\n\nCopyright (c) 2017/2018/2019 LeRoy Miller\n\n\nLicense\n\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "More Stuff"
        },
        {
            "location": "/#this-is-random-wire",
            "text": "Here you'll find some of most of my hobbies. \nEverything ranging from Arduino/Robotics, to Sherlock Holmes and \nThe Orville, and maybe even some Ham Radio Stuff.",
            "title": "This is Random Wire!"
        },
        {
            "location": "/#support-me",
            "text": "If you find this or any of my projects useful or enjoyable please support me.\nAnything I do get goes to buy more parts and make more/better projects.  Patreon  Ko-fi  PayPal",
            "title": "Support Me"
        },
        {
            "location": "/#other-projects",
            "text": "KD8BXP's Youtube Channel  KD8BXP's Blog",
            "title": "Other Projects"
        },
        {
            "location": "/#credits",
            "text": "Copyright (c) 2017/2018/2019 LeRoy Miller",
            "title": "Credits"
        },
        {
            "location": "/#license",
            "text": "This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses>",
            "title": "License"
        },
        {
            "location": "/leroy/",
            "text": "I am LeRoy Miller, KD8BXP\n\n\nGet my GPG public key from:\ngpg --keyserver pgp.mit.edu --recv-keys 5E5C9A9D\n\n\nMy GPG finger print is: 9545 12FF F306 04E0 F6FB  E4BB B6B7 DA61 5E5C 9A9D",
            "title": "About Me"
        }
    ]
}